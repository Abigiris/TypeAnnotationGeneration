{
    "nd889-master/1_foundations/1_sudoku/solution.py": {
        "solve": {
            "name": "solve",
            "location": 12,
            "return": [
                "int",
                "bool",
                "List[Dict]"
            ],
            "arguments": {
                "board_string": [
                    "str",
                    "TextIO",
                    "float",
                    "int"
                ]
            }
        },
        "naked_twins": {
            "name": "naked_twins",
            "location": 19,
            "return": [
                "str",
                "List[dict]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "board_dict": [
                    "Dict[str,Any]",
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "nd889-master/1_foundations/1_sudoku/__init__.py": {},
    "nd889-master/1_foundations/1_sudoku/sudoku/board.py": {
        "Board.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "diagonal_mode": [
                    "bool",
                    "bytes"
                ]
            }
        },
        "Board.cross": {
            "name": "cross",
            "location": 31,
            "return": [
                "bool",
                "List[Text]"
            ],
            "arguments": {
                "x_axis": [
                    "str",
                    "int",
                    "float",
                    "T"
                ],
                "y_axis": [
                    "str",
                    "int",
                    "float",
                    "T"
                ]
            }
        },
        "Board.boxes": {
            "name": "boxes",
            "location": 36,
            "return": [
                "int",
                "str"
            ],
            "arguments": {}
        },
        "Board.num_boxes": {
            "name": "num_boxes",
            "location": 41,
            "return": [
                "int",
                "bytes",
                "Optional[List[str]]"
            ],
            "arguments": {}
        },
        "Board._row_units": {
            "name": "_row_units",
            "location": 46,
            "return": [
                "int",
                "List"
            ],
            "arguments": {}
        },
        "Board._column_units": {
            "name": "_column_units",
            "location": 51,
            "return": [
                "List",
                "float",
                "str",
                "Optional[float]",
                "Optional[str]",
                "List[str]",
                "bool"
            ],
            "arguments": {}
        },
        "Board._diagonal_units": {
            "name": "_diagonal_units",
            "location": 56,
            "return": [
                "List[list]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "Board._square_units": {
            "name": "_square_units",
            "location": 64,
            "return": [
                "List",
                "str",
                "Dict[str,Dict[str,int]]",
                "int",
                "bool",
                "Tuple"
            ],
            "arguments": {}
        },
        "Board.all_units": {
            "name": "all_units",
            "location": 70,
            "return": [
                "str",
                "Set[str]",
                "List[str]",
                "Dict[int,dict[str,str]]",
                "Tuple[Union[str,str,str]]",
                "Tuple[Union[int,int,int,int,int]]",
                "Dict[str,str]",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.generate_units": {
            "name": "generate_units",
            "location": 83,
            "return": [
                "int",
                "Dict",
                "Callable",
                "Dict[str,bool]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.units": {
            "name": "units",
            "location": 95,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "box": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Board.generate_peers": {
            "name": "generate_peers",
            "location": 101,
            "return": [
                "Dict",
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.peers": {
            "name": "peers",
            "location": 110,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "box": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Board.grid_values": {
            "name": "grid_values",
            "location": 117,
            "return": [
                "Dict[int,Union[str,dict,list,dict[str,dict[str,Any]],list[str]]]",
                "Dict[str,Any]",
                "Dict",
                "Dict[str,Dict[str,str]]",
                "int"
            ],
            "arguments": {
                "board_string": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Board.board_to_str": {
            "name": "board_to_str",
            "location": 131,
            "return": [
                "Text",
                "str",
                "float"
            ],
            "arguments": {
                "board_dict": [
                    "Dict",
                    "Dict[str,float]",
                    "Dict[str,str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "Board.eliminate": {
            "name": "eliminate",
            "location": 141,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "board_dict": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Board.only_choice": {
            "name": "only_choice",
            "location": 151,
            "return": [
                "List",
                "Dict[str,Any]",
                "bytes",
                "Dict",
                "Dict[str,Dict[str,str]]"
            ],
            "arguments": {
                "self": [],
                "board_dict": [
                    "List",
                    "bytes",
                    "Dict",
                    "Dict[str,str]",
                    "Callable",
                    "int",
                    "OrderedDict"
                ]
            }
        },
        "Board.num_solved_boxes": {
            "name": "num_solved_boxes",
            "location": 163,
            "return": [
                "int",
                "List",
                "List[Dict[str,Any]]",
                "frozenset",
                "str"
            ],
            "arguments": {
                "board_dict": [
                    "Dict[str, Any]",
                    "List[\"libkol.types.ItemQuantity\"]",
                    "bytes",
                    "dict",
                    "Dict[str, bytes]"
                ]
            }
        },
        "Board.sorted_box_possibilities": {
            "name": "sorted_box_possibilities",
            "location": 169,
            "return": [
                "List",
                "str",
                "List[int]"
            ],
            "arguments": {
                "board_dict": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Board.reduce_puzzle": {
            "name": "reduce_puzzle",
            "location": 175,
            "return": [
                "None",
                "Optional[str]",
                "Dict",
                "Optional[int]",
                "Dict[str,int]",
                "List",
                "str"
            ],
            "arguments": {
                "self": [],
                "board_dict": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "Board.validate": {
            "name": "validate",
            "location": 199,
            "return": [
                "bool",
                "List[str]",
                "str",
                "Sequence",
                "Sequence[str]",
                "Mapping"
            ],
            "arguments": {
                "self": [],
                "board_dict": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "Board.search": {
            "name": "search",
            "location": 212,
            "return": [
                "Optional[str]",
                "None",
                "Optional[float]",
                "List",
                "int",
                "Dict",
                "bool",
                "Dict[str,int]"
            ],
            "arguments": {
                "self": [],
                "board_dict": [
                    "str",
                    "bool",
                    "List[str]",
                    "Sequence[str]",
                    "float",
                    "Dict",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Board.naked_twins": {
            "name": "naked_twins",
            "location": 243,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "board_dict": [
                    "Dict[str, Any]"
                ]
            }
        },
        "Board.naked_multi": {
            "name": "naked_multi",
            "location": 266,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "board_dict": [
                    "dict"
                ],
                "size": [
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Board._remove_values_in_boxes": {
            "name": "_remove_values_in_boxes",
            "location": 304,
            "return": [
                "Dict[str, float]",
                "dict",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "board_dict": [
                    "str",
                    "Dict[str, dict]"
                ],
                "values": [
                    "Set[str]",
                    "str",
                    "Dict",
                    "Optional[str]",
                    "AbstractSet[str]",
                    "bool"
                ],
                "boxes": [
                    "List[str]",
                    "Dict",
                    "str",
                    "bool",
                    "int",
                    "Iterable[Dict[str,Any]]"
                ]
            }
        },
        "Board.display": {
            "name": "display",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "values": [
                    "int",
                    "Sequence[Any]",
                    "str",
                    "float",
                    "List[str]",
                    "List"
                ]
            }
        }
    },
    "nd889-master/1_foundations/1_sudoku/sudoku/__init__.py": {},
    "nd889-master/1_foundations/1_sudoku/tests/board_test.py": {
        "test_cross": {
            "name": "test_cross",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_boxes": {
            "name": "test_boxes",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_row_units": {
            "name": "test_row_units",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_column_units": {
            "name": "test_column_units",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_square_units": {
            "name": "test_square_units",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_peers": {
            "name": "test_peers",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_peers_diagonal": {
            "name": "test_peers_diagonal",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_grid_values": {
            "name": "test_grid_values",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_grid_values_fail": {
            "name": "test_grid_values_fail",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_board_to_str": {
            "name": "test_board_to_str",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_eliminate": {
            "name": "test_eliminate",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_only_choice": {
            "name": "test_only_choice",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reduce_puzzle": {
            "name": "test_reduce_puzzle",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reduce_puzzle_incomplete": {
            "name": "test_reduce_puzzle_incomplete",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reduce_puzzle_fail": {
            "name": "test_reduce_puzzle_fail",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate": {
            "name": "test_validate",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_fail": {
            "name": "test_validate_fail",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sorted_box_possibilities": {
            "name": "test_sorted_box_possibilities",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_search": {
            "name": "test_search",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_diagonal_board": {
            "name": "test_diagonal_board",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_diagonal_units": {
            "name": "test_diagonal_units",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_values_in_boxes": {
            "name": "test_remove_values_in_boxes",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_display_board": {
            "name": "test_display_board",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "nd889-master/1_foundations/1_sudoku/tests/diagonal_test.py": {
        "test_diagonal": {
            "name": "test_diagonal",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nd889-master/1_foundations/1_sudoku/tests/naked_multi_test.py": {
        "test_naked_multi_2": {
            "name": "test_naked_multi_2",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_naked_multi_3": {
            "name": "test_naked_multi_3",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_naked_multi_4": {
            "name": "test_naked_multi_4",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nd889-master/1_foundations/1_sudoku/tests/naked_twins_test.py": {
        "test_naked_twins_1": {
            "name": "test_naked_twins_1",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_naked_twins_2": {
            "name": "test_naked_twins_2",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nd889-master/1_foundations/1_sudoku/tests/__init__.py": {},
    "nd889-master/1_foundations/1_sudoku/tests/udacity/solution_test.py": {
        "TestNakedTwins.test_naked_twins": {
            "name": "test_naked_twins",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNakedTwins.test_naked_twins2": {
            "name": "test_naked_twins2",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDiagonalSudoku.test_solve": {
            "name": "test_solve",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nd889-master/1_foundations/2_isolation/agent_test.py": {
        "curr_time_millis": {
            "name": "curr_time_millis",
            "location": 65,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "handler": {
            "name": "handler",
            "location": 70,
            "return": [],
            "arguments": {
                "obj": [
                    "int",
                    "Optional[\"Outcome\"]",
                    "float",
                    "Iterable[Optional[Any]]"
                ],
                "testcase": [
                    "int",
                    "Optional[\"Outcome\"]",
                    "float",
                    "Iterable[Optional[Any]]"
                ],
                "queue": [
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "timeout": {
            "name": "timeout",
            "location": 80,
            "return": [
                "float",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "time_limit": [
                    "int",
                    "Optional[Exception]",
                    "str"
                ]
            }
        },
        "makeEvalTable": {
            "name": "makeEvalTable",
            "location": 116,
            "return": [
                "str",
                "Sequence"
            ],
            "arguments": {
                "table": [
                    "Callable",
                    "bool",
                    "Optional[Callable]",
                    "List[str]",
                    "str",
                    "list"
                ]
            }
        },
        "makeEvalStop": {
            "name": "makeEvalStop",
            "location": 132,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "limit": [
                    "int",
                    "Iterable['cirq.Qid']",
                    "Optional[T]",
                    "bool"
                ],
                "timer": [
                    "int",
                    "Iterable['cirq.Qid']",
                    "Optional[T]",
                    "bool"
                ],
                "value": [
                    "int",
                    "Iterable['cirq.Qid']",
                    "Optional[T]",
                    "bool"
                ]
            }
        },
        "makeBranchEval": {
            "name": "makeBranchEval",
            "location": 153,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "first_branch": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "timeout.wrapUnitTest": {
            "name": "wrapUnitTest",
            "location": 91,
            "return": [
                "List[str]",
                "str",
                "queue.Queue",
                "Mapping[str, Any]",
                "bytes"
            ],
            "arguments": {
                "testcase": [
                    "bool",
                    "Callable[[], bytes]",
                    "BaseException",
                    "int",
                    "list"
                ]
            }
        },
        "makeEvalTable.score": {
            "name": "score",
            "location": 125,
            "return": [],
            "arguments": {
                "game": [],
                "player": []
            }
        },
        "makeEvalStop.score": {
            "name": "score",
            "location": 142,
            "return": [],
            "arguments": {
                "game": [],
                "player": []
            }
        },
        "makeBranchEval.score": {
            "name": "score",
            "location": 163,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "game": [
                    "bytes",
                    "str"
                ],
                "player": [
                    "Optional[\"Game\"]",
                    "isolation.Board"
                ]
            }
        },
        "CounterBoard.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CounterBoard.copy": {
            "name": "copy",
            "location": 187,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CounterBoard.forecast_move": {
            "name": "forecast_move",
            "location": 201,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "bytes"
                ]
            }
        },
        "CounterBoard.counts": {
            "name": "counts",
            "location": 211,
            "return": [
                "Optional[int]",
                "str",
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project1Test.initAUT": {
            "name": "initAUT",
            "location": 218,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "bool"
                ],
                "eval_fn": [
                    "bool"
                ],
                "iterative": [
                    "bool"
                ],
                "method": [
                    "bool"
                ],
                "loc1": [
                    "int",
                    "str",
                    "float"
                ],
                "loc2": [
                    "int",
                    "str",
                    "float"
                ],
                "w": [
                    "bool",
                    "float",
                    "str",
                    "Union[float, Tuple[float, float]]",
                    "Optional[Any]"
                ],
                "h": [
                    "bool",
                    "float",
                    "str",
                    "Union[float, Tuple[float, float]]",
                    "Optional[Any]"
                ]
            }
        },
        "Project1Test.test_heuristic": {
            "name": "test_heuristic",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Project1Test.test_minimax_interface": {
            "name": "test_minimax_interface",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Project1Test.test_alphabeta_interface": {
            "name": "test_alphabeta_interface",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Project1Test.test_get_move_interface": {
            "name": "test_get_move_interface",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Project1Test.test_minimax": {
            "name": "test_minimax",
            "location": 362,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Project1Test.test_alphabeta": {
            "name": "test_alphabeta",
            "location": 427,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Project1Test.test_get_move": {
            "name": "test_get_move",
            "location": 482,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "timeout.wrapUnitTest.testWrapper": {
            "name": "testWrapper",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project1Test.test_get_move.DynamicTimer.__init__": {
            "name": "__init__",
            "location": 498,
            "return": [],
            "arguments": {
                "self": [],
                "time_limit": [
                    "int",
                    "float"
                ]
            }
        },
        "Project1Test.test_get_move.DynamicTimer.time_left": {
            "name": "time_left",
            "location": 502,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nd889-master/1_foundations/2_isolation/chromosome.py": {
        "score_chromosome": {
            "name": "score_chromosome",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "chromesome": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "score_chromosome.score": {
            "name": "score",
            "location": 40,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "game": [
                    "isolation.Board"
                ],
                "player": [
                    "isolation.Board"
                ]
            }
        }
    },
    "nd889-master/1_foundations/2_isolation/game_agent.py": {
        "custom_score": {
            "name": "custom_score",
            "location": 26,
            "return": [
                "str",
                "bytes",
                "Tuple[str, str]"
            ],
            "arguments": {
                "game": [
                    "str",
                    "isolation.Board"
                ],
                "player": [
                    "str",
                    "isolation.Board"
                ]
            }
        },
        "mov_pos_block": {
            "name": "mov_pos_block",
            "location": 62,
            "return": [
                "float",
                "int",
                "Optional[int]",
                "List[int]",
                "str",
                "Tuple[Tuple[int,Any]]"
            ],
            "arguments": {
                "game": [
                    "isolation.Board"
                ],
                "player": [
                    "isolation.Board"
                ]
            }
        },
        "moves_ratio": {
            "name": "moves_ratio",
            "location": 92,
            "return": [
                "float",
                "Tuple[Any,Any,Any]",
                "str",
                "int"
            ],
            "arguments": {
                "game": [
                    "isolation.Board"
                ],
                "player": [
                    "isolation.Board"
                ]
            }
        },
        "quick_center": {
            "name": "quick_center",
            "location": 123,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "game": [
                    "isolation.Board"
                ],
                "player": [
                    "isolation.Board"
                ]
            }
        },
        "board_rank": {
            "name": "board_rank",
            "location": 175,
            "return": [
                "Dict[tuple,int]",
                "str",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "game": [
                    "None",
                    "Optional[Game]",
                    "isolation.Board"
                ],
                "player": [
                    "None",
                    "Optional[Game]",
                    "isolation.Board"
                ]
            }
        },
        "board_proximity": {
            "name": "board_proximity",
            "location": 199,
            "return": [
                "Dict[tuple,list[tuple]]",
                "str",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "game": [
                    "None",
                    "Optional[Game]",
                    "isolation.Board"
                ],
                "player": [
                    "None",
                    "Optional[Game]",
                    "isolation.Board"
                ]
            }
        },
        "ensemble": {
            "name": "ensemble",
            "location": 217,
            "return": [
                "str"
            ],
            "arguments": {
                "game": [],
                "player": []
            }
        },
        "plane_walker": {
            "name": "plane_walker",
            "location": 237,
            "return": [
                "float",
                "Optional[int]",
                "str",
                "Generator",
                "int"
            ],
            "arguments": {
                "game": [],
                "player": []
            }
        },
        "build_map": {
            "name": "build_map",
            "location": 256,
            "return": [
                "bool"
            ],
            "arguments": {
                "moves": [
                    "List",
                    "float",
                    "str",
                    "List[Union[int,str,str,str,str,str,str,str,str,str,str,str,str,str]]",
                    "List[int]"
                ],
                "blanks": [
                    "bool"
                ]
            }
        },
        "possible_moves": {
            "name": "possible_moves",
            "location": 279,
            "return": [
                "Set[Text]",
                "Set[str]",
                "bool",
                "Set",
                "List[str]",
                "Dict[str,Set[str]]",
                "str"
            ],
            "arguments": {
                "moves": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "score_board_distance": {
            "name": "score_board_distance",
            "location": 291,
            "return": [
                "int",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "distance_map": [
                    "List[int]",
                    "float",
                    "Dict[str,tuple[Union[int,int]]]",
                    "Sequence[int]",
                    "Dict[str,Tuple[int,int]]",
                    "int",
                    "Iterable[Any]"
                ]
            }
        },
        "build_wall": {
            "name": "build_wall",
            "location": 304,
            "return": [
                "int",
                "List[str]",
                "logging.LogRecord",
                "Dict"
            ],
            "arguments": {
                "game": [],
                "player": [
                    "str"
                ]
            }
        },
        "rush_middle": {
            "name": "rush_middle",
            "location": 330,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "game": [
                    "str"
                ],
                "player": [
                    "str"
                ]
            }
        },
        "block_move": {
            "name": "block_move",
            "location": 346,
            "return": [
                "float",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "game": [],
                "player": []
            }
        },
        "clover_leaf": {
            "name": "clover_leaf",
            "location": 361,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "game": [],
                "player": []
            }
        },
        "CustomPlayer.__init__": {
            "name": "__init__",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "search_depth": [
                    "int",
                    "bool",
                    "List[cirq.Circuit]",
                    "Optional[dict]"
                ],
                "score_fn": [
                    "bool",
                    "List['cirq.Circuit']",
                    "Optional[dict]",
                    "int"
                ],
                "iterative": [
                    "bool",
                    "List[cirq.Circuit]",
                    "Optional[dict]",
                    "int"
                ],
                "method": [
                    "Text",
                    "bool",
                    "List[cirq.Circuit]",
                    "Optional[dict]",
                    "int"
                ],
                "timeout": [
                    "float",
                    "bool",
                    "List[cirq.Circuit]",
                    "Optional[dict]",
                    "int"
                ]
            }
        },
        "CustomPlayer.get_move": {
            "name": "get_move",
            "location": 416,
            "return": [
                "str",
                "bool",
                "Tuple[int]",
                "int",
                "Set",
                "float",
                "List",
                "List[tuple[Union[Any,bool]]]"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "isolation.Board"
                ],
                "legal_moves": [
                    "bool",
                    "List[str]",
                    "isolation.Board"
                ],
                "time_left": [
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "CustomPlayer.minimax": {
            "name": "minimax",
            "location": 493,
            "return": [
                "int",
                "Tuple[tuple[int]]",
                "Iterable[T]",
                "Tuple[Union[float,int,str,tuple[Union[int,int,int,int]],dict,list[str]]]"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "isolation.Board"
                ],
                "depth": [
                    "str"
                ],
                "maximizing_player": [
                    "bool",
                    "float",
                    "isolation.Board",
                    "int"
                ]
            }
        },
        "CustomPlayer.alphabeta": {
            "name": "alphabeta",
            "location": 544,
            "return": [
                "int",
                "Tuple[tuple[int]]",
                "Iterable[T]",
                "Tuple[Union[float,int,tuple[int],str,dict,list[str]]]"
            ],
            "arguments": {
                "self": [],
                "game": [],
                "depth": [
                    "str"
                ],
                "alpha": [
                    "float",
                    "Union[int,float]",
                    "Union[Tuple[int],Tuple[int,int]]",
                    "str"
                ],
                "beta": [
                    "float",
                    "Union[int,float]",
                    "Union[Tuple[int],Tuple[int,int]]",
                    "str"
                ],
                "maximizing_player": [
                    "bool",
                    "Union[int,float]",
                    "Union[Tuple[int],Tuple[int,int]]",
                    "str"
                ]
            }
        }
    },
    "nd889-master/1_foundations/2_isolation/instructions.py": {
        "show_instructions": {
            "name": "show_instructions",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nd889-master/1_foundations/2_isolation/pit.py": {
        "fitness": {
            "name": "fitness",
            "location": 22,
            "return": [
                "Sequence[int]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "fighter": [
                    "int",
                    "str",
                    "Union[str,Dict[str,str]]",
                    "Dict[str,str]"
                ]
            }
        },
        "update_age": {
            "name": "update_age",
            "location": 72,
            "return": [
                "Chromosome",
                "str",
                "bool",
                "Type"
            ],
            "arguments": {
                "chromosome": [
                    "Dict[str,Any]",
                    "Type",
                    "Dict",
                    "Mapping",
                    "Mapping[str,Any]",
                    "Mapping[Tuple[str,str],Any]"
                ],
                "age": [
                    "Dict[str,Any]",
                    "Type",
                    "Dict",
                    "Mapping",
                    "Mapping[str,Any]",
                    "Mapping[Tuple[str,str],Any]"
                ]
            }
        },
        "update_score": {
            "name": "update_score",
            "location": 82,
            "return": [
                "Chromosome",
                "str",
                "bool",
                "Type"
            ],
            "arguments": {
                "chromosome": [
                    "Dict[str,Any]",
                    "Type",
                    "Dict",
                    "Mapping",
                    "Mapping[str,Any]",
                    "Mapping[Tuple[str,str],Any]"
                ],
                "score": [
                    "Dict[str,Any]",
                    "Type",
                    "Dict",
                    "Mapping",
                    "Mapping[str,Any]",
                    "Mapping[Tuple[str,str],Any]"
                ]
            }
        },
        "random_mutation_rate": {
            "name": "random_mutation_rate",
            "location": 92,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "random_weight": {
            "name": "random_weight",
            "location": 96,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "get_random_chromosome": {
            "name": "get_random_chromosome",
            "location": 100,
            "return": [
                "Chromosome",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_random_population": {
            "name": "get_random_population",
            "location": 125,
            "return": [
                "List",
                "str",
                "bool"
            ],
            "arguments": {
                "num": [
                    "int",
                    "List[str]",
                    "float",
                    "Tuple",
                    "bool"
                ]
            }
        },
        "select_breeders": {
            "name": "select_breeders",
            "location": 132,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fighters": [
                    "Iterable[int]",
                    "List[Tuple[int, Any]]",
                    "List[Tuple[Any, Any]]",
                    "List[tuple]",
                    "List[float]",
                    "Tuple[int, int, int]",
                    "list"
                ]
            }
        },
        "age_population": {
            "name": "age_population",
            "location": 138,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "chromosomes": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "evolve": {
            "name": "evolve",
            "location": 146,
            "return": [
                "Tuple[Union[str,int,float]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "gene": [
                    "str"
                ],
                "gene_mutation": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "make_child": {
            "name": "make_child",
            "location": 169,
            "return": [
                "Chromosome",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "chromosome": [
                    "int",
                    "str",
                    "Dict"
                ]
            }
        },
        "average_score": {
            "name": "average_score",
            "location": 186,
            "return": [
                "float",
                "Dict[str,Dict[str,int]]",
                "Dict[str,Any]",
                "Set",
                "str"
            ],
            "arguments": {
                "chromosomes": [
                    "str",
                    "int"
                ]
            }
        },
        "breed": {
            "name": "breed",
            "location": 191,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "chromosomes": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nd889-master/1_foundations/2_isolation/play.py": {
        "get_log_level": {
            "name": "get_log_level",
            "location": 12,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "log_args": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nd889-master/1_foundations/2_isolation/run.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nd889-master/1_foundations/2_isolation/sample_players.py": {
        "null_score": {
            "name": "null_score",
            "location": 10,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "game": [
                    "str",
                    "isolation.Board"
                ],
                "player": [
                    "str",
                    "isolation.Board"
                ]
            }
        },
        "open_move_score": {
            "name": "open_move_score",
            "location": 40,
            "return": [
                "float",
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "game": [
                    "bool",
                    "str"
                ],
                "player": [
                    "bool",
                    "str"
                ]
            }
        },
        "improved_score": {
            "name": "improved_score",
            "location": 69,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "game": [
                    "int"
                ],
                "player": [
                    "int"
                ]
            }
        },
        "RandomPlayer.get_move": {
            "name": "get_move",
            "location": 104,
            "return": [
                "Tuple[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "game": [],
                "legal_moves": [
                    "list",
                    "List[str]",
                    "int"
                ],
                "time_left": []
            }
        },
        "GreedyPlayer.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "score_fn": [
                    "int",
                    "bool",
                    "game.board.Board",
                    "float"
                ]
            }
        },
        "GreedyPlayer.get_move": {
            "name": "get_move",
            "location": 142,
            "return": [
                "str",
                "Tuple[int]",
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "str",
                    "int"
                ],
                "legal_moves": [
                    "str",
                    "int"
                ],
                "time_left": []
            }
        },
        "HumanPlayer.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumanPlayer.get_move": {
            "name": "get_move",
            "location": 181,
            "return": [
                "Tuple[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "game": [],
                "legal_moves": [
                    "str"
                ],
                "time_left": []
            }
        }
    },
    "nd889-master/1_foundations/2_isolation/tournament.py": {
        "play_match": {
            "name": "play_match",
            "location": 60,
            "return": [
                "Tuple",
                "int",
                "str",
                "Dict[str,str]",
                "Dict"
            ],
            "arguments": {
                "player1": [
                    "int",
                    "Optional[int]",
                    "Dict"
                ],
                "player2": [
                    "int",
                    "Dict"
                ],
                "showBoard": [
                    "bool",
                    "float",
                    "int",
                    "Tuple"
                ],
                "time": [
                    "int",
                    "float",
                    "Tuple",
                    "bool"
                ]
            }
        },
        "play_round": {
            "name": "play_round",
            "location": 105,
            "return": [
                "float",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "agents": [
                    "str",
                    "Tuple",
                    "int",
                    "Union[str,float]"
                ],
                "num_matches": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nd889-master/1_foundations/2_isolation/isolation/isolation.py": {
        "Board.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player_1": [
                    "Mapping[str,Tuple[float,float,float]]",
                    "Mapping"
                ],
                "player_2": [
                    "Mapping[str,Tuple[float,float,float]]",
                    "Mapping"
                ],
                "width": [
                    "int",
                    "float",
                    "Callable[[str],bool]"
                ],
                "height": [
                    "int",
                    "Callable[[str],bool]",
                    "float"
                ]
            }
        },
        "Board.active_player": {
            "name": "active_player",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.inactive_player": {
            "name": "inactive_player",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.get_opponent": {
            "name": "get_opponent",
            "location": 73,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "str",
                    "bool"
                ]
            }
        },
        "Board.copy": {
            "name": "copy",
            "location": 95,
            "return": [
                "Board",
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.forecast_move": {
            "name": "forecast_move",
            "location": 106,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "DefaultDict[int,List[Any]]",
                    "str",
                    "DefaultDict",
                    "OrderedDict"
                ]
            }
        },
        "Board.move_is_legal": {
            "name": "move_is_legal",
            "location": 126,
            "return": [
                "bool",
                "str",
                "float",
                "Dict[str,Dict[str,int]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "Tuple[Union[int,int]]",
                    "float",
                    "Tuple[int,int]",
                    "bool",
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "Board.get_blank_spaces": {
            "name": "get_blank_spaces",
            "location": 146,
            "return": [
                "List[tuple]",
                "List[str]",
                "str",
                "Optional[dict]",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.get_player_location": {
            "name": "get_player_location",
            "location": 153,
            "return": [
                "str",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "List",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Board.get_legal_moves": {
            "name": "get_legal_moves",
            "location": 169,
            "return": [
                "str",
                "int",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Sequence[Any]",
                    "Optional[int]",
                    "Optional[Sequence[Any]]"
                ]
            }
        },
        "Board.apply_move": {
            "name": "apply_move",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "Tuple[Union[int,int]]",
                    "int",
                    "Tuple[int,int]",
                    "str",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "Board.is_winner": {
            "name": "is_winner",
            "location": 209,
            "return": [
                "bool",
                "str",
                "Callable",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "List[List[int]]",
                    "List[list[int]]"
                ]
            }
        },
        "Board.is_loser": {
            "name": "is_loser",
            "location": 213,
            "return": [
                "bool",
                "str",
                "Callable",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "List[List[int]]",
                    "List[list[int]]"
                ]
            }
        },
        "Board.utility": {
            "name": "utility",
            "location": 217,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Board.__get_moves__": {
            "name": "__get_moves__",
            "location": 251,
            "return": [
                "List[tuple[Union[int,float,complex]]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "int"
                ]
            }
        },
        "Board.print_board": {
            "name": "print_board",
            "location": 269,
            "return": [
                "str",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.to_string": {
            "name": "to_string",
            "location": 273,
            "return": [
                "Text",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.play": {
            "name": "play",
            "location": 315,
            "return": [
                "Tuple[Union[list[list],Text]]",
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "time_limit": [
                    "int",
                    "float",
                    "Dict[str,Any]",
                    "str",
                    "Union[bool,str,None]",
                    "bool"
                ],
                "show": [
                    "bool",
                    "Dict[str,bool]"
                ]
            }
        }
    },
    "nd889-master/1_foundations/2_isolation/isolation/__init__.py": {
        "game_as_text": {
            "name": "game_as_text",
            "location": 16,
            "return": [
                "int",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "winner": [
                    "Callable",
                    "float",
                    "Union[str,IO[bytes]]",
                    "int",
                    "str",
                    "IO"
                ],
                "move_history": [
                    "str",
                    "Set[str]",
                    "int"
                ],
                "termination": [
                    "Text",
                    "str",
                    "float",
                    "int"
                ],
                "board": [
                    "Board",
                    "int",
                    "str"
                ]
            }
        }
    },
    "nd889-master/1_foundations/3_pacman/eightpuzzle.py": {
        "loadEightPuzzle": {
            "name": "loadEightPuzzle",
            "location": 225,
            "return": [
                "EightPuzzleState",
                "str",
                "int",
                "Optional[Dict[str,Any]]",
                "bool"
            ],
            "arguments": {
                "puzzleNumber": [
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "createRandomEightPuzzle": {
            "name": "createRandomEightPuzzle",
            "location": 245,
            "return": [
                "bool",
                "float",
                "int",
                "str",
                "Dict[str,Union[Any,Any]]",
                "Tuple",
                "List",
                "Tuple[Literal]",
                "EightPuzzleState"
            ],
            "arguments": {
                "moves": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "EightPuzzleState.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numbers": [
                    "int",
                    "float",
                    "str",
                    "Iterable[Any]",
                    "List[str]"
                ]
            }
        },
        "EightPuzzleState.isGoal": {
            "name": "isGoal",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EightPuzzleState.legalMoves": {
            "name": "legalMoves",
            "location": 82,
            "return": [
                "List[Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EightPuzzleState.result": {
            "name": "result",
            "location": 104,
            "return": [
                "EightPuzzleState",
                "Sequence[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "str",
                    "Sequence[str]",
                    "Iterator[Tuple[str,Any,Any]]",
                    "Iterator"
                ]
            }
        },
        "EightPuzzleState.__eq__": {
            "name": "__eq__",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "EightPuzzleState.__hash__": {
            "name": "__hash__",
            "location": 157,
            "return": [
                "int",
                "Union[str,int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EightPuzzleState.__getAsciiString": {
            "name": "__getAsciiString",
            "location": 160,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EightPuzzleState.__str__": {
            "name": "__str__",
            "location": 177,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EightPuzzleSearchProblem.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "puzzle": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "EightPuzzleSearchProblem.getStartState": {
            "name": "getStartState",
            "location": 192,
            "return": [
                "IO[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EightPuzzleSearchProblem.isGoalState": {
            "name": "isGoalState",
            "location": 195,
            "return": [
                "Optional[str]",
                "Dict[str, Dict[str, str]]",
                "Callable[[KT], VT]",
                "T"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "float"
                ]
            }
        },
        "EightPuzzleSearchProblem.getSuccessors": {
            "name": "getSuccessors",
            "location": 198,
            "return": [
                "List[tuple[int]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "list",
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "EightPuzzleSearchProblem.getCostOfActions": {
            "name": "getCostOfActions",
            "location": 209,
            "return": [
                "int",
                "List[str]",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "actions": [
                    "List[str]",
                    "str",
                    "Callable",
                    "int"
                ]
            }
        }
    },
    "nd889-master/1_foundations/3_pacman/game.py": {
        "reconstituteGrid": {
            "name": "reconstituteGrid",
            "location": 258,
            "return": [
                "BaseException",
                "Grid"
            ],
            "arguments": {
                "bitRep": [
                    "int",
                    "float"
                ]
            }
        },
        "Agent.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Agent.getAction": {
            "name": "getAction",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "Configuration.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int",
                    "float",
                    "bool"
                ],
                "direction": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Configuration.getPosition": {
            "name": "getPosition",
            "location": 68,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.getDirection": {
            "name": "getDirection",
            "location": 71,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.isInteger": {
            "name": "isInteger",
            "location": 74,
            "return": [
                "bool",
                "int",
                "List[int]",
                "Tuple",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.__eq__": {
            "name": "__eq__",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[bool]",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "Configuration.__hash__": {
            "name": "__hash__",
            "location": 82,
            "return": [
                "int",
                "str",
                "static_frame.core.util.DepthLevelSpecifier"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.__str__": {
            "name": "__str__",
            "location": 87,
            "return": [
                "Text",
                "str",
                "Tuple[Tuple[int,...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.generateSuccessor": {
            "name": "generateSuccessor",
            "location": 90,
            "return": [
                "Configuration",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "vector": [
                    "bytes",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "AgentState.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "startConfiguration": [
                    "int",
                    "float",
                    "Union[str,float]",
                    "str",
                    "List[str]",
                    "Optional[int]",
                    "None"
                ],
                "isPacman": [
                    "int",
                    "float",
                    "Tuple",
                    "bool"
                ]
            }
        },
        "AgentState.__str__": {
            "name": "__str__",
            "location": 116,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentState.__eq__": {
            "name": "__eq__",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "Optional[bool]",
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[float]",
                    "float",
                    "Union[int,str]"
                ]
            }
        },
        "AgentState.__hash__": {
            "name": "__hash__",
            "location": 127,
            "return": [
                "int",
                "Optional[int]",
                "static_frame.core.util.DepthLevelSpecifier",
                "List[List[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentState.copy": {
            "name": "copy",
            "location": 130,
            "return": [
                "AgentState",
                "Callable",
                "List[str]",
                "Dict",
                "int",
                "allennlp.common.util.JsonDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentState.getPosition": {
            "name": "getPosition",
            "location": 136,
            "return": [
                "None",
                "Optional[int]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentState.getDirection": {
            "name": "getDirection",
            "location": 140,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int",
                    "Callable",
                    "Optional[int]",
                    "None"
                ],
                "height": [
                    "int",
                    "float"
                ],
                "initialValue": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "bitRepresentation": [
                    "int",
                    "str",
                    "None",
                    "Union[str,float]",
                    "float"
                ]
            }
        },
        "Grid.__getitem__": {
            "name": "__getitem__",
            "location": 161,
            "return": [
                "str",
                "Callable",
                "OrderedDict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "str"
                ]
            }
        },
        "Grid.__setitem__": {
            "name": "__setitem__",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Iterable[str]",
                    "VT",
                    "KT",
                    "Union[str,Iterable[str]]"
                ],
                "item": [
                    "str",
                    "Iterable[str]",
                    "VT",
                    "KT",
                    "Union[str,Iterable[str]]"
                ]
            }
        },
        "Grid.__str__": {
            "name": "__str__",
            "location": 167,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.__eq__": {
            "name": "__eq__",
            "location": 172,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[bool]",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "Grid.__hash__": {
            "name": "__hash__",
            "location": 176,
            "return": [
                "int",
                "Tuple[int,int]",
                "bool",
                "deoplete.util.UserContext"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.copy": {
            "name": "copy",
            "location": 187,
            "return": [
                "Grid",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.deepCopy": {
            "name": "deepCopy",
            "location": 192,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.shallowCopy": {
            "name": "shallowCopy",
            "location": 195,
            "return": [
                "Grid",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.count": {
            "name": "count",
            "location": 200,
            "return": [
                "bool",
                "int",
                "str",
                "deoplete.util.Candidates",
                "Tuple"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "bool",
                    "str",
                    "float",
                    "Set[str]",
                    "List[str]",
                    "Iterable[Any]"
                ]
            }
        },
        "Grid.asList": {
            "name": "asList",
            "location": 203,
            "return": [
                "List",
                "List[Dict]",
                "str",
                "List[str]",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bool",
                    "str",
                    "Hashable",
                    "Union[str,int]",
                    "Tuple[int,int]",
                    "T",
                    "Dict"
                ]
            }
        },
        "Grid.packBits": {
            "name": "packBits",
            "location": 210,
            "return": [
                "Tuple[int]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid._cellIndexToPosition": {
            "name": "_cellIndexToPosition",
            "location": 229,
            "return": [
                "str",
                "Tuple[int]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "Grid._unpackBits": {
            "name": "_unpackBits",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bits": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Grid._unpackInt": {
            "name": "_unpackInt",
            "location": 246,
            "return": [
                "List[bool]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "packed": [
                    "bool",
                    "str",
                    "int"
                ],
                "size": [
                    "int",
                    "Iterable",
                    "str",
                    "Tuple[int,int]"
                ]
            }
        },
        "Actions.reverseDirection": {
            "name": "reverseDirection",
            "location": 283,
            "return": [
                "str",
                "int",
                "Callable",
                "float",
                "Dict"
            ],
            "arguments": {
                "action": [
                    "str",
                    "float",
                    "Dict"
                ]
            }
        },
        "Actions.vectorToDirection": {
            "name": "vectorToDirection",
            "location": 295,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "vector": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "Actions.directionToVector": {
            "name": "directionToVector",
            "location": 308,
            "return": [
                "Tuple[float]",
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "direction": [
                    "List[Dict[str,Any]]",
                    "str",
                    "List[dict[str,Any]]",
                    "float",
                    "int"
                ],
                "speed": [
                    "float",
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "Actions.getPossibleActions": {
            "name": "getPossibleActions",
            "location": 313,
            "return": [
                "List",
                "str",
                "Optional[List[int]]"
            ],
            "arguments": {
                "config": [
                    "str"
                ],
                "walls": [
                    "Dict[str,Any]",
                    "str",
                    "Mapping[str,Any]",
                    "int",
                    "Mapping"
                ]
            }
        },
        "Actions.getLegalNeighbors": {
            "name": "getLegalNeighbors",
            "location": 332,
            "return": [
                "List[tuple]",
                "str",
                "bool"
            ],
            "arguments": {
                "position": [
                    "str",
                    "int"
                ],
                "walls": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "Actions.getSuccessor": {
            "name": "getSuccessor",
            "location": 346,
            "return": [
                "Tuple[Union[float,int,list[Union[list[str],str]],list[Union[int,str]],list[Union[list[int],str]],list[str],list[Union[list[Any],str]]]]",
                "str",
                "float",
                "List[int]",
                "int"
            ],
            "arguments": {
                "position": [
                    "str",
                    "int"
                ],
                "action": [
                    "int",
                    "Optional[str]",
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "GameStateData.__init__": {
            "name": "__init__",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prevState": [
                    "None"
                ]
            }
        },
        "GameStateData.deepCopy": {
            "name": "deepCopy",
            "location": 374,
            "return": [
                "GameStateData",
                "Callable",
                "List[str]",
                "Dict",
                "int",
                "allennlp.common.util.JsonDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameStateData.copyAgentStates": {
            "name": "copyAgentStates",
            "location": 383,
            "return": [
                "List[dict[str,Any]]",
                "int",
                "Sequence[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "agentStates": [
                    "Dict",
                    "Dict[str,Any]",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "str"
                ]
            }
        },
        "GameStateData.__eq__": {
            "name": "__eq__",
            "location": 389,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "None",
                    "Optional[Outcome]",
                    "float",
                    "Optional[Cell]",
                    "Optional[float]"
                ]
            }
        },
        "GameStateData.__hash__": {
            "name": "__hash__",
            "location": 401,
            "return": [
                "int",
                "Dict",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameStateData.__str__": {
            "name": "__str__",
            "location": 413,
            "return": [
                "str",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameStateData._foodWallStr": {
            "name": "_foodWallStr",
            "location": 438,
            "return": [
                "Text",
                "float",
                "int",
                "Tuple[int,int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "hasFood": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ],
                "hasWall": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "GameStateData._pacStr": {
            "name": "_pacStr",
            "location": 446,
            "return": [
                "Text",
                "int",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "GameStateData._ghostStr": {
            "name": "_ghostStr",
            "location": 455,
            "return": [
                "Text",
                "bool",
                "Optional[Union[str,Any]]",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "GameStateData.initialize": {
            "name": "initialize",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layout": [
                    "bytes",
                    "str",
                    "int",
                    "static_frame.core.util.PathSpecifier"
                ],
                "numGhostAgents": [
                    "int"
                ]
            }
        },
        "Game.__init__": {
            "name": "__init__",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agents": [
                    "Dict[int,set[int]]",
                    "List[str]",
                    "int",
                    "bool",
                    "Dict[int,Set[int]]",
                    "Iterator[str]"
                ],
                "display": [
                    "int",
                    "float",
                    "str",
                    "Union[str,float]"
                ],
                "rules": [
                    "int",
                    "float",
                    "str",
                    "Union[str,float]"
                ],
                "startingIndex": [
                    "int",
                    "Dict[str,str]",
                    "Optional[int]"
                ],
                "muteAgents": [
                    "bool",
                    "int",
                    "float",
                    "Union[str,float]",
                    "str"
                ],
                "catchExceptions": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Game.getProgress": {
            "name": "getProgress",
            "location": 511,
            "return": [
                "float",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game._agentCrash": {
            "name": "_agentCrash",
            "location": 517,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agentIndex": [
                    "int",
                    "Callable",
                    "str"
                ],
                "quiet": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "Game.mute": {
            "name": "mute",
            "location": 527,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "agentIndex": [
                    "str",
                    "AnyStr",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "Game.unmute": {
            "name": "unmute",
            "location": 536,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.run": {
            "name": "run",
            "location": 544,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nd889-master/1_foundations/3_pacman/ghostAgents.py": {
        "GhostAgent.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "float",
                    "bool",
                    "game.board.Board"
                ]
            }
        },
        "GhostAgent.getAction": {
            "name": "getAction",
            "location": 20,
            "return": [
                "Callable",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "bytes",
                    "Callable",
                    "List"
                ]
            }
        },
        "GhostAgent.getDistribution": {
            "name": "getDistribution",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "RandomGhost.getDistribution": {
            "name": "getDistribution",
            "location": 33,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "bytes",
                    "Callable",
                    "List"
                ]
            }
        },
        "DirectionalGhost.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "float",
                    "bool",
                    "game.board.Board"
                ],
                "prob_attack": [
                    "float",
                    "int",
                    "bool",
                    "game.board.Board"
                ],
                "prob_scaredFlee": [
                    "float",
                    "int",
                    "bool",
                    "game.board.Board"
                ]
            }
        },
        "DirectionalGhost.getDistribution": {
            "name": "getDistribution",
            "location": 46,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "bytes",
                    "List[str]",
                    "Dict[Tuple[int, int], str]"
                ]
            }
        }
    },
    "nd889-master/1_foundations/3_pacman/graphicsDisplay.py": {
        "add": {
            "name": "add",
            "location": 646,
            "return": [
                "Tuple",
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "Union[int, float]"
                ],
                "y": [
                    "float",
                    "int",
                    "Union[int, float]"
                ]
            }
        },
        "saveFrame": {
            "name": "saveFrame",
            "location": 661,
            "return": [
                "None",
                "Union[tuple,list]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        },
        "InfoPane.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layout": [
                    "int",
                    "float",
                    "None",
                    "bool",
                    "Optional[int]"
                ],
                "gridSize": [
                    "int",
                    "Iterable[int]"
                ]
            }
        },
        "InfoPane.toScreen": {
            "name": "toScreen",
            "location": 86,
            "return": [
                "Tuple",
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "float",
                    "bool",
                    "int"
                ],
                "y": [
                    "List[Set[int]]",
                    "None",
                    "bool",
                    "float",
                    "List[set[int]]",
                    "str",
                    "int"
                ]
            }
        },
        "InfoPane.drawPane": {
            "name": "drawPane",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfoPane.initializeGhostDistances": {
            "name": "initializeGhostDistances",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "distances": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "InfoPane.updateScore": {
            "name": "updateScore",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "score": [
                    "str",
                    "int"
                ]
            }
        },
        "InfoPane.setTeam": {
            "name": "setTeam",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "isBlue": [
                    "bool",
                    "Literal[True]"
                ]
            }
        },
        "InfoPane.updateGhostDistances": {
            "name": "updateGhostDistances",
            "location": 123,
            "return": [
                "None",
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {
                "self": [],
                "distances": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "InfoPane.drawGhost": {
            "name": "drawGhost",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfoPane.drawPacman": {
            "name": "drawPacman",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfoPane.drawWarning": {
            "name": "drawWarning",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfoPane.clearIcon": {
            "name": "clearIcon",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfoPane.updateMessage": {
            "name": "updateMessage",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "InfoPane.clearMessage": {
            "name": "clearMessage",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PacmanGraphics.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "zoom": [
                    "float",
                    "int"
                ],
                "frameTime": [
                    "float",
                    "int",
                    "Optional[float]"
                ],
                "capture": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "Union[str,float]"
                ]
            }
        },
        "PacmanGraphics.initialize": {
            "name": "initialize",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict[core.Edge,state.State]"
                ],
                "isBlue": [
                    "bool",
                    "float",
                    "str",
                    "Sequence[str]",
                    "List"
                ]
            }
        },
        "PacmanGraphics.startGraphics": {
            "name": "startGraphics",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "float",
                    "Dict",
                    "int"
                ]
            }
        },
        "PacmanGraphics.drawDistributions": {
            "name": "drawDistributions",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "PacmanGraphics.drawStaticObjects": {
            "name": "drawStaticObjects",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "PacmanGraphics.drawAgentObjects": {
            "name": "drawAgentObjects",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "PacmanGraphics.swapImages": {
            "name": "swapImages",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agentIndex": [
                    "Callable",
                    "memoryview",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "newState": [
                    "Sequence[Sequence[str]]",
                    "int",
                    "Sequence[Tuple[str,int]]",
                    "Sequence[tuple[Union[str,int]]]"
                ]
            }
        },
        "PacmanGraphics.update": {
            "name": "update",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "newState": [
                    "Iterable[Callable]"
                ]
            }
        },
        "PacmanGraphics.make_window": {
            "name": "make_window",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int"
                ],
                "height": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "PacmanGraphics.drawPacman": {
            "name": "drawPacman",
            "location": 258,
            "return": [
                "List",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "pacman": [
                    "int",
                    "float"
                ],
                "index": [
                    "int",
                    "List"
                ]
            }
        },
        "PacmanGraphics.getEndpoints": {
            "name": "getEndpoints",
            "location": 277,
            "return": [
                "Tuple[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "bool",
                    "str",
                    "Dict",
                    "T"
                ],
                "position": [
                    "Tuple[int]",
                    "str",
                    "int"
                ]
            }
        },
        "PacmanGraphics.movePacman": {
            "name": "movePacman",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "str",
                    "int",
                    "Sequence[int]"
                ],
                "direction": [
                    "int"
                ],
                "image": [
                    "List",
                    "int",
                    "float"
                ]
            }
        },
        "PacmanGraphics.animatePacman": {
            "name": "animatePacman",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pacman": [
                    "int",
                    "str",
                    "IO",
                    "Optional[str]",
                    "None"
                ],
                "prevPacman": [
                    "str",
                    "int",
                    "Dict[str,Set[str]]",
                    "Dict[str,set[str]]"
                ],
                "image": [
                    "str"
                ]
            }
        },
        "PacmanGraphics.getGhostColor": {
            "name": "getGhostColor",
            "location": 320,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "ghost": [
                    "str",
                    "bool"
                ],
                "ghostIndex": [
                    "bool",
                    "str"
                ]
            }
        },
        "PacmanGraphics.drawGhost": {
            "name": "drawGhost",
            "location": 326,
            "return": [
                "List[Union[float,str,int]]",
                "str",
                "int",
                "float",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "ghost": [
                    "str",
                    "float",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "agentIndex": [
                    "str",
                    "int",
                    "List"
                ]
            }
        },
        "PacmanGraphics.moveEyes": {
            "name": "moveEyes",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "None"
                ],
                "dir": [
                    "bool",
                    "str"
                ],
                "eyes": [
                    "Tuple[Union[int,int]]",
                    "str",
                    "int",
                    "Tuple",
                    "Tuple[int,int]",
                    "Mapping[str,str]"
                ]
            }
        },
        "PacmanGraphics.moveGhost": {
            "name": "moveGhost",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ghost": [
                    "Callable",
                    "str",
                    "int"
                ],
                "ghostIndex": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "float",
                    "Optional[List[str]]",
                    "bytes",
                    "Tuple[int,int]"
                ],
                "prevGhost": [
                    "str",
                    "Dict",
                    "Exception"
                ],
                "ghostImageParts": [
                    "int",
                    "Callable",
                    "float",
                    "Optional[Any]"
                ]
            }
        },
        "PacmanGraphics.getPosition": {
            "name": "getPosition",
            "location": 396,
            "return": [
                "Tuple[int]",
                "str",
                "Optional[float]",
                "int",
                "Optional[str]",
                "Optional[bytes]"
            ],
            "arguments": {
                "self": [],
                "agentState": []
            }
        },
        "PacmanGraphics.getDirection": {
            "name": "getDirection",
            "location": 400,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "agentState": [
                    "Optional[bool]",
                    "bool",
                    "None"
                ]
            }
        },
        "PacmanGraphics.finish": {
            "name": "finish",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PacmanGraphics.to_screen": {
            "name": "to_screen",
            "location": 407,
            "return": [
                "Tuple",
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "str"
                ]
            }
        },
        "PacmanGraphics.to_screen2": {
            "name": "to_screen2",
            "location": 415,
            "return": [
                "Tuple",
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "str"
                ]
            }
        },
        "PacmanGraphics.drawWalls": {
            "name": "drawWalls",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wallMatrix": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "PacmanGraphics.isWall": {
            "name": "isWall",
            "location": 508,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "walls": [
                    "int"
                ]
            }
        },
        "PacmanGraphics.drawFood": {
            "name": "drawFood",
            "location": 515,
            "return": [
                "List[list]",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "foodMatrix": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "PacmanGraphics.drawCapsules": {
            "name": "drawCapsules",
            "location": 535,
            "return": [
                "Dict[Text,]",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "capsules": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "PacmanGraphics.removeFood": {
            "name": "removeFood",
            "location": 547,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cell": [
                    "float",
                    "int",
                    "bytes"
                ],
                "foodImages": [
                    "int",
                    "float"
                ]
            }
        },
        "PacmanGraphics.removeCapsule": {
            "name": "removeCapsule",
            "location": 551,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cell": [
                    "float",
                    "int",
                    "bytes"
                ],
                "capsuleImages": [
                    "int",
                    "float"
                ]
            }
        },
        "PacmanGraphics.drawExpandedCells": {
            "name": "drawExpandedCells",
            "location": 555,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cells": [
                    "List[int]",
                    "List[str]",
                    "list",
                    "int",
                    "List[float]",
                    "str"
                ]
            }
        },
        "PacmanGraphics.clearExpandedCells": {
            "name": "clearExpandedCells",
            "location": 574,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PacmanGraphics.updateDistributions": {
            "name": "updateDistributions",
            "location": 580,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "distributions": [
                    "bool",
                    "int"
                ]
            }
        },
        "FirstPersonPacmanGraphics.__init__": {
            "name": "__init__",
            "location": 601,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "zoom": [
                    "bool",
                    "float"
                ],
                "showGhosts": [
                    "bool",
                    "int"
                ],
                "capture": [
                    "bool",
                    "int"
                ],
                "frameTime": [
                    "bool",
                    "int"
                ]
            }
        },
        "FirstPersonPacmanGraphics.initialize": {
            "name": "initialize",
            "location": 606,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "bytes",
                    "Dict[str,Optional[str]]",
                    "Dict[str,Union[str,None]]"
                ],
                "isBlue": [
                    "bool",
                    "float",
                    "str",
                    "Sequence[str]",
                    "List"
                ]
            }
        },
        "FirstPersonPacmanGraphics.lookAhead": {
            "name": "lookAhead",
            "location": 623,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "bytes",
                    "str",
                    "dict"
                ],
                "state": [
                    "Callable",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "FirstPersonPacmanGraphics.getGhostColor": {
            "name": "getGhostColor",
            "location": 637,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "ghost": [
                    "bool",
                    "str",
                    "Dict",
                    "T"
                ],
                "ghostIndex": [
                    "bool",
                    "str"
                ]
            }
        },
        "FirstPersonPacmanGraphics.getPosition": {
            "name": "getPosition",
            "location": 640,
            "return": [
                "Tuple[int]",
                "str",
                "Optional[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "ghostState": [
                    "str",
                    "Union[int, str]"
                ]
            }
        }
    },
    "nd889-master/1_foundations/3_pacman/graphicsUtils.py": {
        "formatColor": {
            "name": "formatColor",
            "location": 29,
            "return": [
                "Text",
                "bool",
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "r": [
                    "int"
                ],
                "g": [
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "colorToVector": {
            "name": "colorToVector",
            "location": 32,
            "return": [
                "List[float]",
                "int",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "color": [
                    "str",
                    "List[list[int]]",
                    "float",
                    "List[List[int]]",
                    "int",
                    "[]"
                ]
            }
        },
        "sleep": {
            "name": "sleep",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "secs": [
                    "str",
                    "List",
                    "int",
                    "Optional[int]",
                    "Dict"
                ]
            }
        },
        "begin_graphics": {
            "name": "begin_graphics",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "width": [
                    "int",
                    "Iterator[int]",
                    "Union[int,str]"
                ],
                "height": [
                    "int",
                    "Iterator[int]",
                    "Union[int,str]"
                ],
                "color": [
                    "int",
                    "float",
                    "str",
                    "datetime.date.time"
                ],
                "title": [
                    "str",
                    "None",
                    "bool",
                    "Optional[float]",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "_leftclick": {
            "name": "_leftclick",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "int",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "_rightclick": {
            "name": "_rightclick",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "int",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "_ctrl_leftclick": {
            "name": "_ctrl_leftclick",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "int",
                    "Dict"
                ]
            }
        },
        "wait_for_click": {
            "name": "wait_for_click",
            "location": 107,
            "return": [
                "Tuple[Optional[Text]]",
                "int",
                "float"
            ],
            "arguments": {}
        },
        "draw_background": {
            "name": "draw_background",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_destroy_window": {
            "name": "_destroy_window",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "None"
                ]
            }
        },
        "end_graphics": {
            "name": "end_graphics",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "clear_screen": {
            "name": "clear_screen",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "background": [
                    "int",
                    "None",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "polygon": {
            "name": "polygon",
            "location": 158,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "coords": [
                    "str",
                    "Set[str]",
                    "List",
                    "bool",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "outlineColor": [
                    "int",
                    "Tuple[Union[float,float,float]]",
                    "bool",
                    "Tuple[float,float,float]"
                ],
                "fillColor": [
                    "Tuple[str,int]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Tuple[Union[str,int]]",
                    "Dict[str,Any]"
                ],
                "filled": [
                    "int",
                    "str",
                    "bool",
                    "Set[str]",
                    "Optional[List[str]]",
                    "List"
                ],
                "smoothed": [
                    "int",
                    "bool",
                    "Tuple[float,float,float]"
                ],
                "behind": [
                    "int",
                    "float",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "width": [
                    "int",
                    "bool",
                    "Tuple[float,float,float]"
                ]
            }
        },
        "square": {
            "name": "square",
            "location": 170,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pos": [
                    "int",
                    "float",
                    "str"
                ],
                "r": [
                    "int",
                    "Iterable[T]"
                ],
                "color": [],
                "filled": [
                    "int"
                ],
                "behind": [
                    "int"
                ]
            }
        },
        "circle": {
            "name": "circle",
            "location": 175,
            "return": [
                "int",
                "str",
                "List[int]",
                "bytes"
            ],
            "arguments": {
                "pos": [
                    "bool",
                    "float",
                    "Tuple",
                    "starfish.types.Number"
                ],
                "r": [
                    "int",
                    "Tuple[int,int]",
                    "str"
                ],
                "outlineColor": [
                    "float",
                    "int",
                    "List[float]",
                    "Optional[int]",
                    "None"
                ],
                "fillColor": [
                    "float",
                    "int",
                    "List[float]",
                    "Optional[int]",
                    "None"
                ],
                "endpoints": [
                    "Optional[float]",
                    "Optional[Union[Any, Any]]"
                ],
                "style": [
                    "Text",
                    "float",
                    "int",
                    "Optional[int]",
                    "List[float]"
                ],
                "width": [
                    "int",
                    "float",
                    "Optional[int]",
                    "List[float]"
                ]
            }
        },
        "image": {
            "name": "image",
            "location": 188,
            "return": [
                "str",
                "List[int]",
                "Tuple[int, int]",
                "types.Bounds",
                "int",
                "tuple",
                "Tuple[int]"
            ],
            "arguments": {
                "pos": [
                    "str",
                    "bool"
                ],
                "file": [
                    "Text",
                    "str",
                    "int",
                    "bytes",
                    "BinaryIO"
                ]
            }
        },
        "refresh": {
            "name": "refresh",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "moveCircle": {
            "name": "moveCircle",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "id": [
                    "int",
                    "str"
                ],
                "pos": [
                    "float",
                    "str",
                    "int"
                ],
                "r": [
                    "int",
                    "str",
                    "Tuple[str,str,str]",
                    "List[str]"
                ],
                "endpoints": [
                    "str",
                    "List[Union[int,str]]",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "Optional[List[Any]]",
                    "Optional[ValidatorTypes]",
                    "Optional[bool]"
                ]
            }
        },
        "edit": {
            "name": "edit",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "id": [
                    "str",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "text": {
            "name": "text",
            "location": 217,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "pos": [
                    "List",
                    "str",
                    "int",
                    "Dict[str,Any]"
                ],
                "color": [
                    "str",
                    "bool"
                ],
                "contents": [
                    "str",
                    "bool"
                ],
                "font": [
                    "Text",
                    "bytes",
                    "str",
                    "string.Template",
                    "int",
                    "IO[bytes]"
                ],
                "size": [
                    "int",
                    "str",
                    "bytes",
                    "List[int]",
                    "bool"
                ],
                "style": [
                    "Text",
                    "str",
                    "int",
                    "bytes",
                    "List[int]",
                    "bool"
                ],
                "anchor": [
                    "Text",
                    "str",
                    "bool"
                ]
            }
        },
        "changeText": {
            "name": "changeText",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "id": [
                    "int",
                    "str",
                    "bool"
                ],
                "newText": [
                    "str",
                    "int",
                    "List[str]",
                    "float"
                ],
                "font": [
                    "int",
                    "str",
                    "None",
                    "Optional[float]",
                    "float"
                ],
                "size": [
                    "int",
                    "str",
                    "Optional[List[CustomLineItemDraft]]",
                    "Optional[List[str]]",
                    "Optional[Dict[str,Any]]",
                    "Optional[str]"
                ],
                "style": [
                    "Text",
                    "int",
                    "str",
                    "Optional[List[CustomLineItemDraft]]",
                    "Optional[List[str]]",
                    "Optional[Dict[str,Any]]",
                    "Optional[str]"
                ]
            }
        },
        "changeColor": {
            "name": "changeColor",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int"
                ],
                "newColor": [
                    "str",
                    "int"
                ]
            }
        },
        "line": {
            "name": "line",
            "location": 231,
            "return": [
                "int",
                "Callable",
                "str",
                "Optional[str]",
                "Mapping"
            ],
            "arguments": {
                "here": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "float"
                ],
                "there": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "float"
                ],
                "color": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "width": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "_keypress": {
            "name": "_keypress",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "Dict[str,Any]",
                    "str",
                    "Dict"
                ]
            }
        },
        "_keyrelease": {
            "name": "_keyrelease",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "Dict"
                ]
            }
        },
        "remap_arrows": {
            "name": "remap_arrows",
            "location": 265,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "event": [
                    "Dict"
                ]
            }
        },
        "_clear_keys": {
            "name": "_clear_keys",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "Dict",
                    "None"
                ]
            }
        },
        "keys_pressed": {
            "name": "keys_pressed",
            "location": 284,
            "return": [
                "List[list]",
                "List[str]",
                "List"
            ],
            "arguments": {
                "d_o_e": [
                    "bool",
                    "List[mypy.types.Type]",
                    "Optional[str]",
                    "Optional[bool]",
                    "str"
                ],
                "d_w": [
                    "bool",
                    "List[mypy.types.Type]",
                    "Optional[str]",
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "keys_waiting": {
            "name": "keys_waiting",
            "location": 291,
            "return": [
                "List[list]",
                "str",
                "List[str]",
                "bytes",
                "bool"
            ],
            "arguments": {}
        },
        "wait_for_keys": {
            "name": "wait_for_keys",
            "location": 299,
            "return": [
                "str",
                "int",
                "Tuple[Union[str,str,list[str]]]",
                "Dict",
                "List[str]",
                "bytes",
                "List"
            ],
            "arguments": {}
        },
        "remove_from_screen": {
            "name": "remove_from_screen",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "List[str]",
                    "Union[int,float]",
                    "List[list]",
                    "List[List]",
                    "Sequence[float]",
                    "Union[float,Sequence[float]]",
                    "bool"
                ],
                "d_o_e": [
                    "int",
                    "Union[int, float]",
                    "List[List]",
                    "List[str]",
                    "Union[float, Sequence[float]]",
                    "bool"
                ],
                "d_w": [
                    "int",
                    "Union[int, float]",
                    "List[List]",
                    "List[str]",
                    "Union[float, Sequence[float]]",
                    "bool"
                ]
            }
        },
        "_adjust_coords": {
            "name": "_adjust_coords",
            "location": 312,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "coord_list": [
                    "int",
                    "list",
                    "Sequence[int]",
                    "Sequence[Any]",
                    "str",
                    "Sequence[T]"
                ],
                "x": [
                    "str",
                    "int",
                    "Collection[int]",
                    "float"
                ],
                "y": [
                    "int",
                    "List[bytes]",
                    "Sequence[T]",
                    "bytes",
                    "bytearray",
                    "List"
                ]
            }
        },
        "move_to": {
            "name": "move_to",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "object": [
                    "int",
                    "Optional[Union[int,slice]]",
                    "Iterable[Union[int,str]]",
                    "None",
                    "bytes",
                    "Iterable[str]",
                    "str",
                    "float",
                    "List[int]",
                    "Union[int,float]"
                ],
                "x": [
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "Union[None,int]",
                    "None"
                ],
                "y": [
                    "int",
                    "None",
                    "Optional[int]",
                    "List",
                    "Optional[starfish.types.Number]",
                    "str",
                    "Optional[List]",
                    "Optional[str]"
                ],
                "d_o_e": [
                    "float",
                    "int",
                    "bool"
                ],
                "d_w": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "move_by": {
            "name": "move_by",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "object": [
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "int"
                ],
                "x": [
                    "int",
                    "float",
                    "bool",
                    "None",
                    "Optional[float]"
                ],
                "y": [
                    "None",
                    "Optional[int]",
                    "int",
                    "Optional[float]",
                    "float",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "d_o_e": [
                    "int",
                    "bool",
                    "Optional[float]",
                    "float"
                ],
                "d_w": [
                    "int",
                    "bool",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "writePostscript": {
            "name": "writePostscript",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "nd889-master/1_foundations/3_pacman/keyboardAgents.py": {
        "KeyboardAgent.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "game.board.Board",
                    "float"
                ]
            }
        },
        "KeyboardAgent.getAction": {
            "name": "getAction",
            "location": 30,
            "return": [
                "str",
                "int",
                "bool",
                "Deque"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        },
        "KeyboardAgent.getMove": {
            "name": "getMove",
            "location": 53,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "legal": [
                    "Dict[str,Any]",
                    "Dict",
                    "bool",
                    "MutableMapping[str,Any]",
                    "List[str]",
                    "MutableMapping",
                    "Dict[str,List[Any]]",
                    "Dict[str,list[Any]]"
                ]
            }
        },
        "KeyboardAgent2.getMove": {
            "name": "getMove",
            "location": 72,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "legal": [
                    "bool",
                    "str",
                    "int",
                    "Dict",
                    "List[str]",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None"
                ]
            }
        }
    },
    "nd889-master/1_foundations/3_pacman/layout.py": {
        "getLayout": {
            "name": "getLayout",
            "location": 125,
            "return": [
                "str",
                "bool",
                "Dict"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Dict"
                ],
                "back": [
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "Optional[IO[bytes]]",
                    "bool",
                    "Optional[Dict[str,dict]]"
                ]
            }
        },
        "tryToLoad": {
            "name": "tryToLoad",
            "location": 139,
            "return": [
                "None",
                "Layout",
                "Optional[str]",
                "Optional[int]",
                "Optional[bool]",
                "Optional[float]",
                "Dict",
                "bool",
                "Tuple[Optional[str],bool]"
            ],
            "arguments": {
                "fullname": [
                    "str",
                    "bytes",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Layout.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layoutText": [
                    "str"
                ]
            }
        },
        "Layout.getNumGhosts": {
            "name": "getNumGhosts",
            "location": 34,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layout.initializeVisibilityMatrix": {
            "name": "initializeVisibilityMatrix",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layout.isWall": {
            "name": "isWall",
            "location": 58,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "str",
                    "int"
                ]
            }
        },
        "Layout.getRandomLegalPosition": {
            "name": "getRandomLegalPosition",
            "location": 62,
            "return": [
                "Tuple",
                "str",
                "float",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layout.getRandomCorner": {
            "name": "getRandomCorner",
            "location": 70,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layout.getFurthestCorner": {
            "name": "getFurthestCorner",
            "location": 74,
            "return": [
                "Tuple[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pacPos": [
                    "str",
                    "bool"
                ]
            }
        },
        "Layout.isVisibleFrom": {
            "name": "isVisibleFrom",
            "location": 79,
            "return": [
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "ghostPos": [
                    "str"
                ],
                "pacPos": [
                    "str",
                    "bool",
                    "int"
                ],
                "pacDirection": [
                    "str"
                ]
            }
        },
        "Layout.__str__": {
            "name": "__str__",
            "location": 83,
            "return": [
                "str",
                "bytes",
                "Tuple[Tuple[int,...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layout.deepCopy": {
            "name": "deepCopy",
            "location": 86,
            "return": [
                "str",
                "Layout"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layout.processLayoutText": {
            "name": "processLayoutText",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layoutText": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Layout.processLayoutChar": {
            "name": "processLayoutChar",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "int",
                    "float",
                    "List[int]",
                    "bool"
                ],
                "y": [
                    "str",
                    "int",
                    "float",
                    "List[int]",
                    "bool"
                ],
                "layoutChar": [
                    "str",
                    "List[str]",
                    "List[Tuple[int, int]]",
                    "List[float]"
                ]
            }
        }
    },
    "nd889-master/1_foundations/3_pacman/pacman.py": {
        "default": {
            "name": "default",
            "location": 453,
            "return": [
                "str"
            ],
            "arguments": {
                "str": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "parseAgentArgs": {
            "name": "parseAgentArgs",
            "location": 456,
            "return": [
                "Dict",
                "float",
                "Dict[Union[str,int],Union[str,int]]",
                "int",
                "types.UUIDType"
            ],
            "arguments": {
                "str": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "List[str]",
                    "None"
                ]
            }
        },
        "readCommand": {
            "name": "readCommand",
            "location": 468,
            "return": [
                "List[str]",
                "Optional[Iterable[str]]",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "Sequence[str]",
                    "Optional[List[str]]",
                    "None",
                    "AbstractSet[str]",
                    "AbstractSet"
                ]
            }
        },
        "loadAgent": {
            "name": "loadAgent",
            "location": 579,
            "return": [
                "Optional[str]",
                "str",
                "list"
            ],
            "arguments": {
                "pacman": [
                    "str",
                    "Dict[str,Any]",
                    "Type"
                ],
                "nographics": [
                    "str",
                    "bool"
                ]
            }
        },
        "replayGame": {
            "name": "replayGame",
            "location": 602,
            "return": [
                "None"
            ],
            "arguments": {
                "layout": [
                    "str"
                ],
                "actions": [
                    "List[str]"
                ],
                "display": [
                    "Tuple[int, int]"
                ]
            }
        },
        "runGames": {
            "name": "runGames",
            "location": 620,
            "return": [
                "List",
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "layout": [
                    "bool",
                    "Tuple[int]",
                    "Optional[List[float]]",
                    "List[float]",
                    "None"
                ],
                "pacman": [
                    "bool",
                    "float",
                    "int",
                    "Tuple[starfish.types.Number]",
                    "Union[starfish.types.Number,Tuple[starfish.types.Number]]",
                    "List[float]",
                    "Optional[List[float]]",
                    "None"
                ],
                "ghosts": [
                    "bool",
                    "float",
                    "int",
                    "Tuple[starfish.types.Number]",
                    "Union[starfish.types.Number,Tuple[starfish.types.Number]]",
                    "List[float]",
                    "Optional[List[float]]",
                    "None"
                ],
                "display": [
                    "Dict",
                    "bool",
                    "Dict[str,Any]",
                    "List[int]",
                    "MutableMapping[str,Any]",
                    "MutableMapping"
                ],
                "numGames": [
                    "int",
                    "float"
                ],
                "record": [
                    "bool",
                    "int"
                ],
                "numTraining": [
                    "int",
                    "Tuple[float]"
                ],
                "catchExceptions": [
                    "bool",
                    "int",
                    "float",
                    "Union[starfish.types.Number,Tuple[starfish.types.Number]]",
                    "Optional[List[float]]"
                ],
                "timeout": [
                    "int",
                    "bool",
                    "Optional[Type]",
                    "str",
                    "Optional[bytes]"
                ]
            }
        },
        "GameState.getAndResetExplored": {
            "name": "getAndResetExplored",
            "location": 70,
            "return": [
                "str",
                "int",
                "bool",
                "List[int]"
            ],
            "arguments": {}
        },
        "GameState.getLegalActions": {
            "name": "getLegalActions",
            "location": 76,
            "return": [
                "List",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "agentIndex": [
                    "int",
                    "Dict[str,Set[str]]",
                    "str",
                    "Dict",
                    "Optional[str]"
                ]
            }
        },
        "GameState.generateSuccessor": {
            "name": "generateSuccessor",
            "location": 88,
            "return": [
                "GameState",
                "Callable",
                "List[str]",
                "Dict",
                "int",
                "allennlp.common.util.JsonDict"
            ],
            "arguments": {
                "self": [],
                "agentIndex": [
                    "str"
                ],
                "action": [
                    "int",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "GameState.getLegalPacmanActions": {
            "name": "getLegalPacmanActions",
            "location": 119,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.generatePacmanSuccessor": {
            "name": "generatePacmanSuccessor",
            "location": 122,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "GameState.getPacmanState": {
            "name": "getPacmanState",
            "location": 128,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.getPacmanPosition": {
            "name": "getPacmanPosition",
            "location": 137,
            "return": [
                "bytes",
                "str",
                "int",
                "Optional[Exception]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.getGhostStates": {
            "name": "getGhostStates",
            "location": 140,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.getGhostState": {
            "name": "getGhostState",
            "location": 143,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "agentIndex": [
                    "int",
                    "float",
                    "Union[int,str]",
                    "str"
                ]
            }
        },
        "GameState.getGhostPosition": {
            "name": "getGhostPosition",
            "location": 148,
            "return": [
                "int",
                "Callable",
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "agentIndex": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Dict[int,dict]",
                    "None",
                    "travelfootprininsta.types.Profile"
                ]
            }
        },
        "GameState.getGhostPositions": {
            "name": "getGhostPositions",
            "location": 153,
            "return": [
                "List",
                "List[str]",
                "Dict[str,Dict[str,Any]]",
                "str",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.getNumAgents": {
            "name": "getNumAgents",
            "location": 156,
            "return": [
                "int",
                "IO",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.getScore": {
            "name": "getScore",
            "location": 159,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.getCapsules": {
            "name": "getCapsules",
            "location": 162,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.getNumFood": {
            "name": "getNumFood",
            "location": 168,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Callable",
                "Callable[[str], T]",
                "denite.util.UserContext"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.getFood": {
            "name": "getFood",
            "location": 171,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.getWalls": {
            "name": "getWalls",
            "location": 183,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.hasFood": {
            "name": "hasFood",
            "location": 195,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "GameState.hasWall": {
            "name": "hasWall",
            "location": 198,
            "return": [
                "str",
                "int",
                "bytes",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "List[int]"
                ],
                "y": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "GameState.isLose": {
            "name": "isLose",
            "location": 201,
            "return": [
                "str",
                "bool",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.isWin": {
            "name": "isWin",
            "location": 204,
            "return": [
                "str",
                "Iterable[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prevState": [
                    "str",
                    "None"
                ]
            }
        },
        "GameState.deepCopy": {
            "name": "deepCopy",
            "location": 221,
            "return": [
                "GameState",
                "Callable",
                "List[str]",
                "Dict",
                "int",
                "allennlp.common.util.JsonDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.__eq__": {
            "name": "__eq__",
            "location": 226,
            "return": [
                "bool",
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet",
                    "AbstractSet[Any]"
                ]
            }
        },
        "GameState.__hash__": {
            "name": "__hash__",
            "location": 232,
            "return": [
                "int",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.__str__": {
            "name": "__str__",
            "location": 238,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.initialize": {
            "name": "initialize",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layout": [
                    "int",
                    "List[int]",
                    "Collection[int]",
                    "Collection"
                ],
                "numGhostAgents": [
                    "int",
                    "List[int]",
                    "Collection[int]"
                ]
            }
        },
        "ClassicGameRules.__init__": {
            "name": "__init__",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "float"
                ]
            }
        },
        "ClassicGameRules.newGame": {
            "name": "newGame",
            "location": 266,
            "return": [
                "Game",
                "str",
                "bool",
                "Dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "layout": [
                    "int",
                    "Optional[bytes]",
                    "bool"
                ],
                "pacmanAgent": [
                    "bool",
                    "int"
                ],
                "ghostAgents": [
                    "int",
                    "Optional[bytes]",
                    "bool"
                ],
                "display": [
                    "Optional[List[Any]]",
                    "List[Any]",
                    "bool",
                    "List[str]",
                    "None",
                    "List[float]",
                    "Sequence[int]",
                    "str"
                ],
                "quiet": [
                    "bool",
                    "str",
                    "Callable",
                    "Iterable[str]"
                ],
                "catchExceptions": [
                    "bool",
                    "Optional[List[Any]]",
                    "List[str]",
                    "List[float]",
                    "Sequence[int]",
                    "str"
                ]
            }
        },
        "ClassicGameRules.process": {
            "name": "process",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "Sequence[str]",
                    "int"
                ],
                "game": [
                    "int",
                    "Callable[str,None]",
                    "Callable[[str],None]",
                    "bool"
                ]
            }
        },
        "ClassicGameRules.win": {
            "name": "win",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "bool"
                ],
                "game": [
                    "bool"
                ]
            }
        },
        "ClassicGameRules.lose": {
            "name": "lose",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "Callable[str,None]",
                    "Callable[[str],None]",
                    "bool"
                ],
                "game": [
                    "bool",
                    "BaseException"
                ]
            }
        },
        "ClassicGameRules.getProgress": {
            "name": "getProgress",
            "location": 291,
            "return": [
                "float",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "game_engine.Game"
                ]
            }
        },
        "ClassicGameRules.agentCrash": {
            "name": "agentCrash",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "None",
                    "Optional[Game]",
                    "game_engine.Game"
                ],
                "agentIndex": [
                    "None",
                    "Optional[Game]",
                    "game_engine.Game"
                ]
            }
        },
        "ClassicGameRules.getMaxTotalTime": {
            "name": "getMaxTotalTime",
            "location": 300,
            "return": [
                "int",
                "List[str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "agentIndex": [
                    "List[str]",
                    "int",
                    "Tuple[int,int]",
                    "str",
                    "Tuple[Union[int,int]]",
                    "Optional[types.FrameType]",
                    "None",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "ClassicGameRules.getMaxStartupTime": {
            "name": "getMaxStartupTime",
            "location": 303,
            "return": [
                "int",
                "List[str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "agentIndex": [
                    "List[str]",
                    "int",
                    "Tuple[int,int]",
                    "str",
                    "Tuple[Union[int,int]]",
                    "Optional[types.FrameType]",
                    "None",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "ClassicGameRules.getMoveWarningTime": {
            "name": "getMoveWarningTime",
            "location": 306,
            "return": [
                "int",
                "List[str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "agentIndex": [
                    "List[str]",
                    "int",
                    "Tuple[int,int]",
                    "str",
                    "Tuple[Union[int,int]]",
                    "Optional[types.FrameType]",
                    "None",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "ClassicGameRules.getMoveTimeout": {
            "name": "getMoveTimeout",
            "location": 309,
            "return": [
                "str",
                "int",
                "Tuple[int]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "agentIndex": [
                    "int",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "ClassicGameRules.getMaxTimeWarnings": {
            "name": "getMaxTimeWarnings",
            "location": 312,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "agentIndex": [
                    "int",
                    "Mapping",
                    "str",
                    "bool",
                    "List[str]",
                    "Mapping[str,Any]",
                    "None",
                    "Optional[str]",
                    "List[dict[str,Any]]",
                    "Optional[List[str]]",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "PacmanRules.getLegalActions": {
            "name": "getLegalActions",
            "location": 322,
            "return": [
                "Optional[str]",
                "Optional[List[str]]",
                "exporwiki.types.PrimalEngramEntry",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "state": [
                    "str"
                ]
            }
        },
        "PacmanRules.applyAction": {
            "name": "applyAction",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [],
                "action": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "PacmanRules.consume": {
            "name": "consume",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "position": [
                    "Dict",
                    "Optional[Tuple[int,...]]",
                    "str",
                    "Tuple[Union[int,...]]",
                    "T",
                    "None"
                ],
                "state": [
                    "Optional[Tuple[int, ...]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "GhostRules.getLegalActions": {
            "name": "getLegalActions",
            "location": 378,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "state": [],
                "ghostIndex": [
                    "str",
                    "numpy.random.RandomState"
                ]
            }
        },
        "GhostRules.applyAction": {
            "name": "applyAction",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [],
                "action": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "ghostIndex": []
            }
        },
        "GhostRules.decrementTimer": {
            "name": "decrementTimer",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "ghostState": []
            }
        },
        "GhostRules.checkDeath": {
            "name": "checkDeath",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [
                    "List[int]"
                ],
                "agentIndex": []
            }
        },
        "GhostRules.collide": {
            "name": "collide",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [
                    "str",
                    "Sequence[str]"
                ],
                "ghostState": [],
                "agentIndex": [
                    "Sequence[str]",
                    "Sequence[Sequence[str]]",
                    "IO",
                    "str",
                    "Sequence[Tuple[str,int]]",
                    "Sequence[tuple[Union[str,int]]]"
                ]
            }
        },
        "GhostRules.canKill": {
            "name": "canKill",
            "location": 441,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pacmanPosition": [
                    "int",
                    "Callable",
                    "str"
                ],
                "ghostPosition": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "GhostRules.placeGhost": {
            "name": "placeGhost",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [
                    "int",
                    "Callable[[List],List[str]]",
                    "Callable[list,list[str]]",
                    "Sequence[Tuple[str,int]]",
                    "Sequence[tuple[Union[str,int]]]"
                ],
                "ghostState": []
            }
        }
    },
    "nd889-master/1_foundations/3_pacman/pacmanAgents.py": {
        "scoreEvaluation": {
            "name": "scoreEvaluation",
            "location": 45,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "state": [
                    "Dict[str, float]"
                ]
            }
        },
        "LeftTurnAgent.getAction": {
            "name": "getAction",
            "location": 18,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "numpy.random.RandomState"
                ]
            }
        },
        "GreedyAgent.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "evalFn": [
                    "Text",
                    "int",
                    "bool",
                    "game.board.Board",
                    "float"
                ]
            }
        },
        "GreedyAgent.getAction": {
            "name": "getAction",
            "location": 34,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "float"
                ]
            }
        }
    },
    "nd889-master/1_foundations/3_pacman/search.py": {
        "tinyMazeSearch": {
            "name": "tinyMazeSearch",
            "location": 115,
            "return": [
                "str",
                "List"
            ],
            "arguments": {
                "problem": [
                    "int",
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "graph_search": {
            "name": "graph_search",
            "location": 126,
            "return": [
                "List",
                "str",
                "int"
            ],
            "arguments": {
                "problem": [
                    "bool",
                    "Mapping[str,Sequence[str]]",
                    "Mapping"
                ],
                "frontier": [
                    "list",
                    "List[int]"
                ]
            }
        },
        "depthFirstSearch": {
            "name": "depthFirstSearch",
            "location": 147,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "problem": [
                    "Optional[bytes]",
                    "sqlalchemy.util.KeyedTuple",
                    "Dict[str, Any]"
                ]
            }
        },
        "breadthFirstSearch": {
            "name": "breadthFirstSearch",
            "location": 173,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "problem": [
                    "bool",
                    "Optional[bytes]"
                ]
            }
        },
        "uniformCostSearch": {
            "name": "uniformCostSearch",
            "location": 186,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "problem": [
                    "bool",
                    "Optional[bytes]"
                ]
            }
        },
        "nullHeuristic": {
            "name": "nullHeuristic",
            "location": 197,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "state": [
                    "str"
                ],
                "problem": [
                    "str",
                    "None"
                ]
            }
        },
        "manhattanHeuristic": {
            "name": "manhattanHeuristic",
            "location": 204,
            "return": [
                "bool"
            ],
            "arguments": {
                "state": [
                    "int",
                    "Dict[str,Any]",
                    "Dict"
                ],
                "problem": [
                    "int",
                    "Dict[str,Any]",
                    "None",
                    "Dict"
                ]
            }
        },
        "aStarSearch": {
            "name": "aStarSearch",
            "location": 207,
            "return": [
                "str"
            ],
            "arguments": {
                "problem": [
                    "str",
                    "float",
                    "int",
                    "bool",
                    "Tuple[bytes]"
                ],
                "heuristic": [
                    "bool"
                ]
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict[str,Any]",
                    "List[int]",
                    "List[list[str]]",
                    "int",
                    "List[List[str]]",
                    "bool"
                ],
                "action": [
                    "Dict[str,Any]",
                    "List[int]",
                    "List[list[str]]",
                    "int",
                    "List[List[str]]",
                    "bool"
                ],
                "cost": [
                    "float",
                    "bool",
                    "Counter",
                    "int"
                ],
                "parent": [
                    "str",
                    "static_frame.core.util.PathSpecifier",
                    "bool",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None"
                ]
            }
        },
        "Node.parent_state": {
            "name": "parent_state",
            "location": 31,
            "return": [
                "None",
                "Optional[bool]",
                "Optional[dict]",
                "Dict",
                "Dict[Any,bool]",
                "Union[str,None]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.get_path": {
            "name": "get_path",
            "location": 36,
            "return": [
                "List",
                "str",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__eq__": {
            "name": "__eq__",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Node.__ne__": {
            "name": "__ne__",
            "location": 55,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict",
                    "AbstractSet",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "Node.__lt__": {
            "name": "__lt__",
            "location": 58,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Type",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "Node.__gt__": {
            "name": "__gt__",
            "location": 61,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Type",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "Node.__hash__": {
            "name": "__hash__",
            "location": 64,
            "return": [
                "int",
                "bool",
                "static_frame.core.util.DepthLevelSpecifier",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__str__": {
            "name": "__str__",
            "location": 67,
            "return": [
                "Text",
                "str",
                "Optional[int]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchProblem.getStartState": {
            "name": "getStartState",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchProblem.isGoalState": {
            "name": "isGoalState",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "SearchProblem.getSuccessors": {
            "name": "getSuccessors",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "SearchProblem.getCostOfActions": {
            "name": "getCostOfActions",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "actions": [
                    "int",
                    "Dict[str,Any]",
                    "Tuple",
                    "bool"
                ]
            }
        },
        "aStarSearch.wrapper": {
            "name": "wrapper",
            "location": 213,
            "return": [
                "dict",
                "str",
                "OrderedDict[str, Any]",
                "Callable"
            ],
            "arguments": {
                "node": []
            }
        }
    },
    "nd889-master/1_foundations/3_pacman/searchAgents.py": {
        "manhattanHeuristic": {
            "name": "manhattanHeuristic",
            "location": 244,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "position": [
                    "str"
                ],
                "problem": [
                    "str"
                ],
                "info": [
                    "Dict",
                    "str",
                    "Optional[Dict]",
                    "bool"
                ]
            }
        },
        "euclideanHeuristic": {
            "name": "euclideanHeuristic",
            "location": 250,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "position": [
                    "str"
                ],
                "problem": [
                    "str"
                ],
                "info": [
                    "Dict",
                    "str",
                    "Optional[Dict]",
                    "bool"
                ]
            }
        },
        "cornersHeuristic": {
            "name": "cornersHeuristic",
            "location": 320,
            "return": [
                "str",
                "int",
                "Dict[str,Any]",
                "float",
                "List[Union[int,str]]",
                "Set",
                "bytearray",
                "bytes"
            ],
            "arguments": {
                "state": [
                    "int",
                    "Dict[str,Any]",
                    "Dict"
                ],
                "problem": [
                    "Dict",
                    "Callable",
                    "str",
                    "LanguageConceptAlignment"
                ]
            }
        },
        "foodHeuristic": {
            "name": "foodHeuristic",
            "location": 422,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "state": [
                    "int",
                    "Dict[str,Any]",
                    "Dict"
                ],
                "problem": [
                    "str"
                ]
            }
        },
        "mazeDistance": {
            "name": "mazeDistance",
            "location": 535,
            "return": [
                "int",
                "bool",
                "List[Dict]"
            ],
            "arguments": {
                "point1": [
                    "Callable",
                    "float",
                    "int"
                ],
                "point2": [
                    "int",
                    "Tuple"
                ],
                "gameState": [
                    "Callable"
                ]
            }
        },
        "GoWestAgent.getAction": {
            "name": "getAction",
            "location": 43,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict[str, float]",
                    "bool"
                ]
            }
        },
        "SearchAgent.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "Text",
                    "str",
                    "Dict[str,int]"
                ],
                "prob": [
                    "Text",
                    "str",
                    "Union[str,Dict[str,str]]",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "heuristic": [
                    "Text",
                    "str",
                    "Set",
                    "float",
                    "Tuple"
                ]
            }
        },
        "SearchAgent.registerInitialState": {
            "name": "registerInitialState",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict",
                    "Callable",
                    "str",
                    "Container[int]",
                    "Container"
                ]
            }
        },
        "SearchAgent.getAction": {
            "name": "getAction",
            "location": 113,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "PositionSearchProblem.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gameState": [
                    "str"
                ],
                "costFn": [
                    "Callable",
                    "Iterable[str]",
                    "Iterable[Union[int,str]]"
                ],
                "goal": [
                    "Tuple[int]",
                    "bool",
                    "int",
                    "List"
                ],
                "start": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]",
                    "List[Any]",
                    "Optional[bool]",
                    "Optional[List[Any]]",
                    "int",
                    "List",
                    "Optional[int]"
                ],
                "warn": [
                    "bool",
                    "int"
                ]
            }
        },
        "PositionSearchProblem.getStartState": {
            "name": "getStartState",
            "location": 158,
            "return": [
                "str",
                "Union[Sequence, 'SweepFixedValues']"
            ],
            "arguments": {
                "self": []
            }
        },
        "PositionSearchProblem.isGoalState": {
            "name": "isGoalState",
            "location": 161,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "List",
                    "Type",
                    "str"
                ]
            }
        },
        "PositionSearchProblem.getSuccessors": {
            "name": "getSuccessors",
            "location": 174,
            "return": [
                "List[tuple[Union[tuple[int],list]]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Sequence[Sequence[str]]",
                    "Sequence[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "PositionSearchProblem.getCostOfActions": {
            "name": "getCostOfActions",
            "location": 204,
            "return": [
                "List[str]",
                "int",
                "str",
                "float",
                "Callable",
                "Dict[int,float]"
            ],
            "arguments": {
                "self": [],
                "actions": [
                    "str",
                    "Optional[str]",
                    "Iterable[T]"
                ]
            }
        },
        "StayEastSearchAgent.__init__": {
            "name": "__init__",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StayWestSearchAgent.__init__": {
            "name": "__init__",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CornersProblem.__init__": {
            "name": "__init__",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "startingGameState": [
                    "bool"
                ]
            }
        },
        "CornersProblem.getStartState": {
            "name": "getStartState",
            "location": 281,
            "return": [
                "Tuple",
                "bool",
                "float",
                "Optional[float]",
                "Type[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CornersProblem.isGoalState": {
            "name": "isGoalState",
            "location": 285,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "float"
                ]
            }
        },
        "CornersProblem.getSuccessors": {
            "name": "getSuccessors",
            "location": 294,
            "return": [
                "List[tuple[Union[tuple[tuple[int]],int]]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "CornersProblem.getCostOfActions": {
            "name": "getCostOfActions",
            "location": 311,
            "return": [
                "int",
                "List[str]",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "actions": [
                    "Optional[Tuple[Any, Any]]",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "AStarCornersAgent.__init__": {
            "name": "__init__",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoodSearchProblem.__init__": {
            "name": "__init__",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "startingGameState": [
                    "bool"
                ]
            }
        },
        "FoodSearchProblem.getStartState": {
            "name": "getStartState",
            "location": 382,
            "return": [
                "bool",
                "float",
                "Optional[float]",
                "Type[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoodSearchProblem.isGoalState": {
            "name": "isGoalState",
            "location": 385,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "float"
                ]
            }
        },
        "FoodSearchProblem.getSuccessors": {
            "name": "getSuccessors",
            "location": 388,
            "return": [
                "List[tuple[Union[tuple[tuple[int]],int]]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "List",
                    "List[str]",
                    "bytes",
                    "List[dict]",
                    "int",
                    "List[Dict]"
                ]
            }
        },
        "FoodSearchProblem.getCostOfActions": {
            "name": "getCostOfActions",
            "location": 402,
            "return": [
                "int",
                "List[str]",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "actions": [
                    "Dict[str,Any]",
                    "Tuple",
                    "int",
                    "bool"
                ]
            }
        },
        "AStarFoodSearchAgent.__init__": {
            "name": "__init__",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClosestDotSearchAgent.registerInitialState": {
            "name": "registerInitialState",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "T"
                ]
            }
        },
        "ClosestDotSearchAgent.findPathToClosestDot": {
            "name": "findPathToClosestDot",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gameState": [
                    "Sequence[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "AnyFoodSearchProblem.__init__": {
            "name": "__init__",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gameState": [
                    "Callable"
                ]
            }
        },
        "AnyFoodSearchProblem.isGoalState": {
            "name": "isGoalState",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int"
                ]
            }
        },
        "ApproximateSearchAgent.registerInitialState": {
            "name": "registerInitialState",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict[str,str]",
                    "int"
                ]
            }
        },
        "ApproximateSearchAgent.getAction": {
            "name": "getAction",
            "location": 526,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        }
    },
    "nd889-master/1_foundations/3_pacman/textDisplay.py": {
        "NullGraphics.initialize": {
            "name": "initialize",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "bool",
                    "str",
                    "Dict[str,object]",
                    "Callable",
                    "Optional[IO[bytes]]",
                    "IO",
                    "None"
                ],
                "isBlue": [
                    "bool",
                    "str",
                    "Dict[str,object]",
                    "Optional[IO[bytes]]",
                    "Callable"
                ]
            }
        },
        "NullGraphics.update": {
            "name": "update",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ]
            }
        },
        "NullGraphics.pause": {
            "name": "pause",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullGraphics.draw": {
            "name": "draw",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "NullGraphics.finish": {
            "name": "finish",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PacmanGraphics.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "speed": [
                    "Optional[int]",
                    "None",
                    "int",
                    "Optional[float]",
                    "float",
                    "Optional[Callable]",
                    "Callable",
                    "Optional[Hashable]",
                    "Hashable"
                ]
            }
        },
        "PacmanGraphics.initialize": {
            "name": "initialize",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "float",
                    "str",
                    "Sequence[str]",
                    "bool",
                    "List"
                ],
                "isBlue": [
                    "bool",
                    "str",
                    "Dict[str,object]",
                    "Optional[IO[bytes]]",
                    "Callable"
                ]
            }
        },
        "PacmanGraphics.update": {
            "name": "update",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "PacmanGraphics.pause": {
            "name": "pause",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PacmanGraphics.draw": {
            "name": "draw",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "PacmanGraphics.finish": {
            "name": "finish",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nd889-master/1_foundations/3_pacman/util.py": {
        "manhattanDistance": {
            "name": "manhattanDistance",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "xy1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "xy2": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "raiseNotDefined": {
            "name": "raiseNotDefined",
            "location": 320,
            "return": [],
            "arguments": {}
        },
        "normalize": {
            "name": "normalize",
            "location": 324,
            "return": [
                "int",
                "float",
                "list",
                "List[T]",
                "List[float]"
            ],
            "arguments": {
                "vectorOrCounter": [
                    "bool"
                ]
            }
        },
        "nSample": {
            "name": "nSample",
            "location": 343,
            "return": [
                "float",
                "str",
                "T",
                "int"
            ],
            "arguments": {
                "distribution": [
                    "str",
                    "Callable",
                    "Optional[Tuple[int, ...]]",
                    "random.Random",
                    "Dict[str, Any]"
                ],
                "values": [
                    "List[int]",
                    "int",
                    "List[str]",
                    "bytes",
                    "Sequence[int]"
                ],
                "n": [
                    "int",
                    "Sequence[T]",
                    "str"
                ]
            }
        },
        "sample": {
            "name": "sample",
            "location": 359,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "distribution": [
                    "int",
                    "list",
                    "Union[Set[int], List[int], Dict[int, Any]]",
                    "Iterable",
                    "str",
                    "Sequence[str]"
                ],
                "values": [
                    "Sequence[Any]",
                    "str",
                    "Callable"
                ]
            }
        },
        "sampleFromCounter": {
            "name": "sampleFromCounter",
            "location": 373,
            "return": [
                "str",
                "int",
                "list",
                "List[str]"
            ],
            "arguments": {
                "ctr": [
                    "dict",
                    "Dict[str, \"Outcome\"]",
                    "Dict[str, Any]"
                ]
            }
        },
        "getProbability": {
            "name": "getProbability",
            "location": 377,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "value": [
                    "int",
                    "Dict[str, Any]",
                    "List[str]",
                    "float",
                    "Optional[bool]",
                    "Union[bool, str, None]",
                    "str"
                ],
                "distribution": [
                    "bool",
                    "Union[str, bytes]"
                ],
                "values": [
                    "bool",
                    "Union[str, bytes]"
                ]
            }
        },
        "flipCoin": {
            "name": "flipCoin",
            "location": 388,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "p": [
                    "float",
                    "int",
                    "List[float]"
                ]
            }
        },
        "chooseFromDistribution": {
            "name": "chooseFromDistribution",
            "location": 392,
            "return": [
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "distribution": [
                    "str",
                    "Type[T]",
                    "int",
                    "Optional[Mapping]"
                ]
            }
        },
        "nearestPoint": {
            "name": "nearestPoint",
            "location": 402,
            "return": [
                "float",
                "str",
                "List[List[int]]",
                "int",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "pos": [
                    "str",
                    "bool",
                    "Optional[float]",
                    "bytes"
                ]
            }
        },
        "sign": {
            "name": "sign",
            "location": 412,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "arrayInvert": {
            "name": "arrayInvert",
            "location": 421,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "array": [
                    "int",
                    "list"
                ]
            }
        },
        "matrixAsList": {
            "name": "matrixAsList",
            "location": 431,
            "return": [
                "int",
                "float",
                "tuple",
                "Tuple[str, str, str]",
                "Tuple[int]"
            ],
            "arguments": {
                "matrix": [
                    "list",
                    "str",
                    "List[int]",
                    "int",
                    "List[bytes]",
                    "List[Union[int, float]]"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "lookup": {
            "name": "lookup",
            "location": 443,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Dict[str, Any]"
                ],
                "namespace": [
                    "str",
                    "List[str]",
                    "bool",
                    "Tuple[str]",
                    "Sequence[str]",
                    "list"
                ]
            }
        },
        "pause": {
            "name": "pause",
            "location": 461,
            "return": [],
            "arguments": {}
        },
        "Stack.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "T",
                    "List[deque]",
                    "str",
                    "Callable"
                ]
            }
        },
        "Stack.pop": {
            "name": "pop",
            "location": 27,
            "return": [
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.isEmpty": {
            "name": "isEmpty",
            "location": 31,
            "return": [
                "List[Dict]",
                "List[int]",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Queue.push": {
            "name": "push",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "Queue.pop": {
            "name": "pop",
            "location": 44,
            "return": [
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.isEmpty": {
            "name": "isEmpty",
            "location": 51,
            "return": [
                "List[Dict]",
                "List[int]",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.push": {
            "name": "push",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "Iterable[str]",
                    "List[str]"
                ],
                "priority": [
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "PriorityQueue.pop": {
            "name": "pop",
            "location": 73,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.isEmpty": {
            "name": "isEmpty",
            "location": 77,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueueWithFunction.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "priorityFunction": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "PriorityQueueWithFunction.push": {
            "name": "push",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "Counter.__getitem__": {
            "name": "__getitem__",
            "location": 147,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, float]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "dict",
                    "List[str]",
                    "str",
                    "float",
                    "Dict[str, Any]"
                ]
            }
        },
        "Counter.incrementAll": {
            "name": "incrementAll",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "keys": [
                    "Iterable[T]",
                    "str",
                    "tuple",
                    "bool",
                    "Union[float, int]"
                ],
                "count": [
                    "str",
                    "int",
                    "Set[str]"
                ]
            }
        },
        "Counter.argMax": {
            "name": "argMax",
            "location": 165,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "Optional[str]",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Counter.sortedKeys": {
            "name": "sortedKeys",
            "location": 175,
            "return": [
                "List[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Counter.totalCount": {
            "name": "totalCount",
            "location": 192,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Counter.normalize": {
            "name": "normalize",
            "location": 198,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Counter.divideAll": {
            "name": "divideAll",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "divisor": [
                    "int",
                    "bool"
                ]
            }
        },
        "Counter.copy": {
            "name": "copy",
            "location": 218,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Counter.__mul__": {
            "name": "__mul__",
            "location": 224,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "Iterable[Any]",
                    "int",
                    "List[Tuple[int, int, str]]",
                    "Callable"
                ]
            }
        },
        "Counter.__radd__": {
            "name": "__radd__",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "y": [
                    "str"
                ]
            }
        },
        "Counter.__add__": {
            "name": "__add__",
            "location": 268,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "OrderedDict"
                ]
            }
        },
        "Counter.__sub__": {
            "name": "__sub__",
            "location": 294,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "TimeoutFunction.__init__": {
            "name": "__init__",
            "location": 477,
            "return": [],
            "arguments": {
                "self": [],
                "function": [
                    "int",
                    "bool",
                    "str",
                    "List[float]"
                ],
                "timeout": [
                    "int",
                    "bool",
                    "str",
                    "List[float]"
                ]
            }
        },
        "TimeoutFunction.handle_timeout": {
            "name": "handle_timeout",
            "location": 482,
            "return": [],
            "arguments": {
                "self": [],
                "signum": [
                    "int",
                    "bool",
                    "List[List[Any]]",
                    "List[str]"
                ],
                "frame": [
                    "int",
                    "bool",
                    "List[List[Any]]",
                    "List[str]"
                ]
            }
        },
        "TimeoutFunction.__call__": {
            "name": "__call__",
            "location": 485,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "nd889-master/1_foundations/5_nqueens/util.py": {
        "constraint": {
            "name": "constraint",
            "location": 7,
            "return": [
                "float",
                "str",
                "Dict",
                "Generator[Union[Literal,None,None]]"
            ],
            "arguments": {
                "name": [],
                "expr": [
                    "str"
                ]
            }
        },
        "displayBoard": {
            "name": "displayBoard",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "locations": [
                    "str",
                    "float",
                    "List[str]",
                    "List[Exception]"
                ],
                "shape": [
                    "Dict[str,str]",
                    "Hashable",
                    "Callable[[T],None]",
                    "int",
                    "Callable[T,None]",
                    "Union[Callable,Coroutine]",
                    "collections.abc.Coroutine"
                ]
            }
        }
    },
    "nd889-master/1_foundations/6_planning/example_have_cake.py": {
        "have_cake": {
            "name": "have_cake",
            "location": 99,
            "return": [
                "HaveCakeProblem",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "HaveCakeProblem.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial": [
                    "str",
                    "bytearray"
                ],
                "goal": [
                    "str",
                    "cmk.utils.type_defs.Ruleset",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "HaveCakeProblem.get_actions": {
            "name": "get_actions",
            "location": 22,
            "return": [
                "List[Action]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HaveCakeProblem.actions": {
            "name": "actions",
            "location": 39,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "HaveCakeProblem.result": {
            "name": "result",
            "location": 55,
            "return": [
                "dict",
                "cmk.utils.type_defs.EventRule",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "T"
                ],
                "action": [
                    "int",
                    "aimacode.planning.Action",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TargetAddress"
                ]
            }
        },
        "HaveCakeProblem.goal_test": {
            "name": "goal_test",
            "location": 72,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "None",
                    "int",
                    "Optional[PaymentState]",
                    "Optional[ShipmentState]"
                ]
            }
        },
        "HaveCakeProblem.h_1": {
            "name": "h_1",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]",
                    "aimacode.search.Node",
                    "mypy.nodes.Node"
                ]
            }
        },
        "HaveCakeProblem.h_pg_levelsum": {
            "name": "h_pg_levelsum",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "str",
                "Dict",
                "List[int]",
                "List[list[int]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]",
                    "Node"
                ]
            }
        },
        "HaveCakeProblem.h_ignore_preconditions": {
            "name": "h_ignore_preconditions",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]",
                    "aimacode.search.Node",
                    "mypy.nodes.Node"
                ]
            }
        },
        "have_cake.get_init": {
            "name": "get_init",
            "location": 100,
            "return": [
                "FluentState",
                "raiden.utils.BlockNumber",
                "str",
                "raiden.utils.TokenAmount",
                "int"
            ],
            "arguments": {}
        },
        "have_cake.get_goal": {
            "name": "get_goal",
            "location": 107,
            "return": [
                "List",
                "int",
                "float",
                "Type[T]",
                "List[str]",
                "str",
                "Optional[Callable]",
                "Tuple[type]"
            ],
            "arguments": {}
        }
    },
    "nd889-master/1_foundations/6_planning/lp_utils.py": {
        "conjunctive_sentence": {
            "name": "conjunctive_sentence",
            "location": 21,
            "return": [],
            "arguments": {
                "pos_list": [],
                "neg_list": []
            }
        },
        "encode_state": {
            "name": "encode_state",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "fs": [],
                "fluent_map": []
            }
        },
        "decode_state": {
            "name": "decode_state",
            "location": 53,
            "return": [
                "FluentState"
            ],
            "arguments": {
                "state": [],
                "fluent_map": []
            }
        },
        "FluentState.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos_list": [],
                "neg_list": []
            }
        },
        "FluentState.sentence": {
            "name": "sentence",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FluentState.pos_sentence": {
            "name": "pos_sentence",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "nd889-master/1_foundations/6_planning/my_air_cargo_problems.py": {
        "air_cargo_p1": {
            "name": "air_cargo_p1",
            "location": 203,
            "return": [
                "AirCargoProblem",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "air_cargo_p2": {
            "name": "air_cargo_p2",
            "location": 228,
            "return": [
                "AirCargoProblem",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "air_cargo_p3": {
            "name": "air_cargo_p3",
            "location": 267,
            "return": [
                "AirCargoProblem",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "AirCargoProblem.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cargos": [
                    "int",
                    "float",
                    "bool"
                ],
                "planes": [
                    "int",
                    "float",
                    "bool"
                ],
                "airports": [
                    "int",
                    "float",
                    "bool"
                ],
                "initial": [
                    "trezor.utils.Writer"
                ],
                "goal": [
                    "List",
                    "Dict"
                ]
            }
        },
        "AirCargoProblem.get_actions": {
            "name": "get_actions",
            "location": 36,
            "return": [
                "int",
                "str",
                "List[List[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AirCargoProblem.actions": {
            "name": "actions",
            "location": 111,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "AirCargoProblem.result": {
            "name": "result",
            "location": 135,
            "return": [
                "dict",
                "cmk.utils.type_defs.EventRule",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "T"
                ],
                "action": [
                    "int",
                    "aimacode.planning.Action",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TargetAddress"
                ]
            }
        },
        "AirCargoProblem.goal_test": {
            "name": "goal_test",
            "location": 160,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "None",
                    "int",
                    "Optional[PaymentState]",
                    "Optional[ShipmentState]"
                ]
            }
        },
        "AirCargoProblem.h_1": {
            "name": "h_1",
            "location": 173,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]",
                    "aimacode.search.Node",
                    "mypy.nodes.Node"
                ]
            }
        },
        "AirCargoProblem.h_pg_levelsum": {
            "name": "h_pg_levelsum",
            "location": 178,
            "return": [
                "int",
                "Callable",
                "str",
                "Dict",
                "List[int]",
                "List[list[int]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]",
                    "Node"
                ]
            }
        },
        "AirCargoProblem.h_ignore_preconditions": {
            "name": "h_ignore_preconditions",
            "location": 190,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Pattern",
                    "bytes",
                    "Node",
                    "Dict",
                    "yaml.nodes.Node"
                ]
            }
        },
        "AirCargoProblem.get_actions.load_actions": {
            "name": "load_actions",
            "location": 49,
            "return": [
                "List[Action]",
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "AirCargoProblem.get_actions.unload_actions": {
            "name": "unload_actions",
            "location": 69,
            "return": [
                "List[Action]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "AirCargoProblem.get_actions.fly_actions": {
            "name": "fly_actions",
            "location": 89,
            "return": [
                "List[Action]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "nd889-master/1_foundations/6_planning/my_planning_graph.py": {
        "mutexify": {
            "name": "mutexify",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "node1": [
                    "int"
                ],
                "node2": [
                    "int"
                ]
            }
        },
        "PgNode.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PgNode.is_mutex": {
            "name": "is_mutex",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Generic",
                    "Optional[Callable[...,Any]]",
                    "Callable[...,Any]",
                    "None"
                ]
            }
        },
        "PgNode.show": {
            "name": "show",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PgNode_s.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str",
                    "Dict[str,str]",
                    "Union[str,int]",
                    "int"
                ],
                "is_pos": [
                    "int",
                    "Callable",
                    "Mapping",
                    "bool",
                    "Mapping[str,Any]"
                ]
            }
        },
        "PgNode_s.show": {
            "name": "show",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PgNode_s.__eq__": {
            "name": "__eq__",
            "location": 89,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool",
                    "Dict"
                ]
            }
        },
        "PgNode_s.__hash__": {
            "name": "__hash__",
            "location": 99,
            "return": [
                "int",
                "bool",
                "Optional[str]",
                "Union[List[str],List[Any]]",
                "Dict[str,Union[str,int]]",
                "Dict[str,bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PgNode_a.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "PgNode_a.show": {
            "name": "show",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PgNode_a.precond_s_nodes": {
            "name": "precond_s_nodes",
            "location": 141,
            "return": [
                "Set[PgNode_s]",
                "Dict[str,Any]",
                "Union[Sequence,SweepFixedValues]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PgNode_a.effect_s_nodes": {
            "name": "effect_s_nodes",
            "location": 157,
            "return": [
                "Set[PgNode_s]",
                "Dict[str,Any]",
                "Union[Sequence,SweepFixedValues]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PgNode_a.__eq__": {
            "name": "__eq__",
            "location": 173,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Tuple[Type]",
                    "Type"
                ]
            }
        },
        "PgNode_a.__hash__": {
            "name": "__hash__",
            "location": 183,
            "return": [
                "int",
                "bool",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlanningGraph.__init__": {
            "name": "__init__",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "problem": [
                    "int",
                    "Action"
                ],
                "state": [],
                "serial_planning": [
                    "bool",
                    "str",
                    "Dict"
                ]
            }
        },
        "PlanningGraph.noop_actions": {
            "name": "noop_actions",
            "location": 227,
            "return": [
                "List[Action]",
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "literal_list": [
                    "str",
                    "List",
                    "bool"
                ]
            }
        },
        "PlanningGraph.create_graph": {
            "name": "create_graph",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlanningGraph.add_action_level": {
            "name": "add_action_level",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int",
                    "str",
                    "float",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "PlanningGraph.add_literal_level": {
            "name": "add_literal_level",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "IO[str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "PlanningGraph.update_a_mutex": {
            "name": "update_a_mutex",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeset": [
                    "Set[Union[str,str,str,str,str,str,str]]",
                    "str",
                    "Set",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "PlanningGraph.serialize_actions": {
            "name": "serialize_actions",
            "location": 382,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node_a1": [
                    "int",
                    "float",
                    "Union[int,float]",
                    "utils.Node"
                ],
                "node_a2": [
                    "int",
                    "float",
                    "Union[int,float]",
                    "utils.Node"
                ]
            }
        },
        "PlanningGraph.inconsistent_effects_mutex": {
            "name": "inconsistent_effects_mutex",
            "location": 400,
            "return": [
                "Set",
                "int",
                "bool",
                "Union[int,float,complex]",
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "node_a1": [],
                "node_a2": []
            }
        },
        "PlanningGraph.interference_mutex": {
            "name": "interference_mutex",
            "location": 420,
            "return": [
                "Set",
                "int",
                "bool",
                "Union[int,float,complex]",
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "node_a1": [
                    "int"
                ],
                "node_a2": [
                    "int"
                ]
            }
        },
        "PlanningGraph.competing_needs_mutex": {
            "name": "competing_needs_mutex",
            "location": 442,
            "return": [
                "bool",
                "Set",
                "int"
            ],
            "arguments": {
                "self": [],
                "node_a1": [
                    "Dict[str,Any]"
                ],
                "node_a2": [
                    "Dict[str,Any]"
                ]
            }
        },
        "PlanningGraph.update_s_mutex": {
            "name": "update_s_mutex",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeset": [
                    "Set[Union[str,str,str,str,str,str,str]]",
                    "str",
                    "Set",
                    "Iterable",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "PlanningGraph.negation_mutex": {
            "name": "negation_mutex",
            "location": 484,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node_s1": [
                    "List[str]"
                ],
                "node_s2": [
                    "List[str]"
                ]
            }
        },
        "PlanningGraph.inconsistent_support_mutex": {
            "name": "inconsistent_support_mutex",
            "location": 503,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node_s1": [
                    "bool",
                    "List[int]",
                    "str"
                ],
                "node_s2": [
                    "bool",
                    "List[int]",
                    "str"
                ]
            }
        },
        "PlanningGraph.h_levelsum": {
            "name": "h_levelsum",
            "location": 527,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nd889-master/1_foundations/6_planning/run_search.py": {
        "run_search": {
            "name": "run_search",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "problem": [
                    "Dict"
                ],
                "search_function": [],
                "parameter": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "manual": {
            "name": "manual",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "p_choices": [
                    "int",
                    "float",
                    "List[float]",
                    "bool"
                ],
                "s_choices": [
                    "int",
                    "List[List[int]]",
                    "List[list[int]]"
                ]
            }
        },
        "show_solution": {
            "name": "show_solution",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "int",
                    "bool",
                    "tuple",
                    "float",
                    "list"
                ],
                "elapsed_time": [
                    "int",
                    "List",
                    "bool"
                ]
            }
        },
        "PrintableProblem.__repr__": {
            "name": "__repr__",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nd889-master/1_foundations/6_planning/__init__.py": {},
    "nd889-master/1_foundations/6_planning/aimacode/agents.py": {
        "TraceAgent": {
            "name": "TraceAgent",
            "location": 102,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "agent": [
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "TableDrivenAgentProgram": {
            "name": "TableDrivenAgentProgram",
            "location": 117,
            "return": [
                "str",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "table": [
                    "str",
                    "Callable"
                ]
            }
        },
        "RandomAgentProgram": {
            "name": "RandomAgentProgram",
            "location": 131,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "actions": [
                    "int",
                    "float"
                ]
            }
        },
        "SimpleReflexAgentProgram": {
            "name": "SimpleReflexAgentProgram",
            "location": 138,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rules": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "interpret_input": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ModelBasedReflexAgentProgram": {
            "name": "ModelBasedReflexAgentProgram",
            "location": 148,
            "return": [
                "bool",
                "int",
                "Dict[str, bool]",
                "str",
                "IO[Any]"
            ],
            "arguments": {
                "rules": [
                    "List[Tuple[str, str]]",
                    "Callable",
                    "List[str]",
                    "List[Dict[str, Any]]"
                ],
                "update_state": [
                    "List[Tuple[str, str]]",
                    "Callable",
                    "List[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "rule_match": {
            "name": "rule_match",
            "location": 159,
            "return": [
                "Callable[[T], bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "state": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "rules": [
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "RandomVacuumAgent": {
            "name": "RandomVacuumAgent",
            "location": 170,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "TableDrivenVacuumAgent": {
            "name": "TableDrivenVacuumAgent",
            "location": 175,
            "return": [
                "str",
                "Callable",
                "int"
            ],
            "arguments": {}
        },
        "ReflexVacuumAgent": {
            "name": "ReflexVacuumAgent",
            "location": 191,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "ModelBasedVacuumAgent": {
            "name": "ModelBasedVacuumAgent",
            "location": 204,
            "return": [
                "bool",
                "int",
                "Dict[str, bool]",
                "str",
                "IO[Any]"
            ],
            "arguments": {}
        },
        "compare_agents": {
            "name": "compare_agents",
            "location": 837,
            "return": [
                "int",
                "List[int]",
                "str",
                "List[dict]"
            ],
            "arguments": {
                "EnvFactory": [
                    "int",
                    "Union[float, int]",
                    "str",
                    "bool",
                    "Tuple[float, float]"
                ],
                "AgentFactories": [
                    "bool",
                    "Callable",
                    "list",
                    "str"
                ],
                "n": [
                    "int",
                    "Union[float, int]",
                    "str",
                    "bool",
                    "Tuple[float, float]"
                ],
                "steps": [
                    "bool",
                    "Callable",
                    "list",
                    "str"
                ]
            }
        },
        "test_agent": {
            "name": "test_agent",
            "location": 847,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "AgentFactory": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "steps": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "envs": [
                    "str",
                    "float"
                ]
            }
        },
        "Thing.__repr__": {
            "name": "__repr__",
            "location": 54,
            "return": [
                "str",
                "dict",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Thing.is_alive": {
            "name": "is_alive",
            "location": 57,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Thing.show_state": {
            "name": "show_state",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Thing.display": {
            "name": "display",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "canvas": [
                    "bool",
                    "List[str]",
                    "Iterable[T]"
                ],
                "x": [
                    "bool",
                    "List[str]",
                    "Iterable[T]"
                ],
                "y": [
                    "bool",
                    "List[str]",
                    "Iterable[T]"
                ],
                "width": [
                    "bool",
                    "List[str]",
                    "Iterable[T]"
                ],
                "height": [
                    "bool",
                    "List[str]",
                    "Iterable[T]"
                ]
            }
        },
        "Agent.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "program": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Agent.can_grab": {
            "name": "can_grab",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "thing": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TraceAgent.new_program": {
            "name": "new_program",
            "location": 107,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "percept": [
                    "int"
                ]
            }
        },
        "TableDrivenAgentProgram.program": {
            "name": "program",
            "location": 124,
            "return": [],
            "arguments": {
                "percept": []
            }
        },
        "SimpleReflexAgentProgram.program": {
            "name": "program",
            "location": 140,
            "return": [],
            "arguments": {
                "percept": []
            }
        },
        "ModelBasedReflexAgentProgram.program": {
            "name": "program",
            "location": 150,
            "return": [],
            "arguments": {
                "percept": []
            }
        },
        "ReflexVacuumAgent.program": {
            "name": "program",
            "location": 193,
            "return": [],
            "arguments": {
                "percept": []
            }
        },
        "ModelBasedVacuumAgent.program": {
            "name": "program",
            "location": 208,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "percept": [
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "Environment.__init__": {
            "name": "__init__",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Environment.thing_classes": {
            "name": "thing_classes",
            "location": 241,
            "return": [
                "int",
                "str",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Environment.percept": {
            "name": "percept",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "agent": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Environment.execute_action": {
            "name": "execute_action",
            "location": 251,
            "return": [],
            "arguments": {
                "self": [],
                "agent": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "action": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Environment.default_location": {
            "name": "default_location",
            "location": 255,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "Optional[Dict]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "thing": [
                    "str",
                    "List[str]",
                    "dict",
                    "Mapping[str, Any]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Environment.exogenous_change": {
            "name": "exogenous_change",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Environment.is_done": {
            "name": "is_done",
            "location": 263,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Environment.step": {
            "name": "step",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Environment.run": {
            "name": "run",
            "location": 283,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "steps": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ]
            }
        },
        "Environment.list_things_at": {
            "name": "list_things_at",
            "location": 290,
            "return": [
                "int",
                "bool",
                "Sequence[Any]",
                "Optional[dict]",
                "Optional[T]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "Tuple[float, float]",
                    "str",
                    "List[str]",
                    "bool",
                    "int",
                    "dict"
                ],
                "tclass": [
                    "Tuple[float, float]",
                    "str",
                    "List[str]",
                    "bool",
                    "int",
                    "dict"
                ]
            }
        },
        "Environment.some_things_at": {
            "name": "some_things_at",
            "location": 295,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "float",
                    "str",
                    "List[str]",
                    "List[Exception]"
                ],
                "tclass": [
                    "float",
                    "str",
                    "List[str]",
                    "List[Exception]"
                ]
            }
        },
        "Environment.add_thing": {
            "name": "add_thing",
            "location": 300,
            "return": [],
            "arguments": {
                "self": [],
                "thing": [
                    "int",
                    "list",
                    "float"
                ],
                "location": [
                    "Optional[int]",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "Environment.delete_thing": {
            "name": "delete_thing",
            "location": 313,
            "return": [],
            "arguments": {
                "self": [],
                "thing": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Direction.__init__": {
            "name": "__init__",
            "location": 339,
            "return": [],
            "arguments": {
                "self": [],
                "direction": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Direction.__add__": {
            "name": "__add__",
            "location": 342,
            "return": [
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "heading": [
                    "str",
                    "Callable[[T], bool]",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "Direction.move_forward": {
            "name": "move_forward",
            "location": 364,
            "return": [
                "int",
                "float",
                "str",
                "Type",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "from_location": [
                    "str"
                ]
            }
        },
        "XYEnvironment.__init__": {
            "name": "__init__",
            "location": 386,
            "return": [],
            "arguments": {
                "self": [],
                "width": [
                    "Union[int, str]",
                    "int",
                    "Dict[int, int]",
                    "float",
                    "bool",
                    "Tuple[int, int]"
                ],
                "height": [
                    "int",
                    "Union[int, str]",
                    "Iterator[int]",
                    "float"
                ]
            }
        },
        "XYEnvironment.things_near": {
            "name": "things_near",
            "location": 398,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "int",
                    "str",
                    "Tuple[str]",
                    "float",
                    "bool"
                ],
                "radius": [
                    "Optional[float]",
                    "Optional[Tuple[float, float]]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "XYEnvironment.percept": {
            "name": "percept",
            "location": 406,
            "return": [
                "str",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "XYEnvironment.execute_action": {
            "name": "execute_action",
            "location": 410,
            "return": [],
            "arguments": {
                "self": [],
                "agent": [
                    "Optional[int]"
                ],
                "action": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "XYEnvironment.default_location": {
            "name": "default_location",
            "location": 427,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "thing": [
                    "str",
                    "List[str]",
                    "dict",
                    "Mapping[str, Any]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "XYEnvironment.move_to": {
            "name": "move_to",
            "location": 430,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "thing": [
                    "Optional[List[str]]"
                ],
                "destination": [
                    "float",
                    "str",
                    "Iterable[str]",
                    "Any"
                ]
            }
        },
        "XYEnvironment.add_thing": {
            "name": "add_thing",
            "location": 451,
            "return": [],
            "arguments": {
                "self": [],
                "thing": [
                    "bool",
                    "Callable[[Type, str], bool]"
                ],
                "location": [
                    "Type"
                ],
                "exclude_duplicate_class_items": [
                    "float",
                    "Type[BaseException]",
                    "bool",
                    "Optional[Type]",
                    "bytes",
                    "str"
                ]
            }
        },
        "XYEnvironment.is_inbounds": {
            "name": "is_inbounds",
            "location": 461,
            "return": [
                "int",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "str",
                    "Type",
                    "int"
                ]
            }
        },
        "XYEnvironment.random_location_inbounds": {
            "name": "random_location_inbounds",
            "location": 466,
            "return": [
                "bool",
                "float",
                "Optional[Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "exclude": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]"
                ]
            }
        },
        "XYEnvironment.delete_thing": {
            "name": "delete_thing",
            "location": 474,
            "return": [],
            "arguments": {
                "self": [],
                "thing": [
                    "str"
                ]
            }
        },
        "XYEnvironment.add_walls": {
            "name": "add_walls",
            "location": 486,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XYEnvironment.add_observer": {
            "name": "add_observer",
            "location": 499,
            "return": [],
            "arguments": {
                "self": [],
                "observer": [
                    "float",
                    "int"
                ]
            }
        },
        "XYEnvironment.turn_heading": {
            "name": "turn_heading",
            "location": 508,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "heading": [
                    "int",
                    "Callable",
                    "str"
                ],
                "inc": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ContinuousWorld.__init__": {
            "name": "__init__",
            "location": 530,
            "return": [],
            "arguments": {
                "self": [],
                "width": [
                    "str",
                    "float",
                    "Optional[List[str]]",
                    "int"
                ],
                "height": [
                    "str",
                    "float",
                    "Optional[List[str]]",
                    "int"
                ]
            }
        },
        "ContinuousWorld.add_obstacle": {
            "name": "add_obstacle",
            "location": 535,
            "return": [],
            "arguments": {
                "self": [],
                "coordinates": [
                    "List[str]",
                    "Callable[[], T]",
                    "float"
                ]
            }
        },
        "PolygonObstacle.__init__": {
            "name": "__init__",
            "location": 540,
            "return": [],
            "arguments": {
                "self": [],
                "coordinates": [
                    "bool",
                    "int",
                    "List[Tuple[int, int]]",
                    "str"
                ]
            }
        },
        "VacuumEnvironment.__init__": {
            "name": "__init__",
            "location": 560,
            "return": [],
            "arguments": {
                "self": [],
                "width": [
                    "int",
                    "str",
                    "set"
                ],
                "height": [
                    "int",
                    "str",
                    "set"
                ]
            }
        },
        "VacuumEnvironment.thing_classes": {
            "name": "thing_classes",
            "location": 564,
            "return": [
                "int",
                "str",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VacuumEnvironment.percept": {
            "name": "percept",
            "location": 568,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "dict",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "VacuumEnvironment.execute_action": {
            "name": "execute_action",
            "location": 576,
            "return": [],
            "arguments": {
                "self": [],
                "agent": [
                    "bool",
                    "Callable[..., bool]"
                ],
                "action": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TrivialVacuumEnvironment.__init__": {
            "name": "__init__",
            "location": 597,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrivialVacuumEnvironment.thing_classes": {
            "name": "thing_classes",
            "location": 602,
            "return": [
                "int",
                "str",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrivialVacuumEnvironment.percept": {
            "name": "percept",
            "location": 606,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "bool",
                "List[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "int"
                ]
            }
        },
        "TrivialVacuumEnvironment.execute_action": {
            "name": "execute_action",
            "location": 610,
            "return": [],
            "arguments": {
                "self": [],
                "agent": [
                    "float",
                    "str",
                    "int",
                    "OrderedDict"
                ],
                "action": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TrivialVacuumEnvironment.default_location": {
            "name": "default_location",
            "location": 624,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "thing": [
                    "str",
                    "List[str]",
                    "dict",
                    "Mapping[str, Any]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Gold.__eq__": {
            "name": "__eq__",
            "location": 634,
            "return": [
                "str",
                "int",
                "Exception",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Explorer.can_grab": {
            "name": "can_grab",
            "location": 673,
            "return": [
                "str",
                "int",
                "Exception",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "thing": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "WumpusEnvironment.__init__": {
            "name": "__init__",
            "location": 682,
            "return": [],
            "arguments": {
                "self": [],
                "agent_program": [
                    "int",
                    "Dict[str, Any]",
                    "float",
                    "str",
                    "bool"
                ],
                "width": [
                    "int",
                    "float",
                    "List[float]"
                ],
                "height": [
                    "int",
                    "float",
                    "List[float]"
                ]
            }
        },
        "WumpusEnvironment.init_world": {
            "name": "init_world",
            "location": 686,
            "return": [],
            "arguments": {
                "self": [],
                "program": [
                    "Optional[int]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "WumpusEnvironment.get_world": {
            "name": "get_world",
            "location": 717,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "show_walls": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "WumpusEnvironment.percepts_from": {
            "name": "percepts_from",
            "location": 729,
            "return": [
                "bool",
                "Tuple[float, float]",
                "Optional[Any]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "Optional[int]",
                    "bool",
                    "Optional[float]",
                    "VT",
                    "Iterator[T]",
                    "list"
                ],
                "location": [
                    "str",
                    "Tuple[()]",
                    "List[Dict[str, Any]]"
                ],
                "tclass": [
                    "str",
                    "memoryview",
                    "dict",
                    "int",
                    "Callable[[T], bool]",
                    "Optional[bool]"
                ]
            }
        },
        "WumpusEnvironment.percept": {
            "name": "percept",
            "location": 748,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "str",
                    "list",
                    "List[str]",
                    "T",
                    "List[int]"
                ]
            }
        },
        "WumpusEnvironment.execute_action": {
            "name": "execute_action",
            "location": 767,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "float",
                    "str",
                    "Iterable[str]",
                    "Callable"
                ],
                "action": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "WumpusEnvironment.in_danger": {
            "name": "in_danger",
            "location": 809,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "bool",
                    "str",
                    "bytes"
                ]
            }
        },
        "WumpusEnvironment.is_done": {
            "name": "is_done",
            "location": 819,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_agent.score": {
            "name": "score",
            "location": 849,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "env": [
                    "dict",
                    "Type['Declared']"
                ]
            }
        },
        "Agent.__init__.program": {
            "name": "program",
            "location": 91,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "percept": [
                    "str",
                    "Tuple['cirq.Qid']",
                    "float"
                ]
            }
        }
    },
    "nd889-master/1_foundations/6_planning/aimacode/grid.py": {
        "turn_heading": {
            "name": "turn_heading",
            "location": 12,
            "return": [
                "Tuple[int]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "heading": [
                    "list",
                    "int",
                    "List[str]",
                    "List[int]"
                ],
                "inc": [
                    "int",
                    "List",
                    "List[str]",
                    "List[int]"
                ],
                "headings": [
                    "list",
                    "int",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "turn_right": {
            "name": "turn_right",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "heading": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "turn_left": {
            "name": "turn_left",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "heading": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "distance": {
            "name": "distance",
            "location": 24,
            "return": [
                "int",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int"
                ],
                "b": [
                    "str",
                    "int"
                ]
            }
        },
        "distance2": {
            "name": "distance2",
            "location": 29,
            "return": [
                "int",
                "bytes",
                "bytearray",
                "List[dict]",
                "torch.nn.utils.rnn.PackedSequence"
            ],
            "arguments": {
                "a": [
                    "T",
                    "Optional[Union[int, float]]"
                ],
                "b": [
                    "T",
                    "Optional[Union[int, float]]"
                ]
            }
        },
        "vector_clip": {
            "name": "vector_clip",
            "location": 34,
            "return": [],
            "arguments": {
                "vector": [
                    "int",
                    "bytes"
                ],
                "lowest": [
                    "int",
                    "bytes"
                ],
                "highest": [
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "nd889-master/1_foundations/6_planning/aimacode/logic.py": {
        "KB_AgentProgram": {
            "name": "KB_AgentProgram",
            "location": 112,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "KB": [
                    "int",
                    "str",
                    "Iterable[B]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "is_symbol": {
            "name": "is_symbol",
            "location": 135,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]",
                    "qutebrowser.utils.urlmatch.UrlPattern",
                    "int",
                    "float"
                ]
            }
        },
        "is_var_symbol": {
            "name": "is_var_symbol",
            "location": 140,
            "return": [
                "bool",
                "Type[Any]",
                "Type[T]",
                "Type"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "FrozenSet[int]"
                ]
            }
        },
        "is_prop_symbol": {
            "name": "is_prop_symbol",
            "location": 145,
            "return": [
                "bool",
                "Type[Any]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "FrozenSet[int]"
                ]
            }
        },
        "variables": {
            "name": "variables",
            "location": 150,
            "return": [
                "Set",
                "str",
                "List",
                "Optional[dict]",
                "int",
                "List[str]",
                "List[Tuple]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Sequence[T]",
                    "None",
                    "int",
                    "Optional[str]",
                    "T",
                    "PerceptionGraphPattern"
                ]
            }
        },
        "is_definite_clause": {
            "name": "is_definite_clause",
            "location": 158,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "Tuple[Expr]"
                ]
            }
        },
        "parse_definite_clause": {
            "name": "parse_definite_clause",
            "location": 175,
            "return": [
                "str",
                "Tuple[Union[list,bool,str,Hashable]]",
                "float",
                "Tuple"
            ],
            "arguments": {
                "s": [
                    "bool",
                    "str",
                    "Hashable"
                ]
            }
        },
        "tt_entails": {
            "name": "tt_entails",
            "location": 191,
            "return": [
                "bool",
                "str",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "kb": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "alpha": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "tt_check_all": {
            "name": "tt_check_all",
            "location": 202,
            "return": [
                "bool"
            ],
            "arguments": {
                "kb": [
                    "float",
                    "str"
                ],
                "alpha": [
                    "float",
                    "str",
                    "bool"
                ],
                "symbols": [
                    "str",
                    "Optional[qutebrowser.utils.urlmatch.UrlPattern]"
                ],
                "model": []
            }
        },
        "prop_symbols": {
            "name": "prop_symbols",
            "location": 217,
            "return": [
                "List",
                "List[str]",
                "List[int]",
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "List",
                    "Dict",
                    "bool",
                    "Match",
                    "Callable"
                ]
            }
        },
        "tt_true": {
            "name": "tt_true",
            "location": 227,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "pl_true": {
            "name": "pl_true",
            "location": 236,
            "return": [
                "Optional[str]",
                "Dict[str,Any]",
                "bool",
                "Dict",
                "None"
            ],
            "arguments": {
                "exp": [
                    "Dict[str,Any]",
                    "bool",
                    "Dict"
                ],
                "model": [
                    "str",
                    "Dict"
                ]
            }
        },
        "to_cnf": {
            "name": "to_cnf",
            "location": 293,
            "return": [
                "Callable",
                "Tuple[int, int]",
                "bool",
                "str",
                "list"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "SupportsInt"
                ]
            }
        },
        "eliminate_implications": {
            "name": "eliminate_implications",
            "location": 307,
            "return": [
                "str",
                "int",
                "Union[float,cirq.value.Symbol]",
                "bool",
                "List",
                "Expr"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "move_not_inwards": {
            "name": "move_not_inwards",
            "location": 332,
            "return": [
                "Dict[str,int]",
                "int",
                "List",
                "Dict",
                "str",
                "Tuple[Union[Literal,Literal]]",
                "Set",
                "Expr"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Type"
                ]
            }
        },
        "distribute_and_over_or": {
            "name": "distribute_and_over_or",
            "location": 354,
            "return": [
                "str",
                "bool",
                "int",
                "List",
                "Dict[str,Any]",
                "float"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Type",
                    "Tuple",
                    "int"
                ]
            }
        },
        "associate": {
            "name": "associate",
            "location": 382,
            "return": [
                "Expr",
                "Dict",
                "int",
                "Type",
                "Dict[str,Any]"
            ],
            "arguments": {
                "op": [
                    "Callable",
                    "Type"
                ],
                "args": []
            }
        },
        "dissociate": {
            "name": "dissociate",
            "location": 402,
            "return": [
                "List",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "op": [
                    "int",
                    "float",
                    "Callable",
                    "Dict",
                    "T"
                ],
                "args": []
            }
        },
        "conjuncts": {
            "name": "conjuncts",
            "location": 417,
            "return": [
                "str",
                "Union[float, cirq.value.Symbol]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "disjuncts": {
            "name": "disjuncts",
            "location": 427,
            "return": [
                "str",
                "Union[float, cirq.value.Symbol]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "pl_resolution": {
            "name": "pl_resolution",
            "location": 439,
            "return": [
                "bool"
            ],
            "arguments": {
                "KB": [
                    "int",
                    "Callable",
                    "str"
                ],
                "alpha": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "pl_resolve": {
            "name": "pl_resolve",
            "location": 459,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ci": [
                    "int",
                    "Callable",
                    "str"
                ],
                "cj": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "pl_fc_entails": {
            "name": "pl_fc_entails",
            "location": 497,
            "return": [
                "bool"
            ],
            "arguments": {
                "KB": [
                    "List[B]",
                    "List[cirq.Qid]",
                    "pywirelessmbus.utils.message.WMbusMessage"
                ],
                "q": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "dpll_satisfiable": {
            "name": "dpll_satisfiable",
            "location": 537,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[Union[int,float]]",
                    "int",
                    "Optional[str]",
                    "float",
                    "None"
                ]
            }
        },
        "dpll": {
            "name": "dpll",
            "location": 548,
            "return": [
                "bool"
            ],
            "arguments": {
                "clauses": [
                    "raiden.utils.BlockNumber",
                    "bool",
                    "int"
                ],
                "symbols": [
                    "str",
                    "bool",
                    "Iterable[Any]"
                ],
                "model": []
            }
        },
        "find_pure_symbol": {
            "name": "find_pure_symbol",
            "location": 572,
            "return": [
                "Tuple[Union[dict,bool]]",
                "str",
                "Tuple[None]",
                "Optional[str]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "symbols": [
                    "List[dict]",
                    "str",
                    "List[Dict]"
                ],
                "clauses": [
                    "str",
                    "List[Dict]",
                    "List[dict]"
                ]
            }
        },
        "find_unit_clause": {
            "name": "find_unit_clause",
            "location": 590,
            "return": [
                "Tuple[Union[dict[str,int],float]]",
                "Tuple[None]",
                "bool",
                "Sequence[Callable]",
                "Optional[str]",
                "Optional[List[Any]]",
                "Optional[List[str]]",
                "Optional[Union[str,Any]]",
                "Optional[Dict[str,Any]]"
            ],
            "arguments": {
                "clauses": [
                    "str"
                ],
                "model": [
                    "str",
                    "bytes",
                    "int",
                    "Type",
                    "None",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "unit_clause_assign": {
            "name": "unit_clause_assign",
            "location": 603,
            "return": [
                "Tuple[None]",
                "Optional[str]",
                "Tuple[Union[tuple[Union[Type,Type]],None,list,list[str]]]",
                "bool",
                "str"
            ],
            "arguments": {
                "clause": [
                    "IO[str]",
                    "Dict",
                    "IO",
                    "Set",
                    "bool",
                    "List[str]",
                    "str"
                ],
                "model": [
                    "List[List[Any]]",
                    "str",
                    "List[list[Any]]"
                ]
            }
        },
        "inspect_literal": {
            "name": "inspect_literal",
            "location": 626,
            "return": [
                "Tuple[bool]",
                "Optional[Dict[str,str]]",
                "Tuple[Union[str,Callable,tuple,bool]]",
                "Mapping",
                "Tuple[float,float,float,float]",
                "Callable[[KT],VT]"
            ],
            "arguments": {
                "literal": [
                    "str",
                    "Callable",
                    "Tuple",
                    "Callable[...,Coroutine[Any,Any,Any]]"
                ]
            }
        },
        "WalkSAT": {
            "name": "WalkSAT",
            "location": 643,
            "return": [
                "Dict",
                "Optional[str]",
                "None",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "clauses": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "p": [
                    "float",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "max_flips": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "plan_route": {
            "name": "plan_route",
            "location": 683,
            "return": [
                "None"
            ],
            "arguments": {
                "current": [
                    "str",
                    "bool",
                    "int"
                ],
                "goals": [
                    "str",
                    "bool",
                    "int"
                ],
                "allowed": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "SAT_plan": {
            "name": "SAT_plan",
            "location": 689,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "List",
                "Optional[BaseException]",
                "bool"
            ],
            "arguments": {
                "init": [
                    "int"
                ],
                "transition": [
                    "int"
                ],
                "goal": [
                    "int"
                ],
                "t_max": [
                    "Optional[Collection[int]]",
                    "Collection",
                    "int",
                    "float",
                    "None",
                    "bool"
                ],
                "SAT_solver": [
                    "Optional[Collection[int]]",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "unify": {
            "name": "unify",
            "location": 771,
            "return": [
                "bool",
                "None",
                "Dict",
                "str"
            ],
            "arguments": {
                "x": [
                    "List",
                    "str",
                    "Callable[[T],T]",
                    "Callable[T,T]"
                ],
                "y": [
                    "int",
                    "str",
                    "Callable[[T],T]",
                    "Callable[T,T]"
                ],
                "s": []
            }
        },
        "is_variable": {
            "name": "is_variable",
            "location": 795,
            "return": [
                "bool",
                "Union[int,float]",
                "Atom"
            ],
            "arguments": {
                "x": [
                    "Expr"
                ]
            }
        },
        "unify_var": {
            "name": "unify_var",
            "location": 800,
            "return": [
                "None",
                "str",
                "int",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "var": [
                    "int",
                    "str"
                ],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ],
                "s": [
                    "int",
                    "str"
                ]
            }
        },
        "occur_check": {
            "name": "occur_check",
            "location": 809,
            "return": [
                "bool"
            ],
            "arguments": {
                "var": [
                    "int",
                    "float"
                ],
                "x": [
                    "int",
                    "str",
                    "Mapping[str,float]",
                    "Mapping"
                ],
                "s": [
                    "int",
                    "T"
                ]
            }
        },
        "extend": {
            "name": "extend",
            "location": 825,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "str",
                    "float",
                    "Set[int]",
                    "bytes",
                    "bool"
                ],
                "var": [
                    "str",
                    "List",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "val": [
                    "str",
                    "List",
                    "Optional[str]",
                    "bool",
                    "None"
                ]
            }
        },
        "subst": {
            "name": "subst",
            "location": 832,
            "return": [
                "List",
                "bool",
                "Tuple",
                "Expr",
                "List[Tuple[int,str,str]]",
                "int",
                "List[Dict[str,Any]]",
                "frozenset"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str"
                ],
                "x": [
                    "str",
                    "Callable",
                    "int",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "fol_fc_ask": {
            "name": "fol_fc_ask",
            "location": 849,
            "return": [
                "None"
            ],
            "arguments": {
                "KB": [
                    "int",
                    "str",
                    "Iterable[B]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "alpha": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "standardize_variables": {
            "name": "standardize_variables",
            "location": 853,
            "return": [
                "bool",
                "Expr"
            ],
            "arguments": {
                "sentence": [],
                "dic": [
                    "Dict[str,Any]",
                    "None",
                    "int",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "fol_bc_ask": {
            "name": "fol_bc_ask",
            "location": 937,
            "return": [
                "Callable",
                "trezor.utils.Writer",
                "str",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "KB": [
                    "str",
                    "List",
                    "Callable",
                    "int"
                ],
                "query": [
                    "str",
                    "List",
                    "Callable",
                    "int"
                ]
            }
        },
        "fol_bc_or": {
            "name": "fol_bc_or",
            "location": 943,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "KB": [
                    "int",
                    "Callable",
                    "str"
                ],
                "goal": [
                    "int",
                    "Callable",
                    "str"
                ],
                "theta": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "fol_bc_and": {
            "name": "fol_bc_and",
            "location": 950,
            "return": [
                "typing.Generator[typing.Union[str,int,float]]",
                "typing.Generator[]"
            ],
            "arguments": {
                "KB": [
                    "Callable",
                    "float",
                    "str",
                    "Iterable[str]"
                ],
                "goals": [
                    "str",
                    "List[str]",
                    "int",
                    "bool"
                ],
                "theta": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "None",
                    "Optional[float]",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "diff": {
            "name": "diff",
            "location": 968,
            "return": [
                "int",
                "Union[cirq.value.Symbol,float]",
                "float",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "y": [
                    "raiden.utils.List[str]"
                ],
                "x": [
                    "Sequence[Any]"
                ]
            }
        },
        "simp": {
            "name": "simp",
            "location": 1001,
            "return": [
                "int",
                "Expr",
                "float",
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        },
        "d": {
            "name": "d",
            "location": 1064,
            "return": [
                "float",
                "utils.Node",
                "T",
                "trezor.utils.Writer",
                "cmk.utils.type_defs.ServiceName"
            ],
            "arguments": {
                "y": [
                    "int",
                    "str",
                    "bool"
                ],
                "x": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "KB.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "int",
                    "None",
                    "Dict[str,Any]",
                    "Union[str,int]",
                    "bool",
                    "str"
                ]
            }
        },
        "KB.tell": {
            "name": "tell",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "KB.ask": {
            "name": "ask",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "bool"
                ]
            }
        },
        "KB.ask_generator": {
            "name": "ask_generator",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[dict]",
                    "Optional[Callable[[dict],None]]",
                    "Dict",
                    "Union[None,list,tuple]",
                    "None",
                    "Callable[dict,None]",
                    "List",
                    "Tuple"
                ]
            }
        },
        "KB.retract": {
            "name": "retract",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "PropKB.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "PropKB.tell": {
            "name": "tell",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "List[str]",
                    "List",
                    "str",
                    "Iterable[float]",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "PropKB.ask_generator": {
            "name": "ask_generator",
            "location": 92,
            "return": [
                "typing.Generator[dict[, ]]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[ModelOrDc]",
                    "Dict",
                    "None"
                ]
            }
        },
        "PropKB.ask_if_true": {
            "name": "ask_if_true",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[int]",
                    "str",
                    "int",
                    "Sized",
                    "None"
                ]
            }
        },
        "PropKB.retract": {
            "name": "retract",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "KB_AgentProgram.program": {
            "name": "program",
            "location": 116,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "percept": []
            }
        },
        "KB_AgentProgram.make_percept_sentence": {
            "name": "make_percept_sentence",
            "location": 123,
            "return": [
                "Sequence['cirq.Qid']",
                "float"
            ],
            "arguments": {
                "self": [],
                "percept": [
                    "float",
                    "metrics_backend.utils.Address"
                ],
                "t": [
                    "float",
                    "metrics_backend.utils.Address"
                ]
            }
        },
        "KB_AgentProgram.make_action_query": {
            "name": "make_action_query",
            "location": 126,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "str"
                ]
            }
        },
        "KB_AgentProgram.make_action_sentence": {
            "name": "make_action_sentence",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int"
                ],
                "t": [
                    "int"
                ]
            }
        },
        "dissociate.collect": {
            "name": "collect",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "subargs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "PropDefiniteKB.tell": {
            "name": "tell",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "str",
                    "List[List[int]]",
                    "List[list[int]]"
                ]
            }
        },
        "PropDefiniteKB.ask_generator": {
            "name": "ask_generator",
            "location": 482,
            "return": [
                "typing.Generator[dict[, ]]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "List[str]",
                    "Optional[int]",
                    "Callable",
                    "int",
                    "None"
                ]
            }
        },
        "PropDefiniteKB.retract": {
            "name": "retract",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PropDefiniteKB.clauses_with_premise": {
            "name": "clauses_with_premise",
            "location": 490,
            "return": [
                "List",
                "List[str]",
                "Iterable[str]",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "str",
                    "bool"
                ]
            }
        },
        "HybridWumpusAgent.__init__": {
            "name": "__init__",
            "location": 679,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SAT_plan.translate_to_SAT": {
            "name": "translate_to_SAT",
            "location": 694,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "cmk.utils.type_defs.HostAddress",
                "str"
            ],
            "arguments": {
                "init": [
                    "int",
                    "float",
                    "list"
                ],
                "transition": [
                    "int",
                    "float"
                ],
                "goal": [
                    "int",
                    "float",
                    "list"
                ],
                "time": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "SAT_plan.extract_solution": {
            "name": "extract_solution",
            "location": 749,
            "return": [
                "bool",
                "List"
            ],
            "arguments": {
                "model": [
                    "Optional[List[str]]",
                    "callable"
                ]
            }
        },
        "FolKB.__init__": {
            "name": "__init__",
            "location": 888,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_clauses": [
                    "List",
                    "int",
                    "Dict[str,Any]",
                    "Union[str,int]",
                    "bool"
                ]
            }
        },
        "FolKB.tell": {
            "name": "tell",
            "location": 893,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "str",
                    "Dict",
                    "Tuple[Expr]"
                ]
            }
        },
        "FolKB.ask_generator": {
            "name": "ask_generator",
            "location": 899,
            "return": [
                "Union[cirq.value.Symbol, float]",
                "utils.Node",
                "trezor.utils.Writer",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "List[str]",
                    "Optional[int]",
                    "Callable",
                    "int",
                    "None"
                ]
            }
        },
        "FolKB.retract": {
            "name": "retract",
            "location": 902,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "FolKB.fetch_rules_for_goal": {
            "name": "fetch_rules_for_goal",
            "location": 905,
            "return": [
                "float",
                "raiden.utils.SecretHash",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "goal": [
                    "str",
                    "raiden.utils.Callable"
                ]
            }
        },
        "move_not_inwards.NOT": {
            "name": "NOT",
            "location": 338,
            "return": [
                "int",
                "bytearray",
                "bytes",
                "torch.nn.utils.rnn.PackedSequence"
            ],
            "arguments": {
                "b": [
                    "bytes",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "WalkSAT.sat_count": {
            "name": "sat_count",
            "location": 661,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sym": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "nd889-master/1_foundations/6_planning/aimacode/planning.py": {
        "air_cargo": {
            "name": "air_cargo",
            "location": 96,
            "return": [
                "PDLL",
                "float",
                "str",
                "bool",
                "Dict"
            ],
            "arguments": {}
        },
        "spare_tire": {
            "name": "spare_tire",
            "location": 141,
            "return": [
                "PDLL",
                "bool",
                "int",
                "str",
                "Callable[,Iterable[Any]]",
                "outcome.Outcome[str,utils.typeshed.pathlike]"
            ],
            "arguments": {}
        },
        "three_block_tower": {
            "name": "three_block_tower",
            "location": 179,
            "return": [
                "PDLL",
                "Iterable[str]",
                "int",
                "bool",
                "IO[str]"
            ],
            "arguments": {}
        },
        "have_cake_and_eat_cake_too": {
            "name": "have_cake_and_eat_cake_too",
            "location": 213,
            "return": [
                "str",
                "PDLL"
            ],
            "arguments": {}
        },
        "PDLL.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_state": [
                    "int",
                    "raiden.utils.TokenAmount",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "actions": [
                    "int",
                    "raiden.utils.TokenAmount",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "goal_test": [
                    "bool",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "int",
                    "None"
                ]
            }
        },
        "PDLL.goal_test": {
            "name": "goal_test",
            "location": 20,
            "return": [
                "cmk.utils.type_defs.UserId",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PDLL.act": {
            "name": "act",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "Optional[cirq.SingleQubitGate]",
                    "None"
                ]
            }
        },
        "Action.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "Dict[str,Any]",
                    "Callable[...,None]",
                    "str",
                    "int",
                    "List[Tuple[float,str]]",
                    "List[tuple[Union[float,str]]]"
                ],
                "precond": [
                    "int",
                    "bool",
                    "float"
                ],
                "effect": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Action.__call__": {
            "name": "__call__",
            "location": 59,
            "return": [
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "kb": [
                    "str",
                    "Callable",
                    "Union"
                ],
                "args": []
            }
        },
        "Action.substitute": {
            "name": "substitute",
            "location": 62,
            "return": [
                "Expr",
                "Optional[str]",
                "str",
                "Optional[Iterable[Any]]"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "List[Type]"
                ],
                "args": []
            }
        },
        "Action.check_precond": {
            "name": "check_precond",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "kb": [
                    "bool",
                    "Tuple",
                    "List[str]",
                    "str"
                ],
                "args": []
            }
        },
        "Action.act": {
            "name": "act",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kb": [
                    "str"
                ],
                "args": []
            }
        },
        "air_cargo.goal_test": {
            "name": "goal_test",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "kb": []
            }
        },
        "spare_tire.goal_test": {
            "name": "goal_test",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "kb": []
            }
        },
        "three_block_tower.goal_test": {
            "name": "goal_test",
            "location": 189,
            "return": [
                "bool"
            ],
            "arguments": {
                "kb": []
            }
        },
        "have_cake_and_eat_cake_too.goal_test": {
            "name": "goal_test",
            "location": 216,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "kb": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "nd889-master/1_foundations/6_planning/aimacode/search.py": {
        "tree_search": {
            "name": "tree_search",
            "location": 176,
            "return": [
                "None",
                "Optional[int]",
                "str",
                "Type"
            ],
            "arguments": {
                "problem": [
                    "int",
                    "Sequence[int]"
                ],
                "frontier": [
                    "List",
                    "List[int]",
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "graph_search": {
            "name": "graph_search",
            "location": 189,
            "return": [
                "None",
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "problem": [
                    "int",
                    "str",
                    "bool"
                ],
                "frontier": [
                    "List",
                    "int",
                    "numpy.random.RandomState",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "breadth_first_tree_search": {
            "name": "breadth_first_tree_search",
            "location": 206,
            "return": [
                "bytes",
                "float",
                "int"
            ],
            "arguments": {
                "problem": [
                    "Set[str]",
                    "int",
                    "Tuple[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "depth_first_tree_search": {
            "name": "depth_first_tree_search",
            "location": 211,
            "return": [
                "bytes",
                "float",
                "int"
            ],
            "arguments": {
                "problem": [
                    "Set[str]",
                    "int",
                    "Tuple[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "depth_first_graph_search": {
            "name": "depth_first_graph_search",
            "location": 216,
            "return": [
                "str",
                "bool",
                "int",
                "Hashable",
                "Sequence",
                "Optional[Set[str]]"
            ],
            "arguments": {
                "problem": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "breadth_first_search": {
            "name": "breadth_first_search",
            "location": 221,
            "return": [
                "Node",
                "str",
                "None",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "problem": [
                    "Callable[[None],None]",
                    "str",
                    "Callable[None,None]"
                ]
            }
        },
        "best_first_graph_search": {
            "name": "best_first_graph_search",
            "location": 240,
            "return": [
                "Node",
                "str",
                "None",
                "Dict",
                "bytes"
            ],
            "arguments": {
                "problem": [
                    "int",
                    "Match[str]",
                    "Match"
                ],
                "f": [
                    "int",
                    "cmk.gui.plugins.visuals.utils.Filter"
                ]
            }
        },
        "uniform_cost_search": {
            "name": "uniform_cost_search",
            "location": 271,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "problem": [
                    "Iterable[Any]",
                    "int",
                    "Union[RangeSet[T],Iterable[Any]]",
                    "Callable[VT,bool]",
                    "T",
                    "Callable[[VT],bool]"
                ]
            }
        },
        "depth_limited_search": {
            "name": "depth_limited_search",
            "location": 276,
            "return": [
                "utils.Node",
                "str",
                "float",
                "List[int]",
                "int"
            ],
            "arguments": {
                "problem": [
                    "List[int]",
                    "int",
                    "List[list]",
                    "utils.Node",
                    "List[List]"
                ],
                "limit": [
                    "int",
                    "List[int]",
                    "utils.Node",
                    "List[List]"
                ]
            }
        },
        "iterative_deepening_search": {
            "name": "iterative_deepening_search",
            "location": 297,
            "return": [
                "dict",
                "set"
            ],
            "arguments": {
                "problem": [
                    "str",
                    "bool"
                ]
            }
        },
        "astar_search": {
            "name": "astar_search",
            "location": 311,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "problem": [
                    "bool",
                    "Callable",
                    "Optional[Iterable[T]]",
                    "Iterable[T]",
                    "None"
                ],
                "h": [
                    "bool",
                    "Callable",
                    "None",
                    "Optional[Iterable[T]]",
                    "Iterable[T]"
                ]
            }
        },
        "recursive_best_first_search": {
            "name": "recursive_best_first_search",
            "location": 322,
            "return": [
                "Tuple[Optional[Any]]",
                "str",
                "int",
                "Tuple[int,Dict[str,Any]]",
                "bool"
            ],
            "arguments": {
                "problem": [
                    "Awaitable",
                    "str",
                    "collections.abc.Awaitable",
                    "Dict",
                    "Callable"
                ],
                "h": [
                    "str",
                    "Pattern",
                    "None",
                    "int"
                ]
            }
        },
        "hill_climbing": {
            "name": "hill_climbing",
            "location": 354,
            "return": [
                "Callable"
            ],
            "arguments": {
                "problem": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "exp_schedule": {
            "name": "exp_schedule",
            "location": 370,
            "return": [
                "Callable",
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "k": [
                    "int",
                    "Tuple[int,int]",
                    "str",
                    "float"
                ],
                "lam": [
                    "float",
                    "int",
                    "Tuple[int,int]",
                    "str"
                ],
                "limit": [
                    "int",
                    "Tuple[int,int]",
                    "str",
                    "float"
                ]
            }
        },
        "simulated_annealing": {
            "name": "simulated_annealing",
            "location": 375,
            "return": [
                "Node",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "problem": [
                    "int",
                    "str"
                ],
                "schedule": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "and_or_graph_search": {
            "name": "and_or_graph_search",
            "location": 391,
            "return": [
                "str",
                "bool",
                "int",
                "Hashable",
                "Sequence",
                "Optional[Set[str]]"
            ],
            "arguments": {
                "problem": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "genetic_search": {
            "name": "genetic_search",
            "location": 572,
            "return": [
                "bool",
                "Optional[int]",
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "problem": [
                    "int"
                ],
                "fitness_fn": [
                    "int",
                    "float",
                    "List[int]",
                    "bool"
                ],
                "ngen": [
                    "int",
                    "List[int]",
                    "str"
                ],
                "pmut": [
                    "float",
                    "int",
                    "List[int]",
                    "str"
                ],
                "n": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "genetic_algorithm": {
            "name": "genetic_algorithm",
            "location": 583,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "population": [],
                "fitness_fn": [
                    "float"
                ],
                "ngen": [
                    "int",
                    "Callable",
                    "str"
                ],
                "pmut": [
                    "float",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "UndirectedGraph": {
            "name": "UndirectedGraph",
            "location": 674,
            "return": [
                "Graph",
                "Dict[str,Any]",
                "Dict[battleships.grid.Position,Set[battleships.ship.Ship]]",
                "Dict[str,Dict[str,Any]]",
                "Dict[str,float]",
                "Dict[str,str]"
            ],
            "arguments": {
                "dict": [
                    "str",
                    "Dict[str,Any]",
                    "None",
                    "Optional[dict]",
                    "Dict"
                ]
            }
        },
        "RandomGraph": {
            "name": "RandomGraph",
            "location": 679,
            "return": [
                "int",
                "str",
                "Callable",
                "Dict[str,Type]"
            ],
            "arguments": {
                "nodes": [
                    "List",
                    "str",
                    "Iterable[Any]",
                    "Type[Set[Any]]"
                ],
                "min_links": [
                    "int",
                    "Dict",
                    "str",
                    "List[str]"
                ],
                "width": [
                    "int",
                    "Dict",
                    "str",
                    "List[str]"
                ],
                "height": [
                    "int",
                    "Dict",
                    "str",
                    "List[str]"
                ],
                "curvature": [
                    "Callable",
                    "int",
                    "bool",
                    "Dict",
                    "str"
                ]
            }
        },
        "random_boggle": {
            "name": "random_boggle",
            "location": 898,
            "return": [
                "List",
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "print_boggle": {
            "name": "print_boggle",
            "location": 911,
            "return": [
                "None"
            ],
            "arguments": {
                "board": [
                    "int",
                    "list",
                    "List[List[Any]]",
                    "Dict[str, str]",
                    "bytes",
                    "List[Tuple[int, int]]",
                    "List[List[int]]",
                    "str"
                ]
            }
        },
        "boggle_neighbors": {
            "name": "boggle_neighbors",
            "location": 926,
            "return": [
                "List[Optional[list]]",
                "Tuple[int]",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "n2": [
                    "int",
                    "Dict",
                    "bool"
                ],
                "cache": [
                    "Dict",
                    "List[Tuple[str,Any]]",
                    "float",
                    "Dict[str,Any]",
                    "Dict[Any,str]",
                    "int"
                ]
            }
        },
        "exact_sqrt": {
            "name": "exact_sqrt",
            "location": 959,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "n2": [
                    "int"
                ]
            }
        },
        "boggle_hill_climbing": {
            "name": "boggle_hill_climbing",
            "location": 1068,
            "return": [
                "Tuple[int]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "board": [
                    "Tuple",
                    "Deque",
                    "None"
                ],
                "ntimes": [
                    "int",
                    "Callable",
                    "str"
                ],
                "verbose": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "mutate_boggle": {
            "name": "mutate_boggle",
            "location": 1089,
            "return": [
                "Tuple",
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "board": [
                    "list",
                    "int",
                    "List[List[int]]",
                    "tuple",
                    "Optional[List[float]]",
                    "List[float]"
                ]
            }
        },
        "compare_searchers": {
            "name": "compare_searchers",
            "location": 1139,
            "return": [
                "None"
            ],
            "arguments": {
                "problems": [
                    "Dict[str,Any]",
                    "Sequence[int]",
                    "bool"
                ],
                "header": [
                    "str",
                    "int",
                    "Dict",
                    "None",
                    "Optional[str]",
                    "Optional[Dict]"
                ],
                "searchers": [
                    "List",
                    "Dict[str,Any]",
                    "Sequence[int]",
                    "bool"
                ]
            }
        },
        "compare_graph_searchers": {
            "name": "compare_graph_searchers",
            "location": 1154,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Problem.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial": [
                    "int",
                    "float",
                    "bool"
                ],
                "goal": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "Problem.actions": {
            "name": "actions",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "Problem.result": {
            "name": "result",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "Dict[str,str]"
                ],
                "action": [
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "Problem.goal_test": {
            "name": "goal_test",
            "location": 52,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "T",
                    "bytes",
                    "None",
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Problem.path_cost": {
            "name": "path_cost",
            "location": 62,
            "return": [
                "bool",
                "List[str]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "state1": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "action": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "state2": [
                    "bool",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Problem.value": {
            "name": "value",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "bool",
                    "Callable",
                    "Dict[str,str]",
                    "Optional[Dict[str,str]]",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "parent": [
                    "bool",
                    "None",
                    "str",
                    "Optional[Iterable[str]]",
                    "Iterable[str]",
                    "Dict[cmk.utils.type_defs.HostName,cmk.utils.type_defs.TagList]",
                    "Optional[int]"
                ],
                "action": [
                    "str",
                    "None",
                    "bool",
                    "Callable",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "int",
                    "Optional[str]"
                ],
                "path_cost": [
                    "int",
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 98,
            "return": [
                "Text",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__lt__": {
            "name": "__lt__",
            "location": 101,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Node.expand": {
            "name": "expand",
            "location": 104,
            "return": [
                "bool",
                "List"
            ],
            "arguments": {
                "self": [],
                "problem": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Node.child_node": {
            "name": "child_node",
            "location": 109,
            "return": [
                "Node",
                "Callable",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "problem": [
                    "NamedTuple"
                ],
                "action": [
                    "NamedTuple"
                ]
            }
        },
        "Node.solution": {
            "name": "solution",
            "location": 116,
            "return": [
                "List",
                "str",
                "Dict",
                "float",
                "Tuple[int,int]",
                "Union[int,None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.path": {
            "name": "path",
            "location": 120,
            "return": [
                "str",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__eq__": {
            "name": "__eq__",
            "location": 133,
            "return": [
                "bool",
                "cmk.utils.type_defs.UserId",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Node.__hash__": {
            "name": "__hash__",
            "location": 136,
            "return": [
                "int",
                "str",
                "Optional[int]",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleProblemSolvingAgentProgram.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_state": [
                    "str",
                    "Dict",
                    "None"
                ]
            }
        },
        "SimpleProblemSolvingAgentProgram.__call__": {
            "name": "__call__",
            "location": 150,
            "return": [
                "None",
                "Type",
                "Optional[str]",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": [],
                "percept": [
                    "int"
                ]
            }
        },
        "SimpleProblemSolvingAgentProgram.update_state": {
            "name": "update_state",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "percept": [
                    "bool",
                    "Sequence[int]",
                    "str"
                ]
            }
        },
        "SimpleProblemSolvingAgentProgram.formulate_goal": {
            "name": "formulate_goal",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "SimpleProblemSolvingAgentProgram.formulate_problem": {
            "name": "formulate_problem",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ],
                "goal": [
                    "str"
                ]
            }
        },
        "SimpleProblemSolvingAgentProgram.search": {
            "name": "search",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "problem": [
                    "int",
                    "str",
                    "List[int]",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "depth_limited_search.recursive_dls": {
            "name": "recursive_dls",
            "location": 278,
            "return": [
                "str",
                "Text",
                "Iterable[Any]",
                "None"
            ],
            "arguments": {
                "node": [
                    "int",
                    "str"
                ],
                "problem": [
                    "int"
                ],
                "limit": [
                    "int",
                    "List[List[str]]",
                    "List[int]"
                ]
            }
        },
        "recursive_best_first_search.RBFS": {
            "name": "RBFS",
            "location": 326,
            "return": [
                "Optional[int]",
                "Tuple[int]",
                "str",
                "Tuple[Optional[float]]",
                "Optional[str]",
                "Tuple[None]",
                "Type",
                "Tuple"
            ],
            "arguments": {
                "problem": [
                    "list",
                    "Iterable[Any]",
                    "List[int]"
                ],
                "node": [
                    "list"
                ],
                "flimit": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "and_or_graph_search.or_search": {
            "name": "or_search",
            "location": 402,
            "return": [
                "List",
                "None",
                "Optional[int]",
                "bool",
                "str",
                "Optional[str]",
                "Dict"
            ],
            "arguments": {
                "state": [
                    "str",
                    "bool",
                    "List[str]",
                    "TextIO"
                ],
                "problem": [
                    "str"
                ],
                "path": [
                    "str",
                    "List[str]",
                    "list",
                    "Iterable[str]",
                    "Optional[str]",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "and_or_graph_search.and_search": {
            "name": "and_search",
            "location": 413,
            "return": [
                "None",
                "Dict",
                "Optional[int]",
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "states": [
                    "str",
                    "bool",
                    "Union[str, bytes, int]"
                ],
                "problem": [
                    "str",
                    "Optional[str]"
                ],
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "OnlineDFSAgent.__init__": {
            "name": "__init__",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "problem": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "OnlineDFSAgent.__call__": {
            "name": "__call__",
            "location": 441,
            "return": [
                "None",
                "Iterable[str]",
                "List",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "percept": [
                    "int",
                    "str"
                ]
            }
        },
        "OnlineDFSAgent.update_state": {
            "name": "update_state",
            "location": 467,
            "return": [
                "str",
                "bool",
                "Sequence[int]"
            ],
            "arguments": {
                "self": [],
                "percept": [
                    "bool",
                    "Sequence[int]",
                    "str"
                ]
            }
        },
        "OnlineSearchProblem.__init__": {
            "name": "__init__",
            "location": 481,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial": [
                    "int",
                    "float",
                    "bool"
                ],
                "goal": [
                    "int",
                    "float",
                    "bool"
                ],
                "graph": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "OnlineSearchProblem.actions": {
            "name": "actions",
            "location": 486,
            "return": [
                "bytes",
                "dict",
                "str",
                "Sequence['cirq.Qid']",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ]
            }
        },
        "OnlineSearchProblem.output": {
            "name": "output",
            "location": 489,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict",
                    "Dict[str,Any]",
                    "int"
                ],
                "action": [
                    "Dict",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "OnlineSearchProblem.h": {
            "name": "h",
            "location": 492,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "OnlineSearchProblem.c": {
            "name": "c",
            "location": 498,
            "return": [
                "int",
                "T",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "a": [
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "s1": [
                    "str",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "OnlineSearchProblem.update_state": {
            "name": "update_state",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "percept": [
                    "bool",
                    "Sequence[int]",
                    "str"
                ]
            }
        },
        "OnlineSearchProblem.goal_test": {
            "name": "goal_test",
            "location": 507,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "LRTAStarAgent.__init__": {
            "name": "__init__",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "problem": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "LRTAStarAgent.__call__": {
            "name": "__call__",
            "location": 529,
            "return": [
                "None",
                "list[]",
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "s1": [
                    "Collection[int]",
                    "Collection",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "LRTAStarAgent.LRTA_cost": {
            "name": "LRTA_cost",
            "location": 552,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "float",
                    "List[T]",
                    "List[str]",
                    "str"
                ],
                "a": [
                    "int",
                    "T",
                    "float",
                    "Tuple[Union[float,float]]",
                    "List",
                    "List[T]",
                    "Tuple[float,float]"
                ],
                "s1": [
                    "Optional",
                    "raiden.utils.BlockIdentifier"
                ],
                "H": [
                    "int",
                    "str",
                    "Union[int,List[int]]",
                    "List[int]",
                    "Union[int,float]",
                    "float"
                ]
            }
        },
        "GAState.__init__": {
            "name": "__init__",
            "location": 602,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "genes": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "GAState.mate": {
            "name": "mate",
            "location": 605,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "GAState.mutate": {
            "name": "mutate",
            "location": 610,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.__init__": {
            "name": "__init__",
            "location": 636,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict": [
                    "str",
                    "None",
                    "List[str]",
                    "Sequence[str]",
                    "bool",
                    "bytes",
                    "int"
                ],
                "directed": [
                    "bool",
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "bytes",
                    "int"
                ]
            }
        },
        "Graph.make_undirected": {
            "name": "make_undirected",
            "location": 642,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.connect": {
            "name": "connect",
            "location": 648,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "A": [
                    "int"
                ],
                "B": [
                    "int"
                ],
                "distance": [
                    "int"
                ]
            }
        },
        "Graph.connect1": {
            "name": "connect1",
            "location": 655,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "A": [],
                "B": [],
                "distance": []
            }
        },
        "Graph.get": {
            "name": "get",
            "location": 659,
            "return": [
                "str",
                "Dict[str,str]",
                "Optional[str]",
                "int",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "numpy.random.RandomState",
                    "Set[str]",
                    "Optional[Set[str]]",
                    "None"
                ],
                "b": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Graph.nodes": {
            "name": "nodes",
            "location": 669,
            "return": [
                "List",
                "Optional[int]",
                "Optional[Iterable[str]]",
                "List[str]",
                "Dict[str,Any]",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphProblem.__init__": {
            "name": "__init__",
            "location": 793,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[Any,Any,bool]"
                ],
                "goal": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[Any,Any,bool]"
                ],
                "graph": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "GraphProblem.actions": {
            "name": "actions",
            "location": 797,
            "return": [
                "List",
                "str",
                "List[str]",
                "Optional[str]",
                "Dict",
                "Union[int,None]"
            ],
            "arguments": {
                "self": [],
                "A": [
                    "str",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "GraphProblem.result": {
            "name": "result",
            "location": 801,
            "return": [
                "str",
                "float",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "Dict[str,str]"
                ],
                "action": [
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "GraphProblem.path_cost": {
            "name": "path_cost",
            "location": 805,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "cost_so_far": [
                    "List[str]",
                    "List",
                    "Dict",
                    "str",
                    "Dict[str,Any]",
                    "Mapping"
                ],
                "A": [
                    "Dict",
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "List",
                    "Mapping"
                ],
                "action": [
                    "str",
                    "bool",
                    "int"
                ],
                "B": [
                    "Dict",
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "List",
                    "Mapping"
                ]
            }
        },
        "GraphProblem.h": {
            "name": "h",
            "location": 808,
            "return": [
                "int",
                "Iterable[str]",
                "float",
                "Dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]"
                ]
            }
        },
        "GraphProblemStochastic.result": {
            "name": "result",
            "location": 826,
            "return": [
                "dict",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "Iterable[str]",
                    "Dict[str,int]",
                    "Dict"
                ],
                "action": [
                    "str",
                    "Iterable[str]",
                    "Dict[str,int]",
                    "Dict"
                ]
            }
        },
        "GraphProblemStochastic.path_cost": {
            "name": "path_cost",
            "location": 829,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NQueensProblem.__init__": {
            "name": "__init__",
            "location": 847,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "N": [
                    "int",
                    "Optional[int]",
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "NQueensProblem.actions": {
            "name": "actions",
            "location": 851,
            "return": [
                "List",
                "List[str]",
                "Dict[int,int]",
                "Set[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "List[set[int]]",
                    "List[Set[int]]",
                    "int",
                    "Callable[[str],int]"
                ]
            }
        },
        "NQueensProblem.result": {
            "name": "result",
            "location": 860,
            "return": [
                "Sequence[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "List[Any]",
                    "Optional[Dict[str,str]]",
                    "str",
                    "Tuple[Union[str,str]]",
                    "Optional[List[Any]]",
                    "Tuple[str,str]"
                ],
                "row": [
                    "Sequence",
                    "bool",
                    "str"
                ]
            }
        },
        "NQueensProblem.conflicted": {
            "name": "conflicted",
            "location": 867,
            "return": [
                "bool",
                "int",
                "float",
                "rl_algorithms.utils.config.ConfigDict"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "int"
                ],
                "row": [
                    "str",
                    "int"
                ],
                "col": [
                    "str",
                    "int"
                ]
            }
        },
        "NQueensProblem.conflict": {
            "name": "conflict",
            "location": 872,
            "return": [
                "bool",
                "List[List[int]]",
                "int",
                "List",
                "Dict[str,List[str]]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "row1": [
                    "int",
                    "Optional[int]"
                ],
                "col1": [
                    "int",
                    "Optional[int]"
                ],
                "row2": [
                    "int",
                    "Optional[int]"
                ],
                "col2": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "NQueensProblem.goal_test": {
            "name": "goal_test",
            "location": 879,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Sequence[Sequence[str]]",
                    "Sequence[Tuple[str, int]]",
                    "Iterable[str]"
                ]
            }
        },
        "Wordlist.__init__": {
            "name": "__init__",
            "location": 974,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "IO",
                    "BinaryIO",
                    "IO[Any]",
                    "Set[str]",
                    "int",
                    "collections.abc.Awaitable",
                    "Iterable[str]",
                    "Awaitable"
                ],
                "min_len": [
                    "int",
                    "str",
                    "MutableMapping[str,Any]"
                ]
            }
        },
        "Wordlist.lookup": {
            "name": "lookup",
            "location": 984,
            "return": [
                "Tuple[bool]",
                "int",
                "Tuple[Optional[bool]]",
                "raiden.utils.Optional[int]",
                "slice",
                "str"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str",
                    "bytes"
                ],
                "lo": [
                    "str",
                    "int"
                ],
                "hi": [
                    "Tuple",
                    "None",
                    "Set[str]",
                    "Optional[Mapping[int,complex]]",
                    "Optional[Any]",
                    "Mapping",
                    "Optional[int]",
                    "Any",
                    "int"
                ]
            }
        },
        "Wordlist.__contains__": {
            "name": "__contains__",
            "location": 998,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Wordlist.__len__": {
            "name": "__len__",
            "location": 1001,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoggleFinder.__init__": {
            "name": "__init__",
            "location": 1013,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "BoggleFinder.set_board": {
            "name": "set_board",
            "location": 1020,
            "return": [
                "BoggleFinder",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "Optional[bytes]",
                    "None",
                    "bytes"
                ]
            }
        },
        "BoggleFinder.find": {
            "name": "find",
            "location": 1032,
            "return": [
                "None",
                "int",
                "Union[tuple,list]",
                "Set[str]",
                "Set[VT]"
            ],
            "arguments": {
                "self": [],
                "lo": [
                    "str",
                    "bool",
                    "Dict[str,str]"
                ],
                "hi": [
                    "str",
                    "bool",
                    "Dict[str,str]"
                ],
                "i": [
                    "int",
                    "str",
                    "bool",
                    "List[int]",
                    "Union[int,List[int]]"
                ],
                "visited": [
                    "Sequence[float]",
                    "float",
                    "int",
                    "str"
                ],
                "prefix": [
                    "str",
                    "List[str]",
                    "Optional[float]",
                    "Dict[str,str]"
                ]
            }
        },
        "BoggleFinder.words": {
            "name": "words",
            "location": 1051,
            "return": [
                "List",
                "List[str]",
                "List[float]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoggleFinder.score": {
            "name": "score",
            "location": 1057,
            "return": [
                "bool",
                "str",
                "int",
                "Tuple",
                "List[str]",
                "List",
                "Union[List[str],str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoggleFinder.__len__": {
            "name": "__len__",
            "location": 1061,
            "return": [
                "int",
                "float",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstrumentedProblem.__init__": {
            "name": "__init__",
            "location": 1105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "problem": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "InstrumentedProblem.actions": {
            "name": "actions",
            "location": 1110,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "List[int]",
                    "int",
                    "bool"
                ]
            }
        },
        "InstrumentedProblem.result": {
            "name": "result",
            "location": 1114,
            "return": [
                "jgikbase.idmapping.core.user.User.name",
                "list"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "Callable",
                    "torch.nn.utils.rnn.PackedSequence"
                ],
                "action": [
                    "str",
                    "Callable",
                    "torch.nn.utils.rnn.PackedSequence"
                ]
            }
        },
        "InstrumentedProblem.goal_test": {
            "name": "goal_test",
            "location": 1118,
            "return": [
                "int",
                "float",
                "str",
                "bool",
                "Set",
                "List",
                "Union[int,float,complex]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "List[List[str]]",
                    "List[list[str]]"
                ]
            }
        },
        "InstrumentedProblem.path_cost": {
            "name": "path_cost",
            "location": 1125,
            "return": [
                "bytes",
                "List[str]",
                "Sequence[str]",
                "BinaryIO",
                "TextIO"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "int",
                    "List[str]",
                    "List"
                ],
                "state1": [
                    "int",
                    "List[str]",
                    "List"
                ],
                "action": [
                    "int",
                    "List[str]",
                    "List"
                ],
                "state2": [
                    "int",
                    "List[str]",
                    "List"
                ]
            }
        },
        "InstrumentedProblem.value": {
            "name": "value",
            "location": 1128,
            "return": [
                "int",
                "dict",
                "str",
                "T",
                "raiden.utils.Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "Callable",
                    "Sequence[str]",
                    "bytes"
                ]
            }
        },
        "InstrumentedProblem.__getattr__": {
            "name": "__getattr__",
            "location": 1131,
            "return": [
                "str",
                "bool",
                "int",
                "MutableMapping[str, Any]",
                "bytes",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "List"
                ]
            }
        },
        "InstrumentedProblem.__repr__": {
            "name": "__repr__",
            "location": 1134,
            "return": [
                "Text",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "compare_searchers.do": {
            "name": "do",
            "location": 1146,
            "return": [
                "InstrumentedProblem",
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "searcher": [
                    "float",
                    "str",
                    "int"
                ],
                "problem": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "RandomGraph.distance_to_node": {
            "name": "distance_to_node",
            "location": 698,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "n": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "nd889-master/1_foundations/6_planning/aimacode/utils.py": {
        "sequence": {
            "name": "sequence",
            "location": 16,
            "return": [
                "collections_@_abc_@_Sequence",
                "int",
                "Tuple[str]",
                "Callable",
                "str"
            ],
            "arguments": {
                "iterable": [
                    "str",
                    "Callable[[None],bool]",
                    "Callable[None,bool]"
                ]
            }
        },
        "removeall": {
            "name": "removeall",
            "location": 22,
            "return": [
                "str",
                "List",
                "List[int]",
                "List[List[int]]",
                "int"
            ],
            "arguments": {
                "item": [
                    "int",
                    "Optional[int]",
                    "bytes",
                    "List[List[int]]"
                ],
                "seq": [
                    "str"
                ]
            }
        },
        "unique": {
            "name": "unique",
            "location": 30,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "seq": [
                    "str",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "count": {
            "name": "count",
            "location": 35,
            "return": [
                "bool",
                "List[str]",
                "Tuple",
                "List"
            ],
            "arguments": {
                "seq": [
                    "List",
                    "List[float]",
                    "float",
                    "List[dict]",
                    "Tuple[Union[int,int,int]]",
                    "List[tuple[Union[int,Any]]]",
                    "Tuple[int,int,int]",
                    "[]",
                    "List[Tuple[int,Any]]"
                ]
            }
        },
        "product": {
            "name": "product",
            "location": 40,
            "return": [
                "Text",
                "bool",
                "int",
                "Tuple[int,Dict[str,Any]]",
                "Dict[str,int]",
                "List[object]"
            ],
            "arguments": {
                "numbers": [
                    "str",
                    "Sequence[int]",
                    "int",
                    "Callable[,None]"
                ]
            }
        },
        "first": {
            "name": "first",
            "location": 48,
            "return": [
                "int",
                "str",
                "None",
                "float",
                "Iterable[d]"
            ],
            "arguments": {
                "iterable": [
                    "float",
                    "Iterable[T]",
                    "int",
                    "Tuple[int, int]"
                ],
                "default": [
                    "float",
                    "None",
                    "int",
                    "Iterable[T]",
                    "Iterable[d]",
                    "Tuple[int,int]"
                ]
            }
        },
        "is_in": {
            "name": "is_in",
            "location": 58,
            "return": [
                "bool",
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "elt": [
                    "List",
                    "Tuple",
                    "List[float]",
                    "int",
                    "AsyncIterator[T]",
                    "collections.abc.AsyncIterator"
                ],
                "seq": [
                    "List",
                    "Tuple",
                    "List[float]",
                    "int",
                    "AsyncIterator[T]"
                ]
            }
        },
        "argmin_random_tie": {
            "name": "argmin_random_tie",
            "location": 71,
            "return": [
                "str",
                "List[int]",
                "float",
                "Dict[str, Any]"
            ],
            "arguments": {
                "seq": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "key": [
                    "Callable",
                    "str",
                    "int",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "argmax_random_tie": {
            "name": "argmax_random_tie",
            "location": 76,
            "return": [
                "str",
                "List[int]",
                "float",
                "Dict[str, Any]"
            ],
            "arguments": {
                "seq": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "key": [
                    "Callable",
                    "str",
                    "int",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "shuffled": {
            "name": "shuffled",
            "location": 81,
            "return": [
                "List[str]",
                "Dict[str,Any]",
                "Dict[str,Dict[str,int]]"
            ],
            "arguments": {
                "iterable": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "Iterable[str]",
                    "Sequence[T]"
                ]
            }
        },
        "histogram": {
            "name": "histogram",
            "location": 93,
            "return": [
                "List[list]",
                "List[str]",
                "List[Dict]",
                "str",
                "List",
                "Iterable[float]"
            ],
            "arguments": {
                "values": [
                    "str",
                    "float",
                    "Type",
                    "Sequence[MutableMapping]",
                    "bool"
                ],
                "mode": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Union[str,int]",
                    "Tuple[Type[Exception]]"
                ],
                "bin_function": [
                    "str",
                    "None",
                    "float",
                    "Type",
                    "Sequence[MutableMapping]",
                    "bool"
                ]
            }
        },
        "dotproduct": {
            "name": "dotproduct",
            "location": 111,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "X": [
                    "List[float]",
                    "int"
                ],
                "Y": [
                    "List[float]",
                    "int"
                ]
            }
        },
        "element_wise_product": {
            "name": "element_wise_product",
            "location": 116,
            "return": [
                "List",
                "List[str]",
                "Set[str]",
                "Optional[bool]",
                "bool"
            ],
            "arguments": {
                "X": [],
                "Y": []
            }
        },
        "matrix_multiplication": {
            "name": "matrix_multiplication",
            "location": 122,
            "return": [
                "bool",
                "Optional[Union[str,Any]]",
                "List[str]",
                "List",
                "int",
                "List[Type]",
                "List[tuple[Union[bytes,bytes]]]",
                "Tuple[Optional[Any]]",
                "Dict[str,tuple[Union[Any,Any]]]",
                "float"
            ],
            "arguments": {
                "X_M": [
                    "int",
                    "float",
                    "T"
                ]
            }
        },
        "vector_to_diagonal": {
            "name": "vector_to_diagonal",
            "location": 150,
            "return": [
                "List[list[int]]",
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "v": [
                    "bool",
                    "list",
                    "Union[int, float]",
                    "tuple"
                ]
            }
        },
        "vector_add": {
            "name": "vector_add",
            "location": 160,
            "return": [
                "Tuple",
                "Dict",
                "str",
                "Iterable[str]",
                "IO[str]"
            ],
            "arguments": {
                "a": [
                    "Set",
                    "str"
                ],
                "b": [
                    "Set",
                    "str"
                ]
            }
        },
        "scalar_vector_product": {
            "name": "scalar_vector_product",
            "location": 166,
            "return": [
                "List",
                "int",
                "List[str]",
                "float",
                "str",
                "bool",
                "Sequence[Any]"
            ],
            "arguments": {
                "X": [
                    "int",
                    "T"
                ],
                "Y": [
                    "int",
                    "T"
                ]
            }
        },
        "scalar_matrix_product": {
            "name": "scalar_matrix_product",
            "location": 171,
            "return": [
                "List",
                "Dict",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "X": [
                    "List[float]",
                    "float",
                    "int"
                ],
                "Y": [
                    "List[float]",
                    "float",
                    "int"
                ]
            }
        },
        "inverse_matrix": {
            "name": "inverse_matrix",
            "location": 175,
            "return": [
                "List",
                "int",
                "Dict[int,str]",
                "Callable",
                "str"
            ],
            "arguments": {
                "X": [
                    "List"
                ]
            }
        },
        "probability": {
            "name": "probability",
            "location": 186,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "p": [
                    "float",
                    "int"
                ]
            }
        },
        "weighted_sample_with_replacement": {
            "name": "weighted_sample_with_replacement",
            "location": 191,
            "return": [
                "List",
                "bool",
                "str"
            ],
            "arguments": {
                "seq": [
                    "int",
                    "List",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ],
                "weights": [
                    "int",
                    "List",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ],
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "weighted_sampler": {
            "name": "weighted_sampler",
            "location": 200,
            "return": [
                "Callable",
                "int",
                "str"
            ],
            "arguments": {
                "seq": [
                    "int",
                    "float",
                    "Sequence[str]",
                    "Optional[int]",
                    "None"
                ],
                "weights": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "rounder": {
            "name": "rounder",
            "location": 209,
            "return": [
                "float",
                "str",
                "Optional[str]",
                "Callable",
                "Optional[int]"
            ],
            "arguments": {
                "numbers": [
                    "int"
                ],
                "d": [
                    "Optional[Union[int,float]]",
                    "int"
                ]
            }
        },
        "num_or_str": {
            "name": "num_or_str",
            "location": 218,
            "return": [
                "bool",
                "int",
                "str",
                "float",
                "Tuple[float,float]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "list",
                    "List[int]"
                ]
            }
        },
        "normalize": {
            "name": "normalize",
            "location": 231,
            "return": [
                "str",
                "Dict",
                "List[int]"
            ],
            "arguments": {
                "dist": [
                    "Mapping",
                    "Dict",
                    "Optional[Tuple[str,...]]",
                    "Tuple[Union[str,d]]",
                    "None"
                ]
            }
        },
        "clip": {
            "name": "clip",
            "location": 243,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "lowest": [
                    "int",
                    "float"
                ],
                "highest": [
                    "int",
                    "float"
                ]
            }
        },
        "sigmoid": {
            "name": "sigmoid",
            "location": 248,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "step": {
            "name": "step",
            "location": 253,
            "return": [
                "int",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "List",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "memoize": {
            "name": "memoize",
            "location": 271,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "slot": [
                    "int",
                    "None",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "name": {
            "name": "name",
            "location": 294,
            "return": [
                "str",
                "List"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Union[None,str,List[str],Dict[str,str]]",
                    "Type",
                    "None",
                    "List[str]",
                    "Dict[str,str]"
                ]
            }
        },
        "isnumber": {
            "name": "isnumber",
            "location": 301,
            "return": [
                "bool",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "issequence": {
            "name": "issequence",
            "location": 306,
            "return": [
                "bool",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int"
                ]
            }
        },
        "print_table": {
            "name": "print_table",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "table": [
                    "List",
                    "List[list[str]]",
                    "str",
                    "List[List[str]]"
                ],
                "header": [
                    "str",
                    "bool",
                    "None",
                    "List[str]"
                ],
                "sep": [
                    "Text",
                    "str",
                    "bytes",
                    "Dict"
                ],
                "numfmt": [
                    "Text",
                    "str",
                    "Dict",
                    "Dict[str,str]",
                    "Iterable[T]"
                ]
            }
        },
        "AIMAFile": {
            "name": "AIMAFile",
            "location": 334,
            "return": [
                "IO",
                "str",
                "bool"
            ],
            "arguments": {
                "components": [
                    "str"
                ],
                "mode": [
                    "Text",
                    "str",
                    "bool"
                ]
            }
        },
        "DataFile": {
            "name": "DataFile",
            "location": 343,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int",
                    "Optional[float]",
                    "float"
                ],
                "mode": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[float]"
                ]
            }
        },
        "Symbol": {
            "name": "Symbol",
            "location": 438,
            "return": [
                "Expr",
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "symbols": {
            "name": "symbols",
            "location": 443,
            "return": [
                "Tuple",
                "List[str]",
                "Optional[str]",
                "str",
                "Dict[str,List[Any]]",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "names": [
                    "str"
                ]
            }
        },
        "subexpressions": {
            "name": "subexpressions",
            "location": 448,
            "return": [
                "typing.Generator[int]",
                "typing.Generator[]"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        },
        "arity": {
            "name": "arity",
            "location": 456,
            "return": [
                "Tuple",
                "int"
            ],
            "arguments": {
                "expression": [
                    "List[int]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "expr": {
            "name": "expr",
            "location": 473,
            "return": [
                "float",
                "str",
                "Tuple[Union[int,int]]",
                "int",
                "bool",
                "T",
                "Tuple"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "Tuple[int,int]",
                    "bool",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "expr_handle_infix_ops": {
            "name": "expr_handle_infix_ops",
            "location": 489,
            "return": [
                "str",
                "Tuple[float,float]",
                "Set[int]"
            ],
            "arguments": {
                "x": [
                    "str",
                    "float"
                ]
            }
        },
        "Stack": {
            "name": "Stack",
            "location": 539,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "matrix_multiplication._mat_mult": {
            "name": "_mat_mult",
            "location": 125,
            "return": [
                "List[list[int]]",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "X_M": [
                    "int",
                    "Union[int, float, str]",
                    "Union[str, float]",
                    "Union[bytearray, List[int]]"
                ],
                "Y_M": [
                    "List[int]",
                    "Union[int, float]",
                    "bool",
                    "str",
                    "int",
                    "tuple"
                ]
            }
        },
        "Expr.__init__": {
            "name": "__init__",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op": [
                    "str",
                    "int",
                    "Callable[,Any]"
                ]
            }
        },
        "Expr.__neg__": {
            "name": "__neg__",
            "location": 365,
            "return": [
                "Expr",
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expr.__pos__": {
            "name": "__pos__",
            "location": 366,
            "return": [
                "Expr",
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expr.__invert__": {
            "name": "__invert__",
            "location": 367,
            "return": [
                "Expr",
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expr.__add__": {
            "name": "__add__",
            "location": 368,
            "return": [
                "Expr",
                "bool",
                "float",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "Expr.__sub__": {
            "name": "__sub__",
            "location": 369,
            "return": [
                "Expr",
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Expr.__mul__": {
            "name": "__mul__",
            "location": 370,
            "return": [
                "Expr",
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Expr.__pow__": {
            "name": "__pow__",
            "location": 371,
            "return": [
                "Expr",
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Expr.__mod__": {
            "name": "__mod__",
            "location": 372,
            "return": [
                "Expr",
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Expr.__and__": {
            "name": "__and__",
            "location": 373,
            "return": [
                "Expr",
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Expr.__xor__": {
            "name": "__xor__",
            "location": 374,
            "return": [
                "Expr",
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Expr.__rshift__": {
            "name": "__rshift__",
            "location": 375,
            "return": [
                "Expr",
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Expr.__lshift__": {
            "name": "__lshift__",
            "location": 376,
            "return": [
                "Expr",
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Expr.__truediv__": {
            "name": "__truediv__",
            "location": 377,
            "return": [
                "Expr",
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Expr.__floordiv__": {
            "name": "__floordiv__",
            "location": 378,
            "return": [
                "Expr",
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Expr.__matmul__": {
            "name": "__matmul__",
            "location": 379,
            "return": [
                "Expr",
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Expr.__or__": {
            "name": "__or__",
            "location": 381,
            "return": [
                "Sequence[cirq.Qid]",
                "Expr",
                "Sequence[int]",
                "PartialExpr"
            ],
            "arguments": {
                "self": [],
                "rhs": []
            }
        },
        "Expr.__radd__": {
            "name": "__radd__",
            "location": 389,
            "return": [
                "Expr",
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Expr.__rsub__": {
            "name": "__rsub__",
            "location": 390,
            "return": [
                "Expr",
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Expr.__rmul__": {
            "name": "__rmul__",
            "location": 391,
            "return": [
                "Expr",
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Expr.__rdiv__": {
            "name": "__rdiv__",
            "location": 392,
            "return": [
                "Expr",
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Expr.__rpow__": {
            "name": "__rpow__",
            "location": 393,
            "return": [
                "Expr",
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Expr.__rmod__": {
            "name": "__rmod__",
            "location": 394,
            "return": [
                "Expr",
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Expr.__rand__": {
            "name": "__rand__",
            "location": 395,
            "return": [
                "Expr",
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Expr.__rxor__": {
            "name": "__rxor__",
            "location": 396,
            "return": [
                "Expr",
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Expr.__ror__": {
            "name": "__ror__",
            "location": 397,
            "return": [
                "Expr",
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Expr.__rrshift__": {
            "name": "__rrshift__",
            "location": 398,
            "return": [
                "Expr",
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Expr.__rlshift__": {
            "name": "__rlshift__",
            "location": 399,
            "return": [
                "Expr",
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Expr.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 400,
            "return": [
                "Expr",
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Expr.__rfloordiv__": {
            "name": "__rfloordiv__",
            "location": 401,
            "return": [
                "Expr",
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Expr.__rmatmul__": {
            "name": "__rmatmul__",
            "location": 402,
            "return": [
                "Expr",
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Expr.__call__": {
            "name": "__call__",
            "location": 404,
            "return": [
                "Callable",
                "Expr"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expr.__eq__": {
            "name": "__eq__",
            "location": 412,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Callable",
                    "Dict[str,Any]",
                    "Callable[[Any],T]",
                    "Callable[,str]"
                ]
            }
        },
        "Expr.__hash__": {
            "name": "__hash__",
            "location": 418,
            "return": [
                "int",
                "bool",
                "slice",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expr.__repr__": {
            "name": "__repr__",
            "location": 420,
            "return": [
                "str",
                "Tuple[Tuple[int,...]]",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartialExpr.__init__": {
            "name": "__init__",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op": [
                    "List[str]",
                    "Callable",
                    "bool",
                    "Optional[Callable]",
                    "None"
                ],
                "lhs": [
                    "List[str]",
                    "Callable",
                    "bool",
                    "Optional[Callable]",
                    "None"
                ]
            }
        },
        "PartialExpr.__or__": {
            "name": "__or__",
            "location": 469,
            "return": [
                "Dict[str,Any]",
                "Expr"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "PartialExpr.__repr__": {
            "name": "__repr__",
            "location": 470,
            "return": [
                "str",
                "Tuple[Tuple[int,...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "defaultkeydict.__missing__": {
            "name": "__missing__",
            "location": 504,
            "return": [
                "bool",
                "Optional[Union[str,Any]]",
                "str",
                "Dict[str,str]",
                "List[str]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Type",
                    "int",
                    "Sequence[str]",
                    "List[str]"
                ]
            }
        },
        "Queue.__init__": {
            "name": "__init__",
            "location": 531,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.extend": {
            "name": "extend",
            "location": 534,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "Dict[str,Any]",
                    "List[str]",
                    "int",
                    "T",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "FIFOQueue.__init__": {
            "name": "__init__",
            "location": 548,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FIFOQueue.append": {
            "name": "append",
            "location": 552,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List",
                    "float",
                    "deque",
                    "int",
                    "Deque"
                ]
            }
        },
        "FIFOQueue.__len__": {
            "name": "__len__",
            "location": 555,
            "return": [
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FIFOQueue.extend": {
            "name": "extend",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "List",
                    "int"
                ]
            }
        },
        "FIFOQueue.pop": {
            "name": "pop",
            "location": 561,
            "return": [
                "str",
                "dict",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FIFOQueue.__contains__": {
            "name": "__contains__",
            "location": 569,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "T"
                ]
            }
        },
        "PriorityQueue.__init__": {
            "name": "__init__",
            "location": 580,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "int",
                    "Union[int, float]",
                    "Optional[List[str]]"
                ],
                "f": [
                    "bool",
                    "Callable"
                ]
            }
        },
        "PriorityQueue.append": {
            "name": "append",
            "location": 585,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List",
                    "T",
                    "int",
                    "str",
                    "Tuple",
                    "Union[tuple,list]"
                ]
            }
        },
        "PriorityQueue.__len__": {
            "name": "__len__",
            "location": 588,
            "return": [
                "int",
                "str",
                "float",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.pop": {
            "name": "pop",
            "location": 591,
            "return": [
                "str",
                "list",
                "List[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.__contains__": {
            "name": "__contains__",
            "location": 597,
            "return": [
                "bool",
                "Tuple[int]",
                "int",
                "List[str]",
                "str",
                "Iterable[str]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Iterable[Any]",
                    "int",
                    "T",
                    "List"
                ]
            }
        },
        "PriorityQueue.__getitem__": {
            "name": "__getitem__",
            "location": 600,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "Tuple",
                    "Dict[str,str]",
                    "None",
                    "int",
                    "Callable[[KT],VT]",
                    "Callable[KT,VT]",
                    "Type[RuntimeError]",
                    "Type"
                ]
            }
        },
        "PriorityQueue.__delitem__": {
            "name": "__delitem__",
            "location": 605,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "Tuple",
                    "Dict[str,str]",
                    "None",
                    "int",
                    "Callable[[KT],VT]",
                    "Callable[KT,VT]",
                    "Type[RuntimeError]",
                    "Type"
                ]
            }
        },
        "isclose": {
            "name": "isclose",
            "location": 260,
            "return": [
                "bool",
                "int",
                "bytes",
                "bytearray",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str"
                ],
                "b": [
                    "int",
                    "str"
                ],
                "rel_tol": [
                    "float",
                    "int",
                    "str"
                ],
                "abs_tol": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "memoize.memoized_fn": {
            "name": "memoized_fn",
            "location": 284,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "nd889-master/1_foundations/6_planning/aimacode/__init__.py": {},
    "nd889-master/1_foundations/6_planning/tests/test_my_air_cargo_problems.py": {
        "TestAirCargoProb1.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAirCargoProb1.test_ACP1_num_fluents": {
            "name": "test_ACP1_num_fluents",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAirCargoProb1.test_ACP1_num_requirements": {
            "name": "test_ACP1_num_requirements",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAirCargoProb2.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAirCargoProb2.test_ACP2_num_fluents": {
            "name": "test_ACP2_num_fluents",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAirCargoProb2.test_ACP2_num_requirements": {
            "name": "test_ACP2_num_requirements",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAirCargoProb3.setUp": {
            "name": "setUp",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAirCargoProb3.test_ACP3_num_fluents": {
            "name": "test_ACP3_num_fluents",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAirCargoProb3.test_ACP3_num_requirements": {
            "name": "test_ACP3_num_requirements",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAirCargoMethods.setUp": {
            "name": "setUp",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAirCargoMethods.test_AC_get_actions": {
            "name": "test_AC_get_actions",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAirCargoMethods.test_AC_actions": {
            "name": "test_AC_actions",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAirCargoMethods.test_AC_result": {
            "name": "test_AC_result",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAirCargoMethods.test_h_ignore_preconditions": {
            "name": "test_h_ignore_preconditions",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nd889-master/1_foundations/6_planning/tests/test_my_planning_graph.py": {
        "TestPlanningGraphLevels.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanningGraphLevels.test_add_action_level": {
            "name": "test_add_action_level",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanningGraphLevels.test_add_literal_level": {
            "name": "test_add_literal_level",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanningGraphMutex.setUp": {
            "name": "setUp",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanningGraphMutex.test_serialize_mutex": {
            "name": "test_serialize_mutex",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanningGraphMutex.test_inconsistent_effects_mutex": {
            "name": "test_inconsistent_effects_mutex",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanningGraphMutex.test_interference_mutex": {
            "name": "test_interference_mutex",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanningGraphMutex.test_competing_needs_mutex": {
            "name": "test_competing_needs_mutex",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanningGraphMutex.test_negation_mutex": {
            "name": "test_negation_mutex",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanningGraphMutex.test_inconsistent_support_mutex": {
            "name": "test_inconsistent_support_mutex",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanningGraphHeuristics.setUp": {
            "name": "setUp",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanningGraphHeuristics.test_levelsum": {
            "name": "test_levelsum",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nd889-master/1_foundations/7_recognizer/asl_data.py": {
        "combine_sequences": {
            "name": "combine_sequences",
            "location": 270,
            "return": [
                "Tuple[list[int]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sequences": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "create_hmmlearn_data": {
            "name": "create_hmmlearn_data",
            "location": 285,
            "return": [
                "Dict[,tuple]",
                "Dict[str,Any]",
                "Dict[str,bool]",
                "int",
                "str"
            ],
            "arguments": {
                "dict": [
                    "str",
                    "Mapping[str,List[Any]]",
                    "Mapping"
                ]
            }
        },
        "AslDb.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hands_fn": [
                    "str"
                ],
                "speakers_fn": [
                    "str"
                ]
            }
        },
        "AslDb.build_training": {
            "name": "build_training",
            "location": 49,
            "return": [
                "WordsData",
                "bool",
                "str",
                "Dict[str,Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "feature_list": [
                    "Optional[Exception]",
                    "Exception",
                    "List[str]",
                    "Dict[str,str]",
                    "str",
                    "None",
                    "int"
                ],
                "csvfilename": [
                    "Optional[Exception]",
                    "Exception",
                    "List[str]",
                    "Dict[str,str]",
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "AslDb.build_test": {
            "name": "build_test",
            "location": 60,
            "return": [
                "SinglesData",
                "bool",
                "int",
                "Dict[str,Any]",
                "IO[bytes]"
            ],
            "arguments": {
                "self": [],
                "feature_method": [
                    "Callable[[T],List[T]]",
                    "int",
                    "Callable[T,list[T]]",
                    "bytes",
                    "Dict",
                    "str",
                    "Optional[Exception]",
                    "Exception",
                    "None"
                ],
                "csvfile": [
                    "Callable[[T],List[T]]",
                    "int",
                    "Callable[T,list[T]]",
                    "bytes",
                    "Dict",
                    "str",
                    "Optional[Exception]",
                    "Exception",
                    "None"
                ]
            }
        },
        "WordsData.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "asl": [
                    "int",
                    "Dict",
                    "str",
                    "bool"
                ],
                "csvfile": [
                    "int",
                    "Dict",
                    "str",
                    "bool"
                ],
                "feature_list": [
                    "int",
                    "Dict",
                    "str",
                    "bool"
                ]
            }
        },
        "WordsData._load_data": {
            "name": "_load_data",
            "location": 91,
            "return": [
                "Dict",
                "Dict[str,Any]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "asl": [
                    "int",
                    "List[int]",
                    "None",
                    "float",
                    "bool",
                    "Optional[numpy.ndarray]"
                ],
                "fn": [
                    "int",
                    "str"
                ],
                "feature_list": [
                    "List[int]",
                    "int",
                    "bool",
                    "Optional[numpy.ndarray]",
                    "float"
                ]
            }
        },
        "WordsData.get_all_sequences": {
            "name": "get_all_sequences",
            "location": 117,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Callable",
                "Callable[[str], T]",
                "str",
                "pandas.DataFrame",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordsData.get_all_Xlengths": {
            "name": "get_all_Xlengths",
            "location": 127,
            "return": [
                "bytes",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordsData.get_word_sequences": {
            "name": "get_word_sequences",
            "location": 138,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "WordsData.get_word_Xlengths": {
            "name": "get_word_Xlengths",
            "location": 148,
            "return": [
                "int",
                "bytes",
                "Dict[str, Any]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "Callable[[T],List[T]]",
                    "str",
                    "Callable[T,list[T]]",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "SinglesData.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "asl": [
                    "int",
                    "Dict",
                    "str",
                    "bool"
                ],
                "csvfile": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "None"
                ],
                "feature_list": [
                    "int",
                    "Dict",
                    "str",
                    "bool"
                ]
            }
        },
        "SinglesData._load_data": {
            "name": "_load_data",
            "location": 183,
            "return": [
                "Dict",
                "Dict[str,Any]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "asl": [
                    "int",
                    "str",
                    "List[tuple[Union[int,int]]]",
                    "bool",
                    "List[Tuple[int,int]]"
                ],
                "feature_list": [
                    "List[tuple[Union[int,int]]]",
                    "str",
                    "int",
                    "bool",
                    "List[Tuple[int,int]]"
                ]
            }
        },
        "SinglesData._load_sentence_word_indices": {
            "name": "_load_sentence_word_indices",
            "location": 209,
            "return": [
                "Dict",
                "int",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SinglesData.get_all_sequences": {
            "name": "get_all_sequences",
            "location": 227,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Callable",
                "Callable[[str], T]",
                "str",
                "pandas.DataFrame",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SinglesData.get_all_Xlengths": {
            "name": "get_all_Xlengths",
            "location": 237,
            "return": [
                "bytes",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SinglesData.get_item_sequences": {
            "name": "get_item_sequences",
            "location": 248,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[str,Any]",
                    "Dict",
                    "Collection[str]",
                    "Collection",
                    "str",
                    "Type",
                    "MutableMapping",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "SinglesData.get_item_Xlengths": {
            "name": "get_item_Xlengths",
            "location": 258,
            "return": [
                "bytes",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Dict[str,Any]",
                    "Collection[str]",
                    "Collection"
                ]
            }
        }
    },
    "nd889-master/1_foundations/7_recognizer/asl_test_model_selectors.py": {
        "TestSelectors.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelectors.test_select_constant_interface": {
            "name": "test_select_constant_interface",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelectors.test_select_bic_interface": {
            "name": "test_select_bic_interface",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelectors.test_select_cv_interface": {
            "name": "test_select_cv_interface",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelectors.test_select_dic_interface": {
            "name": "test_select_dic_interface",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nd889-master/1_foundations/7_recognizer/asl_test_recognizer.py": {
        "TestRecognize.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRecognize.test_recognize_probabilities_interface": {
            "name": "test_recognize_probabilities_interface",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRecognize.test_recognize_guesses_interface": {
            "name": "test_recognize_guesses_interface",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nd889-master/1_foundations/7_recognizer/asl_utils.py": {
        "show_errors": {
            "name": "show_errors",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "guesses": [
                    "int",
                    "Dict[str, str]"
                ],
                "test_set": [
                    "int",
                    "List",
                    "Dict[str,Any]",
                    "Dict",
                    "List[dict[str,Any]]",
                    "List[str]",
                    "List[Dict[str,Any]]",
                    "bool"
                ],
                "short": [
                    "bool",
                    "Dict[str,Any]",
                    "str",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "getKey": {
            "name": "getKey",
            "location": 42,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "Union[List,Dict]"
            ],
            "arguments": {
                "item": [
                    "List[str]",
                    "str",
                    "bytes",
                    "bool",
                    "Union[str,List[str]]",
                    "Dict"
                ]
            }
        },
        "train_all_words": {
            "name": "train_all_words",
            "location": 46,
            "return": [
                "Dict",
                "Dict[str,Any]",
                "bool",
                "Callable",
                "str"
            ],
            "arguments": {
                "training": [
                    "str",
                    "Optional[int]"
                ],
                "model_selector": [
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "combine_sequences": {
            "name": "combine_sequences",
            "location": 63,
            "return": [
                "str",
                "Tuple[Union[list[Text],list[int]]]"
            ],
            "arguments": {
                "split_index_list": [
                    "Set[int]",
                    "bool",
                    "str"
                ],
                "sequences": [
                    "str",
                    "bool",
                    "Set[int]"
                ]
            }
        },
        "putHTML": {
            "name": "putHTML",
            "location": 79,
            "return": [
                "HTML",
                "str",
                "List[str]"
            ],
            "arguments": {
                "color": [
                    "str"
                ],
                "msg": [
                    "str"
                ]
            }
        },
        "feedback": {
            "name": "feedback",
            "location": 84,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "passed": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "failmsg": [
                    "Text",
                    "int",
                    "Callable",
                    "str"
                ],
                "passmsg": [
                    "Text",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_features_tryit": {
            "name": "test_features_tryit",
            "location": 91,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "asl": [
                    "str",
                    "float"
                ]
            }
        },
        "test_std_tryit": {
            "name": "test_std_tryit",
            "location": 100,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "df_std": [
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "nd889-master/1_foundations/7_recognizer/my_model_selectors.py": {
        "ModelSelector.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "all_word_sequences": [],
                "all_word_Xlengths": [],
                "this_word": [],
                "n_constant": [
                    "int"
                ],
                "min_n_components": [
                    "int"
                ],
                "max_n_components": [
                    "int"
                ],
                "random_state": [
                    "int"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "ModelSelector.select": {
            "name": "select",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelSelector.base_model": {
            "name": "base_model",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_states": []
            }
        },
        "SelectorConstant.select": {
            "name": "select",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SelectorBIC.select": {
            "name": "select",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectorDIC.select": {
            "name": "select",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectorCV.run_model": {
            "name": "run_model",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "n_components": [],
                "X_train": [],
                "lengths_train": [],
                "X_test": [],
                "lengths_test": []
            }
        },
        "SelectorCV.select": {
            "name": "select",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nd889-master/1_foundations/7_recognizer/my_recognizer.py": {
        "recognize": {
            "name": "recognize",
            "location": 12,
            "return": [
                "Tuple[Union[list[dict[Union[tuple[Union[str,Any]],tuple[Union[str,dict[str,str]]]],]],list[Union[tuple[Union[str,Any]],tuple[Union[str,dict[str,str]]]]]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "models": [
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[str,dict[str,str]]",
                    "str",
                    "Dict[str,Dict[str,str]]"
                ],
                "test_set": [
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "nd889-master/2_deep_learning/1_dog_breed_classifier/extract_bottleneck_features.py": {
        "extract_VGG16": {
            "name": "extract_VGG16",
            "location": 1,
            "return": [
                "Tuple[Any, Any, Any]",
                "str",
                "bool"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "None",
                    "bool",
                    "Optional[int]",
                    "Optional[bool]"
                ]
            }
        },
        "extract_VGG19": {
            "name": "extract_VGG19",
            "location": 5,
            "return": [
                "Tuple[Any, Any, Any]",
                "str",
                "bool"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "None",
                    "bool",
                    "Optional[int]",
                    "Optional[bool]"
                ]
            }
        },
        "extract_Resnet50": {
            "name": "extract_Resnet50",
            "location": 9,
            "return": [
                "bool",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "None",
                    "bool",
                    "Optional[int]",
                    "Optional[bool]"
                ]
            }
        },
        "extract_Xception": {
            "name": "extract_Xception",
            "location": 13,
            "return": [
                "Tuple[Any, Any, Any]",
                "str",
                "bool"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "None",
                    "bool",
                    "Optional[int]",
                    "Optional[bool]"
                ]
            }
        },
        "extract_InceptionV3": {
            "name": "extract_InceptionV3",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "Optional[int]",
                    "None",
                    "bool"
                ]
            }
        }
    },
    "nd889-master/2_deep_learning/2_rnn_stock_sherlock/my_answers.py": {
        "window_transform_series": {
            "name": "window_transform_series",
            "location": 13,
            "return": [
                "Tuple",
                "int",
                "float",
                "Union[str,int,float]"
            ],
            "arguments": {
                "series": [
                    "int",
                    "float",
                    "list",
                    "str",
                    "List[Dict[str, Any]]",
                    "List[int]"
                ],
                "window_size": [
                    "int",
                    "float",
                    "List",
                    "str",
                    "List[Dict[str,Any]]",
                    "List[int]"
                ]
            }
        },
        "build_part1_RNN": {
            "name": "build_part1_RNN",
            "location": 31,
            "return": [
                "Pattern"
            ],
            "arguments": {
                "window_size": [
                    "int",
                    "Mapping[Any,Any]",
                    "Mapping",
                    "Optional[object]",
                    "None",
                    "Optional[Tuple[int,int]]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "cleaned_text": {
            "name": "cleaned_text",
            "location": 41,
            "return": [
                "str",
                "Callable[...,T]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Iterable[Tuple[int,int]]",
                    "Optional[str]"
                ]
            }
        },
        "window_transform_text": {
            "name": "window_transform_text",
            "location": 54,
            "return": [
                "Tuple[list]",
                "str",
                "Dict[str,Any]",
                "bytes",
                "keras.callbacks.History",
                "bool"
            ],
            "arguments": {
                "text": [
                    "int"
                ],
                "window_size": [
                    "int"
                ],
                "step_size": [
                    "int"
                ]
            }
        },
        "build_part2_RNN": {
            "name": "build_part2_RNN",
            "location": 69,
            "return": [
                "Pattern"
            ],
            "arguments": {
                "window_size": [
                    "int",
                    "float",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "num_chars": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "nd889-master/2_deep_learning/3_cv_mimic_me/serve.py": {},
    "nd889-master/2_deep_learning/4_facial_keypoints/utils.py": {
        "load_data": {
            "name": "load_data",
            "location": 11,
            "return": [
                "Tuple[None]",
                "float",
                "List[int]",
                "bool",
                "T"
            ],
            "arguments": {
                "test": [
                    "bool",
                    "str"
                ]
            }
        },
        "plot_data": {
            "name": "plot_data",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "img": [
                    "str",
                    "int",
                    "Generator",
                    "pandas.DataFrame",
                    "bool"
                ],
                "landmarks": [
                    "List[cirq.Qid]",
                    "float",
                    "str",
                    "Iterable[str]"
                ],
                "axis": [
                    "List[cirq.Qid]",
                    "oanda.models.Price"
                ]
            }
        },
        "plot_keypoints": {
            "name": "plot_keypoints",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "img_path": [
                    "bool",
                    "str",
                    "Dict[str,Any]"
                ],
                "face_cascade": [
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "int",
                    "List[Tuple[str, str]]",
                    "List[str]"
                ],
                "model_path": [
                    "Text",
                    "Optional[str]",
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        }
    }
}
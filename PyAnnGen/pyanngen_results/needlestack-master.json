{
    "needlestack-master/setup.py": {},
    "needlestack-master/docs/conf.py": {},
    "needlestack-master/examples/add_collections.py": {
        "main": {
            "name": "main",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "needlestack-master/examples/configs.py": {},
    "needlestack-master/examples/indexing_job.py": {
        "generate_shard_data": {
            "name": "generate_shard_data",
            "location": 17,
            "return": [
                "Tuple[(np.ndarray, list)]"
            ],
            "arguments": {
                "id_prefix": [
                    "str"
                ],
                "dimension": [
                    "int"
                ],
                "count": [
                    "int"
                ],
                "seed": [
                    "int"
                ]
            }
        },
        "create_index": {
            "name": "create_index",
            "location": 38,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "X": [
                    "np.ndarray"
                ]
            }
        },
        "create_shard_proto": {
            "name": "create_shard_proto",
            "location": 45,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "collection_name": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "create_collection_proto": {
            "name": "create_collection_proto",
            "location": 61,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "shards": [
                    "list"
                ],
                "replication_factor": [
                    "int"
                ]
            }
        },
        "get_shard_filename": {
            "name": "get_shard_filename",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "collection": [
                    "str"
                ],
                "shard": [
                    "str"
                ]
            }
        },
        "get_collection_filename": {
            "name": "get_collection_filename",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "collection": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "needlestack-master/examples/run_merger.py": {
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "needlestack-master/examples/run_searcher.py": {
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "needlestack-master/needlestack/exceptions.py": {},
    "needlestack-master/needlestack/__init__.py": {},
    "needlestack-master/needlestack/apis/indexing.py": {
        "create_faiss_index_shard": {
            "name": "create_faiss_index_shard",
            "location": 14,
            "return": [
                "needlestack.indices.index.BaseIndex"
            ],
            "arguments": {
                "faiss_index": [
                    "bool",
                    "float"
                ],
                "metadatas": [
                    "list"
                ]
            }
        }
    },
    "needlestack-master/needlestack/apis/serializers.py": {
        "ndarray_to_proto": {
            "name": "ndarray_to_proto",
            "location": 24,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "X": [
                    "list[]",
                    "int",
                    "list",
                    "Union[pandas.DataFrame, numpy.ndarray]"
                ],
                "dtype": [
                    "Optional[str]"
                ],
                "shape": [
                    "Optional[tuple]"
                ]
            }
        },
        "proto_to_ndarray": {
            "name": "proto_to_ndarray",
            "location": 62,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "proto": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "metadata_list_to_proto": {
            "name": "metadata_list_to_proto",
            "location": 91,
            "return": [
                "list"
            ],
            "arguments": {
                "ids": [
                    "List[str]"
                ],
                "fields_list": [
                    "List[tuple]"
                ],
                "fieldtypes": [
                    "Optional[Tuple[str]]"
                ],
                "fieldnames": [
                    "Optional[Tuple[str]]"
                ]
            }
        },
        "metadata_to_proto": {
            "name": "metadata_to_proto",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "id": [
                    "str"
                ],
                "fields": [
                    "tuple"
                ],
                "fieldtypes": [
                    "Optional[Tuple[str]]"
                ],
                "fieldnames": [
                    "Optional[Tuple[str]]"
                ]
            }
        },
        "metadata_field_to_proto": {
            "name": "metadata_field_to_proto",
            "location": 139,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "field": [
                    "Union[(float, str)]"
                ],
                "fieldtype": [
                    "Optional[str]"
                ],
                "fieldname": [
                    "Optional[str]"
                ]
            }
        }
    },
    "needlestack-master/needlestack/apis/__init__.py": {},
    "needlestack-master/needlestack/balancers/greedy.py": {
        "GreedyAlgorithm.add": {
            "name": "add",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "list[]",
                    "list",
                    "dict[, ]",
                    "Union[Dict, List]",
                    "T",
                    "dict"
                ],
                "knapsacks": [
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[str, str]",
                    "Optional[Tuple[int, Any]]",
                    "Set[str]"
                ]
            }
        }
    },
    "needlestack-master/needlestack/balancers/knapsack.py": {
        "calculate_add": {
            "name": "calculate_add",
            "location": 96,
            "return": [
                "list"
            ],
            "arguments": {
                "nodes": [
                    "list"
                ],
                "current_collections": [
                    "list"
                ],
                "add_collections": [
                    "list"
                ],
                "algorithm": [
                    "Algorithm"
                ]
            }
        },
        "calculate_rebalance": {
            "name": "calculate_rebalance",
            "location": 126,
            "return": [
                "list"
            ],
            "arguments": {
                "nodes": [
                    "list"
                ],
                "current_collections": [
                    "list"
                ],
                "algorithm": [
                    "Algorithm"
                ]
            }
        },
        "_collections_to_knapsacks": {
            "name": "_collections_to_knapsacks",
            "location": 136,
            "return": [
                "List[Knapsack]"
            ],
            "arguments": {
                "nodes": [
                    "list"
                ],
                "collections": [
                    "list"
                ]
            }
        },
        "_knapsacks_to_collections": {
            "name": "_knapsacks_to_collections",
            "location": 153,
            "return": [
                "list"
            ],
            "arguments": {
                "knapsacks": [
                    "List[Knapsack]"
                ]
            }
        },
        "Item.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "int",
                    "float",
                    "bool"
                ],
                "shard": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Item.id": {
            "name": "id",
            "location": 32,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.quantity": {
            "name": "quantity",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.weight": {
            "name": "weight",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.__hash__": {
            "name": "__hash__",
            "location": 43,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Knapsack.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "Callable[..., T]",
                    "typing.Callable[..., T]"
                ],
                "capacity": [
                    "Optional[float]"
                ]
            }
        },
        "Knapsack.id": {
            "name": "id",
            "location": 70,
            "return": [
                "Tuple[str]",
                "Sequence[str]",
                "logging.LogRecord"
            ],
            "arguments": {
                "self": []
            }
        },
        "Knapsack.add_item": {
            "name": "add_item",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Item"
                ]
            }
        },
        "Knapsack.__hash__": {
            "name": "__hash__",
            "location": 82,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Algorithm.add": {
            "name": "add",
            "location": 89,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "List[Item]"
                ],
                "knapsacks": [
                    "List[Knapsack]"
                ]
            }
        },
        "Algorithm.rebalance": {
            "name": "rebalance",
            "location": 92,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "knapsacks": [
                    "List[Knapsack]"
                ]
            }
        }
    },
    "needlestack-master/needlestack/balancers/__init__.py": {},
    "needlestack-master/needlestack/cluster_managers/manager.py": {
        "ClusterManager.startup": {
            "name": "startup",
            "location": 9,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterManager.shutdown": {
            "name": "shutdown",
            "location": 12,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterManager.cleanup": {
            "name": "cleanup",
            "location": 15,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterManager.register_merger": {
            "name": "register_merger",
            "location": 18,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterManager.register_searcher": {
            "name": "register_searcher",
            "location": 21,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterManager.set_state": {
            "name": "set_state",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "list",
                    "list[]"
                ],
                "collection_name": [
                    "Optional[str]"
                ],
                "shard_name": [
                    "Optional[str]"
                ],
                "hostport": [
                    "Optional[str]"
                ]
            }
        },
        "ClusterManager.set_local_state": {
            "name": "set_local_state",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "collection_name": [
                    "Optional[str]"
                ],
                "shard_name": [
                    "Optional[str]"
                ]
            }
        },
        "ClusterManager.add_collections": {
            "name": "add_collections",
            "location": 43,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "collections": [
                    "list"
                ]
            }
        },
        "ClusterManager.delete_collections": {
            "name": "delete_collections",
            "location": 48,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "collection_names": [
                    "List[str]"
                ]
            }
        },
        "ClusterManager.list_nodes": {
            "name": "list_nodes",
            "location": 51,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterManager.list_collections": {
            "name": "list_collections",
            "location": 54,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "collection_names": [
                    "Optional[List[str]]"
                ],
                "include_state": [
                    "bool"
                ]
            }
        },
        "ClusterManager.list_local_collections": {
            "name": "list_local_collections",
            "location": 61,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "include_state": [
                    "bool"
                ]
            }
        },
        "ClusterManager.get_searchers": {
            "name": "get_searchers",
            "location": 66,
            "return": [
                "List[Tuple[(str, List[str])]]"
            ],
            "arguments": {
                "self": [],
                "collection_name": [
                    "str"
                ],
                "shard_names": [
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "needlestack-master/needlestack/cluster_managers/zookeeper.py": {
        "ZookeeperClusterManager.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster_name": [
                    "str"
                ],
                "hostport": [
                    "str"
                ],
                "hosts": [
                    "List[str]"
                ],
                "zookeeper_root": [
                    "str"
                ]
            }
        },
        "ZookeeperClusterManager.base_znode": {
            "name": "base_znode",
            "location": 64,
            "return": [
                "str",
                "dict",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZookeeperClusterManager.live_nodes_znode": {
            "name": "live_nodes_znode",
            "location": 68,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZookeeperClusterManager.this_node_znode": {
            "name": "this_node_znode",
            "location": 72,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZookeeperClusterManager.collections_znode": {
            "name": "collections_znode",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZookeeperClusterManager.collection_znode": {
            "name": "collection_znode",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "collection_name": [
                    "str"
                ]
            }
        },
        "ZookeeperClusterManager.shard_znode": {
            "name": "shard_znode",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "collection_name": [
                    "str"
                ],
                "shard_name": [
                    "str"
                ]
            }
        },
        "ZookeeperClusterManager.replica_znode": {
            "name": "replica_znode",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "collection_name": [
                    "str"
                ],
                "shard_name": [
                    "str"
                ],
                "hostport": [
                    "str"
                ]
            }
        },
        "ZookeeperClusterManager.startup": {
            "name": "startup",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZookeeperClusterManager.shutdown": {
            "name": "shutdown",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZookeeperClusterManager.cleanup": {
            "name": "cleanup",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZookeeperClusterManager.register_merger": {
            "name": "register_merger",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZookeeperClusterManager.register_searcher": {
            "name": "register_searcher",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZookeeperClusterManager.set_state": {
            "name": "set_state",
            "location": 141,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "Callable",
                    "logging.Logger"
                ],
                "collection_name": [
                    "str",
                    "Optional[str]"
                ],
                "shard_name": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "list"
                ],
                "hostport": [
                    "str",
                    "int",
                    "Optional[float]",
                    "Optional[str]",
                    "Iterable[str]"
                ]
            }
        },
        "ZookeeperClusterManager.set_local_state": {
            "name": "set_local_state",
            "location": 161,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ],
                "collection_name": [
                    "str"
                ],
                "shard_name": [
                    "str"
                ]
            }
        },
        "ZookeeperClusterManager.signal_listener": {
            "name": "signal_listener",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signum": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ZookeeperClusterManager.zk_listener": {
            "name": "zk_listener",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "list"
                ]
            }
        },
        "ZookeeperClusterManager.add_collections": {
            "name": "add_collections",
            "location": 175,
            "return": [
                "Union[(List[nothing], _T0)]"
            ],
            "arguments": {
                "self": [],
                "collections": [
                    "_T0"
                ]
            }
        },
        "ZookeeperClusterManager.delete_collections": {
            "name": "delete_collections",
            "location": 205,
            "return": [
                "Union[(List[nothing], _T0)]"
            ],
            "arguments": {
                "self": [],
                "collection_names": [
                    "_T0"
                ]
            }
        },
        "ZookeeperClusterManager.list_nodes": {
            "name": "list_nodes",
            "location": 227,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZookeeperClusterManager.list_collections": {
            "name": "list_collections",
            "location": 232,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "collection_names": [
                    "str",
                    "type"
                ],
                "include_state": [
                    "str",
                    "type"
                ]
            }
        },
        "ZookeeperClusterManager.list_local_collections": {
            "name": "list_local_collections",
            "location": 235,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "include_state": [
                    "str",
                    "Sequence",
                    "dict"
                ]
            }
        },
        "ZookeeperClusterManager._list_collections": {
            "name": "_list_collections",
            "location": 240,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "collection_names": [
                    "Optional[List[str]]"
                ],
                "hostport": [
                    "Optional[str]"
                ],
                "load_replica": [
                    "bool"
                ]
            }
        },
        "ZookeeperClusterManager.get_searchers": {
            "name": "get_searchers",
            "location": 291,
            "return": [
                "List[Tuple[(Any, List[str])]]"
            ],
            "arguments": {
                "self": [],
                "collection_name": [
                    "str",
                    "Iterable[str]"
                ],
                "shard_names": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "ZookeeperClusterManager._get_searchers_for_shard": {
            "name": "_get_searchers_for_shard",
            "location": 310,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "collection_name": [
                    "str"
                ],
                "shard_name": [
                    "str"
                ],
                "active": [
                    "bool"
                ]
            }
        },
        "ZookeeperClusterManager.commit_transaction": {
            "name": "commit_transaction",
            "location": 331,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "transaction": [
                    "int",
                    "List[int]",
                    "Tuple[int, int]",
                    "bool"
                ]
            }
        }
    },
    "needlestack-master/needlestack/cluster_managers/__init__.py": {},
    "needlestack-master/needlestack/collections/collection.py": {
        "Collection.from_proto": {
            "name": "from_proto",
            "location": 31,
            "return": [
                "Collection"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCollection]"
                ],
                "proto": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Collection.populate_from_proto": {
            "name": "populate_from_proto",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proto": [
                    "str",
                    "int"
                ]
            }
        },
        "Collection.merge_proto": {
            "name": "merge_proto",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proto": []
            }
        },
        "Collection.load": {
            "name": "load",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.update_available": {
            "name": "update_available",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.validate": {
            "name": "validate",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.add_shard": {
            "name": "add_shard",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "shard": [
                    "needlestack.collections.shard.Shard"
                ]
            }
        },
        "Collection.drop_shard": {
            "name": "drop_shard",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Collection.query": {
            "name": "query",
            "location": 77,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "np.ndarray"
                ],
                "k": [
                    "int"
                ],
                "shard_names": [
                    "List[str]"
                ]
            }
        },
        "Collection.retrieve": {
            "name": "retrieve",
            "location": 87,
            "return": [
                "Optional[str]",
                "list[]",
                "str",
                "dict[, ]",
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "shard_names": [
                    "List[str]"
                ]
            }
        }
    },
    "needlestack-master/needlestack/collections/shard.py": {
        "Shard.from_proto": {
            "name": "from_proto",
            "location": 27,
            "return": [
                "Shard"
            ],
            "arguments": {
                "cls": [
                    "Type[_TShard]"
                ],
                "proto": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Shard.populate_from_proto": {
            "name": "populate_from_proto",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proto": [
                    "List[str]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "Shard.load": {
            "name": "load",
            "location": 37,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shard.update_available": {
            "name": "update_available",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shard.set_vectors": {
            "name": "set_vectors",
            "location": 44,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "np.ndarray"
                ],
                "metadatas": [
                    "list"
                ]
            }
        },
        "Shard.add_vectors": {
            "name": "add_vectors",
            "location": 47,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "np.ndarray"
                ],
                "metadatas": [
                    "list"
                ]
            }
        },
        "Shard.query": {
            "name": "query",
            "location": 50,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "np.ndarray"
                ],
                "k": [
                    "int"
                ]
            }
        },
        "Shard.retrieve": {
            "name": "retrieve",
            "location": 53,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        }
    },
    "needlestack-master/needlestack/collections/__init__.py": {},
    "needlestack-master/needlestack/data_sources/gcs.py": {
        "get_client": {
            "name": "get_client",
            "location": 59,
            "return": [
                "Callable",
                "dict",
                "bool",
                "Dict[str, Dict[str, str]]",
                "str",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "credentials_file": [
                    "Optional[str]",
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "GcsDataSource.blob": {
            "name": "blob",
            "location": 28,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GcsDataSource.last_modified": {
            "name": "last_modified",
            "location": 34,
            "return": [
                "None",
                "Optional[str]",
                "Optional[bool]",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GcsDataSource.populate_from_proto": {
            "name": "populate_from_proto",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proto": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "GcsDataSource.local_filename": {
            "name": "local_filename",
            "location": 48,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GcsDataSource.get_content": {
            "name": "get_content",
            "location": 54,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "typing.Text",
                    "str",
                    "bool",
                    "List[int]"
                ]
            }
        }
    },
    "needlestack-master/needlestack/data_sources/local.py": {
        "LocalDataSource.last_modified": {
            "name": "last_modified",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalDataSource.populate_from_proto": {
            "name": "populate_from_proto",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proto": [
                    "str",
                    "Union[str, IO]",
                    "typing.IO",
                    "bool",
                    "IO[str]",
                    "dict[str, typing.Any]",
                    "IO",
                    "Dict[str, Any]"
                ]
            }
        },
        "LocalDataSource.local_filename": {
            "name": "local_filename",
            "location": 25,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalDataSource.get_content": {
            "name": "get_content",
            "location": 29,
            "return": [
                "",
                "typing.Generator[typing.IO]"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "typing.Text"
                ]
            }
        }
    },
    "needlestack-master/needlestack/data_sources/source.py": {
        "DataSource.from_proto": {
            "name": "from_proto",
            "location": 12,
            "return": [
                "DataSource"
            ],
            "arguments": {
                "proto": [
                    "dict"
                ]
            }
        },
        "DataSource.last_modified": {
            "name": "last_modified",
            "location": 37,
            "return": [
                "builtins.float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSource.populate_from_proto": {
            "name": "populate_from_proto",
            "location": 41,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "proto": []
            }
        },
        "DataSource.local_filename": {
            "name": "local_filename",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSource.get_content": {
            "name": "get_content",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "bool",
                    "List[int]",
                    "list[int]"
                ]
            }
        }
    },
    "needlestack-master/needlestack/data_sources/__init__.py": {},
    "needlestack-master/needlestack/indices/faiss_indices.py": {
        "FaissIndex.dimension": {
            "name": "dimension",
            "location": 32,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaissIndex.count": {
            "name": "count",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaissIndex.populate_from_proto": {
            "name": "populate_from_proto",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proto": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Mapping[str, str]",
                    "typing.Mapping"
                ]
            }
        },
        "FaissIndex.populate": {
            "name": "populate",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "FaissIndex.serialize": {
            "name": "serialize",
            "location": 47,
            "return": [
                "FaissIndex",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaissIndex._load": {
            "name": "_load",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaissIndex.update_available": {
            "name": "update_available",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaissIndex._set_id_to_vector": {
            "name": "_set_id_to_vector",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enable": [
                    "bool"
                ]
            }
        },
        "FaissIndex._get_metadata_by_index": {
            "name": "_get_metadata_by_index",
            "location": 94,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "Iterator",
                    "typing.Iterator"
                ]
            }
        },
        "FaissIndex._get_vector_by_index": {
            "name": "_get_vector_by_index",
            "location": 97,
            "return": [
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "FaissIndex._get_index_by_id": {
            "name": "_get_index_by_id",
            "location": 103,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "dict[int, str]",
                    "Dict[int, str]",
                    "Dict[Any, str]"
                ]
            }
        },
        "FaissIndex.knn_search": {
            "name": "knn_search",
            "location": 111,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "list",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "List[str]",
                    "list",
                    "Tuple[numpy.ndarray, List[int]]"
                ],
                "k": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "T"
                ]
            }
        }
    },
    "needlestack-master/needlestack/indices/index.py": {
        "BaseIndex.from_proto": {
            "name": "from_proto",
            "location": 17,
            "return": [
                "BaseIndex"
            ],
            "arguments": {
                "proto": [
                    "int",
                    "Optional[BaseException]",
                    "numpy.ndarray"
                ]
            }
        },
        "BaseIndex.dimension": {
            "name": "dimension",
            "location": 37,
            "return": [
                "builtins.int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseIndex.count": {
            "name": "count",
            "location": 42,
            "return": [
                "builtins.int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseIndex.populate_from_proto": {
            "name": "populate_from_proto",
            "location": 46,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "proto": [
                    "numpy.ndarray"
                ]
            }
        },
        "BaseIndex.populate": {
            "name": "populate",
            "location": 55,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        },
        "BaseIndex.serialize": {
            "name": "serialize",
            "location": 63,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseIndex.load": {
            "name": "load",
            "location": 67,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseIndex._load": {
            "name": "_load",
            "location": 72,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseIndex.update_available": {
            "name": "update_available",
            "location": 76,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseIndex.set_vectors": {
            "name": "set_vectors",
            "location": 80,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "np.ndarray"
                ],
                "metadatas": [
                    "list"
                ]
            }
        },
        "BaseIndex.add_vectors": {
            "name": "add_vectors",
            "location": 84,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "np.ndarray"
                ],
                "metadatas": [
                    "list"
                ]
            }
        },
        "BaseIndex._get_metadata_by_index": {
            "name": "_get_metadata_by_index",
            "location": 88,
            "return": [
                "needlestack.apis.indices_pb2.Metadata",
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ]
            }
        },
        "BaseIndex._get_vector_by_index": {
            "name": "_get_vector_by_index",
            "location": 91,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ]
            }
        },
        "BaseIndex._get_index_by_id": {
            "name": "_get_index_by_id",
            "location": 94,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "BaseIndex.knn_search": {
            "name": "knn_search",
            "location": 97,
            "return": [
                "Tuple[(np.ndarray, np.ndarray)]"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "np.ndarray"
                ],
                "k": [
                    "int"
                ]
            }
        },
        "BaseIndex.get_vector_and_metadata": {
            "name": "get_vector_and_metadata",
            "location": 106,
            "return": [
                "Tuple[(np.ndarray, Any)]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "BaseIndex.retrieve": {
            "name": "retrieve",
            "location": 122,
            "return": [
                "numpy.array",
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "BaseIndex.query": {
            "name": "query",
            "location": 127,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "np.ndarray"
                ],
                "k": [
                    "int"
                ]
            }
        }
    },
    "needlestack-master/needlestack/indices/__init__.py": {},
    "needlestack-master/needlestack/servicers/factory.py": {
        "create_server": {
            "name": "create_server",
            "location": 18,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "config": [
                    "needlestack.servicers.settings.BaseConfig"
                ]
            }
        },
        "create_zookeeper_cluster_manager": {
            "name": "create_zookeeper_cluster_manager",
            "location": 35,
            "return": [
                "needlestack.cluster_managers.manager.ClusterManager"
            ],
            "arguments": {
                "config": [
                    "needlestack.servicers.settings.BaseConfig"
                ]
            }
        },
        "serve": {
            "name": "serve",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "server": [
                    "int",
                    "Tuple[float, float, float, float]",
                    "T",
                    "str",
                    "Sequence[int]"
                ]
            }
        }
    },
    "needlestack-master/needlestack/servicers/logging.py": {
        "configure_logger": {
            "name": "configure_logger",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "needlestack.servicers.settings.BaseConfig"
                ]
            }
        },
        "get_debug_handler": {
            "name": "get_debug_handler",
            "location": 32,
            "return": [
                "logging.StreamHandler[TextIO]"
            ],
            "arguments": {
                "fmt": [
                    "str"
                ],
                "datefmt": [
                    "str"
                ]
            }
        },
        "get_file_handler": {
            "name": "get_file_handler",
            "location": 44,
            "return": [
                "logging.handlers.RotatingFileHandler"
            ],
            "arguments": {
                "fmt": [
                    "str"
                ],
                "datefmt": [
                    "str"
                ],
                "log_file": [
                    "str"
                ],
                "max_bytes": [
                    "int"
                ],
                "backup_count": [
                    "int"
                ]
            }
        }
    },
    "needlestack-master/needlestack/servicers/merger.py": {
        "MergerServicer.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "needlestack.servicers.settings.BaseConfig"
                ],
                "cluster_manager": [
                    "needlestack.cluster_managers.manager.ClusterManager"
                ]
            }
        },
        "MergerServicer.Search": {
            "name": "Search",
            "location": 32,
            "return": [
                "bool",
                "Dict[str, Dict[str, str]]",
                "Dict[str, Dict]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "dict[, ]"
                ],
                "context": [
                    "dict",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "MergerServicer.Retrieve": {
            "name": "Retrieve",
            "location": 70,
            "return": [
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": [
                    "str",
                    "int"
                ]
            }
        },
        "MergerServicer.CollectionsAdd": {
            "name": "CollectionsAdd",
            "location": 96,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": [
                    "int"
                ]
            }
        },
        "MergerServicer.CollectionsDelete": {
            "name": "CollectionsDelete",
            "location": 125,
            "return": [
                "List[Callable]",
                "str",
                "int",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "None"
                ],
                "context": []
            }
        },
        "MergerServicer.CollectionsLoad": {
            "name": "CollectionsLoad",
            "location": 149,
            "return": [
                "str",
                "List[str]",
                "Callable",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MergerServicer.CollectionsList": {
            "name": "CollectionsList",
            "location": 154,
            "return": [
                "Iterable[str]",
                "IO[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Exception",
                    "dict",
                    "dict[, ]"
                ],
                "context": [
                    "grpc.ServicerContext"
                ]
            }
        },
        "MergerServicer.collections_load": {
            "name": "collections_load",
            "location": 159,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergerServicer.get_searcher_hostports": {
            "name": "get_searcher_hostports",
            "location": 179,
            "return": [
                "List[Tuple[(str, List[str])]]"
            ],
            "arguments": {
                "self": [],
                "collection_name": [
                    "str"
                ],
                "shard_names": [
                    "List[str]"
                ]
            }
        },
        "MergerServicer.get_searcher_stub": {
            "name": "get_searcher_stub",
            "location": 197,
            "return": [
                "Dict[str, int]",
                "dict",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": [],
                "hostport": [
                    "str"
                ]
            }
        }
    },
    "needlestack-master/needlestack/servicers/searcher.py": {
        "SearcherServicer.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "needlestack.servicers.settings.BaseConfig"
                ],
                "cluster_manager": [
                    "needlestack.cluster_managers.manager.ClusterManager"
                ]
            }
        },
        "SearcherServicer.Search": {
            "name": "Search",
            "location": 35,
            "return": [
                "bool",
                "Dict[str, Dict[str, str]]",
                "Dict[str, Dict]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": [
                    "dict",
                    "str",
                    "Callable"
                ]
            }
        },
        "SearcherServicer.Retrieve": {
            "name": "Retrieve",
            "location": 55,
            "return": [
                "bool",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "SearcherServicer.CollectionsLoad": {
            "name": "CollectionsLoad",
            "location": 64,
            "return": [
                "str",
                "List[str]",
                "Callable",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "SearcherServicer.get_collection": {
            "name": "get_collection",
            "location": 68,
            "return": [
                "needlestack.collections.collection.Collection"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "SearcherServicer.load_collections": {
            "name": "load_collections",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearcherServicer._add_collection": {
            "name": "_add_collection",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proto": [
                    "Exception",
                    "needlestack.apis.collections_pb2.Collection",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "None",
                    "Optional[logging.Logger]",
                    "dict[str, list[str]]",
                    "Dict[str, List[str]]",
                    "int",
                    "Union[None, int, str]",
                    "str"
                ]
            }
        },
        "SearcherServicer._drop_collection": {
            "name": "_drop_collection",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "SearcherServicer._modify_collection": {
            "name": "_modify_collection",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proto": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "needlestack-master/needlestack/servicers/settings.py": {
        "BaseConfig.hostport": {
            "name": "hostport",
            "location": 77,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig.use_mutual_tls": {
            "name": "use_mutual_tls",
            "location": 81,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig.use_server_ssl": {
            "name": "use_server_ssl",
            "location": 85,
            "return": [
                "Optional[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig.use_channel_ssl": {
            "name": "use_channel_ssl",
            "location": 95,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "List[str]",
                "Optional[float]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig.ca_certificate": {
            "name": "ca_certificate",
            "location": 102,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig.server_private_key": {
            "name": "server_private_key",
            "location": 106,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig.server_certificate": {
            "name": "server_certificate",
            "location": 110,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig.channel_private_key": {
            "name": "channel_private_key",
            "location": 114,
            "return": [
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig.channel_certificate": {
            "name": "channel_certificate",
            "location": 118,
            "return": [
                "str",
                "Mapping[str, Any]",
                "bool",
                "List[Tuple[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig.ssl_server_credentials": {
            "name": "ssl_server_credentials",
            "location": 122,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig.ssl_channel_credentials": {
            "name": "ssl_channel_credentials",
            "location": 134,
            "return": [
                "dict",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig._get_credential": {
            "name": "_get_credential",
            "location": 144,
            "return": [
                "Optional[bytes]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "needlestack-master/needlestack/servicers/__init__.py": {},
    "needlestack-master/needlestack/utilities/rpc.py": {
        "unhandled_exception_rpc": {
            "name": "unhandled_exception_rpc",
            "location": 10,
            "return": [
                "Callable[([Callable], Callable)]"
            ],
            "arguments": {
                "response_type": [
                    "type"
                ]
            }
        },
        "unhandled_exception_rpc.wrapper": {
            "name": "wrapper",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "unhandled_exception_rpc.wrapper.wrapped": {
            "name": "wrapped",
            "location": 13,
            "return": [
                "bool",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Mapping",
                    "Dict[str, str]"
                ],
                "context": [
                    "Dict[str, int]",
                    "List[str]"
                ]
            }
        }
    },
    "needlestack-master/needlestack/utilities/__init__.py": {},
    "needlestack-master/tests/conftest.py": {
        "ca_certificate": {
            "name": "ca_certificate",
            "location": 22,
            "return": [
                "Path",
                "str",
                "pathlib.Path",
                "tuple",
                "mtg_ssm.containers.collection.MagicCollection"
            ],
            "arguments": {
                "tmpdir": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "server_private_key": {
            "name": "server_private_key",
            "location": 27,
            "return": [
                "Path",
                "str",
                "pathlib.Path",
                "List[pathlib.Path]",
                "paradigm.catalog.Path"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "int",
                    "bytes",
                    "bool",
                    "pypi2nix.path.Path"
                ]
            }
        },
        "server_certificate": {
            "name": "server_certificate",
            "location": 32,
            "return": [
                "Path",
                "str",
                "pathlib.Path",
                "tuple",
                "mtg_ssm.containers.collection.MagicCollection"
            ],
            "arguments": {
                "tmpdir": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "channel_private_key": {
            "name": "channel_private_key",
            "location": 37,
            "return": [
                "Path",
                "str",
                "pathlib.Path",
                "path.Path",
                "Optional[pathlib.Path]",
                "list"
            ],
            "arguments": {
                "tmpdir": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "channel_certificate": {
            "name": "channel_certificate",
            "location": 42,
            "return": [
                "Path",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "tmpdir": [
                    "bool"
                ]
            }
        },
        "faiss_index_4d": {
            "name": "faiss_index_4d",
            "location": 47,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "tmpdir": [
                    "numpy.ndarray",
                    "datetime.date"
                ]
            }
        },
        "shard_3d": {
            "name": "shard_3d",
            "location": 56,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "tmpdir": [
                    "numpy.ndarray",
                    "datetime.date",
                    "numpy.array"
                ]
            }
        },
        "collection_2shards_2d": {
            "name": "collection_2shards_2d",
            "location": 67,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "tmpdir": [
                    "float"
                ]
            }
        },
        "test_servicer_tls_config": {
            "name": "test_servicer_tls_config",
            "location": 95,
            "return": [
                "TestConfig"
            ],
            "arguments": {
                "ca_certificate": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "server_private_key": [
                    "str",
                    "pathlib.Path"
                ],
                "server_certificate": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "channel_private_key": [
                    "list[]",
                    "list",
                    "bool",
                    "None",
                    "bytes",
                    "Optional[pathlib.Path]",
                    "Path",
                    "Optional[List[Any]]"
                ],
                "channel_certificate": [
                    "str",
                    "int",
                    "list[str]",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "gcs_blob": {
            "name": "gcs_blob",
            "location": 122,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "gcs_bucket": {
            "name": "gcs_bucket",
            "location": 137,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "gcs_blob": [
                    "typing.IO",
                    "int",
                    "numpy.ndarray",
                    "IO"
                ]
            }
        },
        "gcs_storage_client": {
            "name": "gcs_storage_client",
            "location": 147,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "pathlib.Path"
                ],
                "gcs_bucket": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "bool",
                    "Optional[numpy.ndarray]"
                ]
            }
        },
        "gen_random_vectors_and_metadatas": {
            "name": "gen_random_vectors_and_metadatas",
            "location": 159,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "dimension": [
                    "int",
                    "Tuple[int]",
                    "tuple[int]"
                ],
                "size": [
                    "int",
                    "List[List[int]]",
                    "bytes",
                    "list[list[int]]",
                    "List[int]",
                    "list[int]"
                ],
                "dtype": [
                    "int",
                    "Tuple[int]",
                    "tuple[int]"
                ],
                "id_prefix": [
                    "typing.Text",
                    "int",
                    "str"
                ],
                "seed": [
                    "int",
                    "bytes"
                ]
            }
        },
        "gen_faiss_index_proto": {
            "name": "gen_faiss_index_proto",
            "location": 174,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "bytes",
                    "Union[str, bytes]",
                    "Union[pathlib.Path, str]"
                ],
                "X": [
                    "Set[str]",
                    "str",
                    "set[str]"
                ],
                "metadatas": [
                    "bool",
                    "str"
                ],
                "name": [
                    "typing.Text",
                    "str",
                    "Union[str, bytes]",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "gcs_blob.download_to_file": {
            "name": "download_to_file",
            "location": 123,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "f": [
                    "str",
                    "pathlib.Path",
                    "Type['GenericList']",
                    "bool"
                ]
            }
        },
        "gcs_blob.download_as_string": {
            "name": "download_as_string",
            "location": 126,
            "return": [
                "bytes",
                "str",
                "int",
                "Union[int, str]",
                "bool"
            ],
            "arguments": {}
        },
        "gcs_bucket.get_blob": {
            "name": "get_blob",
            "location": 138,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "gcs_storage_client.get_bucket": {
            "name": "get_bucket",
            "location": 148,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {}
        }
    },
    "needlestack-master/tests/__init__.py": {},
    "needlestack-master/tests/apis/test_serializers.py": {
        "test_ndarray_to_proto_numpy": {
            "name": "test_ndarray_to_proto_numpy",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ndarray_to_proto_list": {
            "name": "test_ndarray_to_proto_list",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_proto_to_ndarray_numpy": {
            "name": "test_proto_to_ndarray_numpy",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "X": [
                    "float",
                    "numpy.ndarray",
                    "typing.Sequence['cirq.Qid']",
                    "dict[, ]",
                    "Sequence['cirq.Qid']",
                    "dict"
                ]
            }
        },
        "test_proto_to_ndarray": {
            "name": "test_proto_to_ndarray",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "value": [
                    "numpy.ndarray",
                    "Union[numpy.ndarray, astropy.units.quantity.Quantity]",
                    "numpy.array"
                ],
                "shape": [
                    "numpy.ndarray",
                    "Union[numpy.ndarray, astropy.units.quantity.Quantity]",
                    "numpy.array"
                ],
                "dtype": [
                    "numpy.ndarray",
                    "Union[numpy.ndarray, astropy.units.quantity.Quantity]",
                    "numpy.array"
                ]
            }
        },
        "test_proto_to_ndarray_missing_info": {
            "name": "test_proto_to_ndarray_missing_info",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "proto": [
                    "str",
                    "Iterable[Any]",
                    "typing.Iterable[typing.Any]"
                ],
                "error": [
                    "str",
                    "bool",
                    "typing.Type",
                    "Type[Any]",
                    "Type"
                ]
            }
        },
        "test_ndarray_to_proto_unsupported_input": {
            "name": "test_ndarray_to_proto_unsupported_input",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "X": [
                    "Callable",
                    "float",
                    "typing.Callable[, ]",
                    "int"
                ],
                "dtype": [
                    "Callable",
                    "float",
                    "typing.Callable[, ]",
                    "int"
                ],
                "shape": [
                    "Callable",
                    "float",
                    "typing.Callable[, ]",
                    "int"
                ],
                "error": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Sequence[Sequence[str]]",
                    "typing.Sequence[typing.Sequence[str]]"
                ]
            }
        },
        "test_metadata_list_to_proto": {
            "name": "test_metadata_list_to_proto",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_metadata_to_proto": {
            "name": "test_metadata_to_proto",
            "location": 126,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "id": [
                    "str",
                    "Dict[str, List[str]]",
                    "dict[str, list[str]]",
                    "Optional[str]",
                    "None",
                    "tuple",
                    "tuple[]"
                ],
                "fields": [
                    "str",
                    "tuple[]",
                    "tuple",
                    "Iterable[str]"
                ],
                "fieldtypes": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Set[str]",
                    "set[str]"
                ],
                "fieldnames": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "test_metadata_field_to_proto": {
            "name": "test_metadata_field_to_proto",
            "location": 149,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "field": [
                    "str"
                ],
                "fieldtype": [
                    "str",
                    "float",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "fieldname": [
                    "dict",
                    "dict[, ]",
                    "MutableMapping[str, Any]",
                    "typing.MutableMapping",
                    "Callable",
                    "float",
                    "typing.Callable[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "test_metadata_field_to_proto_not_serializable": {
            "name": "test_metadata_field_to_proto_not_serializable",
            "location": 162,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "field": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "fieldtype": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "fieldname": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "needlestack-master/tests/balancers/test_greedy.py": {
        "test_greedy_add_one_knapsack": {
            "name": "test_greedy_add_one_knapsack",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_greedy_add_two_knapsack": {
            "name": "test_greedy_add_two_knapsack",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_greedy_add_item_quantity_to_much": {
            "name": "test_greedy_add_item_quantity_to_much",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_greedy_add_item_quantity": {
            "name": "test_greedy_add_item_quantity",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "needlestack-master/tests/balancers/test_knapsack.py": {
        "test_knapsack_add_item": {
            "name": "test_knapsack_add_item",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_knapsack_add_duplicate_item": {
            "name": "test_knapsack_add_duplicate_item",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "needlestack-master/tests/collections/test_collection.py": {
        "test_query": {
            "name": "test_query",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "collection_2shards_2d": [
                    "dict",
                    "List[Dict[str, Any]]",
                    "bool"
                ],
                "X": [
                    "typing.Callable[numpy.ndarray, float]",
                    "Callable[[numpy.ndarray], float]",
                    "typing.OrderedDict",
                    "reader_server.types.Feed",
                    "reader_server.types.Subscription",
                    "OrderedDict"
                ],
                "k": [
                    "typing.Callable[numpy.ndarray, float]",
                    "Callable[[numpy.ndarray], float]",
                    "typing.OrderedDict",
                    "reader_server.types.Feed",
                    "reader_server.types.Subscription",
                    "OrderedDict"
                ]
            }
        },
        "test_retrieve": {
            "name": "test_retrieve",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "collection_2shards_2d": [
                    "AbstractSet[str]",
                    "int",
                    "str",
                    "bool"
                ],
                "id": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "typing.Sequence[int]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "needlestack-master/tests/collections/test_shard.py": {
        "test_query": {
            "name": "test_query",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "shard_3d": [
                    "int",
                    "Sequence[str]",
                    "List[Dict]",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "X": [
                    "List[int]",
                    "list[int]",
                    "OrderedDict",
                    "typing.OrderedDict",
                    "Callable",
                    "typing.Callable[, ]",
                    "Dict[int, Dict[str, Any]]",
                    "dict[int, dict[str, typing.Any]]",
                    "List[str]",
                    "list[str]"
                ],
                "k": [
                    "List[Dict]",
                    "list[dict[, ]]",
                    "Dict[int, Dict[str, Any]]",
                    "int",
                    "dict[int, dict[str, typing.Any]]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_retrieve": {
            "name": "test_retrieve",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "shard_3d": [
                    "List[str]",
                    "bool",
                    "Tuple[int, str]",
                    "numpy.ndarray",
                    "str"
                ],
                "id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "needlestack-master/tests/data_sources/test_gcs.py": {
        "test_create_client": {
            "name": "test_create_client",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "gcs_storage_client": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ]
            }
        },
        "test_get_client": {
            "name": "test_get_client",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "gcs_storage_client": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ]
            }
        },
        "test_gcs_data_source": {
            "name": "test_gcs_data_source",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "gcs_storage_client": [
                    "Callable[[], int]",
                    "typing.Callable[[], int]"
                ]
            }
        }
    },
    "needlestack-master/tests/data_sources/test_local.py": {
        "test_local_data_source": {
            "name": "test_local_data_source",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "bytes"
                ]
            }
        }
    },
    "needlestack-master/tests/data_sources/test_source.py": {
        "test_no_datasource": {
            "name": "test_no_datasource",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "needlestack-master/tests/indices/test_faiss_indices.py": {
        "test_load": {
            "name": "test_load",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "faiss_index_4d": [
                    "Dict[str, Any]",
                    "int",
                    "str"
                ]
            }
        },
        "test_query": {
            "name": "test_query",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "faiss_index_4d": [
                    "str",
                    "int"
                ],
                "X": [
                    "OrderedDict",
                    "typing.OrderedDict",
                    "Sequence[Hashable]",
                    "typing.Sequence[typing.Hashable]"
                ],
                "k": [
                    "OrderedDict",
                    "typing.OrderedDict",
                    "Sequence[Hashable]",
                    "typing.Sequence[typing.Hashable]"
                ]
            }
        },
        "test_knn_search": {
            "name": "test_knn_search",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "faiss_index_4d": [
                    "int",
                    "bool",
                    "Callable"
                ],
                "X": [
                    "int",
                    "float"
                ],
                "k": [
                    "int",
                    "tuple[int]",
                    "numpy.dtype",
                    "Union[Tuple[int], Tuple[int, int]]"
                ]
            }
        },
        "test_knn_search_bad_shape": {
            "name": "test_knn_search_bad_shape",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "faiss_index_4d": [
                    "int",
                    "float",
                    "List[float]"
                ],
                "X": [
                    "float",
                    "int",
                    "List[float]",
                    "list[float]"
                ],
                "k": [
                    "float",
                    "int",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_retrieve": {
            "name": "test_retrieve",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "faiss_index_4d": [
                    "str",
                    "Tuple[int, int]"
                ],
                "index": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_retrieve_none": {
            "name": "test_retrieve_none",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "faiss_index_4d": [
                    "List[str]",
                    "str",
                    "Dict[Any, int]",
                    "Dict[str, Any]",
                    "dict",
                    "bool"
                ],
                "id": [
                    "str",
                    "bytes",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_get_vector_by_index": {
            "name": "test_get_vector_by_index",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "faiss_index_4d": [
                    "dict",
                    "List[numpy.array]"
                ]
            }
        },
        "test_get_metadata_by_index": {
            "name": "test_get_metadata_by_index",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "faiss_index_4d": [
                    "str"
                ],
                "index": []
            }
        },
        "test_get_index_by_id_not_enabled": {
            "name": "test_get_index_by_id_not_enabled",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "faiss_index_4d": [
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        }
    },
    "needlestack-master/tests/indices/test_index.py": {
        "test_no_datasource": {
            "name": "test_no_datasource",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "needlestack-master/tests/servicers/test_factory.py": {
        "test_create_zookeeper_cluster_manager": {
            "name": "test_create_zookeeper_cluster_manager",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "test_servicer_tls_config": [
                    "str"
                ]
            }
        }
    },
    "needlestack-master/tests/servicers/test_logging.py": {
        "test_get_debug_handler": {
            "name": "test_get_debug_handler",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_file_handler": {
            "name": "test_get_file_handler",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "needlestack-master/tests/servicers/test_merger.py": {},
    "needlestack-master/tests/servicers/test_searcher.py": {},
    "needlestack-master/tests/servicers/test_settings.py": {
        "test_service_properties": {
            "name": "test_service_properties",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {
                "test_servicer_tls_config": [
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "needlestack-master/tests/utilities/test_rpc.py": {
        "test_unhandled_exception_rpc": {
            "name": "test_unhandled_exception_rpc",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unhandled_exception_rpc_exception": {
            "name": "test_unhandled_exception_rpc_exception",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unhandled_exception_rpc.do_nothing": {
            "name": "do_nothing",
            "location": 11,
            "return": [
                "Message",
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "test_unhandled_exception_rpc_exception.raise_exception": {
            "name": "raise_exception",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict"
                ],
                "context": [
                    "dict"
                ]
            }
        }
    }
}
{
    "network-simulation-master/execute/export_edgelist.py": {
        "generate_edge_list": {
            "name": "generate_edge_list",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "network": [
                    "Sequence[str]",
                    "Set[str]",
                    "pathlib.Path"
                ],
                "output_path": [
                    "Path",
                    "pathlib.Path",
                    "pathlib2.Path"
                ]
            }
        },
        "unique_edge_list": {
            "name": "unique_edge_list",
            "location": 19,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "network": [
                    "Callable",
                    "int"
                ]
            }
        },
        "write_edge_list": {
            "name": "write_edge_list",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "edge_list": [
                    "str",
                    "Optional[Container[str]]",
                    "typing.Container",
                    "None"
                ],
                "output_path": [
                    "pathlib.Path",
                    "pathlib2.Path"
                ]
            }
        }
    },
    "network-simulation-master/execute/export_hospital_network.py": {
        "export_gexf": {
            "name": "export_gexf",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "import_path": [
                    "str",
                    "typing.Text"
                ],
                "shelve_key": [
                    "typing.Text",
                    "int",
                    "str",
                    "click.Path",
                    "float",
                    "Optional[int]"
                ],
                "export_path": [
                    "typing.Text",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "state_dict": [
                    "str",
                    "None",
                    "Dict[str, Sequence[str]]",
                    "bool",
                    "dict[str, typing.Sequence[str]]",
                    "Dict[str, Sequence[Any]]",
                    "dict[str, typing.Sequence[typing.Any]]",
                    "int",
                    "typing.Mapping",
                    "Optional[str]",
                    "Optional[Mapping[str, Any]]"
                ],
                "region_dict": [
                    "str",
                    "None",
                    "Dict[str, Sequence[str]]",
                    "bool",
                    "dict[str, typing.Sequence[str]]",
                    "Dict[str, Sequence[Any]]",
                    "dict[str, typing.Sequence[typing.Any]]",
                    "int",
                    "typing.Mapping",
                    "Optional[str]",
                    "Optional[Mapping[str, Any]]"
                ],
                "is_regional_weight": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        }
    },
    "network-simulation-master/execute/generate_networks.py": {
        "generate_random_graphs": {
            "name": "generate_random_graphs",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "export_gexf": {
            "name": "export_gexf",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "typing.Text",
                    "str",
                    "waterbutler.core.path.WaterButlerPath",
                    "dict"
                ]
            }
        }
    },
    "network-simulation-master/execute/get_coordinates.py": {
        "set_default_indices": {
            "name": "set_default_indices",
            "location": 8,
            "return": [
                "Dict[(Any, Optional[int])]"
            ],
            "arguments": {}
        },
        "get_column_indices": {
            "name": "get_column_indices",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "worksheet": [
                    "Dict[str, Any]",
                    "float",
                    "dict[str, typing.Any]",
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "dict",
                    "None",
                    "dict[, ]"
                ],
                "columns": [
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "bool",
                    "list[]",
                    "Tuple[int, int]",
                    "list"
                ]
            }
        },
        "get_unique_locations": {
            "name": "get_unique_locations",
            "location": 39,
            "return": [
                "Set[Tuple[(Any, Any, int)]]"
            ],
            "arguments": {
                "worksheet": [
                    "str",
                    "int",
                    "List[int]",
                    "list[int]",
                    "list",
                    "list[]"
                ]
            }
        },
        "get_coordinates": {
            "name": "get_coordinates",
            "location": 49,
            "return": [
                "dict"
            ],
            "arguments": {
                "locations": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "Dict[str, Any]",
                    "bool",
                    "List[str]",
                    "float"
                ]
            }
        },
        "get_coordinate": {
            "name": "get_coordinate",
            "location": 61,
            "return": [
                "str",
                "Union[str, \"DatabaseURL\"]",
                "bytes",
                "dict"
            ],
            "arguments": {
                "city": [
                    "str",
                    "bytes",
                    "Callable",
                    "typing.Callable[, ]",
                    "Hashable",
                    "typing.Hashable"
                ],
                "state": [
                    "str",
                    "bytes",
                    "Callable",
                    "typing.Callable[, ]",
                    "Hashable",
                    "typing.Hashable"
                ]
            }
        },
        "set_coordinates": {
            "name": "set_coordinates",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "worksheet": [
                    "int"
                ],
                "locations": [
                    "list[dict[str, typing.Any]]",
                    "list[]",
                    "bool",
                    "int",
                    "List[Dict[str, Any]]",
                    "Dict[str, Tuple[str, str]]",
                    "Optional[List]"
                ]
            }
        }
    },
    "network-simulation-master/execute/hospital_count.py": {
        "get_unique_states": {
            "name": "get_unique_states",
            "location": 7,
            "return": [
                "list"
            ],
            "arguments": {
                "worksheet": [
                    "list[str]",
                    "Sequence[T]",
                    "Callable[[T], bool]",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "get_unique_regions": {
            "name": "get_unique_regions",
            "location": 17,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "worksheet": [
                    "str",
                    "list[int]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "set_default_values": {
            "name": "set_default_values",
            "location": 27,
            "return": [
                "Dict[(Any, int)]"
            ],
            "arguments": {
                "collection": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Callable[[], T]"
                ]
            }
        },
        "quantify_by_state": {
            "name": "quantify_by_state",
            "location": 36,
            "return": [
                "_T1"
            ],
            "arguments": {
                "worksheet": [
                    "list[int]",
                    "str",
                    "List[int]",
                    "Sequence[Sequence[str]]",
                    "Sequence[Tuple[str, int]]"
                ],
                "state_dict": [
                    "_T1"
                ]
            }
        },
        "quantify_by_region": {
            "name": "quantify_by_region",
            "location": 46,
            "return": [
                "_T1"
            ],
            "arguments": {
                "worksheet": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Mapping"
                ],
                "region_dict": [
                    "_T1"
                ]
            }
        }
    },
    "network-simulation-master/execute/import_edge_list.py": {
        "import_edge_list": {
            "name": "import_edge_list",
            "location": 8,
            "return": [
                "List[List[int]]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]",
                    "waterbutler.core.path.WaterButlerPath",
                    "List[int]"
                ],
                "delimiter": [
                    "typing.Text",
                    "str",
                    "List[str]"
                ]
            }
        },
        "get_nodes": {
            "name": "get_nodes",
            "location": 20,
            "return": [
                "set"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "dict"
                ]
            }
        },
        "build_network": {
            "name": "build_network",
            "location": 26,
            "return": [
                "network_simulator.Network.Network"
            ],
            "arguments": {
                "nodes": [
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "data": [
                    "dict",
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "add_edges": {
            "name": "add_edges",
            "location": 34,
            "return": [
                "_T0"
            ],
            "arguments": {
                "network": [
                    "_T0"
                ],
                "data": [
                    "list[]",
                    "list",
                    "Dict[str, Any]",
                    "dict",
                    "Iterable"
                ]
            }
        }
    },
    "network-simulation-master/execute/import_hospitals.py": {
        "set_default_indices": {
            "name": "set_default_indices",
            "location": 15,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "get_column_indices": {
            "name": "get_column_indices",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "worksheet": [
                    "list[str]",
                    "Optional[List[str]]",
                    "mode.utils.types.graphs._T",
                    "bool",
                    "int"
                ],
                "columns": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "List[int]",
                    "list[int]",
                    "list",
                    "list[]",
                    "Tuple[str]",
                    "tuple[str]"
                ]
            }
        },
        "import_nodes": {
            "name": "import_nodes",
            "location": 44,
            "return": [
                "network_simulator.Network.Network"
            ],
            "arguments": {
                "worksheet": [
                    "str",
                    "int"
                ]
            }
        },
        "generate_distance_vector": {
            "name": "generate_distance_vector",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "network": [
                    "int",
                    "bs4.BeautifulSoup"
                ]
            }
        },
        "lookup_weight": {
            "name": "lookup_weight",
            "location": 89,
            "return": [
                "bytes",
                "qutebrowser.utils.usertypes.Backend"
            ],
            "arguments": {
                "source": [
                    "None",
                    "bs4.BeautifulSoup",
                    "dict[str, str]",
                    "Optional[\"Node\"]",
                    "raiden.tests.fuzz.utils.SendUnlockInNode",
                    "Dict[str, str]"
                ],
                "adjacent": [
                    "str",
                    "float",
                    "TextIO",
                    "typing.TextIO",
                    "list",
                    "list[]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "node_pair_generator": {
            "name": "node_pair_generator",
            "location": 105,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "network": [
                    "bytes",
                    "int"
                ]
            }
        },
        "get_adjacent_regional_weight": {
            "name": "get_adjacent_regional_weight",
            "location": 120,
            "return": [
                "Union[(int, _T2)]"
            ],
            "arguments": {
                "source": [
                    "str",
                    "type",
                    "typing.Type"
                ],
                "adjacent": [
                    "str",
                    "type",
                    "typing.Type"
                ],
                "weight": [
                    "_T2"
                ]
            }
        },
        "get_unique_locations": {
            "name": "get_unique_locations",
            "location": 147,
            "return": [
                "List[Tuple[(Any, Any, int)]]"
            ],
            "arguments": {
                "worksheet": [
                    "str",
                    "int",
                    "List[int]",
                    "list[int]",
                    "list",
                    "list[]"
                ]
            }
        },
        "sort_locations": {
            "name": "sort_locations",
            "location": 164,
            "return": [
                "list"
            ],
            "arguments": {
                "locations": [
                    "list",
                    "list[]",
                    "List[str]",
                    "list[str]",
                    "Union[List[Any], tuple]",
                    "tuple[]"
                ]
            }
        },
        "set_default_distances": {
            "name": "set_default_distances",
            "location": 180,
            "return": [
                "Dict[(Any, Dict[(Tuple[(Any, Any, Any)], None)])]"
            ],
            "arguments": {
                "locations": [
                    "list[str]",
                    "bool",
                    "list[dict[str, str]]",
                    "str",
                    "int",
                    "dict[, ]",
                    "List[str]",
                    "List[Dict[str, str]]",
                    "dict",
                    "Callable",
                    "Union[Callable, Type]"
                ]
            }
        },
        "get_distances": {
            "name": "get_distances",
            "location": 197,
            "return": [
                "_T0"
            ],
            "arguments": {
                "distance_vector": [
                    "_T0"
                ]
            }
        },
        "get_distance": {
            "name": "get_distance",
            "location": 231,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "source_city": [
                    "bool",
                    "str",
                    "list",
                    "list[]",
                    "Optional[\"DiscountCodeState\"]",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]"
                ],
                "source_state": [
                    "str",
                    "list[]",
                    "int",
                    "raiden.utils.PaymentID",
                    "raiden.utils.Address",
                    "list"
                ],
                "destination_city": [
                    "bool",
                    "str",
                    "list",
                    "list[]",
                    "Optional[\"DiscountCodeState\"]",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]"
                ],
                "destination_state": [
                    "str",
                    "list[]",
                    "int",
                    "raiden.utils.PaymentID",
                    "raiden.utils.Address",
                    "list"
                ]
            }
        },
        "logger_config": {
            "name": "logger_config",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "patch_pyppeteer": {
            "name": "patch_pyppeteer",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "patch_pyppeteer.new_method": {
            "name": "new_method",
            "location": 308,
            "return": [
                "bool",
                "Dict[str, Any]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "network-simulation-master/execute/make_tsv.py": {
        "write_tsv": {
            "name": "write_tsv",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "typing.Text"
                ]
            }
        }
    },
    "network-simulation-master/execute/networkx_demo.py": {},
    "network-simulation-master/execute/network_demo.py": {},
    "network-simulation-master/execute/simulation.py": {},
    "network-simulation-master/execute/simulator.py": {
        "print_menu": {
            "name": "print_menu",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main_menu": {
            "name": "main_menu",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "build_network": {
            "name": "build_network",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "generate_patients": {
            "name": "generate_patients",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "harvest_organs": {
            "name": "harvest_organs",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "allocate_organs": {
            "name": "allocate_organs",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "reset_network": {
            "name": "reset_network",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "restart": {
            "name": "restart",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "network-simulation-master/execute/subnetwork_demo.py": {},
    "network-simulation-master/execute/__init__.py": {},
    "network-simulation-master/network_simulator/BloodType.py": {
        "BloodType.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blood_type_letter": [
                    "network_simulator.compatibility_markers.BloodTypeLetter"
                ],
                "blood_type_polarity": [
                    "network_simulator.compatibility_markers.BloodTypePolarity"
                ]
            }
        },
        "BloodType.is_compatible_donor": {
            "name": "is_compatible_donor",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "blood_type": [
                    "BloodType"
                ]
            }
        },
        "BloodType.is_compatible_recipient": {
            "name": "is_compatible_recipient",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "blood_type": [
                    "BloodType"
                ]
            }
        },
        "BloodType.__str__": {
            "name": "__str__",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BloodType.__eq__": {
            "name": "__eq__",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "BloodType.__ne__": {
            "name": "__ne__",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "network-simulation-master/network_simulator/compatibility_markers.py": {
        "OrganType.random_organ_type": {
            "name": "random_organ_type",
            "location": 19,
            "return": [
                "OrganType"
            ],
            "arguments": {
                "cls": [
                    "Type[_TOrganType]"
                ]
            }
        },
        "BloodTypeLetter.random_blood_type": {
            "name": "random_blood_type",
            "location": 38,
            "return": [
                "BloodTypeLetter"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBloodTypeLetter]"
                ]
            }
        },
        "BloodTypePolarity.random_blood_polarity": {
            "name": "random_blood_polarity",
            "location": 55,
            "return": [
                "BloodTypePolarity"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBloodTypePolarity]"
                ]
            }
        }
    },
    "network-simulation-master/network_simulator/ConnectivityChecker.py": {
        "ConnectivityChecker.is_connected": {
            "name": "is_connected",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "network": [
                    "network_simulator.Network.Network"
                ],
                "nodes_encountered": [
                    "Set[Optional[int]]"
                ],
                "source": [
                    "int"
                ]
            }
        },
        "ConnectivityChecker.depth_first_search": {
            "name": "depth_first_search",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "network": [
                    "network_simulator.Network.Network"
                ],
                "node_id": [
                    "int"
                ]
            }
        },
        "ConnectivityChecker.breadth_first_search": {
            "name": "breadth_first_search",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "network": [
                    "network_simulator.Network.Network"
                ],
                "node_id": [
                    "int"
                ]
            }
        }
    },
    "network-simulation-master/network_simulator/Dijkstra.py": {
        "Dijkstra.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "network_simulator.Network.Network"
                ],
                "source": [
                    "int"
                ]
            }
        },
        "Dijkstra.dijkstra": {
            "name": "dijkstra",
            "location": 30,
            "return": [
                "Tuple[(Dict[(int, float)], Dict[(int, Optional[int])])]"
            ],
            "arguments": {
                "graph": [
                    "network_simulator.Network.Network"
                ],
                "source": [
                    "int"
                ]
            }
        },
        "Dijkstra.minimum_unvisited_distance": {
            "name": "minimum_unvisited_distance",
            "location": 71,
            "return": [
                "int"
            ],
            "arguments": {
                "unvisited": [
                    "List[int]"
                ],
                "weight": [
                    "Dict[(int, float)]"
                ]
            }
        },
        "Dijkstra.shortest_path": {
            "name": "shortest_path",
            "location": 92,
            "return": [
                "Tuple[(Optional[List[Optional[int]]], float)]"
            ],
            "arguments": {
                "self": [],
                "destination": [
                    "int"
                ]
            }
        },
        "Dijkstra.all_shortest_paths": {
            "name": "all_shortest_paths",
            "location": 122,
            "return": [
                "Dict[(int, Tuple[(Optional[List[Optional[int]]], float)])]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "network-simulation-master/network_simulator/exceptions.py": {
        "GraphElementError.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "None",
                    "int",
                    "Union[int, str]"
                ]
            }
        }
    },
    "network-simulation-master/network_simulator/GraphBuilder.py": {
        "GraphBuilder.graph_builder": {
            "name": "graph_builder",
            "location": 18,
            "return": [
                "network_simulator.Network.Network"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "max_weight": [
                    "int"
                ],
                "seed": [
                    "int"
                ]
            }
        },
        "GraphBuilder.generate_random_adjacency_dict": {
            "name": "generate_random_adjacency_dict",
            "location": 42,
            "return": [
                "Dict[(int, Dict[(str, int)])]"
            ],
            "arguments": {
                "node_id": [
                    "int"
                ],
                "total_nodes": [
                    "int"
                ],
                "max_weight": [
                    "int"
                ],
                "seed": [
                    "int"
                ]
            }
        }
    },
    "network-simulation-master/network_simulator/GraphConverter.py": {
        "GraphConverter.convert_to_networkx": {
            "name": "convert_to_networkx",
            "location": 9,
            "return": [
                "Union[str, int, float]",
                "str",
                "List[int]",
                "float"
            ],
            "arguments": {
                "network": [
                    "network_simulator.Network.Network"
                ],
                "is_regional_weight": [
                    "bool"
                ]
            }
        },
        "GraphConverter.convert_to_attribute_nx": {
            "name": "convert_to_attribute_nx",
            "location": 29,
            "return": [
                "Union[str, int, float]",
                "str",
                "List[int]",
                "float"
            ],
            "arguments": {
                "network": [
                    "network_simulator.Network.Network"
                ],
                "is_regional_weight": [
                    "bool"
                ],
                "state_dict": [
                    "bool",
                    "Optional[float]"
                ],
                "region_dict": [
                    "bool",
                    "None",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "GraphConverter.add_edges": {
            "name": "add_edges",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "network": [
                    "Match",
                    "typing.Match",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "node": [
                    "Match",
                    "typing.Match",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "nx_graph": [
                    "dict",
                    "dict[, ]"
                ],
                "is_regional_weight": [
                    "dict[, ]",
                    "int",
                    "dict",
                    "tuple[]",
                    "tuple",
                    "dict[str, list[typing.Callable[, ]]]",
                    "Iterable[T]",
                    "dict[str, str]",
                    "Dict[str, List[Callable]]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "network-simulation-master/network_simulator/Network.py": {
        "Network.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network_dict": [
                    "Dict[(int, network_simulator.Node.Node)]"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "Network.mirror_adjacency_dicts": {
            "name": "mirror_adjacency_dicts",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "network_dict": [
                    "Dict[(int, network_simulator.Node.Node)]"
                ],
                "node": [
                    "int"
                ],
                "to_remove": [
                    "List[List[int]]"
                ]
            }
        },
        "Network.__iter__": {
            "name": "__iter__",
            "location": 89,
            "return": [
                "Iterator[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Network.nodes": {
            "name": "nodes",
            "location": 98,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Network.add_node": {
            "name": "add_node",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "network_simulator.Node.Node"
                ],
                "feedback": [
                    "bool"
                ]
            }
        },
        "Network.remove_node": {
            "name": "remove_node",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "int"
                ],
                "feedback": [
                    "bool"
                ]
            }
        },
        "Network.add_edge": {
            "name": "add_edge",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id1": [
                    "int"
                ],
                "node_id2": [
                    "int"
                ],
                "weight": [
                    "int"
                ],
                "regional_weight": [
                    "int"
                ],
                "feedback": [
                    "bool"
                ]
            }
        },
        "Network.add_edge_to_dict": {
            "name": "add_edge_to_dict",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id1": [
                    "int"
                ],
                "node_id2": [
                    "int"
                ],
                "weight": [
                    "int"
                ],
                "regional_weight": [
                    "int"
                ],
                "feedback": [
                    "bool"
                ]
            }
        },
        "Network.remove_edge": {
            "name": "remove_edge",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id1": [
                    "int"
                ],
                "node_id2": [
                    "int"
                ],
                "feedback": [
                    "bool"
                ]
            }
        },
        "Network.remove_edge_from_dict": {
            "name": "remove_edge_from_dict",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id1": [
                    "int"
                ],
                "node_id2": [
                    "int"
                ],
                "feedback": [
                    "bool"
                ]
            }
        },
        "Network.mark_node_inactive": {
            "name": "mark_node_inactive",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "int"
                ],
                "feedback": [
                    "bool"
                ]
            }
        },
        "Network.mark_node_edges_inactive": {
            "name": "mark_node_edges_inactive",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "int"
                ]
            }
        },
        "Network.mark_node_active": {
            "name": "mark_node_active",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "int"
                ],
                "feedback": [
                    "bool"
                ]
            }
        },
        "Network.mark_edge_inactive": {
            "name": "mark_edge_inactive",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id1": [
                    "int"
                ],
                "node_id2": [
                    "int"
                ],
                "feedback": [
                    "bool"
                ]
            }
        },
        "Network.mark_edge_active": {
            "name": "mark_edge_active",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id1": [
                    "int"
                ],
                "node_id2": [
                    "int"
                ],
                "feedback": [
                    "bool"
                ]
            }
        },
        "Network.__str__": {
            "name": "__str__",
            "location": 543,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "network-simulation-master/network_simulator/Node.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "int"
                ],
                "hospital_name": [
                    "str"
                ],
                "adjacency_dict": [
                    "Dict[(int, Dict[(str, Optional[int])])]"
                ],
                "status": [
                    "bool"
                ],
                "region": [
                    "int"
                ],
                "city": [
                    "str"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "Node.is_adjacent": {
            "name": "is_adjacent",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "int"
                ]
            }
        },
        "Node.get_adjacents": {
            "name": "get_adjacents",
            "location": 68,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__str__": {
            "name": "__str__",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "network-simulation-master/network_simulator/Organ.py": {
        "Organ.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "organ_type": [
                    "network_simulator.compatibility_markers.OrganType"
                ],
                "blood_type": [
                    "network_simulator.BloodType.BloodType"
                ],
                "location": [
                    "int"
                ],
                "organ_list": [
                    "bool",
                    "str"
                ]
            }
        },
        "Organ.move_organ": {
            "name": "move_organ",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_location": [
                    "int"
                ],
                "cost": [
                    "float"
                ],
                "shortest_path": [
                    "Tuple[(Optional[List[Optional[int]]], float)]"
                ]
            }
        },
        "Organ.get_viability": {
            "name": "get_viability",
            "location": 57,
            "return": [
                "float"
            ],
            "arguments": {
                "organ_type": [
                    "network_simulator.compatibility_markers.OrganType"
                ]
            }
        },
        "Organ.__str__": {
            "name": "__str__",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "network-simulation-master/network_simulator/OrganAllocator.py": {
        "OrganAllocator.allocate_organs": {
            "name": "allocate_organs",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "organ_list": [
                    "network_simulator.OrganList.OrganList"
                ],
                "wait_list": [
                    "network_simulator.WaitList.WaitList"
                ],
                "network": [
                    "network_simulator.Network.Network"
                ]
            }
        },
        "OrganAllocator.find_best_match": {
            "name": "find_best_match",
            "location": 56,
            "return": [
                "Optional[network_simulator.Patient.Patient]"
            ],
            "arguments": {
                "organ": [
                    "network_simulator.Organ.Organ"
                ],
                "wait_list": [
                    "network_simulator.WaitList.WaitList"
                ],
                "weights": [
                    "Dict[(int, float)]"
                ]
            }
        }
    },
    "network-simulation-master/network_simulator/OrganGenerator.py": {
        "OrganGenerator.generate_organs": {
            "name": "generate_organs",
            "location": 22,
            "return": [
                "List[network_simulator.Organ.Organ]"
            ],
            "arguments": {
                "graph": [
                    "network_simulator.Network.Network"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "OrganGenerator.generate_organs_to_list": {
            "name": "generate_organs_to_list",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "network_simulator.Network.Network"
                ],
                "n": [
                    "int"
                ],
                "organ_list": [
                    "network_simulator.OrganList.OrganList"
                ]
            }
        }
    },
    "network-simulation-master/network_simulator/OrganList.py": {
        "OrganList.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "organ_list": [
                    "List[network_simulator.Organ.Organ]"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "OrganList.add_organ": {
            "name": "add_organ",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "organ": [
                    "network_simulator.Organ.Organ"
                ]
            }
        },
        "OrganList.add_organs": {
            "name": "add_organs",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "organs": [
                    "List[network_simulator.Organ.Organ]"
                ]
            }
        },
        "OrganList.remove_organ": {
            "name": "remove_organ",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "organ": [
                    "network_simulator.Organ.Organ"
                ]
            }
        },
        "OrganList.empty_list": {
            "name": "empty_list",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrganList.__str__": {
            "name": "__str__",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "network-simulation-master/network_simulator/Patient.py": {
        "Patient.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patient_name": [
                    "str"
                ],
                "illness": [
                    "str"
                ],
                "organ_needed": [
                    "network_simulator.compatibility_markers.OrganType"
                ],
                "blood_type": [
                    "network_simulator.BloodType.BloodType"
                ],
                "priority": [
                    "int"
                ],
                "location": [
                    "int"
                ],
                "wait_list": [
                    "bool",
                    "int",
                    "network_simulator.Network.Network",
                    "network_simulator.WaitLisWaitList",
                    "network_simulator.OrganLisOrganList"
                ]
            }
        },
        "Patient.__str__": {
            "name": "__str__",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Patient.__eq__": {
            "name": "__eq__",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int",
                    "typing.MutableMapping",
                    "MutableMapping[str, Any]",
                    "bool"
                ]
            }
        },
        "Patient.__ne__": {
            "name": "__ne__",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int",
                    "typing.MutableMapping",
                    "MutableMapping[str, Any]",
                    "bool"
                ]
            }
        },
        "Patient.__lt__": {
            "name": "__lt__",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]",
                    "int"
                ]
            }
        },
        "Patient.__le__": {
            "name": "__le__",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]",
                    "int"
                ]
            }
        },
        "Patient.__gt__": {
            "name": "__gt__",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]",
                    "int"
                ]
            }
        },
        "Patient.__ge__": {
            "name": "__ge__",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]",
                    "int"
                ]
            }
        }
    },
    "network-simulation-master/network_simulator/PatientGenerator.py": {
        "PatientGenerator.generate_patients": {
            "name": "generate_patients",
            "location": 19,
            "return": [
                "List[network_simulator.Patient.Patient]"
            ],
            "arguments": {
                "graph": [
                    "network_simulator.Network.Network"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "PatientGenerator.generate_patients_to_list": {
            "name": "generate_patients_to_list",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "network_simulator.Network.Network"
                ],
                "n": [
                    "int"
                ],
                "wait_list": [
                    "network_simulator.WaitList.WaitList"
                ]
            }
        }
    },
    "network-simulation-master/network_simulator/SubnetworkGenerator.py": {
        "SubnetworkGenerator.generate_subnetwork": {
            "name": "generate_subnetwork",
            "location": 11,
            "return": [
                "network_simulator.Network.Network"
            ],
            "arguments": {
                "network": [
                    "network_simulator.Network.Network"
                ],
                "collection": [
                    "Union[(network_simulator.OrganList.OrganList, network_simulator.WaitList.WaitList)]"
                ]
            }
        },
        "SubnetworkGenerator.copy_network": {
            "name": "copy_network",
            "location": 42,
            "return": [
                "network_simulator.Network.Network"
            ],
            "arguments": {
                "network": [
                    "network_simulator.Network.Network"
                ]
            }
        },
        "SubnetworkGenerator.mark_network_inactive": {
            "name": "mark_network_inactive",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "network": [
                    "network_simulator.Network.Network"
                ]
            }
        }
    },
    "network-simulation-master/network_simulator/WaitList.py": {
        "WaitList.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wait_list": [
                    "List[network_simulator.Patient.Patient]"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "WaitList.get_prioritized_patients": {
            "name": "get_prioritized_patients",
            "location": 36,
            "return": [
                "List[network_simulator.Patient.Patient]"
            ],
            "arguments": {
                "self": [],
                "organ": [
                    "network_simulator.Organ.Organ"
                ]
            }
        },
        "WaitList.add_patient": {
            "name": "add_patient",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patient": [
                    "network_simulator.Patient.Patient"
                ]
            }
        },
        "WaitList.add_patients": {
            "name": "add_patients",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patients": [
                    "List[network_simulator.Patient.Patient]"
                ]
            }
        },
        "WaitList.remove_patient": {
            "name": "remove_patient",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patient": [
                    "network_simulator.Patient.Patient"
                ]
            }
        },
        "WaitList.__str__": {
            "name": "__str__",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "network-simulation-master/network_simulator/__init__.py": {},
    "network-simulation-master/tests/test_blood_type.py": {
        "test_is_compatible_donor": {
            "name": "test_is_compatible_donor",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_compatible_recipient": {
            "name": "test_is_compatible_recipient",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test__eq__": {
            "name": "test__eq__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test__ne__": {
            "name": "test__ne__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "network-simulation-master/tests/test_connectivity_checker.py": {
        "test_is_connected": {
            "name": "test_is_connected",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_depth_first_search": {
            "name": "test_depth_first_search",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_breadth_first_search": {
            "name": "test_breadth_first_search",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "network-simulation-master/tests/test_dijkstra.py": {
        "test_dijkstra": {
            "name": "test_dijkstra",
            "location": 5,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_minimum_unvisited_distance": {
            "name": "test_minimum_unvisited_distance",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_shortest_path": {
            "name": "test_shortest_path",
            "location": 44,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_all_shortest_paths": {
            "name": "test_all_shortest_paths",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "network-simulation-master/tests/test_graph_builder.py": {
        "test_generate_random_adjacency_dict": {
            "name": "test_generate_random_adjacency_dict",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generate_random_network": {
            "name": "test_generate_random_network",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "network-simulation-master/tests/test_graph_converter.py": {
        "test_graph_converter": {
            "name": "test_graph_converter",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "network-simulation-master/tests/test_network.py": {
        "test_add_node": {
            "name": "test_add_node",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_node": {
            "name": "test_remove_node",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_edge": {
            "name": "test_add_edge",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_edge": {
            "name": "test_remove_edge",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mark_node_inactive": {
            "name": "test_mark_node_inactive",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mark_node_active": {
            "name": "test_mark_node_active",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mark_edge_inactive": {
            "name": "test_mark_edge_inactive",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mark_edge_active": {
            "name": "test_mark_edge_active",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nodes": {
            "name": "test_nodes",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "network-simulation-master/tests/test_node.py": {
        "test_is_adjacent": {
            "name": "test_is_adjacent",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_adjacents": {
            "name": "test_get_adjacents",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_str": {
            "name": "test_str",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "network-simulation-master/tests/test_organ.py": {
        "test_move_organ": {
            "name": "test_move_organ",
            "location": 8,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_get_viability": {
            "name": "test_get_viability",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "network-simulation-master/tests/test_organ_allocator.py": {
        "test_allocate_organs": {
            "name": "test_allocate_organs",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_find_best_match": {
            "name": "test_find_best_match",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "network-simulation-master/tests/test_organ_generator.py": {
        "test_generate_organs": {
            "name": "test_generate_organs",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generate_organs_to_list": {
            "name": "test_generate_organs_to_list",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "network-simulation-master/tests/test_organ_list.py": {
        "test__init__": {
            "name": "test__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_organ": {
            "name": "test_add_organ",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_organs": {
            "name": "test_add_organs",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_organ": {
            "name": "test_remove_organ",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_empty_list": {
            "name": "test_empty_list",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "network-simulation-master/tests/test_patient.py": {
        "test__eq__": {
            "name": "test__eq__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test__ne__": {
            "name": "test__ne__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test__lt__": {
            "name": "test__lt__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_le__": {
            "name": "test_le__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test__gt__": {
            "name": "test__gt__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test__ge__": {
            "name": "test__ge__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "network-simulation-master/tests/test_patient_generator.py": {
        "test_generate_patients": {
            "name": "test_generate_patients",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generate_patients_to_list": {
            "name": "test_generate_patients_to_list",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "network-simulation-master/tests/test_subnetwork_generator.py": {
        "test_generate_subnetwork": {
            "name": "test_generate_subnetwork",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "network-simulation-master/tests/test_wait_list.py": {
        "test__init__": {
            "name": "test__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_prioritized_patients": {
            "name": "test_get_prioritized_patients",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_patient": {
            "name": "test_add_patient",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_patients": {
            "name": "test_add_patients",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_patient": {
            "name": "test_remove_patient",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "network-simulation-master/tests/__init__.py": {}
}
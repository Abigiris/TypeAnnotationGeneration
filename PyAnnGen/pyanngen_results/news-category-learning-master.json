{
    "news-category-learning-master/main.py": {},
    "news-category-learning-master/ncl/settings.py": {},
    "news-category-learning-master/ncl/utils.py": {
        "pickle_load": {
            "name": "pickle_load",
            "location": 9,
            "return": [
                "dict",
                "str",
                "Callable",
                "Dict[str, Any]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "pickle_dump": {
            "name": "pickle_dump",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "dumpdata": [
                    "Dict",
                    "Tuple[int]",
                    "List[bytes]",
                    "int"
                ],
                "filepath": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "extract_category": {
            "name": "extract_category",
            "location": 21,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "path": [
                    "str",
                    "int",
                    "Union[str,Path]"
                ]
            }
        },
        "find_and_load_ftp_files": {
            "name": "find_and_load_ftp_files",
            "location": 28,
            "return": [
                "Dict[(Any, List[Dict[(str, str)]])]"
            ],
            "arguments": {}
        },
        "find_and_load_token_files": {
            "name": "find_and_load_token_files",
            "location": 68,
            "return": [
                "Generator[(Tuple[(str, List[str])], Any, None)]"
            ],
            "arguments": {}
        },
        "find_and_load_news": {
            "name": "find_and_load_news",
            "location": 96,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {}
        },
        "find_and_load_ftp_files.find_ftp": {
            "name": "find_ftp",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "line": []
            }
        },
        "find_and_load_token_files.find_ftp": {
            "name": "find_ftp",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        }
    },
    "news-category-learning-master/ncl/__init__.py": {},
    "news-category-learning-master/ncl/learning/dlnn_keras.py": {},
    "news-category-learning-master/ncl/learning/double_layer_nn.py": {
        "DoubleLayerNetwork.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "learning_rate": [
                    "int",
                    "Optional[int]",
                    "None",
                    "bool"
                ],
                "num_units1": [
                    "int",
                    "Optional[int]",
                    "None",
                    "bool"
                ],
                "num_units2": [
                    "int",
                    "Optional[int]",
                    "None",
                    "bool"
                ],
                "num_units3": [
                    "int",
                    "Optional[int]",
                    "None",
                    "bool"
                ],
                "num_units4": [
                    "int",
                    "Optional[int]",
                    "None",
                    "bool"
                ],
                "vec_dim": [
                    "int",
                    "Optional[int]",
                    "None",
                    "bool"
                ],
                "num_categories": [
                    "int",
                    "Optional[int]",
                    "None",
                    "bool"
                ],
                "logfile": [
                    "str",
                    "bool",
                    "List"
                ]
            }
        },
        "DoubleLayerNetwork.prepare_model": {
            "name": "prepare_model",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "learning_rate": [
                    "int",
                    "str",
                    "bool"
                ],
                "num_units1": [
                    "bool",
                    "float",
                    "Union[int,None]",
                    "Dict",
                    "None",
                    "Optional[Dict[str,tensorflow.Tensor]]",
                    "Dict[str,tensorflow.Tensor]"
                ],
                "num_units2": [
                    "str",
                    "bool",
                    "float"
                ],
                "num_units3": [
                    "str",
                    "bool",
                    "float"
                ],
                "num_units4": [
                    "str",
                    "bool",
                    "float"
                ],
                "vec_dim": [
                    "Union[None,float,int]",
                    "float",
                    "None",
                    "Optional[List[int]]",
                    "int",
                    "List[int]"
                ],
                "num_categories": [
                    "int",
                    "Optional[int]",
                    "Dict",
                    "float",
                    "None"
                ]
            }
        },
        "DoubleLayerNetwork.prepare_session": {
            "name": "prepare_session",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logfile": [
                    "Dict[str,Any]",
                    "Exception"
                ]
            }
        }
    },
    "news-category-learning-master/ncl/learning/task.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "news-category-learning-master/ncl/learning/__init__.py": {},
    "news-category-learning-master/ncl/old/__init__.py": {},
    "news-category-learning-master/ncl/old/scraping/fetch.py": {
        "fetch_news": {
            "name": "fetch_news",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "rss_dic": [],
                "time": [],
                "filetype": []
            }
        },
        "scrape": {
            "name": "scrape",
            "location": 20,
            "return": [
                "Dict[(Any, List[Dict[(str, Any)]])]"
            ],
            "arguments": {
                "rss_dic": [],
                "time": [],
                "oneline": [
                    "bool"
                ]
            }
        },
        "write_news_file": {
            "name": "write_news_file",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [],
                "chunks": [],
                "filetype": []
            }
        },
        "main": {
            "name": "main",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "filetype": [],
                "time": []
            }
        }
    },
    "news-category-learning-master/ncl/old/scraping/nikkankogyo.py": {
        "main": {
            "name": "main",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "NikkanKogyoScraper.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NikkanKogyoScraper.extract_category_title_and_content": {
            "name": "extract_category_title_and_content",
            "location": 13,
            "return": [
                "Tuple[(Any, Any, str)]"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "NikkanKogyoScraper.find_main_topnews_link": {
            "name": "find_main_topnews_link",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NikkanKogyoScraper.extract_links": {
            "name": "extract_links",
            "location": 33,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "link_ml": [],
                "free": [
                    "bool"
                ],
                "limited": [
                    "bool"
                ]
            }
        },
        "NikkanKogyoScraper.find_topnews_links": {
            "name": "find_topnews_links",
            "location": 46,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "free": [
                    "bool"
                ],
                "limited": [
                    "bool"
                ]
            }
        },
        "NikkanKogyoScraper.find_genre_news_links": {
            "name": "find_genre_news_links",
            "location": 54,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "free": [
                    "bool"
                ],
                "limited": [
                    "bool"
                ]
            }
        },
        "NikkanKogyoScraper.scrape_headline_news": {
            "name": "scrape_headline_news",
            "location": 68,
            "return": [
                "List[Tuple[(Any, Any, str)]]"
            ],
            "arguments": {
                "self": [],
                "free": [
                    "bool"
                ],
                "limited": [
                    "bool"
                ]
            }
        },
        "NikkanKogyoScraper.scrape_all_toppage_news": {
            "name": "scrape_all_toppage_news",
            "location": 78,
            "return": [
                "List[Tuple[(Any, Any, str)]]"
            ],
            "arguments": {
                "self": [],
                "free": [
                    "bool"
                ],
                "limited": [
                    "bool"
                ]
            }
        }
    },
    "news-category-learning-master/ncl/old/scraping/yahoonews.py": {
        "YahooNewsScraper.read_manuscript": {
            "name": "read_manuscript",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "news_url": [],
                "oneline": [
                    "bool"
                ]
            }
        },
        "YahooNewsScraper.is_old_news": {
            "name": "is_old_news",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pubdate_str": [],
                "specified_date": []
            }
        },
        "YahooNewsScraper.scrape_news": {
            "name": "scrape_news",
            "location": 50,
            "return": [
                "Dict[(Any, List[Dict[(str, Any)]])]"
            ],
            "arguments": {
                "self": [],
                "rss_url": [],
                "sleep": [
                    "int"
                ],
                "date": [
                    "None"
                ],
                "oneline": [
                    "bool"
                ]
            }
        },
        "YahooRSSScraper.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooRSSScraper.scrape_jp_newslist": {
            "name": "scrape_jp_newslist",
            "location": 106,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooRSSScraper.scrape_world_newslist": {
            "name": "scrape_world_newslist",
            "location": 109,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooRSSScraper.scrape_economic_newslist": {
            "name": "scrape_economic_newslist",
            "location": 112,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooRSSScraper.scrape_entertaiment_newslist": {
            "name": "scrape_entertaiment_newslist",
            "location": 115,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooRSSScraper.scrape_sports_newslist": {
            "name": "scrape_sports_newslist",
            "location": 118,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooRSSScraper.scrape_it_science_newslist": {
            "name": "scrape_it_science_newslist",
            "location": 121,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooRSSScraper.scrape_life_newslist": {
            "name": "scrape_life_newslist",
            "location": 124,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooRSSScraper.scrape_jplocal_newslist": {
            "name": "scrape_jplocal_newslist",
            "location": 127,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooRSSScraper.scrape_all_newslist": {
            "name": "scrape_all_newslist",
            "location": 130,
            "return": [
                "Dict[(bs4.element.PageElement, Dict[(Any, Optional[Union[(str, List[str])]])])]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "news-category-learning-master/ncl/old/scraping/__init__.py": {},
    "news-category-learning-master/ncl/tests/test_learning_data.py": {
        "TestTokenUID.test_construct1": {
            "name": "test_construct1",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenUID.test_construct2": {
            "name": "test_construct2",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenUID.test_dump_and_load": {
            "name": "test_dump_and_load",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "news-category-learning-master/ncl/tests/__init__.py": {},
    "news-category-learning-master/ncl/tokenizer/news_tokenizer.py": {
        "make_tokenized_news": {
            "name": "make_tokenized_news",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ftp_makedirs_cwd": {
            "name": "ftp_makedirs_cwd",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "ftp": [],
                "path": [],
                "first_call": [
                    "bool"
                ]
            }
        },
        "read_tokenized_news": {
            "name": "read_tokenized_news",
            "location": 109,
            "return": [
                "Generator[(Tuple[(Any, List[str])], Any, None)]"
            ],
            "arguments": {}
        },
        "YahooNewsTokenizer.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooNewsTokenizer.sanitize": {
            "name": "sanitize",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "manu": []
            }
        },
        "YahooNewsTokenizer.tokenize": {
            "name": "tokenize",
            "location": 36,
            "return": [
                "Optional[list]"
            ],
            "arguments": {
                "self": [],
                "manuscript": []
            }
        }
    },
    "news-category-learning-master/ncl/tokenizer/__init__.py": {},
    "news-category-learning-master/ncl/vectorize/tfidf_vectorizer.py": {
        "tfidf": {
            "name": "tfidf",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "meta": [],
                "token_counter": []
            }
        },
        "main": {
            "name": "main",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Metadata.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Metadata.build": {
            "name": "build",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "min_token_len": []
            }
        },
        "Metadata.update_category_dic": {
            "name": "update_category_dic",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Metadata.update_token_dics": {
            "name": "update_token_dics",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token_counter": []
            }
        },
        "Metadata.update_idf": {
            "name": "update_idf",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Metadata.__idf": {
            "name": "__idf",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "docids": []
            }
        },
        "PcaTfidfVectorizer.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "meta": []
            }
        },
        "PcaTfidfVectorizer.incremental_fit": {
            "name": "incremental_fit",
            "location": 88,
            "return": [
                "IncrementalPCA"
            ],
            "arguments": {
                "self": [],
                "tokenized_news": []
            }
        },
        "PcaTfidfVectorizer.vectorize": {
            "name": "vectorize",
            "location": 103,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "tokenized_news": []
            }
        }
    },
    "news-category-learning-master/ncl/vectorize/w2v_vectorizer.py": {
        "sentences": {
            "name": "sentences",
            "location": 9,
            "return": [
                "list"
            ],
            "arguments": {
                "wakati_list": []
            }
        },
        "divide_data": {
            "name": "divide_data",
            "location": 14,
            "return": [
                "Tuple[(List[Tuple[(str, List[str])]], List[Tuple[(str, List[str])]])]"
            ],
            "arguments": {
                "divide_ratio": []
            }
        },
        "accuracy": {
            "name": "accuracy",
            "location": 22,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "model": [],
                "wakati_list": []
            }
        },
        "validate": {
            "name": "validate",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "training_ratio": []
            }
        },
        "main": {
            "name": "main",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "validation": [
                    "bool"
                ]
            }
        }
    },
    "news-category-learning-master/ncl/vectorize/__init__.py": {}
}
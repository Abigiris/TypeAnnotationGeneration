{
    "nlp-toolkit-master/setup.py": {},
    "nlp-toolkit-master/nlp_toolkit/__init__.py": {},
    "nlp-toolkit-master/nlp_toolkit/tools/farasa.py": {
        "Farasa.__new__": {
            "name": "__new__",
            "location": 49,
            "return": [
                "str",
                "bool",
                "IO[str]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Type",
                    "Exception"
                ],
                "singelton": [
                    "bool",
                    "Type",
                    "str",
                    "int",
                    "Callable[None,None]",
                    "Type[T]",
                    "Callable[[None],None]"
                ]
            }
        },
        "Farasa.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "singelton": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "Farasa.tag_pos": {
            "name": "tag_pos",
            "location": 87,
            "return": [
                "List[tuple]",
                "Dict",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Farasa.merge_iffix": {
            "name": "merge_iffix",
            "location": 107,
            "return": [
                "List[str]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "List[str]",
                    "str",
                    "Set[str]",
                    "List[Tuple[str, str]]",
                    "List[Tuple[int, int, Any]]"
                ]
            }
        },
        "Farasa.filter_pos": {
            "name": "filter_pos",
            "location": 125,
            "return": [
                "str",
                "Dict[str,int]",
                "bool",
                "Generator",
                "float"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "Type[BaseException]",
                    "Type"
                ],
                "parts_of_speech_to_keep": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Farasa.lemmetize": {
            "name": "lemmetize",
            "location": 149,
            "return": [
                "str",
                "int",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Farasa.segment": {
            "name": "segment",
            "location": 160,
            "return": [
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "bool",
                "logging.LogRecord"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Farasa._get_named_entities": {
            "name": "_get_named_entities",
            "location": 173,
            "return": [
                "str",
                "Optional[str]",
                "Callable[[], Any]",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "lemmatize": [
                    "bool",
                    "str"
                ]
            }
        },
        "Farasa.get_named_entities": {
            "name": "get_named_entities",
            "location": 216,
            "return": [
                "str",
                "bool",
                "Callable[..., str]",
                "float",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "lemmatize": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Farasa.diacritize": {
            "name": "diacritize",
            "location": 228,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "keep_original_diacritics": [
                    "str",
                    "bool"
                ]
            }
        },
        "Farasa.__launch_java_gateway": {
            "name": "__launch_java_gateway",
            "location": 239,
            "return": [
                "JavaGateway",
                "recidiviz.utils.regions.Region",
                "str",
                "int",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "bool",
                    "Type[object]",
                    "Type"
                ]
            }
        }
    },
    "nlp-toolkit-master/nlp_toolkit/tools/similarity.py": {
        "WMDSimilarityClustering.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stop_words": [
                    "int",
                    "float",
                    "bool"
                ],
                "word_embeddings": [
                    "int",
                    "float"
                ]
            }
        },
        "WMDSimilarityClustering.preprocess_document": {
            "name": "preprocess_document",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "str",
                    "int",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "WMDSimilarityClustering.preprocess_documents": {
            "name": "preprocess_documents",
            "location": 52,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "documents": [
                    "List[int]",
                    "List[str]",
                    "list",
                    "int",
                    "Sequence[T]"
                ]
            }
        },
        "WMDSimilarityClustering.tokenize": {
            "name": "tokenize",
            "location": 70,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "int",
                    "List[str]",
                    "List[int]",
                    "List"
                ]
            }
        },
        "WMDSimilarityClustering.fit": {
            "name": "fit",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "documents": [
                    "Dict"
                ],
                "preprocess": [
                    "Dict"
                ]
            }
        }
    },
    "nlp-toolkit-master/nlp_toolkit/tools/summarization.py": {
        "summarize": {
            "name": "summarize",
            "location": 16,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "ratio": [
                    "str"
                ]
            }
        },
        "extract_keywords": {
            "name": "extract_keywords",
            "location": 35,
            "return": [
                "List",
                "int",
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Dict",
                    "bool"
                ],
                "pos_filter": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[int]"
                ],
                "top_n": [
                    "int",
                    "None",
                    "float",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "extract_entities": {
            "name": "extract_entities",
            "location": 52,
            "return": [
                "List",
                "Optional[str]",
                "str",
                "Callable"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "nlp-toolkit-master/nlp_toolkit/tools/topic_model.py": {
        "load_topic_model": {
            "name": "load_topic_model",
            "location": 29,
            "return": [
                "GPy.models.GPRegression",
                "allennlp.models.model.Model"
            ],
            "arguments": {
                "model_id": [
                    "str",
                    "int"
                ]
            }
        },
        "infer_topic": {
            "name": "infer_topic",
            "location": 49,
            "return": [
                "str",
                "float",
                "Dict[str, Dict[str, int]]",
                "bool"
            ],
            "arguments": {
                "model_id": [
                    "int",
                    "str"
                ],
                "document": [
                    "int",
                    "str"
                ]
            }
        },
        "TopicModel.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos_to_use": [
                    "bool",
                    "float",
                    "Optional[dict]",
                    "Tuple[str]",
                    "Dict",
                    "str",
                    "None"
                ],
                "stop_words": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None",
                    "Iterator[str]",
                    "Iterator"
                ],
                "min_df": [
                    "int",
                    "bool",
                    "Optional[dict]",
                    "float",
                    "Tuple[str]",
                    "str"
                ],
                "max_df": [
                    "float",
                    "Optional[int]",
                    "int",
                    "Tuple[int,int]"
                ],
                "num_workers": [
                    "int",
                    "bool",
                    "List[float]",
                    "Callable",
                    "float"
                ]
            }
        },
        "TopicModel._init_pool": {
            "name": "_init_pool",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TopicModel.preprocess_document": {
            "name": "preprocess_document",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "str",
                    "int",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "TopicModel._unit_of_work": {
            "name": "_unit_of_work",
            "location": 129,
            "return": [
                "Optional[db.models.Taxon]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "pos_to_use": [
                    "int",
                    "float",
                    "bool"
                ],
                "document": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TopicModel.preprocess_documents": {
            "name": "preprocess_documents",
            "location": 143,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "documents": [
                    "List[int]",
                    "List[str]",
                    "src.models.Population",
                    "list",
                    "int",
                    "Sequence[T]"
                ]
            }
        },
        "TopicModel.tokenize": {
            "name": "tokenize",
            "location": 173,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "int",
                    "List[str]",
                    "List[int]",
                    "List",
                    "src.models.Population"
                ]
            }
        },
        "TopicModel.create_trigrams": {
            "name": "create_trigrams",
            "location": 184,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "str",
                    "List[str]",
                    "ByteString",
                    "Tuple[str]",
                    "List[list[str]]",
                    "zerver.models.Realm",
                    "List[List[str]]"
                ]
            }
        },
        "TopicModel.build_vocab": {
            "name": "build_vocab",
            "location": 196,
            "return": [
                "Tuple[(list, Any)]"
            ],
            "arguments": {
                "self": [],
                "documents_tokens": [
                    "List[List[str]]",
                    "str",
                    "bytes",
                    "int",
                    "Optional[Tuple[int, ...]]"
                ]
            }
        },
        "TopicModel.fit": {
            "name": "fit",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "documents": [
                    "bool",
                    "str",
                    "Callable"
                ],
                "preprocess": [
                    "Optional[Callable[...,Any]]",
                    "Callable[...,Any]",
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "passes": [
                    "int",
                    "List[str]",
                    "Optional[int]",
                    "Hashable",
                    "None"
                ],
                "random_state": [
                    "int",
                    "List[str]",
                    "Optional[int]",
                    "Hashable",
                    "None"
                ],
                "num_topics": [
                    "int",
                    "List[str]",
                    "Optional[int]",
                    "Hashable",
                    "None"
                ],
                "chunksize": [
                    "int",
                    "Optional[int]",
                    "List[str]",
                    "Hashable"
                ]
            }
        },
        "TopicModel.predict": {
            "name": "predict",
            "location": 268,
            "return": [
                "int",
                "Set[cmk.utils.type_defs.HostName]",
                "bytes",
                "dict",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int",
                    "None",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "topics_map": [
                    "Tuple[float,float,float,float]",
                    "float",
                    "Tuple[Union[float,float,float,float]]",
                    "bytes",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "None"
                ],
                "num_topics": [
                    "bool",
                    "Callable",
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        },
        "TopicModel.load": {
            "name": "load",
            "location": 301,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "TopicModel.save": {
            "name": "save",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "nlp-toolkit-master/nlp_toolkit/tools/utils.py": {
        "remove_extra_spaces": {
            "name": "remove_extra_spaces",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "text": []
            }
        },
        "_preprocess_arabic_text": {
            "name": "_preprocess_arabic_text",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [],
                "remove_non_arabic": [
                    "bool"
                ],
                "remove_punctuation": [
                    "bool"
                ],
                "remove_numbers": [
                    "bool"
                ],
                "remove_emails_urls_html": [
                    "bool"
                ],
                "remove_hashtags_mentions": [
                    "bool"
                ]
            }
        },
        "preprorcess_arabic_text": {
            "name": "preprorcess_arabic_text",
            "location": 128,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "setup_logger": {
            "name": "setup_logger",
            "location": 145,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "name": [],
                "level": []
            }
        },
        "load_stop_words": {
            "name": "load_stop_words",
            "location": 171,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "filename": []
            }
        },
        "preprorcess_arabic_text.wrapper": {
            "name": "wrapper",
            "location": 131,
            "return": [],
            "arguments": {
                "wrapped": [],
                "instance": [],
                "args": [],
                "kwargs": []
            }
        }
    },
    "nlp-toolkit-master/nlp_toolkit/tools/word_embedding.py": {
        "WordEmbedding.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Dict[str,int]",
                    "chalice.deploy.models.SQSEventSource"
                ]
            }
        },
        "WordEmbedding.get_word_vector": {
            "name": "get_word_vector",
            "location": 21,
            "return": [
                "bool",
                "Optional[str]",
                "tuple",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "Exception",
                    "str",
                    "Dict[str,Any]",
                    "djmoney.contrib.exchange.models.Rate",
                    "zerver.models.Realm",
                    "tartare.core.models.Job"
                ]
            }
        },
        "WordEmbedding.create_ngrams": {
            "name": "create_ngrams",
            "location": 29,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "List[str]",
                    "str",
                    "List[List[str]]",
                    "Sequence[Sequence[str]]",
                    "List[list[str]]",
                    "Sequence[str]",
                    "bytes"
                ],
                "nrange": [
                    "Tuple[int]",
                    "Tuple[int,int]",
                    "str",
                    "int",
                    "Dict[str,int]",
                    "List[int]"
                ]
            }
        },
        "WordEmbedding.create_valid_trigrams": {
            "name": "create_valid_trigrams",
            "location": 40,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "int",
                    "str",
                    "Container[str]",
                    "Container"
                ]
            }
        },
        "WordEmbedding.encode_document": {
            "name": "encode_document",
            "location": 62,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "WordEmbedding.get_distance": {
            "name": "get_distance",
            "location": 72,
            "return": [
                "int",
                "zerver.models.Realm",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "document1": [
                    "str",
                    "bool"
                ],
                "document2": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "nlp-toolkit-master/nlp_toolkit/tools/__init__.py": {}
}
{
    "nlp_experiments-master/src/extractors.py": {
        "email_extractor": {
            "name": "email_extractor",
            "location": 11,
            "return": [
                "Iterable[Match]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "nlp_experiments-master/src/main_argparse.py": {
        "create_json_samples": {
            "name": "create_json_samples",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "nlp_experiments-master/src/preprocess_text.py": {
        "fix_text": {
            "name": "fix_text",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "create_ngrams": {
            "name": "create_ngrams",
            "location": 12,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "tokens": [
                    "Union[(str, Iterable[str])]"
                ],
                "min_len": [
                    "int"
                ],
                "max_len": [
                    "int"
                ]
            }
        },
        "create_deque_ngrams": {
            "name": "create_deque_ngrams",
            "location": 40,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "tokens": [
                    "List[str]",
                    "list[str]",
                    "str",
                    "MutableMapping[Any, Any]",
                    "typing.MutableMapping"
                ],
                "min_len": [
                    "int"
                ],
                "max_len": [
                    "int"
                ]
            }
        },
        "create_gen_ngrams": {
            "name": "create_gen_ngrams",
            "location": 56,
            "return": [
                "list"
            ],
            "arguments": {
                "tokens": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "min_len": [
                    "int"
                ],
                "max_len": [
                    "int"
                ]
            }
        },
        "ngrams": {
            "name": "ngrams",
            "location": 68,
            "return": [
                "Generator[(tuple, Any, None)]"
            ],
            "arguments": {
                "sequence": [
                    "int",
                    "Tuple[int, int, int]",
                    "str",
                    "tuple[typing.Union[int,int,int]]",
                    "List[int]",
                    "list[int]"
                ],
                "min_len": [
                    "int",
                    "List[int]"
                ],
                "max_len": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "ngrams_zip": {
            "name": "ngrams_zip",
            "location": 76,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "int",
                    "float"
                ],
                "n": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "nlp_experiments-master/src/text_classification.py": {
        "run_batch_gridsearch": {
            "name": "run_batch_gridsearch",
            "location": 16,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "input_column": [
                    "Iterable[str]"
                ],
                "labels": [
                    "Iterable[Union[(int, str)]]"
                ]
            }
        },
        "make_classifier_pipeline": {
            "name": "make_classifier_pipeline",
            "location": 50,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "input_column": [
                    "Iterable[str]"
                ],
                "labels": [
                    "Iterable[Union[(int, str)]]"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "fit_and_save_estimator": {
            "name": "fit_and_save_estimator",
            "location": 70,
            "return": [
                "str",
                "Dict[str, int]",
                "float"
            ],
            "arguments": {
                "gs": [
                    "typing.Iterable[typing.Union[int,str]]",
                    "int",
                    "sklearn.model_selection.GridSearchCV",
                    "typing.Callable[, ]",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "List[Tuple[pathlib.Path, str]]",
                    "Callable"
                ],
                "input_column": [
                    "Iterable[str]"
                ],
                "labels": [
                    "Iterable[Union[(int, str)]]"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "load_pipeline_pkl": {
            "name": "load_pipeline_pkl",
            "location": 98,
            "return": [
                "None",
                "str",
                "Optional[\"permissions_doc\"]",
                "bytes",
                "dict"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "save_new_examples_csv": {
            "name": "save_new_examples_csv",
            "location": 119,
            "return": [
                "dict",
                "str",
                "pandas.DataFrame",
                "Callable",
                "Optional[float]",
                "bytes"
            ],
            "arguments": {
                "df": [
                    "str",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "preds": [
                    "Iterable[int]"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "gs_linearsvc_count": {
            "name": "gs_linearsvc_count",
            "location": 146,
            "return": [
                "GridSearchCV",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_column": [
                    "Iterable[str]"
                ],
                "labels": [
                    "Iterable[Union[(int, str)]]"
                ]
            }
        },
        "gs_linearsvc_tfidf": {
            "name": "gs_linearsvc_tfidf",
            "location": 166,
            "return": [
                "GridSearchCV",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_column": [
                    "Iterable[str]"
                ],
                "labels": [
                    "Iterable[Union[(int, str)]]"
                ]
            }
        },
        "gs_multinb_tfidf": {
            "name": "gs_multinb_tfidf",
            "location": 185,
            "return": [
                "GridSearchCV",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_column": [
                    "Iterable[str]"
                ],
                "labels": [
                    "Iterable[Union[(int, str)]]"
                ]
            }
        },
        "gs_multinb_count": {
            "name": "gs_multinb_count",
            "location": 203,
            "return": [
                "GridSearchCV",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_column": [
                    "Iterable[str]"
                ],
                "labels": [
                    "Iterable[Union[(int, str)]]"
                ]
            }
        }
    },
    "nlp_experiments-master/src/text_explore.py": {
        "get_vocab_counts": {
            "name": "get_vocab_counts",
            "location": 8,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "texts": [
                    "Collection"
                ],
                "max_ngrams": [
                    "int"
                ]
            }
        },
        "get_fuzzy_matches": {
            "name": "get_fuzzy_matches",
            "location": 28,
            "return": [
                "List[Tuple[(str, int)]]"
            ],
            "arguments": {
                "search_term": [
                    "str"
                ],
                "term_counts": [
                    "Dict[(str, int)]"
                ],
                "cutoff_score": [
                    "int"
                ]
            }
        },
        "drop_ngrams_with_keyword": {
            "name": "drop_ngrams_with_keyword",
            "location": 46,
            "return": [
                "Collection"
            ],
            "arguments": {
                "texts": [
                    "Collection[str]"
                ],
                "term": [
                    "str"
                ]
            }
        }
    },
    "nlp_experiments-master/src/vectorizer_examples.py": {
        "get_balanced_sample": {
            "name": "get_balanced_sample",
            "location": 18,
            "return": [
                "str",
                "bytes",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "tfidf_standard": {
            "name": "tfidf_standard",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "tfidf_pipeline": {
            "name": "tfidf_pipeline",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "load_pretrained_ft_model": {
            "name": "load_pretrained_ft_model",
            "location": 67,
            "return": [
                "GPy.models.GPRegression",
                "str",
                "allennlp.models.model.Model",
                "dict[, ]",
                "list[str]"
            ],
            "arguments": {
                "ft_model": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "doc_to_vector": {
            "name": "doc_to_vector",
            "location": 85,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "corpus": [
                    "str",
                    "list[]",
                    "bool",
                    "list"
                ],
                "model": [
                    "str",
                    "audiopyle.lib.models.resulAnalysisRequest"
                ]
            }
        }
    },
    "nlp_experiments-master/src/__init__.py": {},
    "nlp_experiments-master/src/conll2002/conll2002.py": {
        "parse_conll2002": {
            "name": "parse_conll2002",
            "location": 9,
            "return": [
                "Token"
            ],
            "arguments": {
                "max_items": [
                    "int",
                    "List[AnyStr]",
                    "float"
                ]
            }
        },
        "prep_sentences": {
            "name": "prep_sentences",
            "location": 21,
            "return": [
                "dict"
            ],
            "arguments": {
                "max_items": [
                    "int",
                    "List[AnyStr]",
                    "float"
                ]
            }
        }
    },
    "nlp_experiments-master/src/dataset_readers/amazon_review_reader.py": {
        "AmazonReviewReader.convert_document": {
            "name": "convert_document",
            "location": 10,
            "return": [
                "NamedTuple"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "nlp_experiments-master/src/dataset_readers/atticus_contract_reader.py": {
        "convert_bool": {
            "name": "convert_bool",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "read_pdfs": {
            "name": "read_pdfs",
            "location": 84,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {}
        },
        "AtticusIndividualClauseReader.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "document_location": [
                    "str"
                ],
                "document_extension": [
                    "str"
                ],
                "atticus_zip": [
                    "str"
                ]
            }
        },
        "AtticusIndividualClauseReader.convert_document": {
            "name": "convert_document",
            "location": 28,
            "return": [
                "NamedTuple"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "pathlib.Path"
                ]
            }
        },
        "AtticusIndividualClauseReader.convert_data_types": {
            "name": "convert_data_types",
            "location": 42,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "dict"
                ]
            }
        },
        "AtticusIndividualClauseReader.download_datafile": {
            "name": "download_datafile",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtticusIndividualClauseReader.extract_datafile": {
            "name": "extract_datafile",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nlp_experiments-master/src/dataset_readers/dataset_reader.py": {
        "DatasetReader.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "document_location": [
                    "str"
                ],
                "document_extension": [
                    "str"
                ],
                "date_format": [
                    "Optional[str]"
                ]
            }
        },
        "DatasetReader.convert_document": {
            "name": "convert_document",
            "location": 26,
            "return": [
                "NamedTuple"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "pathlib.Path"
                ]
            }
        },
        "DatasetReader.data_iterator": {
            "name": "data_iterator",
            "location": 37,
            "return": [
                "NamedTuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetReader.partial_strptime": {
            "name": "partial_strptime",
            "location": 43,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "date_value": [
                    "str"
                ]
            }
        },
        "DatasetReader.__iter__": {
            "name": "__iter__",
            "location": 54,
            "return": [
                "DatasetReader"
            ],
            "arguments": {
                "self": [
                    "_TDatasetReader"
                ]
            }
        },
        "DatasetReader.__next__": {
            "name": "__next__",
            "location": 62,
            "return": [
                "NamedTuple"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nlp_experiments-master/src/dataset_readers/russian_tweets_reader.py": {
        "RussianTweetReader.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "document_location": [
                    "str"
                ],
                "document_extension": [
                    "str"
                ],
                "date_format": [
                    "str"
                ]
            }
        },
        "RussianTweetReader.convert_document": {
            "name": "convert_document",
            "location": 23,
            "return": [
                "data_structures.russian_tweet_data.RussianTweetData",
                "typing.Generator[RussianTweetData]"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "pathlib.Path"
                ]
            }
        },
        "RussianTweetReader.convert_data_types": {
            "name": "convert_data_types",
            "location": 42,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "tweet_data": [
                    "dict"
                ]
            }
        }
    },
    "nlp_experiments-master/src/data_structures/amazon_book_review.py": {},
    "nlp_experiments-master/src/data_structures/atticus_project_data.py": {
        "AtticusIndividualClause.__eq__": {
            "name": "__eq__",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, float]",
                    "int",
                    "float"
                ]
            }
        },
        "AtticusIndividualClause.__ne__": {
            "name": "__ne__",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "dict",
                    "typing.AbstractSet",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        }
    },
    "nlp_experiments-master/src/data_structures/russian_tweet_data.py": {
        "RussianTweetData.__eq__": {
            "name": "__eq__",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, float]",
                    "int",
                    "float"
                ]
            }
        },
        "RussianTweetData.__ne__": {
            "name": "__ne__",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "dict",
                    "typing.AbstractSet",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        }
    },
    "nlp_experiments-master/src/db_models/tweet_orm.py": {
        "tweets_to_db": {
            "name": "tweets_to_db",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TweetDoc.__eq__": {
            "name": "__eq__",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, float]",
                    "int",
                    "float"
                ]
            }
        },
        "TweetDoc.__ne__": {
            "name": "__ne__",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "dict",
                    "typing.AbstractSet",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "TweetDoc.__repr__": {
            "name": "__repr__",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nlp_experiments-master/src/elastic/elasticsearch_connection.py": {
        "create_word_vec_index": {
            "name": "create_word_vec_index",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nlp_experiments-master/src/OCR/uitspraak_ocr.py": {
        "ocr_document": {
            "name": "ocr_document",
            "location": 7,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "pdf_path": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "nlp_experiments-master/src/russian_tweets/russian_tweets_json.py": {
        "build_tweet_df": {
            "name": "build_tweet_df",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "filter_language": [
                    "str"
                ],
                "convert_dates": [
                    "bool"
                ]
            }
        },
        "make_json_samples": {
            "name": "make_json_samples",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "tuple[typing.Union[int,int]]",
                    "pandas.DataFrame",
                    "list[int]",
                    "list[]",
                    "Tuple[int, int]",
                    "int",
                    "numpy.ndarray",
                    "List[int]",
                    "list"
                ],
                "sample_size": [
                    "int"
                ]
            }
        },
        "load_json_data": {
            "name": "load_json_data",
            "location": 105,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "flatten_tweets": {
            "name": "flatten_tweets",
            "location": 117,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "build_tweet_df_from_json": {
            "name": "build_tweet_df_from_json",
            "location": 136,
            "return": [
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {}
        },
        "move_json_to_sql_db": {
            "name": "move_json_to_sql_db",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "dir_path": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "nlp_experiments-master/src/uitspraak_files/extract_from_xmls.py": {
        "parse_xmls": {
            "name": "parse_xmls",
            "location": 22,
            "return": [
                "Iterator[Dict[(str, Any)]]"
            ],
            "arguments": {
                "xml_dir": [
                    "pathlib.Path"
                ]
            }
        },
        "apply_doc_vector": {
            "name": "apply_doc_vector",
            "location": 96,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "text": [
                    "Dict[(str, Any)]"
                ],
                "model": [
                    "str",
                    "type",
                    "typing.Type",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "elem2dict": {
            "name": "elem2dict",
            "location": 102,
            "return": [
                "dict"
            ],
            "arguments": {
                "node": [
                    "dict"
                ]
            }
        }
    },
    "nlp_experiments-master/src/uitspraak_files/process_rechtspraak_zips.py": {
        "download_uitspraak_zip": {
            "name": "download_uitspraak_zip",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "chunk_size": [
                    "int"
                ]
            }
        },
        "extract_month_zips": {
            "name": "extract_month_zips",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "year": [
                    "str"
                ],
                "month": [
                    "str"
                ],
                "refetch": [
                    "bool"
                ]
            }
        },
        "extract_xml_files": {
            "name": "extract_xml_files",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "year": [
                    "str"
                ],
                "month": [
                    "typing.Text",
                    "str",
                    "pathlib.Path"
                ],
                "min_size": [
                    "int",
                    "float"
                ],
                "unlink": [
                    "bool"
                ]
            }
        },
        "download_pdf": {
            "name": "download_pdf",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "file_id": [
                    "str"
                ]
            }
        },
        "update_pdf_dir": {
            "name": "update_pdf_dir",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nlp_experiments-master/src/uitspraak_files/spacy_analysis.py": {
        "xml_docs": {
            "name": "xml_docs",
            "location": 10,
            "return": [
                "Generator[(str, None, None)]"
            ],
            "arguments": {}
        },
        "create_spacy_objects": {
            "name": "create_spacy_objects",
            "location": 24,
            "return": [
                "Generator[(Any, None, None)]"
            ],
            "arguments": {
                "texts": [
                    "Collection[str]"
                ]
            }
        }
    },
    "nlp_experiments-master/src/uitspraak_files/vector_model_helpers.py": {
        "joined_texts": {
            "name": "joined_texts",
            "location": 8,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {}
        },
        "train_fasttext": {
            "name": "train_fasttext",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nlp_experiments-master/src/utilities/reservoir_sampling.py": {
        "simple_reservoir": {
            "name": "simple_reservoir",
            "location": 10,
            "return": [
                "list"
            ],
            "arguments": {
                "sequence": [
                    "Iterator"
                ],
                "reservoir_size": [
                    "int"
                ]
            }
        },
        "optimized_reeservoir": {
            "name": "optimized_reeservoir",
            "location": 35,
            "return": [
                "list"
            ],
            "arguments": {
                "sequence": [
                    "Iterator"
                ],
                "reservoir_size": [
                    "int"
                ]
            }
        }
    },
    "nlp_experiments-master/src/vector_models/compare_ner.py": {
        "add_ner_predictions": {
            "name": "add_ner_predictions",
            "location": 15,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {}
        },
        "compare_predictions": {
            "name": "compare_predictions",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nlp_experiments-master/src/vector_models/fasttext_model.py": {
        "train_model": {
            "name": "train_model",
            "location": 18,
            "return": [
                "FastText",
                "allennlp.models.model.Model",
                "List[app.models.Question]",
                "app.models.Question"
            ],
            "arguments": {
                "sentences": [
                    "Collection[str]"
                ],
                "save_path": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "load_model": {
            "name": "load_model",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "load_path": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "create_training_sentences": {
            "name": "create_training_sentences",
            "location": 35,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "training_pages": [
                    "Iterator[str]"
                ]
            }
        },
        "vectorize_text": {
            "name": "vectorize_text",
            "location": 41,
            "return": [
                "int",
                "str",
                "limbic.emotion.models.LexiconLimbicModel"
            ],
            "arguments": {
                "page": [
                    "str"
                ],
                "ft_model": [
                    "str",
                    "bool"
                ]
            }
        },
        "generate_data": {
            "name": "generate_data",
            "location": 53,
            "return": [
                "Generator[(Dict[(str, Any)], Any, None)]"
            ],
            "arguments": {
                "pages": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "models.Model",
                    "Callable",
                    "int",
                    "bool"
                ],
                "ft_model": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "strip_tags": {
            "name": "strip_tags",
            "location": 62,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "html_pages": [
                    "Collection[str]"
                ]
            }
        },
        "bulk_index": {
            "name": "bulk_index",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "document_set": [
                    "dict",
                    "zam_repondeur.services.fetch.an.dossiers.models.DossierRef",
                    "str"
                ],
                "ft_model": [
                    "Callable[[], Any]",
                    "bool",
                    "typing.Callable[[], typing.Any]"
                ]
            }
        }
    },
    "nlp_experiments-master/tests/test_extractors.py": {
        "TestEmailExtraction.test_email_extractor": {
            "name": "test_email_extractor",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bool",
                    "typing.Sequence[int]",
                    "Sequence[int]",
                    "list[str]",
                    "Union[str, List[str]]",
                    "List[str]"
                ],
                "email": [
                    "str",
                    "bool",
                    "typing.Sequence[int]",
                    "Sequence[int]",
                    "list[str]",
                    "Union[str, List[str]]",
                    "List[str]"
                ],
                "expected": [
                    "str",
                    "bool",
                    "typing.Sequence[int]",
                    "Sequence[int]",
                    "list[str]",
                    "Union[str, List[str]]",
                    "List[str]"
                ]
            }
        }
    },
    "nlp_experiments-master/tests/__init__.py": {}
}
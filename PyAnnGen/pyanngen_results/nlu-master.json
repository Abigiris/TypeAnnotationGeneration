{
    "nlu-master/project1/model.py": {
        "load_embedding": {
            "name": "load_embedding",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "None",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "vocab": [
                    "Dict[str,dict[str,Any]]",
                    "str",
                    "bool",
                    "Dict[str,Dict[str,Any]]",
                    "int",
                    "zerver.models.UserProfile"
                ],
                "emb": [
                    "int",
                    "str",
                    "float"
                ],
                "path": [
                    "List",
                    "bool",
                    "str"
                ],
                "dim_embedding": [
                    "int",
                    "float",
                    "str"
                ],
                "vocab_size": [
                    "str",
                    "int",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "gen_expname": {
            "name": "gen_expname",
            "location": 525,
            "return": [
                "str"
            ],
            "arguments": {
                "expname": [
                    "float",
                    "int",
                    "str",
                    "None",
                    "datetime.timezone",
                    "Optional[datetime.tzinfo]"
                ]
            }
        },
        "expA": {
            "name": "expA",
            "location": 529,
            "return": [
                "Network",
                "float",
                "numpy.ndarray",
                "bytearray",
                "str",
                "List[int]"
            ],
            "arguments": {
                "checkpoint_path": [
                    "str"
                ]
            }
        },
        "expB": {
            "name": "expB",
            "location": 541,
            "return": [
                "Network",
                "float",
                "numpy.ndarray",
                "bytearray",
                "int",
                "List[int]"
            ],
            "arguments": {
                "checkpoint_path": [
                    "str"
                ]
            }
        },
        "expC": {
            "name": "expC",
            "location": 553,
            "return": [
                "Network",
                "float",
                "numpy.ndarray",
                "str",
                "bytearray",
                "List[int]",
                "int"
            ],
            "arguments": {
                "checkpoint_path": [
                    "str"
                ]
            }
        },
        "expD": {
            "name": "expD",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "checkpoint_path": [
                    "str",
                    "int",
                    "IO[bytes]",
                    "IO"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 581,
            "return": [
                "bytes",
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "missingdict.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_val": [
                    "int",
                    "None",
                    "Tuple",
                    "float",
                    "bool"
                ]
            }
        },
        "missingdict.__missing__": {
            "name": "__missing__",
            "location": 89,
            "return": [
                "list",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float,int]",
                    "float",
                    "int"
                ]
            }
        },
        "Dataset.read_lines": {
            "name": "read_lines",
            "location": 103,
            "return": [
                "Sequence[str]",
                "str",
                "Iterable[str]",
                "list",
                "Set[str]",
                "List[str]"
            ],
            "arguments": {
                "file": [
                    "str"
                ]
            }
        },
        "Dataset.generate_vocab": {
            "name": "generate_vocab",
            "location": 109,
            "return": [
                "missingdict",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "lines": [
                    "List[AnyStr]",
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "Dataset.encode_words": {
            "name": "encode_words",
            "location": 125,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "lines": [
                    "int",
                    "Union[int, float]",
                    "str"
                ],
                "vocab": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ],
                "padding_size": [
                    "int",
                    "float",
                    "Tuple[int,int]"
                ]
            }
        },
        "Dataset.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train_file": [
                    "int",
                    "str"
                ],
                "eval_file": [
                    "int",
                    "str"
                ],
                "continuation_file": [
                    "str",
                    "int",
                    "bytes"
                ],
                "test_file": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "embedding_file": [
                    "str",
                    "Container[str]",
                    "Container"
                ]
            }
        },
        "Dataset.read_data": {
            "name": "read_data",
            "location": 156,
            "return": [
                "int",
                "Final",
                "Dict[str,List[int]]",
                "Dict",
                "str",
                "Optional[float]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "Union[str,os.PathLike]"
                ]
            }
        },
        "Dataset.load_embeddings": {
            "name": "load_embeddings",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "Dict[str,str]",
                    "Optional[Dict[str,str]]",
                    "bool",
                    "None",
                    "str",
                    "flask_appbuilder.models.sqla.Model",
                    "Optional[libkol.Item]"
                ],
                "emb_matrix": [
                    "Dict[str,str]",
                    "Optional[Dict[str,str]]",
                    "bool",
                    "None",
                    "str",
                    "flask_appbuilder.models.sqla.Model",
                    "Optional[libkol.Item]"
                ],
                "dim_embedding": [
                    "Dict[str,str]",
                    "Optional[Dict[str,str]]",
                    "bool",
                    "None",
                    "str",
                    "flask_appbuilder.models.sqla.Model",
                    "Optional[libkol.Item]"
                ]
            }
        },
        "Dataset.batches_per_epoch_generator": {
            "name": "batches_per_epoch_generator",
            "location": 170,
            "return": [
                "typing.Generator[typing.Union[str,bytes,tuple[typing.Union[str,typing.Any]]]]"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "Dict",
                    "numpy.ndarray",
                    "bytes",
                    "None",
                    "Optional[dict]",
                    "Sequence[int]",
                    "int",
                    "tensorflow.Tensor",
                    "List[tuple[Union[int,int]]]",
                    "List[Tuple[int,int]]"
                ],
                "data": [
                    "Optional[numpy.ndarray]",
                    "Dict[str,Any]",
                    "None",
                    "Mapping",
                    "Dict",
                    "Optional[Tuple[int,int]]",
                    "Tuple[Union[int,int]]"
                ],
                "shuffle": [
                    "bool",
                    "Iterable[int]",
                    "Iterator[int]",
                    "Iterable[bool]"
                ]
            }
        },
        "NetworkUtils.trainable_zero_state": {
            "name": "trainable_zero_state",
            "location": 190,
            "return": [
                "Tuple",
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "batch_size": [
                    "int",
                    "Tuple[Union[int,int]]",
                    "numpy.ndarray",
                    "Tuple[int,int]"
                ],
                "lstm_dim": [
                    "str"
                ],
                "reuse": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "List[int]"
                ]
            }
        },
        "NetworkUtils.tee": {
            "name": "tee",
            "location": 200,
            "return": [
                "int",
                "List[int]",
                "datetime.datetime",
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "NetworkUtils.dense_layer": {
            "name": "dense_layer",
            "location": 209,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "x": [
                    "str",
                    "Dict",
                    "int",
                    "Dict[str,list[str]]",
                    "numpy.dtype",
                    "Dict[str,List[str]]"
                ],
                "dims": [
                    "str",
                    "Dict",
                    "int",
                    "Dict[str,list[str]]",
                    "numpy.dtype",
                    "Dict[str,List[str]]"
                ],
                "name": [
                    "str",
                    "None",
                    "Dict",
                    "int",
                    "numpy.dtype",
                    "Dict[str,List[str]]",
                    "Dict[str,list[str]]"
                ]
            }
        },
        "NetworkUtils.calc_perplexity": {
            "name": "calc_perplexity",
            "location": 214,
            "return": [
                "int",
                "Tuple[Any, Any, Any]",
                "str",
                "list",
                "Tuple[numpy.ndarray]"
            ],
            "arguments": {
                "probs": [
                    "Callable",
                    "bool",
                    "Tuple[int, int]"
                ],
                "indices": [
                    "str"
                ]
            }
        },
        "Network.output_layer": {
            "name": "output_layer",
            "location": 250,
            "return": [
                "Callable",
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ],
                "reuse": [
                    "int",
                    "bool"
                ]
            }
        },
        "Network.create_sentences": {
            "name": "create_sentences",
            "location": 256,
            "return": [
                "int",
                "str",
                "type"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Awaitable",
                    "collections.abc.Awaitable"
                ],
                "indices": [
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "Network.__init__": {
            "name": "__init__",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "bool",
                    "str",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Optional[str]",
                    "Dict[str,Any]"
                ],
                "log_dir": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "save_path": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "embedding_dim": [
                    "int",
                    "bool",
                    "Optional[List[Any]]",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Optional[str]"
                ],
                "lstm_dim": [
                    "int",
                    "bool",
                    "Optional[List[Any]]",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Optional[str]"
                ],
                "load_embeddings": [
                    "bool",
                    "Optional[List[Any]]",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Optional[str]"
                ],
                "train_init_state": [
                    "bool",
                    "str",
                    "float",
                    "Dict",
                    "zerver.models.UserProfile"
                ],
                "restore_from": [
                    "Callable",
                    "None",
                    "int",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Dict",
                    "Optional[bool]",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "bool"
                ]
            }
        },
        "Network._embeddings": {
            "name": "_embeddings",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "load_embeddings": [
                    "str",
                    "int",
                    "bool",
                    "deeplearning.ml4pl.models.epoch.Type"
                ],
                "embedding_dim": [
                    "str",
                    "int",
                    "lunch_buddies.models.polls.Poll"
                ]
            }
        },
        "Network._rnn": {
            "name": "_rnn",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train_init_state": [
                    "Callable[list,list[str]]",
                    "Callable[[List],List[str]]",
                    "Sequence[tuple[Union[str,int]]]",
                    "Sequence[Tuple[str,int]]",
                    "numpy.ndarray"
                ]
            }
        },
        "Network._man": {
            "name": "_man",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Network._summaries": {
            "name": "_summaries",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Network._optimizer": {
            "name": "_optimizer",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Network._savers": {
            "name": "_savers",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_dir": [
                    "str",
                    "Optional[Pattern[str]]",
                    "Pattern",
                    "IO[Any]",
                    "None",
                    "IO"
                ]
            }
        },
        "Network.run_batch": {
            "name": "run_batch",
            "location": 418,
            "return": [
                "str",
                "Tuple[Union[str,...]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "Dict",
                    "int",
                    "Iterable[str]",
                    "bool"
                ],
                "train": [
                    "str",
                    "int",
                    "List",
                    "bool"
                ],
                "monitor": [
                    "str",
                    "int",
                    "List",
                    "bool"
                ]
            }
        },
        "Network.eval": {
            "name": "eval",
            "location": 436,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int"
                ],
                "batch_size": [
                    "int"
                ]
            }
        },
        "Network.test": {
            "name": "test",
            "location": 455,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "Optional[Sequence[cirq.Qid]]",
                    "Sequence[cirq.Qid]",
                    "None"
                ],
                "batch_size": [
                    "int",
                    "Optional[Sequence[cirq.Qid]]",
                    "Sequence[cirq.Qid]",
                    "None"
                ]
            }
        },
        "Network.finish_sentence": {
            "name": "finish_sentence",
            "location": 466,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "Dict",
                    "int"
                ],
                "zero_states": [
                    "Dict",
                    "int"
                ],
                "predict_len": [
                    "int",
                    "float",
                    "Sequence[Sequence[str]]",
                    "Sequence[Tuple[str,int]]",
                    "Union[int,numpy.ndarray]",
                    "List[str]",
                    "List[int]",
                    "List[float]"
                ]
            }
        },
        "Network.finish_sentences": {
            "name": "finish_sentences",
            "location": 490,
            "return": [
                "List[list]",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "List[int]"
                ],
                "sentences": [
                    "int",
                    "Dict[str, Any]",
                    "list",
                    "List[int]"
                ],
                "predict_len": [
                    "float",
                    "models.data_frames.data_frame.GUIInterface",
                    "int",
                    "List[int]"
                ]
            }
        },
        "Network.run": {
            "name": "run",
            "location": 508,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "List[float]",
                    "numpy.ndarray"
                ],
                "batch_size": [
                    "int",
                    "List[float]",
                    "numpy.ndarray"
                ],
                "epochs": [
                    "int",
                    "float",
                    "Iterable[list[str]]",
                    "Iterable[List[str]]",
                    "Tuple[int]"
                ]
            }
        },
        "NetworkUtils.tee.print_fnc": {
            "name": "print_fnc",
            "location": 202,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "x": [
                    "Union[str, int]",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "NetworkUtils.calc_perplexity.dynamic_mean": {
            "name": "dynamic_mean",
            "location": 216,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "values": [
                    "str",
                    "float",
                    "int",
                    "bool",
                    "numpy.ndarray"
                ],
                "lens": [
                    "str",
                    "float",
                    "int",
                    "bool",
                    "numpy.ndarray"
                ],
                "axis": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "Network.create_sentences.lookup": {
            "name": "lookup",
            "location": 258,
            "return": [
                "str"
            ],
            "arguments": {
                "indices": [
                    "str",
                    "int",
                    "List[List[int]]",
                    "float",
                    "list"
                ]
            }
        },
        "Network.finish_sentence.create_feed_dict": {
            "name": "create_feed_dict",
            "location": 468,
            "return": [
                "Dict",
                "int",
                "str",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "word": [
                    "allennlp.models.semantic_parsing.nlvr.nlvr_decoder_state.NlvrDecoderState",
                    "tensorflow.Tensor"
                ],
                "state1": [
                    "allennlp.models.semantic_parsing.nlvr.nlvr_decoder_state.NlvrDecoderState",
                    "tensorflow.Tensor"
                ],
                "state2": [
                    "allennlp.models.semantic_parsing.nlvr.nlvr_decoder_state.NlvrDecoderState",
                    "tensorflow.Tensor"
                ]
            }
        }
    },
    "nlu-master/project1/results/model.py": {
        "load_embedding": {
            "name": "load_embedding",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "None",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "vocab": [
                    "Dict[str,dict[str,Any]]",
                    "str",
                    "bool",
                    "Dict[str,Dict[str,Any]]",
                    "int",
                    "zerver.models.UserProfile"
                ],
                "emb": [
                    "int",
                    "str",
                    "float"
                ],
                "path": [
                    "List",
                    "bool",
                    "str"
                ],
                "dim_embedding": [
                    "int",
                    "float",
                    "str"
                ],
                "vocab_size": [
                    "str",
                    "int",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "gen_expname": {
            "name": "gen_expname",
            "location": 525,
            "return": [
                "str"
            ],
            "arguments": {
                "expname": [
                    "float",
                    "int",
                    "str",
                    "None",
                    "datetime.timezone",
                    "Optional[datetime.tzinfo]"
                ]
            }
        },
        "expA": {
            "name": "expA",
            "location": 529,
            "return": [
                "Network",
                "float",
                "numpy.ndarray",
                "bytearray",
                "str",
                "List[int]"
            ],
            "arguments": {
                "checkpoint_path": [
                    "str"
                ]
            }
        },
        "expB": {
            "name": "expB",
            "location": 541,
            "return": [
                "Network",
                "float",
                "numpy.ndarray",
                "bytearray",
                "int",
                "List[int]"
            ],
            "arguments": {
                "checkpoint_path": [
                    "str"
                ]
            }
        },
        "expC": {
            "name": "expC",
            "location": 553,
            "return": [
                "Network",
                "float",
                "numpy.ndarray",
                "str",
                "bytearray",
                "List[int]",
                "int"
            ],
            "arguments": {
                "checkpoint_path": [
                    "str"
                ]
            }
        },
        "expD": {
            "name": "expD",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "checkpoint_path": [
                    "str",
                    "int",
                    "IO[bytes]",
                    "IO"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 581,
            "return": [
                "bytes",
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "missingdict.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_val": [
                    "int",
                    "None",
                    "Tuple",
                    "float",
                    "bool"
                ]
            }
        },
        "missingdict.__missing__": {
            "name": "__missing__",
            "location": 89,
            "return": [
                "list",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float,int]",
                    "float",
                    "int"
                ]
            }
        },
        "Dataset.read_lines": {
            "name": "read_lines",
            "location": 103,
            "return": [
                "Sequence[str]",
                "str",
                "Iterable[str]",
                "list",
                "Set[str]",
                "List[str]"
            ],
            "arguments": {
                "file": [
                    "str"
                ]
            }
        },
        "Dataset.generate_vocab": {
            "name": "generate_vocab",
            "location": 109,
            "return": [
                "missingdict",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "lines": [
                    "List[AnyStr]",
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "Dataset.encode_words": {
            "name": "encode_words",
            "location": 125,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "lines": [
                    "int",
                    "Union[int, float]",
                    "str"
                ],
                "vocab": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ],
                "padding_size": [
                    "int",
                    "float",
                    "Tuple[int,int]"
                ]
            }
        },
        "Dataset.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train_file": [
                    "int",
                    "str"
                ],
                "eval_file": [
                    "int",
                    "str"
                ],
                "continuation_file": [
                    "str",
                    "int",
                    "bytes"
                ],
                "test_file": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "embedding_file": [
                    "str",
                    "Container[str]",
                    "Container"
                ]
            }
        },
        "Dataset.read_data": {
            "name": "read_data",
            "location": 156,
            "return": [
                "int",
                "Final",
                "Dict[str,List[int]]",
                "Dict",
                "str",
                "Optional[float]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "Union[str,os.PathLike]"
                ]
            }
        },
        "Dataset.load_embeddings": {
            "name": "load_embeddings",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "Dict[str,str]",
                    "Optional[Dict[str,str]]",
                    "bool",
                    "None",
                    "str",
                    "flask_appbuilder.models.sqla.Model",
                    "Optional[libkol.Item]"
                ],
                "emb_matrix": [
                    "Dict[str,str]",
                    "Optional[Dict[str,str]]",
                    "bool",
                    "None",
                    "str",
                    "flask_appbuilder.models.sqla.Model",
                    "Optional[libkol.Item]"
                ],
                "dim_embedding": [
                    "Dict[str,str]",
                    "Optional[Dict[str,str]]",
                    "bool",
                    "None",
                    "str",
                    "flask_appbuilder.models.sqla.Model",
                    "Optional[libkol.Item]"
                ]
            }
        },
        "Dataset.batches_per_epoch_generator": {
            "name": "batches_per_epoch_generator",
            "location": 170,
            "return": [
                "typing.Generator[typing.Union[str,bytes,tuple[typing.Union[str,typing.Any]]]]"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "Dict",
                    "numpy.ndarray",
                    "bytes",
                    "None",
                    "Optional[dict]",
                    "Sequence[int]",
                    "int",
                    "tensorflow.Tensor",
                    "List[tuple[Union[int,int]]]",
                    "List[Tuple[int,int]]"
                ],
                "data": [
                    "Optional[numpy.ndarray]",
                    "Dict[str,Any]",
                    "None",
                    "Mapping",
                    "Dict",
                    "Optional[Tuple[int,int]]",
                    "Tuple[Union[int,int]]"
                ],
                "shuffle": [
                    "bool",
                    "Iterable[int]",
                    "Iterator[int]",
                    "Iterable[bool]"
                ]
            }
        },
        "NetworkUtils.trainable_zero_state": {
            "name": "trainable_zero_state",
            "location": 190,
            "return": [
                "Tuple",
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "batch_size": [
                    "int",
                    "Tuple[Union[int,int]]",
                    "numpy.ndarray",
                    "Tuple[int,int]"
                ],
                "lstm_dim": [
                    "str"
                ],
                "reuse": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "List[int]"
                ]
            }
        },
        "NetworkUtils.tee": {
            "name": "tee",
            "location": 200,
            "return": [
                "int",
                "List[int]",
                "datetime.datetime",
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "NetworkUtils.dense_layer": {
            "name": "dense_layer",
            "location": 209,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "x": [
                    "str",
                    "Dict",
                    "int",
                    "Dict[str,list[str]]",
                    "numpy.dtype",
                    "Dict[str,List[str]]"
                ],
                "dims": [
                    "str",
                    "Dict",
                    "int",
                    "Dict[str,list[str]]",
                    "numpy.dtype",
                    "Dict[str,List[str]]"
                ],
                "name": [
                    "str",
                    "None",
                    "Dict",
                    "int",
                    "numpy.dtype",
                    "Dict[str,List[str]]",
                    "Dict[str,list[str]]"
                ]
            }
        },
        "NetworkUtils.calc_perplexity": {
            "name": "calc_perplexity",
            "location": 214,
            "return": [
                "int",
                "Tuple[Any, Any, Any]",
                "str",
                "list",
                "Tuple[numpy.ndarray]"
            ],
            "arguments": {
                "probs": [
                    "Callable",
                    "bool",
                    "Tuple[int, int]"
                ],
                "indices": [
                    "str"
                ]
            }
        },
        "Network.output_layer": {
            "name": "output_layer",
            "location": 250,
            "return": [
                "Callable",
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ],
                "reuse": [
                    "int",
                    "bool"
                ]
            }
        },
        "Network.create_sentences": {
            "name": "create_sentences",
            "location": 256,
            "return": [
                "int",
                "str",
                "type"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Awaitable",
                    "collections.abc.Awaitable"
                ],
                "indices": [
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "Network.__init__": {
            "name": "__init__",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "bool",
                    "str",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Optional[str]",
                    "Dict[str,Any]"
                ],
                "log_dir": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "save_path": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "embedding_dim": [
                    "int",
                    "bool",
                    "Optional[List[Any]]",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Optional[str]"
                ],
                "lstm_dim": [
                    "int",
                    "bool",
                    "Optional[List[Any]]",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Optional[str]"
                ],
                "load_embeddings": [
                    "bool",
                    "Optional[List[Any]]",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Optional[str]"
                ],
                "train_init_state": [
                    "bool",
                    "str",
                    "float",
                    "Dict",
                    "zerver.models.UserProfile"
                ],
                "restore_from": [
                    "Callable",
                    "None",
                    "int",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Dict",
                    "Optional[bool]",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "bool"
                ]
            }
        },
        "Network._embeddings": {
            "name": "_embeddings",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "load_embeddings": [
                    "str",
                    "int",
                    "bool",
                    "deeplearning.ml4pl.models.epoch.Type"
                ],
                "embedding_dim": [
                    "str",
                    "int",
                    "lunch_buddies.models.polls.Poll"
                ]
            }
        },
        "Network._rnn": {
            "name": "_rnn",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train_init_state": [
                    "Callable[list,list[str]]",
                    "Callable[[List],List[str]]",
                    "Sequence[tuple[Union[str,int]]]",
                    "Sequence[Tuple[str,int]]",
                    "numpy.ndarray"
                ]
            }
        },
        "Network._man": {
            "name": "_man",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Network._summaries": {
            "name": "_summaries",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Network._optimizer": {
            "name": "_optimizer",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Network._savers": {
            "name": "_savers",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_dir": [
                    "str",
                    "Optional[Pattern[str]]",
                    "Pattern",
                    "IO[Any]",
                    "None",
                    "IO"
                ]
            }
        },
        "Network.run_batch": {
            "name": "run_batch",
            "location": 418,
            "return": [
                "str",
                "Tuple[Union[str,...]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "Dict",
                    "int",
                    "Iterable[str]",
                    "bool"
                ],
                "train": [
                    "str",
                    "int",
                    "List",
                    "bool"
                ],
                "monitor": [
                    "str",
                    "int",
                    "List",
                    "bool"
                ]
            }
        },
        "Network.eval": {
            "name": "eval",
            "location": 436,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int"
                ],
                "batch_size": [
                    "int"
                ]
            }
        },
        "Network.test": {
            "name": "test",
            "location": 455,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "Optional[Sequence[cirq.Qid]]",
                    "Sequence[cirq.Qid]",
                    "None"
                ],
                "batch_size": [
                    "int",
                    "Optional[Sequence[cirq.Qid]]",
                    "Sequence[cirq.Qid]",
                    "None"
                ]
            }
        },
        "Network.finish_sentence": {
            "name": "finish_sentence",
            "location": 466,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "Dict",
                    "int"
                ],
                "zero_states": [
                    "Dict",
                    "int"
                ],
                "predict_len": [
                    "int",
                    "float",
                    "Sequence[Sequence[str]]",
                    "Sequence[Tuple[str,int]]",
                    "Union[int,numpy.ndarray]",
                    "List[str]",
                    "List[int]",
                    "List[float]"
                ]
            }
        },
        "Network.finish_sentences": {
            "name": "finish_sentences",
            "location": 490,
            "return": [
                "List[list]",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "List[int]"
                ],
                "sentences": [
                    "int",
                    "Dict[str, Any]",
                    "list",
                    "List[int]"
                ],
                "predict_len": [
                    "float",
                    "models.data_frames.data_frame.GUIInterface",
                    "int",
                    "List[int]"
                ]
            }
        },
        "Network.run": {
            "name": "run",
            "location": 508,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "List[float]",
                    "numpy.ndarray"
                ],
                "batch_size": [
                    "int",
                    "List[float]",
                    "numpy.ndarray"
                ],
                "epochs": [
                    "int",
                    "float",
                    "Iterable[list[str]]",
                    "Iterable[List[str]]",
                    "Tuple[int]"
                ]
            }
        },
        "NetworkUtils.tee.print_fnc": {
            "name": "print_fnc",
            "location": 202,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "x": [
                    "Union[str, int]",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "NetworkUtils.calc_perplexity.dynamic_mean": {
            "name": "dynamic_mean",
            "location": 216,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "values": [
                    "str",
                    "float",
                    "int",
                    "bool",
                    "numpy.ndarray"
                ],
                "lens": [
                    "str",
                    "float",
                    "int",
                    "bool",
                    "numpy.ndarray"
                ],
                "axis": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "Network.create_sentences.lookup": {
            "name": "lookup",
            "location": 258,
            "return": [
                "str"
            ],
            "arguments": {
                "indices": [
                    "str",
                    "int",
                    "List[List[int]]",
                    "float",
                    "list"
                ]
            }
        },
        "Network.finish_sentence.create_feed_dict": {
            "name": "create_feed_dict",
            "location": 468,
            "return": [
                "Dict",
                "int",
                "str",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "word": [
                    "allennlp.models.semantic_parsing.nlvr.nlvr_decoder_state.NlvrDecoderState",
                    "tensorflow.Tensor"
                ],
                "state1": [
                    "allennlp.models.semantic_parsing.nlvr.nlvr_decoder_state.NlvrDecoderState",
                    "tensorflow.Tensor"
                ],
                "state2": [
                    "allennlp.models.semantic_parsing.nlvr.nlvr_decoder_state.NlvrDecoderState",
                    "tensorflow.Tensor"
                ]
            }
        }
    },
    "nlu-master/project2/sct/flags.py": {
        "define_flags": {
            "name": "define_flags",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nlu-master/project2/sct/train.py": {
        "train": {
            "name": "train",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "network": [
                    "int",
                    "model.Model"
                ],
                "dsets": [
                    "int",
                    "model.Model"
                ],
                "batch_size": [
                    "int",
                    "model.Model"
                ],
                "epochs": [
                    "int",
                    "model.Model"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "network": [
                    "str",
                    "Union[str, int]",
                    "Optional[bool]",
                    "Optional[dict]",
                    "model.Model"
                ],
                "dsets": [
                    "Tuple[int]",
                    "int",
                    "List[Tuple[int,int,float]]",
                    "List[tuple[Union[int,int,float]]]"
                ],
                "batch_size": [
                    "int",
                    "Union[str,float]",
                    "List[numpy.array]",
                    "List[int]",
                    "str"
                ],
                "expname": [
                    "Text",
                    "str",
                    "Optional[bool]",
                    "model.Model",
                    "int"
                ]
            }
        },
        "print_output": {
            "name": "print_output",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "predictions": [
                    "List[int]",
                    "int",
                    "bytes",
                    "List[str]",
                    "bool",
                    "Generator",
                    "Union[None,bytes]"
                ],
                "fname": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "FLAGS": [
                    "str",
                    "List[str]",
                    "Tuple[str]"
                ]
            }
        }
    },
    "nlu-master/project2/sct/__init__.py": {},
    "nlu-master/project2/sct/data/datasets.py": {
        "Datasets.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train_file": [
                    "str",
                    "bool"
                ],
                "eval_file": [
                    "str",
                    "bool"
                ],
                "test_files": [
                    "Iterable[str]",
                    "str",
                    "int"
                ],
                "skip_thought_folder": [
                    "Text",
                    "str",
                    "Optional[str]"
                ],
                "preprocessing": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "roemmele_multiplicative_factor": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "eval_train": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "balanced_batches": [
                    "bool",
                    "str",
                    "List[int]",
                    "Set[str]"
                ],
                "sent_embedding": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "add": [
                    "Optional[str]",
                    "None",
                    "int",
                    "List[Dict[str,Any]]",
                    "str",
                    "List[dict[str,Any]]",
                    "Optional[Set[str]]",
                    "Set[str]"
                ]
            }
        },
        "Datasets._read": {
            "name": "_read",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "file": [
                    "str"
                ]
            }
        },
        "Datasets._read_train": {
            "name": "_read_train",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "file": [
                    "BinaryIO",
                    "bool",
                    "str",
                    "TextIO"
                ]
            }
        },
        "Datasets._read_test_eth": {
            "name": "_read_test_eth",
            "location": 75,
            "return": [
                "int",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "file": [
                    "str"
                ]
            }
        },
        "Datasets._read_eval": {
            "name": "_read_eval",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "file": [
                    "BinaryIO",
                    "bool",
                    "str",
                    "TextIO"
                ]
            }
        },
        "Datasets._sample_random_train_ending2": {
            "name": "_sample_random_train_ending2",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "Tuple['cirq.Qid']",
                    "int",
                    "bytes",
                    "str",
                    "numpy.matrix"
                ]
            }
        },
        "Datasets._sample_random_train_ending1_roemmele": {
            "name": "_sample_random_train_ending1_roemmele",
            "location": 136,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "numpy.ndarray",
                    "int",
                    "Union[int, float]",
                    "float",
                    "bytes"
                ],
                "multiplicative_factor": [
                    "int",
                    "bool",
                    "Dict[str,Any]"
                ],
                "add": [
                    "Optional[numpy.ndarray]",
                    "bool",
                    "None",
                    "float",
                    "Iterable"
                ]
            }
        },
        "Datasets._make_eval_ending1": {
            "name": "_make_eval_ending1",
            "location": 168,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Match"
                ]
            }
        },
        "Datasets._load": {
            "name": "_load",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Datasets._sample_random_train_ending2.sample_without_current": {
            "name": "sample_without_current",
            "location": 106,
            "return": [],
            "arguments": {
                "length": []
            }
        },
        "Datasets._sample_random_train_ending1_roemmele.sample_without_current": {
            "name": "sample_without_current",
            "location": 143,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "length": [
                    "int"
                ]
            }
        },
        "Datasets._sample_random_train_ending2.sample_without_current.has_identical": {
            "name": "has_identical",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "xs": []
            }
        },
        "Datasets._sample_random_train_ending1_roemmele.sample_without_current.has_identical": {
            "name": "has_identical",
            "location": 145,
            "return": [
                "bool",
                "List[int]",
                "numpy.ndarray",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "xs": [
                    "numpy.ndarray",
                    "int",
                    "float"
                ]
            }
        }
    },
    "nlu-master/project2/sct/data/preprocessing.py": {
        "Preprocessing.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "standardize": [
                    "bool",
                    "int",
                    "float",
                    "List"
                ],
                "contractions": [
                    "bool",
                    "int",
                    "float",
                    "List"
                ],
                "rem_numbers": [
                    "bool",
                    "int",
                    "float",
                    "List"
                ],
                "punct_squash": [
                    "bool",
                    "int",
                    "float",
                    "List"
                ],
                "rem_stopwords": [
                    "bool",
                    "int",
                    "float",
                    "List"
                ],
                "stemming": [
                    "int",
                    "float",
                    "None",
                    "List"
                ],
                "lemmatization": [
                    "int",
                    "float",
                    "None",
                    "List"
                ],
                "cut_size": [
                    "int",
                    "float",
                    "None",
                    "List"
                ],
                "sentence_indexer": [
                    "None",
                    "List[str]",
                    "Optional[List[str]]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Preprocessing.transform": {
            "name": "transform",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str",
                "Dict[str,Any]",
                "Sequence[str]",
                "Tuple",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "Callable",
                    "Dict[str,Any]",
                    "str",
                    "Sequence[str]",
                    "Tuple",
                    "List[str]"
                ],
                "evaluate": [
                    "bool",
                    "Callable",
                    "Dict[str,Any]",
                    "str",
                    "Sequence[str]",
                    "Tuple",
                    "List[str]"
                ]
            }
        },
        "Preprocessing._map_df": {
            "name": "_map_df",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "Callable",
                    "str"
                ],
                "fn": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Preprocessing._map_words": {
            "name": "_map_words",
            "location": 54,
            "return": [
                "str",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "int"
                ],
                "fn": [
                    "str",
                    "int"
                ]
            }
        },
        "Preprocessing._contractions": {
            "name": "_contractions",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "Callable",
                    "str"
                ],
                "args": [],
                "evaluate": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "Preprocessing._standardize": {
            "name": "_standardize",
            "location": 82,
            "return": [
                "str",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "List",
                    "List[int]",
                    "List[List[Any]]",
                    "List[list[Any]]",
                    "Collection[int]",
                    "Collection"
                ],
                "args": [],
                "evaluate": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "Preprocessing._rem_numbers": {
            "name": "_rem_numbers",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "Callable",
                    "str"
                ],
                "args": [],
                "evaluate": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "Preprocessing._punct_squash": {
            "name": "_punct_squash",
            "location": 99,
            "return": [
                "Callable",
                "trezor.utils.Writer",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "Pattern",
                    "int"
                ],
                "args": [],
                "evaluate": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "Preprocessing._rem_stopwords": {
            "name": "_rem_stopwords",
            "location": 104,
            "return": [
                "int",
                "str",
                "list",
                "List[T]",
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "Callable",
                    "str"
                ],
                "args": [],
                "evaluate": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "Preprocessing._stemming": {
            "name": "_stemming",
            "location": 108,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "int",
                    "pandas.DataFrame"
                ],
                "stemmer": [
                    "str",
                    "int",
                    "pandas.DataFrame"
                ],
                "evaluate": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "Preprocessing._cut_sentences": {
            "name": "_cut_sentences",
            "location": 111,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "Iterable[list[str]]",
                    "Iterable[List[str]]",
                    "Tuple[int]",
                    "pandas.DataFrame"
                ],
                "cut_size": [
                    "int",
                    "Optional[int]",
                    "float",
                    "None",
                    "Optional[float]"
                ],
                "evaluate": [
                    "bool",
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "Preprocessing._lemmatization": {
            "name": "_lemmatization",
            "location": 115,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "Callable",
                    "str"
                ],
                "lemmatizer": [
                    "int",
                    "Callable",
                    "str"
                ],
                "evaluate": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "Preprocessing._vocab_downsize_to": {
            "name": "_vocab_downsize_to",
            "location": 119,
            "return": [
                "float",
                "int",
                "Union[bool, None]",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "float",
                    "int",
                    "str",
                    "Union[bool,None]",
                    "None"
                ],
                "vocab": [
                    "float",
                    "int",
                    "str",
                    "Union[bool,None]",
                    "None"
                ],
                "inv_vocab": [
                    "float",
                    "int",
                    "str",
                    "Union[bool,None]",
                    "None"
                ],
                "evaluate": [
                    "bool",
                    "float",
                    "Iterable[Any]"
                ]
            }
        },
        "Preprocessing._vocab_downsize_vocab": {
            "name": "_vocab_downsize_vocab",
            "location": 122,
            "return": [
                "MissingDict",
                "Mapping",
                "str",
                "Dict[str,List[Any]]",
                "Dict[str,float]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "pandas.DataFrame",
                    "int",
                    "float",
                    "Dict",
                    "Tuple[Union[str,str]]",
                    "Tuple[str,str]"
                ],
                "vocab_size": [
                    "int",
                    "List[str]",
                    "List"
                ],
                "evaluate": [
                    "bool",
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "Preprocessing.vocab": {
            "name": "vocab",
            "location": 135,
            "return": [
                "Tuple[dict]",
                "str",
                "Dict[str,int]",
                "Dict",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "Callable",
                    "str"
                ],
                "vocab_downsize": [
                    "str",
                    "Sequence[int]",
                    "List[int]",
                    "Union[float,int]",
                    "float",
                    "int"
                ],
                "evaluate": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "Preprocessing._contractions.contractions": {
            "name": "contractions",
            "location": 75,
            "return": [
                "str",
                "list",
                "Sequence[str]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "line": [
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "Preprocessing._rem_numbers.rem_numbers": {
            "name": "rem_numbers",
            "location": 92,
            "return": [
                "str",
                "list",
                "Sequence[str]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "line": [
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        }
    },
    "nlu-master/project2/sct/data/stories.py": {
        "generate_permutation": {
            "name": "generate_permutation",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "length": [
                    "int",
                    "float",
                    "str",
                    "Union[bool,str,int]"
                ],
                "shuffle": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "generate_balanced_permutation": {
            "name": "generate_balanced_permutation",
            "location": 30,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "labels": [
                    "int",
                    "numpy.ndarray",
                    "List[str]",
                    "List[Dict]",
                    "Sequence[T]"
                ],
                "batch_size": [
                    "int",
                    "Sequence[T]",
                    "List[int]"
                ],
                "shuffle": [
                    "bool",
                    "Iterable[Any]",
                    "Iterable[float]",
                    "numpy.ndarray",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Vocabularies._default_dict": {
            "name": "_default_dict",
            "location": 73,
            "return": [
                "MissingDict",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "Vocabularies.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "Dict[str,Any]",
                    "int",
                    "Union[str,int]",
                    "bool"
                ],
                "skip_thought_folder": [
                    "str",
                    "List"
                ]
            }
        },
        "NLPData._create_ids": {
            "name": "_create_ids",
            "location": 116,
            "return": [
                "List[list[str]]",
                "int",
                "str"
            ],
            "arguments": {
                "parent_vocab": [
                    "List[Sequence[int]]",
                    "int",
                    "List[str]",
                    "Sequence[str]",
                    "str",
                    "utils.Archive[utils.MultiValue]"
                ],
                "cur_vocab": [
                    "str",
                    "List",
                    "int"
                ]
            }
        },
        "NLPData.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "List[bytes]",
                    "str",
                    "bool",
                    "numpy.ndarray",
                    "list",
                    "List[List[int]]",
                    "List[str]",
                    "List[int]"
                ],
                "vocabularies": [
                    "str",
                    "Sequence[int]",
                    "Optional[List[int]]",
                    "List[int]",
                    "None"
                ]
            }
        },
        "NLPData.__len__": {
            "name": "__len__",
            "location": 140,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NLPData._create_sentence_tensors": {
            "name": "_create_sentence_tensors",
            "location": 144,
            "return": [
                "Tuple[Union[tuple[Union[list,bytes,str]],str]]",
                "bool",
                "cmk.utils.type_defs.UserId",
                "Dict[str,Any]"
            ],
            "arguments": {
                "batch_to_sentence_ids": [
                    "List",
                    "bytes",
                    "str",
                    "numpy.ndarray",
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "NLPData._create_token_tensors": {
            "name": "_create_token_tensors",
            "location": 157,
            "return": [
                "Tuple[Union[tuple,str]]",
                "bool",
                "cmk.utils.type_defs.UserId",
                "Dict[str,Any]"
            ],
            "arguments": {
                "word_ids": [
                    "List[int]",
                    "int",
                    "Tuple[Union[int,int]]",
                    "Union[int,List[int]]",
                    "Tuple[int,int]"
                ],
                "sentence_dict": [
                    "int",
                    "bytes",
                    "numpy.ndarray",
                    "OrderedDict",
                    "str"
                ],
                "padding": [
                    "int",
                    "Dict[str,AsyncGenerator]"
                ]
            }
        },
        "NLPData._create_word_tensors": {
            "name": "_create_word_tensors",
            "location": 173,
            "return": [
                "int",
                "Tuple"
            ],
            "arguments": {
                "self": [],
                "sentence_dict": [
                    "int",
                    "Dict[int,int]",
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "padding": [
                    "int",
                    "Dict[int,int]",
                    "str",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "NLPData._create_char_tensors": {
            "name": "_create_char_tensors",
            "location": 178,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "word_dict": [
                    "int",
                    "Dict[int,int]",
                    "Dict",
                    "Tuple",
                    "Dict[str,dict[str,Any]]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "padding": [
                    "int",
                    "Dict[int,int]",
                    "Dict",
                    "Dict[str,Dict[str,Any]]",
                    "Tuple",
                    "Dict[str,Any]"
                ]
            }
        },
        "NLPData.batch_iterator": {
            "name": "batch_iterator",
            "location": 183,
            "return": [
                "Iterator[Tuple[numpy.ndarray,...]]",
                "Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "permutation": [
                    "List[int]",
                    "int",
                    "numpy.ndarray",
                    "bytearray"
                ],
                "batch_size": [
                    "int",
                    "Sequence",
                    "bytearray",
                    "List[float]"
                ],
                "padding": [
                    "int",
                    "Optional[int]",
                    "List"
                ]
            }
        },
        "StoriesDataset.__init__": {
            "name": "__init__",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "numpy.array",
                    "Sequence[Sequence[Any]]"
                ],
                "SENTENCES": [
                    "int",
                    "Sequence[Sequence[float]]",
                    "List",
                    "List[cirq.Circuit]",
                    "bool",
                    "str"
                ],
                "ENDINGS": [
                    "int",
                    "Sequence[Sequence[float]]",
                    "List",
                    "List[cirq.Circuit]",
                    "bool",
                    "str"
                ],
                "label_dictionary": [
                    "Dict[int,int]",
                    "int",
                    "bool",
                    "Dict[str,int]",
                    "utils.projector.ProjectorAllDataProvider"
                ],
                "balanced_batches": [
                    "bool",
                    "Optional[bool]",
                    "int",
                    "Optional[List[Any]]",
                    "Optional[Exception]",
                    "Tuple",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "StoriesDataset.__len__": {
            "name": "__len__",
            "location": 224,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoriesDataset._sequence_batch_iterator": {
            "name": "_sequence_batch_iterator",
            "location": 228,
            "return": [
                "Iterator[Sequence[T]]",
                "Generator[list]"
            ],
            "arguments": {
                "seq": [
                    "Sequence[T]",
                    "int",
                    "Sequence",
                    "Sequence[Mapping[str, Any]]"
                ],
                "permutation": [
                    "Sequence[int]",
                    "int",
                    "float",
                    "None",
                    "Optional[int]",
                    "numpy.ndarray"
                ],
                "batch_size": [
                    "int",
                    "Sequence",
                    "List",
                    "List[int]"
                ]
            }
        },
        "StoriesDataset.batch_per_epoch_generator": {
            "name": "batch_per_epoch_generator",
            "location": 236,
            "return": [
                "Iterator[Dict[str,Union[numpy.ndarray,bool]]]",
                "None"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int",
                    "Optional[Callable]",
                    "bool",
                    "Optional[int]",
                    "Union[int,Tuple[int,int]]"
                ],
                "shuffle": [
                    "bool",
                    "int",
                    "Optional[Callable]",
                    "Optional[int]",
                    "Union[int,Tuple[int,int]]"
                ]
            }
        },
        "StoriesDataset.batches_per_epoch": {
            "name": "batches_per_epoch",
            "location": 241,
            "return": [
                "Tuple[Union[int,Final,str,list[int]]]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int",
                    "bool"
                ],
                "shuffle": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "StoriesDataset.n_batches": {
            "name": "n_batches",
            "location": 246,
            "return": [
                "int",
                "float",
                "T",
                "bool",
                "torch.nn.utils.rnn.PackedSequence",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int",
                    "Sequence[Mapping[str,Any]]",
                    "Sequence[T]",
                    "Sized",
                    "List[int]"
                ]
            }
        },
        "NLPStoriesDataset.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "bool"
                ],
                "skip_thought_folder": [
                    "str",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "NLPStoriesDataset._create_nlp_text_dataset": {
            "name": "_create_nlp_text_dataset",
            "location": 266,
            "return": [
                "List[tuple]",
                "bool",
                "int",
                "Tuple[int,int]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "pandas.DataFrame",
                    "str"
                ]
            }
        },
        "NLPStoriesDataset.batch_per_epoch_generator": {
            "name": "batch_per_epoch_generator",
            "location": 281,
            "return": [
                "Iterator[Dict[str,Union[numpy.ndarray,bool]]]",
                "Generator[dict[Text,bool]]"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str,int]",
                    "List[str]"
                ],
                "shuffle": [
                    "bool",
                    "int",
                    "float",
                    "numpy.ndarray",
                    "bytearray",
                    "bytes"
                ]
            }
        },
        "SkipThoughtStoriesDataset.__init__": {
            "name": "__init__",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "List[int]",
                    "bool",
                    "Tuple[int]",
                    "Dict[str, Any]"
                ],
                "encoder": [
                    "int",
                    "List[str]",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "SkipThoughtStoriesDataset._encode": {
            "name": "_encode",
            "location": 338,
            "return": [
                "str",
                "List[int]",
                "numpy.ndarray",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "column": [
                    "str",
                    "bool"
                ]
            }
        },
        "SkipThoughtStoriesDataset.batch_iterator": {
            "name": "batch_iterator",
            "location": 342,
            "return": [
                "Iterator[numpy.ndarray]",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "permutation": [
                    "int",
                    "str",
                    "List[float]",
                    "float",
                    "bool"
                ],
                "batch_size": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "SkipThoughtStoriesDataset.batch_per_epoch_generator": {
            "name": "batch_per_epoch_generator",
            "location": 353,
            "return": [
                "Iterator[Dict[str,Union[numpy.ndarray,bool]]]",
                "Generator[dict[Text,bool]]"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int",
                    "float",
                    "List[float]"
                ],
                "shuffle": [
                    "bool",
                    "int",
                    "float",
                    "numpy.ndarray",
                    "bytearray",
                    "bytes"
                ]
            }
        }
    },
    "nlu-master/project2/sct/data/utils.py": {
        "map_all": {
            "name": "map_all",
            "location": 24,
            "return": [
                "List[list[str]]",
                "List[str]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "sequences": [
                    "Set[str]",
                    "int",
                    "str"
                ],
                "vocabulary": [
                    "str",
                    "int",
                    "Set[str]"
                ]
            }
        },
        "invert_dict": {
            "name": "invert_dict",
            "location": 28,
            "return": [
                "Dict",
                "Dict[str,Dict]"
            ],
            "arguments": {
                "d": [
                    "Dict",
                    "MutableMapping"
                ]
            }
        },
        "invert_vocab": {
            "name": "invert_vocab",
            "location": 32,
            "return": [
                "List",
                "Set[str]",
                "str",
                "Set",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "vocab": [
                    "Optional[int]",
                    "Set[str]",
                    "Set[int]",
                    "list"
                ]
            }
        },
        "create_sentence_indexer": {
            "name": "create_sentence_indexer",
            "location": 37,
            "return": [
                "List[Text]",
                "bool",
                "float"
            ],
            "arguments": {
                "n_sentences": [
                    "int",
                    "Optional[int]"
                ],
                "n_endings": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "MissingDict.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissingDict.__missing__": {
            "name": "__missing__",
            "location": 20,
            "return": [
                "list",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float,int]",
                    "float",
                    "int"
                ]
            }
        }
    },
    "nlu-master/project2/sct/data/__init__.py": {},
    "nlu-master/project2/sct/data/skip_thoughts/configuration.py": {
        "model_config": {
            "name": "model_config",
            "location": 27,
            "return": [
                "_HParams",
                "str",
                "Optional[dict]",
                "Dict",
                "Dict[str,Any]"
            ],
            "arguments": {
                "input_file_pattern": [
                    "bool",
                    "List[str]",
                    "None"
                ],
                "input_queue_capacity": [
                    "int",
                    "bool",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "str"
                ],
                "num_input_reader_threads": [
                    "int",
                    "bool",
                    "str"
                ],
                "shuffle_input_data": [
                    "bool",
                    "int",
                    "str",
                    "Dict[str,str]",
                    "Iterable[str]"
                ],
                "uniform_init_scale": [
                    "float",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "vocab_size": [
                    "int",
                    "bool",
                    "str",
                    "List[float]",
                    "List[str]"
                ],
                "batch_size": [
                    "int",
                    "bool",
                    "str",
                    "List[float]",
                    "List[str]"
                ],
                "word_embedding_dim": [
                    "int",
                    "bool",
                    "Tuple",
                    "Optional[str]",
                    "str"
                ],
                "bidirectional_encoder": [
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "str"
                ],
                "encoder_dim": [
                    "int",
                    "bool",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "training_config": {
            "name": "training_config",
            "location": 71,
            "return": [
                "_HParams",
                "str",
                "Dict",
                "Optional[dict]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "learning_rate": [
                    "float",
                    "int",
                    "bool"
                ],
                "learning_rate_decay_factor": [
                    "float",
                    "Callable[[None,None],bool]",
                    "Dict"
                ],
                "learning_rate_decay_steps": [
                    "int",
                    "Callable[[None,None],bool]",
                    "Dict"
                ],
                "number_of_steps": [
                    "int",
                    "bool"
                ],
                "clip_gradient_norm": [
                    "float",
                    "int",
                    "bool"
                ],
                "save_model_secs": [
                    "int",
                    "Mapping[str,str]",
                    "bool"
                ],
                "save_summaries_secs": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "nlu-master/project2/sct/data/skip_thoughts/encoder_manager.py": {
        "EncoderManager.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncoderManager.load_model": {
            "name": "load_model",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_config": [
                    "str",
                    "List[str]",
                    "Dict[str,str]",
                    "int",
                    "Dict"
                ],
                "vocabulary_file": [
                    "str"
                ],
                "embedding_matrix_file": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "checkpoint_path": [
                    "str",
                    "List[str]",
                    "Dict[str,str]",
                    "int",
                    "Dict"
                ]
            }
        },
        "EncoderManager.encode": {
            "name": "encode",
            "location": 86,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "bool"
                ],
                "use_norm": [
                    "bool",
                    "int",
                    "Tuple[int,int]"
                ],
                "verbose": [
                    "bool",
                    "int",
                    "Tuple[int,int]"
                ],
                "batch_size": [
                    "int",
                    "Tuple[int,int]",
                    "bool"
                ],
                "use_eos": [
                    "bool",
                    "int",
                    "Tuple[int,int]"
                ]
            }
        },
        "EncoderManager.close": {
            "name": "close",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nlu-master/project2/sct/data/skip_thoughts/evaluate.py": {
        "main": {
            "name": "main",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_argv": [
                    "List[str]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        }
    },
    "nlu-master/project2/sct/data/skip_thoughts/skip_thoughts_encoder.py": {
        "_pad": {
            "name": "_pad",
            "location": 43,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "seq": [
                    "int",
                    "bool",
                    "sideeye.data.Trial"
                ],
                "target_len": [
                    "List[int]"
                ]
            }
        },
        "_batch_and_pad": {
            "name": "_batch_and_pad",
            "location": 71,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sequences": [
                    "List[int]",
                    "List[str]",
                    "List",
                    "numpy.ndarray",
                    "int",
                    "Sequence[T]"
                ]
            }
        },
        "SkipThoughtsEncoder.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embeddings": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "SkipThoughtsEncoder._create_restore_fn": {
            "name": "_create_restore_fn",
            "location": 104,
            "return": [
                "bool",
                "allennlp.data.dataseDataset",
                "float"
            ],
            "arguments": {
                "self": [],
                "checkpoint_path": [
                    "List[str]",
                    "str",
                    "List",
                    "Optional[str]",
                    "None",
                    "Optional[Tuple[str,...]]",
                    "Tuple[Union[str,...]]"
                ],
                "saver": [
                    "List[str]",
                    "str",
                    "List",
                    "Optional[str]",
                    "None",
                    "Optional[Tuple[str,...]]",
                    "Tuple[Union[str,...]]"
                ]
            }
        },
        "SkipThoughtsEncoder.build_graph_from_config": {
            "name": "build_graph_from_config",
            "location": 133,
            "return": [
                "str",
                "IO",
                "IO[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "model_config": [
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "Optional[Callable[...,Any]]",
                    "Callable[...,Any]",
                    "None"
                ],
                "checkpoint_path": [
                    "str",
                    "List[int]",
                    "Dict",
                    "Iterable[str]"
                ]
            }
        },
        "SkipThoughtsEncoder.build_graph_from_proto": {
            "name": "build_graph_from_proto",
            "location": 152,
            "return": [
                "str",
                "Callable",
                "IO[str]",
                "IO"
            ],
            "arguments": {
                "self": [],
                "graph_def_file": [
                    "str"
                ],
                "saver_def_file": [
                    "str"
                ],
                "checkpoint_path": [
                    "str",
                    "List",
                    "Callable"
                ]
            }
        },
        "SkipThoughtsEncoder._tokenize": {
            "name": "_tokenize",
            "location": 181,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List[dict[str,Any]]",
                    "List[str]",
                    "List[Dict[str,Any]]",
                    "Iterable[str]"
                ]
            }
        },
        "SkipThoughtsEncoder._word_to_embedding": {
            "name": "_word_to_embedding",
            "location": 189,
            "return": [
                "Optional[Any]",
                "bool",
                "str",
                "Callable[..., None]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "w": [
                    "str"
                ]
            }
        },
        "SkipThoughtsEncoder._preprocess": {
            "name": "_preprocess",
            "location": 193,
            "return": [
                "List[list]",
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bool",
                    "int"
                ],
                "use_eos": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "SkipThoughtsEncoder.encode": {
            "name": "encode",
            "location": 212,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "sess": [
                    "str",
                    "Sequence[str]",
                    "int",
                    "List[Dict[str, str]]",
                    "Tuple[str]",
                    "Optional[\"AbstractPurpose\"]"
                ],
                "data": [
                    "int",
                    "BinaryIO",
                    "Callable[str,None]",
                    "numpy.ndarray",
                    "bool",
                    "Callable[[str],None]"
                ],
                "use_norm": [
                    "bool",
                    "int",
                    "tensorflow.keras.optimizers.Optimizer"
                ],
                "verbose": [
                    "bool",
                    "int",
                    "tensorflow.keras.optimizers.Optimizer"
                ],
                "batch_size": [
                    "int",
                    "List[int]",
                    "Optional[int]",
                    "List[float]",
                    "float"
                ],
                "use_eos": [
                    "bool"
                ]
            }
        },
        "SkipThoughtsEncoder._create_restore_fn._restore_fn": {
            "name": "_restore_fn",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "sess": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "nlu-master/project2/sct/data/skip_thoughts/skip_thoughts_model.py": {
        "random_orthonormal_initializer": {
            "name": "random_orthonormal_initializer",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "shape": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Callable",
                    "Optional[bool]",
                    "bool",
                    "Mapping[str, str]"
                ],
                "dtype": [
                    "List[List[int]]"
                ],
                "partition_info": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "SkipThoughtsModel.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[str,str]"
                ],
                "mode": [
                    "Text",
                    "TextIO",
                    "str"
                ],
                "input_reader": [
                    "int",
                    "None",
                    "str",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "SkipThoughtsModel.build_inputs": {
            "name": "build_inputs",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkipThoughtsModel.build_word_embeddings": {
            "name": "build_word_embeddings",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkipThoughtsModel._initialize_gru_cell": {
            "name": "_initialize_gru_cell",
            "location": 190,
            "return": [
                "LayerNormGRUCell",
                "bytearray",
                "float",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "num_units": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "SkipThoughtsModel.build_encoder": {
            "name": "build_encoder",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkipThoughtsModel._build_decoder": {
            "name": "_build_decoder",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "embeddings": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "targets": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ],
                "mask": [
                    "bool",
                    "str",
                    "List[str]",
                    "bytes",
                    "int"
                ],
                "initial_state": [
                    "bool",
                    "str",
                    "int",
                    "Sequence[Union[int,float]]",
                    "List[int]",
                    "None",
                    "List[str]",
                    "Optional[str]"
                ],
                "reuse_logits": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "SkipThoughtsModel.build_decoders": {
            "name": "build_decoders",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkipThoughtsModel.build_loss": {
            "name": "build_loss",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkipThoughtsModel.build_global_step": {
            "name": "build_global_step",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkipThoughtsModel.build": {
            "name": "build",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nlu-master/project2/sct/data/skip_thoughts/skip_thoughts_model_test.py": {
        "SkipThoughtsModel.build_inputs": {
            "name": "build_inputs",
            "location": 31,
            "return": [
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkipThoughtsModelTest.setUp": {
            "name": "setUp",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkipThoughtsModelTest._countModelParameters": {
            "name": "_countModelParameters",
            "location": 54,
            "return": [
                "Dict[str,]",
                "int",
                "Optional[str]",
                "Sequence[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkipThoughtsModelTest._checkModelParameters": {
            "name": "_checkModelParameters",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkipThoughtsModelTest._checkOutputs": {
            "name": "_checkOutputs",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_shapes": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "str",
                    "bool",
                    "Optional[str]",
                    "List[Dict[str,Any]]"
                ],
                "feed_dict": [
                    "bool",
                    "None",
                    "float",
                    "int"
                ]
            }
        },
        "SkipThoughtsModelTest.testBuildForTraining": {
            "name": "testBuildForTraining",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkipThoughtsModelTest.testBuildForEval": {
            "name": "testBuildForEval",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkipThoughtsModelTest.testBuildForEncode": {
            "name": "testBuildForEncode",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nlu-master/project2/sct/data/skip_thoughts/track_perplexity.py": {
        "evaluate_model": {
            "name": "evaluate_model",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "sess": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Type"
                ],
                "losses": [
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "int",
                    "Optional[freqtrade.configuration.TimeRange]",
                    "None"
                ],
                "weights": [
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "int",
                    "Optional[freqtrade.configuration.TimeRange]",
                    "None"
                ],
                "num_batches": [
                    "int",
                    "float",
                    "Tuple[Union[int,int]]",
                    "bool",
                    "Tuple[int,int]"
                ],
                "global_step": [
                    "int",
                    "bool"
                ],
                "summary_writer": [
                    "bool",
                    "Optional[int]",
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "summary_op": [
                    "int",
                    "Optional[int]",
                    "BinaryIO",
                    "None",
                    "Optional[Callable]",
                    "Callable"
                ]
            }
        },
        "run_once": {
            "name": "run_once",
            "location": 96,
            "return": [
                "None",
                "Iterator[T]",
                "Iterator[str]",
                "Iterator[int]",
                "Iterable[T]"
            ],
            "arguments": {
                "model": [
                    "bool",
                    "numpy.ndarray",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "losses": [
                    "int",
                    "Callable",
                    "Union[int,float]",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "weights": [
                    "int",
                    "Callable",
                    "Union[int,float]",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "saver": [
                    "Union[int,float]",
                    "int",
                    "str",
                    "float",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "summary_writer": [
                    "int",
                    "Callable",
                    "Union[int,float]",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "summary_op": [
                    "int",
                    "Callable",
                    "Union[int,float]",
                    "float",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_argv": [
                    "List[str]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        }
    },
    "nlu-master/project2/sct/data/skip_thoughts/train.py": {
        "_setup_learning_rate": {
            "name": "_setup_learning_rate",
            "location": 35,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "config": [
                    "Optional[int]",
                    "int",
                    "bool",
                    "None"
                ],
                "global_step": [
                    "Dict"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_argv": [
                    "List[str]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        }
    },
    "nlu-master/project2/sct/data/skip_thoughts/vocabulary_expansion.py": {
        "_load_skip_thoughts_embeddings": {
            "name": "_load_skip_thoughts_embeddings",
            "location": 64,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "checkpoint_path": [
                    "str"
                ]
            }
        },
        "_load_vocabulary": {
            "name": "_load_vocabulary",
            "location": 92,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_expand_vocabulary": {
            "name": "_expand_vocabulary",
            "location": 112,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "skip_thoughts_emb": [
                    "str",
                    "float",
                    "Dict",
                    "int"
                ],
                "skip_thoughts_vocab": [
                    "str"
                ],
                "word2vec": [
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_argv": [
                    "List[str]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        }
    },
    "nlu-master/project2/sct/data/skip_thoughts/__init__.py": {},
    "nlu-master/project2/sct/data/skip_thoughts/data/preprocess_dataset.py": {
        "_build_vocabulary": {
            "name": "_build_vocabulary",
            "location": 79,
            "return": [
                "Iterable[allennlp.data.instance.Instance]",
                "bool"
            ],
            "arguments": {
                "input_files": [
                    "Iterable[str]",
                    "List[str]",
                    "Iterator[str]",
                    "Set[str]",
                    "Union[List, set]",
                    "bool"
                ]
            }
        },
        "_int64_feature": {
            "name": "_int64_feature",
            "location": 139,
            "return": [
                "Callable",
                "str",
                "Tuple[Any, Any, Any]",
                "list"
            ],
            "arguments": {
                "value": [
                    "Dict",
                    "Tuple[Union[int,int]]",
                    "List[int]",
                    "float",
                    "int",
                    "bool",
                    "str",
                    "Optional[int]",
                    "Tuple[int,int]"
                ]
            }
        },
        "_sentence_to_ids": {
            "name": "_sentence_to_ids",
            "location": 144,
            "return": [
                "List",
                "int",
                "str"
            ],
            "arguments": {
                "sentence": [
                    "int",
                    "numpy.array"
                ],
                "vocab": [
                    "int",
                    "numpy.array"
                ]
            }
        },
        "_create_serialized_example": {
            "name": "_create_serialized_example",
            "location": 152,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "predecessor": [
                    "bool",
                    "float",
                    "allennlp.data.dataseDataset"
                ],
                "current": [
                    "bool",
                    "float",
                    "allennlp.data.dataseDataset"
                ],
                "successor": [
                    "bool",
                    "float",
                    "allennlp.data.dataseDataset"
                ],
                "vocab": [
                    "bool",
                    "float",
                    "allennlp.data.dataseDataset"
                ]
            }
        },
        "_process_input_file": {
            "name": "_process_input_file",
            "location": 165,
            "return": [
                "List",
                "bool",
                "str",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "TextIO",
                    "Optional[str]",
                    "None"
                ],
                "vocab": [
                    "bool",
                    "str",
                    "BinaryIO",
                    "Optional[int]",
                    "None",
                    "IO[str]",
                    "IO"
                ],
                "stats": [
                    "dict",
                    "str",
                    "bytes",
                    "Optional[str]",
                    "int",
                    "Union[str, List[str]]"
                ]
            }
        },
        "_write_shard": {
            "name": "_write_shard",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "dataset": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "indices": [
                    "bool",
                    "str"
                ]
            }
        },
        "_write_dataset": {
            "name": "_write_dataset",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "bool",
                    "str",
                    "Optional[Callable]",
                    "Callable",
                    "None"
                ],
                "dataset": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "Callable[[Any],str]",
                    "Callable[Any,str]"
                ],
                "indices": [
                    "int",
                    "Union[int, Sequence[int]]",
                    "List[str]",
                    "Dict[str, int]",
                    "Dict[int, str]"
                ],
                "num_shards": [
                    "int",
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_argv": [
                    "List[str]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        }
    },
    "nlu-master/project2/sct/data/skip_thoughts/data/special_words.py": {},
    "nlu-master/project2/sct/data/skip_thoughts/data/__init__.py": {},
    "nlu-master/project2/sct/data/skip_thoughts/ops/gru_cell.py": {
        "LayerNormGRUCell.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_units": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "w_initializer": [
                    "int",
                    "float"
                ],
                "u_initializer": [
                    "int",
                    "float"
                ],
                "b_initializer": [
                    "int",
                    "float"
                ],
                "activation": [
                    "int",
                    "float"
                ]
            }
        },
        "LayerNormGRUCell.state_size": {
            "name": "state_size",
            "location": 54,
            "return": [
                "int",
                "List[List[int]]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayerNormGRUCell.output_size": {
            "name": "output_size",
            "location": 58,
            "return": [
                "List[List[int]]",
                "Type[Exception]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayerNormGRUCell._w_h_initializer": {
            "name": "_w_h_initializer",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayerNormGRUCell._w_x_initializer": {
            "name": "_w_x_initializer",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "input_dim": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "LayerNormGRUCell.__call__": {
            "name": "__call__",
            "location": 104,
            "return": [
                "int",
                "Tuple"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Dict[core.Edge,state.State]"
                ],
                "state": [
                    "Callable"
                ],
                "scope": [
                    "T",
                    "None"
                ]
            }
        },
        "LayerNormGRUCell._w_h_initializer._initializer": {
            "name": "_initializer",
            "location": 72,
            "return": [],
            "arguments": {
                "shape": [],
                "dtype": [],
                "partition_info": [
                    "None"
                ]
            }
        },
        "LayerNormGRUCell._w_x_initializer._initializer": {
            "name": "_initializer",
            "location": 95,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "int",
                "str"
            ],
            "arguments": {
                "shape": [
                    "int"
                ],
                "dtype": [
                    "bytes",
                    "int"
                ],
                "partition_info": [
                    "None",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "nlu-master/project2/sct/data/skip_thoughts/ops/input_ops.py": {
        "parse_example_batch": {
            "name": "parse_example_batch",
            "location": 33,
            "return": [
                "Tuple",
                "str",
                "Dict[str,int]",
                "float",
                "Optional[bool]"
            ],
            "arguments": {
                "serialized": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "prefetch_input_data": {
            "name": "prefetch_input_data",
            "location": 60,
            "return": [
                "str",
                "Type",
                "Dict[str, Any]"
            ],
            "arguments": {
                "reader": [
                    "int",
                    "bool"
                ],
                "file_pattern": [
                    "str",
                    "bytes",
                    "int"
                ],
                "shuffle": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "bytes",
                    "int"
                ],
                "capacity": [
                    "bool",
                    "bytes"
                ],
                "num_reader_threads": [
                    "int"
                ]
            }
        },
        "parse_example_batch._sparse_to_batch": {
            "name": "_sparse_to_batch",
            "location": 51,
            "return": [
                "SentenceBatch",
                "List[str]",
                "Callable",
                "int"
            ],
            "arguments": {
                "sparse": [
                    "Tuple['cirq.Qid']"
                ]
            }
        }
    },
    "nlu-master/project2/sct/data/skip_thoughts/ops/__init__.py": {},
    "nlu-master/project2/sct/experiments/roemmele_sentences_bigru_rand6.py": {
        "define_flags": {
            "name": "define_flags",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nlu-master/project2/sct/experiments/roemmele_sentences_gru_negativeadd.py": {
        "define_flags": {
            "name": "define_flags",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nlu-master/project2/sct/experiments/roemmele_sentences_gru_rand6.py": {
        "define_flags": {
            "name": "define_flags",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nlu-master/project2/sct/experiments/roemmele_sentences_gru_rand6_bahdanauatt.py": {
        "define_flags": {
            "name": "define_flags",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nlu-master/project2/sct/experiments/roemmele_sentences_gru_rand6_luongatt.py": {
        "define_flags": {
            "name": "define_flags",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nlu-master/project2/sct/experiments/roemmele_sentences_lstm_rand6.py": {
        "define_flags": {
            "name": "define_flags",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nlu-master/project2/sct/experiments/roemmele_sentences_tcnn_rand6.py": {
        "define_flags": {
            "name": "define_flags",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nlu-master/project2/sct/experiments/roemmele_sentences_van_rand6.py": {
        "define_flags": {
            "name": "define_flags",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nlu-master/project2/sct/experiments/__init__.py": {},
    "nlu-master/project2/sct/model/model.py": {
        "Model._placeholders": {
            "name": "_placeholders",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._summaries_and_init": {
            "name": "_summaries_and_init",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.save": {
            "name": "save",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eval_accuracy": [
                    "str",
                    "int",
                    "float",
                    "Union[str,IO[bytes]]",
                    "IO"
                ],
                "global_step_val": [
                    "str",
                    "int",
                    "float",
                    "Union[str,IO[bytes]]",
                    "IO"
                ]
            }
        },
        "Model.restore_last": {
            "name": "restore_last",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.restore": {
            "name": "restore",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "checkpoint": [
                    "bool",
                    "Dict"
                ]
            }
        },
        "Model.build_model": {
            "name": "build_model",
            "location": 136,
            "return": [
                "Tuple[tensorflow.Tensor,tensorflow.Tensor,tensorflow.Operation]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._tqdm_metrics": {
            "name": "_tqdm_metrics",
            "location": 145,
            "return": [
                "OrderedDict",
                "Dict",
                "Dict[str,bool]",
                "Union[Dict,str]",
                "Dict[str,Any]",
                "int"
            ],
            "arguments": {
                "dataset": [
                    "str",
                    "Dict",
                    "Callable[[Dict],None]",
                    "Callable[dict,None]",
                    "Optional[str]",
                    "None"
                ],
                "metrics": [
                    "List",
                    "List[str]",
                    "int",
                    "str",
                    "Sequence[T]",
                    "bool"
                ],
                "names": [
                    "List",
                    "List[str]",
                    "int",
                    "str",
                    "Sequence[T]",
                    "bool"
                ]
            }
        },
        "Model._train_metrics": {
            "name": "_train_metrics",
            "location": 152,
            "return": [
                "numpy.ndarray",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._eval_metrics": {
            "name": "_eval_metrics",
            "location": 156,
            "return": [
                "numpy.ndarray",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "Tuple[Union[int,int]]",
                    "numpy.ndarray",
                    "Tuple[int,int]"
                ],
                "batch_size": [
                    "int",
                    "numpy.ndarray",
                    "Tuple[int,int]"
                ]
            }
        },
        "Model._build_feed_dict": {
            "name": "_build_feed_dict",
            "location": 161,
            "return": [
                "Dict[,str]",
                "Dict",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "str",
                    "allennlp.data.iterators.data_iterator.DataIterator",
                    "Iterable[allennlp.data.instance.Instance]",
                    "Dict[int,dict]",
                    "Optional[Iterable[allennlp.data.instance.Instance]]"
                ],
                "is_training": [
                    "bool",
                    "str",
                    "allennlp.data.iterators.data_iterator.DataIterator",
                    "Iterable[allennlp.data.instance.Instance]",
                    "Dict[int,dict]",
                    "Optional[Iterable[allennlp.data.instance.Instance]]"
                ]
            }
        },
        "Model.train_batch": {
            "name": "train_batch",
            "location": 179,
            "return": [
                "str",
                "float",
                "list",
                "int"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "str",
                    "float"
                ]
            }
        },
        "Model._pre_train": {
            "name": "_pre_train",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "Dict",
                    "bool",
                    "data.SensorData"
                ]
            }
        },
        "Model._train": {
            "name": "_train",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "str",
                    "bytes",
                    "numpy.ndarray",
                    "scdata.datasets.Datasets"
                ],
                "epochs": [
                    "int"
                ],
                "batch_size": [
                    "int",
                    "Dict",
                    "Dict[str,Dict[str,Any]]"
                ],
                "evaluate_every_steps": [
                    "int",
                    "float",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Model.train": {
            "name": "train",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "str",
                    "float",
                    "Union[int,float]",
                    "scdata.datasets.Datasets"
                ],
                "epochs": [
                    "int",
                    "str",
                    "float",
                    "Union[int,float]",
                    "scdata.datasets.Datasets"
                ],
                "batch_size": [
                    "int",
                    "str",
                    "Union[int,float]",
                    "scdata.datasets.Datasets"
                ],
                "evaluate_every_steps": [
                    "int",
                    "str",
                    "Union[int,float]",
                    "scdata.datasets.Datasets"
                ]
            }
        },
        "Model.evaluate_epoch": {
            "name": "evaluate_epoch",
            "location": 221,
            "return": [
                "str",
                "Union[tuple,list]",
                "List[int]",
                "int",
                "Dict[str,Any]",
                "float",
                "List[Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "str",
                    "bytes"
                ],
                "dataset": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "batch_size": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "Model.predict_epoch": {
            "name": "predict_epoch",
            "location": 228,
            "return": [
                "Tuple[Optional[int]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "numpy.ndarray",
                    "str",
                    "bool"
                ],
                "dataset": [
                    "str",
                    "bool",
                    "Tuple",
                    "float",
                    "int",
                    "None",
                    "Optional[int]"
                ],
                "batch_size": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "Model._train._eval": {
            "name": "_eval",
            "location": 189,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "best_acc": [
                    "Callable",
                    "tensorflow.estimator.Estimator",
                    "List['cirq.Qid']",
                    "float",
                    "numpy.ndarray"
                ],
                "cur_step": [
                    "int",
                    "List[tensorflow.Tensor]",
                    "float",
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "nlu-master/project2/sct/model/rnn.py": {
        "RNN.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rnn_cell": [
                    "int",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "rnn_cell_dim": [
                    "int",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "RNN._create_cell": {
            "name": "_create_cell",
            "location": 46,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "rnn_cell_dim": [
                    "str",
                    "Dict",
                    "List[str]",
                    "int"
                ],
                "name": [
                    "str",
                    "None",
                    "Dict",
                    "List[str]",
                    "int"
                ]
            }
        },
        "RNN._create_attention": {
            "name": "_create_attention",
            "location": 56,
            "return": [
                "bool",
                "Optional[int]",
                "List[Callable]"
            ],
            "arguments": {
                "self": [],
                "encoder_outputs": [
                    "int",
                    "bytes",
                    "Dict"
                ]
            }
        },
        "RNN._compute_attention": {
            "name": "_compute_attention",
            "location": 66,
            "return": [
                "Tuple",
                "str",
                "Optional[bool]",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "mechanism": [
                    "tensorflow.Tensor"
                ],
                "cell_output": [
                    "tensorflow.Tensor"
                ],
                "attention_state": [
                    "tensorflow.Tensor"
                ]
            }
        },
        "RNN._attention_images_summary": {
            "name": "_attention_images_summary",
            "location": 83,
            "return": [
                "int",
                "str",
                "List[dict[str,Any]]"
            ],
            "arguments": {
                "alignments": [
                    "tensorflow.Tensor",
                    "Tuple[str]",
                    "str",
                    "int"
                ],
                "prefix": [
                    "Text",
                    "str",
                    "Dict"
                ]
            }
        },
        "RNN._attention_summaries": {
            "name": "_attention_summaries",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alignments": [
                    "str",
                    "tensorflow.Tensor",
                    "List[int]",
                    "List[gmail_img_dl.model.Attachment]",
                    "List"
                ],
                "prefix": [
                    "Text",
                    "tensorflow.Tensor",
                    "str",
                    "List[int]",
                    "List[gmail_img_dl.model.Attachment]",
                    "List"
                ]
            }
        },
        "RNN._add_attention": {
            "name": "_add_attention",
            "location": 103,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "outputs": [
                    "str",
                    "List[int]",
                    "bytearray",
                    "tensorflow.Tensor"
                ],
                "cell_output": [
                    "int",
                    "tensorflow.Tensor"
                ],
                "prefix": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "RNN._attention_only": {
            "name": "_attention_only",
            "location": 113,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "per_sentence_states": [
                    "bool",
                    "float",
                    "Dict[str,float]",
                    "Optional[dict]",
                    "Dict",
                    "None"
                ]
            }
        },
        "RNN._sentence_module": {
            "name": "_sentence_module",
            "location": 121,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "per_sentence_states": [
                    "int",
                    "tensorflow.Tensor",
                    "Dict",
                    "Optional[dict]",
                    "None"
                ]
            }
        },
        "RNN._char_embeddings": {
            "name": "_char_embeddings",
            "location": 130,
            "return": [
                "str",
                "gmail_img_dl.model.Email",
                "int",
                "Optional[tensorflow.Tensor]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RNN._word_embeddings": {
            "name": "_word_embeddings",
            "location": 158,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RNN._sentence_rnn": {
            "name": "_sentence_rnn",
            "location": 176,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bool",
                    "str",
                    "float",
                    "Sequence[int]",
                    "int"
                ]
            }
        },
        "RNN._story_embeddings": {
            "name": "_story_embeddings",
            "location": 195,
            "return": [
                "Tuple[tuple]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "sentence_wordword_states": [
                    "Dict[str,float]",
                    "tensorflow.Tensor"
                ]
            }
        },
        "RNN._fc": {
            "name": "_fc",
            "location": 213,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "sentence_state": [
                    "Dict[str,float]",
                    "tensorflow.Tensor"
                ],
                "ending_states": [
                    "Tuple[Union[tensorflow.Tensor,tensorflow.Tensor]]",
                    "str",
                    "Tuple[tensorflow.Tensor,tensorflow.Tensor]",
                    "tensorflow.Tensor",
                    "Callable"
                ]
            }
        },
        "RNN.build_model": {
            "name": "build_model",
            "location": 234,
            "return": [
                "bool",
                "Tuple[Union[list[float],int]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nlu-master/project2/sct/model/roemmele_sentences.py": {
        "RoemmeleSentences.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoemmeleSentences._sentence_rnn": {
            "name": "_sentence_rnn",
            "location": 15,
            "return": [
                "List[int]",
                "numpy.ndarray",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "per_sentence_states": [
                    "tensorflow.Tensor"
                ]
            }
        },
        "RoemmeleSentences._output_fc": {
            "name": "_output_fc",
            "location": 42,
            "return": [
                "int",
                "bytes",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "int",
                    "numpy.array"
                ]
            }
        },
        "RoemmeleSentences._sentence_states": {
            "name": "_sentence_states",
            "location": 47,
            "return": [
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoemmeleSentences.build_model": {
            "name": "build_model",
            "location": 50,
            "return": [
                "bool",
                "Tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoemmeleSentences._optimizer": {
            "name": "_optimizer",
            "location": 101,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoemmeleSentences._summaries_and_init": {
            "name": "_summaries_and_init",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoemmeleSentences._placeholders": {
            "name": "_placeholders",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoemmeleSentences._build_feed_dict": {
            "name": "_build_feed_dict",
            "location": 152,
            "return": [
                "Dict[,str]",
                "Dict",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "str",
                    "bool",
                    "Dict",
                    "Optional[numpy.ndarray]",
                    "Dict[str,Any]"
                ],
                "is_training": [
                    "bool",
                    "Optional[numpy.ndarray]",
                    "Dict",
                    "Dict[str,Any]",
                    "Tuple[cirq.Qid]"
                ]
            }
        }
    },
    "nlu-master/project2/sct/model/roemmele_sentences_birnn.py": {
        "RoemmeleSentencesBiRNN.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoemmeleSentencesBiRNN._sentence_rnn": {
            "name": "_sentence_rnn",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "per_sentence_states": [
                    "tensorflow.Tensor"
                ]
            }
        },
        "RoemmeleSentencesBiRNN._output_fc": {
            "name": "_output_fc",
            "location": 28,
            "return": [
                "int",
                "bytes",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "Optional[Tuple]",
                    "Tuple",
                    "int",
                    "Sequence[str]",
                    "None",
                    "tensorflow.Tensor"
                ]
            }
        }
    },
    "nlu-master/project2/sct/model/roemmele_sentences_tcnn.py": {
        "RoemmeleSentencesTCNN.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoemmeleSentencesTCNN._1d_conv": {
            "name": "_1d_conv",
            "location": 16,
            "return": [
                "str",
                "List[int]",
                "Iterable[str]",
                "int",
                "Pattern",
                "Iterable[T]",
                "float",
                "Dict[str,Union[Any,Any,Any,Any,Any]]"
            ],
            "arguments": {
                "inp": [
                    "int",
                    "None",
                    "tensorflow.Tensor",
                    "Optional[int]",
                    "bool"
                ],
                "num_outputs": [
                    "int",
                    "None",
                    "tensorflow.Tensor",
                    "Optional[int]",
                    "bool"
                ],
                "kernel_size": [
                    "int",
                    "tensorflow.Tensor",
                    "Optional[int]",
                    "bool"
                ],
                "stride": [
                    "int",
                    "tensorflow.Tensor",
                    "Optional[int]",
                    "bool"
                ],
                "activation_fn": [
                    "int",
                    "tensorflow.Tensor",
                    "Optional[int]",
                    "bool"
                ],
                "normalizer_fn": [
                    "Union[int, float]",
                    "str",
                    "List[int]",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "RoemmeleSentencesTCNN._sentence_rnn": {
            "name": "_sentence_rnn",
            "location": 33,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "per_sentence_states": [
                    "tensorflow.Tensor"
                ]
            }
        },
        "RoemmeleSentencesTCNN._optimizer": {
            "name": "_optimizer",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoemmeleSentencesTCNN._output_fc": {
            "name": "_output_fc",
            "location": 59,
            "return": [
                "int",
                "bytes",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "tensorflow.Tensor"
                ]
            }
        }
    },
    "nlu-master/project2/sct/model/roemmele_words.py": {
        "RoemmeleWords.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoemmeleWords._word_embeddings": {
            "name": "_word_embeddings",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoemmeleWords._word_rnn": {
            "name": "_word_rnn",
            "location": 33,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "sentence_word_embeddings": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "RoemmeleWords._sentence_states": {
            "name": "_sentence_states",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RoemmeleWords._sentence_rnn": {
            "name": "_sentence_rnn",
            "location": 69,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "per_sentence_states": [
                    "tensorflow.Tensor"
                ]
            }
        },
        "RoemmeleWords._output_fc": {
            "name": "_output_fc",
            "location": 96,
            "return": [
                "int",
                "bytes",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "int"
                ]
            }
        },
        "RoemmeleWords.build_model": {
            "name": "build_model",
            "location": 101,
            "return": [
                "bool",
                "Tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoemmeleWords._optimizer": {
            "name": "_optimizer",
            "location": 152,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoemmeleWords._summaries_and_init": {
            "name": "_summaries_and_init",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nlu-master/project2/sct/model/__init__.py": {},
    "nlu-master/project2/tests/test_preprocessing.py": {
        "preprocessing_compare": {
            "name": "preprocessing_compare",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "preprocessing": [
                    "float",
                    "Optional[float]",
                    "int",
                    "None"
                ],
                "inp": [
                    "bool",
                    "float",
                    "str",
                    "Tuple[Union[float,float]]",
                    "int",
                    "Union[float,Tuple[float,float]]"
                ],
                "exp": [
                    "bool",
                    "float",
                    "str",
                    "Tuple[Union[float,float]]",
                    "int",
                    "Union[float,Tuple[float,float]]"
                ],
                "call_on_result": [
                    "Optional[str]",
                    "None",
                    "bool",
                    "str",
                    "int",
                    "Optional[Callable[[str],bool]]",
                    "Callable[str,bool]",
                    "Optional[Type[Any]]",
                    "Type"
                ]
            }
        },
        "test_default_flags_is_identity": {
            "name": "test_default_flags_is_identity",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_standardize": {
            "name": "test_standardize",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_vocab_downsize": {
            "name": "test_vocab_downsize",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_vocab_downsize.downsize": {
            "name": "downsize",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    }
}
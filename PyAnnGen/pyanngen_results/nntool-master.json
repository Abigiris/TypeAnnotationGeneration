{
    "nntool-master/setup.py": {},
    "nntool-master/apidoc/conf.py": {
        "setup": {
            "name": "setup",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "nntool-master/nntool/__init__.py": {},
    "nntool-master/nntool/abc/functionabc.py": {
        "FunctionABC.__call__": {
            "name": "__call__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "FunctionABC.d": {
            "name": "d",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "djdy": []
            }
        }
    },
    "nntool-master/nntool/abc/layerabc.py": {
        "LayerABC.forward": {
            "name": "forward",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "LayerABC.backward": {
            "name": "backward",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "HiddenLayer.size": {
            "name": "size",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeuronLayer.update_Theta": {
            "name": "update_Theta",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eta": [],
                "djdTheta": []
            }
        }
    },
    "nntool-master/nntool/abc/modelabc.py": {
        "ModelABC.add": {
            "name": "add",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layer": []
            }
        },
        "ModelABC.trained": {
            "name": "trained",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelABC.train": {
            "name": "train",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelABC.fit": {
            "name": "fit",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dev": []
            }
        },
        "ModelABC.predict": {
            "name": "predict",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "x_test": [
                    "ModelABC"
                ]
            }
        }
    },
    "nntool-master/nntool/abc/neuronabc.py": {},
    "nntool-master/nntool/abc/__init__.py": {},
    "nntool-master/nntool/dataset/core.py": {
        "DataSet.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "names": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "X": [
                    "int",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "y": [
                    "str",
                    "List[str]",
                    "float",
                    "int",
                    "numpy.array",
                    "List[int]"
                ]
            }
        },
        "DataSet.sample": {
            "name": "sample",
            "location": 18,
            "return": [
                "Tuple[(List[int], DataSet)]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "str",
                    "bool",
                    "dict",
                    "bytes"
                ]
            }
        },
        "DataSet.randomsplit": {
            "name": "randomsplit",
            "location": 31,
            "return": [
                "Tuple[(DataSet, DataSet)]"
            ],
            "arguments": {
                "self": [],
                "rate": [
                    "float",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DataLoader.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespath": [
                    "int",
                    "float",
                    "bool"
                ],
                "datapath": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "DataLoader.loaded": {
            "name": "loaded",
            "location": 47,
            "return": [
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataLoader.load": {
            "name": "load",
            "location": 50,
            "return": [
                "DataSet"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataLoader._load_names": {
            "name": "_load_names",
            "location": 57,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataLoader._load_datas": {
            "name": "_load_datas",
            "location": 62,
            "return": [
                "Tuple[(np.ndarray, np.ndarray)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nntool-master/nntool/dataset/__init__.py": {},
    "nntool-master/nntool/layer/embedding_layer.py": {
        "EmbeddingLayer.__call__": {
            "name": "__call__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "EmbeddingLayer.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Theta": [
                    "None"
                ]
            }
        },
        "EmbeddingLayer.size": {
            "name": "size",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmbeddingLayer.d_Theta": {
            "name": "d_Theta",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmbeddingLayer.d_x": {
            "name": "d_x",
            "location": 45,
            "return": [
                "_NotImplementedType"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmbeddingLayer.d": {
            "name": "d",
            "location": 49,
            "return": [
                "Tuple[(None, Any)]"
            ],
            "arguments": {
                "self": [],
                "djdy": []
            }
        },
        "EmbeddingLayer.forward": {
            "name": "forward",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "EmbeddingLayer.backward": {
            "name": "backward",
            "location": 71,
            "return": [
                "Tuple[(Any, _T1)]"
            ],
            "arguments": {
                "self": [],
                "djdy": [],
                "eta": [
                    "_T1"
                ]
            }
        },
        "EmbeddingLayer._update_Thetas": {
            "name": "_update_Thetas",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eta": []
            }
        }
    },
    "nntool-master/nntool/layer/linear_layer.py": {
        "LinearNeuronLayer.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "init_factory": []
            }
        },
        "LinearNeuronLayer.size": {
            "name": "size",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinearNeuronLayer.forward": {
            "name": "forward",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "LinearNeuronLayer._d_Theta": {
            "name": "_d_Theta",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinearNeuronLayer._d_x": {
            "name": "_d_x",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinearNeuronLayer.d": {
            "name": "d",
            "location": 42,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "djdys": []
            }
        },
        "LinearNeuronLayer.backward": {
            "name": "backward",
            "location": 48,
            "return": [
                "Tuple[(Any, _T1)]"
            ],
            "arguments": {
                "self": [],
                "djdys": [],
                "eta": [
                    "_T1"
                ]
            }
        },
        "LinearNeuronLayer.update_Theta": {
            "name": "update_Theta",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eta": []
            }
        }
    },
    "nntool-master/nntool/layer/linear_layer_old.py": {
        "LinearNeuronLayer.forward": {
            "name": "forward",
            "location": 7,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "LinearNeuronLayer.backward": {
            "name": "backward",
            "location": 22,
            "return": [
                "Tuple[(np.ndarray, _T1)]"
            ],
            "arguments": {
                "self": [],
                "djdys": [],
                "eta": [
                    "_T1"
                ]
            }
        },
        "LinearNeuronLayer.update_Theta": {
            "name": "update_Theta",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eta": []
            }
        },
        "LinearNeuronLayer.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "init_factory": []
            }
        },
        "LinearNeuronLayer.size": {
            "name": "size",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "nntool-master/nntool/layer/relu.py": {
        "ReLULayer.forward": {
            "name": "forward",
            "location": 14,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ReLULayer.backward": {
            "name": "backward",
            "location": 26,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "djdys": [],
                "eta": []
            }
        },
        "ReLULayer.d_x": {
            "name": "d_x",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "nntool-master/nntool/layer/sigmoid_layer.py": {
        "SigmoidLayer.forward": {
            "name": "forward",
            "location": 13,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "SigmoidLayer.size": {
            "name": "size",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigmoidLayer.backward": {
            "name": "backward",
            "location": 27,
            "return": [
                "Tuple[(Any, _T1)]"
            ],
            "arguments": {
                "self": [],
                "djdys": [],
                "eta": [
                    "_T1"
                ]
            }
        },
        "SigmoidLayer.d_x": {
            "name": "d_x",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "nntool-master/nntool/layer/softmax_layer.py": {
        "SoftmaxLayer.forward": {
            "name": "forward",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "SoftmaxLayer.size": {
            "name": "size",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SoftmaxLayer.backward": {
            "name": "backward",
            "location": 25,
            "return": [
                "Tuple[(Any, _T1)]"
            ],
            "arguments": {
                "self": [],
                "djdys": [],
                "eta": [
                    "_T1"
                ]
            }
        },
        "SoftmaxLayer.d": {
            "name": "d",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "y": []
            }
        }
    },
    "nntool-master/nntool/layer/tanh_layer.py": {
        "TanhLayer.forward": {
            "name": "forward",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "TanhLayer.backward": {
            "name": "backward",
            "location": 17,
            "return": [
                "Tuple[(Any, _T1)]"
            ],
            "arguments": {
                "self": [],
                "djdys": [],
                "eta": [
                    "_T1"
                ]
            }
        },
        "TanhLayer.size": {
            "name": "size",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TanhLayer.d_x": {
            "name": "d_x",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TanhLayer.d": {
            "name": "d",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "y": []
            }
        }
    },
    "nntool-master/nntool/layer/__init__.py": {},
    "nntool-master/nntool/model/sequential.py": {
        "Sequential.add": {
            "name": "add",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layer": []
            }
        },
        "Sequential.trained": {
            "name": "trained",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sequential.train": {
            "name": "train",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trainner": []
            }
        },
        "Sequential.fit": {
            "name": "fit",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dev_x": [],
                "dev_y": []
            }
        },
        "Sequential._forward": {
            "name": "_forward",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "i": [
                    "int"
                ]
            }
        },
        "Sequential.predict_probability": {
            "name": "predict_probability",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "x_test": []
            }
        },
        "Sequential.predict": {
            "name": "predict",
            "location": 51,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "x_test": []
            }
        }
    },
    "nntool-master/nntool/model/__init__.py": {},
    "nntool-master/nntool/neuronabc/linear_neuron.py": {
        "LinearNeuron.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Theta": []
            }
        },
        "LinearNeuron.__call__": {
            "name": "__call__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "LinearNeuron.d_Theta": {
            "name": "d_Theta",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinearNeuron.d_x": {
            "name": "d_x",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinearNeuron.d": {
            "name": "d",
            "location": 36,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "djdy": []
            }
        },
        "LinearNeuron.update_Theta": {
            "name": "update_Theta",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_Theta": []
            }
        }
    },
    "nntool-master/nntool/neuronabc/__init__.py": {},
    "nntool-master/nntool/objective/__init__.py": {},
    "nntool-master/nntool/objective/loss_function/corss_entropy.py": {
        "CrossEntropy.__call__": {
            "name": "__call__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "hat_y": [],
                "y": []
            }
        },
        "CrossEntropy.backward": {
            "name": "backward",
            "location": 13,
            "return": [
                "Tuple[(Any, _T0)]"
            ],
            "arguments": {
                "self": [],
                "eta": [
                    "_T0"
                ]
            }
        },
        "CrossEntropy.d": {
            "name": "d",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "djdy": [],
                "eta": []
            }
        }
    },
    "nntool-master/nntool/objective/loss_function/hinge.py": {
        "hinge": {
            "name": "hinge",
            "location": 2,
            "return": [
                "int"
            ],
            "arguments": {
                "y": [],
                "out": []
            }
        }
    },
    "nntool-master/nntool/objective/loss_function/mle.py": {
        "mle": {
            "name": "mle",
            "location": 2,
            "return": [
                "_NotImplementedType"
            ],
            "arguments": {
                "y": [],
                "out": []
            }
        }
    },
    "nntool-master/nntool/objective/loss_function/mse.py": {
        "MSE.__call__": {
            "name": "__call__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "hat_y": [],
                "y": []
            }
        },
        "MSE.dx": {
            "name": "dx",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nntool-master/nntool/objective/loss_function/square_loss.py": {
        "square_loss": {
            "name": "square_loss",
            "location": 2,
            "return": [],
            "arguments": {
                "y": [],
                "out": []
            }
        }
    },
    "nntool-master/nntool/objective/loss_function/__init__.py": {},
    "nntool-master/nntool/objective/regularizer/l2.py": {
        "L2_Norm.__call__": {
            "name": "__call__",
            "location": 6,
            "return": [],
            "arguments": {
                "Theta": [
                    "L2_Norm"
                ]
            }
        },
        "L2_Norm.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lambd": []
            }
        },
        "L2_Norm.dx": {
            "name": "dx",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nntool-master/nntool/objective/regularizer/__init__.py": {},
    "nntool-master/nntool/optimizer/BGD.py": {
        "BGDRuner.forward": {
            "name": "forward",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "i": []
            }
        },
        "BGDRuner.backward": {
            "name": "backward",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "y": [],
                "eta": [],
                "i": []
            }
        },
        "BGDRuner.__call__": {
            "name": "__call__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "BGDRuner.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "Y": [],
                "objective": []
            }
        }
    },
    "nntool-master/nntool/optimizer/__init__.py": {},
    "nntool-master/nntool/utils/init_factory.py": {
        "normal_factory": {
            "name": "normal_factory",
            "location": 6,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "range_": [
                    "tuple[typing.Union[int,float]]"
                ]
            }
        },
        "uniform_factory": {
            "name": "uniform_factory",
            "location": 11,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "range_": [
                    "tuple[typing.Union[int,float]]"
                ]
            }
        },
        "normal_factory._warp": {
            "name": "_warp",
            "location": 7,
            "return": [],
            "arguments": {
                "size": []
            }
        },
        "uniform_factory._warp": {
            "name": "_warp",
            "location": 12,
            "return": [],
            "arguments": {
                "size": []
            }
        }
    },
    "nntool-master/nntool/utils/one_hot.py": {
        "OneHot.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, 'LabwareDefinition']",
                    "dict[str, 'LabwareDefinition']"
                ],
                "seq": [
                    "List[int]",
                    "list[int]",
                    "list",
                    "list[]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "OneHot._encode": {
            "name": "_encode",
            "location": 10,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "typing.Callable[str, T]",
                    "Callable[[str], T]",
                    "dict[str, dict[str, str]]",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "OneHot.encode": {
            "name": "encode",
            "location": 16,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Mapping[str, Any]"
                ]
            }
        },
        "OneHot._decode": {
            "name": "_decode",
            "location": 23,
            "return": [
                "int",
                "str",
                "Callable",
                "dict[str, int]",
                "bool",
                "None",
                "set[str]",
                "tuple[typing.Union[int,int,int]]"
            ],
            "arguments": {
                "self": [],
                "onehot": [
                    "List['world.PerceivedNoise']",
                    "Union[int, float]",
                    "int",
                    "Callable"
                ]
            }
        },
        "OneHot.decode": {
            "name": "decode",
            "location": 34,
            "return": [
                "list[]",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "onehot": [
                    "str"
                ]
            }
        }
    },
    "nntool-master/nntool/utils/__init__.py": {},
    "nntool-master/test/__init__.py": {}
}
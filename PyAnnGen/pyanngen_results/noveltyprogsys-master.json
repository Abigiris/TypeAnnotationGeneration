{
    "noveltyprogsys-master/src/PonyGE2/datasets/process_banknote.py": {},
    "noveltyprogsys-master/src/PonyGE2/datasets/process_housing.py": {
        "normalise": {
            "name": "normalise",
            "location": 31,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ],
                "minv": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ],
                "maxv": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/datasets/process_tower.py": {
        "scale": {
            "name": "scale",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": []
            }
        },
        "normalise": {
            "name": "normalise",
            "location": 66,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": [],
                "minv": [],
                "maxv": []
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/ponyge.py": {
        "mane": {
            "name": "mane",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/__init__.py": {},
    "noveltyprogsys-master/src/PonyGE2/src/agent/agent.py": {
        "Agent.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ip": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Agent.sense": {
            "name": "sense",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agents": [
                    "Sequence[T]",
                    "Callable[[], float]",
                    "List[List[int]]",
                    "int"
                ]
            }
        },
        "Agent.act": {
            "name": "act",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.update": {
            "name": "update",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/algorithm/hill_climbing.py": {
        "LAHC_search_loop": {
            "name": "LAHC_search_loop",
            "location": 58,
            "return": [
                "int",
                "list",
                "str"
            ],
            "arguments": {}
        },
        "SCHC_search_loop": {
            "name": "SCHC_search_loop",
            "location": 150,
            "return": [
                "int",
                "list",
                "str"
            ],
            "arguments": {}
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/algorithm/mapper.py": {
        "mapper": {
            "name": "mapper",
            "location": 9,
            "return": [
                "Tuple[(Any, Any, Any, Any, Any, Any, Any, Dict[(Any, int)])]"
            ],
            "arguments": {
                "genome": [
                    "list[]"
                ],
                "tree": []
            }
        },
        "derivation_dic_from_tree": {
            "name": "derivation_dic_from_tree",
            "location": 71,
            "return": [
                "Dict[(Any, nothing)]"
            ],
            "arguments": {
                "tree": [
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "map_ind_from_genome": {
            "name": "map_ind_from_genome",
            "location": 87,
            "return": [
                "Tuple[(Optional[str], _T0, None, int, bool, int, int, Dict[(Any, int)])]"
            ],
            "arguments": {
                "genome": [
                    "_T0@@"
                ]
            }
        },
        "map_tree_from_genome": {
            "name": "map_tree_from_genome",
            "location": 203,
            "return": [
                "Tuple[(Optional[str], _T0, Any, Any, Any, Any, Any)]"
            ],
            "arguments": {
                "genome": [
                    "str",
                    "None"
                ]
            }
        },
        "genome_tree_map": {
            "name": "genome_tree_map",
            "location": 231,
            "return": [
                "Tuple[(Any, Any, Any, Any, Any, Any)]"
            ],
            "arguments": {
                "tree": [
                    "list[float]",
                    "None",
                    "bool",
                    "typing.Sequence[str]"
                ],
                "genome": [],
                "output": [
                    "int",
                    "list[typing.Optional['Cell']]",
                    "str",
                    "None",
                    "list[str]"
                ],
                "index": [
                    "_T3@@"
                ],
                "depth": [
                    "int"
                ],
                "max_depth": [
                    "int",
                    "float"
                ],
                "nodes": [
                    "int",
                    "list[str]"
                ],
                "invalid": [
                    "bool"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/algorithm/parameters.py": {
        "load_params": {
            "name": "load_params",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        },
        "set_params": {
            "name": "set_params",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "command_line_args": [
                    "dict[str, typing.Any]",
                    "str",
                    "None"
                ],
                "create_files": [
                    "bool"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/algorithm/search_loop.py": {
        "search_loop": {
            "name": "search_loop",
            "location": 12,
            "return": [
                "int",
                "List",
                "Tuple[Union[float,float]]",
                "str",
                "List[tuple[Union[Any,Any]]]",
                "float"
            ],
            "arguments": {}
        },
        "set_max_cache_size": {
            "name": "set_max_cache_size",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "individuals": [
                    "str",
                    "int",
                    "Iterable[int]"
                ]
            }
        },
        "search_loop_from_state": {
            "name": "search_loop_from_state",
            "location": 67,
            "return": [
                "str",
                "int",
                "List[int]",
                "bytes",
                "List",
                "Dict",
                "List[Dict[str,Any]]"
            ],
            "arguments": {}
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/algorithm/step.py": {
        "step": {
            "name": "step",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "individuals": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "steady_state_step": {
            "name": "steady_state_step",
            "location": 42,
            "return": [
                "str",
                "int",
                "List[None]",
                "Dict[str,str]"
            ],
            "arguments": {
                "individuals": [
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/algorithm/__init__.py": {},
    "noveltyprogsys-master/src/PonyGE2/src/algorithm/distributed_algorithm/search_loop.py": {
        "create_agents": {
            "name": "create_agents",
            "location": 9,
            "return": [
                "List[Agent]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "p": [
                    "int"
                ]
            }
        },
        "search_loop": {
            "name": "search_loop",
            "location": 16,
            "return": [
                "List",
                "bool",
                "int",
                "List[Dict[str,Any]]",
                "frozenset"
            ],
            "arguments": {}
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/algorithm/distributed_algorithm/step.py": {
        "step": {
            "name": "step",
            "location": 2,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "agents": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/algorithm/distributed_algorithm/__init__.py": {},
    "noveltyprogsys-master/src/PonyGE2/src/experimental/__init__.py": {},
    "noveltyprogsys-master/src/PonyGE2/src/fitness/evaluation.py": {
        "evaluate_fitness": {
            "name": "evaluate_fitness",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "individuals": [
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        },
        "eval_or_append": {
            "name": "eval_or_append",
            "location": 116,
            "return": [
                "Optional[_T1]"
            ],
            "arguments": {
                "ind": [
                    "Optional[str]",
                    "Iterable[Any]"
                ],
                "results": [
                    "Dict[str,bool]",
                    "str",
                    "pandas.DataFrame"
                ],
                "pool": [
                    "Dict[str,bool]",
                    "str",
                    "pandas.DataFrame"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/fitness/minimise_nodes.py": {
        "minimise_nodes.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "minimise_nodes.evaluate": {
            "name": "evaluate",
            "location": 14,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "ind": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/fitness/novelty.py": {
        "novelty.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "novelty.evaluate": {
            "name": "evaluate",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ind": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "novelty.basic": {
            "name": "basic",
            "location": 26,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "ind": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "novelty.evaluate_distance": {
            "name": "evaluate_distance",
            "location": 32,
            "return": [
                "int",
                "float",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ind": [
                    "str",
                    "int",
                    "numpy.ndarray"
                ],
                "novelty_alg": [
                    "Text",
                    "str",
                    "int",
                    "float",
                    "Union[float,int]"
                ],
                "max_comparisons": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "novelty.compare_tree_dicts": {
            "name": "compare_tree_dicts",
            "location": 110,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "tree_dic1": [
                    "List[str]",
                    "List",
                    "int"
                ],
                "tree_dic2": [
                    "List[str]",
                    "List[dict[str,Any]]",
                    "bytearray",
                    "Dict[str,Any]",
                    "Type",
                    "List[Dict[str,Any]]",
                    "str"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/fitness/progsys.py": {
        "progsys.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "progsys.evaluate": {
            "name": "evaluate",
            "location": 46,
            "return": [
                "Tuple[Union[str,Any]]",
                "bool",
                "str",
                "lightbus.path.BusPath",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "ind": [
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "progsys.run_program": {
            "name": "run_program",
            "location": 104,
            "return": [
                "Dict[Text,bool]",
                "str",
                "int",
                "Set[str]",
                "Mapping[str,int]",
                "bool",
                "Parameter"
            ],
            "arguments": {
                "self": [],
                "program": [
                    "str",
                    "int",
                    "List",
                    "bool"
                ]
            }
        },
        "progsys.create_flat_AST": {
            "name": "create_flat_AST",
            "location": 110,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "program": [
                    "str",
                    "bool",
                    "Callable",
                    "None",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "progsys.create_eval_process": {
            "name": "create_eval_process",
            "location": 122,
            "return": [
                "subprocess.Popen[bytes]"
            ],
            "arguments": {}
        },
        "progsys.format_program": {
            "name": "format_program",
            "location": 129,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "individual": [
                    "Dict[str,Any]",
                    "str",
                    "int",
                    "float"
                ],
                "header": [
                    "dict"
                ],
                "footer": [
                    "Dict[str,Any]",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "progsys.format_individual": {
            "name": "format_individual",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ],
                "additional_indent": [
                    "Text",
                    "str",
                    "int"
                ]
            }
        },
        "progsys.get_data": {
            "name": "get_data",
            "location": 192,
            "return": [
                "Tuple[(str, str, str, str)]"
            ],
            "arguments": {
                "self": [],
                "train": [
                    "str",
                    "Union[tuple,list]",
                    "int",
                    "Optional[Dict]",
                    "Tuple",
                    "List",
                    "Dict",
                    "None"
                ],
                "test": [
                    "str",
                    "Union[tuple,list]",
                    "int",
                    "Optional[Dict]",
                    "Tuple",
                    "List",
                    "Dict",
                    "None"
                ],
                "grammar": [
                    "str",
                    "List[int]",
                    "bytes"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/fitness/pymax.py": {
        "pymax.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "pymax.evaluate": {
            "name": "evaluate",
            "location": 24,
            "return": [
                "str",
                "bytes",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "ind": [
                    "int",
                    "List",
                    "str"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/fitness/sequence_match.py": {
        "succ": {
            "name": "succ",
            "location": 31,
            "return": [
                "int",
                "str",
                "Dict"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "maxv": [
                    "int"
                ]
            }
        },
        "pred": {
            "name": "pred",
            "location": 43,
            "return": [
                "int",
                "str",
                "Dict"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "minv": [
                    "int"
                ]
            }
        },
        "truncate": {
            "name": "truncate",
            "location": 55,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "g": [
                    "int"
                ]
            }
        },
        "dist": {
            "name": "dist",
            "location": 69,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "t0": [
                    "float",
                    "str"
                ],
                "x0": [
                    "float",
                    "str"
                ]
            }
        },
        "dtw_dist": {
            "name": "dtw_dist",
            "location": 81,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "s": [
                    "int"
                ],
                "t": [
                    "int"
                ]
            }
        },
        "lev_dist": {
            "name": "lev_dist",
            "location": 97,
            "return": [
                "float"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Sequence[int]"
                ],
                "t": [
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "compress": {
            "name": "compress",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "compressibility": {
            "name": "compressibility",
            "location": 125,
            "return": [
                "float"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bool",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "proglen": {
            "name": "proglen",
            "location": 137,
            "return": [
                "float"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "sequence_match.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "sequence_match.evaluate": {
            "name": "evaluate",
            "location": 170,
            "return": [
                "float",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "ind": [
                    "int",
                    "List",
                    "str"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/fitness/string_match.py": {
        "string_match.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "string_match.evaluate": {
            "name": "evaluate",
            "location": 18,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "self": [],
                "ind": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/fitness/__init__.py": {},
    "noveltyprogsys-master/src/PonyGE2/src/fitness/base_ff_classes/base_ff.py": {
        "base_ff.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "base_ff.__call__": {
            "name": "__call__",
            "location": 23,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "ind": [
                    "str",
                    "Deque",
                    "Callable",
                    "int",
                    "Union[int,slice]",
                    "numpy.ndarray"
                ]
            }
        },
        "base_ff.evaluate": {
            "name": "evaluate",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ind": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/fitness/base_ff_classes/ff_template.py": {
        "ff_template.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ff_template.evaluate": {
            "name": "evaluate",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ind": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/fitness/base_ff_classes/moo_ff.py": {
        "moo_ff.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fitness_functions": [
                    "bool",
                    "numpy.ndarray",
                    "List[str]"
                ]
            }
        },
        "moo_ff.__call__": {
            "name": "__call__",
            "location": 38,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "ind": [
                    "Callable",
                    "int",
                    "float"
                ]
            }
        },
        "moo_ff.value": {
            "name": "value",
            "location": 61,
            "return": [
                "float",
                "str",
                "numpy.ndarray",
                "Union[str,int,float]",
                "Dict[str,numpy.ndarray]",
                "Dict"
            ],
            "arguments": {
                "fitness_vector": [
                    "str",
                    "List",
                    "float",
                    "Optional[Union[str,Any]]",
                    "int",
                    "Callable"
                ],
                "objective_index": [
                    "int",
                    "numpy.ndarray",
                    "Union[str,int,float]",
                    "float",
                    "Dict[str,numpy.ndarray]",
                    "Dict"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/fitness/base_ff_classes/__init__.py": {},
    "noveltyprogsys-master/src/PonyGE2/src/fitness/multi_objective/binary_phenotype_to_float.py": {
        "binary_phenotype_to_float.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "binary_phenotype_to_float.evaluate": {
            "name": "evaluate",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ind": [
                    "int"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/fitness/multi_objective/singlefit_multiobj.py": {
        "singlefit_multiobj.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "singlefit_multiobj.evaluate": {
            "name": "evaluate",
            "location": 33,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "ind": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "singlefit_multiobj.value": {
            "name": "value",
            "location": 52,
            "return": [
                "float",
                "str",
                "numpy.ndarray",
                "Union[str,int,float]",
                "Dict[str,numpy.ndarray]",
                "Dict"
            ],
            "arguments": {
                "fitness_vector": [
                    "str",
                    "List",
                    "float",
                    "Optional[Union[str,Any]]",
                    "int",
                    "Callable"
                ],
                "objective_index": [
                    "int",
                    "numpy.ndarray",
                    "Union[str,int,float]",
                    "float",
                    "Dict[str,numpy.ndarray]",
                    "Dict"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/fitness/multi_objective/zdt1.py": {
        "zdt1.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "zdt1.evaluate": {
            "name": "evaluate",
            "location": 21,
            "return": [
                "int",
                "float",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ind": [
                    "int"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/fitness/multi_objective/__init__.py": {},
    "noveltyprogsys-master/src/PonyGE2/src/fitness/regex/RegexEval.py": {
        "RegexEval.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegexEval.call_fitness": {
            "name": "call_fitness",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "individual": [
                    "Callable",
                    "Dict[str,Any]",
                    "T"
                ],
                "q": [
                    "str",
                    "multiprocessing.Queue"
                ]
            }
        },
        "RegexEval.calculate_fitness": {
            "name": "calculate_fitness",
            "location": 68,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "eval_results": [
                    "List[str]",
                    "bool",
                    "Iterable",
                    "Optional[List[str]]"
                ]
            }
        },
        "RegexEval.test_regex": {
            "name": "test_regex",
            "location": 85,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "compiled_regex": [
                    "str"
                ]
            }
        },
        "RegexEval.evaluate": {
            "name": "evaluate",
            "location": 101,
            "return": [
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "ind": [
                    "Tuple",
                    "List[str]",
                    "Dict[str,Any]",
                    "List",
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/fitness/regex/__init__.py": {},
    "noveltyprogsys-master/src/PonyGE2/src/fitness/regex/testing/RegexTest.py": {
        "RegexTest.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "search_string": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "RegexTest.calc_match_errors": {
            "name": "calc_match_errors",
            "location": 12,
            "return": [
                "int",
                "List[dict]",
                "List",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "match_candidates": [
                    "list",
                    "Tuple[int, int]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "RegexTest.find_missing_range": {
            "name": "find_missing_range",
            "location": 33,
            "return": [
                "int",
                "Dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "a_known_match": [
                    "Optional[int]",
                    "str",
                    "float",
                    "Optional[str]"
                ],
                "match_ranges": [
                    "List",
                    "bool",
                    "int"
                ]
            }
        },
        "RegexTest.find_undesired_range": {
            "name": "find_undesired_range",
            "location": 58,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "match_candidate": [
                    "bool"
                ],
                "known_matches": [
                    "List[str]",
                    "bool",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/fitness/regex/testing/RegexTestGenerator.py": {
        "generate_equivalence_test_suite_replacement": {
            "name": "generate_equivalence_test_suite_replacement",
            "location": 7,
            "return": [
                "list"
            ],
            "arguments": {
                "a_match": [
                    "str"
                ],
                "compiled_regex": [
                    "str",
                    "Callable",
                    "int",
                    "Dict[str,Tuple[str,int,int]]",
                    "Dict[str,tuple[Union[str,int,int]]]"
                ]
            }
        },
        "generate_equivalence_test_suite_length": {
            "name": "generate_equivalence_test_suite_length",
            "location": 40,
            "return": [
                "list"
            ],
            "arguments": {
                "a_match": [
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "compiled_regex": [
                    "str",
                    "int"
                ]
            }
        },
        "add_test_case_if_fails": {
            "name": "add_test_case_if_fails",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "new_search_string": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]",
                    "None"
                ],
                "compiled_regex": [
                    "str",
                    "int"
                ],
                "test_cases": [
                    "List",
                    "List[int]",
                    "str",
                    "Callable[[str],int]",
                    "int"
                ]
            }
        },
        "generate_test_suite": {
            "name": "generate_test_suite",
            "location": 89,
            "return": [
                "list"
            ],
            "arguments": {
                "regex_string": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "add_re_match_to_test": {
            "name": "add_re_match_to_test",
            "location": 183,
            "return": [
                "str",
                "List",
                "Set[str]",
                "Tuple[str]",
                "Dict[str,str]",
                "Optional[str]",
                "Dict",
                "Sequence[str]"
            ],
            "arguments": {
                "matches": [
                    "str",
                    "List",
                    "Set[str]"
                ],
                "passing_test_string": [
                    "str",
                    "List",
                    "Set[str]"
                ]
            }
        },
        "generate_tests_if_string_match": {
            "name": "generate_tests_if_string_match",
            "location": 199,
            "return": [
                "list"
            ],
            "arguments": {
                "compiled_regex": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "test_string": [
                    "str"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/fitness/regex/testing/RegexTimer.py": {
        "time_regex_test_case": {
            "name": "time_regex_test_case",
            "location": 17,
            "return": [
                "List[Union[dict,None,str,int,Sequence[str],Callable,list[Optional[Cell]]]]",
                "Callable",
                "int",
                "Dict"
            ],
            "arguments": {
                "compiled_regex": [
                    "int",
                    "Optional[int]",
                    "None",
                    "str",
                    "Optional[bool]",
                    "Optional[str]",
                    "bool"
                ],
                "test_case": [
                    "str",
                    "bool",
                    "Callable",
                    "List[Optional[Cell]]",
                    "Optional[Sequence[str]]",
                    "List[float]",
                    "Sequence[str]",
                    "None"
                ],
                "iterations": [
                    "Optional[Dict]",
                    "str",
                    "Dict",
                    "int",
                    "None"
                ]
            }
        },
        "time_regex_test_case.wrap": {
            "name": "wrap",
            "location": 31,
            "return": [
                "List",
                "str",
                "Callable[[KT],VT]",
                "float"
            ],
            "arguments": {}
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/fitness/regex/testing/__init__.py": {},
    "noveltyprogsys-master/src/PonyGE2/src/fitness/supervised_learning/boolean_problem.py": {
        "boolean_true": {
            "name": "boolean_true",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "Dict[str,Any]",
                    "float"
                ]
            }
        },
        "comparator": {
            "name": "comparator",
            "location": 69,
            "return": [
                "bool",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float"
                ]
            }
        },
        "multiplexer": {
            "name": "multiplexer",
            "location": 77,
            "return": [
                "List[Dict[str, Any]]",
                "str",
                "Dict[str, int]",
                "bool"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "nparity": {
            "name": "nparity",
            "location": 91,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        },
        "make_random_boolean_fn": {
            "name": "make_random_boolean_fn",
            "location": 96,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "binlist2int": {
            "name": "binlist2int",
            "location": 108,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "Callable[,Any]",
                    "Union[str,int]"
                ]
            }
        },
        "boolean_problem.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "make_random_boolean_fn.f": {
            "name": "f",
            "location": 100,
            "return": [
                "str",
                "dict",
                "Union[numpy.ndarray, astropy.units.quantity.Quantity]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/fitness/supervised_learning/classification.py": {
        "classification.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/fitness/supervised_learning/if_else_classifier.py": {
        "target_classifier": {
            "name": "target_classifier",
            "location": 79,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "n_vars": [
                    "int",
                    "str",
                    "bool"
                ],
                "n_is": [
                    "int",
                    "str",
                    "bool"
                ],
                "n_os": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "if_else_classifier.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "target_classifier.target": {
            "name": "target",
            "location": 80,
            "return": [
                "int",
                "numpy.ndarray",
                "float",
                "bool"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/fitness/supervised_learning/regression.py": {
        "regression.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/fitness/supervised_learning/regression_random_polynomial.py": {
        "regression_random_polynomial.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Polynomial.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "degree": [
                    "int",
                    "str",
                    "List"
                ],
                "n_vars": [
                    "int",
                    "float",
                    "Callable",
                    "List[int]",
                    "numpy.ndarray",
                    "bool"
                ],
                "coefs": [
                    "int",
                    "str",
                    "List"
                ]
            }
        },
        "Polynomial.from_random": {
            "name": "from_random",
            "location": 79,
            "return": [
                "Polynomial"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPolynomial]"
                ],
                "degree": [
                    "int",
                    "float",
                    "str"
                ],
                "n_vars": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "Polynomial.terms": {
            "name": "terms",
            "location": 86,
            "return": [
                "Generator[(tuple, Any, None)]"
            ],
            "arguments": {
                "degree": [
                    "int"
                ],
                "n_vars": [
                    "int"
                ]
            }
        },
        "Polynomial.eval": {
            "name": "eval",
            "location": 93,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "numpy.ndarray"
                ]
            }
        },
        "Polynomial.__str__": {
            "name": "__str__",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Polynomial.__str__.s": {
            "name": "s",
            "location": 107,
            "return": [
                "Text",
                "bool",
                "vistautils.parameters.Parameters",
                "int"
            ],
            "arguments": {
                "pows": [
                    "str",
                    "List[str]",
                    "numpy.ndarray",
                    "bytes"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/fitness/supervised_learning/supervised_learning.py": {
        "supervised_learning.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "supervised_learning.evaluate": {
            "name": "evaluate",
            "location": 43,
            "return": [
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "ind": [
                    "int",
                    "Tuple",
                    "float",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/fitness/supervised_learning/__init__.py": {},
    "noveltyprogsys-master/src/PonyGE2/src/operators/crossover.py": {
        "crossover": {
            "name": "crossover",
            "location": 10,
            "return": [
                "list"
            ],
            "arguments": {
                "parents": [
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "crossover_inds": {
            "name": "crossover_inds",
            "location": 48,
            "return": [
                "None",
                "list[]",
                "list[str]",
                "str"
            ],
            "arguments": {
                "parent_0": [],
                "parent_1": []
            }
        },
        "variable_onepoint": {
            "name": "variable_onepoint",
            "location": 84,
            "return": [
                "list"
            ],
            "arguments": {
                "p_0": [
                    "bool"
                ],
                "p_1": [
                    "bool"
                ]
            }
        },
        "fixed_onepoint": {
            "name": "fixed_onepoint",
            "location": 121,
            "return": [
                "list"
            ],
            "arguments": {
                "p_0": [
                    "bool",
                    "str",
                    "list[dict[str, typing.Any]]"
                ],
                "p_1": [
                    "bool",
                    "str",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "fixed_twopoint": {
            "name": "fixed_twopoint",
            "location": 157,
            "return": [
                "list"
            ],
            "arguments": {
                "p_0": [
                    "bool",
                    "str",
                    "list[dict[str, typing.Any]]"
                ],
                "p_1": [
                    "bool",
                    "str",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "variable_twopoint": {
            "name": "variable_twopoint",
            "location": 193,
            "return": [
                "list"
            ],
            "arguments": {
                "p_0": [
                    "bool"
                ],
                "p_1": [
                    "bool"
                ]
            }
        },
        "subtree": {
            "name": "subtree",
            "location": 231,
            "return": [
                "list"
            ],
            "arguments": {
                "p_0": [
                    "int"
                ],
                "p_1": [
                    "int"
                ]
            }
        },
        "get_max_genome_index": {
            "name": "get_max_genome_index",
            "location": 402,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "ind_0": [
                    "int",
                    "str",
                    "list[str]",
                    "typing.Sequence[typing.Any]",
                    "dict[str, int]"
                ],
                "ind_1": [
                    "int",
                    "str",
                    "list[str]",
                    "typing.Sequence[typing.Any]",
                    "dict[str, int]"
                ]
            }
        },
        "LTGE_crossover": {
            "name": "LTGE_crossover",
            "location": 438,
            "return": [
                "list"
            ],
            "arguments": {
                "p_0": [
                    "list[str]",
                    "list[dict[str, typing.Any]]"
                ],
                "p_1": [
                    "list[str]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "subtree.do_crossover": {
            "name": "do_crossover",
            "location": 242,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "tree0": [],
                "tree1": [],
                "shared_nodes": []
            }
        },
        "subtree.intersect": {
            "name": "intersect",
            "location": 324,
            "return": [
                "list[]"
            ],
            "arguments": {
                "l0": [],
                "l1": []
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/operators/initialisation.py": {
        "initialisation": {
            "name": "initialisation",
            "location": 15,
            "return": [
                "list[]"
            ],
            "arguments": {
                "size": [
                    "int"
                ]
            }
        },
        "sample_genome": {
            "name": "sample_genome",
            "location": 39,
            "return": [
                "List[int]"
            ],
            "arguments": {}
        },
        "uniform_genome": {
            "name": "uniform_genome",
            "location": 50,
            "return": [
                "list"
            ],
            "arguments": {
                "size": [
                    "int",
                    "None"
                ]
            }
        },
        "uniform_tree": {
            "name": "uniform_tree",
            "location": 61,
            "return": [
                "list"
            ],
            "arguments": {
                "size": [
                    "int",
                    "None"
                ]
            }
        },
        "seed_individuals": {
            "name": "seed_individuals",
            "location": 73,
            "return": [
                "list"
            ],
            "arguments": {
                "size": [
                    "int",
                    "float"
                ]
            }
        },
        "rhh": {
            "name": "rhh",
            "location": 117,
            "return": [
                "list"
            ],
            "arguments": {
                "size": [
                    "int"
                ]
            }
        },
        "PI_grow": {
            "name": "PI_grow",
            "location": 206,
            "return": [
                "list"
            ],
            "arguments": {
                "size": []
            }
        },
        "generate_ind_tree": {
            "name": "generate_ind_tree",
            "location": 275,
            "return": [
                "Individual"
            ],
            "arguments": {
                "max_depth": [
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "method": [
                    "str",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "generate_PI_ind_tree": {
            "name": "generate_PI_ind_tree",
            "location": 313,
            "return": [
                "Individual"
            ],
            "arguments": {
                "max_depth": [
                    "int",
                    "None"
                ]
            }
        },
        "load_population": {
            "name": "load_population",
            "location": 351,
            "return": [
                "list"
            ],
            "arguments": {
                "target": [
                    "str"
                ]
            }
        },
        "LTGE_initialisation": {
            "name": "LTGE_initialisation",
            "location": 460,
            "return": [
                "list"
            ],
            "arguments": {
                "size": [
                    "int",
                    "tuple[]",
                    "float",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/operators/mutation.py": {
        "mutation": {
            "name": "mutation",
            "location": 11,
            "return": [
                "list"
            ],
            "arguments": {
                "pop": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "int_flip_per_codon": {
            "name": "int_flip_per_codon",
            "location": 62,
            "return": [
                "Dict[str,Any]",
                "int",
                "float",
                "List[str]"
            ],
            "arguments": {
                "ind": [
                    "int",
                    "Union[int,float]",
                    "List[str]",
                    "float"
                ]
            }
        },
        "int_flip_per_ind": {
            "name": "int_flip_per_ind",
            "location": 107,
            "return": [
                "Dict[str,Any]",
                "float",
                "int"
            ],
            "arguments": {
                "ind": [
                    "float",
                    "int"
                ]
            }
        },
        "subtree": {
            "name": "subtree",
            "location": 135,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ind": [
                    "float",
                    "int"
                ]
            }
        },
        "get_effective_length": {
            "name": "get_effective_length",
            "location": 204,
            "return": [
                "None",
                "int",
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "Dict"
            ],
            "arguments": {
                "ind": [
                    "List[int]",
                    "int",
                    "Tuple[int]",
                    "bool"
                ]
            }
        },
        "LTGE_mutation": {
            "name": "LTGE_mutation",
            "location": 230,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ind": [
                    "str",
                    "int"
                ]
            }
        },
        "subtree.subtree_mutate": {
            "name": "subtree_mutate",
            "location": 145,
            "return": [
                "str",
                "BaseException",
                "Optional[BaseException]"
            ],
            "arguments": {
                "ind_tree": [
                    "str",
                    "Dict[str, int]",
                    "dict"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/operators/replacement.py": {
        "replacement": {
            "name": "replacement",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "new_pop": [
                    "int",
                    "float",
                    "bool"
                ],
                "old_pop": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "generational": {
            "name": "generational",
            "location": 22,
            "return": [
                "int",
                "Union[RangeSet[T],Iterable[Any]]",
                "Callable",
                "Sequence[cirq.Qid]"
            ],
            "arguments": {
                "new_pop": [
                    "Dict[str, Any]",
                    "str",
                    "bool",
                    "Match",
                    "int"
                ],
                "old_pop": [
                    "int",
                    "str",
                    "Iterable[Any]",
                    "List[str]"
                ]
            }
        },
        "steady_state": {
            "name": "steady_state",
            "location": 49,
            "return": [
                "int",
                "List",
                "str",
                "Dict[str,str]",
                "List[str]",
                "List[int]",
                "Set[str]",
                "Dict"
            ],
            "arguments": {
                "individuals": [
                    "List",
                    "int",
                    "str"
                ]
            }
        },
        "nsga2_replacement": {
            "name": "nsga2_replacement",
            "location": 106,
            "return": [
                "list"
            ],
            "arguments": {
                "new_pop": [
                    "List[Union[int,float]]",
                    "bool",
                    "Union[int,float]",
                    "int",
                    "Optional[int]"
                ],
                "old_pop": [
                    "List",
                    "int"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/operators/selection.py": {
        "selection": {
            "name": "selection",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "population": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "novelty_tournament": {
            "name": "novelty_tournament",
            "location": 52,
            "return": [
                "list"
            ],
            "arguments": {
                "population": []
            }
        },
        "tournament": {
            "name": "tournament",
            "location": 102,
            "return": [
                "list"
            ],
            "arguments": {
                "population": []
            }
        },
        "lexicase": {
            "name": "lexicase",
            "location": 133,
            "return": [
                "list"
            ],
            "arguments": {
                "population": []
            }
        },
        "fitness_novelty": {
            "name": "fitness_novelty",
            "location": 217,
            "return": [
                "list"
            ],
            "arguments": {
                "population": []
            }
        },
        "lexicase_and_novelty": {
            "name": "lexicase_and_novelty",
            "location": 268,
            "return": [
                "list"
            ],
            "arguments": {
                "population": []
            }
        },
        "update_bandit_tracker": {
            "name": "update_bandit_tracker",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "ind_fitness": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "truncation": {
            "name": "truncation",
            "location": 424,
            "return": [
                "Any"
            ],
            "arguments": {
                "population": []
            }
        },
        "nsga2_selection": {
            "name": "nsga2_selection",
            "location": 442,
            "return": [
                "list"
            ],
            "arguments": {
                "population": []
            }
        },
        "pareto_tournament": {
            "name": "pareto_tournament",
            "location": 480,
            "return": [
                "None",
                "int",
                "list[int]",
                "typing.Text"
            ],
            "arguments": {
                "population": [
                    "float",
                    "int"
                ],
                "pareto": [
                    "str",
                    "None",
                    "int",
                    "typing.Mapping"
                ],
                "tournament_size": [
                    "float",
                    "int"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/operators/subtree_parse.py": {
        "combine_snippets": {
            "name": "combine_snippets",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "reduce_trees": {
            "name": "reduce_trees",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "generate_key_and_check": {
            "name": "generate_key_and_check",
            "location": 467,
            "return": [
                "Tuple[(str, Any, Any)]"
            ],
            "arguments": {
                "pre": [],
                "aft": [],
                "reduce": [],
                "children": []
            }
        },
        "remove_old_snippets": {
            "name": "remove_old_snippets",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "delete_snippet": {
            "name": "delete_snippet",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "create_snippet": {
            "name": "create_snippet",
            "location": 547,
            "return": [
                "None"
            ],
            "arguments": {
                "parent": [],
                "children": [],
                "choice": [],
                "key": []
            }
        },
        "get_num_from_str": {
            "name": "get_num_from_str",
            "location": 580,
            "return": [
                "Any"
            ],
            "arguments": {
                "string": []
            }
        },
        "get_NT_from_str": {
            "name": "get_NT_from_str",
            "location": 598,
            "return": [
                "Any"
            ],
            "arguments": {
                "string": []
            }
        },
        "check_snippets_for_solution": {
            "name": "check_snippets_for_solution",
            "location": 615,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "reduce_trees.check_reductions": {
            "name": "check_reductions",
            "location": 161,
            "return": [],
            "arguments": {
                "alt_cs": [],
                "pre": [],
                "aft": [],
                "idx": [],
                "children": []
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/operators/__init__.py": {},
    "noveltyprogsys-master/src/PonyGE2/src/representation/derivation.py": {
        "generate_tree": {
            "name": "generate_tree",
            "location": 8,
            "return": [
                "Tuple[(Any, Any, Any, Any, Any)]"
            ],
            "arguments": {
                "tree": [
                    "float",
                    "int",
                    "list[list[str]]",
                    "typing.Mapping"
                ],
                "genome": [
                    "list[typing.Union[int,float]]",
                    "dict[, ]",
                    "list[tuple[typing.Union[str,int]]]",
                    "list[int]",
                    "list[]"
                ],
                "output": [
                    "list[]",
                    "list[dict[, ]]",
                    "list[tuple[typing.Union[float,...]]]",
                    "tuple[float]",
                    "list[float]",
                    "list[str]"
                ],
                "method": [
                    "str"
                ],
                "nodes": [
                    "int"
                ],
                "depth": [
                    "int",
                    "float"
                ],
                "max_depth": [],
                "depth_limit": [
                    "int",
                    "float"
                ]
            }
        },
        "legal_productions": {
            "name": "legal_productions",
            "location": 95,
            "return": [
                "list[typing.Text]",
                "str"
            ],
            "arguments": {
                "method": [
                    "str",
                    "typing.Callable[[], int]",
                    "list[]",
                    "list[int]"
                ],
                "depth_limit": [
                    "int",
                    "float"
                ],
                "root": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "dict[str, list[int]]"
                ],
                "productions": [
                    "str"
                ]
            }
        },
        "pi_random_derivation": {
            "name": "pi_random_derivation",
            "location": 182,
            "return": [
                "Tuple[(list, Any, Any, Any)]"
            ],
            "arguments": {
                "tree": [
                    "dict[, ]"
                ],
                "max_depth": [
                    "typing.Sequence[T]",
                    "typing.Callable[T, T]",
                    "typing.Iterable[T]",
                    "int",
                    "str"
                ]
            }
        },
        "pi_grow": {
            "name": "pi_grow",
            "location": 273,
            "return": [
                "Tuple[(list, Any, Any, Any, Dict[(Any, int)])]"
            ],
            "arguments": {
                "tree": [
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "max_depth": [
                    "typing.Iterable[T]"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/representation/grammar.py": {
        "Grammar.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str"
                ]
            }
        },
        "Grammar.read_bnf_file": {
            "name": "read_bnf_file",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str"
                ]
            }
        },
        "Grammar.check_depths": {
            "name": "check_depths",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grammar.check_recursion": {
            "name": "check_recursion",
            "location": 297,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cur_symbol": [
                    "str",
                    "dict[, ]"
                ],
                "seen": [
                    "list[str]"
                ]
            }
        },
        "Grammar.set_arity": {
            "name": "set_arity",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grammar.set_grammar_properties": {
            "name": "set_grammar_properties",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grammar.check_permutations": {
            "name": "check_permutations",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grammar.check_all_permutations": {
            "name": "check_all_permutations",
            "location": 440,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "bool"
                ]
            }
        },
        "Grammar.get_min_ramp_depth": {
            "name": "get_min_ramp_depth",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grammar.find_concatenation_NTs": {
            "name": "find_concatenation_NTs",
            "location": 586,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grammar.__str__": {
            "name": "__str__",
            "location": 633,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/representation/individual.py": {
        "Individual.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "genome": [],
                "ind_tree": [],
                "map_ind": [
                    "bool",
                    "Callable",
                    "Callable[[Any],int]",
                    "str"
                ]
            }
        },
        "Individual.get_mem_size": {
            "name": "get_mem_size",
            "location": 52,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Individual.__lt__": {
            "name": "__lt__",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "Individual.__le__": {
            "name": "__le__",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "Individual.__str__": {
            "name": "__str__",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Individual.deep_copy": {
            "name": "deep_copy",
            "location": 118,
            "return": [
                "Individual"
            ],
            "arguments": {
                "self": [
                    "_TIndividual@@Individual@@"
                ]
            }
        },
        "Individual.evaluate": {
            "name": "evaluate",
            "location": 147,
            "return": [
                "Optional[Individual]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/representation/latent_tree.py": {
        "latent_tree_random_ind": {
            "name": "latent_tree_random_ind",
            "location": 36,
            "return": [
                "Tuple[(Dict[(Tuple[()], Any)], str)]"
            ],
            "arguments": {
                "grammar": [
                    "str",
                    "Optional[str]",
                    "int",
                    "List[str]",
                    "None",
                    "Dict[str,Any]",
                    "Optional[int]"
                ],
                "maxdepth": [
                    "str",
                    "Optional[str]",
                    "int",
                    "List[str]",
                    "None",
                    "Dict[str,Any]",
                    "Optional[int]"
                ],
                "old_genome": [
                    "str",
                    "None",
                    "int",
                    "List[str]",
                    "float"
                ]
            }
        },
        "latent_tree_repair": {
            "name": "latent_tree_repair",
            "location": 103,
            "return": [
                "Tuple[(Dict[(Tuple[()], Any)], str)]"
            ],
            "arguments": {
                "genome": [
                    "Optional[TreeNode]",
                    "str",
                    "None"
                ],
                "gram": [
                    "Optional[TreeNode]",
                    "str",
                    "None"
                ],
                "maxdepth": [
                    "Optional[TreeNode]",
                    "str",
                    "None"
                ]
            }
        },
        "latent_tree_crossover": {
            "name": "latent_tree_crossover",
            "location": 114,
            "return": [
                "Dict",
                "int",
                "List[dict[str,Any]]",
                "Dict[str,Any]",
                "bool",
                "Optional[Iterable[str]]",
                "Tuple[str]",
                "Set"
            ],
            "arguments": {
                "g1": [
                    "Dict",
                    "List[dict[str,Any]]",
                    "Dict[str,Any]",
                    "str",
                    "List[Dict[str,Any]]",
                    "Optional[Mapping[str,Any]]"
                ],
                "g2": [
                    "int",
                    "List[str]",
                    "str",
                    "Callable[[int], None]"
                ]
            }
        },
        "latent_tree_mutate": {
            "name": "latent_tree_mutate",
            "location": 139,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "g": [
                    "Dict[str,set[str]]",
                    "Dict[str,Set[str]]",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "latent_tree_random_ind._random_ind": {
            "name": "_random_ind",
            "location": 49,
            "return": [
                "str",
                "Tuple[str,str]"
            ],
            "arguments": {
                "gram": [
                    "Optional[\"UtilityFunction\"]",
                    "Optional[str]",
                    "str",
                    "List[str]"
                ],
                "genome": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ],
                "depth": [
                    "str",
                    "bool",
                    "Union[slice, List[slice], List[int]]",
                    "bytearray",
                    "List[Dict[str, Any]]"
                ],
                "s": [
                    "None",
                    "Optional[int]",
                    "List[List[Callable]]",
                    "Optional[float]",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/representation/tree.py": {
        "Tree.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str",
                    "Dict[str,Any]",
                    "IO"
                ],
                "parent": [
                    "str",
                    "Optional[Callable]",
                    "Callable",
                    "Optional[T]",
                    "None"
                ]
            }
        },
        "Tree.__str__": {
            "name": "__str__",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tree.__copy__": {
            "name": "__copy__",
            "location": 50,
            "return": [
                "Tree"
            ],
            "arguments": {
                "self": [
                    "_TTree@@Tree@@"
                ]
            }
        },
        "Tree.__eq__": {
            "name": "__eq__",
            "location": 77,
            "return": [
                "Union[(bool, _T1)]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List",
                    "float",
                    "List[str]",
                    "Dict[str,Any]",
                    "Sequence[int]"
                ],
                "same": [
                    "bool"
                ]
            }
        },
        "Tree.get_memory_size": {
            "name": "get_memory_size",
            "location": 118,
            "return": [
                "list",
                "IO[str]",
                "str",
                "List[str]",
                "List[Callable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tree.get_target_nodes": {
            "name": "get_target_nodes",
            "location": 131,
            "return": [
                "List[str]",
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "array": [
                    "int",
                    "str"
                ],
                "target": [
                    "Optional[list]",
                    "None",
                    "Callable",
                    "List"
                ]
            }
        },
        "Tree.get_node_labels": {
            "name": "get_node_labels",
            "location": 158,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "str",
                    "Optional[bytes]",
                    "bytes",
                    "Optional[Sequence[str]]",
                    "None",
                    "Sequence[str]"
                ]
            }
        },
        "Tree.get_tree_info": {
            "name": "get_tree_info",
            "location": 175,
            "return": [
                "Tuple[(_T1, _T2, Union[(bool, _T3)], Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "nt_keys": [
                    "str",
                    "bytes",
                    "int",
                    "Union[bytes,str]"
                ],
                "genome": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[str]",
                    "Dict[str,str]",
                    "None",
                    "Optional[str]"
                ],
                "output": [
                    "List[List[str]]",
                    "bool",
                    "List[list[str]]",
                    "Dict",
                    "List"
                ],
                "invalid": [
                    "bool",
                    "int",
                    "Optional[Union[Any,Any]]",
                    "str"
                ],
                "max_depth": [
                    "int"
                ],
                "nodes": [
                    "int",
                    "bool",
                    "List[bytes]"
                ]
            }
        },
        "Tree.print_tree": {
            "name": "print_tree",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/representation/__init__.py": {},
    "noveltyprogsys-master/src/PonyGE2/src/scripts/baselines.py": {
        "pprint": {
            "name": "pprint",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "a": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "float",
                    "int"
                ],
                "format_string": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "float",
                    "int",
                    "Dict"
                ]
            }
        },
        "fit_maj_class": {
            "name": "fit_maj_class",
            "location": 26,
            "return": [
                "Tuple[(str, Any, Any)]"
            ],
            "arguments": {
                "train_X": [
                    "str",
                    "bool",
                    "int"
                ],
                "train_y": [
                    "int",
                    "numpy.ndarray",
                    "Union[int, str]",
                    "Iterator[int]",
                    "Sequence[int]"
                ],
                "test_X": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "fit_const": {
            "name": "fit_const",
            "location": 55,
            "return": [
                "Tuple[(str, Any, Any)]"
            ],
            "arguments": {
                "train_X": [
                    "bool",
                    "Dict",
                    "List",
                    "int",
                    "List[list[int]]",
                    "List[List[int]]",
                    "numpy.ndarray"
                ],
                "train_y": [
                    "int",
                    "Union[int, float]",
                    "Optional[Union[int, slice]]"
                ],
                "test_X": [
                    "bool",
                    "Dict",
                    "List",
                    "int",
                    "List[list[int]]",
                    "List[List[int]]",
                    "numpy.ndarray"
                ]
            }
        },
        "fit_lr": {
            "name": "fit_lr",
            "location": 72,
            "return": [
                "Tuple[(str, Any, Any)]"
            ],
            "arguments": {
                "train_X": [
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "train_y": [
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "test_X": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "fit_enet": {
            "name": "fit_enet",
            "location": 90,
            "return": [
                "Tuple[(str, Any, Any)]"
            ],
            "arguments": {
                "train_X": [
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "train_y": [
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "test_X": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/scripts/experiment_manager.py": {
        "execute_run": {
            "name": "execute_run",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "seed": [
                    "str",
                    "bytes",
                    "Tuple[float]"
                ]
            }
        },
        "execute_runs": {
            "name": "execute_runs",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_params": {
            "name": "check_params",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "testing": {
            "name": "testing",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/scripts/GE_LR_parser.py": {
        "parse_terminals": {
            "name": "parse_terminals",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "target": []
            }
        },
        "reduce": {
            "name": "reduce",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "solution": [
                    "dict[, ]",
                    "list[str]",
                    "str"
                ]
            }
        },
        "parse_target_string": {
            "name": "parse_target_string",
            "location": 303,
            "return": [
                "str",
                "None",
                "list[]",
                "dict[str, typing.Union[typing.Any,typing.Any]]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 325,
            "return": [
                "str",
                "bool",
                "list[str]",
                "list[]"
            ],
            "arguments": {}
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/scripts/grammar_analyser.py": {
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "command_line_args": [
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "Iterable[Any]",
                    "Iterable[str]"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/scripts/python_script_evaluation.py": {
        "Worker.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consume": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ],
                "produce": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "Worker.run": {
            "name": "run",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.stop_current": {
            "name": "stop_current",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/scripts/stats_parser.py": {
        "help_message": {
            "name": "help_message",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "parse_opts": {
            "name": "parse_opts",
            "location": 47,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "command_line_args": [
                    "tuple[]",
                    "list[str]"
                ]
            }
        },
        "parse_stats_from_runs": {
            "name": "parse_stats_from_runs",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "experiment_name": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "save_average_plot_across_runs": {
            "name": "save_average_plot_across_runs",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/scripts/__init__.py": {},
    "noveltyprogsys-master/src/PonyGE2/src/stats/stats.py": {
        "get_stats": {
            "name": "get_stats",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "individuals": [
                    "int"
                ],
                "end": [
                    "bool"
                ]
            }
        },
        "get_soo_stats": {
            "name": "get_soo_stats",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "individuals": [
                    "str",
                    "list[list[int]]",
                    "dict[str, typing.Any]"
                ],
                "end": [
                    "str",
                    "dict[, ]",
                    "list[str]"
                ]
            }
        },
        "get_moo_stats": {
            "name": "get_moo_stats",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "individuals": [
                    "str"
                ],
                "end": [
                    "str",
                    "dict[, ]",
                    "list[str]"
                ]
            }
        },
        "update_stats": {
            "name": "update_stats",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "individuals": [],
                "end": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "print_generation_stats": {
            "name": "print_generation_stats",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "print_first_front_stats": {
            "name": "print_first_front_stats",
            "location": 463,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "print_final_stats": {
            "name": "print_final_stats",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "print_final_moo_stats": {
            "name": "print_final_moo_stats",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/stats/__init__.py": {},
    "noveltyprogsys-master/src/PonyGE2/src/utilities/__init__.py": {},
    "noveltyprogsys-master/src/PonyGE2/src/utilities/algorithm/command_line_parser.py": {
        "parse_cmd_args": {
            "name": "parse_cmd_args",
            "location": 18,
            "return": [
                "Tuple[(Dict[(str, Any)], List[str])]"
            ],
            "arguments": {
                "arguments": [
                    "list[str]"
                ]
            }
        },
        "SortingHelpFormatter.add_arguments": {
            "name": "add_arguments",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "actions": [
                    "BaseException",
                    "None"
                ]
            }
        },
        "parse_cmd_args.ListAction.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "option_strings": []
            }
        },
        "parse_cmd_args.ListAction.__call__": {
            "name": "__call__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [],
                "namespace": [],
                "value": [],
                "option_string": [
                    "None"
                ]
            }
        },
        "parse_cmd_args.FloatAction.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "option_strings": []
            }
        },
        "parse_cmd_args.FloatAction.__call__": {
            "name": "__call__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [],
                "namespace": [],
                "value": [],
                "option_string": [
                    "None"
                ]
            }
        },
        "parse_cmd_args.CatchTabStr.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "option_strings": []
            }
        },
        "parse_cmd_args.CatchTabStr.__call__": {
            "name": "__call__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [],
                "namespace": [],
                "value": [],
                "option_string": [
                    "None"
                ]
            }
        },
        "parse_cmd_args.CachingAction.__init__": {
            "name": "__init__",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "option_strings": [],
                "CACHE": [
                    "None"
                ],
                "LOOKUP_FITNESS": [
                    "None"
                ],
                "LOOKUP_BAD_FITNESS": [
                    "None"
                ],
                "MUTATE_DUPLICATES": [
                    "None"
                ]
            }
        },
        "parse_cmd_args.CachingAction.__call__": {
            "name": "__call__",
            "location": 511,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": [
                    "None"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/utilities/algorithm/general.py": {
        "check_python_version": {
            "name": "check_python_version",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/utilities/algorithm/initialise_run.py": {
        "initialise_run_params": {
            "name": "initialise_run_params",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "create_files": [
                    "bool",
                    "list[str]",
                    "str"
                ]
            }
        },
        "set_param_imports": {
            "name": "set_param_imports",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_fit_func_imports": {
            "name": "get_fit_func_imports",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "return_attr_from_module": {
            "name": "return_attr_from_module",
            "location": 247,
            "return": [
                "Any"
            ],
            "arguments": {
                "module_name": [
                    "str"
                ],
                "attr_name": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "pool_init": {
            "name": "pool_init",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "params_": [
                    "bytes",
                    "dict[, ]",
                    "int",
                    "dict[str, dict[str, str]]",
                    "dict[str, str]",
                    "None"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/utilities/algorithm/NSGA2.py": {
        "compute_pareto_metrics": {
            "name": "compute_pareto_metrics",
            "location": 8,
            "return": [
                "ParetoInfo"
            ],
            "arguments": {
                "population": []
            }
        },
        "sort_non_dominated": {
            "name": "sort_non_dominated",
            "location": 25,
            "return": [
                "ParetoInfo"
            ],
            "arguments": {
                "population": []
            }
        },
        "dominates": {
            "name": "dominates",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "individual1": [],
                "individual2": []
            }
        },
        "compare_fitnesses": {
            "name": "compare_fitnesses",
            "location": 146,
            "return": [
                "Any"
            ],
            "arguments": {
                "ind1_value": [],
                "ind2_value": [],
                "ff": []
            }
        },
        "calculate_crowding_distance": {
            "name": "calculate_crowding_distance",
            "location": 170,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "pareto": [
                    "_T0@@"
                ]
            }
        },
        "crowded_comparison_operator": {
            "name": "crowded_comparison_operator",
            "location": 224,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [],
                "pareto": []
            }
        },
        "get_population_iqr": {
            "name": "get_population_iqr",
            "location": 251,
            "return": [
                "list"
            ],
            "arguments": {
                "population": [],
                "n_objectives": []
            }
        },
        "ParetoInfo.__init__": {
            "name": "__init__",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParetoInfo.compute_iqr": {
            "name": "compute_iqr",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "population": []
            }
        },
        "ParetoInfo.update_domination_count": {
            "name": "update_domination_count",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "individual": [],
                "should_increment": []
            }
        },
        "ParetoInfo.get_domination_count": {
            "name": "get_domination_count",
            "location": 347,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "individual": []
            }
        },
        "ParetoInfo.get_crowding_distance": {
            "name": "get_crowding_distance",
            "location": 360,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "individual": []
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/utilities/algorithm/state.py": {
        "create_state": {
            "name": "create_state",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "individuals": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "save_state": {
            "name": "save_state",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [
                    "str",
                    "bytes"
                ]
            }
        },
        "load_state": {
            "name": "load_state",
            "location": 66,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "state": [
                    "str",
                    "bytes"
                ]
            }
        },
        "set_state": {
            "name": "set_state",
            "location": 91,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "state": [
                    "dict"
                ]
            }
        },
        "check_name": {
            "name": "check_name",
            "location": 136,
            "return": [
                "List[str]",
                "dict",
                "type"
            ],
            "arguments": {
                "obj": [
                    "int"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/utilities/algorithm/__init__.py": {},
    "noveltyprogsys-master/src/PonyGE2/src/utilities/fitness/error_metric.py": {
        "mae": {
            "name": "mae",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "y": [
                    "bool",
                    "float",
                    "str",
                    "List[List[str]]",
                    "int"
                ],
                "yhat": [
                    "bool",
                    "float",
                    "str",
                    "List[List[str]]",
                    "int"
                ]
            }
        },
        "rmse": {
            "name": "rmse",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "y": [
                    "int",
                    "Optional[Union[str,Any]]",
                    "Dict[str,T]",
                    "List[int]"
                ],
                "yhat": [
                    "int",
                    "Optional[Union[str,Any]]",
                    "Dict[str,T]",
                    "List[int]"
                ]
            }
        },
        "mse": {
            "name": "mse",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "y": [
                    "bool",
                    "float",
                    "str",
                    "List[List[str]]",
                    "int"
                ],
                "yhat": [
                    "bool",
                    "float",
                    "str",
                    "List[List[str]]",
                    "int"
                ]
            }
        },
        "hinge": {
            "name": "hinge",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "y": [
                    "bool",
                    "float",
                    "str",
                    "List[List[str]]",
                    "int"
                ],
                "yhat": [
                    "str",
                    "bool",
                    "float",
                    "List[list[str]]",
                    "List[List[str]]",
                    "int"
                ]
            }
        },
        "f1_score": {
            "name": "f1_score",
            "location": 70,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "y": [
                    "int",
                    "str",
                    "Sequence[str]",
                    "List[float]"
                ],
                "yhat": [
                    "bool",
                    "numpy.ndarray",
                    "bytearray",
                    "List[cirq.Qid]"
                ]
            }
        },
        "Hamming_error": {
            "name": "Hamming_error",
            "location": 100,
            "return": [
                "str",
                "Sequence"
            ],
            "arguments": {
                "y": [
                    "str",
                    "List",
                    "Union[str,int]",
                    "Sequence[float]",
                    "int"
                ],
                "yhat": [
                    "str",
                    "List",
                    "Union[str,int]",
                    "Sequence[float]",
                    "int"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/utilities/fitness/get_data.py": {
        "get_Xy_train_test_separate": {
            "name": "get_Xy_train_test_separate",
            "location": 8,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "train_filename": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "test_filename": [
                    "str",
                    "int",
                    "path.Path",
                    "None",
                    "Optional[path.Path]"
                ],
                "skip_header": [
                    "int",
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "get_data": {
            "name": "get_data",
            "location": 84,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "train": [
                    "str",
                    "Union[tuple,list]",
                    "int",
                    "Optional[Dict]",
                    "Tuple",
                    "List",
                    "Dict",
                    "None"
                ],
                "test": [
                    "str",
                    "Union[tuple,list]",
                    "int",
                    "Optional[Dict]",
                    "Tuple",
                    "List",
                    "Dict",
                    "None"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/utilities/fitness/math_functions.py": {
        "return_one_percent": {
            "name": "return_one_percent",
            "location": 6,
            "return": [
                "Union[(int, _T0)]"
            ],
            "arguments": {
                "num": [
                    "int",
                    "bool",
                    "Tuple",
                    "str"
                ],
                "pop_size": [
                    "int"
                ]
            }
        },
        "return_percent": {
            "name": "return_percent",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {
                "num": [
                    "int",
                    "float",
                    "Optional[int]",
                    "str"
                ],
                "pop_size": [
                    "int",
                    "str",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "aq": {
            "name": "aq",
            "location": 40,
            "return": [
                "int",
                "float",
                "pygame.math.Vector2"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "List[int]",
                    "bool"
                ],
                "b": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "pdiv": {
            "name": "pdiv",
            "location": 54,
            "return": [
                "float",
                "numpy.ndarray",
                "str",
                "bytearray",
                "Dict[str,int]",
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "rlog": {
            "name": "rlog",
            "location": 91,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "Tuple[Tuple[int, Any]]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "Union[float,int]",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "ppow": {
            "name": "ppow",
            "location": 108,
            "return": [
                "float",
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {
                "x": [
                    "float",
                    "Union[pandas.DataFrame,numpy.ndarray]",
                    "Union[pandas.Series,numpy.ndarray]"
                ],
                "y": [
                    "float",
                    "Union[pandas.DataFrame,numpy.ndarray]",
                    "Union[pandas.Series,numpy.ndarray]"
                ]
            }
        },
        "ppow2": {
            "name": "ppow2",
            "location": 120,
            "return": [
                "str",
                "numpy.ndarray",
                "Optional[int]"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray"
                ],
                "y": [
                    "numpy.ndarray"
                ]
            }
        },
        "psqrt": {
            "name": "psqrt",
            "location": 132,
            "return": [
                "numpy.ndarray",
                "Callable"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        },
        "psqrt2": {
            "name": "psqrt2",
            "location": 142,
            "return": [
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "bytes",
                    "numpy.ndarray"
                ]
            }
        },
        "plog": {
            "name": "plog",
            "location": 153,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "BaseException"
            ],
            "arguments": {
                "x": [
                    "float",
                    "Iterable[T]",
                    "int",
                    "List[List[str]]",
                    "T"
                ]
            }
        },
        "ave": {
            "name": "ave",
            "location": 163,
            "return": [
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        },
        "percentile": {
            "name": "percentile",
            "location": 174,
            "return": [
                "List[Dict]",
                "List[int]",
                "float",
                "list",
                "List[float]",
                "Tuple[int, int, int]",
                "List[List[Any]]",
                "Sequence[str]",
                "str"
            ],
            "arguments": {
                "sorted_list": [
                    "List[str]",
                    "Union[Sequence[int], Sequence[dict]]",
                    "List[Tuple[str, int]]",
                    "list",
                    "Union[str, List[str]]",
                    "int"
                ],
                "p": [
                    "List[str]",
                    "Union[Sequence[int],Sequence[dict]]",
                    "Sequence[int]",
                    "List",
                    "List[Tuple[str,int]]",
                    "int",
                    "Sequence[dict]",
                    "List[tuple[Union[str,int]]]",
                    "Union[str,List[str]]",
                    "str"
                ]
            }
        },
        "binary_phen_to_float": {
            "name": "binary_phen_to_float",
            "location": 187,
            "return": [
                "list"
            ],
            "arguments": {
                "phen": [
                    "int",
                    "list",
                    "numpy.ndarray",
                    "numpy.array",
                    "Sequence[Sequence[float]]",
                    "Sized"
                ],
                "n_codon": [
                    "int",
                    "numpy.ndarray",
                    "Optional[numpy.ndarray]"
                ],
                "min_value": [
                    "int",
                    "float"
                ],
                "max_value": [
                    "int",
                    "float"
                ]
            }
        },
        "ilog": {
            "name": "ilog",
            "location": 222,
            "return": [
                "int"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ],
                "base": [
                    "int",
                    "bool"
                ]
            }
        },
        "sci_notation": {
            "name": "sci_notation",
            "location": 238,
            "return": [
                "str"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "prec": [
                    "int"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/utilities/fitness/optimize_constants.py": {
        "optimize_constants": {
            "name": "optimize_constants",
            "location": 9,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "x": [],
                "y": [],
                "ind": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "make_consts_consecutive": {
            "name": "make_consts_consecutive",
            "location": 62,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "List[Tuple[str]]"
                ]
            }
        },
        "replace_consts_with_values": {
            "name": "replace_consts_with_values",
            "location": 86,
            "return": [
                "str",
                "float",
                "Tuple[str,str]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Sequence[Any]",
                    "Optional[List]",
                    "int"
                ],
                "c": [
                    "str",
                    "bytes",
                    "Hashable",
                    "Union[str, int]"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/utilities/fitness/__init__.py": {},
    "noveltyprogsys-master/src/PonyGE2/src/utilities/representation/check_methods.py": {
        "check_ind": {
            "name": "check_ind",
            "location": 6,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "ind": [
                    "int",
                    "bytes"
                ],
                "check": [
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "check_genome_mapping": {
            "name": "check_genome_mapping",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "ind": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "check_ind_from_parser": {
            "name": "check_ind_from_parser",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "ind": [
                    "typing.Type",
                    "list[str]",
                    "None",
                    "int",
                    "str"
                ],
                "target": [
                    "list[str]",
                    "typing.Any",
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "check_genome_from_tree": {
            "name": "check_genome_from_tree",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "ind_tree": []
            }
        },
        "check_expansion": {
            "name": "check_expansion",
            "location": 171,
            "return": [
                "bool"
            ],
            "arguments": {
                "tree": [
                    "typing.IO",
                    "bool",
                    "dict[, ]",
                    "str",
                    "None"
                ],
                "nt_keys": [
                    "bool",
                    "bytes",
                    "typing.Iterable[tuple[typing.Union[str,dict[, ]]]]"
                ]
            }
        },
        "build_genome": {
            "name": "build_genome",
            "location": 201,
            "return": [
                "str"
            ],
            "arguments": {
                "tree": [
                    "list[str]",
                    "int",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "genome": [
                    "str"
                ]
            }
        },
        "get_nodes_and_depth": {
            "name": "get_nodes_and_depth",
            "location": 221,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "tree": [
                    "int"
                ],
                "nodes": [
                    "int"
                ],
                "max_depth": [
                    "int"
                ]
            }
        },
        "get_max_tree_depth": {
            "name": "get_max_tree_depth",
            "location": 265,
            "return": [
                "int"
            ],
            "arguments": {
                "tree": [
                    "str",
                    "int",
                    "None"
                ],
                "max_depth": [
                    "int"
                ]
            }
        },
        "get_current_depth": {
            "name": "get_current_depth",
            "location": 282,
            "return": [
                "int"
            ],
            "arguments": {
                "tree": [
                    "list[str]",
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ]
            }
        },
        "get_output": {
            "name": "get_output",
            "location": 309,
            "return": [
                "str"
            ],
            "arguments": {
                "ind_tree": [
                    "str",
                    "typing.BinaryIO",
                    "bytes"
                ]
            }
        },
        "ret_true": {
            "name": "ret_true",
            "location": 345,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "bool",
                    "str",
                    "list[]"
                ]
            }
        },
        "generate_codon": {
            "name": "generate_codon",
            "location": 360,
            "return": [
                "Any"
            ],
            "arguments": {
                "NT": [
                    "str",
                    "dict[str, str]",
                    "bytes"
                ],
                "choice": [
                    "str",
                    "int",
                    "list[str]",
                    "typing.IO"
                ]
            }
        },
        "check_tree": {
            "name": "check_tree",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "tree": [
                    "int"
                ]
            }
        },
        "get_output.build_output": {
            "name": "build_output",
            "location": 320,
            "return": [
                "list[]"
            ],
            "arguments": {
                "tree": []
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/utilities/representation/python_filter.py": {
        "python_filter": {
            "name": "python_filter",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "txt": [
                    "List",
                    "bool",
                    "Dict[str,Any]",
                    "BinaryIO",
                    "IO[bytes]"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/utilities/representation/__init__.py": {},
    "noveltyprogsys-master/src/PonyGE2/src/utilities/stats/clean_stats.py": {
        "clean_stats": {
            "name": "clean_stats",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/utilities/stats/file_io.py": {
        "save_stats_to_file": {
            "name": "save_stats_to_file",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "stats": [
                    "str",
                    "Dict[str, Dict[str, str]]"
                ],
                "end": [
                    "bool",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "save_stats_headers": {
            "name": "save_stats_headers",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "stats": [
                    "str"
                ]
            }
        },
        "save_best_ind_to_file": {
            "name": "save_best_ind_to_file",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "stats": [
                    "str",
                    "int"
                ],
                "ind": [
                    "str",
                    "int"
                ],
                "end": [
                    "str",
                    "bool"
                ],
                "name": [
                    "str",
                    "Text"
                ]
            }
        },
        "save_first_front_to_file": {
            "name": "save_first_front_to_file",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "stats": [
                    "str",
                    "bool",
                    "BinaryIO"
                ],
                "end": [
                    "bool",
                    "str",
                    "BinaryIO"
                ],
                "name": [
                    "Text",
                    "str",
                    "waterbutler.providers.gitlab.path.GitLabPath"
                ]
            }
        },
        "generate_folders_and_files": {
            "name": "generate_folders_and_files",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "save_params_to_file": {
            "name": "save_params_to_file",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/utilities/stats/save_plots.py": {
        "save_pareto_fitness_plot": {
            "name": "save_pareto_fitness_plot",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "save_plot_from_data": {
            "name": "save_plot_from_data",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bool",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "None"
                ],
                "name": [
                    "str",
                    "Callable[[str],str]",
                    "Iterable[str]",
                    "Dict[str,str]"
                ]
            }
        },
        "save_plot_from_file": {
            "name": "save_plot_from_file",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "stat_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "save_box_plot": {
            "name": "save_box_plot",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Union[str, bytes]",
                    "bytes"
                ],
                "names": [
                    "str",
                    "Tuple[type]",
                    "Tuple[Type]",
                    "Optional[str]",
                    "None"
                ],
                "title": [
                    "str"
                ]
            }
        }
    },
    "noveltyprogsys-master/src/PonyGE2/src/utilities/stats/trackers.py": {},
    "noveltyprogsys-master/src/PonyGE2/src/utilities/stats/__init__.py": {}
}
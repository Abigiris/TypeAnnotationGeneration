{
    "nucleic-master/setup.py": {
        "this_version": {
            "name": "this_version",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "nucleic-master/docs/conf.py": {},
    "nucleic-master/nucleic/cosmic.py": {
        "fetch_cosmic_signatures": {
            "name": "fetch_cosmic_signatures",
            "location": 15,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        }
    },
    "nucleic-master/nucleic/decomposition.py": {
        "assess_number_signatures": {
            "name": "assess_number_signatures",
            "location": 8,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "signatures": [
                    "bool",
                    "str",
                    "Set[tuple[Union[int,int]]]",
                    "Set[Tuple[int,int]]",
                    "int"
                ],
                "n": [
                    "bool",
                    "str",
                    "Set[tuple[Union[int,int]]]",
                    "Set[Tuple[int,int]]",
                    "int"
                ],
                "decomposition": [
                    "bool",
                    "str",
                    "Set[tuple[Union[int,int]]]",
                    "Set[Tuple[int,int]]",
                    "int"
                ],
                "decomposition_args": [
                    "bool",
                    "None",
                    "str",
                    "Set[Tuple[int,int]]",
                    "Set[tuple[Union[int,int]]]",
                    "int"
                ],
                "iterations": [
                    "int",
                    "bool",
                    "Set[Tuple[int,int]]",
                    "str"
                ]
            }
        },
        "deconstruct_into_signatures": {
            "name": "deconstruct_into_signatures",
            "location": 19,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "spectrum": [
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "signatures": [
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "method": [
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ]
            }
        },
        "identify_signatures": {
            "name": "identify_signatures",
            "location": 26,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "signatures": [
                    "int",
                    "str",
                    "bool"
                ],
                "n": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "nucleic-master/nucleic/distance.py": {
        "hamming_circle": {
            "name": "hamming_circle",
            "location": 18,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "sequence": [
                    "str",
                    "BinaryIO",
                    "int"
                ],
                "n": [
                    "int",
                    "List"
                ],
                "alphabet": [
                    "int",
                    "None",
                    "Optional[List[Any]]",
                    "str",
                    "List",
                    "List[Any]"
                ]
            }
        },
        "hierarchy_cluster": {
            "name": "hierarchy_cluster",
            "location": 61,
            "return": [
                "str",
                "int",
                "Dict",
                "Callable"
            ],
            "arguments": {
                "spectrums": [
                    "str",
                    "type",
                    "Callable"
                ],
                "method": [
                    "Text",
                    "str",
                    "Tuple[float,float]"
                ],
                "metric": [
                    "Text",
                    "int",
                    "float",
                    "Iterable[str]",
                    "Union[str,Callable]"
                ],
                "optimal_ordering": [
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "nucleic-master/nucleic/util.py": {
        "dataset": {
            "name": "dataset",
            "location": 119,
            "return": [
                "str",
                "Dict",
                "bytes",
                "Dict[str,Any]"
            ],
            "arguments": {
                "identifier": [
                    "str",
                    "Dict"
                ],
                "database": [
                    "Text",
                    "str",
                    "Optional[pathlib.Path]",
                    "Union[str,pathlib.Path]",
                    "pathlib.Path"
                ]
            }
        },
        "kmers": {
            "name": "kmers",
            "location": 151,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "k": [
                    "int",
                    "str",
                    "Iterable[str]",
                    "Union[Iterable[str],str]",
                    "None",
                    "bool",
                    "Optional[bool]"
                ],
                "alphabet": [
                    "int",
                    "str",
                    "Iterable[str]",
                    "Union[Iterable[str],str]",
                    "None",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "DictMostCommonMixin.most_common": {
            "name": "most_common",
            "location": 44,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "None",
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[bool]",
                    "numpy.ndarray",
                    "Optional[numpy.ndarray]"
                ]
            }
        },
        "DictNpArrayMixin.keys": {
            "name": "keys",
            "location": 75,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictNpArrayMixin.values": {
            "name": "values",
            "location": 80,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictNpArrayMixin.items": {
            "name": "items",
            "location": 85,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictPrettyReprMixin.__repr__": {
            "name": "__repr__",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucleic-master/nucleic/_api.py": {
        "Dna.degenerate_map": {
            "name": "degenerate_map",
            "location": 56,
            "return": [
                "dict[typing.Text, set[typing.Text]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dna.complement_map": {
            "name": "complement_map",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dna.definite_chars": {
            "name": "definite_chars",
            "location": 66,
            "return": [
                "set[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dna.default_gap_char": {
            "name": "default_gap_char",
            "location": 71,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dna.gap_chars": {
            "name": "gap_chars",
            "location": 76,
            "return": [
                "set[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dna.is_purine": {
            "name": "is_purine",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dna.is_pyrimidine": {
            "name": "is_pyrimidine",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dna.to": {
            "name": "to",
            "location": 88,
            "return": [
                "Variant"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Dna.__hash__": {
            "name": "__hash__",
            "location": 94,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dna.__repr__": {
            "name": "__repr__",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variant.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [],
                "alt": [],
                "context": [
                    "None"
                ],
                "data": [
                    "None"
                ]
            }
        },
        "Variant.color": {
            "name": "color",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scheme": [
                    "typing.Text"
                ]
            }
        },
        "Variant.context": {
            "name": "context",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "Variant.ref": {
            "name": "ref",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "ref": []
            }
        },
        "Variant.alt": {
            "name": "alt",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "alt": []
            }
        },
        "Variant.complement": {
            "name": "complement",
            "location": 176,
            "return": [
                "Variant"
            ],
            "arguments": {
                "self": [
                    "_TVariant@@Variant@@"
                ]
            }
        },
        "Variant.reverse_complement": {
            "name": "reverse_complement",
            "location": 182,
            "return": [
                "Variant"
            ],
            "arguments": {
                "self": [
                    "_TVariant@@Variant@@"
                ]
            }
        },
        "Variant.is_null": {
            "name": "is_null",
            "location": 190,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variant.is_snv": {
            "name": "is_snv",
            "location": 194,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variant.is_transition": {
            "name": "is_transition",
            "location": 198,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variant.is_transversion": {
            "name": "is_transversion",
            "location": 206,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variant.is_mnv": {
            "name": "is_mnv",
            "location": 210,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variant.is_insertion": {
            "name": "is_insertion",
            "location": 214,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variant.is_deletion": {
            "name": "is_deletion",
            "location": 218,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variant.is_indel": {
            "name": "is_indel",
            "location": 222,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variant.lseq": {
            "name": "lseq",
            "location": 226,
            "return": [
                "Dna"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variant.rseq": {
            "name": "rseq",
            "location": 230,
            "return": [
                "Dna"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variant.label": {
            "name": "label",
            "location": 234,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variant.copy": {
            "name": "copy",
            "location": 238,
            "return": [
                "Variant"
            ],
            "arguments": {
                "self": [
                    "_TVariant@@Variant@@"
                ]
            }
        },
        "Variant.within": {
            "name": "within",
            "location": 248,
            "return": [
                "Variant"
            ],
            "arguments": {
                "self": [
                    "_TVariant@@Variant@@"
                ],
                "context": []
            }
        },
        "Variant.with_purine_ref": {
            "name": "with_purine_ref",
            "location": 255,
            "return": [
                "Variant"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variant.with_pyrimidine_ref": {
            "name": "with_pyrimidine_ref",
            "location": 259,
            "return": [
                "Variant"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variant.set_context_from_fasta": {
            "name": "set_context_from_fasta",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "infile": [],
                "contig": [],
                "position": [],
                "k": [
                    "int"
                ]
            }
        },
        "Variant.__eq__": {
            "name": "__eq__",
            "location": 291,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Variant.__hash__": {
            "name": "__hash__",
            "location": 300,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variant.__len__": {
            "name": "__len__",
            "location": 303,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variant.__repr__": {
            "name": "__repr__",
            "location": 306,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variant.__str__": {
            "name": "__str__",
            "location": 314,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextWeights.__new__": {
            "name": "__new__",
            "location": 321,
            "return": [
                "ContextWeights"
            ],
            "arguments": {
                "cls": [
                    "Type[_TContextWeights]"
                ],
                "data": [
                    "None"
                ]
            }
        },
        "IndelSpectrum.__init__": {
            "name": "__init__",
            "location": 337,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnvSpectrum.__init__": {
            "name": "__init__",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int"
                ],
                "notation": []
            }
        },
        "SnvSpectrum.from_iterable": {
            "name": "from_iterable",
            "location": 380,
            "return": [
                "SnvSpectrum"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSnvSpectrum]"
                ],
                "iterable": [],
                "k": [
                    "int"
                ],
                "notation": []
            }
        },
        "SnvSpectrum.mass": {
            "name": "mass",
            "location": 394,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnvSpectrum.split_by_notation": {
            "name": "split_by_notation",
            "location": 410,
            "return": [
                "Tuple[(SnvSpectrum, SnvSpectrum)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnvSpectrum.__setitem__": {
            "name": "__setitem__",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "SnvSpectrum.__repr__": {
            "name": "__repr__",
            "location": 451,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnvSpectrum.mass.norm_count": {
            "name": "norm_count",
            "location": 402,
            "return": [
                "float"
            ],
            "arguments": {
                "key": []
            }
        }
    },
    "nucleic-master/nucleic/_version.py": {},
    "nucleic-master/nucleic/__init__.py": {},
    "nucleic-master/nucleic/plotting/cmap.py": {},
    "nucleic-master/nucleic/plotting/__init__.py": {
        "_toyplot_trinucleotide_spectrum": {
            "name": "_toyplot_trinucleotide_spectrum",
            "location": 18,
            "return": [
                "Tuple[(Any, Tuple[(Any, Any)])]"
            ],
            "arguments": {
                "spectrum": [
                    "list",
                    "List[int]",
                    "int"
                ],
                "kind": [
                    "Text",
                    "str",
                    "int",
                    "Tuple[float,float,float]"
                ],
                "cmap": [
                    "Text",
                    "Tuple[int,int,int]",
                    "int",
                    "str"
                ],
                "title": [
                    "Text",
                    "str",
                    "bytearray",
                    "int",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "_matplotlib_trinucleotide_spectrum": {
            "name": "_matplotlib_trinucleotide_spectrum",
            "location": 61,
            "return": [
                "Tuple[(Any, Tuple[(Any, Any)])]"
            ],
            "arguments": {
                "spectrum": [
                    "int"
                ],
                "kind": [
                    "Text",
                    "str",
                    "int",
                    "Tuple[float,float,float]"
                ],
                "cmap": [
                    "Text",
                    "Tuple[int,int,int]",
                    "int",
                    "str"
                ],
                "title": [
                    "Text",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "trinucleotide_spectrum": {
            "name": "trinucleotide_spectrum",
            "location": 124,
            "return": [
                "Tuple[(Any, Tuple[(Any, Any)])]"
            ],
            "arguments": {
                "spectrum": [
                    "nucleic.SnvSpectrum",
                    "str",
                    "int"
                ],
                "kind": [
                    "Text",
                    "int",
                    "Callable",
                    "str"
                ],
                "cmap": [
                    "Text",
                    "int",
                    "Callable",
                    "str"
                ],
                "title": [
                    "Text",
                    "int",
                    "Callable",
                    "str"
                ],
                "plt_library": [
                    "Text",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "nucleic-master/tests/test_nucleic.py": {
        "TestDna.test_nt_init": {
            "name": "test_nt_init",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nt": []
            }
        },
        "TestDna.test_nt_is_purine": {
            "name": "test_nt_is_purine",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nt": []
            }
        },
        "TestDna.test_nt_is_pyrimidine": {
            "name": "test_nt_is_pyrimidine",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nt": []
            }
        },
        "TestDna.test_nt_to": {
            "name": "test_nt_to",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [],
                "right": []
            }
        },
        "TestDna.test_nt__repr__": {
            "name": "test_nt__repr__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nt": []
            }
        },
        "TestVariant.test_variant_is_null": {
            "name": "test_variant_is_null",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nt": []
            }
        },
        "TestVariant.test_snv_color_spot_check": {
            "name": "test_snv_color_spot_check",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "snv": [],
                "color_default": [],
                "color_stratton": []
            }
        },
        "TestVariant.test_snv_color_complement_is_same_color": {
            "name": "test_snv_color_complement_is_same_color",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [],
                "right": []
            }
        },
        "TestVariant.test_snv_context": {
            "name": "test_snv_context",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [],
                "right": []
            }
        },
        "TestVariant.test_snv_context_setter_illegal_values": {
            "name": "test_snv_context_setter_illegal_values",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVariant.test_snv_is_transition_or_transversion": {
            "name": "test_snv_is_transition_or_transversion",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [],
                "right": []
            }
        },
        "TestVariant.test_snv_within_context_lseq_and_rseq": {
            "name": "test_snv_within_context_lseq_and_rseq",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [],
                "right": [],
                "lseq": [],
                "rseq": []
            }
        },
        "TestVariant.test_snv_for_snv_label": {
            "name": "test_snv_for_snv_label",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "snv": [],
                "result": []
            }
        },
        "TestVariant.test_snv_copy": {
            "name": "test_snv_copy",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVariant.test_snv_complement": {
            "name": "test_snv_complement",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [],
                "right": []
            }
        },
        "TestVariant.test_snv_reverse_complement": {
            "name": "test_snv_reverse_complement",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [],
                "right": []
            }
        },
        "TestVariant.test_snv_with_purine_ref_as_purine_ref": {
            "name": "test_snv_with_purine_ref_as_purine_ref",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [],
                "right": []
            }
        },
        "TestVariant.test_snv_with_purine_ref_as_pyrimidine_ref": {
            "name": "test_snv_with_purine_ref_as_pyrimidine_ref",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [],
                "right": []
            }
        },
        "TestVariant.test_snv_with_pyrimidine_ref_as_purine_ref": {
            "name": "test_snv_with_pyrimidine_ref_as_purine_ref",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [],
                "right": []
            }
        },
        "TestVariant.test_snv_with_pyrimidinee_ref_as_pyrimidine_ref": {
            "name": "test_snv_with_pyrimidinee_ref_as_pyrimidine_ref",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [],
                "right": []
            }
        },
        "TestVariant.test_snv__len__": {
            "name": "test_snv__len__",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lseq": [],
                "rseq": [],
                "length": []
            }
        },
        "TestVariant.test_snv__str__": {
            "name": "test_snv__str__",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [],
                "right": [],
                "context": [],
                "expected": []
            }
        },
        "TestVariant.test_snv__repr__": {
            "name": "test_snv__repr__",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [],
                "right": []
            }
        }
    },
    "nucleic-master/tests/test_util.py": {
        "TestUtil.test_kmers": {
            "name": "test_kmers",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtil.test_fetch_cosmic_signatures": {
            "name": "test_fetch_cosmic_signatures",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
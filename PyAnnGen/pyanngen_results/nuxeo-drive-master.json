{
    "nuxeo-drive-master/nxdrive/autolocker.py": {
        "get_open_files": {
            "name": "get_open_files",
            "location": 162,
            "return": [
                "Iterator[objects.Item]",
                "Generator[tuple[Path]]",
                "Generator"
            ],
            "arguments": {}
        },
        "ProcessAutoLockerWorker.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ProcessAutoLockerWorker.set_autolock": {
            "name": "set_autolock",
            "location": 54,
            "return": [
                "None",
                "Union[tuple,list]",
                "Dict[str,Any]",
                "bytes"
            ],
            "arguments": {}
        },
        "ProcessAutoLockerWorker._poll": {
            "name": "_poll",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessAutoLockerWorker.orphan_unlocked": {
            "name": "orphan_unlocked",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ProcessAutoLockerWorker._process": {
            "name": "_process",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessAutoLockerWorker._lock_files": {
            "name": "_lock_files",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ProcessAutoLockerWorker._unlock_files": {
            "name": "_unlock_files",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ProcessAutoLockerWorker._lock_file": {
            "name": "_lock_file",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ProcessAutoLockerWorker._unlock_file": {
            "name": "_unlock_file",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/behavior.py": {},
    "nuxeo-drive-master/nxdrive/commandline.py": {
        "CliHandler.get_version": {
            "name": "get_version",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CliHandler.make_cli_parser": {
            "name": "make_cli_parser",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CliHandler.parse_cli": {
            "name": "parse_cli",
            "location": 363,
            "return": [],
            "arguments": {}
        },
        "CliHandler._load_local_config": {
            "name": "_load_local_config",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sources": [],
                "args": []
            }
        },
        "CliHandler.load_config": {
            "name": "load_config",
            "location": 473,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CliHandler._configure_logger": {
            "name": "_configure_logger",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CliHandler.uninstall": {
            "name": "uninstall",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CliHandler.handle": {
            "name": "handle",
            "location": 523,
            "return": [],
            "arguments": {}
        },
        "CliHandler.get_manager": {
            "name": "get_manager",
            "location": 577,
            "return": [
                "Manager"
            ],
            "arguments": {
                "self": []
            }
        },
        "CliHandler._get_application": {
            "name": "_get_application",
            "location": 582,
            "return": [
                "Application"
            ],
            "arguments": {
                "self": []
            }
        },
        "CliHandler.launch": {
            "name": "launch",
            "location": 597,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "CliHandler.redact_payload": {
            "name": "redact_payload",
            "location": 623,
            "return": [
                "bytes"
            ],
            "arguments": {}
        },
        "CliHandler._send_to_running_instance": {
            "name": "_send_to_running_instance",
            "location": 632,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CliHandler.clean_folder": {
            "name": "clean_folder",
            "location": 658,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "CliHandler.console": {
            "name": "console",
            "location": 669,
            "return": [],
            "arguments": {}
        },
        "CliHandler.ctx_access_online": {
            "name": "ctx_access_online",
            "location": 676,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CliHandler.ctx_copy_share_link": {
            "name": "ctx_copy_share_link",
            "location": 681,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CliHandler.ctx_edit_metadata": {
            "name": "ctx_edit_metadata",
            "location": 686,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CliHandler.ctx_direct_transfer": {
            "name": "ctx_direct_transfer",
            "location": 691,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "CliHandler.download_edit": {
            "name": "download_edit",
            "location": 698,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "CliHandler.bind_server": {
            "name": "bind_server",
            "location": 702,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "CliHandler.unbind_server": {
            "name": "unbind_server",
            "location": 721,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "CliHandler.bind_root": {
            "name": "bind_root",
            "location": 729,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "CliHandler.unbind_root": {
            "name": "unbind_root",
            "location": 737,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "CliHandler._install_faulthandler": {
            "name": "_install_faulthandler",
            "location": 746,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "HealthCheck.__init__": {
            "name": "__init__",
            "location": 764,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "None"
                ]
            }
        },
        "HealthCheck.__enter__": {
            "name": "__enter__",
            "location": 772,
            "return": [
                "HealthCheck"
            ],
            "arguments": {
                "self": []
            }
        },
        "HealthCheck.__exit__": {
            "name": "__exit__",
            "location": 792,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CliHandler.parse_cli.excepthook": {
            "name": "excepthook",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "type_": [],
                "value": [],
                "traceback": []
            }
        },
        "CliHandler.parse_cli.texcepthook": {
            "name": "texcepthook",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "nuxeo-drive-master/nxdrive/console.py": {
        "ConsoleApplication.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "T",
                    "bool"
                ]
            }
        }
    },
    "nuxeo-drive-master/nxdrive/constants.py": {},
    "nuxeo-drive-master/nxdrive/direct_edit.py": {
        "_is_lock_file": {
            "name": "_is_lock_file",
            "location": 63,
            "return": [
                "str",
                "Type[str]",
                "List[str]",
                "Sequence[Union[str, Any]]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "DirectEdit.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectEdit.use_autolock": {
            "name": "use_autolock",
            "location": 133,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectEdit._autolock_orphans": {
            "name": "_autolock_orphans",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectEdit.autolock_lock": {
            "name": "autolock_lock",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectEdit.autolock_unlock": {
            "name": "autolock_unlock",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src_path": [
                    "str"
                ]
            }
        },
        "DirectEdit.start": {
            "name": "start",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectEdit.stop": {
            "name": "stop",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectEdit.stop_client": {
            "name": "stop_client",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectEdit._is_valid_folder_name": {
            "name": "_is_valid_folder_name",
            "location": 166,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Pattern"
                ],
                "pattern": [
                    "str",
                    "Pattern"
                ]
            }
        },
        "DirectEdit._cleanup": {
            "name": "_cleanup",
            "location": 181,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectEdit.__get_engine": {
            "name": "__get_engine",
            "location": 266,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "bool",
                "dict",
                "Optional[Dict]"
            ],
            "arguments": {}
        },
        "DirectEdit._get_engine": {
            "name": "_get_engine",
            "location": 290,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "DirectEdit._download": {
            "name": "_download",
            "location": 309,
            "return": [
                "zerver.models.Realm",
                "Optional[str]",
                "Optional[pathlib.Path]",
                "Union[str, pathlib.Path]",
                "str",
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "DirectEdit._get_info": {
            "name": "_get_info",
            "location": 399,
            "return": [
                "Optional[str]",
                "str",
                "Union[None, List[str]]",
                "Optional[List[str]]",
                "Optional[Sequence[str]]"
            ],
            "arguments": {}
        },
        "DirectEdit._get_tmp_file": {
            "name": "_get_tmp_file",
            "location": 463,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "DirectEdit._prepare_edit": {
            "name": "_prepare_edit",
            "location": 471,
            "return": [
                "Optional[int]",
                "str",
                "bool",
                "dict",
                "Optional[object]"
            ],
            "arguments": {}
        },
        "DirectEdit.edit": {
            "name": "edit",
            "location": 595,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "DirectEdit._extract_edit_info": {
            "name": "_extract_edit_info",
            "location": 633,
            "return": [
                "Iterable[Any]",
                "bool",
                "str",
                "int",
                "Dict[str, bool]"
            ],
            "arguments": {}
        },
        "DirectEdit.force_update": {
            "name": "force_update",
            "location": 666,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectEdit._guess_user_from_http_error": {
            "name": "_guess_user_from_http_error",
            "location": 674,
            "return": [
                "Callable"
            ],
            "arguments": {}
        },
        "DirectEdit._lock": {
            "name": "_lock",
            "location": 683,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "DirectEdit._unlock": {
            "name": "_unlock",
            "location": 701,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "DirectEdit._handle_lock_queue": {
            "name": "_handle_lock_queue",
            "location": 719,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectEdit._send_lock_status": {
            "name": "_send_lock_status",
            "location": 795,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectEdit._handle_upload_queue": {
            "name": "_handle_upload_queue",
            "location": 804,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectEdit._handle_upload_error": {
            "name": "_handle_upload_error",
            "location": 955,
            "return": [
                "app.models.Article"
            ],
            "arguments": {}
        },
        "DirectEdit._handle_queues": {
            "name": "_handle_queues",
            "location": 974,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectEdit._execute": {
            "name": "_execute",
            "location": 994,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectEdit.get_metrics": {
            "name": "get_metrics",
            "location": 1016,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectEdit._setup_watchdog": {
            "name": "_setup_watchdog",
            "location": 1023,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectEdit._stop_watchdog": {
            "name": "_stop_watchdog",
            "location": 1030,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectEdit.handle_watchdog_event": {
            "name": "handle_watchdog_event",
            "location": 1041,
            "return": [
                "utils.mssql_counters.Section",
                "Iterable[Type]",
                "int",
                "list"
            ],
            "arguments": {}
        },
        "DirectEdit._get_ref": {
            "name": "_get_ref",
            "location": 1092,
            "return": [
                "List[str]",
                "str",
                "List[Dict[str, str]]",
                "Tuple[Any, Any, Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "src_path": [
                    "pathlib.Path",
                    "str",
                    "Union[str, pathlib.Path]",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "DirectEdit._cleanup.purge": {
            "name": "purge",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "rel_path": [
                    "pathlib.Path",
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "nuxeo-drive-master/nxdrive/exceptions.py": {
        "DocumentAlreadyLocked.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DocumentAlreadyLocked.__repr__": {
            "name": "__repr__",
            "location": 32,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentAlreadyLocked.__str__": {
            "name": "__str__",
            "location": 35,
            "return": [
                "str",
                "int",
                "bytes",
                "Set"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineInitError.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineInitError.__repr__": {
            "name": "__repr__",
            "location": 54,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineInitError.__str__": {
            "name": "__str__",
            "location": 57,
            "return": [
                "str",
                "int",
                "bytes",
                "Set"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidSSLCertificate.__repr__": {
            "name": "__repr__",
            "location": 82,
            "return": [
                "Text",
                "int",
                "utils.Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidSSLCertificate.__str__": {
            "name": "__str__",
            "location": 85,
            "return": [
                "str",
                "int",
                "bytes",
                "Set"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissingClientSSLCertificate.__repr__": {
            "name": "__repr__",
            "location": 92,
            "return": [
                "Text",
                "str",
                "bool",
                "purplship.core.utils.xml.Element",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissingClientSSLCertificate.__str__": {
            "name": "__str__",
            "location": 95,
            "return": [
                "str",
                "int",
                "bytes",
                "Set"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissingXattrSupport.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path",
                    "int",
                    "bool"
                ]
            }
        },
        "MissingXattrSupport.__repr__": {
            "name": "__repr__",
            "location": 108,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissingXattrSupport.__str__": {
            "name": "__str__",
            "location": 111,
            "return": [
                "str",
                "int",
                "bytes",
                "Set"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncryptedSSLCertificateKey.__repr__": {
            "name": "__repr__",
            "location": 118,
            "return": [
                "Text",
                "Callable",
                "str",
                "Callable[[str],None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncryptedSSLCertificateKey.__str__": {
            "name": "__str__",
            "location": 121,
            "return": [
                "str",
                "int",
                "bytes",
                "Set"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoAssociatedSoftware.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "NoAssociatedSoftware.__repr__": {
            "name": "__repr__",
            "location": 136,
            "return": [
                "Text",
                "str",
                "Callable[[Dict],None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoAssociatedSoftware.__str__": {
            "name": "__str__",
            "location": 143,
            "return": [
                "str",
                "int",
                "bytes",
                "Set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParentNotSynced.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ParentNotSynced.__repr__": {
            "name": "__repr__",
            "location": 163,
            "return": [
                "Text",
                "str",
                "List[str]",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParentNotSynced.__str__": {
            "name": "__str__",
            "location": 169,
            "return": [
                "str",
                "int",
                "bytes",
                "Set"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootAlreadyBindWithDifferentAccount.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ScrollDescendantsError.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ScrollDescendantsError.__repr__": {
            "name": "__repr__",
            "location": 193,
            "return": [
                "Text",
                "str",
                "Tuple[Tuple[int,...]]",
                "Callable[[Dict],None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrollDescendantsError.__str__": {
            "name": "__str__",
            "location": 196,
            "return": [
                "str",
                "int",
                "bytes",
                "Set"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransferCancelled.__init__": {
            "name": "__init__",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TransferPaused.__init__": {
            "name": "__init__",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "UnknownDigest.__init__": {
            "name": "__init__",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "UnknownDigest.__repr__": {
            "name": "__repr__",
            "location": 244,
            "return": [
                "Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnknownDigest.__str__": {
            "name": "__str__",
            "location": 247,
            "return": [
                "str",
                "int",
                "bytes",
                "Set"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnknownPairState.__init__": {
            "name": "__init__",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "UnknownPairState.__repr__": {
            "name": "__repr__",
            "location": 258,
            "return": [
                "Text",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnknownPairState.__str__": {
            "name": "__str__",
            "location": 261,
            "return": [
                "str",
                "int",
                "bytes",
                "Set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/nxdrive/fatal_error.py": {
        "check_executable_path_error_qt": {
            "name": "check_executable_path_error_qt",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fatal_error_qt": {
            "name": "fatal_error_qt",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fatal_error_win": {
            "name": "fatal_error_win",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fatal_error_mac": {
            "name": "fatal_error_mac",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_executable_path": {
            "name": "check_executable_path",
            "location": 201,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {}
        },
        "check_os_version": {
            "name": "check_os_version",
            "location": 240,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "show_critical_error": {
            "name": "show_critical_error",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fatal_error_qt.section": {
            "name": "section",
            "location": 57,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {}
        },
        "fatal_error_qt.open_update_site": {
            "name": "open_update_site",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fatal_error_qt.copy": {
            "name": "copy",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/feature.py": {},
    "nuxeo-drive-master/nxdrive/logging_config.py": {
        "configure": {
            "name": "configure",
            "location": 121,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        },
        "get_handler": {
            "name": "get_handler",
            "location": 203,
            "return": [
                "None",
                "Optional[int]",
                "bool",
                "str",
                "Optional[Literal[only_clustered,include_clustered]]",
                "Dict",
                "Optional[List[Any]]"
            ],
            "arguments": {}
        },
        "get_level": {
            "name": "get_level",
            "location": 210,
            "return": [
                "int",
                "BaseException",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "_check_level": {
            "name": "_check_level",
            "location": 219,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "_check_level_file": {
            "name": "_check_level_file",
            "location": 230,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "_update_logger": {
            "name": "_update_logger",
            "location": 241,
            "return": [
                "None",
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {}
        },
        "CustomMemoryHandler.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomMemoryHandler.flush": {
            "name": "flush",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomMemoryHandler.get_buffer": {
            "name": "get_buffer",
            "location": 51,
            "return": [
                "List",
                "str",
                "bool",
                "Dict",
                "Set",
                "List[str]"
            ],
            "arguments": {}
        },
        "TimedCompressedRotatingFileHandler.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "int",
                    "List[pathlib.Path]",
                    "pathlib.Path"
                ],
                "when": [
                    "str",
                    "int",
                    "List[pathlib.Path]",
                    "pathlib.Path"
                ],
                "backup_count": [
                    "str",
                    "int",
                    "List[pathlib.Path]",
                    "pathlib.Path"
                ]
            }
        },
        "TimedCompressedRotatingFileHandler.compress_and_purge": {
            "name": "compress_and_purge",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimedCompressedRotatingFileHandler.find_rotated_files": {
            "name": "find_rotated_files",
            "location": 85,
            "return": [
                "Generator[pathlib.Path,None,None]",
                "Generator[Path]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimedCompressedRotatingFileHandler.compress": {
            "name": "compress",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TimedCompressedRotatingFileHandler.compress_all": {
            "name": "compress_all",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimedCompressedRotatingFileHandler.remove_old_files": {
            "name": "remove_old_files",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimedCompressedRotatingFileHandler.doRollover": {
            "name": "doRollover",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/nxdrive/manager.py": {
        "Manager.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Manager._save_or_load_proxy": {
            "name": "_save_or_load_proxy",
            "location": 240,
            "return": [
                "bool",
                "int",
                "List[Dict[str, Any]]",
                "sqlite3.Cursor",
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.__enter__": {
            "name": "__enter__",
            "location": 248,
            "return": [
                "Manager",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.__exit__": {
            "name": "__exit__",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.__repr__": {
            "name": "__repr__",
            "location": 254,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.close": {
            "name": "close",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager._guess_synchronization_state": {
            "name": "_guess_synchronization_state",
            "location": 267,
            "return": [
                "None",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.get_metrics": {
            "name": "get_metrics",
            "location": 284,
            "return": [
                "Dict[Text,]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager._restart_needed": {
            "name": "_restart_needed",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.open_help": {
            "name": "open_help",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.check_metrics_preferences": {
            "name": "check_metrics_preferences",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager._handle_os": {
            "name": "_handle_os",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager._get_db": {
            "name": "_get_db",
            "location": 335,
            "return": [
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager._create_dao": {
            "name": "_create_dao",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.create_tracker": {
            "name": "create_tracker",
            "location": 341,
            "return": [
                "Tracker",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager._create_server_config_updater": {
            "name": "_create_server_config_updater",
            "location": 354,
            "return": [
                "ServerOptionsUpdater",
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager._create_autolock_service": {
            "name": "_create_autolock_service",
            "location": 365,
            "return": [
                "ProcessAutoLockerWorker",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager._create_direct_edit": {
            "name": "_create_direct_edit",
            "location": 373,
            "return": [
                "DirectEdit",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager._create_updater": {
            "name": "_create_updater",
            "location": 386,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager._create_db_backup_worker": {
            "name": "_create_db_backup_worker",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager._create_extension_listener": {
            "name": "_create_extension_listener",
            "location": 409,
            "return": [
                "None",
                "str",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.resume": {
            "name": "resume",
            "location": 417,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.suspend": {
            "name": "suspend",
            "location": 425,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.stop": {
            "name": "stop",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.start_engines": {
            "name": "start_engines",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.start": {
            "name": "start",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.load": {
            "name": "load",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.reload_client_global_headers": {
            "name": "reload_client_global_headers",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager._get_engine_db_file": {
            "name": "_get_engine_db_file",
            "location": 506,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "Manager._force_autoupdate": {
            "name": "_force_autoupdate",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.open_local_file": {
            "name": "open_local_file",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Manager.device_id": {
            "name": "device_id",
            "location": 534,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.get_config": {
            "name": "get_config",
            "location": 542,
            "return": [
                "Optional[str]",
                "bool",
                "str",
                "Optional[bool]"
            ],
            "arguments": {}
        },
        "Manager.set_config": {
            "name": "set_config",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Manager.get_direct_edit_auto_lock": {
            "name": "get_direct_edit_auto_lock",
            "location": 556,
            "return": [
                "Optional[str]",
                "str",
                "bytes",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.set_direct_edit_auto_lock": {
            "name": "set_direct_edit_auto_lock",
            "location": 561,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Manager.get_feature_state": {
            "name": "get_feature_state",
            "location": 566,
            "return": [
                "bool",
                "int",
                "Union[str,Pattern]",
                "str"
            ],
            "arguments": {}
        },
        "Manager.set_feature_state": {
            "name": "set_feature_state",
            "location": 571,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Manager.get_auto_update": {
            "name": "get_auto_update",
            "location": 583,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.set_auto_update": {
            "name": "set_auto_update",
            "location": 590,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Manager.generate_report": {
            "name": "generate_report",
            "location": 594,
            "return": [
                "str",
                "FrozenSet[str]",
                "List[str]",
                "Optional[pathlib.Path]",
                "pathlib.Path",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.generate_csv": {
            "name": "generate_csv",
            "location": 607,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "session_id": [
                    "int",
                    "str",
                    "float",
                    "Union[int,str]",
                    "Tuple[Optional[str], str]"
                ],
                "engine": [
                    "int",
                    "str",
                    "Callable[[str], int]",
                    "Optional[str]",
                    "Optional[float]"
                ]
            }
        },
        "Manager._generate_csv_async": {
            "name": "_generate_csv_async",
            "location": 619,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "PyQt5.QtCore.QObject",
                    "Callable"
                ],
                "session": [
                    "Callable"
                ]
            }
        },
        "Manager.get_auto_start": {
            "name": "get_auto_start",
            "location": 638,
            "return": [
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.set_auto_start": {
            "name": "set_auto_start",
            "location": 646,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Manager.use_light_icons": {
            "name": "use_light_icons",
            "location": 658,
            "return": [
                "Optional[str]",
                "str",
                "Mapping[str, Any]",
                "recidiviz.common.constants.enum_overrides.EnumOverrides"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.set_light_icons": {
            "name": "set_light_icons",
            "location": 663,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Manager.use_sentry": {
            "name": "use_sentry",
            "location": 668,
            "return": [
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.set_sentry": {
            "name": "set_sentry",
            "location": 673,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Manager.get_update_channel": {
            "name": "get_update_channel",
            "location": 677,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "dict",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.set_update_channel": {
            "name": "set_update_channel",
            "location": 683,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Manager.get_log_level": {
            "name": "get_log_level",
            "location": 689,
            "return": [
                "str",
                "bool",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.set_log_level": {
            "name": "set_log_level",
            "location": 698,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Manager.set_proxy": {
            "name": "set_proxy",
            "location": 701,
            "return": [
                "Text",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "proxy": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Manager.get_deletion_behavior": {
            "name": "get_deletion_behavior",
            "location": 713,
            "return": [
                "DelAction",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.set_deletion_behavior": {
            "name": "set_deletion_behavior",
            "location": 716,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Manager.get_server_login_type": {
            "name": "get_server_login_type",
            "location": 719,
            "return": [
                "Tuple[float, float, float]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {}
        },
        "Manager.bind_server": {
            "name": "bind_server",
            "location": 773,
            "return": [
                "cmk.utils.type_defs.ServiceName"
            ],
            "arguments": {}
        },
        "Manager._get_engine_name": {
            "name": "_get_engine_name",
            "location": 799,
            "return": [
                "Text",
                "int",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        },
        "Manager.check_local_folder_available": {
            "name": "check_local_folder_available",
            "location": 803,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "Manager.update_engine_path": {
            "name": "update_engine_path",
            "location": 812,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Manager.bind_engine": {
            "name": "bind_engine",
            "location": 823,
            "return": [
                "Tuple[int]"
            ],
            "arguments": {}
        },
        "Manager.unbind_engine": {
            "name": "unbind_engine",
            "location": 920,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        },
        "Manager.get_engine_db": {
            "name": "get_engine_db",
            "location": 953,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "bool",
                    "Union[int, float, complex]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Manager.remove_engine_dbs": {
            "name": "remove_engine_dbs",
            "location": 959,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "int",
                    "str",
                    "Union[str, int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Manager.dispose_db": {
            "name": "dispose_db",
            "location": 972,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.version": {
            "name": "version",
            "location": 977,
            "return": [
                "str",
                "Callable[[], bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.is_started": {
            "name": "is_started",
            "location": 980,
            "return": [
                "str",
                "int",
                "utils.Node",
                "cmk.utils.type_defs.ServiceName"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.is_syncing": {
            "name": "is_syncing",
            "location": 983,
            "return": [
                "bool",
                "Dict[str,str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.get_root_id": {
            "name": "get_root_id",
            "location": 987,
            "return": [
                "Text",
                "Optional[str]",
                "int",
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "Manager.ctx_access_online": {
            "name": "ctx_access_online",
            "location": 997,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Manager.ctx_copy_share_link": {
            "name": "ctx_copy_share_link",
            "location": 1011,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {}
        },
        "Manager.ctx_edit_metadata": {
            "name": "ctx_edit_metadata",
            "location": 1025,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Manager.get_metadata_infos": {
            "name": "get_metadata_infos",
            "location": 1039,
            "return": [
                "Optional[str]",
                "Callable[[], T]",
                "int",
                "bool",
                "Dict[str, Dict[str, Any]]",
                "str"
            ],
            "arguments": {}
        },
        "Manager.send_sync_status": {
            "name": "send_sync_status",
            "location": 1054,
            "return": [
                "None",
                "Union[tuple,list]",
                "Dict[str,Any]"
            ],
            "arguments": {}
        },
        "Manager.wait_for_server_config": {
            "name": "wait_for_server_config",
            "location": 1067,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager._write_version_file": {
            "name": "_write_version_file",
            "location": 1089,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/nxdrive/notification.py": {
        "Notification.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notification.export": {
            "name": "export",
            "location": 89,
            "return": [
                "Dict[Text,]",
                "Optional[int]",
                "int",
                "str",
                "List[dict]",
                "Dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notification.is_remove_on_discard": {
            "name": "is_remove_on_discard",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notification.is_persistent": {
            "name": "is_persistent",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notification.is_unique": {
            "name": "is_unique",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notification.is_discard": {
            "name": "is_discard",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notification.is_discardable": {
            "name": "is_discardable",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notification.is_systray": {
            "name": "is_systray",
            "location": 115,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notification.is_bubble": {
            "name": "is_bubble",
            "location": 118,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notification.is_actionable": {
            "name": "is_actionable",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notification.is_discard_on_trigger": {
            "name": "is_discard_on_trigger",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notification.__repr__": {
            "name": "__repr__",
            "location": 127,
            "return": [
                "Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotificationService.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "NotificationService.load_notifications": {
            "name": "load_notifications",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotificationService.get_notifications": {
            "name": "get_notifications",
            "location": 160,
            "return": [
                "Dict",
                "str",
                "bool",
                "int",
                "Optional[str]",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotificationService.send_notification": {
            "name": "send_notification",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "NotificationService.trigger_notification": {
            "name": "trigger_notification",
            "location": 187,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        },
        "NotificationService.discard_notification": {
            "name": "discard_notification",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ErrorNotification.__init__": {
            "name": "__init__",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LockNotification.__init__": {
            "name": "__init__",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectEditErrorLockNotification.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ConflictNotification.__init__": {
            "name": "__init__",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ReadOnlyNotification.__init__": {
            "name": "__init__",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectEditReadOnlyNotification.__init__": {
            "name": "__init__",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectEditForbiddenNotification.__init__": {
            "name": "__init__",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectEditStartingNotification.__init__": {
            "name": "__init__",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DeleteReadOnlyNotification.__init__": {
            "name": "__init__",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LockedNotification.__init__": {
            "name": "__init__",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectEditLockedNotification.__init__": {
            "name": "__init__",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectEditUpdatedNotification.__init__": {
            "name": "__init__",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectTransferError.__init__": {
            "name": "__init__",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectTransferSessionFinished.__init__": {
            "name": "__init__",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ErrorOpenedFile.__init__": {
            "name": "__init__",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LongPathError.__init__": {
            "name": "__init__",
            "location": 489,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "InvalidCredentialNotification.__init__": {
            "name": "__init__",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DefaultNotificationService.init_signals": {
            "name": "init_signals",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultNotificationService._connect_engine": {
            "name": "_connect_engine",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "bool"
                ]
            }
        },
        "DefaultNotificationService._direct_transfer_error": {
            "name": "_direct_transfer_error",
            "location": 544,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DefaultNotificationService._direct_transfer_session_finshed": {
            "name": "_direct_transfer_session_finshed",
            "location": 548,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DefaultNotificationService._errorOpenedFile": {
            "name": "_errorOpenedFile",
            "location": 556,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DefaultNotificationService._longPathError": {
            "name": "_longPathError",
            "location": 559,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DefaultNotificationService._lockDocument": {
            "name": "_lockDocument",
            "location": 562,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DefaultNotificationService._unlockDocument": {
            "name": "_unlockDocument",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DefaultNotificationService._directEditLockError": {
            "name": "_directEditLockError",
            "location": 568,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DefaultNotificationService._newError": {
            "name": "_newError",
            "location": 574,
            "return": [
                "Iterator[Dict[str,str]]",
                "None"
            ],
            "arguments": {}
        },
        "DefaultNotificationService._newConflict": {
            "name": "_newConflict",
            "location": 585,
            "return": [
                "None",
                "Union[tuple,list]",
                "Dict[str,Any]",
                "str",
                "Set[str]"
            ],
            "arguments": {}
        },
        "DefaultNotificationService._newReadonly": {
            "name": "_newReadonly",
            "location": 592,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DefaultNotificationService._directEditForbidden": {
            "name": "_directEditForbidden",
            "location": 598,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "doc_id": [
                    "str",
                    "int",
                    "lock.Lock"
                ],
                "user_id": [
                    "str",
                    "int",
                    "lock.Lock"
                ],
                "hostname": [
                    "str",
                    "int",
                    "lock.Lock"
                ]
            }
        },
        "DefaultNotificationService._directEditReadonly": {
            "name": "_directEditReadonly",
            "location": 603,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DefaultNotificationService._deleteReadonly": {
            "name": "_deleteReadonly",
            "location": 606,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DefaultNotificationService._newLocked": {
            "name": "_newLocked",
            "location": 610,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DefaultNotificationService._directEditLocked": {
            "name": "_directEditLocked",
            "location": 618,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DefaultNotificationService._directEditStarting": {
            "name": "_directEditStarting",
            "location": 625,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DefaultNotificationService._directEditUpdated": {
            "name": "_directEditUpdated",
            "location": 628,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DefaultNotificationService._validAuthentication": {
            "name": "_validAuthentication",
            "location": 631,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultNotificationService._invalidAuthentication": {
            "name": "_invalidAuthentication",
            "location": 635,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/nxdrive/objects.py": {
        "_guess_digest_and_algo": {
            "name": "_guess_digest_and_algo",
            "location": 50,
            "return": [
                "Tuple[Text]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "item": [
                    "str",
                    "utils.mssql_counters.Section",
                    "Type",
                    "Mapping[str, utils.mssql_counters.Section]",
                    "bytes",
                    "zerver.models.Realm"
                ]
            }
        },
        "_to_date": {
            "name": "_to_date",
            "location": 61,
            "return": [
                "None",
                "Optional[str]",
                "Optional[Literal[only_clustered,include_clustered]]",
                "str",
                "Optional[float]",
                "bool",
                "float",
                "Optional[List[Any]]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "timestamp": [
                    "Optional[int]",
                    "int",
                    "datetime.datetime",
                    "float",
                    "Optional[datetime.tzinfo]"
                ]
            }
        },
        "RemoteFileInfo.from_dict": {
            "name": "from_dict",
            "location": 97,
            "return": [
                "RemoteFileInfo",
                "str",
                "Dict",
                "django.db.models.QuerySet"
            ],
            "arguments": {}
        },
        "Blob.from_dict": {
            "name": "from_dict",
            "location": 167,
            "return": [
                "Blob",
                "Dict[str,Any]",
                "Dict[str,Union[str,Any]]",
                "Type",
                "str"
            ],
            "arguments": {}
        },
        "NuxeoDocumentInfo.from_dict": {
            "name": "from_dict",
            "location": 201,
            "return": [
                "NuxeoDocumentInfo",
                "str",
                "Type",
                "models.Name",
                "int"
            ],
            "arguments": {}
        },
        "NuxeoDocumentInfo.get_blob": {
            "name": "get_blob",
            "location": 266,
            "return": [
                "None",
                "bool",
                "List[Dict[str,Any]]",
                "str",
                "Optional[int]",
                "Optional[str]",
                "Optional[zerver.models.UserProfile]"
            ],
            "arguments": {}
        },
        "DocPair.__repr__": {
            "name": "__repr__",
            "location": 364,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocPair.__getattr__": {
            "name": "__getattr__",
            "location": 377,
            "return": [
                "Path",
                "str",
                "Text",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {}
        },
        "DocPair.export": {
            "name": "export",
            "location": 384,
            "return": [
                "Dict[Text,Union[Text,int]]",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocPair.is_readonly": {
            "name": "is_readonly",
            "location": 420,
            "return": [
                "bool",
                "int",
                "Optional[int]",
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocPair.update_state": {
            "name": "update_state",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "local_state": [
                    "int"
                ],
                "remote_state": [
                    "int"
                ]
            }
        },
        "EngineDef.__getattr__": {
            "name": "__getattr__",
            "location": 441,
            "return": [
                "Path",
                "str",
                "Optional[str]",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {}
        },
        "EngineDef.__repr__": {
            "name": "__repr__",
            "location": 446,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transfer.__post_init__": {
            "name": "__post_init__",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.token_callback": {
            "name": "token_callback",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "int",
                    "Sequence[Tuple[float, float]]",
                    "Dict[str, str]",
                    "bytes",
                    "str"
                ],
                "_": [
                    "bool",
                    "str"
                ]
            }
        },
        "SubTypeEnricher.from_dict": {
            "name": "from_dict",
            "location": 522,
            "return": [
                "SubTypeEnricher",
                "bool",
                "str",
                "Type[Any]",
                "bytes",
                "piro.parser.Schema"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/options.py": {
        "_get_home": {
            "name": "_get_home",
            "location": 72,
            "return": [
                "str",
                "pathlib.Path",
                "int"
            ],
            "arguments": {}
        },
        "_get_resources_dir": {
            "name": "_get_resources_dir",
            "location": 99,
            "return": [
                "str",
                "pathlib.Path",
                "cerulean.Path",
                "cmk.utils.type_defs.HostName",
                "list"
            ],
            "arguments": {}
        },
        "_is_system_wide": {
            "name": "_is_system_wide",
            "location": 105,
            "return": [
                "bool",
                "str",
                "Tuple[str]"
            ],
            "arguments": {}
        },
        "_normalize_path": {
            "name": "_normalize_path",
            "location": 558,
            "return": [
                "str",
                "Type['GenericList']",
                "Type['Declared']"
            ],
            "arguments": {
                "path": [
                    "str",
                    "paradigm.catalog.Path",
                    "Sequence[str]"
                ]
            }
        },
        "validate_chunk_limit": {
            "name": "validate_chunk_limit",
            "location": 565,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "validate_chunk_size": {
            "name": "validate_chunk_size",
            "location": 571,
            "return": [
                "str",
                "int",
                "List[List[float]]"
            ],
            "arguments": {}
        },
        "validate_client_version": {
            "name": "validate_client_version",
            "location": 579,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "validate_use_sentry": {
            "name": "validate_use_sentry",
            "location": 592,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "_validate_deletion_behavior": {
            "name": "_validate_deletion_behavior",
            "location": 600,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "validate_cert_path": {
            "name": "validate_cert_path",
            "location": 606,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "validate_ca_bundle_path": {
            "name": "validate_ca_bundle_path",
            "location": 613,
            "return": [
                "str",
                "pathlib.Path",
                "paradigm.catalog.Path"
            ],
            "arguments": {}
        },
        "validate_tmp_file_limit": {
            "name": "validate_tmp_file_limit",
            "location": 620,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "validate_sync_root_max_level_limits": {
            "name": "validate_sync_root_max_level_limits",
            "location": 626,
            "return": [
                "int",
                "bool",
                "bytes",
                "str",
                "raiden.utils.Dict[str,raiden.utils.Any]",
                "Optional[bool]",
                "Optional[int]",
                "raiden.utils.Tuple[int,int]"
            ],
            "arguments": {}
        },
        "_callback_synchronization_enabled": {
            "name": "_callback_synchronization_enabled",
            "location": 632,
            "return": [
                "None"
            ],
            "arguments": {
                "new_value": [
                    "str",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "CallableFeatureHandler.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CallableFeatureHandler.__call__": {
            "name": "__call__",
            "location": 134,
            "return": [
                "bool",
                "Dict[str,Any]",
                "float",
                "str"
            ],
            "arguments": {}
        },
        "MetaOptions.__getattr__": {
            "name": "__getattr__",
            "location": 313,
            "return": [
                "None",
                "str",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {}
        },
        "MetaOptions.__setattr__": {
            "name": "__setattr__",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MetaOptions.__repr__": {
            "name": "__repr__",
            "location": 333,
            "return": [
                "Text",
                "str",
                "float",
                "Optional[str]"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "MetaOptions.__str__": {
            "name": "__str__",
            "location": 341,
            "return": [
                "Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "_": [
                    "int",
                    "bool",
                    "List[str]",
                    "IO[str]",
                    "BaseException"
                ]
            }
        },
        "MetaOptions.set": {
            "name": "set",
            "location": 351,
            "return": [
                "Dict[str,Any]",
                "None"
            ],
            "arguments": {}
        },
        "MetaOptions.update": {
            "name": "update",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MetaOptions.mock": {
            "name": "mock",
            "location": 511,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "Options.__init__": {
            "name": "__init__",
            "location": 548,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaOptions.mock.reinit": {
            "name": "reinit",
            "location": 530,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MetaOptions.mock.decorator": {
            "name": "decorator",
            "location": 534,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "MetaOptions.mock.decorator.wrapper": {
            "name": "wrapper",
            "location": 536,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/poll_workers.py": {
        "DatabaseBackupWorker.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DatabaseBackupWorker._poll": {
            "name": "_poll",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerOptionsUpdater.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ServerOptionsUpdater._first_run_done": {
            "name": "_first_run_done",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerOptionsUpdater._poll": {
            "name": "_poll",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncAndQuitWorker.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SyncAndQuitWorker._poll": {
            "name": "_poll",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/nxdrive/report.py": {
        "Report.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Report.copy_logs": {
            "name": "copy_logs",
            "location": 47,
            "return": [
                "None",
                "bytes",
                "float",
                "raiden.utils.Signature",
                "utils.Encoded",
                "raiden.utils.Optional[raiden.utils.Signature]"
            ],
            "arguments": {}
        },
        "Report.copy_db": {
            "name": "copy_db",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Report.get_path": {
            "name": "get_path",
            "location": 88,
            "return": [
                "str",
                "int",
                "bool",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Report.export_logs": {
            "name": "export_logs",
            "location": 92,
            "return": [
                "None",
                "bytes",
                "Generator",
                "Generator[bytes]",
                "float",
                "raiden.utils.Signature",
                "utils.Encoded",
                "raiden.utils.Optional[raiden.utils.Signature]"
            ],
            "arguments": {}
        },
        "Report.generate": {
            "name": "generate",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/nxdrive/session_csv.py": {
        "SessionCsv.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SessionCsv.create_tmp": {
            "name": "create_tmp",
            "location": 32,
            "return": [
                "None",
                "str",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionCsv.store_data": {
            "name": "store_data",
            "location": 49,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List[List[Any]]",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "nuxeo-drive-master/nxdrive/state.py": {},
    "nuxeo-drive-master/nxdrive/tracing.py": {
        "should_ignore": {
            "name": "should_ignore",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "Iterator[dict]"
                ]
            }
        },
        "before_send": {
            "name": "before_send",
            "location": 43,
            "return": [
                "None",
                "Optional[str]",
                "List",
                "bool",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "setup_sentry": {
            "name": "setup_sentry",
            "location": 52,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/translator.py": {
        "Translator.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Translator.translate": {
            "name": "translate",
            "location": 49,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "Translator.tr": {
            "name": "tr",
            "location": 65,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Translator.guess_label": {
            "name": "guess_label",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "Translator.on_change": {
            "name": "on_change",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Translator._tokenize": {
            "name": "_tokenize",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "Translator.get_translation": {
            "name": "get_translation",
            "location": 104,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "MutableMapping[str, Any]",
                    "Optional[str]"
                ],
                "values": [
                    "None",
                    "str",
                    "Optional[bool]",
                    "Dict"
                ]
            }
        },
        "Translator.set_language": {
            "name": "set_language",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Translator.set": {
            "name": "set",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Translator.format_datetime": {
            "name": "format_datetime",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "Translator.locale": {
            "name": "locale",
            "location": 140,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "Translator.get": {
            "name": "get",
            "location": 146,
            "return": [
                "datetime.datetime",
                "str",
                "Optional[str]",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {}
        },
        "Translator.languages": {
            "name": "languages",
            "location": 152,
            "return": [
                "list"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/utils.py": {
        "compute_fake_pid_from_path": {
            "name": "compute_fake_pid_from_path",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "current_thread_id": {
            "name": "current_thread_id",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "disk_space": {
            "name": "disk_space",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "find_suitable_direct_edit_dir": {
            "name": "find_suitable_direct_edit_dir",
            "location": 122,
            "return": [],
            "arguments": {}
        },
        "find_suitable_tmp_dir": {
            "name": "find_suitable_tmp_dir",
            "location": 141,
            "return": [],
            "arguments": {}
        },
        "get_date_from_sqlite": {
            "name": "get_date_from_sqlite",
            "location": 183,
            "return": [],
            "arguments": {}
        },
        "get_timestamp_from_date": {
            "name": "get_timestamp_from_date",
            "location": 192,
            "return": [],
            "arguments": {}
        },
        "current_milli_time": {
            "name": "current_milli_time",
            "location": 201,
            "return": [],
            "arguments": {}
        },
        "get_default_local_folder": {
            "name": "get_default_local_folder",
            "location": 211,
            "return": [],
            "arguments": {}
        },
        "get_tree_list": {
            "name": "get_tree_list",
            "location": 257,
            "return": [],
            "arguments": {}
        },
        "get_value": {
            "name": "get_value",
            "location": 314,
            "return": [],
            "arguments": {}
        },
        "grouper": {
            "name": "grouper",
            "location": 330,
            "return": [],
            "arguments": {}
        },
        "increment_local_folder": {
            "name": "increment_local_folder",
            "location": 342,
            "return": [],
            "arguments": {}
        },
        "is_hexastring": {
            "name": "is_hexastring",
            "location": 359,
            "return": [],
            "arguments": {}
        },
        "is_generated_tmp_file": {
            "name": "is_generated_tmp_file",
            "location": 367,
            "return": [],
            "arguments": {}
        },
        "is_large_file": {
            "name": "is_large_file",
            "location": 407,
            "return": [],
            "arguments": {
                "filesize": []
            }
        },
        "path_is_unc_name": {
            "name": "path_is_unc_name",
            "location": 412,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "normalized_path": {
            "name": "normalized_path",
            "location": 433,
            "return": [],
            "arguments": {}
        },
        "normalize_and_expand_path": {
            "name": "normalize_and_expand_path",
            "location": 444,
            "return": [],
            "arguments": {}
        },
        "normalize_event_filename": {
            "name": "normalize_event_filename",
            "location": 452,
            "return": [],
            "arguments": {}
        },
        "if_frozen": {
            "name": "if_frozen",
            "location": 501,
            "return": [],
            "arguments": {}
        },
        "safe_filename": {
            "name": "safe_filename",
            "location": 520,
            "return": [],
            "arguments": {}
        },
        "safe_long_path": {
            "name": "safe_long_path",
            "location": 539,
            "return": [],
            "arguments": {}
        },
        "safe_rename": {
            "name": "safe_rename",
            "location": 557,
            "return": [],
            "arguments": {}
        },
        "find_resource": {
            "name": "find_resource",
            "location": 582,
            "return": [],
            "arguments": {}
        },
        "find_icon": {
            "name": "find_icon",
            "location": 588,
            "return": [],
            "arguments": {}
        },
        "force_decode": {
            "name": "force_decode",
            "location": 593,
            "return": [],
            "arguments": {}
        },
        "force_encode": {
            "name": "force_encode",
            "location": 600,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "retrieve_ssl_certificate": {
            "name": "retrieve_ssl_certificate",
            "location": 607,
            "return": [],
            "arguments": {}
        },
        "is_valid_ssl_certificate": {
            "name": "is_valid_ssl_certificate",
            "location": 618,
            "return": [],
            "arguments": {
                "file": []
            }
        },
        "client_certificate": {
            "name": "client_certificate",
            "location": 624,
            "return": [],
            "arguments": {}
        },
        "get_certificate_details": {
            "name": "get_certificate_details",
            "location": 636,
            "return": [],
            "arguments": {}
        },
        "concat_all_certificates": {
            "name": "concat_all_certificates",
            "location": 680,
            "return": [],
            "arguments": {
                "files": []
            }
        },
        "get_final_certificate": {
            "name": "get_final_certificate",
            "location": 734,
            "return": [],
            "arguments": {
                "file": []
            }
        },
        "get_final_certificate_from_folder": {
            "name": "get_final_certificate_from_folder",
            "location": 746,
            "return": [],
            "arguments": {
                "folder": []
            }
        },
        "requests_verify": {
            "name": "requests_verify",
            "location": 753,
            "return": [],
            "arguments": {
                "ca_bundle": [],
                "ssl_no_verify": []
            }
        },
        "_cryptor": {
            "name": "_cryptor",
            "location": 773,
            "return": [],
            "arguments": {
                "key": [],
                "iv": []
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 780,
            "return": [],
            "arguments": {
                "plaintext": [],
                "key": []
            }
        },
        "decrypt": {
            "name": "decrypt",
            "location": 791,
            "return": [],
            "arguments": {
                "secure_data": [],
                "key": []
            }
        },
        "_pad_secret": {
            "name": "_pad_secret",
            "location": 807,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "simplify_url": {
            "name": "simplify_url",
            "location": 819,
            "return": [],
            "arguments": {}
        },
        "parse_protocol_url": {
            "name": "parse_protocol_url",
            "location": 834,
            "return": [],
            "arguments": {}
        },
        "parse_edit_protocol": {
            "name": "parse_edit_protocol",
            "location": 909,
            "return": [],
            "arguments": {}
        },
        "set_path_readonly": {
            "name": "set_path_readonly",
            "location": 938,
            "return": [],
            "arguments": {}
        },
        "unset_path_readonly": {
            "name": "unset_path_readonly",
            "location": 950,
            "return": [],
            "arguments": {}
        },
        "unlock_path": {
            "name": "unlock_path",
            "location": 967,
            "return": [],
            "arguments": {}
        },
        "lock_path": {
            "name": "lock_path",
            "location": 983,
            "return": [],
            "arguments": {}
        },
        "sizeof_fmt": {
            "name": "sizeof_fmt",
            "location": 995,
            "return": [],
            "arguments": {}
        },
        "short_name": {
            "name": "short_name",
            "location": 1022,
            "return": [],
            "arguments": {}
        },
        "shortify": {
            "name": "shortify",
            "location": 1034,
            "return": [],
            "arguments": {}
        },
        "compute_digest": {
            "name": "compute_digest",
            "location": 1137,
            "return": [],
            "arguments": {}
        },
        "digest_status": {
            "name": "digest_status",
            "location": 1165,
            "return": [],
            "arguments": {
                "digest": []
            }
        },
        "config_paths": {
            "name": "config_paths",
            "location": 1182,
            "return": [],
            "arguments": {}
        },
        "get_config_path": {
            "name": "get_config_path",
            "location": 1193,
            "return": [],
            "arguments": {}
        },
        "save_config": {
            "name": "save_config",
            "location": 1200,
            "return": [],
            "arguments": {}
        },
        "test_url": {
            "name": "test_url",
            "location": 1232,
            "return": [],
            "arguments": {}
        },
        "today_is_special": {
            "name": "today_is_special",
            "location": 1278,
            "return": [],
            "arguments": {}
        },
        "get_current_locale": {
            "name": "get_current_locale",
            "location": 1286,
            "return": [],
            "arguments": {}
        },
        "if_frozen.wrapper": {
            "name": "wrapper",
            "location": 509,
            "return": [],
            "arguments": {}
        },
        "PidLockFile.__init__": {
            "name": "__init__",
            "location": 1046,
            "return": [],
            "arguments": {}
        },
        "PidLockFile.unlock": {
            "name": "unlock",
            "location": 1051,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PidLockFile.check_running": {
            "name": "check_running",
            "location": 1065,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PidLockFile.lock": {
            "name": "lock",
            "location": 1122,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/nxdrive/__init__.py": {},
    "nuxeo-drive-master/nxdrive/__main__.py": {
        "signal_handler": {
            "name": "signal_handler",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 30,
            "return": [
                "int",
                "str",
                "bool",
                "List[int]",
                "Dict"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/auth/base.py": {
        "Authentication.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Authentication.connect_url": {
            "name": "connect_url",
            "location": 15,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Authentication.get_token": {
            "name": "get_token",
            "location": 18,
            "return": [
                "Token",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Authentication.revoke_token": {
            "name": "revoke_token",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Authentication.set_token": {
            "name": "set_token",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "Iterator[syntok.tokenizer.Token]",
                    "bytes"
                ]
            }
        }
    },
    "nuxeo-drive-master/nxdrive/auth/oauth2.py": {
        "OAuthentication.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuthentication.connect_url": {
            "name": "connect_url",
            "location": 33,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuthentication.get_token": {
            "name": "get_token",
            "location": 46,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuthentication.get_username": {
            "name": "get_username",
            "location": 55,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/nxdrive/auth/token.py": {
        "TokenAuthentication.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenAuthentication.connect_url": {
            "name": "connect_url",
            "location": 25,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenAuthentication.get_token": {
            "name": "get_token",
            "location": 44,
            "return": [
                "Text",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenAuthentication.revoke_token": {
            "name": "revoke_token",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/nxdrive/auth/__init__.py": {
        "get_auth": {
            "name": "get_auth",
            "location": 12,
            "return": [
                "Dict",
                "OAuthentication",
                "str",
                "TokenAuthentication"
            ],
            "arguments": {
                "host": [
                    "dict",
                    "str",
                    "Dict[\"core.Edge\", \"state.State\"]"
                ],
                "token": [
                    "str",
                    "dict",
                    "List[dict]",
                    "Callable"
                ]
            }
        }
    },
    "nuxeo-drive-master/nxdrive/client/proxy.py": {
        "get_proxy": {
            "name": "get_proxy",
            "location": 135,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "load_proxy": {
            "name": "load_proxy",
            "location": 142,
            "return": [
                "str",
                "bool",
                "Union[str, int]"
            ],
            "arguments": {
                "dao": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Dict[Hashable, Any]]",
                    "List[str]"
                ]
            }
        },
        "save_proxy": {
            "name": "save_proxy",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy": [
                    "bytes",
                    "dict",
                    "str"
                ],
                "dao": [
                    "Union[str, Sequence[str]]",
                    "Dict[str, Any]",
                    "str",
                    "Callable[[bytes], bytes]",
                    "bytes"
                ]
            }
        },
        "validate_proxy": {
            "name": "validate_proxy",
            "location": 186,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "_get_cls": {
            "name": "_get_cls",
            "location": 209,
            "return": [
                "str",
                "NoProxy",
                "bytes",
                "SystemProxy",
                "Sequence[str]",
                "ManualProxy",
                "List",
                "AutomaticProxy"
            ],
            "arguments": {}
        },
        "Proxy.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Proxy.__repr__": {
            "name": "__repr__",
            "location": 38,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Proxy.settings": {
            "name": "settings",
            "location": 46,
            "return": [
                "Dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoProxy.settings": {
            "name": "settings",
            "location": 61,
            "return": [
                "Dict[Text,None]",
                "List",
                "Type",
                "Optional[BaseException]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManualProxy.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManualProxy.settings": {
            "name": "settings",
            "location": 90,
            "return": [
                "Dict[Text,]",
                "str",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutomaticProxy.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutomaticProxy.settings": {
            "name": "settings",
            "location": 130,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/nxdrive/client/remote_client.py": {
        "Remote.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Remote.__repr__": {
            "name": "__repr__",
            "location": 185,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Remote.custom_global_metrics": {
            "name": "custom_global_metrics",
            "location": 193,
            "return": [
                "Dict[Text,Union[Text,int]]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Remote.reload_global_headers": {
            "name": "reload_global_headers",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Remote.transfer_start_callback": {
            "name": "transfer_start_callback",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Remote.transfer_end_callback": {
            "name": "transfer_end_callback",
            "location": 229,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        },
        "Remote.execute": {
            "name": "execute",
            "location": 281,
            "return": [
                "float",
                "str"
            ],
            "arguments": {}
        },
        "Remote.escape": {
            "name": "escape",
            "location": 295,
            "return": [
                "str",
                "TextIO",
                "BinaryIO",
                "int"
            ],
            "arguments": {}
        },
        "Remote.exists": {
            "name": "exists",
            "location": 310,
            "return": [
                "bool",
                "Iterable[int]",
                "cmk.utils.type_defs.UserId",
                "Union[int,float,complex]"
            ],
            "arguments": {}
        },
        "Remote.exists_in_parent": {
            "name": "exists_in_parent",
            "location": 325,
            "return": [
                "bool",
                "Set[str]"
            ],
            "arguments": {}
        },
        "Remote.request_token": {
            "name": "request_token",
            "location": 341,
            "return": [
                "str",
                "List[Dict]",
                "Union[str, None]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Remote.revoke_token": {
            "name": "revoke_token",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Remote.update_token": {
            "name": "update_token",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Remote.personal_space": {
            "name": "personal_space",
            "location": 369,
            "return": [
                "Document",
                "Iterable[str]",
                "int",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Remote.download": {
            "name": "download",
            "location": 375,
            "return": [
                "str",
                "List[str]",
                "int",
                "bytes",
                "List[Tuple[Any, str, int]]"
            ],
            "arguments": {}
        },
        "Remote.check_integrity": {
            "name": "check_integrity",
            "location": 473,
            "return": [
                "None",
                "app.models.Article",
                "itsim.machine.process_managemenprocess.Process",
                "core.models.Resource",
                "Iterator"
            ],
            "arguments": {}
        },
        "Remote.check_integrity_simple": {
            "name": "check_integrity_simple",
            "location": 516,
            "return": [
                "None",
                "app.models.Article",
                "itsim.machine.process_managemenprocess.Process",
                "core.models.Resource",
                "Iterator"
            ],
            "arguments": {}
        },
        "Remote.upload": {
            "name": "upload",
            "location": 535,
            "return": [
                "str",
                "paradigm.catalog.Path",
                "cmk.utils.type_defs.HostName",
                "List[str]"
            ],
            "arguments": {}
        },
        "Remote.upload_folder": {
            "name": "upload_folder",
            "location": 546,
            "return": [
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {}
        },
        "Remote.upload_folder_type": {
            "name": "upload_folder_type",
            "location": 560,
            "return": [
                "str",
                "type"
            ],
            "arguments": {}
        },
        "Remote.cancel_batch": {
            "name": "cancel_batch",
            "location": 569,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Remote.is_sync_root": {
            "name": "is_sync_root",
            "location": 575,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "bytes",
                    "Callable"
                ]
            }
        },
        "Remote.expand_sync_root_name": {
            "name": "expand_sync_root_name",
            "location": 579,
            "return": [
                "str",
                "Optional[zerver.models.Realm]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "sync_root": [
                    "pathlib.Path",
                    "str",
                    "docker.models.containers.Container",
                    "Union[pathlib3x.Path, IO[str]]"
                ]
            }
        },
        "Remote.get_fs_info": {
            "name": "get_fs_info",
            "location": 622,
            "return": [
                "int",
                "str",
                "bool",
                "List[int]",
                "float"
            ],
            "arguments": {}
        },
        "Remote.get_filesystem_root_info": {
            "name": "get_filesystem_root_info",
            "location": 637,
            "return": [
                "Dict[str, Any]",
                "BinaryIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "Remote.stream_content": {
            "name": "stream_content",
            "location": 641,
            "return": [
                "str",
                "list"
            ],
            "arguments": {}
        },
        "Remote.get_fs_children": {
            "name": "get_fs_children",
            "location": 676,
            "return": [
                "List",
                "Dict",
                "IO",
                "Dict[str,LabwareDefinition]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "Remote.scroll_descendants": {
            "name": "scroll_descendants",
            "location": 693,
            "return": [
                "Dict[Text,list]",
                "bool",
                "Dict[str,Any]",
                "Dict"
            ],
            "arguments": {}
        },
        "Remote.is_filtered": {
            "name": "is_filtered",
            "location": 717,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "Remote.make_folder": {
            "name": "make_folder",
            "location": 722,
            "return": [
                "models.scenes.scenes_base.Scene",
                "int",
                "Hashable",
                "rl_algorithms.utils.config.ConfigDict",
                "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                "pathlib.Path",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "Remote.stream_file": {
            "name": "stream_file",
            "location": 733,
            "return": [
                "str",
                "pathlib.Path",
                "raiden.constants.Environment",
                "tuple",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "Remote.stream_update": {
            "name": "stream_update",
            "location": 758,
            "return": [
                "pathlib.Path",
                "bool",
                "Mapping[str, Any]",
                "Dict[str, str]",
                "BinaryIO"
            ],
            "arguments": {}
        },
        "Remote.delete": {
            "name": "delete",
            "location": 779,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Remote.undelete": {
            "name": "undelete",
            "location": 784,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Remote.rename": {
            "name": "rename",
            "location": 787,
            "return": [
                "bool",
                "hackathon.utils.utils.ResultsMessage",
                "int"
            ],
            "arguments": {}
        },
        "Remote.move": {
            "name": "move",
            "location": 792,
            "return": [
                "bool",
                "hackathon.utils.utils.ResultsMessage",
                "int"
            ],
            "arguments": {}
        },
        "Remote.move2": {
            "name": "move2",
            "location": 799,
            "return": [
                "Dict",
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "Remote.get_fs_item": {
            "name": "get_fs_item",
            "location": 812,
            "return": [
                "None",
                "Optional[int]",
                "str",
                "Optional[bool]",
                "bool"
            ],
            "arguments": {}
        },
        "Remote.get_changes": {
            "name": "get_changes",
            "location": 825,
            "return": [
                "str",
                "List[int]",
                "engine.dao.sqlite.EngineDAO",
                "bool"
            ],
            "arguments": {}
        },
        "Remote.fetch": {
            "name": "fetch",
            "location": 834,
            "return": [
                "dict",
                "server.models.bike.Bike",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "Remote.check_ref": {
            "name": "check_ref",
            "location": 846,
            "return": [
                "str",
                "Iterable[str]",
                "tartare.core.models.Job",
                "bytes",
                "int",
                "Optional[Iterable[str]]",
                "List[object]"
            ],
            "arguments": {}
        },
        "Remote.query": {
            "name": "query",
            "location": 855,
            "return": [
                "Dict[str, int]",
                "int",
                "dict",
                "float"
            ],
            "arguments": {}
        },
        "Remote.get_info": {
            "name": "get_info",
            "location": 858,
            "return": [
                "None",
                "str",
                "Optional[Sequence[str]]"
            ],
            "arguments": {}
        },
        "Remote.get_note": {
            "name": "get_note",
            "location": 882,
            "return": [
                "bytes",
                "str",
                "Dict[str,str]",
                "Iterable[models.Entry]",
                "int"
            ],
            "arguments": {}
        },
        "Remote.get_blob": {
            "name": "get_blob",
            "location": 893,
            "return": [
                "str",
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {}
        },
        "Remote.lock": {
            "name": "lock",
            "location": 917,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Remote.unlock": {
            "name": "unlock",
            "location": 920,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Remote.register_as_root": {
            "name": "register_as_root",
            "location": 929,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "Remote.unregister_as_root": {
            "name": "unregister_as_root",
            "location": 937,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "Remote.set_proxy": {
            "name": "set_proxy",
            "location": 945,
            "return": [
                "None",
                "Union[tuple,list]",
                "app.models.move.Coordinate",
                "Set[str]",
                "bytes"
            ],
            "arguments": {}
        },
        "Remote.get_server_configuration": {
            "name": "get_server_configuration",
            "location": 959,
            "return": [
                "Dict",
                "bool",
                "excars.models.rides.Ride.Request",
                "Optional[str]",
                "str",
                "List[Tuple[str,str]]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Remote._get_trash_condition": {
            "name": "_get_trash_condition",
            "location": 968,
            "return": [
                "Text",
                "Dict",
                "bytes",
                "int",
                "trezor.utils.Writer",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Remote.get_doc_enricher": {
            "name": "get_doc_enricher",
            "location": 973,
            "return": [
                "bytes",
                "List[str]",
                "List[Dict]",
                "str",
                "Union[str, List[Any]]",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Type[django.db.models.Model]",
                    "Any",
                    "str",
                    "Iterable['Notification']",
                    "dict",
                    "zerver.models.UserGroup"
                ],
                "enricherType": [
                    "Text",
                    "str",
                    "Mapping[str,T]",
                    "Dict",
                    "int",
                    "bool",
                    "jsonrpc.exceptions.JSONRPCError",
                    "List[allennlp.data.tokenizers.Token]"
                ]
            }
        },
        "Remote.check_integrity.callback": {
            "name": "callback",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "nuxeo-drive-master/nxdrive/client/__init__.py": {},
    "nuxeo-drive-master/nxdrive/client/local/base.py": {
        "get": {
            "name": "get",
            "location": 605,
            "return": [
                "path.Path",
                "str",
                "List[str]",
                "pathlib.Path",
                "Callable",
                "int"
            ],
            "arguments": {}
        },
        "FileInfo.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FileInfo.__repr__": {
            "name": "__repr__",
            "location": 90,
            "return": [
                "Text",
                "str",
                "cmk.utils.type_defs.HostName",
                "Dict[str,pathlib.Path]",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.get_digest": {
            "name": "get_digest",
            "location": 97,
            "return": [
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalClientMixin.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalClientMixin.__repr__": {
            "name": "__repr__",
            "location": 128,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalClientMixin.can_use_trash": {
            "name": "can_use_trash",
            "location": 136,
            "return": [
                "bool",
                "str",
                "uuid.UUID",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalClientMixin.is_case_sensitive": {
            "name": "is_case_sensitive",
            "location": 142,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalClientMixin.is_temp_file": {
            "name": "is_temp_file",
            "location": 156,
            "return": [
                "bool",
                "Optional[Sequence[Any]]",
                "int",
                "Optional[str]",
                "Dict[str,Any]",
                "str",
                "Iterable[T]"
            ],
            "arguments": {}
        },
        "LocalClientMixin.set_readonly": {
            "name": "set_readonly",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalClientMixin.unset_readonly": {
            "name": "unset_readonly",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalClientMixin.clean_xattr_root": {
            "name": "clean_xattr_root",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalClientMixin.clean_xattr_folder_recursive": {
            "name": "clean_xattr_folder_recursive",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalClientMixin.remove_root_id": {
            "name": "remove_root_id",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalClientMixin.set_root_id": {
            "name": "set_root_id",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalClientMixin.get_root_id": {
            "name": "get_root_id",
            "location": 190,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalClientMixin.remove_remote_id_impl": {
            "name": "remove_remote_id_impl",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalClientMixin.remove_remote_id": {
            "name": "remove_remote_id",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalClientMixin.has_folder_icon": {
            "name": "has_folder_icon",
            "location": 215,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {}
        },
        "LocalClientMixin.set_folder_icon": {
            "name": "set_folder_icon",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalClientMixin.set_remote_id": {
            "name": "set_remote_id",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalClientMixin.set_path_remote_id": {
            "name": "set_path_remote_id",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalClientMixin.get_remote_id": {
            "name": "get_remote_id",
            "location": 238,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "LocalClientMixin.get_path_remote_id": {
            "name": "get_path_remote_id",
            "location": 245,
            "return": [
                "str",
                "None"
            ],
            "arguments": {}
        },
        "LocalClientMixin.get_info": {
            "name": "get_info",
            "location": 249,
            "return": [
                "FileInfo",
                "pathlib.Path",
                "str",
                "Optional[str]",
                "Union[pathlib.Path,str]",
                "bool"
            ],
            "arguments": {}
        },
        "LocalClientMixin.try_get_info": {
            "name": "try_get_info",
            "location": 290,
            "return": [
                "None",
                "Optional[Dict]",
                "str",
                "Dict[str,Any]",
                "Optional[str]",
                "Optional[datetime.datetime]",
                "Callable[,None]"
            ],
            "arguments": {}
        },
        "LocalClientMixin.is_equal_digests": {
            "name": "is_equal_digests",
            "location": 296,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "LocalClientMixin.is_ignored": {
            "name": "is_ignored",
            "location": 332,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "LocalClientMixin._get_children_info": {
            "name": "_get_children_info",
            "location": 351,
            "return": [
                "List",
                "str",
                "Dict",
                "Set",
                "List[str]",
                "List[Dict[str,Any]]"
            ],
            "arguments": {}
        },
        "LocalClientMixin.get_children_info": {
            "name": "get_children_info",
            "location": 374,
            "return": [
                "List",
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "LocalClientMixin.unlock_ref": {
            "name": "unlock_ref",
            "location": 381,
            "return": [
                "str",
                "pathlib.Path",
                "cmk.utils.type_defs.HostName",
                "Optional[pathlib.Path]"
            ],
            "arguments": {}
        },
        "LocalClientMixin.lock_ref": {
            "name": "lock_ref",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalClientMixin.make_folder": {
            "name": "make_folder",
            "location": 391,
            "return": [
                "str",
                "dict",
                "int",
                "Optional[pathlib.Path]",
                "List[Tuple[pathlib.Path, pathlib.Path]]"
            ],
            "arguments": {}
        },
        "LocalClientMixin.get_new_file": {
            "name": "get_new_file",
            "location": 402,
            "return": [
                "Tuple",
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {}
        },
        "LocalClientMixin.delete": {
            "name": "delete",
            "location": 406,
            "return": [
                "None",
                "str",
                "Callable",
                "Dict"
            ],
            "arguments": {}
        },
        "LocalClientMixin.delete_final": {
            "name": "delete_final",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalClientMixin.exists": {
            "name": "exists",
            "location": 464,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "LocalClientMixin.set_file_attribute": {
            "name": "set_file_attribute",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path",
                    "str",
                    "bool",
                    "List[pathlib.Path]",
                    "norfs.fs.base.Path"
                ]
            }
        },
        "LocalClientMixin.rename": {
            "name": "rename",
            "location": 481,
            "return": [
                "bool",
                "str",
                "int",
                "T"
            ],
            "arguments": {}
        },
        "LocalClientMixin.move": {
            "name": "move",
            "location": 515,
            "return": [
                "bool",
                "str",
                "int",
                "T"
            ],
            "arguments": {}
        },
        "LocalClientMixin.change_created_time": {
            "name": "change_created_time",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalClientMixin.change_file_date": {
            "name": "change_file_date",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalClientMixin.get_path": {
            "name": "get_path",
            "location": 572,
            "return": [
                "pathlib.Path",
                "str",
                "List[str]",
                "cmk.utils.type_defs.HostName",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "LocalClientMixin.abspath": {
            "name": "abspath",
            "location": 582,
            "return": [
                "str",
                "pathlib.Path",
                "Tuple[float]",
                "int",
                "Callable"
            ],
            "arguments": {}
        },
        "LocalClientMixin._abspath_deduped": {
            "name": "_abspath_deduped",
            "location": 586,
            "return": [
                "Tuple",
                "str",
                "List[str]",
                "Dict",
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "LocalClientMixin.trash": {
            "name": "trash",
            "location": 600,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalClientMixin.delete_final.onerror": {
            "name": "onerror",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [
                    "pathlib.Path",
                    "str",
                    "Set[str]",
                    "List[str]"
                ],
                "path": [
                    "pathlib.Path",
                    "str",
                    "Set[str]",
                    "List[str]"
                ],
                "exc_info": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, str]]",
                    "bool"
                ]
            }
        }
    },
    "nuxeo-drive-master/nxdrive/client/local/darwin.py": {
        "LocalClient.change_created_time": {
            "name": "change_created_time",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalClient.has_folder_icon": {
            "name": "has_folder_icon",
            "location": 37,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {}
        },
        "LocalClient.get_path_remote_id": {
            "name": "get_path_remote_id",
            "location": 42,
            "return": [
                "Text",
                "str",
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "LocalClient._get_icon_xdata": {
            "name": "_get_icon_xdata",
            "location": 52,
            "return": [
                "List[int]",
                "str",
                "bool",
                "Dict",
                "Set",
                "List[str]"
            ],
            "arguments": {}
        },
        "LocalClient.remove_remote_id_impl": {
            "name": "remove_remote_id_impl",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalClient.set_folder_icon": {
            "name": "set_folder_icon",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalClient.set_path_remote_id": {
            "name": "set_path_remote_id",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalClient.trash": {
            "name": "trash",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/client/local/linux.py": {
        "LocalClient.has_folder_icon": {
            "name": "has_folder_icon",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "LocalClient.get_path_remote_id": {
            "name": "get_path_remote_id",
            "location": 47,
            "return": [
                "Text",
                "str",
                "fs.base.FS",
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "LocalClient.remove_remote_id_impl": {
            "name": "remove_remote_id_impl",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalClient.set_folder_icon": {
            "name": "set_folder_icon",
            "location": 68,
            "return": [
                "None",
                "Union[tuple,list]",
                "Dict[str,Any]",
                "base.ConfigOptions",
                "bytes",
                "raiden.utils.Signature"
            ],
            "arguments": {}
        },
        "LocalClient.set_path_remote_id": {
            "name": "set_path_remote_id",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalClient.trash": {
            "name": "trash",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/client/local/windows.py": {
        "LocalClient.change_created_time": {
            "name": "change_created_time",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalClient.get_path_remote_id": {
            "name": "get_path_remote_id",
            "location": 55,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {}
        },
        "LocalClient.has_folder_icon": {
            "name": "has_folder_icon",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "LocalClient.is_ignored": {
            "name": "is_ignored",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "LocalClient.remove_remote_id_impl": {
            "name": "remove_remote_id_impl",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalClient.set_file_attribute": {
            "name": "set_file_attribute",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalClient.set_folder_icon": {
            "name": "set_folder_icon",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "pathlib.Path",
                    "List[Exception]",
                    "Exception"
                ],
                "icon": [
                    "str",
                    "Exception",
                    "T",
                    "BaseException",
                    "Dict[str, Any]"
                ]
            }
        },
        "LocalClient.set_path_remote_id": {
            "name": "set_path_remote_id",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalClient.trash": {
            "name": "trash",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/client/local/__init__.py": {},
    "nuxeo-drive-master/nxdrive/client/uploader/direct_transfer.py": {
        "DirectTransferUploader.get_upload": {
            "name": "get_upload",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransferUploader.upload": {
            "name": "upload",
            "location": 39,
            "return": [
                "Dict",
                "str",
                "cmk.utils.type_defs.HostName",
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/client/uploader/sync.py": {
        "SyncUploader.get_upload": {
            "name": "get_upload",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncUploader.upload": {
            "name": "upload",
            "location": 21,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/client/uploader/__init__.py": {
        "BaseUploader.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BaseUploader.get_upload": {
            "name": "get_upload",
            "location": 48,
            "return": [
                "typing.Optional[objects.Upload]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUploader.upload": {
            "name": "upload",
            "location": 54,
            "return": [
                "typing.Dict[builtins.str, typing.Any]"
            ],
            "arguments": {}
        },
        "BaseUploader._get_transfer": {
            "name": "_get_transfer",
            "location": 65,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "BaseUploader._set_transfer_status": {
            "name": "_set_transfer_status",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BaseUploader.upload_impl": {
            "name": "upload_impl",
            "location": 166,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "bool",
                "models.Name"
            ],
            "arguments": {}
        },
        "BaseUploader._handle_transfer_status": {
            "name": "_handle_transfer_status",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BaseUploader._ping_batch_id": {
            "name": "_ping_batch_id",
            "location": 268,
            "return": [
                "str",
                "bool",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "transfer": [
                    "int",
                    "str"
                ],
                "last_ping": [
                    "int",
                    "List[datetime.time]"
                ]
            }
        },
        "BaseUploader.upload_chunks": {
            "name": "upload_chunks",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BaseUploader._link_blob_to_doc": {
            "name": "_link_blob_to_doc",
            "location": 397,
            "return": [
                "str",
                "bool",
                "List[str]",
                "dict",
                "SendCh[trio.abc.Stream]"
            ],
            "arguments": {}
        },
        "BaseUploader.link_blob_to_doc": {
            "name": "link_blob_to_doc",
            "location": 417,
            "return": [
                "bool",
                "List[str]",
                "dict"
            ],
            "arguments": {}
        },
        "BaseUploader._complete_upload": {
            "name": "_complete_upload",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/dao/adapters.py": {
        "adapt_path": {
            "name": "adapt_path",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/dao/base.py": {
        "AutoRetryCursor.execute": {
            "name": "execute",
            "location": 23,
            "return": [
                "Optional[int]",
                "List[str]",
                "int",
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "Exception",
                    "logging.LogRecord"
                ],
                "parameters": [
                    "Exception",
                    "logging.LogRecord"
                ]
            }
        },
        "AutoRetryConnection.cursor": {
            "name": "cursor",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "factory": [
                    "Iterable[T]",
                    "pathlib.Path",
                    "bool",
                    "Callable"
                ]
            }
        },
        "BaseDAO.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BaseDAO.__repr__": {
            "name": "__repr__",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDAO.__str__": {
            "name": "__str__",
            "location": 94,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDAO.force_commit": {
            "name": "force_commit",
            "location": 97,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDAO.restore_backup": {
            "name": "restore_backup",
            "location": 112,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDAO.save_backup": {
            "name": "save_backup",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDAO.get_schema_version": {
            "name": "get_schema_version",
            "location": 145,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "bool",
                    "str",
                    "tuple"
                ],
                "db_exists": [
                    "Set[str]",
                    "int"
                ]
            }
        },
        "BaseDAO.set_schema_version": {
            "name": "set_schema_version",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "int",
                    "str",
                    "bool",
                    "Sequence[Dict[str, str]]"
                ],
                "version": [
                    "int",
                    "str",
                    "bool",
                    "Sequence[Dict[str, str]]"
                ]
            }
        },
        "BaseDAO._migrate_table": {
            "name": "_migrate_table",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BaseDAO._create_table": {
            "name": "_create_table",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BaseDAO._get_columns": {
            "name": "_get_columns",
            "location": 198,
            "return": [
                "List[str]",
                "str",
                "Iterable[str]",
                "list"
            ],
            "arguments": {}
        },
        "BaseDAO._init_db": {
            "name": "_init_db",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BaseDAO._create_configuration_table": {
            "name": "_create_configuration_table",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BaseDAO._create_main_conn": {
            "name": "_create_main_conn",
            "location": 217,
            "return": [
                "str",
                "int",
                "List[str]",
                "List[List[int]]",
                "cmk.utils.type_defs.EventRule"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDAO.dispose": {
            "name": "dispose",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDAO._get_write_connection": {
            "name": "_get_write_connection",
            "location": 241,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDAO._get_read_connection": {
            "name": "_get_read_connection",
            "location": 248,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDAO._delete_config": {
            "name": "_delete_config",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BaseDAO.delete_config": {
            "name": "delete_config",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BaseDAO.update_config": {
            "name": "update_config",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BaseDAO.store_bool": {
            "name": "store_bool",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BaseDAO.store_int": {
            "name": "store_int",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BaseDAO.get_config": {
            "name": "get_config",
            "location": 310,
            "return": [
                "bool",
                "str",
                "Optional[List[str]]",
                "Optional[bytes]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "BaseDAO.get_bool": {
            "name": "get_bool",
            "location": 319,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "List[Tuple[str, str]]"
            ],
            "arguments": {}
        },
        "BaseDAO.get_int": {
            "name": "get_int",
            "location": 328,
            "return": [
                "str",
                "raiden.utils.Tuple[int, int]",
                "bytes",
                "float"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/dao/engine.py": {
        "EngineDAO.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO._migrate_state": {
            "name": "_migrate_state",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO._migrate_db": {
            "name": "_migrate_db",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO._migrate_db_old": {
            "name": "_migrate_db_old",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO._create_table": {
            "name": "_create_table",
            "location": 532,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO._create_transfer_tables": {
            "name": "_create_transfer_tables",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO._create_sessions_table": {
            "name": "_create_sessions_table",
            "location": 578,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO._create_session_items_table": {
            "name": "_create_session_items_table",
            "location": 598,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO._create_state_table": {
            "name": "_create_state_table",
            "location": 607,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO._append_to_table": {
            "name": "_append_to_table",
            "location": 652,
            "return": [
                "None",
                "str",
                "int",
                "Dict"
            ],
            "arguments": {}
        },
        "EngineDAO.acquire_state": {
            "name": "acquire_state",
            "location": 663,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "EngineDAO.release_state": {
            "name": "release_state",
            "location": 675,
            "return": [
                "None",
                "str",
                "Union[tuple,list]",
                "Dict[str,Any]",
                "base.ConfigOptions",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.ServiceName"
            ],
            "arguments": {}
        },
        "EngineDAO.release_processor": {
            "name": "release_processor",
            "location": 683,
            "return": [
                "bool",
                "List[str]",
                "str",
                "Union[str,Dict]"
            ],
            "arguments": {}
        },
        "EngineDAO.acquire_processor": {
            "name": "acquire_processor",
            "location": 693,
            "return": [
                "bool",
                "List[str]",
                "str",
                "Union[str,Dict]"
            ],
            "arguments": {}
        },
        "EngineDAO._reinit_states": {
            "name": "_reinit_states",
            "location": 705,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.reinit_states": {
            "name": "reinit_states",
            "location": 717,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineDAO.reinit_processors": {
            "name": "reinit_processors",
            "location": 724,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineDAO.delete_remote_state": {
            "name": "delete_remote_state",
            "location": 738,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.delete_local_state": {
            "name": "delete_local_state",
            "location": 755,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.insert_local_state": {
            "name": "insert_local_state",
            "location": 774,
            "return": [
                "int",
                "Union[str, int]",
                "str"
            ],
            "arguments": {}
        },
        "EngineDAO.plan_many_direct_transfer_items": {
            "name": "plan_many_direct_transfer_items",
            "location": 832,
            "return": [
                "int",
                "str",
                "Tuple"
            ],
            "arguments": {}
        },
        "EngineDAO.queue_many_direct_transfer_items": {
            "name": "queue_many_direct_transfer_items",
            "location": 858,
            "return": [
                "None",
                "int",
                "Dict[str,Dict[str,int]]",
                "str"
            ],
            "arguments": {}
        },
        "EngineDAO.get_last_files": {
            "name": "get_last_files",
            "location": 872,
            "return": [
                "str",
                "dict",
                "Optional[List[str]]"
            ],
            "arguments": {}
        },
        "EngineDAO.get_last_files_count": {
            "name": "get_last_files_count",
            "location": 904,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineDAO._get_to_sync_condition": {
            "name": "_get_to_sync_condition",
            "location": 927,
            "return": [
                "bool",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineDAO.register_queue_manager": {
            "name": "register_queue_manager",
            "location": 930,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO._queue_pair_state": {
            "name": "_queue_pair_state",
            "location": 961,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO._get_pair_state": {
            "name": "_get_pair_state",
            "location": 974,
            "return": [
                "Text",
                "None",
                "str",
                "raiden.utils.BlockNumber",
                "bool",
                "raiden.utils.TokenAmount",
                "Dict",
                "int"
            ],
            "arguments": {}
        },
        "EngineDAO.update_last_transfer": {
            "name": "update_last_transfer",
            "location": 980,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.update_remote_name": {
            "name": "update_remote_name",
            "location": 987,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.get_dedupe_pair": {
            "name": "get_dedupe_pair",
            "location": 994,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "EngineDAO.update_local_state": {
            "name": "update_local_state",
            "location": 1008,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.update_local_modification_time": {
            "name": "update_local_modification_time",
            "location": 1065,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.get_valid_duplicate_file": {
            "name": "get_valid_duplicate_file",
            "location": 1073,
            "return": [
                "str",
                "pathlib.Path",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "EngineDAO.get_remote_descendants": {
            "name": "get_remote_descendants",
            "location": 1086,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "EngineDAO.get_remote_descendants_from_ref": {
            "name": "get_remote_descendants_from_ref",
            "location": 1092,
            "return": [
                "List[str]",
                "int"
            ],
            "arguments": {}
        },
        "EngineDAO.get_remote_children": {
            "name": "get_remote_children",
            "location": 1098,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "EngineDAO.get_new_remote_children": {
            "name": "get_new_remote_children",
            "location": 1104,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "EngineDAO.get_unsynchronized_count": {
            "name": "get_unsynchronized_count",
            "location": 1115,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineDAO.get_conflict_count": {
            "name": "get_conflict_count",
            "location": 1118,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineDAO.get_error_count": {
            "name": "get_error_count",
            "location": 1121,
            "return": [
                "str",
                "Optional[str]",
                "Union[str, int]",
                "objects.DocPair"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineDAO.get_syncing_count": {
            "name": "get_syncing_count",
            "location": 1124,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineDAO.get_sync_count": {
            "name": "get_sync_count",
            "location": 1138,
            "return": [
                "Optional[str]",
                "str",
                "Callable[[], T]",
                "int",
                "bool",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineDAO.get_dt_items_count": {
            "name": "get_dt_items_count",
            "location": 1143,
            "return": [
                "Optional[str]",
                "int",
                "Optional[cmk.utils.type_defs.HostName]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineDAO.get_count": {
            "name": "get_count",
            "location": 1146,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "EngineDAO.get_global_size": {
            "name": "get_global_size",
            "location": 1153,
            "return": [
                "int",
                "List[str]",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineDAO.get_unsynchronizeds": {
            "name": "get_unsynchronizeds",
            "location": 1169,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineDAO.get_conflicts": {
            "name": "get_conflicts",
            "location": 1175,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineDAO.get_errors": {
            "name": "get_errors",
            "location": 1181,
            "return": [
                "str",
                "cmk.utils.type_defs.UserId",
                "logging.LogRecord",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineDAO.get_local_children": {
            "name": "get_local_children",
            "location": 1187,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "EngineDAO.get_local_roots_names": {
            "name": "get_local_roots_names",
            "location": 1193,
            "return": [
                "List",
                "List[str]",
                "Set[str]",
                "Sequence[T]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineDAO.get_states_from_partial_local": {
            "name": "get_states_from_partial_local",
            "location": 1200,
            "return": [
                "List[str]",
                "int",
                "dict"
            ],
            "arguments": {}
        },
        "EngineDAO.get_first_state_from_partial_remote": {
            "name": "get_first_state_from_partial_remote",
            "location": 1214,
            "return": [
                "str",
                "sqlite3.Connection",
                "list",
                "Dict[str, Any]",
                "Tuple[int, int, int]"
            ],
            "arguments": {}
        },
        "EngineDAO.get_normal_state_from_remote": {
            "name": "get_normal_state_from_remote",
            "location": 1226,
            "return": [
                "None",
                "bool",
                "str",
                "Dict",
                "List"
            ],
            "arguments": {}
        },
        "EngineDAO.get_state_from_remote_with_path": {
            "name": "get_state_from_remote_with_path",
            "location": 1231,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "EngineDAO.get_states_from_remote": {
            "name": "get_states_from_remote",
            "location": 1246,
            "return": [
                "List[str]",
                "int",
                "dict"
            ],
            "arguments": {}
        },
        "EngineDAO.get_state_from_id": {
            "name": "get_state_from_id",
            "location": 1250,
            "return": [
                "str",
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {}
        },
        "EngineDAO._get_recursive_condition": {
            "name": "_get_recursive_condition",
            "location": 1268,
            "return": [
                "Text",
                "str",
                "bool",
                "int",
                "Tuple[int]"
            ],
            "arguments": {}
        },
        "EngineDAO._get_recursive_remote_condition": {
            "name": "_get_recursive_remote_condition",
            "location": 1279,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {}
        },
        "EngineDAO.replace_local_paths": {
            "name": "replace_local_paths",
            "location": 1286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old_path": [
                    "str",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]"
                ],
                "new_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "EngineDAO.update_remote_parent_path": {
            "name": "update_remote_parent_path",
            "location": 1307,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.update_local_parent_path": {
            "name": "update_local_parent_path",
            "location": 1329,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.update_remote_parent_path_dt": {
            "name": "update_remote_parent_path_dt",
            "location": 1352,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.mark_descendants_remotely_created": {
            "name": "mark_descendants_remotely_created",
            "location": 1382,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.remove_state": {
            "name": "remove_state",
            "location": 1398,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.remove_state_children": {
            "name": "remove_state_children",
            "location": 1416,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.get_state_from_local": {
            "name": "get_state_from_local",
            "location": 1427,
            "return": [
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {}
        },
        "EngineDAO.insert_remote_state": {
            "name": "insert_remote_state",
            "location": 1434,
            "return": [
                "int",
                "Union[str, int]",
                "str"
            ],
            "arguments": {}
        },
        "EngineDAO.queue_children": {
            "name": "queue_children",
            "location": 1490,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.increase_error": {
            "name": "increase_error",
            "location": 1506,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.reset_error": {
            "name": "reset_error",
            "location": 1524,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO._force_sync": {
            "name": "_force_sync",
            "location": 1541,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "EngineDAO.force_remote": {
            "name": "force_remote",
            "location": 1562,
            "return": [
                "List[int]",
                "list",
                "float",
                "str"
            ],
            "arguments": {}
        },
        "EngineDAO.force_remote_creation": {
            "name": "force_remote_creation",
            "location": 1565,
            "return": [
                "str",
                "utils.diskstaSection"
            ],
            "arguments": {}
        },
        "EngineDAO.force_local": {
            "name": "force_local",
            "location": 1568,
            "return": [
                "List[int]",
                "list",
                "float",
                "str"
            ],
            "arguments": {}
        },
        "EngineDAO.set_conflict_state": {
            "name": "set_conflict_state",
            "location": 1571,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "EngineDAO.unsynchronize_state": {
            "name": "unsynchronize_state",
            "location": 1583,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.unset_unsychronised": {
            "name": "unset_unsychronised",
            "location": 1602,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.synchronize_state": {
            "name": "synchronize_state",
            "location": 1629,
            "return": [
                "bool",
                "List",
                "str"
            ],
            "arguments": {}
        },
        "EngineDAO.update_remote_state": {
            "name": "update_remote_state",
            "location": 1719,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "EngineDAO._clean_filter_path": {
            "name": "_clean_filter_path",
            "location": 1835,
            "return": [
                "str",
                "paradigm.catalog.Path",
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "EngineDAO.add_path_to_scan": {
            "name": "add_path_to_scan",
            "location": 1840,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.delete_path_to_scan": {
            "name": "delete_path_to_scan",
            "location": 1848,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.get_paths_to_scan": {
            "name": "get_paths_to_scan",
            "location": 1854,
            "return": [
                "List",
                "List[str]",
                "bool",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineDAO.add_path_scanned": {
            "name": "add_path_scanned",
            "location": 1860,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.clean_scanned": {
            "name": "clean_scanned",
            "location": 1866,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineDAO.is_path_scanned": {
            "name": "is_path_scanned",
            "location": 1871,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "EngineDAO.is_filter": {
            "name": "is_filter",
            "location": 1879,
            "return": [
                "bool",
                "str",
                "Iterator[Tuple[str,Any,Any]]",
                "Callable"
            ],
            "arguments": {}
        },
        "EngineDAO.get_filters": {
            "name": "get_filters",
            "location": 1883,
            "return": [
                "List",
                "List[str]",
                "bool",
                "AbstractSet[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineDAO.add_filter": {
            "name": "add_filter",
            "location": 1887,
            "return": [
                "None",
                "str",
                "bytes",
                "Dict[str,Tuple[int,int]]"
            ],
            "arguments": {}
        },
        "EngineDAO.remove_filter": {
            "name": "remove_filter",
            "location": 1910,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.get_downloads": {
            "name": "get_downloads",
            "location": 1919,
            "return": [
                "Generator[objects.Download,None,None]",
                "Generator[Download]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineDAO.get_uploads": {
            "name": "get_uploads",
            "location": 1941,
            "return": [
                "Generator[objects.Upload,None,None]",
                "Generator[Upload]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineDAO.get_dt_uploads": {
            "name": "get_dt_uploads",
            "location": 1966,
            "return": [
                "Generator[objects.Upload,None,None]",
                "Generator[Upload]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineDAO.get_dt_uploads_raw": {
            "name": "get_dt_uploads_raw",
            "location": 1988,
            "return": [
                "List[dict[Text,Union[TransferStatus,float]]]",
                "str",
                "bool",
                "recidiviz.common.constants.enum_overrides.EnumOverrides",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineDAO.get_active_sessions_raw": {
            "name": "get_active_sessions_raw",
            "location": 2017,
            "return": [
                "List[dict[Text,TransferStatus]]",
                "bool",
                "cmk.utils.type_defs.UserId",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineDAO.get_completed_sessions_raw": {
            "name": "get_completed_sessions_raw",
            "location": 2044,
            "return": [
                "List[dict[Text,TransferStatus]]",
                "bool",
                "cmk.utils.type_defs.UserId",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineDAO.get_session": {
            "name": "get_session",
            "location": 2071,
            "return": [
                "Session",
                "str",
                "None",
                "Dict[str,str]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "EngineDAO.create_session": {
            "name": "create_session",
            "location": 2095,
            "return": [
                "int",
                "str"
            ],
            "arguments": {}
        },
        "EngineDAO.update_session": {
            "name": "update_session",
            "location": 2123,
            "return": [
                "None",
                "Optional[str]",
                "int",
                "Optional[dict]"
            ],
            "arguments": {}
        },
        "EngineDAO.change_session_status": {
            "name": "change_session_status",
            "location": 2145,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "EngineDAO.decrease_session_counts": {
            "name": "decrease_session_counts",
            "location": 2159,
            "return": [
                "None",
                "Optional[bool]",
                "Optional[bytes]",
                "Optional[str]",
                "Optional[dict]",
                "int"
            ],
            "arguments": {}
        },
        "EngineDAO.save_session_item": {
            "name": "save_session_item",
            "location": 2198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_id": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "Dict[str, bool]"
                ],
                "item": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "Dict[str, bool]"
                ]
            }
        },
        "EngineDAO.get_session_items": {
            "name": "get_session_items",
            "location": 2211,
            "return": [
                "List",
                "List[Tuple[str,str,str,str]]",
                "List[Tuple[str,str,str]]",
                "List[str]",
                "Set[str]",
                "Sequence[object]",
                "str",
                "List[Tuple[int,int]]"
            ],
            "arguments": {
                "self": [],
                "session_id": [
                    "str",
                    "Collection",
                    "int",
                    "dict",
                    "Union[sqlite3.Connection, sqlite3.Cursor]",
                    "IO[bytes]"
                ]
            }
        },
        "EngineDAO.get_downloads_with_status": {
            "name": "get_downloads_with_status",
            "location": 2221,
            "return": [
                "List",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {}
        },
        "EngineDAO.get_uploads_with_status": {
            "name": "get_uploads_with_status",
            "location": 2224,
            "return": [
                "bool",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {}
        },
        "EngineDAO.get_dt_uploads_with_status": {
            "name": "get_dt_uploads_with_status",
            "location": 2227,
            "return": [
                "Optional[str]",
                "str",
                "Optional[cmk.utils.type_defs.HostName]",
                "list",
                "bytes"
            ],
            "arguments": {}
        },
        "EngineDAO._get_uploads_with_status_and_func": {
            "name": "_get_uploads_with_status_and_func",
            "location": 2230,
            "return": [
                "List",
                "List[int]",
                "List[str]",
                "Dict[int,int]",
                "int"
            ],
            "arguments": {}
        },
        "EngineDAO.get_download": {
            "name": "get_download",
            "location": 2235,
            "return": [
                "None",
                "Optional[str]",
                "Optional[Literal[only_clustered,include_clustered]]",
                "int",
                "Optional[Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineDAO.get_upload": {
            "name": "get_upload",
            "location": 2251,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineDAO.get_dt_upload": {
            "name": "get_dt_upload",
            "location": 2254,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineDAO._get_upload_with_func": {
            "name": "_get_upload_with_func",
            "location": 2257,
            "return": [
                "None",
                "Optional[str]",
                "Optional[Dict]",
                "Optional[Literal[only_clustered,include_clustered]]",
                "bool",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "EngineDAO.save_download": {
            "name": "save_download",
            "location": 2279,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.save_upload": {
            "name": "save_upload",
            "location": 2301,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.save_dt_upload": {
            "name": "save_dt_upload",
            "location": 2338,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.update_upload": {
            "name": "update_upload",
            "location": 2380,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.pause_transfer": {
            "name": "pause_transfer",
            "location": 2390,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.suspend_transfers": {
            "name": "suspend_transfers",
            "location": 2411,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineDAO.resume_transfer": {
            "name": "resume_transfer",
            "location": 2430,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.resume_session": {
            "name": "resume_session",
            "location": 2445,
            "return": [
                "str",
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.pause_session": {
            "name": "pause_session",
            "location": 2482,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.cancel_session": {
            "name": "cancel_session",
            "location": 2493,
            "return": [
                "List",
                "str",
                "bool",
                "List[Dict]",
                "Mapping[str,Any]",
                "Tuple[int,int,int]",
                "Dict[int,Dict[str,Any]]"
            ],
            "arguments": {}
        },
        "EngineDAO.set_transfer_doc": {
            "name": "set_transfer_doc",
            "location": 2524,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.set_transfer_progress": {
            "name": "set_transfer_progress",
            "location": 2535,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.set_transfer_status": {
            "name": "set_transfer_status",
            "location": 2547,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO.remove_transfer": {
            "name": "remove_transfer",
            "location": 2560,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {}
        },
        "EngineDAO._escape": {
            "name": "_escape",
            "location": 2595,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/dao/manager.py": {
        "ManagerDAO.insert_notification": {
            "name": "insert_notification",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ManagerDAO.unlock_path": {
            "name": "unlock_path",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ManagerDAO.get_locks": {
            "name": "get_locks",
            "location": 49,
            "return": [
                "int",
                "tuple",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagerDAO.get_locked_paths": {
            "name": "get_locked_paths",
            "location": 53,
            "return": [
                "List[Path]",
                "pathlib.Path",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagerDAO.lock_path": {
            "name": "lock_path",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ManagerDAO.update_notification": {
            "name": "update_notification",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ManagerDAO.get_notifications": {
            "name": "get_notifications",
            "location": 92,
            "return": [
                "List[str]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagerDAO.discard_notification": {
            "name": "discard_notification",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ManagerDAO.remove_notification": {
            "name": "remove_notification",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ManagerDAO._migrate_db": {
            "name": "_migrate_db",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ManagerDAO._migrate_db_old": {
            "name": "_migrate_db_old",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ManagerDAO.get_engines": {
            "name": "get_engines",
            "location": 182,
            "return": [
                "int",
                "tuple",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagerDAO.update_engine_path": {
            "name": "update_engine_path",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ManagerDAO.add_engine": {
            "name": "add_engine",
            "location": 193,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "ManagerDAO.delete_engine": {
            "name": "delete_engine",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/dao/utils.py": {
        "is_healthy": {
            "name": "is_healthy",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "dump": {
            "name": "dump",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "read": {
            "name": "read",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fix_db": {
            "name": "fix_db",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "restore_backup": {
            "name": "restore_backup",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "save_backup": {
            "name": "save_backup",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/dao/__init__.py": {},
    "nuxeo-drive-master/nxdrive/dao/migrations/migration.py": {
        "MigrationInterface.upgrade": {
            "name": "upgrade",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "MigrationInterface.downgrade": {
            "name": "downgrade",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "MigrationInterface.version": {
            "name": "version",
            "location": 20,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MigrationInterface.previous_version": {
            "name": "previous_version",
            "location": 26,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/nxdrive/dao/migrations/migration_engine.py": {
        "MigrationEngine.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "int",
                    "bool",
                    "float"
                ],
                "migrations": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MigrationEngine.execute_database_upgrade": {
            "name": "execute_database_upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "starting_schema_version": [
                    "bool",
                    "float",
                    "Optional[bool]",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "old_migrations_schema_version": [
                    "int",
                    "bool",
                    "float",
                    "Optional[float]",
                    "Dict[str, Any]",
                    "Optional[int]"
                ],
                "old_migrations_callback": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "MigrationEngine.execute_database_donwgrade": {
            "name": "execute_database_donwgrade",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "starting_schema_version": [
                    "int",
                    "str",
                    "List[Tuple[int, int]]"
                ],
                "targeted_schema_version": [
                    "int",
                    "bytearray"
                ],
                "old_migrations_schema_version": [
                    "int",
                    "bytearray"
                ]
            }
        }
    },
    "nuxeo-drive-master/nxdrive/dao/migrations/__init__.py": {},
    "nuxeo-drive-master/nxdrive/dao/migrations/engine/0021_initial_migration.py": {
        "MigrationInitial.upgrade": {
            "name": "upgrade",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "dict",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "MigrationInitial.downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MigrationInitial.version": {
            "name": "version",
            "location": 44,
            "return": [
                "int",
                "str",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "MigrationInitial.previous_version": {
            "name": "previous_version",
            "location": 48,
            "return": [
                "int",
                "List",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MigrationInitial._create_configuration_table": {
            "name": "_create_configuration_table",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MigrationInitial._create_state_table": {
            "name": "_create_state_table",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "cursor": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "MigrationInitial._create_transfer_tables": {
            "name": "_create_transfer_tables",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MigrationInitial._create_sessions_table": {
            "name": "_create_sessions_table",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MigrationInitial._create_session_items_table": {
            "name": "_create_session_items_table",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/dao/migrations/engine/__init__.py": {
        "import_migrations": {
            "name": "import_migrations",
            "location": 7,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/dao/migrations/manager/0004_initial_migration.py": {
        "MigrationInitial.upgrade": {
            "name": "upgrade",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "str"
                ]
            }
        },
        "MigrationInitial.downgrade": {
            "name": "downgrade",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MigrationInitial.version": {
            "name": "version",
            "location": 61,
            "return": [
                "int",
                "str",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "MigrationInitial.previous_version": {
            "name": "previous_version",
            "location": 65,
            "return": [
                "int",
                "List",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MigrationInitial._create_configuration_table": {
            "name": "_create_configuration_table",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/dao/migrations/manager/__init__.py": {
        "import_migrations": {
            "name": "import_migrations",
            "location": 7,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/engine/activity.py": {
        "tooltip": {
            "name": "tooltip",
            "location": 262,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "doing": [
                    "Callable[[], None]",
                    "str",
                    "bool",
                    "Optional",
                    "float",
                    "int",
                    "Optional[T]"
                ]
            }
        },
        "Action.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Action.progress": {
            "name": "progress",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Action.get_percent": {
            "name": "get_percent",
            "location": 43,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Action.get_actions": {
            "name": "get_actions",
            "location": 47,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "Action.get_current_action": {
            "name": "get_current_action",
            "location": 51,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Dict[str,Any]",
                "Callable[,None]",
                "Optional[cmk.utils.diagnostics.DiagnosticsOptionalParameters]"
            ],
            "arguments": {}
        },
        "Action.finish_action": {
            "name": "finish_action",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Action.finish": {
            "name": "finish",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Action.export": {
            "name": "export",
            "location": 64,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Action.__repr__": {
            "name": "__repr__",
            "location": 71,
            "return": [
                "str",
                "bool",
                "Text",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdleAction.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileAction.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FileAction._connect_reporter": {
            "name": "_connect_reporter",
            "location": 129,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        },
        "FileAction.progress": {
            "name": "progress",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FileAction.get_percent": {
            "name": "get_percent",
            "location": 152,
            "return": [
                "float",
                "Callable[[T],List[T]]",
                "str",
                "Set[str]",
                "raiden.utils.Secret",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileAction.finish": {
            "name": "finish",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileAction.export": {
            "name": "export",
            "location": 169,
            "return": [
                "Dict[Text,str]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileAction.__repr__": {
            "name": "__repr__",
            "location": 184,
            "return": [
                "Text",
                "str",
                "bytes",
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "DownloadAction.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "VerificationAction.__init__": {
            "name": "__init__",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "UploadAction.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LinkingAction.__init__": {
            "name": "__init__",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "tooltip.action_decorator": {
            "name": "action_decorator",
            "location": 263,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "tooltip.action_decorator.func_wrapper": {
            "name": "func_wrapper",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/engine/blocklist_queue.py": {
        "BlocklistItem.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BlocklistItem.__repr__": {
            "name": "__repr__",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlocklistItem.__str__": {
            "name": "__str__",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlocklistItem.check": {
            "name": "check",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "BlocklistItem.increase": {
            "name": "increase",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlocklistQueue.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlocklistQueue.__repr__": {
            "name": "__repr__",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlocklistQueue.__str__": {
            "name": "__str__",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlocklistQueue.empty": {
            "name": "empty",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlocklistQueue.push": {
            "name": "push",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BlocklistQueue.repush": {
            "name": "repush",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BlocklistQueue.get": {
            "name": "get",
            "location": 68,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/nxdrive/engine/engine.py": {
        "Engine.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Engine.__repr__": {
            "name": "__repr__",
            "location": 221,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.export": {
            "name": "export",
            "location": 232,
            "return": [
                "Dict[Text,str]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine._create_queue_manager": {
            "name": "_create_queue_manager",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine._create_local_watcher": {
            "name": "_create_local_watcher",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine._create_remote_watcher": {
            "name": "_create_remote_watcher",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine._get_threads": {
            "name": "_get_threads",
            "location": 300,
            "return": [
                "List",
                "bool",
                "List[Dict[str,Any]]",
                "frozenset",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine._check_sync_start": {
            "name": "_check_sync_start",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.reinit": {
            "name": "reinit",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.send_metric": {
            "name": "send_metric",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Engine.stop_processor_on": {
            "name": "stop_processor_on",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Engine._set_download_dir": {
            "name": "_set_download_dir",
            "location": 332,
            "return": [
                "pathlib.Path",
                "str",
                "cmk.utils.type_defs.HostName",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine._set_csv_dir_or_cleanup": {
            "name": "_set_csv_dir_or_cleanup",
            "location": 347,
            "return": [
                "str",
                "pathlib.Path",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.set_local_folder": {
            "name": "set_local_folder",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Engine.set_local_folder_lock": {
            "name": "set_local_folder_lock",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Engine.set_ui": {
            "name": "set_ui",
            "location": 379,
            "return": [
                "None",
                "Union[tuple,list]",
                "Dict[str,Any]",
                "base.ConfigOptions",
                "bytes",
                "raiden.utils.Signature"
            ],
            "arguments": {}
        },
        "Engine.release_folder_lock": {
            "name": "release_folder_lock",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.set_offline": {
            "name": "set_offline",
            "location": 394,
            "return": [
                "None",
                "Union[tuple,list]",
                "Dict[str,Any]",
                "base.ConfigOptions",
                "bytes",
                "raiden.utils.Signature"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.is_offline": {
            "name": "is_offline",
            "location": 408,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.add_filter": {
            "name": "add_filter",
            "location": 411,
            "return": [
                "None",
                "Iterator[Dict[str,str]]",
                "Mapping[str,Any]",
                "str"
            ],
            "arguments": {}
        },
        "Engine.remove_filter": {
            "name": "remove_filter",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Engine.delete_doc": {
            "name": "delete_doc",
            "location": 428,
            "return": [
                "None",
                "Set[cmk.utils.type_defs.HostName]",
                "Union[str,bytes]",
                "Set",
                "Dict"
            ],
            "arguments": {}
        },
        "Engine._save_last_dt_session_infos": {
            "name": "_save_last_dt_session_infos",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Engine._create_remote_folder": {
            "name": "_create_remote_folder",
            "location": 476,
            "return": [
                "Dict",
                "bool",
                "Union[int,float,complex]",
                "threading.Event",
                "Optional[str]",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {}
        },
        "Engine._create_remote_folder_with_enricher": {
            "name": "_create_remote_folder_with_enricher",
            "location": 495,
            "return": [
                "Dict",
                "bool",
                "Union[int,float,complex]",
                "threading.Event",
                "Optional[str]",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {}
        },
        "Engine._direct_transfer": {
            "name": "_direct_transfer",
            "location": 522,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {}
        },
        "Engine.handle_session_status": {
            "name": "handle_session_status",
            "location": 608,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]"
            ],
            "arguments": {}
        },
        "Engine.direct_transfer": {
            "name": "direct_transfer",
            "location": 632,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Engine.direct_transfer_async": {
            "name": "direct_transfer_async",
            "location": 657,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Engine.rollback_delete": {
            "name": "rollback_delete",
            "location": 686,
            "return": [
                "None",
                "str",
                "lark.Token"
            ],
            "arguments": {}
        },
        "Engine.get_metadata_url": {
            "name": "get_metadata_url",
            "location": 698,
            "return": [
                "Text",
                "List[str]",
                "int",
                "str",
                "Callable"
            ],
            "arguments": {}
        },
        "Engine.is_syncing": {
            "name": "is_syncing",
            "location": 718,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Engine.is_paused": {
            "name": "is_paused",
            "location": 721,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.open_edit": {
            "name": "open_edit",
            "location": 724,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Engine.open_remote": {
            "name": "open_remote",
            "location": 739,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.resume": {
            "name": "resume",
            "location": 744,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine._resume_transfers": {
            "name": "_resume_transfers",
            "location": 762,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Engine.resume_transfer": {
            "name": "resume_transfer",
            "location": 783,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Engine.resume_suspended_transfers": {
            "name": "resume_suspended_transfers",
            "location": 797,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.resume_session": {
            "name": "resume_session",
            "location": 815,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Engine._manage_staled_transfers": {
            "name": "_manage_staled_transfers",
            "location": 820,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.cancel_upload": {
            "name": "cancel_upload",
            "location": 855,
            "return": [
                "None",
                "int",
                "Union[str,bytes]"
            ],
            "arguments": {}
        },
        "Engine.cancel_session": {
            "name": "cancel_session",
            "location": 882,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Engine.suspend": {
            "name": "suspend",
            "location": 906,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.unbind": {
            "name": "unbind",
            "location": 918,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.check_fs_marker": {
            "name": "check_fs_marker",
            "location": 936,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine._normalize_url": {
            "name": "_normalize_url",
            "location": 950,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "Engine._send_roots_metrics": {
            "name": "_send_roots_metrics",
            "location": 958,
            "return": [
                "None",
                "Iterator[Dict[str,str]]",
                "str",
                "List[str]",
                "Iterable[Mapping[str,Any]]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine._load_token": {
            "name": "_load_token",
            "location": 965,
            "return": [
                "str",
                "Union[int, float, complex]",
                "bool",
                "threading.Event",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine._save_token": {
            "name": "_save_token",
            "location": 987,
            "return": [
                "None",
                "Options",
                "Dict[str,Any]",
                "Union[tuple,list]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "Iterable[str]",
                    "Dict[str, int]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Engine._load_configuration": {
            "name": "_load_configuration",
            "location": 996,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine._get_db_file": {
            "name": "_get_db_file",
            "location": 1010,
            "return": [
                "str",
                "Optional[str]",
                "Optional['SparkSession']",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.get_binder": {
            "name": "get_binder",
            "location": 1013,
            "return": [
                "ServerBindingSettings",
                "str",
                "bytes",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.set_invalid_credentials": {
            "name": "set_invalid_credentials",
            "location": 1023,
            "return": [
                "None",
                "Union[tuple,list]",
                "Dict[str,Any]",
                "base.ConfigOptions",
                "bytes",
                "raiden.utils.Signature"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.has_invalid_credentials": {
            "name": "has_invalid_credentials",
            "location": 1038,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.have_folder_upload": {
            "name": "have_folder_upload",
            "location": 1042,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.local_rollback": {
            "name": "local_rollback",
            "location": 1052,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "Engine.create_thread": {
            "name": "create_thread",
            "location": 1061,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "Engine.retry_pair": {
            "name": "retry_pair",
            "location": 1079,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {}
        },
        "Engine.ignore_pair": {
            "name": "ignore_pair",
            "location": 1085,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {}
        },
        "Engine.resolve_with_local": {
            "name": "resolve_with_local",
            "location": 1092,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Engine.resolve_with_remote": {
            "name": "resolve_with_remote",
            "location": 1097,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Engine._check_last_sync": {
            "name": "_check_last_sync",
            "location": 1103,
            "return": [
                "None",
                "Set",
                "Union[tuple,list]",
                "Iterator[Dict[str,str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine._thread_finished": {
            "name": "_thread_finished",
            "location": 1141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.is_started": {
            "name": "is_started",
            "location": 1150,
            "return": [
                "bool",
                "float",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.start": {
            "name": "start",
            "location": 1153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.get_metrics": {
            "name": "get_metrics",
            "location": 1177,
            "return": [
                "Dict[Text,]",
                "Set[recidiviz.calculator.pipeline.supervision.metrics.SupervisionMetricType]",
                "int",
                "List[Dict[str,Any]]",
                "starlette.requests.Request",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.get_conflicts": {
            "name": "get_conflicts",
            "location": 1190,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.conflict_resolver": {
            "name": "conflict_resolver",
            "location": 1193,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {}
        },
        "Engine.is_stopped": {
            "name": "is_stopped",
            "location": 1237,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.stop": {
            "name": "stop",
            "location": 1240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.use_trash": {
            "name": "use_trash",
            "location": 1293,
            "return": [
                "str",
                "float",
                "int",
                "IO"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.update_token": {
            "name": "update_token",
            "location": 1297,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Engine.init_remote": {
            "name": "init_remote",
            "location": 1310,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine._setup_local_folder": {
            "name": "_setup_local_folder",
            "location": 1327,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "check_fs": [
                    "str",
                    "int",
                    "pathlib.PosixPath",
                    "Union[str, Callable]"
                ]
            }
        },
        "Engine.bind": {
            "name": "bind",
            "location": 1343,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Engine._check_fs": {
            "name": "_check_fs",
            "location": 1375,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Engine._check_https": {
            "name": "_check_https",
            "location": 1388,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine._check_root": {
            "name": "_check_root",
            "location": 1411,
            "return": [
                "None",
                "Iterator[Dict[str,str]]",
                "str",
                "List[str]",
                "Iterable[Mapping[str,Any]]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.cancel_action_on": {
            "name": "cancel_action_on",
            "location": 1430,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Engine._set_root_icon": {
            "name": "_set_root_icon",
            "location": 1438,
            "return": [
                "None",
                "Set",
                "Iterator[Dict[str,str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine._add_top_level_state": {
            "name": "_add_top_level_state",
            "location": 1462,
            "return": [
                "None",
                "Callable[,Dict[str,object]]",
                "Iterator[Dict[str,str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.suspend_client": {
            "name": "suspend_client",
            "location": 1494,
            "return": [
                "None",
                "bool",
                "cmk.base.check_utils.TPersistedSections",
                "Dict"
            ],
            "arguments": {}
        },
        "Engine.create_processor": {
            "name": "create_processor",
            "location": 1520,
            "return": [
                "Processor",
                "int",
                "float",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "Engine.dispose_db": {
            "name": "dispose_db",
            "location": 1523,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.get_user_full_name": {
            "name": "get_user_full_name",
            "location": 1527,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "Engine.open_edit.run": {
            "name": "run",
            "location": 731,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/engine/processor.py": {
        "Processor.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Processor._unlock_soft_path": {
            "name": "_unlock_soft_path",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Processor._unlock_readonly": {
            "name": "_unlock_readonly",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Processor._lock_readonly": {
            "name": "_lock_readonly",
            "location": 105,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        },
        "Processor._lock_soft_path": {
            "name": "_lock_soft_path",
            "location": 124,
            "return": [
                "Path",
                "str",
                "pathlib.Path",
                "paradigm.catalog.Path"
            ],
            "arguments": {}
        },
        "Processor.get_current_pair": {
            "name": "get_current_pair",
            "location": 135,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Processor.check_pair_state": {
            "name": "check_pair_state",
            "location": 139,
            "return": [
                "bool",
                "int",
                "raiden.utils.List[raiden.utils.TokenAddress]"
            ],
            "arguments": {}
        },
        "Processor._digest_status": {
            "name": "_digest_status",
            "location": 150,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "doc_pair": [
                    "str"
                ]
            }
        },
        "Processor._handle_doc_pair_sync": {
            "name": "_handle_doc_pair_sync",
            "location": 156,
            "return": [
                "Callable",
                "None"
            ],
            "arguments": {
                "self": [],
                "doc_pair": [],
                "sync_handler": [
                    "int",
                    "List[pathlib.Path]",
                    "str"
                ]
            }
        },
        "Processor._handle_doc_pair_dt": {
            "name": "_handle_doc_pair_dt",
            "location": 254,
            "return": [
                "Iterator[Dict[str,str]]",
                "None"
            ],
            "arguments": {
                "self": [],
                "doc_pair": [
                    "BaseException",
                    "bool",
                    "cmk.utils.type_defs.EventRule"
                ],
                "sync_handler": [
                    "int",
                    "str"
                ]
            }
        },
        "Processor._get_next_doc_pair": {
            "name": "_get_next_doc_pair",
            "location": 289,
            "return": [
                "None",
                "int",
                "str",
                "recidiviz.utils.regions.Region",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Processor._execute": {
            "name": "_execute",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Processor._check_exists_on_the_server": {
            "name": "_check_exists_on_the_server",
            "location": 499,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        },
        "Processor._handle_pair_handler_exception": {
            "name": "_handle_pair_handler_exception",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Processor._synchronize_direct_transfer": {
            "name": "_synchronize_direct_transfer",
            "location": 557,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {}
        },
        "Processor._direct_transfer_cancel": {
            "name": "_direct_transfer_cancel",
            "location": 589,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Processor._direct_transfer_end": {
            "name": "_direct_transfer_end",
            "location": 593,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Processor._synchronize_conflicted": {
            "name": "_synchronize_conflicted",
            "location": 626,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Processor._synchronize_if_not_remotely_dirty": {
            "name": "_synchronize_if_not_remotely_dirty",
            "location": 645,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        },
        "Processor._synchronize_locally_modified": {
            "name": "_synchronize_locally_modified",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Processor._get_normal_state_from_remote_ref": {
            "name": "_get_normal_state_from_remote_ref",
            "location": 750,
            "return": [
                "bool",
                "List[dict]",
                "List[Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "Processor._postpone_pair": {
            "name": "_postpone_pair",
            "location": 754,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Processor._synchronize_locally_resolved": {
            "name": "_synchronize_locally_resolved",
            "location": 771,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Processor._synchronize_locally_created": {
            "name": "_synchronize_locally_created",
            "location": 775,
            "return": [
                "None",
                "Callable",
                "utils.CWLObjectType"
            ],
            "arguments": {}
        },
        "Processor._synchronize_locally_deleted": {
            "name": "_synchronize_locally_deleted",
            "location": 1047,
            "return": [
                "None",
                "Set",
                "int"
            ],
            "arguments": {}
        },
        "Processor._synchronize_locally_moved_remotely_modified": {
            "name": "_synchronize_locally_moved_remotely_modified",
            "location": 1093,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Processor._synchronize_locally_moved_created": {
            "name": "_synchronize_locally_moved_created",
            "location": 1101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Processor._synchronize_locally_moved": {
            "name": "_synchronize_locally_moved",
            "location": 1105,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {}
        },
        "Processor._synchronize_deleted_unknown": {
            "name": "_synchronize_deleted_unknown",
            "location": 1187,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Processor._download_content": {
            "name": "_download_content",
            "location": 1203,
            "return": [
                "str",
                "pathlib.Path",
                "Dict[str, str]",
                "int",
                "List[str]"
            ],
            "arguments": {}
        },
        "Processor._update_remotely": {
            "name": "_update_remotely",
            "location": 1234,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Processor._search_for_dedup": {
            "name": "_search_for_dedup",
            "location": 1265,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Processor._synchronize_remotely_modified": {
            "name": "_synchronize_remotely_modified",
            "location": 1277,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {}
        },
        "Processor._synchronize_remotely_created": {
            "name": "_synchronize_remotely_created",
            "location": 1375,
            "return": [
                "Callable",
                "None"
            ],
            "arguments": {}
        },
        "Processor._create_remotely": {
            "name": "_create_remotely",
            "location": 1458,
            "return": [
                "Optional[int]",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "Processor._synchronize_remotely_deleted": {
            "name": "_synchronize_remotely_deleted",
            "location": 1500,
            "return": [
                "None",
                "Set",
                "int"
            ],
            "arguments": {}
        },
        "Processor._synchronize_unknown_deleted": {
            "name": "_synchronize_unknown_deleted",
            "location": 1539,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Processor._refresh_remote": {
            "name": "_refresh_remote",
            "location": 1564,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Processor._refresh_local_state": {
            "name": "_refresh_local_state",
            "location": 1574,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Processor._is_remote_move": {
            "name": "_is_remote_move",
            "location": 1584,
            "return": [
                "Tuple[bool]",
                "int",
                "bool",
                "Optional[str]",
                "Optional[List[str]]"
            ],
            "arguments": {}
        },
        "Processor._handle_failed_remote_move": {
            "name": "_handle_failed_remote_move",
            "location": 1598,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Processor._handle_failed_remote_rename": {
            "name": "_handle_failed_remote_rename",
            "location": 1603,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "Processor._handle_unsynchronized": {
            "name": "_handle_unsynchronized",
            "location": 1647,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Processor._handle_readonly": {
            "name": "_handle_readonly",
            "location": 1651,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/engine/queue_manager.py": {
        "QueueItem.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QueueItem.__repr__": {
            "name": "__repr__",
            "location": 33,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueManager.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QueueManager.init_processors": {
            "name": "init_processors",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueManager.shutdown_processors": {
            "name": "shutdown_processors",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueManager.set_max_processors": {
            "name": "set_max_processors",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QueueManager.resume": {
            "name": "resume",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueManager.is_paused": {
            "name": "is_paused",
            "location": 125,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueManager.suspend": {
            "name": "suspend",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueManager.enable_local_file_queue": {
            "name": "enable_local_file_queue",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QueueManager.enable_local_folder_queue": {
            "name": "enable_local_folder_queue",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QueueManager.enable_remote_file_queue": {
            "name": "enable_remote_file_queue",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QueueManager.enable_remote_folder_queue": {
            "name": "enable_remote_folder_queue",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QueueManager.push_ref": {
            "name": "push_ref",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QueueManager.push": {
            "name": "push",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QueueManager._on_error_timer": {
            "name": "_on_error_timer",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueManager._is_on_error": {
            "name": "_is_on_error",
            "location": 231,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "row_id": []
            }
        },
        "QueueManager._on_new_error": {
            "name": "_on_new_error",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueManager.get_errors_count": {
            "name": "get_errors_count",
            "location": 238,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueManager.get_error_threshold": {
            "name": "get_error_threshold",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueueManager.push_error": {
            "name": "push_error",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QueueManager._get_local_folder": {
            "name": "_get_local_folder",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueManager._get_local_file": {
            "name": "_get_local_file",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueManager._get_remote_folder": {
            "name": "_get_remote_folder",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueManager._get_remote_file": {
            "name": "_get_remote_file",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueManager._get_file": {
            "name": "_get_file",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueManager._thread_finished": {
            "name": "_thread_finished",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueManager.active": {
            "name": "active",
            "location": 396,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueueManager.is_active": {
            "name": "is_active",
            "location": 401,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueManager._create_thread": {
            "name": "_create_thread",
            "location": 412,
            "return": [],
            "arguments": {}
        },
        "QueueManager.get_metrics": {
            "name": "get_metrics",
            "location": 419,
            "return": [
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueManager.get_overall_size": {
            "name": "get_overall_size",
            "location": 441,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueueManager.is_processing_file": {
            "name": "is_processing_file",
            "location": 450,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "QueueManager.interrupt_processors_on": {
            "name": "interrupt_processors_on",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "exact_match": [
                    "bool"
                ]
            }
        },
        "QueueManager.get_processors_on": {
            "name": "get_processors_on",
            "location": 476,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "QueueManager.has_file_processors_on": {
            "name": "has_file_processors_on",
            "location": 503,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "QueueManager.launch_processors": {
            "name": "launch_processors",
            "location": 517,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/nxdrive/engine/tracker.py": {
        "analytics_enabled": {
            "name": "analytics_enabled",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "analytics_enabled.inner": {
            "name": "inner",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "Tracker.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Tracker.send_event": {
            "name": "send_event",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Tracker.send_sync_event": {
            "name": "send_sync_event",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Tracker.send_directedit_open": {
            "name": "send_directedit_open",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Tracker.send_directedit_edit": {
            "name": "send_directedit_edit",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Tracker.send_direct_transfer": {
            "name": "send_direct_transfer",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Tracker.send_stats": {
            "name": "send_stats",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tracker.send_hello": {
            "name": "send_hello",
            "location": 207,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tracker.send_metric": {
            "name": "send_metric",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Tracker._poll": {
            "name": "_poll",
            "location": 229,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/nxdrive/engine/workers.py": {
        "Runner.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Runner.run": {
            "name": "run",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Worker.__repr__": {
            "name": "__repr__",
            "location": 61,
            "return": [
                "Text",
                "Dict",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.export": {
            "name": "export",
            "location": 64,
            "return": [
                "Dict[Text,None]",
                "Optional[int]",
                "Optional[str]",
                "List[str]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.is_started": {
            "name": "is_started",
            "location": 74,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.is_paused": {
            "name": "is_paused",
            "location": 77,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.start": {
            "name": "start",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.stop": {
            "name": "stop",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.resume": {
            "name": "resume",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.suspend": {
            "name": "suspend",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.quit": {
            "name": "quit",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._interact": {
            "name": "_interact",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._execute": {
            "name": "_execute",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._finished": {
            "name": "_finished",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.action": {
            "name": "action",
            "location": 161,
            "return": [
                "None",
                "IdleAction"
            ],
            "arguments": {}
        },
        "Worker.get_metrics": {
            "name": "get_metrics",
            "location": 164,
            "return": [
                "Dict[Text,]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.run": {
            "name": "run",
            "location": 181,
            "return": [
                "Awaitable",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineWorker.__init__": {
            "name": "__init__",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineWorker.giveup_error": {
            "name": "giveup_error",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineWorker.increase_error": {
            "name": "increase_error",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineWorker.remove_void_transfers": {
            "name": "remove_void_transfers",
            "location": 241,
            "return": [
                "None",
                "Iterator[object]",
                "Union[tuple,list]",
                "bool"
            ],
            "arguments": {}
        },
        "PollWorker.__init__": {
            "name": "__init__",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "PollWorker.enable": {
            "name": "enable",
            "location": 269,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PollWorker.get_metrics": {
            "name": "get_metrics",
            "location": 273,
            "return": [
                "Dict",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PollWorker.get_last_poll": {
            "name": "get_last_poll",
            "location": 279,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PollWorker.get_next_poll": {
            "name": "get_next_poll",
            "location": 284,
            "return": [
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PollWorker.force_poll": {
            "name": "force_poll",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PollWorker._execute": {
            "name": "_execute",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PollWorker._poll": {
            "name": "_poll",
            "location": 300,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/nxdrive/engine/__init__.py": {},
    "nuxeo-drive-master/nxdrive/engine/watcher/constants.py": {},
    "nuxeo-drive-master/nxdrive/engine/watcher/local_watcher.py": {
        "is_text_edit_tmp_file": {
            "name": "is_text_edit_tmp_file",
            "location": 57,
            "return": [
                "bool",
                "Callable[[List,bool],None]",
                "List[Tuple[int,int]]"
            ],
            "arguments": {}
        },
        "LocalWatcher.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalWatcher._execute": {
            "name": "_execute",
            "location": 97,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalWatcher._update_local_status": {
            "name": "_update_local_status",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalWatcher.win_queue_empty": {
            "name": "win_queue_empty",
            "location": 150,
            "return": [
                "bool",
                "ignite.engine.Engine",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalWatcher.get_win_queue_size": {
            "name": "get_win_queue_size",
            "location": 153,
            "return": [
                "int",
                "ignite.engine.Engine",
                "Mapping[str,Any]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalWatcher._win_delete_check": {
            "name": "_win_delete_check",
            "location": 156,
            "return": [
                "None",
                "int",
                "str",
                "Dict",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalWatcher._win_dequeue_delete": {
            "name": "_win_dequeue_delete",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalWatcher.win_folder_scan_empty": {
            "name": "win_folder_scan_empty",
            "location": 195,
            "return": [
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalWatcher.get_win_folder_scan_size": {
            "name": "get_win_folder_scan_size",
            "location": 198,
            "return": [
                "int",
                "bool",
                "List[Tuple[str,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalWatcher._win_folder_scan_check": {
            "name": "_win_folder_scan_check",
            "location": 201,
            "return": [
                "None",
                "Dict",
                "str",
                "Set[str]",
                "int",
                "Iterable[Hashable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalWatcher._win_dequeue_folder_scan": {
            "name": "_win_dequeue_folder_scan",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalWatcher._scan": {
            "name": "_scan",
            "location": 245,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalWatcher._scan_handle_deleted_files": {
            "name": "_scan_handle_deleted_files",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalWatcher.get_metrics": {
            "name": "get_metrics",
            "location": 276,
            "return": [
                "Dict",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalWatcher._suspend_queue": {
            "name": "_suspend_queue",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalWatcher.scan_pair": {
            "name": "scan_pair",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalWatcher.empty_events": {
            "name": "empty_events",
            "location": 305,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "tuple",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalWatcher.get_creation_time": {
            "name": "get_creation_time",
            "location": 312,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "LocalWatcher._scan_recursive": {
            "name": "_scan_recursive",
            "location": 324,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {}
        },
        "LocalWatcher._setup_watchdog": {
            "name": "_setup_watchdog",
            "location": 616,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalWatcher._stop_watchdog": {
            "name": "_stop_watchdog",
            "location": 631,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalWatcher._handle_watchdog_delete": {
            "name": "_handle_watchdog_delete",
            "location": 647,
            "return": [
                "None",
                "int",
                "Type",
                "Callable"
            ],
            "arguments": {}
        },
        "LocalWatcher._handle_delete_on_known_pair": {
            "name": "_handle_delete_on_known_pair",
            "location": 662,
            "return": [
                "None",
                "Set[cmk.utils.type_defs.HostName]",
                "Set"
            ],
            "arguments": {}
        },
        "LocalWatcher._handle_move_on_known_pair": {
            "name": "_handle_move_on_known_pair",
            "location": 683,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalWatcher._handle_watchdog_event_on_known_pair": {
            "name": "_handle_watchdog_event_on_known_pair",
            "location": 793,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalWatcher._handle_watchdog_event_on_known_acquired_pair": {
            "name": "_handle_watchdog_event_on_known_acquired_pair",
            "location": 836,
            "return": [
                "None",
                "int",
                "utils.mssql_counters.Section",
                "Iterable[Type]"
            ],
            "arguments": {}
        },
        "LocalWatcher.handle_watchdog_root_event": {
            "name": "handle_watchdog_root_event",
            "location": 946,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalWatcher.handle_watchdog_event": {
            "name": "handle_watchdog_event",
            "location": 956,
            "return": [
                "None",
                "utils.mssql_counters.Section",
                "Callable",
                "int",
                "utils.CWLObjectType",
                "Dict[str,Any]"
            ],
            "arguments": {}
        },
        "LocalWatcher._schedule_win_folder_scan": {
            "name": "_schedule_win_folder_scan",
            "location": 1282,
            "return": [
                "None",
                "Union[tuple,list]",
                "Iterable[Hashable]",
                "Dict",
                "List[int]"
            ],
            "arguments": {}
        },
        "DriveFSEventHandler.__init__": {
            "name": "__init__",
            "location": 1299,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DriveFSEventHandler.__repr__": {
            "name": "__repr__",
            "location": 1306,
            "return": [
                "Text",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DriveFSEventHandler.on_any_event": {
            "name": "on_any_event",
            "location": 1316,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/engine/watcher/remote_watcher.py": {
        "RemoteWatcher.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "RemoteWatcher.get_metrics": {
            "name": "get_metrics",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RemoteWatcher._execute": {
            "name": "_execute",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteWatcher.scan_remote": {
            "name": "scan_remote",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteWatcher.scan_pair": {
            "name": "scan_pair",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "RemoteWatcher._scan_pair": {
            "name": "_scan_pair",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "RemoteWatcher._check_modified": {
            "name": "_check_modified",
            "location": 181,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "RemoteWatcher._do_scan_remote": {
            "name": "_do_scan_remote",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "RemoteWatcher._scan_remote_scroll": {
            "name": "_scan_remote_scroll",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "RemoteWatcher._scan_remote_recursive": {
            "name": "_scan_remote_recursive",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "RemoteWatcher._init_scan_remote": {
            "name": "_init_scan_remote",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "RemoteWatcher._find_remote_child_match_or_create": {
            "name": "_find_remote_child_match_or_create",
            "location": 460,
            "return": [
                "None",
                "tuple[bool]"
            ],
            "arguments": {}
        },
        "RemoteWatcher._handle_readonly": {
            "name": "_handle_readonly",
            "location": 580,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "RemoteWatcher._partial_full_scan": {
            "name": "_partial_full_scan",
            "location": 591,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "RemoteWatcher._check_offline": {
            "name": "_check_offline",
            "location": 601,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteWatcher._handle_changes": {
            "name": "_handle_changes",
            "location": 612,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "RemoteWatcher._call_and_measure_gcs": {
            "name": "_call_and_measure_gcs",
            "location": 681,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RemoteWatcher._get_changes": {
            "name": "_get_changes",
            "location": 695,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteWatcher._force_remote_scan": {
            "name": "_force_remote_scan",
            "location": 725,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "RemoteWatcher._update_remote_states": {
            "name": "_update_remote_states",
            "location": 745,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteWatcher.filtered": {
            "name": "filtered",
            "location": 1072,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "RemoteWatcher._scan_remote_scroll.sorting_func": {
            "name": "sorting_func",
            "location": 225,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "descendant": []
            }
        }
    },
    "nuxeo-drive-master/nxdrive/engine/watcher/__init__.py": {},
    "nuxeo-drive-master/nxdrive/gui/api.py": {
        "QMLDriveApi.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QMLDriveApi._json_default": {
            "name": "_json_default",
            "location": 79,
            "return": [
                "float",
                "bool",
                "int",
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "QMLDriveApi._json": {
            "name": "_json",
            "location": 87,
            "return": [
                "int",
                "pathlib.Path",
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "List[str]"
                ]
            }
        },
        "QMLDriveApi._export_formatted_state": {
            "name": "_export_formatted_state",
            "location": 91,
            "return": [
                "Dict",
                "str",
                "List[bool]",
                "Optional[str]",
                "bool",
                "Tuple[str,Any]",
                "raiden.utils.Dict[str,raiden.utils.Any]"
            ],
            "arguments": {}
        },
        "QMLDriveApi.get_last_files": {
            "name": "get_last_files",
            "location": 121,
            "return": [
                "List",
                "str",
                "List[Tuple[str,str]]",
                "List[str]",
                "Tuple[str,str]",
                "List[Tuple[str,str,str]]"
            ],
            "arguments": {}
        },
        "QMLDriveApi.get_last_files_count": {
            "name": "get_last_files_count",
            "location": 129,
            "return": [
                "int",
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {}
        },
        "QMLDriveApi.to_local_file": {
            "name": "to_local_file",
            "location": 138,
            "return": [
                "str",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "QMLDriveApi.trigger_notification": {
            "name": "trigger_notification",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QMLDriveApi.discard_notification": {
            "name": "discard_notification",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QMLDriveApi._export_notifications": {
            "name": "_export_notifications",
            "location": 159,
            "return": [
                "List",
                "List[Dict[str,Any]]",
                "frozenset",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {}
        },
        "QMLDriveApi.get_notifications": {
            "name": "get_notifications",
            "location": 165,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "QMLDriveApi.get_update_status": {
            "name": "get_update_status",
            "location": 171,
            "return": [
                "str",
                "cmk.utils.type_defs.UserId",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "QMLDriveApi.get_update_version": {
            "name": "get_update_version",
            "location": 176,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "QMLDriveApi.get_available_version": {
            "name": "get_available_version",
            "location": 181,
            "return": [
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "QMLDriveApi.app_update": {
            "name": "app_update",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QMLDriveApi.get_transfers": {
            "name": "get_transfers",
            "location": 190,
            "return": [
                "List",
                "str",
                "bool",
                "Dict",
                "Set",
                "List[str]"
            ],
            "arguments": {}
        },
        "QMLDriveApi.get_direct_transfer_items": {
            "name": "get_direct_transfer_items",
            "location": 206,
            "return": [
                "str",
                "cmk.utils.type_defs.UserId",
                "application.domain.repositories.RoleRepository",
                "application.domain.repositories.DominionRepository",
                "application.domain.repositories.UserRepository",
                "application.domain.repositories.RankingRepository"
            ],
            "arguments": {}
        },
        "QMLDriveApi.get_active_sessions_items": {
            "name": "get_active_sessions_items",
            "location": 210,
            "return": [
                "bool",
                "str",
                "Callable[[], T]"
            ],
            "arguments": {}
        },
        "QMLDriveApi.get_completed_sessions_items": {
            "name": "get_completed_sessions_items",
            "location": 214,
            "return": [
                "bool",
                "str",
                "Callable[[], T]"
            ],
            "arguments": {}
        },
        "QMLDriveApi.get_active_sessions_count": {
            "name": "get_active_sessions_count",
            "location": 219,
            "return": [
                "int",
                "str",
                "Optional[str]",
                "bool",
                "Dict"
            ],
            "arguments": {}
        },
        "QMLDriveApi.get_completed_sessions_count": {
            "name": "get_completed_sessions_count",
            "location": 230,
            "return": [
                "int",
                "str",
                "Optional[str]",
                "bool",
                "Dict"
            ],
            "arguments": {}
        },
        "QMLDriveApi.pause_transfer": {
            "name": "pause_transfer",
            "location": 241,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        },
        "QMLDriveApi.resume_transfer": {
            "name": "resume_transfer",
            "location": 261,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        },
        "QMLDriveApi.resume_session": {
            "name": "resume_session",
            "location": 278,
            "return": [
                "str",
                "None"
            ],
            "arguments": {}
        },
        "QMLDriveApi.pause_session": {
            "name": "pause_session",
            "location": 287,
            "return": [
                "str",
                "None"
            ],
            "arguments": {}
        },
        "QMLDriveApi.cancel_session": {
            "name": "cancel_session",
            "location": 295,
            "return": [
                "str",
                "None"
            ],
            "arguments": {}
        },
        "QMLDriveApi.show_metadata": {
            "name": "show_metadata",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QMLDriveApi.get_unsynchronizeds": {
            "name": "get_unsynchronizeds",
            "location": 312,
            "return": [
                "List",
                "str",
                "bool",
                "Dict",
                "Set",
                "List[str]"
            ],
            "arguments": {}
        },
        "QMLDriveApi.get_conflicts": {
            "name": "get_conflicts",
            "location": 321,
            "return": [
                "List",
                "str",
                "bool",
                "Dict",
                "Set",
                "List[str]"
            ],
            "arguments": {}
        },
        "QMLDriveApi.get_errors": {
            "name": "get_errors",
            "location": 330,
            "return": [
                "List",
                "str",
                "Dict",
                "Set",
                "List[str]",
                "List[Dict[str,str]]"
            ],
            "arguments": {}
        },
        "QMLDriveApi.get_features_list": {
            "name": "get_features_list",
            "location": 339,
            "return": [
                "List[list[Text]]",
                "str",
                "Dict",
                "Set",
                "List[str]",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QMLDriveApi.generate_report": {
            "name": "generate_report",
            "location": 349,
            "return": [
                "str",
                "int",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "QMLDriveApi.generate_csv": {
            "name": "generate_csv",
            "location": 357,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "session_id": [
                    "int",
                    "str"
                ],
                "engine_uid": [
                    "Dict[str, Any]",
                    "int",
                    "Dict[str, int]",
                    "Tuple['cirq.Qid']",
                    "str",
                    "raiden.utils.ChannelMap"
                ]
            }
        },
        "QMLDriveApi.open_direct_transfer": {
            "name": "open_direct_transfer",
            "location": 371,
            "return": [
                "None",
                "Dict[str,Dict[str,int]]",
                "Dict[str,Any]",
                "Union[tuple,list]",
                "str"
            ],
            "arguments": {}
        },
        "QMLDriveApi.open_server_folders": {
            "name": "open_server_folders",
            "location": 384,
            "return": [
                "None",
                "Dict[str,Dict[str,int]]",
                "Dict[str,Any]",
                "Union[tuple,list]",
                "str"
            ],
            "arguments": {}
        },
        "QMLDriveApi.get_hostname_from_url": {
            "name": "get_hostname_from_url",
            "location": 394,
            "return": [
                "str",
                "int",
                "Mapping[str, str]"
            ],
            "arguments": {}
        },
        "QMLDriveApi.open_remote_server": {
            "name": "open_remote_server",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QMLDriveApi.open_in_explorer": {
            "name": "open_in_explorer",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QMLDriveApi.open_local": {
            "name": "open_local",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QMLDriveApi.open_help": {
            "name": "open_help",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QMLDriveApi.open_document": {
            "name": "open_document",
            "location": 431,
            "return": [
                "Set",
                "None"
            ],
            "arguments": {}
        },
        "QMLDriveApi.show_conflicts_resolution": {
            "name": "show_conflicts_resolution",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QMLDriveApi.show_settings": {
            "name": "show_settings",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QMLDriveApi.quit": {
            "name": "quit",
            "location": 463,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QMLDriveApi.get_version": {
            "name": "get_version",
            "location": 470,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "QMLDriveApi.get_update_url": {
            "name": "get_update_url",
            "location": 474,
            "return": [
                "str",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QMLDriveApi.web_update_token": {
            "name": "web_update_token",
            "location": 478,
            "return": [
                "None",
                "Iterator[Dict[str,str]]",
                "Callable"
            ],
            "arguments": {}
        },
        "QMLDriveApi._get_ssl_error": {
            "name": "_get_ssl_error",
            "location": 517,
            "return": [
                "Text",
                "bool",
                "Tuple[float,float]",
                "cmk.utils.type_defs.UserId",
                "Optional[Set[str]]",
                "Dict[str,Any]",
                "List[str]"
            ],
            "arguments": {}
        },
        "QMLDriveApi.default_local_folder": {
            "name": "default_local_folder",
            "location": 545,
            "return": [
                "str",
                "Tuple[Tuple[int,...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QMLDriveApi.default_server_url_value": {
            "name": "default_server_url_value",
            "location": 549,
            "return": [
                "int",
                "Optional[int]",
                "str",
                "Optional[bool]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QMLDriveApi.get_disk_space_info_to_width": {
            "name": "get_disk_space_info_to_width",
            "location": 554,
            "return": [
                "List",
                "str",
                "bool",
                "Dict[str,Any]",
                "int"
            ],
            "arguments": {}
        },
        "QMLDriveApi._balance_percents": {
            "name": "_balance_percents",
            "location": 577,
            "return": [
                "bool",
                "Dict[,Union[float,int]]"
            ],
            "arguments": {}
        },
        "QMLDriveApi.get_drive_disk_space": {
            "name": "get_drive_disk_space",
            "location": 616,
            "return": [
                "str",
                "Callable",
                "Optional[List[str]]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "QMLDriveApi.get_free_disk_space": {
            "name": "get_free_disk_space",
            "location": 623,
            "return": [
                "str",
                "Callable",
                "Optional[List[str]]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "QMLDriveApi.get_used_space_without_synced": {
            "name": "get_used_space_without_synced",
            "location": 629,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "requests.Session"
            ],
            "arguments": {}
        },
        "QMLDriveApi.unbind_server": {
            "name": "unbind_server",
            "location": 637,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QMLDriveApi.filters_dialog": {
            "name": "filters_dialog",
            "location": 641,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QMLDriveApi._bind_server": {
            "name": "_bind_server",
            "location": 646,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QMLDriveApi.bind_server": {
            "name": "bind_server",
            "location": 692,
            "return": [
                "None",
                "Iterator[int]",
                "FrozenSet[int]",
                "Iterator[Any]",
                "Iterable[str]",
                "Iterator",
                "Optional[T]"
            ],
            "arguments": {}
        },
        "QMLDriveApi.web_authentication": {
            "name": "web_authentication",
            "location": 777,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QMLDriveApi.set_server_ui": {
            "name": "set_server_ui",
            "location": 846,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "QMLDriveApi.get_proxy_settings": {
            "name": "get_proxy_settings",
            "location": 856,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[str]",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QMLDriveApi.set_proxy_settings": {
            "name": "set_proxy_settings",
            "location": 866,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "QMLDriveApi.get_deletion_behavior": {
            "name": "get_deletion_behavior",
            "location": 882,
            "return": [
                "str",
                "int",
                "Hashable",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QMLDriveApi.set_deletion_behavior": {
            "name": "set_deletion_behavior",
            "location": 886,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QMLDriveApi.has_invalid_credentials": {
            "name": "has_invalid_credentials",
            "location": 890,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "QMLDriveApi.continue_oauth2_flow": {
            "name": "continue_oauth2_flow",
            "location": 897,
            "return": [
                "None",
                "str",
                "Sequence[str]",
                "bool",
                "Callable"
            ],
            "arguments": {}
        },
        "QMLDriveApi.handle_token": {
            "name": "handle_token",
            "location": 954,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QMLDriveApi.create_account": {
            "name": "create_account",
            "location": 970,
            "return": [
                "Text",
                "str",
                "Optional[Set[str]]"
            ],
            "arguments": {}
        },
        "QMLDriveApi.update_token": {
            "name": "update_token",
            "location": 998,
            "return": [
                "Text",
                "str",
                "Optional[Set[str]]",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.ServiceName",
                "Dict[str,Any]"
            ],
            "arguments": {}
        },
        "QMLDriveApi.restart_needed": {
            "name": "restart_needed",
            "location": 1032,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "QMLDriveApi.suspend": {
            "name": "suspend",
            "location": 1036,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QMLDriveApi.is_paused": {
            "name": "is_paused",
            "location": 1043,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "QMLDriveApi.get_syncing_count": {
            "name": "get_syncing_count",
            "location": 1047,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "QMLDriveApi.resolve_with_local": {
            "name": "resolve_with_local",
            "location": 1057,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QMLDriveApi.resolve_with_remote": {
            "name": "resolve_with_remote",
            "location": 1063,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QMLDriveApi.retry_pair": {
            "name": "retry_pair",
            "location": 1069,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QMLDriveApi.ignore_pair": {
            "name": "ignore_pair",
            "location": 1075,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QMLDriveApi.open_remote": {
            "name": "open_remote",
            "location": 1081,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QMLDriveApi.open_remote_document": {
            "name": "open_remote_document",
            "location": 1091,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QMLDriveApi.get_remote_document_url": {
            "name": "get_remote_document_url",
            "location": 1104,
            "return": [
                "Text",
                "bool",
                "Callable[,T]",
                "str"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/gui/application.py": {
        "Application.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "manager": []
            }
        },
        "Application.exit_app": {
            "name": "exit_app",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application._shutdown": {
            "name": "_shutdown",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.init_gui": {
            "name": "init_gui",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application._update_feature_state": {
            "name": "_update_feature_state",
            "location": 374,
            "return": [],
            "arguments": {}
        },
        "Application._center_on_screen": {
            "name": "_center_on_screen",
            "location": 385,
            "return": [],
            "arguments": {}
        },
        "Application.action_progressing": {
            "name": "action_progressing",
            "location": 410,
            "return": [],
            "arguments": {}
        },
        "Application.add_engines": {
            "name": "add_engines",
            "location": 421,
            "return": [],
            "arguments": {}
        },
        "Application.remove_engine": {
            "name": "remove_engine",
            "location": 429,
            "return": [],
            "arguments": {}
        },
        "Application._fill_qml_context": {
            "name": "_fill_qml_context",
            "location": 432,
            "return": [],
            "arguments": {}
        },
        "Application._window_root": {
            "name": "_window_root",
            "location": 536,
            "return": [],
            "arguments": {}
        },
        "Application.translate": {
            "name": "translate",
            "location": 541,
            "return": [],
            "arguments": {}
        },
        "Application._show_window": {
            "name": "_show_window",
            "location": 544,
            "return": [],
            "arguments": {}
        },
        "Application._init_translator": {
            "name": "_init_translator",
            "location": 551,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application._msgbox": {
            "name": "_msgbox",
            "location": 562,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.display_info": {
            "name": "display_info",
            "location": 588,
            "return": [],
            "arguments": {}
        },
        "Application.display_warning": {
            "name": "display_warning",
            "location": 594,
            "return": [],
            "arguments": {}
        },
        "Application.question": {
            "name": "question",
            "location": 615,
            "return": [],
            "arguments": {}
        },
        "Application._direct_edit_conflict": {
            "name": "_direct_edit_conflict",
            "location": 623,
            "return": [],
            "arguments": {}
        },
        "Application._direct_edit_error": {
            "name": "_direct_edit_error",
            "location": 654,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "values": [],
                "details": []
            }
        },
        "Application._root_deleted": {
            "name": "_root_deleted",
            "location": 663,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application._send_crash_metrics": {
            "name": "_send_crash_metrics",
            "location": 687,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application._no_space_left": {
            "name": "_no_space_left",
            "location": 701,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application._root_moved": {
            "name": "_root_moved",
            "location": 705,
            "return": [],
            "arguments": {}
        },
        "Application.confirm_deletion": {
            "name": "confirm_deletion",
            "location": 732,
            "return": [],
            "arguments": {}
        },
        "Application._doc_deleted": {
            "name": "_doc_deleted",
            "location": 779,
            "return": [],
            "arguments": {}
        },
        "Application._file_already_exists": {
            "name": "_file_already_exists",
            "location": 796,
            "return": [],
            "arguments": {}
        },
        "Application.dropped_engine": {
            "name": "dropped_engine",
            "location": 812,
            "return": [],
            "arguments": {}
        },
        "Application.change_systray_icon": {
            "name": "change_systray_icon",
            "location": 817,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.refresh_conflicts": {
            "name": "refresh_conflicts",
            "location": 859,
            "return": [],
            "arguments": {}
        },
        "Application.show_conflicts_resolution": {
            "name": "show_conflicts_resolution",
            "location": 866,
            "return": [],
            "arguments": {}
        },
        "Application.show_settings": {
            "name": "show_settings",
            "location": 873,
            "return": [],
            "arguments": {}
        },
        "Application.show_systray": {
            "name": "show_systray",
            "location": 886,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.hide_systray": {
            "name": "hide_systray",
            "location": 911,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.open_help": {
            "name": "open_help",
            "location": 915,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.destroyed_filters_dialog": {
            "name": "destroyed_filters_dialog",
            "location": 919,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.show_filters": {
            "name": "show_filters",
            "location": 923,
            "return": [],
            "arguments": {}
        },
        "Application.show_server_folders": {
            "name": "show_server_folders",
            "location": 939,
            "return": [],
            "arguments": {}
        },
        "Application._show_direct_transfer_window": {
            "name": "_show_direct_transfer_window",
            "location": 953,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.show_direct_transfer_window": {
            "name": "show_direct_transfer_window",
            "location": 963,
            "return": [],
            "arguments": {}
        },
        "Application.close_direct_transfer_window": {
            "name": "close_direct_transfer_window",
            "location": 970,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.folder_duplicate_warning": {
            "name": "folder_duplicate_warning",
            "location": 974,
            "return": [],
            "arguments": {}
        },
        "Application.confirm_cancel_transfer": {
            "name": "confirm_cancel_transfer",
            "location": 1002,
            "return": [],
            "arguments": {}
        },
        "Application.confirm_cancel_session": {
            "name": "confirm_cancel_session",
            "location": 1024,
            "return": [],
            "arguments": {}
        },
        "Application.open_authentication_dialog": {
            "name": "open_authentication_dialog",
            "location": 1046,
            "return": [],
            "arguments": {}
        },
        "Application._web_auth_not_frozen": {
            "name": "_web_auth_not_frozen",
            "location": 1067,
            "return": [],
            "arguments": {}
        },
        "Application._connect_engine": {
            "name": "_connect_engine",
            "location": 1134,
            "return": [],
            "arguments": {}
        },
        "Application.init_checks": {
            "name": "init_checks",
            "location": 1190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application._update_notification": {
            "name": "_update_notification",
            "location": 1217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application._server_incompatible": {
            "name": "_server_incompatible",
            "location": 1239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application._wrong_channel": {
            "name": "_wrong_channel",
            "location": 1267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.message_clicked": {
            "name": "message_clicked",
            "location": 1305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application._setup_notification_center": {
            "name": "_setup_notification_center",
            "location": 1311,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application._new_notification": {
            "name": "_new_notification",
            "location": 1319,
            "return": [],
            "arguments": {}
        },
        "Application._handle_notification_action": {
            "name": "_handle_notification_action",
            "location": 1342,
            "return": [],
            "arguments": {}
        },
        "Application.set_icon_state": {
            "name": "set_icon_state",
            "location": 1351,
            "return": [],
            "arguments": {}
        },
        "Application.get_tooltip": {
            "name": "get_tooltip",
            "location": 1373,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application._show_release_notes": {
            "name": "_show_release_notes",
            "location": 1388,
            "return": [],
            "arguments": {}
        },
        "Application.accept_unofficial_ssl_cert": {
            "name": "accept_unofficial_ssl_cert",
            "location": 1402,
            "return": [],
            "arguments": {}
        },
        "Application.show_metadata": {
            "name": "show_metadata",
            "location": 1492,
            "return": [],
            "arguments": {}
        },
        "Application.load_icons_set": {
            "name": "load_icons_set",
            "location": 1496,
            "return": [],
            "arguments": {}
        },
        "Application.initial_icons_set": {
            "name": "initial_icons_set",
            "location": 1531,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.setup_systray": {
            "name": "setup_systray",
            "location": 1561,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application._handle_language_change": {
            "name": "_handle_language_change",
            "location": 1573,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.event": {
            "name": "event",
            "location": 1579,
            "return": [],
            "arguments": {}
        },
        "Application.show_msgbox_restart_needed": {
            "name": "show_msgbox_restart_needed",
            "location": 1594,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application._nxdrive_url_env": {
            "name": "_nxdrive_url_env",
            "location": 1599,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application._handle_nxdrive_url": {
            "name": "_handle_nxdrive_url",
            "location": 1604,
            "return": [],
            "arguments": {}
        },
        "Application.init_nxdrive_listener": {
            "name": "init_nxdrive_listener",
            "location": 1662,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application._handle_connection": {
            "name": "_handle_connection",
            "location": 1690,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application._select_account": {
            "name": "_select_account",
            "location": 1713,
            "return": [],
            "arguments": {}
        },
        "Application.ctx_direct_transfer": {
            "name": "ctx_direct_transfer",
            "location": 1766,
            "return": [],
            "arguments": {}
        },
        "Application.update_status": {
            "name": "update_status",
            "location": 1811,
            "return": [],
            "arguments": {}
        },
        "Application.refresh_transfers": {
            "name": "refresh_transfers",
            "location": 1848,
            "return": [],
            "arguments": {}
        },
        "Application.refresh_direct_transfer_items": {
            "name": "refresh_direct_transfer_items",
            "location": 1854,
            "return": [],
            "arguments": {}
        },
        "Application.refresh_active_sessions_items": {
            "name": "refresh_active_sessions_items",
            "location": 1874,
            "return": [],
            "arguments": {}
        },
        "Application.refresh_completed_sessions_items": {
            "name": "refresh_completed_sessions_items",
            "location": 1885,
            "return": [],
            "arguments": {}
        },
        "Application._add_csv_path_to_session": {
            "name": "_add_csv_path_to_session",
            "location": 1895,
            "return": [],
            "arguments": {
                "self": [],
                "row": []
            }
        },
        "Application.force_refresh_files": {
            "name": "force_refresh_files",
            "location": 1910,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.refresh_files": {
            "name": "refresh_files",
            "location": 1916,
            "return": [],
            "arguments": {}
        },
        "Application.get_last_files": {
            "name": "get_last_files",
            "location": 1924,
            "return": [],
            "arguments": {}
        },
        "Application.current_language": {
            "name": "current_language",
            "location": 1929,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.show_metrics_acceptance": {
            "name": "show_metrics_acceptance",
            "location": 1936,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application._web_auth_not_frozen.auth": {
            "name": "auth",
            "location": 1096,
            "return": [],
            "arguments": {}
        },
        "Application.accept_unofficial_ssl_cert.signature": {
            "name": "signature",
            "location": 1406,
            "return": [],
            "arguments": {
                "sig": []
            }
        },
        "Application.accept_unofficial_ssl_cert.accept": {
            "name": "accept",
            "location": 1465,
            "return": [],
            "arguments": {}
        },
        "Application.accept_unofficial_ssl_cert.bypass_triggered": {
            "name": "bypass_triggered",
            "location": 1476,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "Application._select_account.account_selected": {
            "name": "account_selected",
            "location": 1724,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "Application._select_account.accept": {
            "name": "accept",
            "location": 1730,
            "return": [],
            "arguments": {}
        },
        "Application._select_account.close": {
            "name": "close",
            "location": 1735,
            "return": [],
            "arguments": {}
        },
        "Application.show_metrics_acceptance.analytics_choice": {
            "name": "analytics_choice",
            "location": 1951,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "Application.show_metrics_acceptance.errors_choice": {
            "name": "errors_choice",
            "location": 1954,
            "return": [],
            "arguments": {
                "state": []
            }
        }
    },
    "nuxeo-drive-master/nxdrive/gui/custom_window.py": {
        "CustomWindow.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "CustomWindow.keyPressEvent": {
            "name": "keyPressEvent",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, Any]",
                    "Union[str, Dict[str, Any]]",
                    "bytes"
                ]
            }
        },
        "CustomWindow._handle_visibility_change": {
            "name": "_handle_visibility_change",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visibility": [
                    "bool",
                    "int",
                    "str",
                    "AsyncGenerator"
                ]
            }
        }
    },
    "nuxeo-drive-master/nxdrive/gui/folders_dialog.py": {
        "regexp_validator": {
            "name": "regexp_validator",
            "location": 48,
            "return": [
                "Sequence['cirq.Qid']",
                "str"
            ],
            "arguments": {}
        },
        "DialogMixin.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DialogMixin.get_buttons": {
            "name": "get_buttons",
            "location": 91,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentsDialog.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DocumentsDialog.get_buttons": {
            "name": "get_buttons",
            "location": 112,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentsDialog.get_tree_view": {
            "name": "get_tree_view",
            "location": 130,
            "return": [
                "DocumentTreeView",
                "int",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentsDialog.get_no_roots_label": {
            "name": "get_no_roots_label",
            "location": 148,
            "return": [
                "str",
                "list",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentsDialog._handle_no_roots": {
            "name": "_handle_no_roots",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentsDialog.accept": {
            "name": "accept",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentsDialog.apply_filters": {
            "name": "apply_filters",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentsDialog._select_unselect_all_roots": {
            "name": "_select_unselect_all_roots",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FoldersDialog.__init__": {
            "name": "__init__",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FoldersDialog.keyPressEvent": {
            "name": "keyPressEvent",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, Any]",
                    "Union[str, Dict[str, Any]]",
                    "bytes"
                ]
            }
        },
        "FoldersDialog.overall_count": {
            "name": "overall_count",
            "location": 288,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoldersDialog.overall_size": {
            "name": "overall_size",
            "location": 293,
            "return": [
                "bool",
                "int",
                "Dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoldersDialog.open_menu": {
            "name": "open_menu",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "int"
                ]
            }
        },
        "FoldersDialog._add_group_local": {
            "name": "_add_group_local",
            "location": 309,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoldersDialog._add_group_options": {
            "name": "_add_group_options",
            "location": 334,
            "return": [
                "int",
                "bool",
                "cmk.utils.type_defs.EventRule",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoldersDialog._add_group_remote": {
            "name": "_add_group_remote",
            "location": 351,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoldersDialog._add_info_icon": {
            "name": "_add_info_icon",
            "location": 386,
            "return": [
                "str",
                "int",
                "Dict[str, str]",
                "bytes",
                "Sequence[Tuple[float, float]]"
            ],
            "arguments": {
                "self": [],
                "tr_label": [
                    "List[str]",
                    "int",
                    "Union[str, Iterable[str]]",
                    "bytes",
                    "bool",
                    "str"
                ]
            }
        },
        "FoldersDialog._open_duplicates_doc": {
            "name": "_open_duplicates_doc",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "PyQt5.QtCore.QPoint",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "FoldersDialog._add_subgroup_duplicate_behavior": {
            "name": "_add_subgroup_duplicate_behavior",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FoldersDialog._new_folder_button_action": {
            "name": "_new_folder_button_action",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoldersDialog._find_folders_duplicates": {
            "name": "_find_folders_duplicates",
            "location": 432,
            "return": [
                "List",
                "int",
                "Set",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoldersDialog.accept": {
            "name": "accept",
            "location": 453,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoldersDialog.button_ok_state": {
            "name": "button_ok_state",
            "location": 476,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoldersDialog.get_tree_view": {
            "name": "get_tree_view",
            "location": 487,
            "return": [
                "Optional[bool]",
                "FolderTreeView"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoldersDialog._files_display": {
            "name": "_files_display",
            "location": 493,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoldersDialog._process_additionnal_local_paths": {
            "name": "_process_additionnal_local_paths",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FoldersDialog._select_more_files": {
            "name": "_select_more_files",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoldersDialog._select_more_folder": {
            "name": "_select_more_folder",
            "location": 552,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewFolderDialog.__init__": {
            "name": "__init__",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "NewFolderDialog.closeEvent": {
            "name": "closeEvent",
            "location": 599,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "bool",
                    "float"
                ]
            }
        },
        "NewFolderDialog._add_operation_result_layout": {
            "name": "_add_operation_result_layout",
            "location": 604,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewFolderDialog._add_folder_creation_layout": {
            "name": "_add_folder_creation_layout",
            "location": 626,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewFolderDialog.accept": {
            "name": "accept",
            "location": 664,
            "return": [
                "cmk.utils.type_defs.UserId",
                "Callable",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewFolderDialog.close_success": {
            "name": "close_success",
            "location": 687,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewFolderDialog._show_result_message": {
            "name": "_show_result_message",
            "location": 695,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool"
                ],
                "status": [
                    "str"
                ]
            }
        },
        "NewFolderDialog._button_ok_state": {
            "name": "_button_ok_state",
            "location": 704,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "bool",
                    "int",
                    "Sequence[str]",
                    "Iterator[Tuple[str, Any, Any]]"
                ]
            }
        },
        "NewFolderDialog.handle_creation_success": {
            "name": "handle_creation_success",
            "location": 709,
            "return": [
                "cmk.utils.type_defs.UserId",
                "Callable",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "new_remote_path": [
                    "str",
                    "List[pathlib.Path]",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "NewFolderDialog.handle_creation_failure": {
            "name": "handle_creation_failure",
            "location": 718,
            "return": [
                "cmk.utils.type_defs.UserId",
                "Callable",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/nxdrive/gui/folders_loader.py": {
        "ContentLoaderMixin.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ContentLoaderMixin.run": {
            "name": "run",
            "location": 36,
            "return": [
                "None",
                "Iterator[T]",
                "Iterator[str]",
                "Iterator[int]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentLoaderMixin.add_loading_subitem": {
            "name": "add_loading_subitem",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ContentLoaderMixin.new_subitem": {
            "name": "new_subitem",
            "location": 75,
            "return": [
                "qt.imports.QStandardItem",
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "int",
                    "Callable[[], None]",
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "ContentLoaderMixin.handle_already_cached": {
            "name": "handle_already_cached",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentLoaderMixin.sort_children": {
            "name": "sort_children",
            "location": 83,
            "return": [
                "List",
                "bool",
                "Iterable[str]",
                "str"
            ],
            "arguments": {}
        },
        "ContentLoaderMixin.fill_tree": {
            "name": "fill_tree",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DocumentContentLoader.new_subitem": {
            "name": "new_subitem",
            "location": 103,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "FolderContentLoader.new_subitem": {
            "name": "new_subitem",
            "location": 123,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "FolderContentLoader.fill_tree": {
            "name": "fill_tree",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FolderContentLoader.handle_already_cached": {
            "name": "handle_already_cached",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/nxdrive/gui/folders_model.py": {
        "FileInfo.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.__repr__": {
            "name": "__repr__",
            "location": 30,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.add_child": {
            "name": "add_child",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FileInfo.get_children": {
            "name": "get_children",
            "location": 40,
            "return": [
                "Iterator[FileInfo]",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.enable": {
            "name": "enable",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.selectable": {
            "name": "selectable",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.checkable": {
            "name": "checkable",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.get_label": {
            "name": "get_label",
            "location": 56,
            "return": [
                "Text",
                "str",
                "float",
                "db.models.Article",
                "bool",
                "List[db.models.Name]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.get_id": {
            "name": "get_id",
            "location": 60,
            "return": [
                "int",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.folderish": {
            "name": "folderish",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.is_hidden": {
            "name": "is_hidden",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.get_path": {
            "name": "get_path",
            "location": 72,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Doc.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Doc.__repr__": {
            "name": "__repr__",
            "location": 88,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Doc.folderish": {
            "name": "folderish",
            "location": 94,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Doc.enable": {
            "name": "enable",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Doc.get_id": {
            "name": "get_id",
            "location": 106,
            "return": [
                "str",
                "int",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Doc.get_label": {
            "name": "get_label",
            "location": 110,
            "return": [
                "str",
                "float",
                "db.models.Article",
                "bool",
                "List[db.models.Name]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Doc.get_path": {
            "name": "get_path",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Doc.selectable": {
            "name": "selectable",
            "location": 118,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilteredDoc.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FilteredDoc.__repr__": {
            "name": "__repr__",
            "location": 147,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilteredDoc.get_label": {
            "name": "get_label",
            "location": 153,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilteredDoc.get_path": {
            "name": "get_path",
            "location": 157,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilteredDoc.get_id": {
            "name": "get_id",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilteredDoc.folderish": {
            "name": "folderish",
            "location": 165,
            "return": [
                "str",
                "Optional[str]",
                "float",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilteredDoc.is_dirty": {
            "name": "is_dirty",
            "location": 169,
            "return": [
                "bool",
                "T",
                "int",
                "Dict[str,Set[str]]",
                "str",
                "Union[str,int]",
                "Dict[str,Any]",
                "Set"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilteredDocuments.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FilteredDocuments.get_item_state": {
            "name": "get_item_state",
            "location": 182,
            "return": [
                "Dict[str, Any]",
                "bool",
                "dict"
            ],
            "arguments": {}
        },
        "FilteredDocuments.get_top_documents": {
            "name": "get_top_documents",
            "location": 197,
            "return": [
                "Iterator[Documents]",
                "Generator[FilteredDoc]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilteredDocuments.get_children": {
            "name": "get_children",
            "location": 205,
            "return": [
                "Iterator[Documents]",
                "Generator[FilteredDoc]"
            ],
            "arguments": {}
        },
        "FoldersOnly.__init__": {
            "name": "__init__",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FoldersOnly.get_personal_space": {
            "name": "get_personal_space",
            "location": 217,
            "return": [
                "Doc",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoldersOnly._get_personal_space": {
            "name": "_get_personal_space",
            "location": 233,
            "return": [
                "Doc",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoldersOnly._get_root_folders": {
            "name": "_get_root_folders",
            "location": 250,
            "return": [
                "List[Doc]",
                "List[int]",
                "Optional[StateIncarcerationPeriod]",
                "List[str]",
                "List",
                "Tuple[int]",
                "List[zerver.models.Message]",
                "Optional[StateSupervisionPeriod]",
                "Optional[StateSentenceGroup]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoldersOnly.get_top_documents": {
            "name": "get_top_documents",
            "location": 263,
            "return": [
                "Iterator[Documents]",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoldersOnly.get_children": {
            "name": "get_children",
            "location": 269,
            "return": [
                "Iterator[Documents]",
                "Generator[Doc]"
            ],
            "arguments": {}
        },
        "FoldersOnly._get_children": {
            "name": "_get_children",
            "location": 274,
            "return": [
                "List",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "parent_uid": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        }
    },
    "nuxeo-drive-master/nxdrive/gui/folders_treeview.py": {
        "TreeViewMixin.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TreeViewMixin.expand_item": {
            "name": "expand_item",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TreeViewMixin.load_children": {
            "name": "load_children",
            "location": 52,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeViewMixin.set_loading_cursor": {
            "name": "set_loading_cursor",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DocumentTreeView.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DocumentTreeView.update_item_changed": {
            "name": "update_item_changed",
            "location": 99,
            "return": [
                "None",
                "OrderedDict",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "DocumentTreeView.item_check_parent": {
            "name": "item_check_parent",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DocumentTreeView.resolve_item_down_changed": {
            "name": "resolve_item_down_changed",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DocumentTreeView.resolve_item_up_changed": {
            "name": "resolve_item_up_changed",
            "location": 138,
            "return": [
                "None",
                "Union[tuple,list]",
                "int"
            ],
            "arguments": {}
        },
        "DocumentTreeView.resolve_item": {
            "name": "resolve_item",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FolderTreeView.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FolderTreeView.on_selection_changed": {
            "name": "on_selection_changed",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FolderTreeView.refresh_selected": {
            "name": "refresh_selected",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FolderTreeView._find_current_and_select_it": {
            "name": "_find_current_and_select_it",
            "location": 199,
            "return": [
                "None",
                "int",
                "Union[tuple,list]",
                "Set[str]",
                "Set[VT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FolderTreeView.expand_current_selected": {
            "name": "expand_current_selected",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FolderTreeView.select_item_from_path": {
            "name": "select_item_from_path",
            "location": 233,
            "return": [
                "None",
                "Dict[str,Any]",
                "List[Dict[str,str]]",
                "List[str]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "new_remote_path": [
                    "str"
                ]
            }
        },
        "FolderTreeView.get_item_from_position": {
            "name": "get_item_from_position",
            "location": 243,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "dict"
                ]
            }
        },
        "FolderTreeView.is_item_enabled": {
            "name": "is_item_enabled",
            "location": 248,
            "return": [
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Type",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "nuxeo-drive-master/nxdrive/gui/systray.py": {
        "DriveSystrayIcon.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DriveSystrayIcon.handle_mouse_click": {
            "name": "handle_mouse_click",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DriveSystrayIcon._open_settings": {
            "name": "_open_settings",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DriveSystrayIcon.get_context_menu": {
            "name": "get_context_menu",
            "location": 57,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SystrayWindow.event": {
            "name": "event",
            "location": 90,
            "return": [
                "Mapping[str, Any]",
                "str"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/gui/view.py": {
        "EngineModel.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineModel.roleNames": {
            "name": "roleNames",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EngineModel.nameRoles": {
            "name": "nameRoles",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EngineModel.addEngine": {
            "name": "addEngine",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineModel.removeEngine": {
            "name": "removeEngine",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EngineModel.data": {
            "name": "data",
            "location": 79,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "EngineModel.get": {
            "name": "get",
            "location": 92,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "EngineModel.removeRows": {
            "name": "removeRows",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "EngineModel.empty": {
            "name": "empty",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineModel.rowCount": {
            "name": "rowCount",
            "location": 119,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "EngineModel.count": {
            "name": "count",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EngineModel._connect_engine": {
            "name": "_connect_engine",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine": []
            }
        },
        "EngineModel._relay_engine_events": {
            "name": "_relay_engine_events",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransferModel.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TransferModel.rowCount": {
            "name": "rowCount",
            "location": 173,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "TransferModel.roleNames": {
            "name": "roleNames",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransferModel.count": {
            "name": "count",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransferModel.set_transfers": {
            "name": "set_transfers",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TransferModel.get_progress": {
            "name": "get_progress",
            "location": 196,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "TransferModel.data": {
            "name": "data",
            "location": 221,
            "return": [],
            "arguments": {}
        },
        "TransferModel.setData": {
            "name": "setData",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TransferModel.set_progress": {
            "name": "set_progress",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TransferModel.flags": {
            "name": "flags",
            "location": 256,
            "return": [],
            "arguments": {}
        },
        "DirectTransferModel.__init__": {
            "name": "__init__",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectTransferModel.rowCount": {
            "name": "rowCount",
            "location": 298,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "DirectTransferModel.roleNames": {
            "name": "roleNames",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DirectTransferModel.set_items": {
            "name": "set_items",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectTransferModel.update_items": {
            "name": "update_items",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectTransferModel.data": {
            "name": "data",
            "location": 341,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "DirectTransferModel.setData": {
            "name": "setData",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectTransferModel.set_progress": {
            "name": "set_progress",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectTransferModel.add_item": {
            "name": "add_item",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectTransferModel.edit_item": {
            "name": "edit_item",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ActiveSessionModel.__init__": {
            "name": "__init__",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ActiveSessionModel.roleNames": {
            "name": "roleNames",
            "location": 430,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActiveSessionModel.rowCount": {
            "name": "rowCount",
            "location": 433,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "ActiveSessionModel.row_count_no_shadow": {
            "name": "row_count_no_shadow",
            "location": 436,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActiveSessionModel.set_sessions": {
            "name": "set_sessions",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ActiveSessionModel.update_sessions": {
            "name": "update_sessions",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ActiveSessionModel.data": {
            "name": "data",
            "location": 475,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {}
        },
        "ActiveSessionModel.setData": {
            "name": "setData",
            "location": 518,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ActiveSessionModel.add_session": {
            "name": "add_session",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ActiveSessionModel.edit_session": {
            "name": "edit_session",
            "location": 531,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ActiveSessionModel.count": {
            "name": "count",
            "location": 538,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActiveSessionModel.count_no_shadow": {
            "name": "count_no_shadow",
            "location": 542,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActiveSessionModel.is_full": {
            "name": "is_full",
            "location": 546,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompletedSessionModel.__init__": {
            "name": "__init__",
            "location": 567,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CompletedSessionModel.roleNames": {
            "name": "roleNames",
            "location": 587,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CompletedSessionModel.rowCount": {
            "name": "rowCount",
            "location": 590,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "CompletedSessionModel.set_sessions": {
            "name": "set_sessions",
            "location": 593,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CompletedSessionModel.data": {
            "name": "data",
            "location": 605,
            "return": [
                "str",
                "typing.Text",
                "bool"
            ],
            "arguments": {}
        },
        "CompletedSessionModel.setData": {
            "name": "setData",
            "location": 648,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CompletedSessionModel.count": {
            "name": "count",
            "location": 656,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileModel.__init__": {
            "name": "__init__",
            "location": 679,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FileModel.roleNames": {
            "name": "roleNames",
            "location": 701,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileModel.rowCount": {
            "name": "rowCount",
            "location": 704,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "FileModel.add_files": {
            "name": "add_files",
            "location": 707,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FileModel.data": {
            "name": "data",
            "location": 719,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {}
        },
        "FileModel.setData": {
            "name": "setData",
            "location": 730,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FileModel.count": {
            "name": "count",
            "location": 738,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileModel.flags": {
            "name": "flags",
            "location": 741,
            "return": [],
            "arguments": {}
        },
        "LanguageModel.__init__": {
            "name": "__init__",
            "location": 749,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageModel.roleNames": {
            "name": "roleNames",
            "location": 753,
            "return": [
                "dict[, bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageModel.addLanguages": {
            "name": "addLanguages",
            "location": 756,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LanguageModel.data": {
            "name": "data",
            "location": 768,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "LanguageModel.getTag": {
            "name": "getTag",
            "location": 777,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "LanguageModel.getName": {
            "name": "getName",
            "location": 781,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "LanguageModel.removeRows": {
            "name": "removeRows",
            "location": 784,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "LanguageModel.rowCount": {
            "name": "rowCount",
            "location": 796,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "FeatureModel.__init__": {
            "name": "__init__",
            "location": 804,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FeatureModel.enabled": {
            "name": "enabled",
            "location": 815,
            "return": [],
            "arguments": {
                "self": [],
                "enabled": []
            }
        },
        "FeatureModel.restart_needed": {
            "name": "restart_needed",
            "location": 820,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/nxdrive/gui/__init__.py": {},
    "nuxeo-drive-master/nxdrive/metrics/constants.py": {},
    "nuxeo-drive-master/nxdrive/metrics/poll_metrics.py": {
        "CustomPollMetrics.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "remote": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "CustomPollMetrics.enable": {
            "name": "enable",
            "location": 31,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomPollMetrics._poll": {
            "name": "_poll",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomPollMetrics.force_poll": {
            "name": "force_poll",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomPollMetrics.send": {
            "name": "send",
            "location": 61,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "metrics": [
                    "dict",
                    "IO",
                    "int",
                    "Optional[Mapping[str, Any]]",
                    "BinaryIO",
                    "str"
                ]
            }
        },
        "CustomPollMetrics.push_sync_event": {
            "name": "push_sync_event",
            "location": 68,
            "return": [
                "None",
                "Iterable[Mapping[str,Any]]",
                "Optional[bool]",
                "bytes"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/metrics/utils.py": {
        "_get_current_os_details": {
            "name": "_get_current_os_details",
            "location": 10,
            "return": [
                "Tuple[Text]",
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "current_os": {
            "name": "current_os",
            "location": 35,
            "return": [
                "Text",
                "str",
                "Optional[constants.AgeClass]"
            ],
            "arguments": {}
        },
        "user_agent": {
            "name": "user_agent",
            "location": 46,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/metrics/__init__.py": {},
    "nuxeo-drive-master/nxdrive/osi/extension.py": {
        "get_formatted_status": {
            "name": "get_formatted_status",
            "location": 170,
            "return": [
                "None",
                "str",
                "Dict[Text,str]",
                "Optional[str]",
                "int",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "ExtensionListener.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ExtensionListener.host_to_addr": {
            "name": "host_to_addr",
            "location": 73,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "cmk.utils.type_defs.HostAddress",
                "str"
            ],
            "arguments": {}
        },
        "ExtensionListener.address": {
            "name": "address",
            "location": 94,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionListener.start_listening": {
            "name": "start_listening",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionListener._handle_connection": {
            "name": "_handle_connection",
            "location": 109,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionListener._parse_payload": {
            "name": "_parse_payload",
            "location": 136,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ExtensionListener._format_response": {
            "name": "_format_response",
            "location": 140,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "bytes",
                "pathlib.Path",
                "dict"
            ],
            "arguments": {}
        },
        "ExtensionListener._handle_content": {
            "name": "_handle_content",
            "location": 144,
            "return": [
                "None",
                "bool",
                "str",
                "Optional[bool]",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "ExtensionListener.get_engine": {
            "name": "get_engine",
            "location": 163,
            "return": [
                "None",
                "Optional[int]",
                "bool",
                "str",
                "Optional[Literal[only_clustered,include_clustered]]",
                "Dict",
                "Optional[List[Any]]"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/osi/__init__.py": {
        "AbstractOSIntegration.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AbstractOSIntegration.open_local_file": {
            "name": "open_local_file",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AbstractOSIntegration.startup_enabled": {
            "name": "startup_enabled",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractOSIntegration.register_startup": {
            "name": "register_startup",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractOSIntegration.unregister_startup": {
            "name": "unregister_startup",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractOSIntegration.addons_installed": {
            "name": "addons_installed",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractOSIntegration.install_addons": {
            "name": "install_addons",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractOSIntegration.uninstall": {
            "name": "uninstall",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractOSIntegration.register_protocol_handlers": {
            "name": "register_protocol_handlers",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractOSIntegration.watch_folder": {
            "name": "watch_folder",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AbstractOSIntegration.unwatch_folder": {
            "name": "unwatch_folder",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AbstractOSIntegration.send_sync_status": {
            "name": "send_sync_status",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AbstractOSIntegration.send_content_sync_status": {
            "name": "send_content_sync_status",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AbstractOSIntegration.get_extension_listener": {
            "name": "get_extension_listener",
            "location": 79,
            "return": [
                "None",
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractOSIntegration.register_contextual_menu": {
            "name": "register_contextual_menu",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractOSIntegration.unregister_contextual_menu": {
            "name": "unregister_contextual_menu",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractOSIntegration.register_folder_link": {
            "name": "register_folder_link",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AbstractOSIntegration.unregister_folder_link": {
            "name": "unregister_folder_link",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AbstractOSIntegration.get_system_configuration": {
            "name": "get_system_configuration",
            "location": 94,
            "return": [
                "Dict",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractOSIntegration.cb_get": {
            "name": "cb_get",
            "location": 98,
            "return": [
                "Text",
                "Callable",
                "str",
                "List[str]",
                "List"
            ],
            "arguments": {}
        },
        "AbstractOSIntegration.cb_set": {
            "name": "cb_set",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AbstractOSIntegration.init": {
            "name": "init",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractOSIntegration.cleanup": {
            "name": "cleanup",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractOSIntegration.get": {
            "name": "get",
            "location": 114,
            "return": [
                "LinuxIntegration",
                "DarwinIntegration",
                "WindowsIntegration"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/osi/darwin/darwin.py": {
        "_get_app": {
            "name": "_get_app",
            "location": 40,
            "return": [
                "str",
                "pathlib.Path",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "DarwinIntegration.init": {
            "name": "init",
            "location": 75,
            "return": [
                "None",
                "Dict[str,Dict[str,int]]",
                "str",
                "Dict[str,Any]",
                "Union[tuple,list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DarwinIntegration.cleanup": {
            "name": "cleanup",
            "location": 90,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DarwinIntegration._get_agent_file": {
            "name": "_get_agent_file",
            "location": 102,
            "return": [
                "pathlib.Path",
                "str",
                "paradigm.catalog.Path",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DarwinIntegration.cb_get": {
            "name": "cb_get",
            "location": 106,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "Callable",
                "Callable[[str], T]",
                "str"
            ],
            "arguments": {}
        },
        "DarwinIntegration.cb_set": {
            "name": "cb_set",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DarwinIntegration.current_them": {
            "name": "current_them",
            "location": 127,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "DarwinIntegration.dark_mode_in_use": {
            "name": "dark_mode_in_use",
            "location": 137,
            "return": [
                "bool",
                "int",
                "str",
                "List[int]",
                "Optional[bytearray]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DarwinIntegration.open_local_file": {
            "name": "open_local_file",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ],
                "select": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "DarwinIntegration.startup_enabled": {
            "name": "startup_enabled",
            "location": 150,
            "return": [
                "bool",
                "bytes",
                "Optional[int]",
                "List[str]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DarwinIntegration.register_startup": {
            "name": "register_startup",
            "location": 155,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DarwinIntegration.unregister_startup": {
            "name": "unregister_startup",
            "location": 174,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DarwinIntegration.register_protocol_handlers": {
            "name": "register_protocol_handlers",
            "location": 183,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DarwinIntegration._send_notification": {
            "name": "_send_notification",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DarwinIntegration._set_monitoring": {
            "name": "_set_monitoring",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DarwinIntegration.watch_folder": {
            "name": "watch_folder",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DarwinIntegration.unwatch_folder": {
            "name": "unwatch_folder",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DarwinIntegration.send_sync_status": {
            "name": "send_sync_status",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DarwinIntegration.send_content_sync_status": {
            "name": "send_content_sync_status",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DarwinIntegration.register_contextual_menu": {
            "name": "register_contextual_menu",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DarwinIntegration.register_folder_link": {
            "name": "register_folder_link",
            "location": 286,
            "return": [
                "int",
                "None"
            ],
            "arguments": {}
        },
        "DarwinIntegration.unregister_folder_link": {
            "name": "unregister_folder_link",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DarwinIntegration._get_favorite_list": {
            "name": "_get_favorite_list",
            "location": 327,
            "return": [
                "LSSharedFileListCreate",
                "str",
                "Callable",
                "List[str]",
                "List"
            ],
            "arguments": {}
        },
        "DarwinIntegration._find_item_in_list": {
            "name": "_find_item_in_list",
            "location": 334,
            "return": [
                "None",
                "int",
                "Optional[float]",
                "Optional[bool]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "DarwinIntegration.get_extension_listener": {
            "name": "get_extension_listener",
            "location": 343,
            "return": [
                "DarwinExtensionListener",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/nxdrive/osi/darwin/extension.py": {
        "DarwinExtensionListener.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "DarwinExtensionListener.handle_status": {
            "name": "handle_status",
            "location": 28,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "DarwinExtensionListener.handle_trigger_watch": {
            "name": "handle_trigger_watch",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/nxdrive/osi/darwin/files.py": {
        "_is_running": {
            "name": "_is_running",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "_get_opened_files_adobe_cc": {
            "name": "_get_opened_files_adobe_cc",
            "location": 29,
            "return": [
                "None",
                "Generator[tuple[Path]]",
                "str",
                "List[type]",
                "pathlib.Path",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {}
        },
        "get_other_opened_files": {
            "name": "get_other_opened_files",
            "location": 67,
            "return": [
                "Iterator[objects.Item]",
                "Generator"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/osi/darwin/pyNotificationCenter.py": {
        "setup_delegator": {
            "name": "setup_delegator",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "notify": {
            "name": "notify",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "NotificationDelegator.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotificationDelegator.userNotificationCenter_didActivateNotification_": {
            "name": "userNotificationCenter_didActivateNotification_",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "NotificationDelegator.userNotificationCenter_shouldPresentNotification_": {
            "name": "userNotificationCenter_shouldPresentNotification_",
            "location": 43,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/osi/darwin/__init__.py": {},
    "nuxeo-drive-master/nxdrive/osi/linux/files.py": {
        "get_other_opened_files": {
            "name": "get_other_opened_files",
            "location": 8,
            "return": [
                "Iterator[objects.Item]",
                "Generator[list]"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/osi/linux/linux.py": {
        "LinuxIntegration.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LinuxIntegration.cb_get": {
            "name": "cb_get",
            "location": 32,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "Callable",
                "Callable[[str], T]",
                "str"
            ],
            "arguments": {}
        },
        "LinuxIntegration.cb_set": {
            "name": "cb_set",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LinuxIntegration.open_local_file": {
            "name": "open_local_file",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LinuxIntegration.register_protocol_handlers": {
            "name": "register_protocol_handlers",
            "location": 64,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinuxIntegration.send_sync_status": {
            "name": "send_sync_status",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LinuxIntegration._set_icon": {
            "name": "_set_icon",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LinuxIntegration._icons_to_emblems": {
            "name": "_icons_to_emblems",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/nxdrive/osi/linux/__init__.py": {},
    "nuxeo-drive-master/nxdrive/osi/windows/extension.py": {
        "enable_overlay": {
            "name": "enable_overlay",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "disable_overlay": {
            "name": "disable_overlay",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "set_filter_folders": {
            "name": "set_filter_folders",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "refresh_files": {
            "name": "refresh_files",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "update_explorer": {
            "name": "update_explorer",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "WindowsExtensionListener.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "WindowsExtensionListener._parse_payload": {
            "name": "_parse_payload",
            "location": 66,
            "return": [
                "str",
                "Union[bytes, bytearray]",
                "bytes"
            ],
            "arguments": {}
        },
        "WindowsExtensionListener._format_response": {
            "name": "_format_response",
            "location": 69,
            "return": [
                "Callable",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "WindowsExtensionListener.handle_status": {
            "name": "handle_status",
            "location": 72,
            "return": [
                "None",
                "Optional[bool]",
                "Optional[int]",
                "str",
                "Optional[float]",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/osi/windows/files.py": {
        "_get_opened_files_adobe_cc": {
            "name": "_get_opened_files_adobe_cc",
            "location": 13,
            "return": [
                "Iterator[objects.Item]",
                "Generator[tuple[Path]]"
            ],
            "arguments": {}
        },
        "get_other_opened_files": {
            "name": "get_other_opened_files",
            "location": 33,
            "return": [
                "Iterator[objects.Item]",
                "Generator"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/osi/windows/registry.py": {
        "create": {
            "name": "create",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "delete": {
            "name": "delete",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "delete_value": {
            "name": "delete_value",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "exists": {
            "name": "exists",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "read": {
            "name": "read",
            "location": 83,
            "return": [
                "None",
                "Optional[str]",
                "Dict",
                "bool",
                "Optional[float]",
                "str"
            ],
            "arguments": {}
        },
        "write": {
            "name": "write",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/osi/windows/windows.py": {
        "WindowsIntegration.init": {
            "name": "init",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowsIntegration.cleanup": {
            "name": "cleanup",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowsIntegration.addons_installed": {
            "name": "addons_installed",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowsIntegration.cb_get": {
            "name": "cb_get",
            "location": 61,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {}
        },
        "WindowsIntegration.cb_set": {
            "name": "cb_set",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "WindowsIntegration.install_addons": {
            "name": "install_addons",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowsIntegration.get_system_configuration": {
            "name": "get_system_configuration",
            "location": 101,
            "return": [
                "Dict",
                "Mapping[str,Any]",
                "Mapping[int,str]",
                "raiden.utils.Dict[str,raiden.utils.Any]",
                "List",
                "Dict[str,bool]",
                "Dict[int,str]",
                "Dict[str,str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowsIntegration.open_local_file": {
            "name": "open_local_file",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "WindowsIntegration.register_contextual_menu": {
            "name": "register_contextual_menu",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowsIntegration.register_contextual_menu_entry": {
            "name": "register_contextual_menu_entry",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "WindowsIntegration.unregister_contextual_menu": {
            "name": "unregister_contextual_menu",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowsIntegration.register_folder_link": {
            "name": "register_folder_link",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "WindowsIntegration.unregister_folder_link": {
            "name": "unregister_folder_link",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "WindowsIntegration.startup_enabled": {
            "name": "startup_enabled",
            "location": 185,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowsIntegration.register_startup": {
            "name": "register_startup",
            "location": 190,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowsIntegration.unregister_startup": {
            "name": "unregister_startup",
            "location": 199,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowsIntegration._create_shortcut": {
            "name": "_create_shortcut",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "WindowsIntegration._get_folder_link": {
            "name": "_get_folder_link",
            "location": 219,
            "return": [
                "pathlib.Path",
                "str",
                "cmk.utils.type_defs.HostName",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "None",
                    "str",
                    "Set[str]",
                    "Callable[...,T]"
                ]
            }
        },
        "WindowsIntegration.send_sync_status": {
            "name": "send_sync_status",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "WindowsIntegration._watch_or_ignore": {
            "name": "_watch_or_ignore",
            "location": 231,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        },
        "WindowsIntegration.watch_folder": {
            "name": "watch_folder",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "WindowsIntegration.unwatch_folder": {
            "name": "unwatch_folder",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "WindowsIntegration.get_extension_listener": {
            "name": "get_extension_listener",
            "location": 255,
            "return": [
                "WindowsExtensionListener",
                "List[int]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/nxdrive/osi/windows/__init__.py": {},
    "nuxeo-drive-master/nxdrive/qt/constants.py": {},
    "nuxeo-drive-master/nxdrive/qt/imports.py": {},
    "nuxeo-drive-master/nxdrive/qt/__init__.py": {},
    "nuxeo-drive-master/nxdrive/updater/base.py": {
        "BaseUpdater.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BaseUpdater.enable": {
            "name": "enable",
            "location": 77,
            "return": [
                "bool",
                "str",
                "Optional[int]",
                "raiden.utils.TokenAmount",
                "raiden.utils.BlockNumber"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUpdater.can_update": {
            "name": "can_update",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUpdater.server_ver": {
            "name": "server_ver",
            "location": 119,
            "return": [
                "None",
                "int",
                "str",
                "List[Tuple[str,int]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUpdater.install": {
            "name": "install",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BaseUpdater.refresh_status": {
            "name": "refresh_status",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUpdater.update": {
            "name": "update",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BaseUpdater._download": {
            "name": "_download",
            "location": 176,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "BaseUpdater._fetch_versions": {
            "name": "_fetch_versions",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUpdater._get_update_status": {
            "name": "_get_update_status",
            "location": 233,
            "return": [
                "None",
                "Callable",
                "Iterator[Dict[str,str]]",
                "Iterable[Mapping[str,Any]]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUpdater.force_downgrade": {
            "name": "force_downgrade",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUpdater._handle_status": {
            "name": "_handle_status",
            "location": 313,
            "return": [
                "Dict[str,Any]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUpdater._set_progress": {
            "name": "_set_progress",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BaseUpdater._set_status": {
            "name": "_set_status",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BaseUpdater.get_version_channel": {
            "name": "get_version_channel",
            "location": 364,
            "return": [
                "Text",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {}
        },
        "BaseUpdater._install": {
            "name": "_install",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BaseUpdater._check_validity": {
            "name": "_check_validity",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BaseUpdater._poll": {
            "name": "_poll",
            "location": 398,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/nxdrive/updater/constants.py": {},
    "nuxeo-drive-master/nxdrive/updater/darwin.py": {
        "Updater.install": {
            "name": "install",
            "location": 30,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {}
        },
        "Updater._relocate_in_home": {
            "name": "_relocate_in_home",
            "location": 73,
            "return": [
                "None",
                "DefaultDict",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Updater._mount": {
            "name": "_mount",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "Updater._unmount": {
            "name": "_unmount",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Updater._backup": {
            "name": "_backup",
            "location": 116,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Updater._cleanup": {
            "name": "_cleanup",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Updater._copy": {
            "name": "_copy",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Updater._fix_notarization": {
            "name": "_fix_notarization",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Updater._restart": {
            "name": "_restart",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/nxdrive/updater/linux.py": {
        "Updater.install": {
            "name": "install",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Updater._restart": {
            "name": "_restart",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/updater/utils.py": {
        "auto_updates_state": {
            "name": "auto_updates_state",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "is_version_compatible": {
            "name": "is_version_compatible",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "get_compatible_versions": {
            "name": "get_compatible_versions",
            "location": 78,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "get_latest_version": {
            "name": "get_latest_version",
            "location": 106,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {}
        },
        "get_update_status": {
            "name": "get_update_status",
            "location": 123,
            "return": [
                "tuple[typing.Text]",
                "tuple"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/updater/windows.py": {
        "Updater.install": {
            "name": "install",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/nxdrive/updater/__init__.py": {
        "updater": {
            "name": "updater",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "UpdateIntegrityError.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "algo": [
                    "bool",
                    "Optional[str]",
                    "Sequence",
                    "Optional[int]"
                ],
                "remote_checksum": [
                    "int",
                    "Optional[str]",
                    "List[int]",
                    "str",
                    "Union[str, int]"
                ],
                "local_checksum": [
                    "int",
                    "Optional[str]",
                    "List[int]",
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "UpdateIntegrityError.__str__": {
            "name": "__str__",
            "location": 30,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/cleanup.py": {
        "remove_old_ws": {
            "name": "remove_old_ws",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "str",
                    "bool"
                ]
            }
        },
        "remove_old_users": {
            "name": "remove_old_users",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "bool"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/conftest.py": {
        "pytest_runtest_makereport": {
            "name": "pytest_runtest_makereport",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "tmp": {
            "name": "tmp",
            "location": 39,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Union[slice, List[slice], List[int]]"
                ]
            }
        },
        "no_warnings": {
            "name": "no_warnings",
            "location": 58,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "recwarn": [
                    "Awaitable[Any]",
                    "List[str]",
                    "List[Tuple[str, ...]]",
                    "list",
                    "str",
                    "bool"
                ]
            }
        },
        "cleanup_attrs": {
            "name": "cleanup_attrs",
            "location": 96,
            "return": [
                "Generator",
                "Union[tuple,list]",
                "None",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "request": []
            }
        },
        "version": {
            "name": "version",
            "location": 124,
            "return": [
                "Callable[[T], bool]",
                "List[Union[int, Any]]",
                "List[Union[int, str]]",
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "nuxeo_url": {
            "name": "nuxeo_url",
            "location": 131,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {}
        },
        "server": {
            "name": "server",
            "location": 137,
            "return": [
                "Nuxeo",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "nuxeo_url": [
                    "str"
                ]
            }
        },
        "app": {
            "name": "app",
            "location": 162,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        },
        "tmp._make_folder": {
            "name": "_make_folder",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/tests/env.py": {},
    "nuxeo-drive-master/tests/markers.py": {},
    "nuxeo-drive-master/tests/pytest_random.py": {
        "get_random": {
            "name": "get_random",
            "location": 12,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "item": [
                    "dict",
                    "Iterator[T]",
                    "callable"
                ]
            }
        },
        "get_repeat": {
            "name": "get_repeat",
            "location": 19,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "item": [
                    "int",
                    "str",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "get_mode": {
            "name": "get_mode",
            "location": 24,
            "return": [
                "str",
                "int",
                "List[int]"
            ],
            "arguments": {
                "item": [
                    "str",
                    "Exception",
                    "type",
                    "Sequence[type]",
                    "Union[Dict, List, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_condition": {
            "name": "get_condition",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "item": [
                    "int",
                    "str",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "pytest_collection_modifyitems": {
            "name": "pytest_collection_modifyitems",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "items": [
                    "int",
                    "T",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "pytest_runtest_protocol": {
            "name": "pytest_runtest_protocol",
            "location": 70,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "item": [
                    "List[dict]",
                    "T"
                ],
                "nextitem": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "pytest_report_teststatus": {
            "name": "pytest_report_teststatus",
            "location": 117,
            "return": [
                "Optional[Tuple[(str, str, Tuple[(str, Dict[(str, bool)])])]]"
            ],
            "arguments": {
                "report": [
                    "str",
                    "bytearray",
                    "bool",
                    "float",
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/utils.py": {
        "clean_dir": {
            "name": "clean_dir",
            "location": 13,
            "return": [
                "None",
                "Set",
                "Set[cmk.utils.type_defs.HostName]"
            ],
            "arguments": {
                "_dir": [
                    "str",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]"
                ],
                "retry": [
                    "int",
                    "str"
                ],
                "max_retries": [
                    "int",
                    "str",
                    "float",
                    "Callable[...,None]"
                ]
            }
        },
        "random_png": {
            "name": "random_png",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "filename": [
                    "None",
                    "pathlib.Path",
                    "bytes",
                    "str",
                    "List[bool]",
                    "int",
                    "List[str]"
                ],
                "size": [
                    "int",
                    "float",
                    "Sequence"
                ]
            }
        },
        "salt": {
            "name": "salt",
            "location": 78,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ],
                "prefix": [
                    "Text",
                    "str",
                    "bool"
                ],
                "with_suffix": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "random_png.chunk": {
            "name": "chunk",
            "location": 53,
            "return": [
                "List[str]",
                "str",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "cmk.utils.type_defs.EventRule"
            ],
            "arguments": {
                "header": [
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "OrderedDict",
                    "raiden.utils.ABI"
                ],
                "data": [
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "OrderedDict",
                    "raiden.utils.ABI"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/__init__.py": {
        "configure_logs": {
            "name": "configure_logs",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "before_send": {
            "name": "before_send",
            "location": 35,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "hint": [
                    "str"
                ]
            }
        },
        "setup_sentry": {
            "name": "setup_sentry",
            "location": 56,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        },
        "ensure_no_exception": {
            "name": "ensure_no_exception",
            "location": 95,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        },
        "ensure_no_exception.error": {
            "name": "error",
            "location": 103,
            "return": [
                "None",
                "int",
                "Union[tuple,list]",
                "Optional[bool]"
            ],
            "arguments": {
                "type_": [
                    "str",
                    "List[int]"
                ],
                "value": [
                    "str",
                    "Type",
                    "int"
                ],
                "traceback": [
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/benchmarks/test_safe_filename.py": {
        "test_re_sub": {
            "name": "test_re_sub",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "fname": [],
                "fname_expected": [],
                "benchmark": []
            }
        },
        "test_str_translate": {
            "name": "test_str_translate",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "fname": [],
                "fname_expected": [],
                "benchmark": []
            }
        },
        "test_str_replace": {
            "name": "test_str_replace",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "fname": [],
                "fname_expected": [],
                "benchmark": []
            }
        }
    },
    "nuxeo-drive-master/tests/benchmarks/__init__.py": {},
    "nuxeo-drive-master/tests/functional/conftest.py": {
        "faker": {
            "name": "faker",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "manager_factory": {
            "name": "manager_factory",
            "location": 35,
            "return": [
                "Callable[,nxdrive.manager.Manager]",
                "Generator"
            ],
            "arguments": {
                "request": [
                    "bytes",
                    "bool",
                    "int",
                    "str"
                ],
                "tmp": [
                    "bytes",
                    "bool",
                    "int",
                    "str"
                ],
                "nuxeo_url": [
                    "bytes",
                    "bool",
                    "int",
                    "str"
                ],
                "user_factory": [
                    "bytes",
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "user_factory": {
            "name": "user_factory",
            "location": 79,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "request": [
                    "int"
                ],
                "server": [
                    "int"
                ],
                "faker": [
                    "int"
                ]
            }
        },
        "obj_factory": {
            "name": "obj_factory",
            "location": 110,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "request": [
                    "str",
                    "int",
                    "list"
                ],
                "server": [
                    "str",
                    "int",
                    "list"
                ],
                "tmp_path": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "attach_blob": {
            "name": "attach_blob",
            "location": 152,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "nuxeo": [
                    "bool",
                    "Type['GenericList']",
                    "Type['Declared']",
                    "pathlib.Path"
                ],
                "doc": [
                    "Iterable[pathlib.Path]",
                    "TextIO",
                    "IO"
                ],
                "file": [
                    "Optional[str]",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "faker._faker": {
            "name": "_faker",
            "location": 28,
            "return": [
                "Faker",
                "str",
                "int"
            ],
            "arguments": {
                "l10n": [
                    "Text",
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "manager_factory._make_manager": {
            "name": "_make_manager",
            "location": 38,
            "return": [
                "Tuple[Optional[Manager]]",
                "int",
                "Manager",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "home": [
                    "Text",
                    "str",
                    "bool",
                    "int"
                ],
                "with_engine": [
                    "bool",
                    "app.db_models.user.User",
                    "str",
                    "int"
                ],
                "local_folder": [
                    "bool",
                    "None"
                ],
                "user": [
                    "None",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "user_factory._make_user": {
            "name": "_make_user",
            "location": 88,
            "return": [
                "lms.lmsdb.models.User",
                "lms.lmsdb.models.Solution",
                "discord.User",
                "zam_repondeur.models.Lecture",
                "asgard.backends.users.UsersBackend",
                "asgard.models.user.User"
            ],
            "arguments": {
                "username": [
                    "str",
                    "Text"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "obj_factory._make": {
            "name": "_make",
            "location": 113,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "title": [
                    "Text",
                    "str",
                    "Set[str]",
                    "Dict",
                    "Optional[str]"
                ],
                "nature": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "Dict",
                    "bytes"
                ],
                "parent": [
                    "str",
                    "Optional[str]",
                    "Dict[str, object]"
                ],
                "enable_sync": [
                    "bool",
                    "str",
                    "int",
                    "List[medtagger.database.models.LabelElement]"
                ],
                "user": [
                    "Text",
                    "str",
                    "List[str]",
                    "Dict[str,list]",
                    "pathlib.Path"
                ],
                "content": [
                    "bytes",
                    "pathlib.Path",
                    "str",
                    "random.Random",
                    "Union[models.address.ZipCode,str]",
                    "List[List[Any]]",
                    "Sequence[Sequence[Any]]"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/functional/test_behavior.py": {
        "test_crash_no_engine_database": {
            "name": "test_crash_no_engine_database",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": []
            }
        },
        "test_crash_engine_no_local_folder": {
            "name": "test_crash_engine_no_local_folder",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": [],
                "sync_enabled": [
                    "str"
                ]
            }
        },
        "test_manager_engine_removal": {
            "name": "test_manager_engine_removal",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": [
                    "str",
                    "float"
                ]
            }
        },
        "test_manager_account_addition_same_folder_used": {
            "name": "test_manager_account_addition_same_folder_used",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": [
                    "str",
                    "bool",
                    "Dict[str, float]",
                    "int"
                ],
                "manager_factory": [
                    "str",
                    "bool",
                    "Dict[str, float]",
                    "int"
                ]
            }
        },
        "test_feature_synchronization": {
            "name": "test_feature_synchronization",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "manager_factory": []
            }
        }
    },
    "nuxeo-drive-master/tests/functional/test_bind_server.py": {
        "test_bind_local_folder_already_used": {
            "name": "test_bind_local_folder_already_used",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": [],
                "tmp": [
                    "bool",
                    "str",
                    "int"
                ],
                "nuxeo_url": [],
                "user_factory": [
                    "int"
                ]
            }
        },
        "test_bind_failure_database_removal": {
            "name": "test_bind_failure_database_removal",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": [],
                "tmp": [],
                "nuxeo_url": [],
                "user_factory": []
            }
        },
        "test_bind_failure_database_removal.bind_failure": {
            "name": "bind_failure",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/functional/test_context_menu.py": {
        "test_ctx_menu_entry_inexistent_file": {
            "name": "test_ctx_menu_entry_inexistent_file",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": [
                    "str"
                ]
            }
        },
        "test_ctx_menu_entries": {
            "name": "test_ctx_menu_entries",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": [
                    "bool",
                    "Iterable[Any]"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/functional/test_db_backup.py": {
        "test_create_backup": {
            "name": "test_create_backup",
            "location": 14,
            "return": [],
            "arguments": {
                "manager_factory": [],
                "tmp": [],
                "nuxeo_url": [],
                "user_factory": [],
                "monkeypatch": [
                    "tuple",
                    "Dict[str, Sequence[Any]]",
                    "bytes"
                ]
            }
        },
        "test_delete_old_backups": {
            "name": "test_delete_old_backups",
            "location": 61,
            "return": [],
            "arguments": {
                "tmp": [
                    "Tuple[int, int]"
                ]
            }
        },
        "test_create_backup.buggy_db": {
            "name": "buggy_db",
            "location": 34,
            "return": [],
            "arguments": {
                "database": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "test_create_backup.restore_db": {
            "name": "restore_db",
            "location": 48,
            "return": [
                "str",
                "int",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/functional/test_direct_edit.py": {
        "direct_edit": {
            "name": "direct_edit",
            "location": 36,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "manager_factory": [
                    "int",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "test_binder": {
            "name": "test_binder",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": [
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_cleanup_no_local_folder": {
            "name": "test_cleanup_no_local_folder",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "direct_edit": [
                    "pathlib.Path"
                ]
            }
        },
        "test_cleanup_file": {
            "name": "test_cleanup_file",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "direct_edit": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_corrupted_download": {
            "name": "test_corrupted_download",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "path.Path",
                    "List[str]",
                    "Dict[str, Sequence[str]]",
                    "pathlib.Path"
                ],
                "manager_factory": [
                    "path.Path",
                    "List[str]",
                    "Dict[str, Sequence[str]]",
                    "pathlib.Path"
                ],
                "tmp_path": [
                    "str",
                    "path.Path",
                    "pathlib.Path"
                ]
            }
        },
        "test_cleanup_bad_folder_name": {
            "name": "test_cleanup_bad_folder_name",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "direct_edit": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_cleanup_orphan_files": {
            "name": "test_cleanup_orphan_files",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": [
                    "pathlib.Path",
                    "Generator"
                ],
                "obj_factory": [
                    "pathlib.Path",
                    "Generator"
                ]
            }
        },
        "test_document_hijacking": {
            "name": "test_document_hijacking",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": [
                    "str",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "obj_factory": [
                    "str",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_document_not_found": {
            "name": "test_document_not_found",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": []
            }
        },
        "test_document_without_assiciated_software": {
            "name": "test_document_without_assiciated_software",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": [
                    "str",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_download_http_error_404": {
            "name": "test_download_http_error_404",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": [
                    "Dict[str, Sequence[str]]"
                ],
                "obj_factory": [
                    "pathlib.Path"
                ]
            }
        },
        "test_get_info_bad_response": {
            "name": "test_get_info_bad_response",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": [
                    "str",
                    "bool"
                ],
                "obj_factory": []
            }
        },
        "test_invalid_credentials": {
            "name": "test_invalid_credentials",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": [
                    "str",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_is_valid_folder_name": {
            "name": "test_is_valid_folder_name",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "direct_edit": [
                    "str"
                ]
            }
        },
        "test_lock_queue_doc_not_found": {
            "name": "test_lock_queue_doc_not_found",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "direct_edit": []
            }
        },
        "test_upload_queue_doc_is_a_folder": {
            "name": "test_upload_queue_doc_is_a_folder",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "direct_edit": [
                    "Dict[str, Any]",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_metrics": {
            "name": "test_metrics",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {
                "direct_edit": [
                    "str"
                ]
            }
        },
        "test_send_lock_status": {
            "name": "test_send_lock_status",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "direct_edit": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_url_resolver": {
            "name": "test_url_resolver",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": [
                    "str",
                    "bool",
                    "Callable",
                    "int"
                ],
                "nuxeo_url": [
                    "str"
                ]
            }
        },
        "MockUrlTestEngine.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "dict",
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "user": [
                    "dict",
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MockUrlTestEngine.get_binder": {
            "name": "get_binder",
            "location": 27,
            "return": [
                "ServerBindingSettings",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_corrupted_download.corrupted_error_signals": {
            "name": "corrupted_error_signals",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str",
                    "list",
                    "int",
                    "Dict[str, Any]",
                    "Pattern[str]"
                ],
                "values": [
                    "str",
                    "list",
                    "int",
                    "Dict[str, Any]",
                    "Pattern[str]"
                ]
            }
        },
        "test_corrupted_download.corrupted_download": {
            "name": "corrupted_download",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_document_not_found.error_signal": {
            "name": "error_signal",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [],
                "values": []
            }
        },
        "test_document_without_assiciated_software.prepare_edit": {
            "name": "prepare_edit",
            "location": 310,
            "return": [
                "Text",
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {}
        },
        "test_document_without_assiciated_software.open_local_file": {
            "name": "open_local_file",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "test_document_without_assiciated_software.error_signal": {
            "name": "error_signal",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [],
                "values": []
            }
        },
        "test_download_http_error_404.error_signal": {
            "name": "error_signal",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [],
                "values": [],
                "details": []
            }
        },
        "test_download_http_error_404.download": {
            "name": "download",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_get_info_bad_response.error_signal": {
            "name": "error_signal",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [],
                "values": []
            }
        },
        "test_get_info_bad_response.fetch": {
            "name": "fetch",
            "location": 381,
            "return": [
                "bytes",
                "str",
                "Union[bytes,bytearray]",
                "int"
            ],
            "arguments": {}
        },
        "test_invalid_credentials.has_invalid_credentials": {
            "name": "has_invalid_credentials",
            "location": 409,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_invalid_credentials.error_signal": {
            "name": "error_signal",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cleanup_orphan_files.get_locked_paths": {
            "name": "get_locked_paths",
            "location": 172,
            "return": [
                "List",
                "str",
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "test_cleanup_orphan_files.extract_edit_info": {
            "name": "extract_edit_info",
            "location": 181,
            "return": [
                "DirectEditDetails"
            ],
            "arguments": {
                "_": []
            }
        },
        "test_document_hijacking.extract_edit_info": {
            "name": "extract_edit_info",
            "location": 250,
            "return": [
                "DirectEditDetails",
                "str",
                "int",
                "raiden.utils.Dict[str,raiden.utils.Any]",
                "float",
                "bool"
            ],
            "arguments": {
                "ref": [
                    "IO[bytes]",
                    "Union[pathlib3x.Path, IO[str]]",
                    "T",
                    "str"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/functional/test_engine.py": {
        "test_conflict_resolver": {
            "name": "test_conflict_resolver",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "tmp": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "caplog": [
                    "py._path.local.LocalPath"
                ]
            }
        },
        "test_delete_doc": {
            "name": "test_delete_doc",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": [
                    "str",
                    "pathlib.Path"
                ],
                "tmp": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_temporary_csv_cleanup": {
            "name": "test_temporary_csv_cleanup",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": [
                    "str"
                ],
                "user_factory": [
                    "str",
                    "int",
                    "datetime.datetime"
                ],
                "nuxeo_url": [
                    "str"
                ]
            }
        },
        "test_token_management": {
            "name": "test_token_management",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": [
                    "bool",
                    "Dict[str, float]",
                    "str",
                    "Iterable[Any]"
                ]
            }
        },
        "test_can_use_trash": {
            "name": "test_can_use_trash",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": [
                    "pathlib.Path",
                    "Tuple[int, int]"
                ]
            }
        },
        "test_conflict_resolver.bad": {
            "name": "bad",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_conflict_resolver.unknown_digest": {
            "name": "unknown_digest",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_conflict_resolver.doc_pair": {
            "name": "doc_pair",
            "location": 26,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "test_delete_doc.doc_pair": {
            "name": "doc_pair",
            "location": 73,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "pathlib.Path"
                ],
                "synced": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ],
                "with_rpaths": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/functional/test_local_client.py": {
        "test_rename_with_different_partitions": {
            "name": "test_rename_with_different_partitions",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/functional/test_manager.py": {
        "test_open_local_file_no_soft": {
            "name": "test_open_local_file_no_soft",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": [],
                "monkeypatch": [
                    "bool"
                ]
            }
        },
        "test_open_local_file_no_soft.startfile": {
            "name": "startfile",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/functional/test_remote_changes.py": {
        "get_changes": {
            "name": "get_changes",
            "location": 9,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "test_changes_without_active_roots": {
            "name": "test_changes_without_active_roots",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "get_changes": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ],
                "manager_factory": [
                    "int",
                    "str"
                ]
            }
        },
        "test_wrong_server_reply": {
            "name": "test_wrong_server_reply",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "bad_data": [
                    "str",
                    "dict",
                    "list",
                    "Optional[List[Dict]]",
                    "List[bytes]"
                ],
                "manager_factory": [
                    "Union[str, Dict[str, Any]]",
                    "int",
                    "Optional[Dict]"
                ]
            }
        },
        "get_changes.inner": {
            "name": "inner",
            "location": 12,
            "return": [
                "bool",
                "Tuple[int]"
            ],
            "arguments": {
                "engine": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "last_root_definitions": [
                    "Text",
                    "Optional[bool]",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "last_event_log_id": [
                    "int",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "test_wrong_server_reply.bad_get_changes": {
            "name": "bad_get_changes",
            "location": 64,
            "return": [
                "bytes",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/tests/functional/test_remote_client.py": {
        "test_personal_space": {
            "name": "test_personal_space",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": [],
                "tmp": [],
                "nuxeo_url": [],
                "user_factory": [],
                "username": []
            }
        },
        "test_exists_in_parent": {
            "name": "test_exists_in_parent",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "manager_factory": []
            }
        },
        "test_custom_metrics_global_headers": {
            "name": "test_custom_metrics_global_headers",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": []
            }
        },
        "test_expand_sync_root_name_levels": {
            "name": "test_expand_sync_root_name_levels",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "option": [],
                "manager_factory": [],
                "obj_factory": []
            }
        },
        "test_expand_sync_root_name_length": {
            "name": "test_expand_sync_root_name_length",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "option": [],
                "manager_factory": [],
                "obj_factory": []
            }
        }
    },
    "nuxeo-drive-master/tests/functional/test_server_options.py": {
        "test_behavior": {
            "name": "test_behavior",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_behavior_not_good": {
            "name": "test_behavior_not_good",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "float"
                ],
                "manager_factory": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_features": {
            "name": "test_features",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "feature": [
                    "bool",
                    "List[str]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[List]"
                ],
                "feat_name": [
                    "str"
                ],
                "default": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "bool"
                ],
                "manager_factory": [
                    "bool",
                    "List[str]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[List]"
                ],
                "tmp_path": [
                    "bool",
                    "List[str]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[List]"
                ]
            }
        },
        "test_delay_remote_watcher": {
            "name": "test_delay_remote_watcher",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "int",
                    "str"
                ],
                "manager_factory": [
                    "int",
                    "str"
                ]
            }
        },
        "test_synchronization_enabled": {
            "name": "test_synchronization_enabled",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_behavior.enabled": {
            "name": "enabled",
            "location": 19,
            "return": [
                "dict[typing.Text, dict[typing.Text, bool]]"
            ],
            "arguments": {}
        },
        "test_behavior.disabled": {
            "name": "disabled",
            "location": 22,
            "return": [
                "Dict[Text,dict[Text,bool]]",
                "bool",
                "int",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {}
        },
        "test_behavior_not_good.unknown": {
            "name": "unknown",
            "location": 48,
            "return": [
                "Dict[Text,dict[Text,bool]]",
                "bool",
                "Optional[int]",
                "int",
                "str",
                "Optional[bool]"
            ],
            "arguments": {}
        },
        "test_behavior_not_good.bad_value": {
            "name": "bad_value",
            "location": 51,
            "return": [
                "Dict[Text,dict[Text,Text]]",
                "int",
                "str",
                "Tuple[int,int]",
                "Tuple[str,int]",
                "T",
                "float"
            ],
            "arguments": {}
        },
        "test_features.enabled": {
            "name": "enabled",
            "location": 98,
            "return": [
                "dict[typing.Text, dict[typing.Text, bool]]"
            ],
            "arguments": {}
        },
        "test_features.toggled": {
            "name": "toggled",
            "location": 101,
            "return": [
                "Dict[Text,dict[,bool]]",
                "int",
                "str",
                "utils.Node",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {}
        },
        "test_delay_remote_watcher.config_2s": {
            "name": "config_2s",
            "location": 157,
            "return": [
                "Dict[Text,int]",
                "int",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        },
        "test_delay_remote_watcher.config_5s": {
            "name": "config_5s",
            "location": 160,
            "return": [
                "Dict[Text,int]",
                "int",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        },
        "test_delay_remote_watcher.handle_changes": {
            "name": "handle_changes",
            "location": 163,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "test_synchronization_enabled.enabled": {
            "name": "enabled",
            "location": 212,
            "return": [
                "Dict[Text,dict[Text,bool]]",
                "bool",
                "Optional[int]",
                "int",
                "str",
                "Optional[bool]"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/tests/functional/test_tracker.py": {
        "test_tracker_instance_and_attrs": {
            "name": "test_tracker_instance_and_attrs",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": []
            }
        },
        "test_tracker_send_methods": {
            "name": "test_tracker_send_methods",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "is_frozen": [
                    "str",
                    "bool"
                ],
                "use_analytics": [
                    "bool",
                    "Optional[Callable]"
                ],
                "metrics_shared": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "method": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ],
                "arguments": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ],
                "manager_factory": [
                    "bool",
                    "int",
                    "List[str]",
                    "list",
                    "Dict[str, Any]"
                ],
                "monkeypatch": [
                    "Dict[int, dict]",
                    "Callable[[Dict], None]",
                    "str"
                ]
            }
        },
        "test_tracker_method_without_args": {
            "name": "test_tracker_method_without_args",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "is_frozen": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "use_analytics": [
                    "bool"
                ],
                "metrics_shared": [
                    "bool",
                    "int",
                    "str"
                ],
                "method": [
                    "bool",
                    "int",
                    "str"
                ],
                "manager_factory": [
                    "bool",
                    "int",
                    "List[str]",
                    "list"
                ],
                "monkeypatch": [
                    "bool",
                    "str",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "test_tracker_send_methods.post": {
            "name": "post",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tracker_method_without_args.post": {
            "name": "post",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/tests/functional/test_trash.py": {
        "create_tree": {
            "name": "create_tree",
            "location": 9,
            "return": [
                "Tuple[Path]",
                "str",
                "int",
                "pathlib.Path"
            ],
            "arguments": {
                "tmp": [
                    "Type[T]",
                    "bool",
                    "BaseException"
                ]
            }
        },
        "test_trash_long_file": {
            "name": "test_trash_long_file",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": [
                    "pathlib.Path"
                ]
            }
        },
        "test_trash_long_folder": {
            "name": "test_trash_long_folder",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/functional/test_updater.py": {
        "mock_get": {
            "name": "mock_get",
            "location": 80,
            "return": [
                "MockResponse",
                "str",
                "Optional[Dict[str,Any]]",
                "bool"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "monkey_requests": {
            "name": "monkey_requests",
            "location": 86,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "Sequence[int]",
                    "Exception"
                ]
            }
        },
        "check_attrs": {
            "name": "check_attrs",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "updater": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ],
                "enable": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[Set[str]]",
                    "tuple",
                    "Optional[int]"
                ],
                "checkpoint": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[Set[str]]",
                    "tuple",
                    "Optional[int]"
                ],
                "version": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[Set[str]]",
                    "tuple",
                    "Optional[int]"
                ]
            }
        },
        "test_not_frozen": {
            "name": "test_not_frozen",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": []
            }
        },
        "test_frozen": {
            "name": "test_frozen",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": [],
                "monkey_requests": [
                    "int",
                    "List[List[int]]"
                ]
            }
        },
        "test_frozen_updates_disabled": {
            "name": "test_frozen_updates_disabled",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": []
            }
        },
        "test_frozen_updates_disabled_centralized": {
            "name": "test_frozen_updates_disabled_centralized",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": []
            }
        },
        "test_frozen_updates_disabled_centralized_client_version_invalid": {
            "name": "test_frozen_updates_disabled_centralized_client_version_invalid",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": []
            }
        },
        "test_frozen_updates_disabled_centralized_client_version": {
            "name": "test_frozen_updates_disabled_centralized_client_version",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": [],
                "monkey_requests": [
                    "int",
                    "List[List[int]]"
                ]
            }
        },
        "test_installer_integrity_failure": {
            "name": "test_installer_integrity_failure",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": [],
                "monkey_requests": [
                    "int",
                    "List[List[int]]"
                ]
            }
        },
        "test_feature_auto_update": {
            "name": "test_feature_auto_update",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_factory": [
                    "Dict[str, Sequence[str]]"
                ],
                "tmp_path": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "Updater.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Updater.server_ver": {
            "name": "server_ver",
            "location": 58,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Updater.install": {
            "name": "install",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "bool",
                    "str"
                ]
            }
        },
        "Updater._fetch_versions": {
            "name": "_fetch_versions",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockResponse.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_frozen.enabled": {
            "name": "enabled",
            "location": 119,
            "return": [
                "dict[typing.Text, dict[typing.Text, bool]]"
            ],
            "arguments": {}
        },
        "test_frozen_updates_disabled_centralized_client_version.enabled": {
            "name": "enabled",
            "location": 201,
            "return": [
                "dict[typing.Text, dict[typing.Text, bool]]"
            ],
            "arguments": {}
        },
        "test_installer_integrity_failure.enabled": {
            "name": "enabled",
            "location": 228,
            "return": [
                "dict[typing.Text, dict[typing.Text, bool]]"
            ],
            "arguments": {}
        },
        "test_feature_auto_update.enabled": {
            "name": "enabled",
            "location": 253,
            "return": [
                "Dict[Text,dict[Text,bool]]",
                "str",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "test_feature_auto_update.disabled": {
            "name": "disabled",
            "location": 260,
            "return": [
                "Dict[Text,dict[Text,bool]]",
                "str",
                "Generator"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/tests/functional/test_windows.py": {
        "test_registry_configuration": {
            "name": "test_registry_configuration",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "str"
                ],
                "manager_factory": []
            }
        },
        "test_registry_configuration.cleanup": {
            "name": "cleanup",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/tests/functional/__init__.py": {},
    "nuxeo-drive-master/tests/integration/__init__.py": {},
    "nuxeo-drive-master/tests/integration/windows/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "application.domain.common.QueryParser",
                    "type"
                ]
            }
        },
        "final_exe": {
            "name": "final_exe",
            "location": 20,
            "return": [
                "Dict[str, str]",
                "dict",
                "bool",
                "Sequence"
            ],
            "arguments": {
                "request": []
            }
        },
        "exe": {
            "name": "exe",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "final_exe": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "tmp": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "exe.execute": {
            "name": "execute",
            "location": 36,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "cmd": [
                    "int",
                    "BaseException",
                    "logging.LogRecord"
                ],
                "args": [
                    "typing.Text"
                ],
                "wait": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/integration/windows/test_cli.py": {
        "test_start_app": {
            "name": "test_start_app",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "exe": []
            }
        },
        "test_invalid_argument": {
            "name": "test_invalid_argument",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "exe": [],
                "arg": []
            }
        },
        "test_invalid_argument_value": {
            "name": "test_invalid_argument_value",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "exe": [],
                "arg": []
            }
        },
        "test_valid_argument_value": {
            "name": "test_valid_argument_value",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "exe": [],
                "arg": []
            }
        },
        "test_argument_log_filename": {
            "name": "test_argument_log_filename",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "exe": [],
                "tmp": [],
                "file": []
            }
        },
        "test_argument_nxdrive_home": {
            "name": "test_argument_nxdrive_home",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "exe": [],
                "tmp": [],
                "folder": []
            }
        },
        "test_removed_argument": {
            "name": "test_removed_argument",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "exe": [],
                "arg": []
            }
        }
    },
    "nuxeo-drive-master/tests/integration/windows/test_cli_sub_command.py": {
        "launch": {
            "name": "launch",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "exe": [],
                "args": [],
                "wait": [
                    "int"
                ]
            }
        },
        "bind": {
            "name": "bind",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "exe": [],
                "args": []
            }
        },
        "unbind": {
            "name": "unbind",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "exe": [],
                "args": []
            }
        },
        "test_console": {
            "name": "test_console",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "exe": []
            }
        },
        "test_bind_server": {
            "name": "test_bind_server",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "nuxeo_url": [],
                "exe": [],
                "args": []
            }
        },
        "test_bind_server_missing_arguments": {
            "name": "test_bind_server_missing_arguments",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "exe": [],
                "args": []
            }
        },
        "test_unbind_server": {
            "name": "test_unbind_server",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "nuxeo_url": [],
                "exe": [],
                "folder": []
            }
        },
        "test_unbind_server_missing_argument": {
            "name": "test_unbind_server_missing_argument",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "exe": [],
                "folder": []
            }
        },
        "test_bind_root_doc_not_found": {
            "name": "test_bind_root_doc_not_found",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "nuxeo_url": [],
                "exe": [],
                "server": [],
                "tmp": []
            }
        },
        "test_unbind_root_doc_not_found": {
            "name": "test_unbind_root_doc_not_found",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "nuxeo_url": [],
                "exe": [],
                "server": [],
                "tmp": []
            }
        },
        "test_complete_scenario_synchronization_from_zero": {
            "name": "test_complete_scenario_synchronization_from_zero",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "nuxeo_url": [],
                "exe": [],
                "server": [],
                "tmp": []
            }
        },
        "test_ctx_menu_access_online_inexistant": {
            "name": "test_ctx_menu_access_online_inexistant",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "nuxeo_url": [],
                "exe": [],
                "server": [],
                "tmp": []
            }
        },
        "test_ctx_menu_copy_share_link_inexistant": {
            "name": "test_ctx_menu_copy_share_link_inexistant",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "nuxeo_url": [],
                "exe": [],
                "server": [],
                "tmp": []
            }
        },
        "test_ctx_menu_edit_metadata_inexistant": {
            "name": "test_ctx_menu_edit_metadata_inexistant",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "nuxeo_url": [],
                "exe": [],
                "server": [],
                "tmp": []
            }
        },
        "test_ctx_menu_entries": {
            "name": "test_ctx_menu_entries",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "nuxeo_url": [],
                "exe": [],
                "server": [],
                "tmp": []
            }
        }
    },
    "nuxeo-drive-master/tests/integration/windows/utils.py": {
        "cb_get": {
            "name": "cb_get",
            "location": 9,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {}
        },
        "fatal_error_dlg": {
            "name": "fatal_error_dlg",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "app": [],
                "with_details": [
                    "bool",
                    "Optional[Game]"
                ]
            }
        },
        "main_window": {
            "name": "main_window",
            "location": 42,
            "return": [
                "Any"
            ],
            "arguments": {
                "app": []
            }
        },
        "share_metrics_dlg": {
            "name": "share_metrics_dlg",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "app": []
            }
        },
        "get_opened_url": {
            "name": "get_opened_url",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/tests/integration/windows/_test_installer.py": {
        "installer_path": {
            "name": "installer_path",
            "location": 49,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        },
        "test_installer_arguments": {
            "name": "test_installer_arguments",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "installer_path": [
                    "str"
                ]
            }
        },
        "Installer.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "Installer.__enter__": {
            "name": "__enter__",
            "location": 28,
            "return": [
                "Installer"
            ],
            "arguments": {
                "self": [
                    "_TInstaller@@Installer@@"
                ]
            }
        },
        "Installer.__exit__": {
            "name": "__exit__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "Installer.install": {
            "name": "install",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Installer.uninstall": {
            "name": "uninstall",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/integration/windows/__init__.py": {},
    "nuxeo-drive-master/tests/old_functional/common.py": {
        "nuxeo_url": {
            "name": "nuxeo_url",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "root_remote": {
            "name": "root_remote",
            "location": 65,
            "return": [
                "DocRemote"
            ],
            "arguments": {
                "base_folder": [
                    "typing.Text"
                ]
            }
        },
        "StubQApplication.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "argv": [],
                "test_case": []
            }
        },
        "StubQApplication.local_scan_finished": {
            "name": "local_scan_finished",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubQApplication.sync_completed": {
            "name": "sync_completed",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubQApplication.remote_scan_completed": {
            "name": "remote_scan_completed",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubQApplication.remote_changes_found": {
            "name": "remote_changes_found",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "change_count": []
            }
        },
        "StubQApplication.no_remote_changes_found": {
            "name": "no_remote_changes_found",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubQApplication.bind_engine": {
            "name": "bind_engine",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number": [],
                "start_engine": []
            }
        },
        "StubQApplication.unbind_engine": {
            "name": "unbind_engine",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number": []
            }
        },
        "TwoUsersTest.inject_fixtures": {
            "name": "inject_fixtures",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "caplog": []
            }
        },
        "TwoUsersTest.setup_method": {
            "name": "setup_method",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_method": [],
                "register_roots": [
                    "bool"
                ],
                "user_2": [
                    "bool"
                ],
                "server_profile": [
                    "None"
                ],
                "sync_enabled": [
                    "bool"
                ]
            }
        },
        "TwoUsersTest.teardown_method": {
            "name": "teardown_method",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_method": []
            }
        },
        "TwoUsersTest.run": {
            "name": "run",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "None"
                ]
            }
        },
        "TwoUsersTest._get_report_file": {
            "name": "_get_report_file",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TwoUsersTest._create_user": {
            "name": "_create_user",
            "location": 294,
            "return": [],
            "arguments": {
                "self": [],
                "number": []
            }
        },
        "TwoUsersTest._create_workspace": {
            "name": "_create_workspace",
            "location": 322,
            "return": [],
            "arguments": {
                "self": [],
                "title": []
            }
        },
        "TwoUsersTest._append_user_attrs": {
            "name": "_append_user_attrs",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number": [],
                "register_roots": []
            }
        },
        "TwoUsersTest.get_bad_remote": {
            "name": "get_bad_remote",
            "location": 396,
            "return": [
                "RemoteTest"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoUsersTest.get_local_client": {
            "name": "get_local_client",
            "location": 407,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "TwoUsersTest.bind_engine": {
            "name": "bind_engine",
            "location": 424,
            "return": [],
            "arguments": {
                "self": [],
                "number": [],
                "start_engine": [
                    "bool"
                ],
                "manager": [
                    "None"
                ],
                "folder": [
                    "None"
                ],
                "user": [
                    "None"
                ],
                "password": [
                    "None"
                ]
            }
        },
        "TwoUsersTest.unbind_engine": {
            "name": "unbind_engine",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number": [],
                "purge": [
                    "bool"
                ]
            }
        },
        "TwoUsersTest.send_bind_engine": {
            "name": "send_bind_engine",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number": [],
                "start_engine": [
                    "bool"
                ]
            }
        },
        "TwoUsersTest.send_unbind_engine": {
            "name": "send_unbind_engine",
            "location": 478,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number": []
            }
        },
        "TwoUsersTest.wait_bind_engine": {
            "name": "wait_bind_engine",
            "location": 481,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number": [],
                "timeout": [
                    "int"
                ]
            }
        },
        "TwoUsersTest.wait_unbind_engine": {
            "name": "wait_unbind_engine",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number": [],
                "timeout": [
                    "int"
                ]
            }
        },
        "TwoUsersTest.wait": {
            "name": "wait",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "int"
                ]
            }
        },
        "TwoUsersTest.wait_sync": {
            "name": "wait_sync",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wait_for_async": [
                    "bool"
                ],
                "timeout": [
                    "int"
                ],
                "fail_if_timeout": [
                    "bool"
                ],
                "wait_for_engine_1": [
                    "bool"
                ],
                "wait_for_engine_2": [
                    "bool"
                ],
                "wait_win": [
                    "bool"
                ],
                "enforce_errors": [
                    "bool"
                ]
            }
        },
        "TwoUsersTest.make_server_tree": {
            "name": "make_server_tree",
            "location": 623,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "deep": [
                    "bool"
                ]
            }
        },
        "TwoUsersTest.get_local_child_count": {
            "name": "get_local_child_count",
            "location": 653,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "TwoUsersTest.generate_report": {
            "name": "generate_report",
            "location": 664,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exceptions": []
            }
        },
        "TwoUsersTest._set_read_permission": {
            "name": "_set_read_permission",
            "location": 697,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [],
                "doc_path": [],
                "grant": []
            }
        },
        "TwoUsersTest.get_dao_state_from_engine_1": {
            "name": "get_dao_state_from_engine_1",
            "location": 711,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "TwoUsersTest.set_readonly": {
            "name": "set_readonly",
            "location": 722,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [],
                "doc_path": [],
                "grant": [
                    "bool"
                ]
            }
        },
        "OneUserTest.setup_method": {
            "name": "setup_method",
            "location": 753,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneUserTest.wait_sync": {
            "name": "wait_sync",
            "location": 757,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wait_for_async": [
                    "bool"
                ],
                "timeout": [
                    "int"
                ],
                "fail_if_timeout": [
                    "bool"
                ],
                "wait_for_engine_1": [
                    "bool"
                ],
                "wait_win": [
                    "bool"
                ],
                "enforce_errors": [
                    "bool"
                ]
            }
        },
        "OneUserNoSync.setup_method": {
            "name": "setup_method",
            "location": 849,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoUsersTest.run.launch_test": {
            "name": "launch_test",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TwoUsersTest.run.kill_test": {
            "name": "kill_test",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TwoUsersTest._create_user._company_domain": {
            "name": "_company_domain",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "company_": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/local_client_darwin.py": {
        "MacLocalClient.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_folder": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MacLocalClient.copy": {
            "name": "copy",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "srcref": [
                    "int",
                    "Callable",
                    "str"
                ],
                "dstref": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MacLocalClient.move": {
            "name": "move",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "srcref": [
                    "int",
                    "dict",
                    "bool",
                    "str"
                ],
                "parentref": [
                    "int",
                    "dict",
                    "bool",
                    "str"
                ],
                "name": [
                    "None",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MacLocalClient.rename": {
            "name": "rename",
            "location": 48,
            "return": [
                "str",
                "pathlib.Path",
                "Iterable[str]",
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "self": [],
                "srcref": [
                    "Optional[str]",
                    "str",
                    "Callable",
                    "Optional[Dict[str, Any]]"
                ],
                "to_name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "MacLocalClient.delete": {
            "name": "delete",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "MacLocalClient._process_result": {
            "name": "_process_result",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "dict",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/local_client_windows.py": {
        "WindowsLocalClient.abspath": {
            "name": "abspath",
            "location": 33,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "WindowsLocalClient.do_op": {
            "name": "do_op",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op": [
                    "int",
                    "str",
                    "pathlib.Path"
                ],
                "path_from": [
                    "pathlib.Path",
                    "str"
                ],
                "path_to": [
                    "Optional[str]",
                    "str",
                    "pathlib.Path",
                    "pathlib.PurePosixPath",
                    "int"
                ],
                "flags": [
                    "int",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "WindowsLocalClient.copy": {
            "name": "copy",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "srcref": [
                    "int",
                    "Callable",
                    "str"
                ],
                "dstref": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "WindowsLocalClient.delete": {
            "name": "delete",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "Callable",
                    "Optional[bool]"
                ]
            }
        },
        "WindowsLocalClient.delete_final": {
            "name": "delete_final",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "Callable",
                    "Optional[bool]"
                ]
            }
        },
        "WindowsLocalClient.move": {
            "name": "move",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "Callable",
                    "bool",
                    "List[str]",
                    "List[pathlib.Path]"
                ],
                "new_parent_ref": [
                    "str",
                    "list",
                    "int",
                    "ImportError",
                    "Tuple[pathlib.Path]"
                ],
                "name": [
                    "None",
                    "str",
                    "List",
                    "int",
                    "ImportError",
                    "Tuple[pathlib.Path]"
                ]
            }
        },
        "WindowsLocalClient.rename": {
            "name": "rename",
            "location": 92,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcref": [
                    "str",
                    "dict"
                ],
                "to_name": [
                    "str",
                    "Optional[str]",
                    "Union[pathlib.Path, str]",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_behavior.py": {
        "TestBehavior.test_server_deletion": {
            "name": "test_server_deletion",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_bulk_remote_changes.py": {
        "TestBulkRemoteChanges.test_many_changes": {
            "name": "test_many_changes",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBulkRemoteChanges.test_many_changes.get_children_info": {
            "name": "get_children_info",
            "location": 103,
            "return": [
                "raiden.utils.BlockNumber",
                "str",
                "int",
                "raiden.utils.TokenAmount",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBulkRemoteChanges.test_many_changes.mock_method_factory": {
            "name": "mock_method_factory",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "original": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestBulkRemoteChanges.test_many_changes.mock_method_factory.wrapped_method": {
            "name": "wrapped_method",
            "location": 114,
            "return": [
                "Optional[float]",
                "str",
                "dict",
                "bool",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "data": [
                    "allennlp.common.util.JsonDict",
                    "Dict[str, Any]",
                    "bytes",
                    "bool",
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_collection.py": {
        "TestCollection.teardown": {
            "name": "teardown",
            "location": 10,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollection.test_collection_synchronization": {
            "name": "test_collection_synchronization",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_concurrent_synchronization.py": {
        "TestConcurrentSynchronization.create_docs": {
            "name": "create_docs",
            "location": 14,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "Optional[str]"
                ],
                "number": [
                    "str",
                    "Optional[str]"
                ],
                "name_pattern": [
                    "None",
                    "str",
                    "Optional[str]"
                ],
                "delay": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestConcurrentSynchronization.test_concurrent_file_access": {
            "name": "test_concurrent_file_access",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConcurrentSynchronization.test_find_changes_with_many_doc_creations": {
            "name": "test_find_changes_with_many_doc_creations",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConcurrentSynchronization.test_delete_local_folder_2_clients": {
            "name": "test_delete_local_folder_2_clients",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConcurrentSynchronization.test_delete_local_folder_delay_remote_changes_fetch": {
            "name": "test_delete_local_folder_delay_remote_changes_fetch",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConcurrentSynchronization.test_rename_local_folder": {
            "name": "test_rename_local_folder",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConcurrentSynchronization.test_delete_local_folder_update_remote_folder_property": {
            "name": "test_delete_local_folder_update_remote_folder_property",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConcurrentSynchronization.test_update_local_file_content_update_remote_file_property": {
            "name": "test_update_local_file_content_update_remote_file_property",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_conflicts.py": {
        "TestConflicts.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConflicts.test_self_conflict": {
            "name": "test_self_conflict",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConflicts.test_conflict_renamed_modified": {
            "name": "test_conflict_renamed_modified",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConflicts.test_resolve_local_renamed_modified": {
            "name": "test_resolve_local_renamed_modified",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConflicts.test_real_conflict": {
            "name": "test_real_conflict",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConflicts.test_resolve_local": {
            "name": "test_resolve_local",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConflicts.test_resolve_local_folder": {
            "name": "test_resolve_local_folder",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConflicts.test_resolve_remote": {
            "name": "test_resolve_remote",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConflicts.test_conflict_on_lock": {
            "name": "test_conflict_on_lock",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConflicts.test_XLS_conflict_on_locked_document": {
            "name": "test_XLS_conflict_on_locked_document",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConflicts.test_XLS_conflict_on_locked_document_from_start": {
            "name": "test_XLS_conflict_on_locked_document_from_start",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConflicts._XLS_local_update_on_locked_document": {
            "name": "_XLS_local_update_on_locked_document",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "locked_from_start": [
                    "bool",
                    "int",
                    "List[bool]"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_copy.py": {
        "TestCopy.test_synchronize_remote_copy": {
            "name": "test_synchronize_remote_copy",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_direct_edit.py": {
        "direct_edit_is_starting": {
            "name": "direct_edit_is_starting",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "open_local_file": {
            "name": "open_local_file",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectEditSetup.setup_teardown": {
            "name": "setup_teardown",
            "location": 41,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests._direct_edit_update": {
            "name": "_direct_edit_update",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "doc_id": [],
                "filename": [],
                "content": [],
                "xpath": [
                    "typing.Text"
                ],
                "url": [
                    "None"
                ]
            }
        },
        "MixinTests.test_attachments": {
            "name": "test_attachments",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_no_xpath": {
            "name": "test_no_xpath",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_cleanup": {
            "name": "test_cleanup",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_cleanup_document_not_found": {
            "name": "test_cleanup_document_not_found",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_filename_encoding": {
            "name": "test_filename_encoding",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_forbidden_edit": {
            "name": "test_forbidden_edit",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_forbidden_upload": {
            "name": "test_forbidden_upload",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_direct_edit_proxy": {
            "name": "test_direct_edit_proxy",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_direct_edit_413_error": {
            "name": "test_direct_edit_413_error",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_direct_edit_502_error": {
            "name": "test_direct_edit_502_error",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_direct_edit_max_error": {
            "name": "test_direct_edit_max_error",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_orphan_should_unlock": {
            "name": "test_orphan_should_unlock",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_forbidden_lock_in_lock_queue": {
            "name": "test_forbidden_lock_in_lock_queue",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_unlock_in_lock_queue_error_503": {
            "name": "test_unlock_in_lock_queue_error_503",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_direct_edit_version": {
            "name": "test_direct_edit_version",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_network_loss": {
            "name": "test_network_loss",
            "location": 584,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_note_edit": {
            "name": "test_note_edit",
            "location": 621,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_edit_document_with_folderish_facet": {
            "name": "test_edit_document_with_folderish_facet",
            "location": 630,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_blob_without_digest": {
            "name": "test_blob_without_digest",
            "location": 651,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_blob_with_non_standard_digest": {
            "name": "test_blob_with_non_standard_digest",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_blob_with_non_standard_digest_and_standard_algo": {
            "name": "test_blob_with_non_standard_digest_and_standard_algo",
            "location": 718,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_permission_readonly": {
            "name": "test_permission_readonly",
            "location": 750,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_corrupted_download_ok_if_retried": {
            "name": "test_corrupted_download_ok_if_retried",
            "location": 774,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_corrupted_download_complete_failure": {
            "name": "test_corrupted_download_complete_failure",
            "location": 815,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_corrupted_download_but_no_integrity_check": {
            "name": "test_corrupted_download_but_no_integrity_check",
            "location": 839,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_resumed_download": {
            "name": "test_resumed_download",
            "location": 881,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_self_locked_file": {
            "name": "test_self_locked_file",
            "location": 915,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_url_with_spaces": {
            "name": "test_url_with_spaces",
            "location": 921,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_url_with_accents": {
            "name": "test_url_with_accents",
            "location": 938,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_filename_with_forbidden_chars": {
            "name": "test_filename_with_forbidden_chars",
            "location": 955,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_double_lock_same_user": {
            "name": "test_double_lock_same_user",
            "location": 974,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDirectEdit.test_synced_file": {
            "name": "test_synced_file",
            "location": 988,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDirectEdit.test_sync_folder_different_partitions": {
            "name": "test_sync_folder_different_partitions",
            "location": 1014,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDirectEdit.test_multiple_editions_on_unsynced_document": {
            "name": "test_multiple_editions_on_unsynced_document",
            "location": 1038,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDirectEditLock.test_locked_file": {
            "name": "test_locked_file",
            "location": 1077,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDirectEditLock.test_double_lock_different_user": {
            "name": "test_double_lock_different_user",
            "location": 1090,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDirectEditLock.test_unlock_different_user": {
            "name": "test_unlock_different_user",
            "location": 1102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDirectEditLock.test_unlock_different_user_error_500": {
            "name": "test_unlock_different_user_error_500",
            "location": 1113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_cleanup_document_not_found.extract_edit_info": {
            "name": "extract_edit_info",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "ref": []
            }
        },
        "MixinTests.test_forbidden_edit.forbidden_signal": {
            "name": "forbidden_signal",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_direct_edit_413_error.upload": {
            "name": "upload",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MixinTests.test_direct_edit_502_error.upload": {
            "name": "upload",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MixinTests.test_orphan_should_unlock.orphan_unlocked": {
            "name": "orphan_unlocked",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "MixinTests.test_forbidden_lock_in_lock_queue.lock": {
            "name": "lock",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        },
        "MixinTests.test_forbidden_lock_in_lock_queue.forbidden_signal": {
            "name": "forbidden_signal",
            "location": 481,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_unlock_in_lock_queue_error_503.unlock": {
            "name": "unlock",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MixinTests.test_blob_without_digest.from_dict": {
            "name": "from_dict",
            "location": 658,
            "return": [],
            "arguments": {
                "blob": []
            }
        },
        "MixinTests.test_blob_with_non_standard_digest.from_dict": {
            "name": "from_dict",
            "location": 691,
            "return": [],
            "arguments": {
                "blob": []
            }
        },
        "MixinTests.test_blob_with_non_standard_digest_and_standard_algo.from_dict": {
            "name": "from_dict",
            "location": 725,
            "return": [],
            "arguments": {
                "blob": []
            }
        },
        "MixinTests.test_permission_readonly.from_dict": {
            "name": "from_dict",
            "location": 755,
            "return": [],
            "arguments": {
                "doc": [],
                "parent_uid": []
            }
        },
        "MixinTests.test_permission_readonly.readonly_signal": {
            "name": "readonly_signal",
            "location": 761,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixinTests.test_corrupted_download_ok_if_retried.callback": {
            "name": "callback",
            "location": 788,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        },
        "MixinTests.test_corrupted_download_ok_if_retried.request": {
            "name": "request",
            "location": 797,
            "return": [],
            "arguments": {}
        },
        "MixinTests.test_corrupted_download_complete_failure.callback": {
            "name": "callback",
            "location": 828,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        },
        "MixinTests.test_corrupted_download_but_no_integrity_check.request": {
            "name": "request",
            "location": 851,
            "return": [],
            "arguments": {}
        },
        "MixinTests.test_corrupted_download_but_no_integrity_check.callback": {
            "name": "callback",
            "location": 860,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        },
        "MixinTests.test_resumed_download.request": {
            "name": "request",
            "location": 886,
            "return": [],
            "arguments": {}
        },
        "TestDirectEdit.test_synced_file.download": {
            "name": "download",
            "location": 997,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestDirectEditLock.test_locked_file.locked_file_signal": {
            "name": "locked_file_signal",
            "location": 1078,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDirectEditLock.test_unlock_different_user_error_500.unlock": {
            "name": "unlock",
            "location": 1117,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_direct_transfer.py": {
        "DirectTransfer.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransfer.tearDown": {
            "name": "tearDown",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransfer.has_blob": {
            "name": "has_blob",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransfer.no_uploads": {
            "name": "no_uploads",
            "location": 70,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransfer.sync_and_check": {
            "name": "sync_and_check",
            "location": 74,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "should_have_blob": [
                    "bool",
                    "str"
                ],
                "check_for_blob": [
                    "bool",
                    "str"
                ]
            }
        },
        "DirectTransfer.direct_transfer": {
            "name": "direct_transfer",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "duplicate_behavior": [
                    "Text",
                    "str",
                    "Optional[pathlib.Path]",
                    "bytes",
                    "pathlib.Path"
                ],
                "last_local_selected_location": [
                    "None",
                    "str",
                    "Optional[pathlib.Path]",
                    "bytes",
                    "pathlib.Path"
                ],
                "new_folder": [
                    "None",
                    "str",
                    "Optional[pathlib.Path]",
                    "bytes",
                    "pathlib.Path"
                ]
            }
        },
        "DirectTransfer.test_upload": {
            "name": "test_upload",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransfer.test_upload_new_folder": {
            "name": "test_upload_new_folder",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransfer.test_upload_new_folder_empty": {
            "name": "test_upload_new_folder_empty",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransfer.test_cancel_upload": {
            "name": "test_cancel_upload",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransfer.test_with_engine_not_started": {
            "name": "test_with_engine_not_started",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransfer.test_duplicate_file_create": {
            "name": "test_duplicate_file_create",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransfer.test_duplicate_file_ignore": {
            "name": "test_duplicate_file_ignore",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransfer.test_duplicate_file_override": {
            "name": "test_duplicate_file_override",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransfer.test_pause_upload_manually": {
            "name": "test_pause_upload_manually",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransfer.test_pause_upload_automatically": {
            "name": "test_pause_upload_automatically",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransfer.test_modifying_paused_upload": {
            "name": "test_modifying_paused_upload",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransfer.test_deleting_paused_upload": {
            "name": "test_deleting_paused_upload",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransfer.test_server_error_but_upload_ok": {
            "name": "test_server_error_but_upload_ok",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransfer.test_upload_ok_but_network_lost_in_the_meantime": {
            "name": "test_upload_ok_but_network_lost_in_the_meantime",
            "location": 539,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransfer.test_server_error_upload": {
            "name": "test_server_error_upload",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransfer.test_chunk_upload_error": {
            "name": "test_chunk_upload_error",
            "location": 632,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDirectTransfer.setUp": {
            "name": "setUp",
            "location": 667,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDirectTransfer.wait_sync": {
            "name": "wait_sync",
            "location": 670,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDirectTransferNoSync.setUp": {
            "name": "setUp",
            "location": 678,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDirectTransferNoSync.wait_sync": {
            "name": "wait_sync",
            "location": 681,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransferFolder.setUp": {
            "name": "setUp",
            "location": 687,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransferFolder.get_children": {
            "name": "get_children",
            "location": 696,
            "return": [
                "bytes",
                "List[str]",
                "List[Dict]",
                "str",
                "Union[str, List[Any]]",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path"
                ],
                "children_list": [
                    "str",
                    "list",
                    "bool",
                    "List[Optional[str]]",
                    "List[str]"
                ],
                "key": [
                    "str",
                    "list",
                    "bool",
                    "List[Optional[str]]",
                    "List[str]"
                ]
            }
        },
        "DirectTransferFolder.checks": {
            "name": "checks",
            "location": 704,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "created": [
                    "str",
                    "List[Union[int, float]]",
                    "bytes"
                ]
            }
        },
        "DirectTransferFolder.direct_transfer": {
            "name": "direct_transfer",
            "location": 727,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "pathlib.Path",
                    "str"
                ],
                "duplicate_behavior": [
                    "Text",
                    "str",
                    "bytes",
                    "List[str]",
                    "int",
                    "Path",
                    "Dict[str,Any]"
                ]
            }
        },
        "DirectTransferFolder.test_simple_folder": {
            "name": "test_simple_folder",
            "location": 737,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransferFolder.test_sub_folders": {
            "name": "test_sub_folders",
            "location": 758,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransferFolder.test_same_name_folders": {
            "name": "test_same_name_folders",
            "location": 785,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransferFolder.test_sessions": {
            "name": "test_sessions",
            "location": 826,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransferFolder.test_pause_resume_session": {
            "name": "test_pause_resume_session",
            "location": 880,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransferFolder.test_pause_cancel_session": {
            "name": "test_pause_cancel_session",
            "location": 953,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransferFolder.test_pause_resume_session_non_chunked": {
            "name": "test_pause_resume_session_non_chunked",
            "location": 1020,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransferFolder.test_sub_files": {
            "name": "test_sub_files",
            "location": 1105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransferFolder.test_identical_sessions": {
            "name": "test_identical_sessions",
            "location": 1128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDirectTransferFolder.setUp": {
            "name": "setUp",
            "location": 1192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDirectTransferFolder.wait_sync": {
            "name": "wait_sync",
            "location": 1195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDirectTransferFolderNoSync.setUp": {
            "name": "setUp",
            "location": 1203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDirectTransferFolderNoSync.wait_sync": {
            "name": "wait_sync",
            "location": 1206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransfer.test_cancel_upload.callback": {
            "name": "callback",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectTransfer.test_duplicate_file_ignore.upload": {
            "name": "upload",
            "location": 280,
            "return": [],
            "arguments": {}
        },
        "DirectTransfer.test_pause_upload_manually.callback": {
            "name": "callback",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectTransfer.test_pause_upload_automatically.callback": {
            "name": "callback",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectTransfer.test_modifying_paused_upload.callback": {
            "name": "callback",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectTransfer.test_deleting_paused_upload.callback": {
            "name": "callback",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectTransfer.test_server_error_but_upload_ok.upload": {
            "name": "upload",
            "location": 515,
            "return": [],
            "arguments": {}
        },
        "DirectTransfer.test_upload_ok_but_network_lost_in_the_meantime.upload": {
            "name": "upload",
            "location": 567,
            "return": [],
            "arguments": {}
        },
        "DirectTransfer.test_server_error_upload.upload": {
            "name": "upload",
            "location": 604,
            "return": [
                "str",
                "Dict[str, Any]",
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "DirectTransfer.test_chunk_upload_error.callback": {
            "name": "callback",
            "location": 635,
            "return": [
                "None"
            ],
            "arguments": {
                "uploader": [
                    "str",
                    "List[str]",
                    "list"
                ]
            }
        },
        "DirectTransferFolder.test_pause_resume_session.callback": {
            "name": "callback",
            "location": 895,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectTransferFolder.test_pause_cancel_session.callback": {
            "name": "callback",
            "location": 963,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectTransferFolder.test_pause_resume_session_non_chunked.get_upload": {
            "name": "get_upload",
            "location": 1037,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "Optional[List[str]]"
            ],
            "arguments": {}
        },
        "DirectTransferFolder.test_identical_sessions.callback": {
            "name": "callback",
            "location": 1139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DirectTransfer.test_duplicate_file_ignore.NoChunkUpload.upload_chunks": {
            "name": "upload_chunks",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransfer.test_server_error_but_upload_ok.BadUploader.link_blob_to_doc": {
            "name": "link_blob_to_doc",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransfer.test_upload_ok_but_network_lost_in_the_meantime.BadUploader.link_blob_to_doc": {
            "name": "link_blob_to_doc",
            "location": 559,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectTransfer.test_server_error_upload.BadUploader.link_blob_to_doc": {
            "name": "link_blob_to_doc",
            "location": 600,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_encoding.py": {
        "TestEncoding.test_filename_with_accents_from_server": {
            "name": "test_filename_with_accents_from_server",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoding.test_filename_with_katakana": {
            "name": "test_filename_with_katakana",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoding.test_content_with_accents_from_server": {
            "name": "test_content_with_accents_from_server",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoding.test_filename_with_accents_from_client": {
            "name": "test_filename_with_accents_from_client",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoding.test_content_with_accents_from_client": {
            "name": "test_content_with_accents_from_client",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoding.test_name_normalization": {
            "name": "test_name_normalization",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoding.test_fileinfo_normalization": {
            "name": "test_fileinfo_normalization",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_group_changes.py": {
        "TestGroupChanges.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupChanges.tearDown": {
            "name": "tearDown",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupChanges.set_ace": {
            "name": "set_ace",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "zerver.models.Message"
                ],
                "doc": [
                    "str",
                    "zerver.models.Message"
                ]
            }
        },
        "TestGroupChanges.test_group_changes_on_sync_root": {
            "name": "test_group_changes_on_sync_root",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupChanges.test_group_changes_on_sync_root_child": {
            "name": "test_group_changes_on_sync_root_child",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupChanges.test_group_changes_on_sync_root_parent": {
            "name": "test_group_changes_on_sync_root_parent",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupChanges.test_changes_with_parent_group": {
            "name": "test_changes_with_parent_group",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupChanges.test_changes_with_grand_parent_group": {
            "name": "test_changes_with_grand_parent_group",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupChanges._test_group_changes": {
            "name": "_test_group_changes",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder_path": [
                    "str",
                    "logging.Logger",
                    "Optional[str]",
                    "Union[str, List[str]]"
                ],
                "group_name": [
                    "str"
                ],
                "need_parent": [
                    "bool",
                    "str",
                    "logging.Logger",
                    "Optional[str]"
                ]
            }
        },
        "TestGroupChanges._test_group_changes_with_ancestor_groups": {
            "name": "_test_group_changes_with_ancestor_groups",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ancestor_group": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_ignored.py": {
        "TestIgnored.test_ignore_file": {
            "name": "test_ignore_file",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_local_changes_when_offline.py": {
        "TestOfflineChangesSync.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOfflineChangesSync.test_copy_paste_when_engine_suspended": {
            "name": "test_copy_paste_when_engine_suspended",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOfflineChangesSync.test_copy_paste_normal": {
            "name": "test_copy_paste_normal",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOfflineChangesSync.copy_past_and_rename": {
            "name": "copy_past_and_rename",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stop_engine": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_local_client.py": {
        "StubLocalClient.setUp": {
            "name": "setUp",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubLocalClient.test_make_documents": {
            "name": "test_make_documents",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubLocalClient.test_get_info_invalid_date": {
            "name": "test_get_info_invalid_date",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubLocalClient.test_complex_filenames": {
            "name": "test_complex_filenames",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubLocalClient.test_missing_file": {
            "name": "test_missing_file",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubLocalClient.test_case_sensitivity": {
            "name": "test_case_sensitivity",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubLocalClient.test_windows_short_names": {
            "name": "test_windows_short_names",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubLocalClient.test_get_children_info": {
            "name": "test_get_children_info",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubLocalClient.test_deep_folders": {
            "name": "test_deep_folders",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubLocalClient.test_get_new_file": {
            "name": "test_get_new_file",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubLocalClient.test_get_path": {
            "name": "test_get_path",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubLocalClient.test_is_equal_digests": {
            "name": "test_is_equal_digests",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubLocalClient.test_long_path": {
            "name": "test_long_path",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalClientNative.get_local_client": {
            "name": "get_local_client",
            "location": 348,
            "return": [
                "LocalTest"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "TestLocalClientNative.test_deep_folders": {
            "name": "test_deep_folders",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalClientNative.test_remote_changing_case_accentued_folder": {
            "name": "test_remote_changing_case_accentued_folder",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalClientSimulation.test_complex_filenames": {
            "name": "test_complex_filenames",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalClientSimulation.test_long_path": {
            "name": "test_long_path",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalClientSimulation.test_deep_folders": {
            "name": "test_deep_folders",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_local_copy_paste.py": {
        "TestLocalCopyPaste.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalCopyPaste.test_local_copy_paste_files": {
            "name": "test_local_copy_paste_files",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalCopyPaste.test_local_copy_paste_files_stopped": {
            "name": "test_local_copy_paste_files_stopped",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalCopyPaste._local_copy_paste_files": {
            "name": "_local_copy_paste_files",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stopped": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Collection[str]",
                    "Tuple[str,str]"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_local_creations.py": {
        "TestLocalCreations.test_create_then_rename_local_folder": {
            "name": "test_create_then_rename_local_folder",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalCreations.test_invalid_credentials_on_file_upload": {
            "name": "test_invalid_credentials_on_file_upload",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalCreations.test_mini_scenario": {
            "name": "test_mini_scenario",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalCreations.test_local_create_folders_and_children_files": {
            "name": "test_local_create_folders_and_children_files",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalCreations.test_local_create_folders_upper_lower_cases": {
            "name": "test_local_create_folders_upper_lower_cases",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalCreations.test_local_create_files_upper_lower_cases": {
            "name": "test_local_create_files_upper_lower_cases",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalCreations.test_local_create_folders_with_dots": {
            "name": "test_local_create_folders_with_dots",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalCreations.test_local_modification_date": {
            "name": "test_local_modification_date",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalCreations.test_local_modification_date_non_latin": {
            "name": "test_local_modification_date_non_latin",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalCreations.test_local_modification_date_kanjis_file": {
            "name": "test_local_modification_date_kanjis_file",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalCreations.test_local_modification_date_hiraganas_file": {
            "name": "test_local_modification_date_hiraganas_file",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalCreations.test_local_creation_date": {
            "name": "test_local_creation_date",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalCreations.test_local_creation_date_kanjis_file": {
            "name": "test_local_creation_date_kanjis_file",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalCreations.test_local_creation_date_hiraganas_file": {
            "name": "test_local_creation_date_hiraganas_file",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalCreations.test_local_file_creation_on_file_not_found": {
            "name": "test_local_file_creation_on_file_not_found",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalCreations.test_local_creation_with_obsolete_xattr": {
            "name": "test_local_creation_with_obsolete_xattr",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalCreations.recovery_scenario": {
            "name": "recovery_scenario",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cleanup": [
                    "bool"
                ]
            }
        },
        "TestLocalCreations.test_local_creation_with_files_existant_without_xattrs": {
            "name": "test_local_creation_with_files_existant_without_xattrs",
            "location": 564,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalCreations.test_local_creation_with_files_existant_with_xattr": {
            "name": "test_local_creation_with_files_existant_with_xattr",
            "location": 568,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalCreations.recovery_scenario.download": {
            "name": "download",
            "location": 538,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_local_deletion.py": {
        "TestLocalDeletion.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalDeletion.test_untrash_file": {
            "name": "test_untrash_file",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalDeletion.test_untrash_file_with_rename": {
            "name": "test_untrash_file_with_rename",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalDeletion.test_move_untrash_file_on_parent": {
            "name": "test_move_untrash_file_on_parent",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalDeletion.test_move_untrash_file_on_parent_with_no_rights": {
            "name": "test_move_untrash_file_on_parent_with_no_rights",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalDeletion.test_move_untrash_file_on_parent_with_no_rights_on_destination": {
            "name": "test_move_untrash_file_on_parent_with_no_rights_on_destination",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalDeletion.test_untrash_file_on_delete_parent": {
            "name": "test_untrash_file_on_delete_parent",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalDeletion.test_trash_file_then_parent": {
            "name": "test_trash_file_then_parent",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalDeletion.test_trash_file_should_respect_deletion_behavior_unsync": {
            "name": "test_trash_file_should_respect_deletion_behavior_unsync",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalDeletion.test_trash_file_should_respect_deletion_behavior_delete_server": {
            "name": "test_trash_file_should_respect_deletion_behavior_delete_server",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_local_filter.py": {
        "TestLocalFilter.test_synchronize_local_filter": {
            "name": "test_synchronize_local_filter",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalFilter.test_synchronize_local_office_temp": {
            "name": "test_synchronize_local_office_temp",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalFilter.test_synchronize_local_filter_with_move": {
            "name": "test_synchronize_local_filter_with_move",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalFilter.test_synchronize_local_filter_with_remote_trash": {
            "name": "test_synchronize_local_filter_with_remote_trash",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_local_move_and_rename.py": {
        "TestLocalMoveAndRename.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalMoveAndRename.test_local_rename_folder_while_creating": {
            "name": "test_local_rename_folder_while_creating",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalMoveAndRename.test_local_rename_file_while_creating": {
            "name": "test_local_rename_file_while_creating",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalMoveAndRename.test_local_rename_file_while_creating_before_marker": {
            "name": "test_local_rename_file_while_creating_before_marker",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalMoveAndRename.test_local_rename_file_while_creating_after_marker": {
            "name": "test_local_rename_file_while_creating_after_marker",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalMoveAndRename.test_replace_file": {
            "name": "test_replace_file",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalMoveAndRename.test_local_rename_file": {
            "name": "test_local_rename_file",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalMoveAndRename.test_local_rename_file_uppercase_stopped": {
            "name": "test_local_rename_file_uppercase_stopped",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalMoveAndRename.test_local_rename_file_uppercase": {
            "name": "test_local_rename_file_uppercase",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalMoveAndRename.test_local_move_file": {
            "name": "test_local_move_file",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalMoveAndRename.test_local_move_file_rollback": {
            "name": "test_local_move_file_rollback",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalMoveAndRename.test_local_move_and_rename_file": {
            "name": "test_local_move_and_rename_file",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalMoveAndRename.test_local_rename_folder": {
            "name": "test_local_rename_folder",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalMoveAndRename.test_local_rename_folder_while_suspended": {
            "name": "test_local_rename_folder_while_suspended",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalMoveAndRename.test_local_rename_file_after_create": {
            "name": "test_local_rename_file_after_create",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalMoveAndRename.test_local_rename_file_after_create_detected": {
            "name": "test_local_rename_file_after_create_detected",
            "location": 478,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalMoveAndRename.test_local_move_folder": {
            "name": "test_local_move_folder",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalMoveAndRename.test_concurrent_local_rename_folder": {
            "name": "test_concurrent_local_rename_folder",
            "location": 547,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalMoveAndRename.test_local_replace": {
            "name": "test_local_replace",
            "location": 592,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalMoveAndRename.test_local_rename_sync_root_folder": {
            "name": "test_local_rename_sync_root_folder",
            "location": 624,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalMoveAndRename.test_local_move_with_remote_error": {
            "name": "test_local_move_with_remote_error",
            "location": 653,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalMoveAndRename.test_local_rename_folder_while_creating.update_remote_state": {
            "name": "update_remote_state",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "row": []
            }
        },
        "TestLocalMoveAndRename.test_local_rename_file_while_creating.set_remote_id": {
            "name": "set_remote_id",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "ref": [],
                "remote_id": [],
                "name": [
                    "typing.Text"
                ]
            }
        },
        "TestLocalMoveAndRename.test_local_rename_file_while_creating_before_marker.set_remote_id": {
            "name": "set_remote_id",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "ref": [
                    "str",
                    "int"
                ],
                "remote_id": [
                    "str",
                    "bool"
                ],
                "name": [
                    "Text",
                    "str",
                    "bool"
                ]
            }
        },
        "TestLocalMoveAndRename.test_local_rename_file_while_creating_after_marker.update_remote_state": {
            "name": "update_remote_state",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "row": [
                    "str",
                    "Iterable[List[str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestLocalMoveAndRename.test_local_move_file_rollback.rename": {
            "name": "rename",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestLocalMoveAndRename.test_local_move_file_rollback.allow_rollback": {
            "name": "allow_rollback",
            "location": 340,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "TestLocalMoveAndRename.test_local_rename_file_after_create_detected.insert_local_state": {
            "name": "insert_local_state",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "info": [
                    "List[str]",
                    "List[Dict[str, str]]",
                    "str",
                    "Dict[str, Any]",
                    "List[Tuple[str, str]]",
                    "Callable[[str], str]"
                ],
                "parent_path": [
                    "bool",
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_local_move_folders.py": {
        "TestLocalMoveFolders._setup": {
            "name": "_setup",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int"
                ],
                "wait_for_sync": [
                    "bool"
                ]
            }
        },
        "TestLocalMoveFolders.tearDown": {
            "name": "tearDown",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalMoveFolders.test_local_move_folder_with_files": {
            "name": "test_local_move_folder_with_files",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalMoveFolders.test_local_move_folder_both_sides_while_stopped": {
            "name": "test_local_move_folder_both_sides_while_stopped",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalMoveFolders.test_local_move_folder_both_sides_while_unbinded": {
            "name": "test_local_move_folder_both_sides_while_unbinded",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalMoveFolders._test_local_move_folder_both_sides": {
            "name": "_test_local_move_folder_both_sides",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unbind": []
            }
        },
        "TestLocalMoveFolders.test_local_move_folder": {
            "name": "test_local_move_folder",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalMoveFolders.test_local_move_root_folder_with_unicode": {
            "name": "test_local_move_root_folder_with_unicode",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_local_paste.py": {
        "TestLocalPaste.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalPaste.tearDown": {
            "name": "tearDown",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalPaste.test_copy_paste_empty_folder_first": {
            "name": "test_copy_paste_empty_folder_first",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalPaste.test_copy_paste_empty_folder_last": {
            "name": "test_copy_paste_empty_folder_last",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalPaste._check_integrity": {
            "name": "_check_integrity",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalPaste.test_copy_paste_same_file": {
            "name": "test_copy_paste_same_file",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_local_share_move_folders.py": {
        "TestLocalShareMoveFolders.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalShareMoveFolders._check_local": {
            "name": "_check_local",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "List[Tuple[float, str]]",
                    "List[Tuple[bool, str]]",
                    "str",
                    "bool"
                ]
            }
        },
        "TestLocalShareMoveFolders._check_remote": {
            "name": "_check_remote",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestLocalShareMoveFolders.test_local_share_move_folder_with_files": {
            "name": "test_local_share_move_folder_with_files",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalShareMoveFolders.test_local_share_move_folder_with_files.get_changes": {
            "name": "get_changes",
            "location": 87,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_local_storage_issue.py": {
        "TestLocalStorageIssue.test_local_invalid_timestamp": {
            "name": "test_local_invalid_timestamp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStorageIssue.test_synchronize_no_space_left_on_device": {
            "name": "test_synchronize_no_space_left_on_device",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_long_path.py": {
        "TestLongPath.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLongPath.tearDown": {
            "name": "tearDown",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLongPath.test_long_path": {
            "name": "test_long_path",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLongPath.test_setup_on_long_path": {
            "name": "test_setup_on_long_path",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLongFileName.test_long_file_name": {
            "name": "test_long_file_name",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLongFileName.test_long_file_name.error": {
            "name": "error",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_mac_local_client.py": {
        "TestMacSpecific.test_finder_in_use": {
            "name": "test_finder_in_use",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_multiple_files.py": {
        "TestMultipleFiles.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultipleFiles.test_move_and_copy_paste_folder_original_location_from_child_stopped": {
            "name": "test_move_and_copy_paste_folder_original_location_from_child_stopped",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultipleFiles.test_move_and_copy_paste_folder_original_location_from_child": {
            "name": "test_move_and_copy_paste_folder_original_location_from_child",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultipleFiles._move_and_copy_paste_folder_original_location_from_child": {
            "name": "_move_and_copy_paste_folder_original_location_from_child",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stopped": [
                    "bool",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "TestMultipleFiles._move_and_copy_paste_folder": {
            "name": "_move_and_copy_paste_folder",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder_1": [
                    "pathlib2.Path",
                    "str"
                ],
                "folder_2": [
                    "str",
                    "dict",
                    "int"
                ],
                "target_folder": [
                    "str",
                    "bytes",
                    "pathlib.Path",
                    "IO[Any]"
                ],
                "stopped": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "TestMultipleFiles.test_move_and_copy_paste_folder_original_location": {
            "name": "test_move_and_copy_paste_folder_original_location",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultipleFiles.test_move_and_copy_paste_folder_original_location_stopped": {
            "name": "test_move_and_copy_paste_folder_original_location_stopped",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultipleFiles.test_move_and_copy_paste_folder_new_location": {
            "name": "test_move_and_copy_paste_folder_new_location",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_nxdrive_1033.py": {
        "Test.test_nxdrive_1033": {
            "name": "test_nxdrive_1033",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_nxdrive_903.py": {
        "Test.test_nxdrive_903": {
            "name": "test_nxdrive_903",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_nxdrive_947.py": {
        "Test._setup": {
            "name": "_setup",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int",
                    "List[int]",
                    "List[T]",
                    "List[str]",
                    "Sequence"
                ],
                "wait_for_sync": [
                    "bool",
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "Test.tearDown": {
            "name": "tearDown",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.test_nxdrive_947": {
            "name": "test_nxdrive_947",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_permission_hierarchy.py": {
        "TestPermissionHierarchy.setup_method": {
            "name": "setup_method",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "BinaryIO",
                    "int"
                ]
            }
        },
        "TestPermissionHierarchy.teardown_method": {
            "name": "teardown_method",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "bool",
                    "List[Dict[str, Any]]",
                    "List[int]",
                    "Type['DataclassT']"
                ]
            }
        },
        "TestPermissionHierarchy.test_sync_delete_root": {
            "name": "test_sync_delete_root",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPermissionHierarchy2.setup_method": {
            "name": "setup_method",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "BinaryIO",
                    "int"
                ]
            }
        },
        "TestPermissionHierarchy2.teardown_method": {
            "name": "teardown_method",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "bool",
                    "List[Dict[str, Any]]",
                    "List[int]",
                    "Type['DataclassT']"
                ]
            }
        },
        "TestPermissionHierarchy2.test_permission_awareness_after_resume": {
            "name": "test_permission_awareness_after_resume",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPermissionHierarchy2.test_sync_delete_shared_folder": {
            "name": "test_sync_delete_shared_folder",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPermissionHierarchy2.test_sync_unshared_folder": {
            "name": "test_sync_unshared_folder",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPermissionHierarchy2.test_sync_move_permission_removal": {
            "name": "test_sync_move_permission_removal",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_readonly.py": {
        "touch": {
            "name": "touch",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]",
                    "Path",
                    "Optional[Any]"
                ]
            }
        },
        "TestReadOnly.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadOnly.test_file_add": {
            "name": "test_file_add",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadOnly.test_file_content_change": {
            "name": "test_file_content_change",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadOnly.test_file_delete": {
            "name": "test_file_delete",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadOnly.test_file_move_from_ro_to_ro": {
            "name": "test_file_move_from_ro_to_ro",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadOnly.test_file_move_from_ro_to_rw": {
            "name": "test_file_move_from_ro_to_rw",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadOnly.test_file_move_from_rw_to_ro": {
            "name": "test_file_move_from_rw_to_ro",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadOnly.test_file_rename": {
            "name": "test_file_rename",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadOnly.test_folder_add": {
            "name": "test_folder_add",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadOnly.test_folder_delete": {
            "name": "test_folder_delete",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadOnly.test_folder_move_from_ro_to_ro": {
            "name": "test_folder_move_from_ro_to_ro",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadOnly.test_folder_move_from_ro_to_rw": {
            "name": "test_folder_move_from_ro_to_rw",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadOnly.test_folder_move_from_rw_to_ro": {
            "name": "test_folder_move_from_rw_to_ro",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadOnly.test_folder_rename": {
            "name": "test_folder_rename",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadOnly.test_nxdrive_836": {
            "name": "test_nxdrive_836",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadOnly2.test_document_locked": {
            "name": "test_document_locked",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_reinit_database.py": {
        "TestReinitDatabase.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReinitDatabase._check_states": {
            "name": "_check_states",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReinitDatabase._check_conflict_detection": {
            "name": "_check_conflict_detection",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReinitDatabase.test_synchronize_folderish_and_same_digest": {
            "name": "test_synchronize_folderish_and_same_digest",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReinitDatabase.test_synchronize_remote_change": {
            "name": "test_synchronize_remote_change",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReinitDatabase.test_synchronize_local_change": {
            "name": "test_synchronize_local_change",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReinitDatabase.test_synchronize_remote_and_local_change": {
            "name": "test_synchronize_remote_and_local_change",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_remote_changes.py": {
        "TestRemoteChanges.setup_method": {
            "name": "setup_method",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ]
            }
        },
        "TestRemoteChanges.get_changes": {
            "name": "get_changes",
            "location": 22,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteChanges.test_changes_root_registrations": {
            "name": "test_changes_root_registrations",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteChanges.test_sync_root_parent_registration": {
            "name": "test_sync_root_parent_registration",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteChanges.test_lock_unlock_events": {
            "name": "test_lock_unlock_events",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_remote_client.py": {
        "TestRemoteFileSystemClient.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteFileSystemClient.test_get_fs_info": {
            "name": "test_get_fs_info",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteFileSystemClient.test_get_content": {
            "name": "test_get_content",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteFileSystemClient.test_stream_content": {
            "name": "test_stream_content",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteFileSystemClient.test_get_fs_children": {
            "name": "test_get_fs_children",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteFileSystemClient.test_scroll_descendants": {
            "name": "test_scroll_descendants",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteFileSystemClient.test_make_folder": {
            "name": "test_make_folder",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteFileSystemClient.test_make_file": {
            "name": "test_make_file",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteFileSystemClient.test_make_file_custom_encoding": {
            "name": "test_make_file_custom_encoding",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteFileSystemClient.test_update_content": {
            "name": "test_update_content",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteFileSystemClient.test_delete": {
            "name": "test_delete",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteFileSystemClient.test_exists": {
            "name": "test_exists",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteFileSystemClient.test_get_fs_item": {
            "name": "test_get_fs_item",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteFileSystemClient.test_streaming_upload": {
            "name": "test_streaming_upload",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteFileSystemClient.test_mime_type_doc_type_association": {
            "name": "test_mime_type_doc_type_association",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteFileSystemClient.test_unregister_nested_roots": {
            "name": "test_unregister_nested_roots",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteFileSystemClient.test_lock_unlock": {
            "name": "test_lock_unlock",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteFileSystemClient._get_digest": {
            "name": "_get_digest",
            "location": 463,
            "return": [
                "str",
                "pathlib.Path",
                "bool"
            ],
            "arguments": {
                "algorithm": [
                    "str"
                ],
                "content": [
                    "bytes",
                    "str",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "TestRemoteFileSystemClient2.setUp": {
            "name": "setUp",
            "location": 471,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteFileSystemClient2.test_modification_flags_locked_document": {
            "name": "test_modification_flags_locked_document",
            "location": 481,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_remote_deletion.py": {
        "TestRemoteDeletion.test_synchronize_remote_deletion": {
            "name": "test_synchronize_remote_deletion",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteDeletion.test_synchronize_remote_deletion_while_upload": {
            "name": "test_synchronize_remote_deletion_while_upload",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteDeletion.test_synchronize_remote_deletion_while_download_file": {
            "name": "test_synchronize_remote_deletion_while_download_file",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteDeletion.test_synchronize_remote_deletion_with_close_name": {
            "name": "test_synchronize_remote_deletion_with_close_name",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteDeletion.test_synchronize_remote_deletion_with_wrong_local_remote_id": {
            "name": "test_synchronize_remote_deletion_with_wrong_local_remote_id",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteDeletion.test_synchronize_local_folder_rename_remote_deletion": {
            "name": "test_synchronize_local_folder_rename_remote_deletion",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteDeletion2.test_synchronize_local_folder_lost_permission": {
            "name": "test_synchronize_local_folder_lost_permission",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteDeletion.test_synchronize_remote_deletion_while_upload.callback": {
            "name": "callback",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "uploader": []
            }
        },
        "TestRemoteDeletion.test_synchronize_remote_deletion_while_download_file.callback": {
            "name": "callback",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "uploader": [
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_remote_move_and_rename.py": {
        "TestRemoteMoveAndRename.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteMoveAndRename.get_state": {
            "name": "get_state",
            "location": 62,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "remote": [
                    "int",
                    "Dict[int, dict]",
                    "engine.dao.sqlite.EngineDAO"
                ]
            }
        },
        "TestRemoteMoveAndRename.test_remote_rename_file": {
            "name": "test_remote_rename_file",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteMoveAndRename.test_remote_rename_update_content_file": {
            "name": "test_remote_rename_update_content_file",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteMoveAndRename.test_remote_move_file": {
            "name": "test_remote_move_file",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteMoveAndRename.test_remote_move_and_rename_file": {
            "name": "test_remote_move_and_rename_file",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteMoveAndRename.test_remote_rename_folder": {
            "name": "test_remote_rename_folder",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteMoveAndRename.test_remote_rename_case_folder": {
            "name": "test_remote_rename_case_folder",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteMoveAndRename.test_remote_rename_case_folder_stopped": {
            "name": "test_remote_rename_case_folder_stopped",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteMoveAndRename.test_remote_move_folder": {
            "name": "test_remote_move_folder",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteMoveAndRename.test_concurrent_remote_rename_folder": {
            "name": "test_concurrent_remote_rename_folder",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteMoveAndRename.test_remote_rename_sync_root_folder": {
            "name": "test_remote_rename_sync_root_folder",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteMoveAndRename.test_remote_move_to_non_sync_root": {
            "name": "test_remote_move_to_non_sync_root",
            "location": 526,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSyncRemoteMoveAndRename.setUp": {
            "name": "setUp",
            "location": 578,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSyncRemoteMoveAndRename.test_synchronize_remote_move_file_while_accessing": {
            "name": "test_synchronize_remote_move_file_while_accessing",
            "location": 587,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSyncRemoteMoveAndRename.test_synchronize_remote_move_while_download_file": {
            "name": "test_synchronize_remote_move_while_download_file",
            "location": 613,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSyncRemoteMoveAndRename.test_synchronize_remote_rename_file_while_accessing": {
            "name": "test_synchronize_remote_rename_file_while_accessing",
            "location": 647,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSyncRemoteMoveAndRename.test_synchronize_remote_rename_while_download_file": {
            "name": "test_synchronize_remote_rename_while_download_file",
            "location": 673,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSyncRemoteMoveAndRename.test_synchronize_remote_rename_while_upload": {
            "name": "test_synchronize_remote_rename_while_upload",
            "location": 699,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSyncRemoteMoveAndRename._remote_rename_while_upload": {
            "name": "_remote_rename_while_upload",
            "location": 709,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteMove.test_remote_create_and_move": {
            "name": "test_remote_create_and_move",
            "location": 736,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteFiles.test_remote_create_files_upper_lower_cases": {
            "name": "test_remote_create_files_upper_lower_cases",
            "location": 765,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteFiles.test_remote_create_folders_upper_lower_cases": {
            "name": "test_remote_create_folders_upper_lower_cases",
            "location": 802,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSyncRemoteMoveAndRename.test_synchronize_remote_move_while_download_file.callback": {
            "name": "callback",
            "location": 621,
            "return": [
                "None"
            ],
            "arguments": {
                "uploader": []
            }
        },
        "TestSyncRemoteMoveAndRename.test_synchronize_remote_rename_while_download_file.callback": {
            "name": "callback",
            "location": 677,
            "return": [
                "None"
            ],
            "arguments": {
                "uploader": []
            }
        },
        "TestSyncRemoteMoveAndRename._remote_rename_while_upload.callback": {
            "name": "callback",
            "location": 712,
            "return": [
                "None"
            ],
            "arguments": {
                "uploader": [
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_security_updates.py": {
        "TestSecurityUpdates.test_synchronize_denying_read_access": {
            "name": "test_synchronize_denying_read_access",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSecurityUpdates.test_synchronize_denying_read_access_local_modification": {
            "name": "test_synchronize_denying_read_access_local_modification",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSecurityUpdates._set_read_permission": {
            "name": "_set_read_permission",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "dict",
                    "Optional[Callable]"
                ],
                "doc_path": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[List]"
                ],
                "grant": [
                    "str",
                    "dict",
                    "Optional[Callable]"
                ]
            }
        },
        "TestSecurityUpdates._check_pair_state": {
            "name": "_check_pair_state",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "local_path": [
                    "pathlib.Path",
                    "cerulean.Path",
                    "str",
                    "list",
                    "Optional[str]"
                ],
                "pair_state": [
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_shared_folders.py": {
        "TestSharedFolders.test_move_sync_root_child_to_user_workspace": {
            "name": "test_move_sync_root_child_to_user_workspace",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSharedFolders.test_local_changes_while_stopped": {
            "name": "test_local_changes_while_stopped",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSharedFolders.test_local_changes_while_unbinded": {
            "name": "test_local_changes_while_unbinded",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSharedFolders._test_local_changes_while_not_running": {
            "name": "_test_local_changes_while_not_running",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unbind": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "TestSharedFolders.test_conflict_resolution_with_renaming": {
            "name": "test_conflict_resolution_with_renaming",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_special_characters.py": {
        "TestSpecialCharacters.test_create_local": {
            "name": "test_create_local",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpecialCharacters.test_rename_local": {
            "name": "test_rename_local",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpecialCharacters.test_create_remote": {
            "name": "test_create_remote",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_special_files.py": {
        "TestSpecialFiles.test_keynote": {
            "name": "test_keynote",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_synchronization.py": {
        "TestSynchronizationDisabled.test_basic_synchronization": {
            "name": "test_basic_synchronization",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronization.test_binding_initialization_and_first_sync": {
            "name": "test_binding_initialization_and_first_sync",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronization.test_binding_synchronization_empty_start": {
            "name": "test_binding_synchronization_empty_start",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronization.test_single_quote_escaping": {
            "name": "test_single_quote_escaping",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronization.test_invalid_credentials": {
            "name": "test_invalid_credentials",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronization.test_synchronization_modification_on_created_file": {
            "name": "test_synchronization_modification_on_created_file",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronization.test_basic_synchronization": {
            "name": "test_basic_synchronization",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronization.test_docpair_export": {
            "name": "test_docpair_export",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronization.test_synchronization_skip_errors": {
            "name": "test_synchronization_skip_errors",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronization.test_synchronization_give_up": {
            "name": "test_synchronization_give_up",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronization.test_synchronization_offline": {
            "name": "test_synchronization_offline",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronization.test_create_content_in_readonly_area": {
            "name": "test_create_content_in_readonly_area",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronization.test_synchronize_special_filenames": {
            "name": "test_synchronize_special_filenames",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronization.test_synchronize_error_remote": {
            "name": "test_synchronize_error_remote",
            "location": 604,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronization.test_synchronize_deleted_blob": {
            "name": "test_synchronize_deleted_blob",
            "location": 638,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronization.test_synchronize_deletion": {
            "name": "test_synchronize_deletion",
            "location": 657,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronization.test_synchronize_windows_foldername_endswith_space": {
            "name": "test_synchronize_windows_foldername_endswith_space",
            "location": 708,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronization.test_409_conflict": {
            "name": "test_409_conflict",
            "location": 731,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronization.test_416_range_past_eof": {
            "name": "test_416_range_past_eof",
            "location": 778,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronization.test_local_modify_offline": {
            "name": "test_local_modify_offline",
            "location": 810,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronization.test_unsynchronize_accentued_document": {
            "name": "test_unsynchronize_accentued_document",
            "location": 828,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronization.test_synchronize_document_with_pattern": {
            "name": "test_synchronize_document_with_pattern",
            "location": 845,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronization.test_rename_duplicates": {
            "name": "test_rename_duplicates",
            "location": 856,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronization.test_local_creation_copying_from_sibling": {
            "name": "test_local_creation_copying_from_sibling",
            "location": 897,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronization2.test_conflict_detection": {
            "name": "test_conflict_detection",
            "location": 932,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronization2.test_rename_and_create_same_folder_not_running": {
            "name": "test_rename_and_create_same_folder_not_running",
            "location": 997,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronization2.test_rename_and_create_same_file_not_running": {
            "name": "test_rename_and_create_same_file_not_running",
            "location": 1068,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronization.test_409_conflict._raise_for_second_file_only": {
            "name": "_raise_for_second_file_only",
            "location": 744,
            "return": [],
            "arguments": {}
        },
        "TestSynchronization.test_local_creation_copying_from_sibling.stream_content": {
            "name": "stream_content",
            "location": 913,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_synchronization_dedup.py": {
        "TestSynchronizationDedup.test_children_of_folder_in_dedup_error": {
            "name": "test_children_of_folder_in_dedup_error",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronizationDedupCaseSensitive.setUp": {
            "name": "setUp",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronizationDedupCaseSensitive.check": {
            "name": "check",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "count_root": [],
                "count_folder": [],
                "count_fixed_folder": [
                    "int"
                ]
            }
        },
        "TestSynchronizationDedupCaseSensitive.test_file_sync_under_dedup_shared_folders_rename_remotely_dupe": {
            "name": "test_file_sync_under_dedup_shared_folders_rename_remotely_dupe",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronizationDedupCaseSensitive.test_file_sync_under_dedup_shared_folders_rename_remotely": {
            "name": "test_file_sync_under_dedup_shared_folders_rename_remotely",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronizationDedupCaseSensitive.test_file_sync_under_dedup_shared_folders_delete_remotely": {
            "name": "test_file_sync_under_dedup_shared_folders_delete_remotely",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronizationDedupCaseSensitive.test_file_sync_under_dedup_shared_folders_delete_remotely_dupe": {
            "name": "test_file_sync_under_dedup_shared_folders_delete_remotely_dupe",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronizationDedupCaseSensitive.test_file_sync_under_dedup_shared_folders_delete_locally": {
            "name": "test_file_sync_under_dedup_shared_folders_delete_locally",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronizationDedupCaseSensitive.test_file_sync_under_dedup_shared_folders_rename_locally": {
            "name": "test_file_sync_under_dedup_shared_folders_rename_locally",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_synchronization_suspend.py": {
        "TestSynchronizationSuspend.test_basic_synchronization_suspend": {
            "name": "test_basic_synchronization_suspend",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronizationSuspend.test_synchronization_local_watcher_paused_when_offline": {
            "name": "test_synchronization_local_watcher_paused_when_offline",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronizationSuspend.test_synchronization_end_with_children_ignore_parent": {
            "name": "test_synchronization_end_with_children_ignore_parent",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynchronizationSuspend.test_folder_renaming_while_offline": {
            "name": "test_folder_renaming_while_offline",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_sync_roots.py": {
        "TestSyncRoots.test_register_sync_root_parent": {
            "name": "test_register_sync_root_parent",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_transfer.py": {
        "TestDownload.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDownload.tearDown": {
            "name": "tearDown",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDownload.test_pause_download_manually": {
            "name": "test_pause_download_manually",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDownload.test_pause_download_automatically": {
            "name": "test_pause_download_automatically",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDownload.test_modifying_paused_download": {
            "name": "test_modifying_paused_download",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDownload.test_deleting_paused_download": {
            "name": "test_deleting_paused_download",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.setUp": {
            "name": "setUp",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.tearDown": {
            "name": "tearDown",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_pause_upload_manually": {
            "name": "test_pause_upload_manually",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_pause_upload_automatically": {
            "name": "test_pause_upload_automatically",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_modifying_paused_upload": {
            "name": "test_modifying_paused_upload",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_deleting_paused_upload": {
            "name": "test_deleting_paused_upload",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_not_server_error_upload": {
            "name": "test_not_server_error_upload",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_server_error_but_upload_ok": {
            "name": "test_server_error_but_upload_ok",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_server_error_but_upload_ok_idempotent_call": {
            "name": "test_server_error_but_upload_ok_idempotent_call",
            "location": 517,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_server_error_upload": {
            "name": "test_server_error_upload",
            "location": 575,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_server_error_upload_invalid_batch_response": {
            "name": "test_server_error_upload_invalid_batch_response",
            "location": 618,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_server_error_upload_invalid_chunk_response": {
            "name": "test_server_error_upload_invalid_chunk_response",
            "location": 657,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_chunk_upload_error": {
            "name": "test_chunk_upload_error",
            "location": 691,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_chunk_upload_error_then_server_error_at_linking": {
            "name": "test_chunk_upload_error_then_server_error_at_linking",
            "location": 728,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_app_crash_simulation": {
            "name": "test_app_crash_simulation",
            "location": 832,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDownload.test_pause_download_manually.callback": {
            "name": "callback",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "downloader": []
            }
        },
        "TestDownload.test_pause_download_automatically.callback": {
            "name": "callback",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "downloader": []
            }
        },
        "TestDownload.test_modifying_paused_download.callback": {
            "name": "callback",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "downloader": []
            }
        },
        "TestDownload.test_deleting_paused_download.callback": {
            "name": "callback",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "downloader": []
            }
        },
        "TestUpload.test_pause_upload_manually.callback": {
            "name": "callback",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "uploader": []
            }
        },
        "TestUpload.test_pause_upload_automatically.callback": {
            "name": "callback",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "uploader": []
            }
        },
        "TestUpload.test_modifying_paused_upload.callback": {
            "name": "callback",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "uploader": []
            }
        },
        "TestUpload.test_deleting_paused_upload.callback": {
            "name": "callback",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "uploader": []
            }
        },
        "TestUpload.test_not_server_error_upload.upload": {
            "name": "upload",
            "location": 417,
            "return": [],
            "arguments": {}
        },
        "TestUpload.test_server_error_but_upload_ok.upload": {
            "name": "upload",
            "location": 485,
            "return": [],
            "arguments": {}
        },
        "TestUpload.test_server_error_but_upload_ok_idempotent_call.upload": {
            "name": "upload",
            "location": 532,
            "return": [],
            "arguments": {}
        },
        "TestUpload.test_server_error_upload.upload": {
            "name": "upload",
            "location": 585,
            "return": [],
            "arguments": {}
        },
        "TestUpload.test_chunk_upload_error.callback": {
            "name": "callback",
            "location": 694,
            "return": [
                "None"
            ],
            "arguments": {
                "uploader": []
            }
        },
        "TestUpload.test_chunk_upload_error_then_server_error_at_linking.callback": {
            "name": "callback",
            "location": 820,
            "return": [
                "None"
            ],
            "arguments": {
                "uploader": []
            }
        },
        "TestUpload.test_chunk_upload_error_then_server_error_at_linking.upload": {
            "name": "upload",
            "location": 799,
            "return": [],
            "arguments": {}
        },
        "TestUpload.test_app_crash_simulation.callback": {
            "name": "callback",
            "location": 842,
            "return": [
                "None"
            ],
            "arguments": {
                "uploader": []
            }
        },
        "TestUpload.test_not_server_error_upload.BadUploader.link_blob_to_doc": {
            "name": "link_blob_to_doc",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_server_error_but_upload_ok.BadUploader.link_blob_to_doc": {
            "name": "link_blob_to_doc",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_server_error_but_upload_ok_idempotent_call.SerialUploader.link_blob_to_doc": {
            "name": "link_blob_to_doc",
            "location": 526,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_server_error_upload.BadUploader.link_blob_to_doc": {
            "name": "link_blob_to_doc",
            "location": 581,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_chunk_upload_error_then_server_error_at_linking.BadUploader.link_blob_to_doc": {
            "name": "link_blob_to_doc",
            "location": 795,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_versioning.py": {
        "TestVersioning.test_version_restore": {
            "name": "test_version_restore",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVersioning2.test_versioning": {
            "name": "test_versioning",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVersioning2._assert_version": {
            "name": "_assert_version",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "int",
                    "list",
                    "bytes",
                    "List[str]"
                ],
                "major": [
                    "int",
                    "list",
                    "bytes",
                    "List[str]"
                ],
                "minor": [
                    "int",
                    "list",
                    "bytes",
                    "List[str]"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_volume.py": {
        "configure_logs": {
            "name": "configure_logs",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_name": {
            "name": "get_name",
            "location": 47,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "folder": [
                    "dict",
                    "pypi2nix.path.Path",
                    "int",
                    "Iterable[dict]"
                ],
                "depth": [
                    "str",
                    "int",
                    "Type[Any]",
                    "IO",
                    "complex",
                    "Dict[str, Any]"
                ],
                "number": [
                    "str",
                    "int",
                    "Type[Any]",
                    "IO",
                    "complex",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_path": {
            "name": "get_path",
            "location": 53,
            "return": [
                "str",
                "int",
                "bool",
                "pathlib.Path"
            ],
            "arguments": {
                "folder": [
                    "pathlib2.Path",
                    "str",
                    "pathlib.Path",
                    "bool",
                    "int"
                ],
                "depth": [
                    "str",
                    "int",
                    "bool",
                    "pathlib.Path"
                ],
                "number": [
                    "Union[str, pathlib.Path, None]",
                    "bool",
                    "str",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "TestVolume.create_tree": {
            "name": "create_tree",
            "location": 67,
            "return": [
                "int",
                "AsyncGenerator",
                "bool",
                "constants.Rank"
            ],
            "arguments": {
                "self": [],
                "folders": [
                    "Optional[str]",
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "pathlib.Path",
                    "List[str]"
                ],
                "files": [
                    "str",
                    "bool",
                    "Union[str, os.PathLike]",
                    "pathlib.Path"
                ],
                "depth": [
                    "pathlib.Path",
                    "Iterable[str]",
                    "Optional[str]",
                    "Union[str, pathlib.Path]",
                    "str"
                ],
                "parent": [
                    "Optional[str]",
                    "int",
                    "str",
                    "pathlib.Path",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "TestVolume.create": {
            "name": "create",
            "location": 94,
            "return": [
                "float",
                "bool",
                "Union[Sequence, 'SweepFixedValues']",
                "int"
            ],
            "arguments": {
                "self": [],
                "stopped": [
                    "bool",
                    "Dict[str,int]",
                    "str",
                    "Dict[str,Any]",
                    "Optional[List[str]]"
                ],
                "wait_for_sync": [
                    "bool",
                    "Dict[str,int]",
                    "str",
                    "Dict[str,Any]",
                    "Optional[List[str]]"
                ]
            }
        },
        "TestVolume._check_folder": {
            "name": "_check_folder",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "path.Path",
                    "pathlib.Path",
                    "norfs.fs.base.Path"
                ],
                "removed": [
                    "List",
                    "bool",
                    "str",
                    "Path",
                    "Iterable[str]"
                ],
                "added": [
                    "List",
                    "bool",
                    "str",
                    "Path",
                    "Iterable[str]"
                ]
            }
        },
        "TestVolume.test_moves_while_creating": {
            "name": "test_moves_while_creating",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVolume.test_moves": {
            "name": "test_moves",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVolume.test_moves_stopped": {
            "name": "test_moves_stopped",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVolume.test_moves_while_creating_stopped": {
            "name": "test_moves_while_creating_stopped",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVolume._moves": {
            "name": "_moves",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "str",
                    "Sequence[str]",
                    "pathlib.Path"
                ],
                "stopped": [
                    "bool",
                    "int",
                    "T",
                    "Optional[Dict[str,Any]]",
                    "List[str]"
                ]
            }
        },
        "TestVolume.test_copies": {
            "name": "test_copies",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVolume.test_copies_stopped": {
            "name": "test_copies_stopped",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVolume.test_copies_while_creating": {
            "name": "test_copies_while_creating",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVolume.test_copies_while_creating_stopped": {
            "name": "test_copies_while_creating_stopped",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVolume._copies": {
            "name": "_copies",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "str",
                    "Sequence[str]",
                    "pathlib.Path"
                ],
                "stopped": [
                    "bool",
                    "int",
                    "T",
                    "Optional[Dict[str,Any]]",
                    "List[str]"
                ]
            }
        },
        "TestVolumeRemoteScan.test_remote_scan": {
            "name": "test_remote_scan",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/test_watchers.py": {
        "copy_queue": {
            "name": "copy_queue",
            "location": 15,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "queue": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestWatchers.get_local_client": {
            "name": "get_local_client",
            "location": 22,
            "return": [
                "LocalTest",
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Sequence[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestWatchers.make_local_tree": {
            "name": "make_local_tree",
            "location": 30,
            "return": [
                "Tuple[int]",
                "str",
                "Callable",
                "TextIO",
                "BinaryIO",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "None",
                    "pathlib.Path",
                    "str"
                ],
                "local_client": [
                    "str",
                    "None"
                ]
            }
        },
        "TestWatchers.get_full_queue": {
            "name": "get_full_queue",
            "location": 57,
            "return": [
                "List",
                "str",
                "bool",
                "Dict",
                "Set",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "str",
                    "Dict[str, Any]",
                    "Union[pathlib.Path, str]",
                    "bool"
                ],
                "dao": [
                    "None",
                    "str",
                    "Optional[int]",
                    "Iterable[T]"
                ]
            }
        },
        "TestWatchers.test_local_scan": {
            "name": "test_local_scan",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWatchers.test_reconcile_scan": {
            "name": "test_reconcile_scan",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWatchers.test_remote_scan": {
            "name": "test_remote_scan",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWatchers.test_local_watchdog_creation": {
            "name": "test_local_watchdog_creation",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWatchers._delete_folder_1": {
            "name": "_delete_folder_1",
            "location": 135,
            "return": [
                "pathlib.Path",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWatchers.test_local_watchdog_delete_non_synced": {
            "name": "test_local_watchdog_delete_non_synced",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWatchers.test_local_scan_delete_non_synced": {
            "name": "test_local_scan_delete_non_synced",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWatchers.test_local_watchdog_delete_synced": {
            "name": "test_local_watchdog_delete_synced",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWatchers.test_local_scan_delete_synced": {
            "name": "test_local_scan_delete_synced",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWatchers.test_local_scan_error": {
            "name": "test_local_scan_error",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWatchers.test_local_scan_encoding": {
            "name": "test_local_scan_encoding",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWatchers.test_watchdog_space_remover": {
            "name": "test_watchdog_space_remover",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWatchers.test_watchdog_encoding": {
            "name": "test_watchdog_encoding",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWatchers.test_watcher_remote_id_setter": {
            "name": "test_watcher_remote_id_setter",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWatchers.test_watcher_remote_id_setter_stopped": {
            "name": "test_watcher_remote_id_setter_stopped",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/old_functional/__init__.py": {
        "patch_nxdrive_objects": {
            "name": "patch_nxdrive_objects",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "make_tmp_file": {
            "name": "make_tmp_file",
            "location": 70,
            "return": [
                "pathlib.Path",
                "str",
                "bool"
            ],
            "arguments": {
                "folder": [
                    "pathlib.Path",
                    "str"
                ],
                "content": [
                    "bytes",
                    "str"
                ]
            }
        },
        "force_path": {
            "name": "force_path",
            "location": 95,
            "return": [
                "List[str]",
                "str",
                "Tuple[Any, Any, Any]",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "ref": [
                    "str",
                    "MutableMapping[str, Any]",
                    "pathlib.Path",
                    "TextIO",
                    "List[object]"
                ]
            }
        },
        "patch_nxdrive_objects.enable": {
            "name": "enable",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "patch_nxdrive_objects.dispose_all": {
            "name": "dispose_all",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "patch_nxdrive_objects.unbind_all": {
            "name": "unbind_all",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "patch_nxdrive_objects.requeue_errors": {
            "name": "requeue_errors",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalTest.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LocalTest.copy": {
            "name": "copy",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "srcref": [
                    "int",
                    "str"
                ],
                "dstref": [
                    "IO",
                    "int",
                    "str"
                ]
            }
        },
        "LocalTest.get_content": {
            "name": "get_content",
            "location": 111,
            "return": [
                "zerver.models.Realm",
                "str",
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "bytes",
                    "pathlib.Path"
                ]
            }
        },
        "LocalTest.has_folder_icon": {
            "name": "has_folder_icon",
            "location": 115,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalTest.set_folder_icon": {
            "name": "set_folder_icon",
            "location": 118,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "bytes",
                "raiden.utils.Signature"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalTest.abspath": {
            "name": "abspath",
            "location": 121,
            "return": [
                "Optional[int]",
                "Dict[str, int]",
                "str",
                "mode.utils.types.trees.NodeT"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "int",
                    "Optional[bool]",
                    "pathlib.Path"
                ]
            }
        },
        "LocalTest.delete_final": {
            "name": "delete_final",
            "location": 125,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "bytes"
                ]
            }
        },
        "LocalTest.exists": {
            "name": "exists",
            "location": 129,
            "return": [
                "Optional[int]",
                "Dict[str, int]",
                "str",
                "mode.utils.types.trees.NodeT"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "LocalTest.get_children_info": {
            "name": "get_children_info",
            "location": 133,
            "return": [
                "Optional[str]",
                "str",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "Callable[..., T]",
                    "Sequence[str]",
                    "Iterable[pathlib.Path]"
                ]
            }
        },
        "LocalTest.get_info": {
            "name": "get_info",
            "location": 137,
            "return": [
                "bool",
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "bool"
                ]
            }
        },
        "LocalTest.get_path": {
            "name": "get_path",
            "location": 141,
            "return": [
                "pathlib.PosixPath",
                "paradigm.catalog.Path",
                "pathlib.PurePath"
            ],
            "arguments": {
                "self": [],
                "abspath": [
                    "str",
                    "pathlib.Path",
                    "dict",
                    "int"
                ]
            }
        },
        "LocalTest.rename": {
            "name": "rename",
            "location": 145,
            "return": [
                "Iterable[str]",
                "str",
                "Dict[str, Any]",
                "Sequence[Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str"
                ],
                "to_name": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Dict[str, str]]",
                    "bytes",
                    "Callable[..., T]"
                ]
            }
        },
        "LocalTest.update_content": {
            "name": "update_content",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "tuple"
                ],
                "content": [
                    "str",
                    "Optional[Callable]",
                    "bytes"
                ],
                "xattr_names": [
                    "str",
                    "users.models.JustfixUser",
                    "Optional[str]"
                ]
            }
        },
        "LocalTest.make_folder": {
            "name": "make_folder",
            "location": 161,
            "return": [
                "str",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "bool",
                    "Callable[..., None]",
                    "Callable"
                ]
            }
        },
        "LocalTest.make_file": {
            "name": "make_file",
            "location": 165,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "pathlib.Path",
                    "str"
                ],
                "name": [
                    "str",
                    "pathlib.Path"
                ],
                "content": [
                    "bytes",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "LocalTest.get_new_file": {
            "name": "get_new_file",
            "location": 178,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "int"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "LocalTest.move": {
            "name": "move",
            "location": 182,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ],
                "new_parent_ref": [
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "LocalTest.delete": {
            "name": "delete",
            "location": 187,
            "return": [
                "bool",
                "str",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "bytes"
                ]
            }
        },
        "RemoteBase.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RemoteBase.fs_exists": {
            "name": "fs_exists",
            "location": 210,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "fs_item_id": [
                    "str",
                    "bytes",
                    "int",
                    "transfer.models.ShopID"
                ]
            }
        },
        "RemoteBase.get_children": {
            "name": "get_children",
            "location": 213,
            "return": [
                "str",
                "bool",
                "engine.dao.sqlite.EngineDAO"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "int",
                    "pathlib.Path",
                    "List[str]",
                    "click.Path",
                    "Union[str, int]"
                ]
            }
        },
        "RemoteBase.get_children_info": {
            "name": "get_children_info",
            "location": 216,
            "return": [
                "str",
                "bool",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "dict",
                    "int",
                    "bool"
                ]
            }
        },
        "RemoteBase.get_content": {
            "name": "get_content",
            "location": 233,
            "return": [
                "pathlib.Path",
                "Mapping[str, Any]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "fs_item_id": [
                    "str",
                    "int",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "RemoteBase.get_roots": {
            "name": "get_roots",
            "location": 249,
            "return": [
                "bool",
                "List[str]",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteBase.make_file": {
            "name": "make_file",
            "location": 253,
            "return": [
                "str",
                "pathlib.Path",
                "tuple",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "parent_id": [
                    "str",
                    "bool",
                    "os.PathLike",
                    "pathlib.Path"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path",
                    "bool"
                ],
                "content": [
                    "Optional[str]",
                    "bytes",
                    "Optional[int]",
                    "List[str]"
                ]
            }
        },
        "RemoteBase.update_content": {
            "name": "update_content",
            "location": 276,
            "return": [
                "pathlib.Path",
                "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                "Mapping[str, Any]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "List[List[str]]"
                ],
                "content": [
                    "str",
                    "dict",
                    "pathlib.Path",
                    "bool"
                ],
                "filename": [
                    "bool",
                    "str",
                    "Callable",
                    "Optional[str]",
                    "Optional[Sequence[str]]",
                    "viewer.models.Tag"
                ]
            }
        },
        "RemoteBase._filtered_results": {
            "name": "_filtered_results",
            "location": 297,
            "return": [
                "bool",
                "Optional[Any]",
                "float"
            ],
            "arguments": {
                "self": [],
                "entries": [
                    "List[Dict]",
                    "bool",
                    "str"
                ],
                "parent_uid": [
                    "Optional[float]",
                    "Sequence[str]",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "fetch_parent_uid": [
                    "bool",
                    "Optional[float]",
                    "Optional[bool]",
                    "Optional[List[Any]]",
                    "Optional[str]"
                ]
            }
        },
        "RemoteTest.download": {
            "name": "download",
            "location": 329,
            "return": [
                "zerver.models.Realm",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteTest.upload": {
            "name": "upload",
            "location": 333,
            "return": [
                "str",
                "pathlib.Path",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteTest.execute": {
            "name": "execute",
            "location": 337,
            "return": [
                "zerver.models.Realm",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteTest.make_download_raise": {
            "name": "make_download_raise",
            "location": 341,
            "return": [],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "Exception"
                ]
            }
        },
        "RemoteTest.make_upload_raise": {
            "name": "make_upload_raise",
            "location": 345,
            "return": [],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "bytes"
                ]
            }
        },
        "RemoteTest.make_server_call_raise": {
            "name": "make_server_call_raise",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "RemoteTest._raise": {
            "name": "_raise",
            "location": 353,
            "return": [],
            "arguments": {
                "self": [],
                "exc": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "RemoteTest.reset_errors": {
            "name": "reset_errors",
            "location": 362,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RemoteTest.activate_profile": {
            "name": "activate_profile",
            "location": 370,
            "return": [],
            "arguments": {
                "self": [],
                "profile": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "RemoteTest.deactivate_profile": {
            "name": "deactivate_profile",
            "location": 373,
            "return": [],
            "arguments": {
                "self": [],
                "profile": [
                    "str",
                    "List[pathlib.Path]",
                    "pathlib.Path"
                ]
            }
        },
        "RemoteTest.mass_import": {
            "name": "mass_import",
            "location": 378,
            "return": [],
            "arguments": {
                "self": [],
                "target_path": [
                    "pathlib.Path",
                    "Union[str, os.PathLike]",
                    "path.Path",
                    "str"
                ],
                "nb_nodes": [
                    "pathlib.Path",
                    "Union[str, os.PathLike]",
                    "path.Path",
                    "str"
                ]
            }
        },
        "RemoteTest.wait_for_async_and_es_indexing": {
            "name": "wait_for_async_and_es_indexing",
            "location": 406,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RemoteTest.result_set_query": {
            "name": "result_set_query",
            "location": 419,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "RemoteTest.wait": {
            "name": "wait",
            "location": 422,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocRemote.create": {
            "name": "create",
            "location": 427,
            "return": [
                "str",
                "int",
                "float",
                "bool",
                "flask_appbuilder.security.sqla.models.User"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "Dict[str, str]"
                ],
                "doc_type": [
                    "str",
                    "Dict[str, str]"
                ],
                "name": [
                    "str",
                    "Callable[[Any], bool]",
                    "Mapping[str, Any]"
                ],
                "properties": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "DocRemote.make_folder": {
            "name": "make_folder",
            "location": 447,
            "return": [
                "Tuple[int]"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "Optional[Any]",
                    "Optional[str]",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "bool"
                ],
                "doc_type": [
                    "str",
                    "bool"
                ]
            }
        },
        "DocRemote.make_file_with_blob": {
            "name": "make_file_with_blob",
            "location": 458,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "content": [
                    "str"
                ],
                "doc_type": [
                    "str"
                ]
            }
        },
        "DocRemote.make_file_with_no_blob": {
            "name": "make_file_with_no_blob",
            "location": 470,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "Optional[Any]"
                ],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "doc_type": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "DocRemote.make_file": {
            "name": "make_file",
            "location": 481,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "ennead.models.user.User",
                    "Optional[str]",
                    "List[str]",
                    "set",
                    "bool"
                ],
                "name": [
                    "str",
                    "pathlib.Path",
                    "dict"
                ],
                "content": [
                    "str",
                    "List[str]",
                    "pathlib.Path"
                ],
                "file_path": [
                    "Optional[str]",
                    "str",
                    "Union[bytes, pathlib.Path]",
                    "Optional[pathlib.Path]",
                    "Union[None, str, pathlib.Path]"
                ]
            }
        },
        "DocRemote.file_manager_import": {
            "name": "file_manager_import",
            "location": 508,
            "return": [
                "str",
                "Tuple[str, Any]",
                "Tuple[str, str, Optional[str]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "pathlib.Path",
                    "List[str]",
                    "bool"
                ],
                "blob": [
                    "str",
                    "bool",
                    "dict",
                    "type"
                ]
            }
        },
        "DocRemote.make_file_in_user_workspace": {
            "name": "make_file_in_user_workspace",
            "location": 518,
            "return": [
                "pathlib.Path",
                "str",
                "Optional[str]",
                "Optional[pathlib.Path]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "pathlib.Path",
                    "cerulean.Path",
                    "List[str]"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "DocRemote.stream_file": {
            "name": "stream_file",
            "location": 532,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "Optional[str]"
                ],
                "file_path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "DocRemote.attach_blob": {
            "name": "attach_blob",
            "location": 537,
            "return": [
                "str",
                "pathlib.Path",
                "Union[str, pathlib.Path]",
                "utils.typeshed.pathlike",
                "int"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "pringles.models.Model"
                ],
                "content": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "IO[bytes]"
                ],
                "filename": [
                    "str",
                    "pringles.models.Model"
                ]
            }
        },
        "DocRemote.get_content": {
            "name": "get_content",
            "location": 546,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "list",
                "app.models.GameMember",
                "app.models.course.Course"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "dict"
                ]
            }
        },
        "DocRemote.update_content": {
            "name": "update_content",
            "location": 555,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "Optional[str]",
                    "str",
                    "dict",
                    "Mapping[str, Any]",
                    "Sequence[str]",
                    "int",
                    "float"
                ],
                "content": [
                    "str"
                ],
                "filename": [
                    "Union[str, None]",
                    "Optional[str]",
                    "Tuple[List[str], Optional[Any]]",
                    "str",
                    "Optional[Union[Any, Any]]"
                ]
            }
        },
        "DocRemote.move": {
            "name": "move",
            "location": 561,
            "return": [
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str"
                ],
                "target": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "DocRemote.create_proxy": {
            "name": "create_proxy",
            "location": 566,
            "return": [
                "str",
                "bool",
                "List[int]",
                "int",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "list",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "output_ref": [
                    "str",
                    "int",
                    "Dict[str, Dict[str, str]]",
                    "Union['KspNativeControl', int]"
                ]
            }
        },
        "DocRemote.update": {
            "name": "update",
            "location": 574,
            "return": [
                "str",
                "int",
                "float",
                "flask_appbuilder.security.sqla.models.User"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "Iterable[Dict[str, Any]]",
                    "List[str]"
                ],
                "properties": [
                    "str",
                    "Iterable[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "DocRemote.copy": {
            "name": "copy",
            "location": 579,
            "return": [
                "str",
                "bytearray",
                "float",
                "pathlib.Path",
                "Dict[str, int]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "target": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "DocRemote.delete": {
            "name": "delete",
            "location": 587,
            "return": [
                "bool",
                "viewer.models.Archive",
                "int",
                "MutableSequence[utils.CWLObjectType]",
                "dict",
                "core.models.Recipe"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "bool",
                    "int",
                    "Exception",
                    "str"
                ],
                "use_trash": [
                    "bool",
                    "str"
                ]
            }
        },
        "DocRemote.delete_content": {
            "name": "delete_content",
            "location": 591,
            "return": [
                "str",
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "pathlib.Path"
                ],
                "xpath": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "DocRemote.delete_blob": {
            "name": "delete_blob",
            "location": 594,
            "return": [
                "str",
                "int",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "xpath": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]"
                ]
            }
        },
        "DocRemote.is_locked": {
            "name": "is_locked",
            "location": 597,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "int",
                    "bool",
                    "dict",
                    "Optional[int]",
                    "List['Product']"
                ]
            }
        },
        "DocRemote.get_versions": {
            "name": "get_versions",
            "location": 600,
            "return": [
                "bool",
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "List[str]",
                    "IO[bytes]",
                    "bytes"
                ]
            }
        },
        "DocRemote.create_version": {
            "name": "create_version",
            "location": 609,
            "return": [
                "str",
                "Tuple[int]",
                "bool",
                "Dict[Tuple[str, str], Exception]"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "dict",
                    "str",
                    "Exception",
                    "Union[dict, list]"
                ],
                "increment": [
                    "dict",
                    "str",
                    "Exception",
                    "Union[dict, list]"
                ]
            }
        },
        "DocRemote.restore_version": {
            "name": "restore_version",
            "location": 617,
            "return": [
                "bool",
                "str",
                "raiden.utils.List[EthNodeDescription]"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "DocRemote.block_inheritance": {
            "name": "block_inheritance",
            "location": 624,
            "return": [],
            "arguments": {
                "self": [],
                "ref": [
                    "pathlib.PosixPath",
                    "zam_repondeur.services.fetch.an.dossiers.models.DossierRef",
                    "str",
                    "dict",
                    "List[Tuple[str, Any]]",
                    "bytes"
                ],
                "overwrite": [
                    "str"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/unit/conftest.py": {
        "engine_dao": {
            "name": "engine_dao",
            "location": 111,
            "return": [
                "MockEngineDAO",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ]
            }
        },
        "manager_dao": {
            "name": "manager_dao",
            "location": 118,
            "return": [
                "MockManagerDAO",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ]
            }
        },
        "MockEngineDAO.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str"
                ]
            }
        },
        "MockEngineDAO.__enter__": {
            "name": "__enter__",
            "location": 27,
            "return": [
                "MockEngineDAO",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockEngineDAO.__exit__": {
            "name": "__exit__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "MockEngineDAO._get_adjacent_sync_file": {
            "name": "_get_adjacent_sync_file",
            "location": 34,
            "return": [
                "None",
                "bool",
                "str",
                "Optional[Set[int]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "Optional[str]",
                    "str"
                ],
                "comp": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[bool]"
                ],
                "order": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[bool]"
                ],
                "sync_mode": [
                    "None",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "MockEngineDAO._get_adjacent_folder_file": {
            "name": "_get_adjacent_folder_file",
            "location": 56,
            "return": [
                "None",
                "bool",
                "str",
                "Optional[Set[int]]",
                "Optional[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str"
                ],
                "comp": [
                    "str",
                    "bool"
                ],
                "order": [
                    "str",
                    "bool"
                ]
            }
        },
        "MockEngineDAO.get_previous_folder_file": {
            "name": "get_previous_folder_file",
            "location": 74,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "bool"
                ]
            }
        },
        "MockEngineDAO.get_next_folder_file": {
            "name": "get_next_folder_file",
            "location": 77,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "bool"
                ]
            }
        },
        "MockEngineDAO.get_previous_sync_file": {
            "name": "get_previous_sync_file",
            "location": 80,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "bytes"
                ],
                "sync_mode": [
                    "None",
                    "str",
                    "bytes"
                ]
            }
        },
        "MockEngineDAO.get_next_sync_file": {
            "name": "get_next_sync_file",
            "location": 85,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "bytes"
                ],
                "sync_mode": [
                    "None",
                    "str",
                    "bytes"
                ]
            }
        },
        "MockManagerDAO.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str"
                ]
            }
        },
        "MockManagerDAO.__enter__": {
            "name": "__enter__",
            "location": 102,
            "return": [
                "MockManagerDAO",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockManagerDAO.__exit__": {
            "name": "__exit__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/unit/test_action.py": {
        "test_action": {
            "name": "test_action",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_action_with_values": {
            "name": "test_action_with_values",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_download_action": {
            "name": "test_download_action",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_file_action": {
            "name": "test_file_action",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_file_action_empty_file": {
            "name": "test_file_action_empty_file",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": [
                    "pathlib.Path",
                    "Callable"
                ]
            }
        },
        "test_file_action_inexistant_file": {
            "name": "test_file_action_inexistant_file",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": [
                    "pathlib.Path",
                    "Callable"
                ]
            }
        },
        "test_file_action_with_values": {
            "name": "test_file_action_with_values",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_file_action_signals": {
            "name": "test_file_action_signals",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_idle_action": {
            "name": "test_idle_action",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tooltip": {
            "name": "test_tooltip",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_upload_action": {
            "name": "test_upload_action",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ]
            }
        },
        "test_verification_action": {
            "name": "test_verification_action",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": [
                    "str",
                    "float"
                ]
            }
        },
        "test_finalization_action": {
            "name": "test_finalization_action",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": [
                    "str",
                    "float"
                ]
            }
        },
        "test_tooltip.function": {
            "name": "function",
            "location": 196,
            "return": [
                "bool",
                "float",
                "int"
            ],
            "arguments": {
                "a": [
                    "str",
                    "Type"
                ],
                "b": [
                    "int",
                    "str",
                    "Type"
                ]
            }
        },
        "test_file_action_signals.Reporter.action_started": {
            "name": "action_started",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_file_action_signals.Reporter.action_progressing": {
            "name": "action_progressing",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_file_action_signals.Reporter.action_done": {
            "name": "action_done",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/unit/test_autolock.py": {
        "autolock": {
            "name": "autolock",
            "location": 17,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_autolock": {
            "name": "test_autolock",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "autolock": [],
                "tmpdir": []
            }
        },
        "test_get_open_files": {
            "name": "test_get_open_files",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_autolock.tmp_file": {
            "name": "tmp_file",
            "location": 45,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "test_autolock.files": {
            "name": "files",
            "location": 50,
            "return": [
                "typing.Generator[tuple[int]]"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/tests/unit/test_blacklist_queue.py": {
        "test_delay": {
            "name": "test_delay",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/tests/unit/test_commandline.py": {
        "create_ini": {
            "name": "create_ini",
            "location": 13,
            "return": [],
            "arguments": {
                "default_section": [],
                "env": [
                    "typing.Text"
                ],
                "encoding": [
                    "typing.Text"
                ]
            }
        },
        "cmd": {
            "name": "cmd",
            "location": 66,
            "return": [
                "typing.Generator[CliHandler]"
            ],
            "arguments": {
                "tmp": []
            }
        },
        "config": {
            "name": "config",
            "location": 75,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        },
        "test_redact_payload": {
            "name": "test_redact_payload",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": []
            }
        },
        "test_update_site_url": {
            "name": "test_update_site_url",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": []
            }
        },
        "test_bad_encoding_utf_16": {
            "name": "test_bad_encoding_utf_16",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "encoding": [],
                "cmd": [],
                "config": []
            }
        },
        "test_defaults": {
            "name": "test_defaults",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": []
            }
        },
        "get_conf": {
            "name": "get_conf",
            "location": 124,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "_": []
            }
        },
        "test_system_default_windows": {
            "name": "test_system_default_windows",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": []
            }
        },
        "test_system_default_mac": {
            "name": "test_system_default_mac",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": []
            }
        },
        "test_default_override": {
            "name": "test_default_override",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": [],
                "config": []
            }
        },
        "test_default_override_from_alternate_nxdrive_home": {
            "name": "test_default_override_from_alternate_nxdrive_home",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": [],
                "config": []
            }
        },
        "test_confg_file_no_default_section": {
            "name": "test_confg_file_no_default_section",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": [],
                "config": []
            }
        },
        "test_malformatted_line": {
            "name": "test_malformatted_line",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": [],
                "config": []
            }
        },
        "config._config": {
            "name": "_config",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/tests/unit/test_custom_metrics.py": {
        "my_remote": {
            "name": "my_remote",
            "location": 24,
            "return": [
                "MockedRemote"
            ],
            "arguments": {}
        },
        "test_without_errors": {
            "name": "test_without_errors",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "my_remote": []
            }
        },
        "test_with_some_errors": {
            "name": "test_with_some_errors",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "my_remote": []
            }
        },
        "test_thread_interrupt": {
            "name": "test_thread_interrupt",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "my_remote": []
            }
        },
        "test_disabled_metrics": {
            "name": "test_disabled_metrics",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "my_remote": []
            }
        },
        "test_current_os": {
            "name": "test_current_os",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_current_os_full": {
            "name": "test_current_os_full",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_user_agent": {
            "name": "test_user_agent",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MockedRemote.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_without_errors.fake_client_request": {
            "name": "fake_client_request",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_with_some_errors.fake_client_request": {
            "name": "fake_client_request",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_thread_interrupt.fake_client_request": {
            "name": "fake_client_request",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_disabled_metrics.fake_client_request": {
            "name": "fake_client_request",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/unit/test_engine_dao.py": {
        "test_acquire_processors": {
            "name": "test_acquire_processors",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "engine_dao": [
                    "str",
                    "float"
                ]
            }
        },
        "test_batch_folder_files": {
            "name": "test_batch_folder_files",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "engine_dao": [
                    "pathlib.Path",
                    "Callable"
                ]
            }
        },
        "test_batch_upload_files": {
            "name": "test_batch_upload_files",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "engine_dao": [
                    "pathlib.Path",
                    "Callable"
                ]
            }
        },
        "test_configuration_get": {
            "name": "test_configuration_get",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "engine_dao": [
                    "str"
                ]
            }
        },
        "test_configuration_get_bool": {
            "name": "test_configuration_get_bool",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "engine_dao": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_configuration_get_int": {
            "name": "test_configuration_get_int",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "engine_dao": [
                    "str"
                ]
            }
        },
        "test_conflicts": {
            "name": "test_conflicts",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "engine_dao": [
                    "str",
                    "float"
                ]
            }
        },
        "test_corrupted_database": {
            "name": "test_corrupted_database",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "engine_dao": [
                    "str",
                    "float"
                ]
            }
        },
        "test_errors": {
            "name": "test_errors",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "engine_dao": [
                    "Type"
                ]
            }
        },
        "test_filters": {
            "name": "test_filters",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "engine_dao": [
                    "Type",
                    "str",
                    "int"
                ]
            }
        },
        "test_reinit_processors": {
            "name": "test_reinit_processors",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "engine_dao": [
                    "str",
                    "float"
                ]
            }
        },
        "test_engine_init_db": {
            "name": "test_engine_init_db",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "engine_dao": [
                    "pathlib.Path"
                ]
            }
        },
        "test_manager_db_init_at_v04": {
            "name": "test_manager_db_init_at_v04",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ],
                "engine_dao": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ]
            }
        },
        "test_last_sync": {
            "name": "test_last_sync",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "engine_dao": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "str"
                ]
            }
        },
        "test_dao_register_adapter": {
            "name": "test_dao_register_adapter",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "engine_dao": [
                    "str",
                    "float"
                ]
            }
        },
        "test_migration_db_v1": {
            "name": "test_migration_db_v1",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "engine_dao": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_migration_db_v1_with_duplicates": {
            "name": "test_migration_db_v1_with_duplicates",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "engine_dao": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_migration_db_v8": {
            "name": "test_migration_db_v8",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "engine_dao": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_migration_db_v9": {
            "name": "test_migration_db_v9",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "engine_dao": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_migration_db_v10": {
            "name": "test_migration_db_v10",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "engine_dao": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_migration_db_v15": {
            "name": "test_migration_db_v15",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "engine_dao": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_migration_db_v16": {
            "name": "test_migration_db_v16",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "engine_dao": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_migration_db_v18": {
            "name": "test_migration_db_v18",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "engine_dao": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_migration_db_v20": {
            "name": "test_migration_db_v20",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "engine_dao": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_db_init_at_v21": {
            "name": "test_db_init_at_v21",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "pathlib.PosixPath",
                    "bool"
                ],
                "engine_dao": [
                    "pathlib.Path"
                ]
            }
        },
        "test_migration_interface": {
            "name": "test_migration_interface",
            "location": 542,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/tests/unit/test_extension_listener.py": {
        "test_host_to_addr_bad": {
            "name": "test_host_to_addr_bad",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "host": []
            }
        },
        "test_host_to_addr_good": {
            "name": "test_host_to_addr_good",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_formatted_status": {
            "name": "test_get_formatted_status",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "doc_pair": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "path": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "status": [
                    "str",
                    "Set[int]",
                    "int"
                ]
            }
        },
        "test_get_formatted_status_readonly": {
            "name": "test_get_formatted_status_readonly",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_stat": [
                    "mock.MagicMock"
                ]
            }
        },
        "test_get_formatted_status_permission_error": {
            "name": "test_get_formatted_status_permission_error",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_stat": [
                    "mock.MagicMock"
                ]
            }
        },
        "test_get_formatted_status_file_not_found": {
            "name": "test_get_formatted_status_file_not_found",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/tests/unit/test_health_checker.py": {
        "test_no_crash": {
            "name": "test_no_crash",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_crash": {
            "name": "test_crash",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [],
                "tmp_path": []
            }
        },
        "test_crash_invalid_data_in_traces": {
            "name": "test_crash_invalid_data_in_traces",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [],
                "tmp_path": []
            }
        },
        "test_crash.thread": {
            "name": "thread",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "folder": []
            }
        }
    },
    "nuxeo-drive-master/tests/unit/test_local_client.py": {
        "test_get_path": {
            "name": "test_get_path",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_xattr_crud": {
            "name": "test_xattr_crud",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_xattr_mtime": {
            "name": "test_xattr_mtime",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_xattr_error_invalid_start_byte": {
            "name": "test_xattr_error_invalid_start_byte",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        }
    },
    "nuxeo-drive-master/tests/unit/test_logging_config.py": {
        "test_custom_memory_handler": {
            "name": "test_custom_memory_handler",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_force_configure": {
            "name": "test_force_configure",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        }
    },
    "nuxeo-drive-master/tests/unit/test_manager_dao.py": {
        "test_autolock": {
            "name": "test_autolock",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": [
                    "str",
                    "float"
                ]
            }
        },
        "test_notifications": {
            "name": "test_notifications",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/unit/test_migration_engine.py": {
        "generate_migration": {
            "name": "generate_migration",
            "location": 13,
            "return": [
                "TestMigration",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "generate_migrations_dict": {
            "name": "generate_migrations_dict",
            "location": 55,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "count": [
                    "str",
                    "int",
                    "Set[str]",
                    "Tuple[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_migration_engine_no_error": {
            "name": "test_migration_engine_no_error",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_migration_engine_upgrade_new_migration_error": {
            "name": "test_migration_engine_upgrade_new_migration_error",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_migration_engine_upgrade_old_migrations_error": {
            "name": "test_migration_engine_upgrade_old_migrations_error",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_migration_engine_downgrade_new_migrations_error": {
            "name": "test_migration_engine_downgrade_new_migrations_error",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_migration_downgrade_to_old_migrations": {
            "name": "test_migration_downgrade_to_old_migrations",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_migration_engine_no_error.old_migrations_callback": {
            "name": "old_migrations_callback",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_migration_engine_upgrade_new_migration_error.old_migrations_callback": {
            "name": "old_migrations_callback",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_migration_engine_upgrade_old_migrations_error.old_migrations_callback": {
            "name": "old_migrations_callback",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_migration_engine_downgrade_new_migrations_error.old_migrations_callback": {
            "name": "old_migrations_callback",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_migration_downgrade_to_old_migrations.old_migrations_callback": {
            "name": "old_migrations_callback",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "generate_migration.TestMigration.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema_version": [
                    "bool",
                    "str",
                    "List[List[str]]",
                    "int",
                    "float"
                ],
                "previous_schema_version": [
                    "bool",
                    "str",
                    "List[List[str]]",
                    "int",
                    "float"
                ]
            }
        },
        "generate_migration.TestMigration.upgrade": {
            "name": "upgrade",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "str"
                ]
            }
        },
        "generate_migration.TestMigration.downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "str"
                ]
            }
        },
        "generate_migration.TestMigration.version": {
            "name": "version",
            "location": 45,
            "return": [
                "Callable[[T], bool]",
                "List[Union[int, Any]]",
                "List[Union[int, str]]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "generate_migration.TestMigration.previous_version": {
            "name": "previous_version",
            "location": 49,
            "return": [
                "str",
                "int",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/unit/test_model_filters.py": {
        "test_simple_filter": {
            "name": "test_simple_filter",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {
                "engine_dao": [
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/unit/test_notification.py": {
        "test_export": {
            "name": "test_export",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/tests/unit/test_objects.py": {
        "doc": {
            "name": "doc",
            "location": 11,
            "return": [
                "bytes",
                "Sequence[int]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {}
        },
        "remote_doc_dict": {
            "name": "remote_doc_dict",
            "location": 106,
            "return": [
                "Dict[Text,Union[Text,dict[Text,Text]]]",
                "Dict",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "enricher": {
            "name": "enricher",
            "location": 120,
            "return": [
                "Dict[Text,Union[Text,dict[Text,Text],dict[Text,list[dict[Text,Union[Text,list[Text]]]]]]]",
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "test_get_blob_xpath": {
            "name": "test_get_blob_xpath",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "xpath": [
                    "str"
                ],
                "doc": [
                    "str"
                ]
            }
        },
        "test_get_blob_xpath_bad": {
            "name": "test_get_blob_xpath_bad",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "xpath": [],
                "doc": []
            }
        },
        "test_remote_doc_folder": {
            "name": "test_remote_doc_folder",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "remote_doc_dict": [
                    "dict",
                    "\"Step\"",
                    "Callable"
                ]
            }
        },
        "test_remote_doc_digest": {
            "name": "test_remote_doc_digest",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "remote_doc_dict": []
            }
        },
        "test_remote_doc_async_digest": {
            "name": "test_remote_doc_async_digest",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "remote_doc_dict": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "test_remote_doc_live_connect_exotic_digest": {
            "name": "test_remote_doc_live_connect_exotic_digest",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "remote_doc_dict": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "test_remote_doc_live_connect_standard_digest": {
            "name": "test_remote_doc_live_connect_standard_digest",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "remote_doc_dict": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "test_remote_doc_raise_drive_error": {
            "name": "test_remote_doc_raise_drive_error",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "remote_doc_dict": [
                    "Optional[List[str]]"
                ]
            }
        },
        "test_subtype_enricher": {
            "name": "test_subtype_enricher",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "enricher": [
                    "Callable"
                ]
            }
        },
        "test_without_subtype_enricher": {
            "name": "test_without_subtype_enricher",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "enricher": [
                    "str"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/unit/test_options.py": {
        "test_options_instantiation": {
            "name": "test_options_instantiation",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ignored_option": {
            "name": "test_ignored_option",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_batch_update_from_argparse": {
            "name": "test_batch_update_from_argparse",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_batch_update_from_dict": {
            "name": "test_batch_update_from_dict",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_batch_update_from_dict_with_unknown_option": {
            "name": "test_batch_update_from_dict_with_unknown_option",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bytes_conversion": {
            "name": "test_bytes_conversion",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_callback": {
            "name": "test_callback",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_callback_bad_behavior": {
            "name": "test_callback_bad_behavior",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_callback_no_args": {
            "name": "test_callback_no_args",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_defaults": {
            "name": "test_defaults",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_getter": {
            "name": "test_getter",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error": {
            "name": "test_error",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_list_conversion_and_original_values_updated": {
            "name": "test_list_conversion_and_original_values_updated",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setters": {
            "name": "test_setters",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_server_and_local_config_with_default_value_forced": {
            "name": "test_server_and_local_config_with_default_value_forced",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_site_update_url": {
            "name": "test_site_update_url",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_str": {
            "name": "test_str",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_str_utf8": {
            "name": "test_str_utf8",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validator": {
            "name": "test_validator",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "option": [],
                "a_bad_value": [],
                "a_good_value": []
            }
        },
        "test_disabled_features": {
            "name": "test_disabled_features",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": []
            }
        },
        "test_sync_root_max_level_validator_good": {
            "name": "test_sync_root_max_level_validator_good",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "value_set": [],
                "final_value": []
            }
        },
        "test_callback._callback": {
            "name": "_callback",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "new_value": []
            }
        },
        "test_callback_bad_behavior._raises_from_callback": {
            "name": "_raises_from_callback",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "new_value": []
            }
        },
        "test_callback_no_args._callback_with_no_args": {
            "name": "_callback_with_no_args",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/tests/unit/test_pid_lock_file.py": {
        "test_lock_file": {
            "name": "test_lock_file",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": [
                    "Callable"
                ]
            }
        },
        "test_double_lock": {
            "name": "test_double_lock",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": [
                    "str",
                    "float"
                ]
            }
        },
        "test_already_locked": {
            "name": "test_already_locked",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": [
                    "str",
                    "float"
                ]
            }
        },
        "test_already_locked_same_process": {
            "name": "test_already_locked_same_process",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": [
                    "str",
                    "float"
                ]
            }
        },
        "test_unlock": {
            "name": "test_unlock",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_unlink": [
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "tmp": []
            }
        },
        "test_check_running_process_creation_time_too_high": {
            "name": "test_check_running_process_creation_time_too_high",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_create_time": [],
                "tmp": []
            }
        },
        "test_check_running": {
            "name": "test_check_running",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_unlink": [
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "tmp": []
            }
        },
        "test_bad_lock_file_content": {
            "name": "test_bad_lock_file_content",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": [
                    "str"
                ]
            }
        },
        "test_os_getpid_not_int": {
            "name": "test_os_getpid_not_int",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_getpid": [],
                "tmp": []
            }
        }
    },
    "nuxeo-drive-master/tests/unit/test_proxy.py": {
        "js": {
            "name": "js",
            "location": 32,
            "return": [
                "Text",
                "Optional[Iterable[str]]",
                "Sequence[cirq.Qid]",
                "Awaitable"
            ],
            "arguments": {}
        },
        "config_dao": {
            "name": "config_dao",
            "location": 45,
            "return": [
                "typing.Generator[CustomDAO]"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Iterable[str]",
                    "list"
                ]
            }
        },
        "pac_file": {
            "name": "pac_file",
            "location": 56,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "list",
                    "Iterable[str]"
                ],
                "js": [
                    "str",
                    "Iterator[str]"
                ]
            }
        },
        "test_manual": {
            "name": "test_manual",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pac_file": {
            "name": "test_pac_file",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "pac_file": [
                    "str",
                    "Tuple[str, str, str]"
                ]
            }
        },
        "test_pac_file_not_found": {
            "name": "test_pac_file_not_found",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "pac_file": []
            }
        },
        "test_load": {
            "name": "test_load",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "config_dao": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "Union[str, dict]"
                ]
            }
        },
        "_patch_winreg_qve": {
            "name": "_patch_winreg_qve",
            "location": 104,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {}
        },
        "test_autoconfigurl_windows": {
            "name": "test_autoconfigurl_windows",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "pac_file": [
                    "str"
                ]
            }
        },
        "_patch_pyobjc_dscp": {
            "name": "_patch_pyobjc_dscp",
            "location": 121,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_autoconfigurl_mac": {
            "name": "test_autoconfigurl_mac",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "pac_file": [
                    "str"
                ]
            }
        },
        "test_cli_args": {
            "name": "test_cli_args",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": [
                    "dict"
                ]
            }
        },
        "CustomDAO._migrate_db": {
            "name": "_migrate_db",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/tests/unit/test_pytest_random.py": {
        "plugin": {
            "name": "plugin",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "testdir": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "temporary_failure": {
            "name": "temporary_failure",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "count": [
                    "int",
                    "Callable",
                    "str"
                ],
                "reverse": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "assert_outcomes": {
            "name": "assert_outcomes",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "str",
                    "float",
                    "bool"
                ],
                "passed": [
                    "int",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "str",
                    "bool"
                ],
                "skipped": [
                    "int",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "str",
                    "bool"
                ],
                "failed": [
                    "int",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "str",
                    "bool"
                ],
                "error": [
                    "int",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "str",
                    "bool"
                ],
                "xfailed": [
                    "int",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "str",
                    "bool"
                ],
                "xpassed": [
                    "int",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "str",
                    "bool"
                ],
                "repeated": [
                    "int",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "str",
                    "bool"
                ]
            }
        },
        "test_no_repeat_on_skipif_mark": {
            "name": "test_no_repeat_on_skipif_mark",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "testdir": [
                    "Callable",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "test_no_repeat_on_skip_call": {
            "name": "test_no_repeat_on_skip_call",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "testdir": [
                    "bool"
                ]
            }
        },
        "test_no_repeat_on_xfail_mark": {
            "name": "test_no_repeat_on_xfail_mark",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "testdir": [
                    "Callable",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "test_no_repeat_on_xfail_call": {
            "name": "test_no_repeat_on_xfail_call",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "testdir": [
                    "bool"
                ]
            }
        },
        "test_relax_on_failing_test": {
            "name": "test_relax_on_failing_test",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "testdir": [
                    "Dict[str, Any]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "test_relax_on_passing_test": {
            "name": "test_relax_on_passing_test",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "testdir": [
                    "Dict[str, Any]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "test_relax_and_false_condition_on_failing_test": {
            "name": "test_relax_and_false_condition_on_failing_test",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "testdir": [
                    "Callable",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "test_relax_passing_after_failure": {
            "name": "test_relax_passing_after_failure",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "testdir": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "test_strict_on_failing_test": {
            "name": "test_strict_on_failing_test",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "testdir": [
                    "Dict[str, Any]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "test_strict_on_passing_test": {
            "name": "test_strict_on_passing_test",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "testdir": [
                    "Dict[str, Any]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "test_strict_and_false_condition_on_passing_test": {
            "name": "test_strict_and_false_condition_on_passing_test",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "testdir": [
                    "Callable",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "test_strict_failing_after_success": {
            "name": "test_strict_failing_after_success",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "testdir": [
                    "set"
                ]
            }
        },
        "test_strict_and_lower_repeat_number_on_passing_test": {
            "name": "test_strict_and_lower_repeat_number_on_passing_test",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "testdir": [
                    "Callable",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "test_bypass_on_passing_test": {
            "name": "test_bypass_on_passing_test",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "testdir": [
                    "Dict[str, Any]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "test_bypass_on_failing_test": {
            "name": "test_bypass_on_failing_test",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "testdir": [
                    "Dict[str, Any]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "test_bypass_and_false_condition_on_passing_test": {
            "name": "test_bypass_and_false_condition_on_passing_test",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "testdir": [
                    "Callable",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "test_bypass_and_false_condition_on_failing_test": {
            "name": "test_bypass_and_false_condition_on_failing_test",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "testdir": [
                    "Callable",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/unit/test_qt.py": {
        "test_regexp_validator_should_pass": {
            "name": "test_regexp_validator_should_pass",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "input_data": []
            }
        },
        "test_regexp_validator_should_not_pass": {
            "name": "test_regexp_validator_should_not_pass",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "input_data": []
            }
        }
    },
    "nuxeo-drive-master/tests/unit/test_report.py": {
        "test_logs": {
            "name": "test_logs",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": [
                    "int",
                    "str",
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "Callable"
                ]
            }
        }
    },
    "nuxeo-drive-master/tests/unit/test_session_csv.py": {
        "test_csv_generation": {
            "name": "test_csv_generation",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": [
                    "str",
                    "float"
                ]
            }
        },
        "test_csv_generation_with_unicode_items": {
            "name": "test_csv_generation_with_unicode_items",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ],
                "engine_dao": []
            }
        }
    },
    "nuxeo-drive-master/tests/unit/test_tracing.py": {
        "sentry_init_custom": {
            "name": "sentry_init_custom",
            "location": 21,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "bool"
                ]
            }
        },
        "test_flooding_prevention": {
            "name": "test_flooding_prevention",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "sentry_init_custom": []
            }
        },
        "CustomTransport.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "sentry_init_custom.inner": {
            "name": "inner",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_flooding_prevention.whoopsy": {
            "name": "whoopsy",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_flooding_prevention.whoopsy2": {
            "name": "whoopsy2",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/tests/unit/test_translator.py": {
        "get_folder": {
            "name": "get_folder",
            "location": 8,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "folder": []
            }
        },
        "test_non_existing_file": {
            "name": "test_non_existing_file",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_file": {
            "name": "test_load_file",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_non_initialized": {
            "name": "test_non_initialized",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_bad_language": {
            "name": "test_load_bad_language",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_existing_language": {
            "name": "test_load_existing_language",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_token": {
            "name": "test_token",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "token": [],
                "result": []
            }
        },
        "test_translate_twice": {
            "name": "test_translate_twice",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_translate_twice_different_values": {
            "name": "test_translate_twice_different_values",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_languages": {
            "name": "test_languages",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/tests/unit/test_updater.py": {
        "test_get_update_status": {
            "name": "test_get_update_status",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "current": [],
                "server": [],
                "channel": [],
                "action_required": [],
                "new": []
            }
        },
        "test_get_update_status_centralized_channel": {
            "name": "test_get_update_status_centralized_channel",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "current": [
                    "int"
                ],
                "desired": [],
                "action_required": [],
                "new": []
            }
        },
        "test_get_update_status_centralized_channel_wrong_client_version": {
            "name": "test_get_update_status_centralized_channel_wrong_client_version",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_update_status_centralized_channel_client_version_from_other_channel": {
            "name": "test_get_update_status_centralized_channel_client_version_from_other_channel",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_update_status_centralized_channel_without_client_version": {
            "name": "test_get_update_status_centralized_channel_without_client_version",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_update_status_centralized_channel_wrong_server": {
            "name": "test_get_update_status_centralized_channel_wrong_server",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_update_status_versions_is_none": {
            "name": "test_get_update_status_versions_is_none",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_update_release_broken_update": {
            "name": "test_get_update_release_broken_update",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/tests/unit/test_utils.py": {
        "test_compute_digest": {
            "name": "test_compute_digest",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": [],
                "size": [],
                "digest_func": [],
                "result": []
            }
        },
        "test_compute_digest_with_callback": {
            "name": "test_compute_digest_with_callback",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": []
            }
        },
        "test_compute_digest_unknown": {
            "name": "test_compute_digest_unknown",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compute_digest_error": {
            "name": "test_compute_digest_error",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": []
            }
        },
        "test_compute_fake_pid_from_path": {
            "name": "test_compute_fake_pid_from_path",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "pid": []
            }
        },
        "test_current_thread_id": {
            "name": "test_current_thread_id",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_digest_status": {
            "name": "test_digest_status",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "digest": [],
                "expected_status": []
            }
        },
        "test_encrypt_decrypt": {
            "name": "test_encrypt_decrypt",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "key": []
            }
        },
        "test_decrypt": {
            "name": "test_decrypt",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_find_suitable_tmp_dir_different_drive": {
            "name": "test_find_suitable_tmp_dir_different_drive",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": []
            }
        },
        "test_find_suitable_tmp_dir_different_drive_using_the_root": {
            "name": "test_find_suitable_tmp_dir_different_drive_using_the_root",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": []
            }
        },
        "test_find_suitable_tmp_dir_different_partition": {
            "name": "test_find_suitable_tmp_dir_different_partition",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_stat": [],
                "tmp": []
            }
        },
        "test_find_suitable_tmp_dir_different_partition_using_the_root": {
            "name": "test_find_suitable_tmp_dir_different_partition_using_the_root",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": []
            }
        },
        "test_find_suitable_tmp_dir_same_partition": {
            "name": "test_find_suitable_tmp_dir_same_partition",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": []
            }
        },
        "test_find_suitable_tmp_dir_inexistant": {
            "name": "test_find_suitable_tmp_dir_inexistant",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": []
            }
        },
        "test_generated_tempory_file": {
            "name": "test_generated_tempory_file",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "state": []
            }
        },
        "test_get_certificate_details_from_file": {
            "name": "test_get_certificate_details_from_file",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_certificate_details_from_hostname": {
            "name": "test_get_certificate_details_from_hostname",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "hostname": []
            }
        },
        "test_get_certificate_details_error": {
            "name": "test_get_certificate_details_error",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_valid_ssl_certificate": {
            "name": "test_is_valid_ssl_certificate",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_is_valid_ssl_certificate_not_certificate": {
            "name": "test_is_valid_ssl_certificate_not_certificate",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_is_valid_ssl_certificate_not_such_file": {
            "name": "test_is_valid_ssl_certificate_not_such_file",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_request_verify_no_ca_bundle": {
            "name": "test_request_verify_no_ca_bundle",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "ca_bundle": [],
                "ssl_no_verify": [],
                "expected": []
            }
        },
        "test_request_verify_ca_bundle_file": {
            "name": "test_request_verify_ca_bundle_file",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [],
                "tmp_path": []
            }
        },
        "test_request_verify_ca_bundle_file_is_str": {
            "name": "test_request_verify_ca_bundle_file_is_str",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [],
                "tmp_path": []
            }
        },
        "test_request_verify_ca_bundle_file_is_already_all_in_one_certificate": {
            "name": "test_request_verify_ca_bundle_file_is_already_all_in_one_certificate",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_request_verify_ca_bundle_file_mimic_updates": {
            "name": "test_request_verify_ca_bundle_file_mimic_updates",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [],
                "tmp_path": []
            }
        },
        "test_request_verify_ca_bundle_file_is_not_a_certificate": {
            "name": "test_request_verify_ca_bundle_file_is_not_a_certificate",
            "location": 518,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [],
                "tmp_path": []
            }
        },
        "test_request_verify_ca_bundle_folder": {
            "name": "test_request_verify_ca_bundle_folder",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [],
                "tmp_path": []
            }
        },
        "test_request_verify_ca_bundle_folder_contains_subfolder": {
            "name": "test_request_verify_ca_bundle_folder_contains_subfolder",
            "location": 570,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [],
                "tmp_path": []
            }
        },
        "test_request_verify_ca_bundle_folder_contains_big_file": {
            "name": "test_request_verify_ca_bundle_folder_contains_big_file",
            "location": 592,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [],
                "tmp_path": []
            }
        },
        "test_current_milli_time": {
            "name": "test_current_milli_time",
            "location": 633,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_find_icon": {
            "name": "test_find_icon",
            "location": 644,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_date_from_sqlite": {
            "name": "test_get_date_from_sqlite",
            "location": 649,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_default_local_folder": {
            "name": "test_get_default_local_folder",
            "location": 663,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_timestamp_from_date": {
            "name": "test_get_timestamp_from_date",
            "location": 681,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_tree_list": {
            "name": "test_get_tree_list",
            "location": 690,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_tree_list_root_is_in_ignored_patterns": {
            "name": "test_get_tree_list_root_is_in_ignored_patterns",
            "location": 701,
            "return": [
                "None"
            ],
            "arguments": {
                "fs": []
            }
        },
        "test_get_tree_list_avoid_symlinks": {
            "name": "test_get_tree_list_avoid_symlinks",
            "location": 708,
            "return": [
                "None"
            ],
            "arguments": {
                "fs": []
            }
        },
        "test_get_tree_list_ignored_patterns": {
            "name": "test_get_tree_list_ignored_patterns",
            "location": 725,
            "return": [
                "None"
            ],
            "arguments": {
                "fs": []
            }
        },
        "test_get_tree_list_dir_raise_os_error": {
            "name": "test_get_tree_list_dir_raise_os_error",
            "location": 737,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_path": []
            }
        },
        "test_get_tree_list_subdir_raise_os_error": {
            "name": "test_get_tree_list_subdir_raise_os_error",
            "location": 745,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_is_dir": [],
                "fs": []
            }
        },
        "test_if_frozen_decorator": {
            "name": "test_if_frozen_decorator",
            "location": 770,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_large_file": {
            "name": "test_is_large_file",
            "location": 792,
            "return": [
                "None"
            ],
            "arguments": {
                "filesize": [],
                "large": []
            }
        },
        "test_normalize_and_expand_path": {
            "name": "test_normalize_and_expand_path",
            "location": 796,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_normalize_event_filename": {
            "name": "test_normalize_event_filename",
            "location": 807,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": []
            }
        },
        "test_retrieve_ssl_certificate_unknown": {
            "name": "test_retrieve_ssl_certificate_unknown",
            "location": 840,
            "return": [
                "None"
            ],
            "arguments": {
                "hostname": []
            }
        },
        "test_get_value": {
            "name": "test_get_value",
            "location": 869,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_value": [],
                "expected_value": []
            }
        },
        "test_increment_local_folder": {
            "name": "test_increment_local_folder",
            "location": 873,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": []
            }
        },
        "test_parse_protocol_url_cmd": {
            "name": "test_parse_protocol_url_cmd",
            "location": 897,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": []
            }
        },
        "test_parse_protocol_url_cmd_unknown": {
            "name": "test_parse_protocol_url_cmd_unknown",
            "location": 907,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_protocol_url_cmd_outdated": {
            "name": "test_parse_protocol_url_cmd_outdated",
            "location": 914,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_protocol_url_edit": {
            "name": "test_parse_protocol_url_edit",
            "location": 920,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_protocol_url_edit_missing_download_url": {
            "name": "test_parse_protocol_url_edit_missing_download_url",
            "location": 944,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_protocol_url_edit_missing_username": {
            "name": "test_parse_protocol_url_edit_missing_username",
            "location": 958,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_protocol_url_oauth2_token": {
            "name": "test_parse_protocol_url_oauth2_token",
            "location": 972,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_protocol_url_oauth2_token_error": {
            "name": "test_parse_protocol_url_oauth2_token_error",
            "location": 984,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_protocol_url_token": {
            "name": "test_parse_protocol_url_token",
            "location": 1001,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_protocol_url_bad_http_scheme": {
            "name": "test_parse_protocol_url_bad_http_scheme",
            "location": 1013,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_path_is_unc_name": {
            "name": "test_path_is_unc_name",
            "location": 1042,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "result": []
            }
        },
        "test_path_is_unc_name_unix": {
            "name": "test_path_is_unc_name_unix",
            "location": 1047,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_simplify_url": {
            "name": "test_simplify_url",
            "location": 1070,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "result": []
            }
        },
        "test_safe_filename": {
            "name": "test_safe_filename",
            "location": 1085,
            "return": [
                "None"
            ],
            "arguments": {
                "invalid": [],
                "valid": []
            }
        },
        "test_safe_filename_ending_with_space": {
            "name": "test_safe_filename_ending_with_space",
            "location": 1089,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_safe_rename": {
            "name": "test_safe_rename",
            "location": 1098,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": []
            }
        },
        "test_sizeof_fmt": {
            "name": "test_sizeof_fmt",
            "location": 1139,
            "return": [
                "None"
            ],
            "arguments": {
                "size": [],
                "result": []
            }
        },
        "test_sizeof_fmt_arg": {
            "name": "test_sizeof_fmt_arg",
            "location": 1143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_short_name": {
            "name": "test_short_name",
            "location": 1155,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [],
                "too_long": []
            }
        },
        "test_save_config": {
            "name": "test_save_config",
            "location": 1227,
            "return": [
                "None"
            ],
            "arguments": {
                "default_config": [],
                "config_dump": [],
                "tmp_path": []
            }
        },
        "test_url_bad_ssl": {
            "name": "test_url_bad_ssl",
            "location": 1270,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_shortify": {
            "name": "test_shortify",
            "location": 1286,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [],
                "shortened": []
            }
        },
        "MockedPath.resolve": {
            "name": "resolve",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_compute_digest_with_callback.callback": {
            "name": "callback",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_tree_list_subdir_raise_os_error.is_dir": {
            "name": "is_dir",
            "location": 752,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "test_if_frozen_decorator.check": {
            "name": "check",
            "location": 772,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "test_find_suitable_tmp_dir_different_partition.Stat.st_dev": {
            "name": "st_dev",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tests/unit/test_windows_registry.py": {
        "test_registry_create": {
            "name": "test_registry_create",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_registry_delete": {
            "name": "test_registry_delete",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_registry_delete_value": {
            "name": "test_registry_delete_value",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_registry_exists": {
            "name": "test_registry_exists",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_registry_read": {
            "name": "test_registry_read",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_registry_write": {
            "name": "test_registry_write",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/tests/unit/__init__.py": {},
    "nuxeo-drive-master/tools/changelog.py": {
        "backtick": {
            "name": "backtick",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "cmd": []
            }
        },
        "changelog": {
            "name": "changelog",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "issues": [],
                "formatter": [],
                "func": []
            }
        },
        "debug": {
            "name": "debug",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "examples": {
            "name": "examples",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_latest_tag": {
            "name": "get_latest_tag",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_issues": {
            "name": "get_issues",
            "location": 138,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_issue_infos": {
            "name": "get_issue_infos",
            "location": 173,
            "return": [
                "Any"
            ],
            "arguments": {
                "issue": [],
                "raw": []
            }
        },
        "get_version": {
            "name": "get_version",
            "location": 231,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "report_categorized": {
            "name": "report_categorized",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "issues_list": [],
                "fmt": []
            }
        },
        "main": {
            "name": "main",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/tools/check_pytest_lastfailed.py": {
        "run_check": {
            "name": "run_check",
            "location": 15,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/tools/check_translations.py": {
        "print_results": {
            "name": "print_results",
            "location": 18,
            "return": [
                "int"
            ],
            "arguments": {
                "errors": [
                    "List[str]",
                    "BaseException",
                    "str",
                    "tuple",
                    "Exception"
                ],
                "warnings": [
                    "List[str]",
                    "BaseException",
                    "str",
                    "tuple",
                    "Exception"
                ]
            }
        },
        "find_errors_in_tested_file": {
            "name": "find_errors_in_tested_file",
            "location": 35,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "reference_translation": [
                    "dict",
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, str]",
                    "Optional[Dict[str, str]]"
                ],
                "translation": [
                    "str",
                    "pathlib.Path",
                    "Optional[pathlib.Path]"
                ],
                "file": [
                    "str",
                    "dict"
                ]
            }
        },
        "run_check": {
            "name": "run_check",
            "location": 56,
            "return": [
                "int"
            ],
            "arguments": {
                "translations_folder": [
                    "List[str]",
                    "str",
                    "Sequence[str]"
                ]
            }
        }
    },
    "nuxeo-drive-master/tools/cleanup_application_tree.py": {
        "find_useless_files": {
            "name": "find_useless_files",
            "location": 108,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "dict",
                    "List[str]",
                    "bool",
                    "pathlib.Path",
                    "os.PathLike",
                    "Union[io.TextIO, pathlib.Path]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "nuxeo-drive-master/tools/integration_tests_setup.py": {
        "set_environment": {
            "name": "set_environment",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_tests_from_source": {
            "name": "run_tests_from_source",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/tools/skiplist.py": {},
    "nuxeo-drive-master/tools/versions.py": {
        "_load": {
            "name": "_load",
            "location": 19,
            "return": [
                "Dict",
                "int",
                "Callable[[KT],VT]",
                "Tuple[str,str]",
                "List[Exception]",
                "str"
            ],
            "arguments": {}
        },
        "_dump": {
            "name": "_dump",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "versions": [
                    "Union[complex, float, int]",
                    "str",
                    "Iterable[Any]"
                ]
            }
        },
        "wrap": {
            "name": "wrap",
            "location": 33,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "check": {
            "name": "check",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "versions": [
                    "List[Dict[str, Any]]",
                    "List[dict]",
                    "Mapping"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "version": [
                    "str",
                    "Optional[str]"
                ],
                "category": [
                    "int",
                    "str",
                    "Optional[Dict]"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "versions": [
                    "str",
                    "bool",
                    "Optional[List[str]]"
                ],
                "version": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[IO[bytes]]",
                    "bool"
                ]
            }
        },
        "merge": {
            "name": "merge",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "versions": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "promote": {
            "name": "promote",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "versions": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "version": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "category": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 152,
            "return": [
                "Optional[int]"
            ],
            "arguments": {}
        },
        "wrap.func_wrapper": {
            "name": "func_wrapper",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nuxeo-drive-master/tools/jenkins/junit/merge.py": {
        "print_suite": {
            "name": "print_suite",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "suite": []
            }
        },
        "JunitReport.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder": [],
                "output": [
                    "typing.Text"
                ]
            }
        },
        "JunitReport.add_tests": {
            "name": "add_tests",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": []
            }
        },
        "JunitReport.process_xml": {
            "name": "process_xml",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "JunitReport.build": {
            "name": "build",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nuxeo-drive-master/tools/linux/nautilus/contextual_menu.py": {
        "NuxeoDriveMenuProvider.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NuxeoDriveMenuProvider.get_file_items": {
            "name": "get_file_items",
            "location": 11,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "int",
                    "List[int]"
                ],
                "files": [
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "NuxeoDriveMenuProvider.access_online": {
            "name": "access_online",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "IO[str]",
                    "List[str]",
                    "BinaryIO",
                    "bool",
                    "list"
                ],
                "files": [
                    "bool",
                    "Optional[IO[str]]",
                    "str",
                    "IO",
                    "Optional[str]"
                ]
            }
        },
        "NuxeoDriveMenuProvider.copy_share_link": {
            "name": "copy_share_link",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "list",
                    "IO[str]"
                ],
                "files": [
                    "Optional[IO[str]]",
                    "bool",
                    "IO",
                    "str"
                ]
            }
        },
        "NuxeoDriveMenuProvider.edit_metadata": {
            "name": "edit_metadata",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "IO[str]",
                    "List[str]",
                    "BinaryIO",
                    "bool",
                    "list"
                ],
                "files": [
                    "Optional[IO[str]]",
                    "bool",
                    "str",
                    "IO"
                ]
            }
        },
        "NuxeoDriveMenuProvider.drive_exec": {
            "name": "drive_exec",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "cmds": [
                    "str"
                ]
            }
        },
        "NuxeoDriveMenuProvider._get_uri_path": {
            "name": "_get_uri_path",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "uri": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "nuxeo-drive-master/tools/osx/fix_app_qt_folder_names_for_codesign.py": {
        "create_symlink": {
            "name": "create_symlink",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "folder": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "fix_dll": {
            "name": "fix_dll",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "dll": [
                    "pathlib.Path",
                    "str",
                    "bool"
                ]
            }
        },
        "find_problematic_folders": {
            "name": "find_problematic_folders",
            "location": 65,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "folder": [
                    "int",
                    "set",
                    "str"
                ]
            }
        },
        "move_contents_to_resources": {
            "name": "move_contents_to_resources",
            "location": 77,
            "return": [
                "Generator[(pathlib.Path, Any, None)]"
            ],
            "arguments": {
                "folder": [
                    "pathlib.Path",
                    "str",
                    "Callable",
                    "Callable[[None, None], bool]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 100,
            "return": [
                "int"
            ],
            "arguments": {
                "args": []
            }
        },
        "fix_dll.match_func": {
            "name": "match_func",
            "location": 35,
            "return": [
                "None",
                "Optional[str]",
                "Text",
                "Optional[Dict[str,Any]]",
                "str",
                "bool"
            ],
            "arguments": {
                "pth": [
                    "str",
                    "float",
                    "Sequence[str]"
                ]
            }
        }
    },
    "nuxeo-drive-master/tools/osx/icon_extractor.py": {},
    "nuxeo-drive-master/tools/osx/notarize.py": {
        "ask_for_notarization_uid": {
            "name": "ask_for_notarization_uid",
            "location": 23,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "file": []
            }
        },
        "wait_for_notarization": {
            "name": "wait_for_notarization",
            "location": 55,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "uuid": []
            }
        },
        "get_notarization_report": {
            "name": "get_notarization_report",
            "location": 133,
            "return": [
                "Any"
            ],
            "arguments": {
                "output": [],
                "pattern": []
            }
        },
        "get_notarization_status": {
            "name": "get_notarization_status",
            "location": 140,
            "return": [
                "Any"
            ],
            "arguments": {
                "output": [],
                "pattern": []
            }
        },
        "staple_the_notarization": {
            "name": "staple_the_notarization",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "file": []
            }
        },
        "call": {
            "name": "call",
            "location": 153,
            "return": [
                "str"
            ],
            "arguments": {
                "cmd": []
            }
        },
        "download_report": {
            "name": "download_report",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {
                "uuid": [],
                "url": []
            }
        },
        "main": {
            "name": "main",
            "location": 174,
            "return": [
                "int"
            ],
            "arguments": {
                "file": [],
                "uuid": [
                    "typing.Text"
                ]
            }
        }
    },
    "nuxeo-drive-master/tools/scripts/check_update_process.py": {
        "create_versions": {
            "name": "create_versions",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "dst": [
                    "str",
                    "bytes"
                ],
                "version": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "download_last_ga_release": {
            "name": "download_last_ga_release",
            "location": 86,
            "return": [
                "str",
                "Optional[str]",
                "Set[str]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "output_dir": [
                    "str"
                ],
                "version": [
                    "int",
                    "str",
                    "IO[str]",
                    "List[Optional[str]]"
                ]
            }
        },
        "gen_exe": {
            "name": "gen_exe",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_last_version_number": {
            "name": "get_last_version_number",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_version": {
            "name": "get_version",
            "location": 139,
            "return": [
                "str",
                "Optional[float]",
                "int"
            ],
            "arguments": {}
        },
        "install_drive": {
            "name": "install_drive",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "installer": [
                    "str",
                    "Dict[str, Any]",
                    "Sequence[str]"
                ]
            }
        },
        "launch_drive": {
            "name": "launch_drive",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "executable": [
                    "str",
                    "Callable",
                    "int"
                ],
                "args": []
            }
        },
        "cat_log": {
            "name": "cat_log",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "set_options": {
            "name": "set_options",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "tests": {
            "name": "tests",
            "location": 270,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "uninstall_drive": {
            "name": "uninstall_drive",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "version_decrement": {
            "name": "version_decrement",
            "location": 317,
            "return": [
                "str"
            ],
            "arguments": {
                "version": [
                    "str",
                    "Dict[Any, str]",
                    "bytes",
                    "list"
                ]
            }
        },
        "version_find": {
            "name": "version_find",
            "location": 344,
            "return": [
                "Tuple",
                "str",
                "pathlib.Path",
                "Union[str,int]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "version_update": {
            "name": "version_update",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "version": [
                    "str",
                    "Union[str, bytes]"
                ],
                "lineno": [
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "webserver": {
            "name": "webserver",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "folder": [
                    "bool",
                    "int",
                    "raiden.utils.Address",
                    "raiden.utils.ABI",
                    "str"
                ],
                "port": [
                    "int",
                    "str",
                    "bool",
                    "Optional[cmk.utils.type_defs.ServiceName]"
                ]
            }
        },
        "check_against_me": {
            "name": "check_against_me",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "root": [
                    "str",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "check_against_last_release": {
            "name": "check_against_last_release",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "root": [
                    "raiden.tests.fuzz.utils.Scrambling",
                    "dataworkspaces.utils.lineage_utils.ResourceRef",
                    "raiden.tests.fuzz.utils.SendLockedTransferInNode"
                ]
            }
        },
        "generate_installer": {
            "name": "generate_installer",
            "location": 447,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "root": [
                    "str",
                    "T"
                ],
                "version": [
                    "str",
                    "List[str]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "move": [
                    "bool",
                    "int",
                    "bytes",
                    "str",
                    "List[str]",
                    "Callable[[None],None]"
                ]
            }
        },
        "job": {
            "name": "job",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "root": [
                    "str",
                    "int",
                    "bool"
                ],
                "version": [
                    "str"
                ],
                "executable": [
                    "str",
                    "Optional[str]",
                    "Callable[[str], None]",
                    "utils.SinkType",
                    "Set[str]"
                ],
                "previous_version": [
                    "str"
                ],
                "name": [
                    "bool"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 535,
            "return": [
                "cmk.utils.type_defs.HostName",
                "str"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 553,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "webserver.stop": {
            "name": "stop",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "nuxeo-drive-master/tools/scripts/csv_to_log.py": {
        "convert": {
            "name": "convert",
            "location": 11,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "file": [
                    "pathlib.Path",
                    "IO[str]",
                    "BinaryIO",
                    "str",
                    "IO",
                    "Union[str, pathlib.Path]",
                    "pathlib2.Path"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 25,
            "return": [
                "int"
            ],
            "arguments": {
                "files": [
                    "List[str]",
                    "IO[str]",
                    "Sequence[str]",
                    "IO[Any]",
                    "Iterable[pathlib.Path]"
                ]
            }
        }
    },
    "nuxeo-drive-master/tools/scripts/slow_thread_detection.py": {
        "timer": {
            "name": "timer",
            "location": 11,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "Union[int, float]"
                ],
                "delay": [
                    "None",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 62,
            "return": [
                "Optional[int]"
            ],
            "arguments": {}
        }
    }
}
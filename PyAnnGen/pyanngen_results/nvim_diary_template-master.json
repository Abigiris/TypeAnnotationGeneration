{
    "nvim_diary_template-master/pythonx/diary_template_wrapper.py": {
        "init_diary": {
            "name": "init_diary",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_options": {
            "name": "check_options",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "make_diary_command": {
            "name": "make_diary_command",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "upload_to_calendar": {
            "name": "upload_to_calendar",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "grab_from_calendar": {
            "name": "grab_from_calendar",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "update_calendar": {
            "name": "update_calendar",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "sort_calendar": {
            "name": "sort_calendar",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_issues": {
            "name": "get_issues",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "sort_issues": {
            "name": "sort_issues",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "insert_issue": {
            "name": "insert_issue",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "insert_comment": {
            "name": "insert_comment",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "edit_comment": {
            "name": "edit_comment",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "edit_issue": {
            "name": "edit_issue",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "upload_new_issues": {
            "name": "upload_new_issues",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "upload_edited_issues": {
            "name": "upload_edited_issues",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "toggle_completion": {
            "name": "toggle_completion",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "upload_issue_completions": {
            "name": "upload_issue_completions",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "upload_all_issues": {
            "name": "upload_all_issues",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "swap_group_sorting": {
            "name": "swap_group_sorting",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nvim_diary_template-master/rplugin/python3/deoplete/source/github_labels.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "str",
                    "Mapping[str, str]",
                    "typing.Mapping",
                    "Union[str, dict]",
                    "dict[, ]"
                ]
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 26,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int"
                ]
            }
        },
        "Source.get_complete_position": {
            "name": "get_complete_position",
            "location": 43,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "Optional[int]"
                ]
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/deoplete/source/github_user_repos.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "str"
                ]
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 27,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int"
                ]
            }
        },
        "Source.get_complete_position": {
            "name": "get_complete_position",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "Optional[int]"
                ]
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/deoplete/source/google_calendars.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "str",
                    "Mapping[str, str]",
                    "typing.Mapping",
                    "Union[str, dict]",
                    "dict[, ]"
                ]
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 26,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int"
                ]
            }
        },
        "Source.get_complete_position": {
            "name": "get_complete_position",
            "location": 43,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "Optional[int]"
                ]
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/plugin.py": {
        "DiaryTemplatePlugin.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nvim": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "DiaryTemplatePlugin.check_options": {
            "name": "check_options",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiaryTemplatePlugin.init_diary": {
            "name": "init_diary",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiaryTemplatePlugin.make_diary_command": {
            "name": "make_diary_command",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "called_from_autocommand": [
                    "bool",
                    "dict",
                    "Dict[str, Dict[str, Any]]",
                    "Optional[List[str]]",
                    "Callable",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "DiaryTemplatePlugin.upload_to_calendar": {
            "name": "upload_to_calendar",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiaryTemplatePlugin.grab_from_calendar": {
            "name": "grab_from_calendar",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiaryTemplatePlugin.update_calendar": {
            "name": "update_calendar",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiaryTemplatePlugin.sort_calendar": {
            "name": "sort_calendar",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiaryTemplatePlugin.get_issues": {
            "name": "get_issues",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiaryTemplatePlugin.sort_issues": {
            "name": "sort_issues",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiaryTemplatePlugin.insert_issue": {
            "name": "insert_issue",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiaryTemplatePlugin.insert_comment": {
            "name": "insert_comment",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiaryTemplatePlugin.edit_comment": {
            "name": "edit_comment",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiaryTemplatePlugin.edit_issue": {
            "name": "edit_issue",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiaryTemplatePlugin.upload_new_issues": {
            "name": "upload_new_issues",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buffered": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DiaryTemplatePlugin.upload_edited_issues": {
            "name": "upload_edited_issues",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buffered": [
                    "bool",
                    "str",
                    "List[str]",
                    "Dict[str, object]",
                    "purplship.providers.ups.utils.Settings"
                ]
            }
        },
        "DiaryTemplatePlugin.toggle_completion": {
            "name": "toggle_completion",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiaryTemplatePlugin.upload_issue_completions": {
            "name": "upload_issue_completions",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buffered": [
                    "bool",
                    "str",
                    "List[str]",
                    "Dict[str, object]",
                    "purplship.providers.ups.utils.Settings"
                ]
            }
        },
        "DiaryTemplatePlugin.upload_all_issues": {
            "name": "upload_all_issues",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiaryTemplatePlugin.swap_group_sorting": {
            "name": "swap_group_sorting",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiaryTemplatePlugin.flush_messages": {
            "name": "flush_messages",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiaryTemplatePlugin.swap_group_sorting.rotate": {
            "name": "rotate",
            "location": 214,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "input_list": [
                    "Union[str, List[str]]",
                    "list",
                    "List[str]",
                    "int",
                    "List[Union[int, float]]"
                ],
                "pivot": [
                    "Union[str, List[str]]",
                    "list",
                    "List[str]",
                    "int",
                    "List[Union[int, float]]"
                ]
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/__init__.py": {},
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/classes/calendar_event_class.py": {},
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/classes/data_class_json.py": {
        "EnhancedJSONEncoder.default": {
            "name": "default",
            "location": 9,
            "return": [
                "List[int]",
                "int",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/classes/github_issue_class.py": {},
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/classes/nvim_github_class.py": {
        "SimpleNvimGithub.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nvim": [
                    "bool",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "None",
                    "List[Dict[str, Any]]",
                    "bytes",
                    "list[dict[str, typing.Any]]",
                    "str",
                    "list",
                    "list[]",
                    "dict",
                    "dict[, ]"
                ],
                "options": [
                    "nvim_diary_template.classes.plugin_options.PluginOptions"
                ],
                "service": [
                    "bool",
                    "None",
                    "Sequence[Callable]",
                    "Optional[List[str]]",
                    "typing.Sequence[typing.Callable[, ]]",
                    "Optional[tuple]",
                    "list[str]",
                    "List[str]",
                    "tuple[]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "SimpleNvimGithub.active_issues": {
            "name": "active_issues",
            "location": 79,
            "return": [
                "int",
                "str",
                "Callable",
                "typing.Final",
                "typing.Callable[[], str]",
                "dict[typing.Any, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGithub.active": {
            "name": "active",
            "location": 106,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGithub.setup_github_api": {
            "name": "setup_github_api",
            "location": 113,
            "return": [
                "None",
                "Optional[str]",
                "Github",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGithub.service_not_valid": {
            "name": "service_not_valid",
            "location": 137,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGithub.get_repo_labels": {
            "name": "get_repo_labels",
            "location": 150,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGithub.get_associated_repos": {
            "name": "get_associated_repos",
            "location": 164,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGithub.get_all_open_issues": {
            "name": "get_all_open_issues",
            "location": 181,
            "return": [
                "List[nvim_diary_template.classes.github_issue_class.GitHubIssue]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGithub.format_comments": {
            "name": "format_comments",
            "location": 224,
            "return": [
                "List[nvim_diary_template.classes.github_issue_class.GitHubIssueComment]"
            ],
            "arguments": {
                "self": [],
                "comments": [
                    "list"
                ]
            }
        },
        "SimpleNvimGithub.filter_comments": {
            "name": "filter_comments",
            "location": 252,
            "return": [
                "Tuple[(List[nvim_diary_template.classes.github_issue_class.GitHubIssue], List[Dict[(str, int)]])]"
            ],
            "arguments": {
                "issues": [
                    "List[nvim_diary_template.classes.github_issue_class.GitHubIssue]"
                ],
                "tag": [
                    "str"
                ]
            }
        },
        "SimpleNvimGithub.filter_issues": {
            "name": "filter_issues",
            "location": 301,
            "return": [
                "Tuple[(List[nvim_diary_template.classes.github_issue_class.GitHubIssue], List[int])]"
            ],
            "arguments": {
                "issues": [
                    "List[nvim_diary_template.classes.github_issue_class.GitHubIssue]"
                ],
                "tag": [
                    "str"
                ]
            }
        },
        "SimpleNvimGithub.upload_comments": {
            "name": "upload_comments",
            "location": 347,
            "return": [
                "Tuple[(List[nvim_diary_template.classes.github_issue_class.GitHubIssue], List[Dict[(str, int)]])]"
            ],
            "arguments": {
                "self": [],
                "issues": [
                    "List[nvim_diary_template.classes.github_issue_class.GitHubIssue]"
                ],
                "tag": [
                    "str"
                ]
            }
        },
        "SimpleNvimGithub.upload_issues": {
            "name": "upload_issues",
            "location": 392,
            "return": [
                "Tuple[(List[nvim_diary_template.classes.github_issue_class.GitHubIssue], List[int])]"
            ],
            "arguments": {
                "self": [],
                "issues": [
                    "List[nvim_diary_template.classes.github_issue_class.GitHubIssue]"
                ],
                "tag": [
                    "str"
                ]
            }
        },
        "SimpleNvimGithub.update_comments": {
            "name": "update_comments",
            "location": 431,
            "return": [
                "Tuple[(List[nvim_diary_template.classes.github_issue_class.GitHubIssue], List[Dict[(str, int)]])]"
            ],
            "arguments": {
                "self": [],
                "issues": [
                    "List[nvim_diary_template.classes.github_issue_class.GitHubIssue]"
                ],
                "tag": [
                    "str"
                ]
            }
        },
        "SimpleNvimGithub.update_issues": {
            "name": "update_issues",
            "location": 516,
            "return": [
                "Tuple[(List[nvim_diary_template.classes.github_issue_class.GitHubIssue], List[int])]"
            ],
            "arguments": {
                "self": [],
                "issues": [
                    "List[nvim_diary_template.classes.github_issue_class.GitHubIssue]"
                ],
                "tag": [
                    "str"
                ]
            }
        },
        "SimpleNvimGithub.complete_issues": {
            "name": "complete_issues",
            "location": 568,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "issues": [
                    "List[nvim_diary_template.classes.github_issue_class.GitHubIssue]"
                ]
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/classes/nvim_google_cal_class.py": {
        "SimpleNvimGoogleCal.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nvim": [
                    "bool",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "None",
                    "List[Dict[str, Any]]",
                    "bytes",
                    "list[dict[str, typing.Any]]",
                    "str",
                    "list",
                    "list[]",
                    "dict",
                    "dict[, ]"
                ],
                "options": [
                    "nvim_diary_template.classes.plugin_options.PluginOptions"
                ],
                "service": [
                    "None",
                    "Optional[int]",
                    "int",
                    "Optional[float]",
                    "float",
                    "Optional[bool]"
                ]
            }
        },
        "SimpleNvimGoogleCal.config_path": {
            "name": "config_path",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGoogleCal.active_events": {
            "name": "active_events",
            "location": 73,
            "return": [
                "dict",
                "str",
                "Callable",
                "typing.Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGoogleCal.active": {
            "name": "active",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGoogleCal.setup_google_calendar_api": {
            "name": "setup_google_calendar_api",
            "location": 108,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGoogleCal.service_is_not_ready": {
            "name": "service_is_not_ready",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGoogleCal.filter_calendars": {
            "name": "filter_calendars",
            "location": 143,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGoogleCal.get_all_calendars": {
            "name": "get_all_calendars",
            "location": 155,
            "return": [
                "Union[(Dict[(str, str)], List[str])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGoogleCal.get_events_for_date": {
            "name": "get_events_for_date",
            "location": 175,
            "return": [
                "List[nvim_diary_template.classes.calendar_event_class.CalendarEvent]"
            ],
            "arguments": {
                "self": [],
                "current_date": [
                    "_datetime.date"
                ]
            }
        },
        "SimpleNvimGoogleCal.upload_to_calendar": {
            "name": "upload_to_calendar",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "markdown_events": [
                    "List[nvim_diary_template.classes.calendar_event_class.CalendarEvent]"
                ],
                "diary_date": [
                    "_datetime.date"
                ]
            }
        },
        "SimpleNvimGoogleCal.get_calendar_id": {
            "name": "get_calendar_id",
            "location": 258,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "target_calendar": [
                    "str"
                ]
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/classes/plugin_options.py": {
        "PluginOptions.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nvim": [
                    "str",
                    "None",
                    "Optional[str]",
                    "List[str]",
                    "list[str]",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "type",
                    "typing.Type"
                ]
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/classes/__init__.py": {},
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/helpers/event_helpers.py": {
        "sort_events": {
            "name": "sort_events",
            "location": 13,
            "return": [
                "List[nvim_diary_template.classes.calendar_event_class.CalendarEvent]"
            ],
            "arguments": {
                "events": [
                    "List[nvim_diary_template.classes.calendar_event_class.CalendarEvent]"
                ]
            }
        },
        "format_event": {
            "name": "format_event",
            "location": 23,
            "return": [
                "nvim_diary_template.classes.calendar_event_class.CalendarEvent"
            ],
            "arguments": {
                "event": [
                    "nvim_diary_template.classes.calendar_event_class.CalendarEvent"
                ],
                "format_string": [
                    "str"
                ]
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/helpers/file_helpers.py": {
        "check_cache": {
            "name": "check_cache",
            "location": 29,
            "return": [
                "list[]",
                "str",
                "dict[str, typing.Any]",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "config_path": [
                    "str"
                ],
                "data_name": [
                    "str"
                ],
                "data_age": [
                    "_datetime.timedelta"
                ],
                "fallback_function": [
                    "Callable[([], Any)]"
                ],
                "early_return": [
                    "bool"
                ]
            }
        },
        "set_cache": {
            "name": "set_cache",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "config_path": [
                    "str"
                ],
                "data": [
                    "list"
                ],
                "data_name": [
                    "str"
                ]
            }
        },
        "cache_valid": {
            "name": "cache_valid",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "cache_set_time": [
                    "_datetime.datetime"
                ],
                "cache_max_age": [
                    "_datetime.timedelta"
                ]
            }
        },
        "generate_diary_index": {
            "name": "generate_diary_index",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "options": [
                    "nvim_diary_template.classes.plugin_options.PluginOptions"
                ]
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/helpers/google_calendar_helpers.py": {
        "convert_events": {
            "name": "convert_events",
            "location": 13,
            "return": [
                "List[nvim_diary_template.classes.calendar_event_class.CalendarEvent]"
            ],
            "arguments": {
                "events": [
                    "List[nvim_diary_template.classes.calendar_event_class.CalendarEvent]"
                ],
                "format_string": [
                    "str"
                ]
            }
        },
        "get_time": {
            "name": "get_time",
            "location": 35,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "time_to_convert": [
                    "str"
                ]
            }
        },
        "format_google_events": {
            "name": "format_google_events",
            "location": 50,
            "return": [
                "List[nvim_diary_template.classes.calendar_event_class.CalendarEvent]"
            ],
            "arguments": {
                "events_list": [
                    "List[Dict[(str, Any)]]"
                ],
                "diary_date": [
                    "str"
                ]
            }
        },
        "create_google_event": {
            "name": "create_google_event",
            "location": 84,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "event": [
                    "nvim_diary_template.classes.calendar_event_class.CalendarEvent"
                ],
                "timezone": [
                    "str"
                ]
            }
        },
        "get_calendar_objects": {
            "name": "get_calendar_objects",
            "location": 100,
            "return": [
                "List[nvim_diary_template.classes.calendar_event_class.CalendarEvent]"
            ],
            "arguments": {
                "events": [
                    "List[Union[(nvim_diary_template.classes.calendar_event_class.CalendarEvent, Dict[(str, Any)])]]"
                ]
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/helpers/issue_helpers.py": {
        "insert_edit_tag": {
            "name": "insert_edit_tag",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "nvim": [
                    "int",
                    "pynvim.Nvim",
                    "typing.Sequence[int]",
                    "str",
                    "None",
                    "Optional[Sequence[int]]",
                    "Optional[int]"
                ],
                "location": [
                    "str"
                ]
            }
        },
        "insert_new_issue": {
            "name": "insert_new_issue",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "nvim": [
                    "str",
                    "pynvim.Nvim",
                    "int",
                    "dict[str, int]",
                    "dict[, ]",
                    "Dict[str, int]",
                    "dict"
                ],
                "options": [
                    "nvim_diary_template.classes.plugin_options.PluginOptions"
                ]
            }
        },
        "insert_new_comment": {
            "name": "insert_new_comment",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "nvim": [
                    "str",
                    "pynvim.Nvim",
                    "float",
                    "int"
                ]
            }
        },
        "toggle_issue_completion": {
            "name": "toggle_issue_completion",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "nvim": [
                    "int",
                    "pynvim.Nvim"
                ]
            }
        },
        "check_markdown_style": {
            "name": "check_markdown_style",
            "location": 239,
            "return": [
                "str"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "desired_style": [
                    "str"
                ]
            }
        },
        "vimwiki_to_github_process": {
            "name": "vimwiki_to_github_process",
            "location": 257,
            "return": [
                "str"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "github_to_vimwiki_process": {
            "name": "github_to_vimwiki_process",
            "location": 277,
            "return": [
                "str"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "convert_utc_timezone": {
            "name": "convert_utc_timezone",
            "location": 292,
            "return": [
                "str"
            ],
            "arguments": {
                "passed_datetime": [
                    "_datetime.datetime"
                ],
                "target": [
                    "str"
                ]
            }
        },
        "get_latest_update": {
            "name": "get_latest_update",
            "location": 304,
            "return": [
                "str"
            ],
            "arguments": {
                "comments": [
                    "List[nvim_diary_template.classes.github_issue_class.GitHubIssueComment]"
                ]
            }
        },
        "sort_issues": {
            "name": "sort_issues",
            "location": 323,
            "return": [
                "List[nvim_diary_template.classes.github_issue_class.GitHubIssue]"
            ],
            "arguments": {
                "options": [
                    "nvim_diary_template.classes.plugin_options.PluginOptions"
                ],
                "issues": [
                    "List[nvim_diary_template.classes.github_issue_class.GitHubIssue]"
                ]
            }
        },
        "sort_completion_state": {
            "name": "sort_completion_state",
            "location": 345,
            "return": [
                "int"
            ],
            "arguments": {
                "options": [
                    "nvim_diary_template.classes.plugin_options.PluginOptions"
                ],
                "issue": [
                    "nvim_diary_template.classes.github_issue_class.GitHubIssue"
                ]
            }
        },
        "get_github_objects": {
            "name": "get_github_objects",
            "location": 373,
            "return": [
                "List[nvim_diary_template.classes.github_issue_class.GitHubIssue]"
            ],
            "arguments": {
                "issues": [
                    "List[Union[(nvim_diary_template.classes.github_issue_class.GitHubIssue, Dict[(str, Any)])]]"
                ]
            }
        },
        "split_comment": {
            "name": "split_comment",
            "location": 412,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "comment": [
                    "str"
                ]
            }
        },
        "get_issue_index": {
            "name": "get_issue_index",
            "location": 431,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "issues": [
                    "List[nvim_diary_template.classes.github_issue_class.GitHubIssue]"
                ],
                "target_number": [
                    "int"
                ]
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/helpers/markdown_helpers.py": {
        "sort_markdown_events": {
            "name": "sort_markdown_events",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "nvim": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "metrics_backend.utils.ChannelIdentifier",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ]
            }
        },
        "format_markdown_events": {
            "name": "format_markdown_events",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "nvim": [
                    "dict[str, str]",
                    "Optional[Dict[str, str]]",
                    "None",
                    "Dict[str, Any]",
                    "metrics_backend.utils.ChannelIdentifier"
                ]
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/helpers/neovim_helpers.py": {
        "is_buffer_empty": {
            "name": "is_buffer_empty",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "nvim": [
                    "str",
                    "typing.Type",
                    "Type",
                    "dict[str, typing.Any]",
                    "Type[T]",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_buffer_contents": {
            "name": "get_buffer_contents",
            "location": 22,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "nvim": [
                    "str",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "set_buffer_contents": {
            "name": "set_buffer_contents",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "nvim": [
                    "int",
                    "bytes",
                    "float",
                    "bool"
                ],
                "data": [
                    "List[str]"
                ]
            }
        },
        "set_line_content": {
            "name": "set_line_content",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "nvim": [
                    "int",
                    "bytes",
                    "typing.Match",
                    "Match[str]",
                    "None",
                    "Optional[bytes]",
                    "bool"
                ],
                "data": [
                    "List[str]"
                ],
                "line_index": [
                    "int"
                ],
                "line_offset": [
                    "int"
                ]
            }
        },
        "get_section_line": {
            "name": "get_section_line",
            "location": 66,
            "return": [
                "int"
            ],
            "arguments": {
                "buffer_contents": [
                    "List[str]"
                ],
                "section_line": [
                    "str"
                ]
            }
        },
        "get_next_heading_of_level": {
            "name": "get_next_heading_of_level",
            "location": 86,
            "return": [
                "int"
            ],
            "arguments": {
                "buffer_contents": [
                    "List[str]"
                ],
                "level": [
                    "int"
                ]
            }
        },
        "buffered_info_message": {
            "name": "buffered_info_message",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "nvim": [
                    "str",
                    "IO",
                    "bytes"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "get_diary_date": {
            "name": "get_diary_date",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "nvim": [
                    "bytes",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/helpers/__init__.py": {},
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/tests/debug_plugin.py": {},
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/tests/test_event_helpers.py": {
        "event_helpersTest.test_sort_events": {
            "name": "test_sort_events",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "event_helpersTest.test_format_event": {
            "name": "test_format_event",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/tests/test_file_helpers.py": {
        "file_helpersTest.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "file_helpersTest.tearDown": {
            "name": "tearDown",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "file_helpersTest.test_check_cache": {
            "name": "test_check_cache",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "file_helpersTest.test_check_cache.fallback": {
            "name": "fallback",
            "location": 32,
            "return": [
                "dict[typing.Text, list[typing.Text]]"
            ],
            "arguments": {}
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/tests/test_google_calendar_helpers.py": {
        "google_calendar_helpersTest.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "google_calendar_helpersTest.test_convert_events": {
            "name": "test_convert_events",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "google_calendar_helpersTest.test_format_google_events": {
            "name": "test_format_google_events",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "google_calendar_helpersTest.test_create_google_event": {
            "name": "test_create_google_event",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "google_calendar_helpersTest.test_get_calendar_objects": {
            "name": "test_get_calendar_objects",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/tests/test_issue_helpers.py": {
        "issue_helpersTest.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "issue_helpersTest.test_insert_edit_tag": {
            "name": "test_insert_edit_tag",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "issue_helpersTest.test_insert_new_issue": {
            "name": "test_insert_new_issue",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "issue_helpersTest.test_insert_new_comment": {
            "name": "test_insert_new_comment",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "issue_helpersTest.test_insert_new_issue_in_group": {
            "name": "test_insert_new_issue_in_group",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "issue_helpersTest.test_insert_new_group_comment": {
            "name": "test_insert_new_group_comment",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "issue_helpersTest.test_toggle_issue_completion": {
            "name": "test_toggle_issue_completion",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "issue_helpersTest.test_check_markdown_style": {
            "name": "test_check_markdown_style",
            "location": 524,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "issue_helpersTest.test_sort_issues": {
            "name": "test_sort_issues",
            "location": 561,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "issue_helpersTest.test_get_github_objects": {
            "name": "test_get_github_objects",
            "location": 633,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "issue_helpersTest.test_get_latest_update": {
            "name": "test_get_latest_update",
            "location": 720,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "issue_helpersTest.test_split_comment": {
            "name": "test_split_comment",
            "location": 753,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/tests/test_make_issues.py": {
        "make_issuesTest.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "make_issuesTest.set_buffer": {
            "name": "set_buffer",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "make_issuesTest.test_produce_issue_markdown": {
            "name": "test_produce_issue_markdown",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "make_issuesTest.test_remove_tag_from_issues": {
            "name": "test_remove_tag_from_issues",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "make_issuesTest.test_set_issues_from_issues_list": {
            "name": "test_set_issues_from_issues_list",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "make_issuesTest.test_set_issues_from_issues_list_with_groups": {
            "name": "test_set_issues_from_issues_list_with_groups",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/tests/test_make_markdown_file.py": {
        "make_markdown_fileTest.test_make_diary": {
            "name": "test_make_diary",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "make_markdown_fileTest.test_generate_markdown_metadata": {
            "name": "test_generate_markdown_metadata",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/tests/test_make_schedule.py": {
        "make_scheduleTest.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "make_scheduleTest.set_buffer": {
            "name": "set_buffer",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "make_scheduleTest.test_produce_schedule_markdown": {
            "name": "test_produce_schedule_markdown",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "make_scheduleTest.test_set_schedule_from_events_list": {
            "name": "test_set_schedule_from_events_list",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/tests/test_markdown_helpers.py": {
        "markdown_helpersTest.test_sort_markdown_events": {
            "name": "test_sort_markdown_events",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "markdown_helpersTest.test_format_markdown_events": {
            "name": "test_format_markdown_events",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/tests/test_neovim_helpers.py": {
        "neovim_helpersTest.setUp": {
            "name": "setUp",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "neovim_helpersTest.test_is_buffer_empty": {
            "name": "test_is_buffer_empty",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "neovim_helpersTest.test_get_buffer_contents": {
            "name": "test_get_buffer_contents",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "neovim_helpersTest.test_set_buffer_contents": {
            "name": "test_set_buffer_contents",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "neovim_helpersTest.test_set_line_content": {
            "name": "test_set_line_content",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "neovim_helpersTest.test_get_section_line": {
            "name": "test_get_section_line",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "neovim_helpersTest.test_buffered_info_message": {
            "name": "test_buffered_info_message",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "neovim_helpersTest.test_get_diary_date": {
            "name": "test_get_diary_date",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/tests/test_nvim_github_class.py": {
        "SimpleNvimGithubTest.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGithubTest.test_get_all_open_issues": {
            "name": "test_get_all_open_issues",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGithubTest.test_filter_comments": {
            "name": "test_filter_comments",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGithubTest.test_filter_issues": {
            "name": "test_filter_issues",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGithubTest.test_upload_comments": {
            "name": "test_upload_comments",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGithubTest.test_upload_issues": {
            "name": "test_upload_issues",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGithubTest.test_update_comments_body": {
            "name": "test_update_comments_body",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGithubTest.test_update_comment_normal": {
            "name": "test_update_comment_normal",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGithubTest.test_update_issues": {
            "name": "test_update_issues",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGithubTest.test_complete_issues": {
            "name": "test_complete_issues",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGithubTest.test_missing_service": {
            "name": "test_missing_service",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGithubTest.test_service_not_valid": {
            "name": "test_service_not_valid",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/tests/test_nvim_google_cal_class.py": {
        "SimpleNvimGoogleCalTest.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGoogleCalTest.test_get_all_open_events": {
            "name": "test_get_all_open_events",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGoogleCalTest.test_service_is_not_ready": {
            "name": "test_service_is_not_ready",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGoogleCalTest.test_get_all_calendars": {
            "name": "test_get_all_calendars",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGoogleCalTest.test_filter_calendars": {
            "name": "test_filter_calendars",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGoogleCalTest.test_upload_to_calendar": {
            "name": "test_upload_to_calendar",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNvimGoogleCalTest.test_get_calendar_id": {
            "name": "test_get_calendar_id",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/tests/test_parse_markdown.py": {
        "parse_markdownTest.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "parse_markdownTest.test_remove_events_not_from_today": {
            "name": "test_remove_events_not_from_today",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "parse_markdownTest.test_parse_markdown_file_for_events": {
            "name": "test_parse_markdown_file_for_events",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "parse_markdownTest.test_parse_markdown_file_for_issues": {
            "name": "test_parse_markdown_file_for_issues",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "parse_markdownTest.test_parse_markdown_file_for_grouped_issues": {
            "name": "test_parse_markdown_file_for_grouped_issues",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "parse_markdownTest.test_combine_events": {
            "name": "test_combine_events",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "parse_markdownTest.test_combine_issues": {
            "name": "test_combine_issues",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/tests/__init__.py": {},
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/tests/mocks/mock_gcal.py": {
        "get_mock_gcal": {
            "name": "get_mock_gcal",
            "location": 11,
            "return": [
                "Tuple[(MockGCalService, nvim_diary_template.classes.plugin_options.PluginOptions)]"
            ],
            "arguments": {}
        },
        "MockGCalService.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockGCalService.get_events_for_date": {
            "name": "get_events_for_date",
            "location": 64,
            "return": [
                "List[nvim_diary_template.classes.calendar_event_class.CalendarEvent]"
            ],
            "arguments": {
                "self": [],
                "date_today": [
                    "datetime.date"
                ]
            }
        },
        "MockGCalService.calendarList": {
            "name": "calendarList",
            "location": 67,
            "return": [
                "MockGCalFunc"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockGCalService.events": {
            "name": "events",
            "location": 70,
            "return": [
                "MockGCalFunc"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockGCalFunc.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_json": [
                    "dict"
                ]
            }
        },
        "MockGCalFunc.list": {
            "name": "list",
            "location": 84,
            "return": [
                "MockGCalFunc"
            ],
            "arguments": {
                "self": [
                    "_TMockGCalFunc"
                ]
            }
        },
        "MockGCalFunc.insert": {
            "name": "insert",
            "location": 87,
            "return": [
                "MockGCalFunc"
            ],
            "arguments": {
                "self": [
                    "_TMockGCalFunc"
                ]
            }
        },
        "MockGCalFunc.execute": {
            "name": "execute",
            "location": 90,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/tests/mocks/mock_github.py": {
        "get_mock_github": {
            "name": "get_mock_github",
            "location": 15,
            "return": [
                "Tuple[(MockGitHubService, nvim_diary_template.classes.plugin_options.PluginOptions)]"
            ],
            "arguments": {}
        },
        "MockGitHubService.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockGitHubService.get_repo": {
            "name": "get_repo",
            "location": 72,
            "return": [
                "MockGitHubRepo"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "MockGitHubService.get_user": {
            "name": "get_user",
            "location": 75,
            "return": [
                "MockGitHubUser"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "MockGitHubRepo.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockGitHubRepo.get_labels": {
            "name": "get_labels",
            "location": 85,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockGitHubRepo.get_issues": {
            "name": "get_issues",
            "location": 88,
            "return": [
                "List[MockGitHubIssue]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "MockGitHubRepo.get_issue": {
            "name": "get_issue",
            "location": 91,
            "return": [
                "MockGitHubIssue"
            ],
            "arguments": {
                "self": [],
                "issue_number": [
                    "int"
                ]
            }
        },
        "MockGitHubRepo.create_issue": {
            "name": "create_issue",
            "location": 94,
            "return": [
                "MockGitHubIssue"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str"
                ],
                "body": [
                    "str"
                ],
                "labels": [
                    "List[str]"
                ]
            }
        },
        "MockGitHubIssue.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int"
                ],
                "title": [
                    "str"
                ],
                "complete": [
                    "bool"
                ],
                "body": [
                    "str"
                ],
                "labels": [
                    "List[MockGitHubLabel]"
                ],
                "comments": [
                    "List[MockGitHubComment]"
                ],
                "updated_at": [
                    "_datetime.datetime"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "MockGitHubIssue.get_comments": {
            "name": "get_comments",
            "location": 126,
            "return": [
                "List[MockGitHubComment]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockGitHubIssue.edit": {
            "name": "edit",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str"
                ],
                "title": [
                    "str"
                ],
                "labels": [
                    "List[str]"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "MockGitHubIssue.create_comment": {
            "name": "create_comment",
            "location": 144,
            "return": [
                "MockGitHubComment"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str"
                ]
            }
        },
        "MockGitHubComment.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int"
                ],
                "body": [
                    "str"
                ],
                "updated_at": [
                    "_datetime.datetime"
                ]
            }
        },
        "MockGitHubComment.edit": {
            "name": "edit",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str"
                ]
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/tests/mocks/mock_nvim.py": {
        "MockNvim.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockNvim.err_write": {
            "name": "err_write",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "MockNvim.out_write": {
            "name": "out_write",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "MockNvim.command": {
            "name": "command",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str"
                ]
            }
        },
        "MockNvimApi.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nvim_mock": [
                    "MockNvim"
                ]
            }
        },
        "MockNvimApi.buf_set_lines": {
            "name": "buf_set_lines",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "int"
                ],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ],
                "strict_indexing": [
                    "bool"
                ],
                "replacement": [
                    "List[str]"
                ]
            }
        },
        "MockNvimApi.buf_get_lines": {
            "name": "buf_get_lines",
            "location": 59,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "int"
                ],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ],
                "strict_indexing": [
                    "bool"
                ]
            }
        },
        "MockNvimCurrent.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockNvimBuffer.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockNvimWindow.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/tests/mocks/__init__.py": {},
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/utils/constants.py": {},
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/utils/make_issues.py": {
        "format_issues": {
            "name": "format_issues",
            "location": 24,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "options": [
                    "nvim_diary_template.classes.plugin_options.PluginOptions"
                ],
                "issues": [
                    "List[nvim_diary_template.classes.github_issue_class.GitHubIssue]"
                ],
                "should_sort": [
                    "bool"
                ]
            }
        },
        "format_issue_comments": {
            "name": "format_issue_comments",
            "location": 89,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "comments": [
                    "List[nvim_diary_template.classes.github_issue_class.GitHubIssueComment]"
                ]
            }
        },
        "produce_issue_markdown": {
            "name": "produce_issue_markdown",
            "location": 123,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "options": [
                    "nvim_diary_template.classes.plugin_options.PluginOptions"
                ],
                "issue_list": [
                    "List[nvim_diary_template.classes.github_issue_class.GitHubIssue]"
                ]
            }
        },
        "remove_tag_from_issues": {
            "name": "remove_tag_from_issues",
            "location": 140,
            "return": [
                "List[nvim_diary_template.classes.github_issue_class.GitHubIssue]"
            ],
            "arguments": {
                "issues": [
                    "List[nvim_diary_template.classes.github_issue_class.GitHubIssue]"
                ],
                "tag": [
                    "str"
                ],
                "scope": [
                    "str"
                ],
                "ignore_list": [
                    "Optional[List[Union[(int, Dict[(str, int)])]]]"
                ]
            }
        },
        "set_issues_from_issues_list": {
            "name": "set_issues_from_issues_list",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "nvim": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "options": [
                    "nvim_diary_template.classes.plugin_options.PluginOptions"
                ],
                "issues": [
                    "List[nvim_diary_template.classes.github_issue_class.GitHubIssue]"
                ],
                "should_sort": [
                    "bool"
                ]
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/utils/make_markdown_file.py": {
        "make_diary": {
            "name": "make_diary",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "nvim": [],
                "options": [
                    "nvim_diary_template.classes.plugin_options.PluginOptions"
                ],
                "gcal_service": [
                    "nvim_diary_template.classes.nvim_google_cal_class.SimpleNvimGoogleCal"
                ],
                "github_service": [
                    "nvim_diary_template.classes.nvim_github_class.SimpleNvimGithub"
                ],
                "auto_command": [
                    "bool"
                ]
            }
        },
        "generate_markdown_metadata": {
            "name": "generate_markdown_metadata",
            "location": 97,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "metadata_obj": [
                    "Dict[(str, str)]"
                ]
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/utils/make_schedule.py": {
        "format_events_lines": {
            "name": "format_events_lines",
            "location": 16,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "events": [
                    "List[nvim_diary_template.classes.calendar_event_class.CalendarEvent]"
                ]
            }
        },
        "produce_schedule_markdown": {
            "name": "produce_schedule_markdown",
            "location": 39,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "event_list": [
                    "List[nvim_diary_template.classes.calendar_event_class.CalendarEvent]"
                ]
            }
        },
        "set_schedule_from_events_list": {
            "name": "set_schedule_from_events_list",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "nvim": [
                    "str",
                    "pynvim.Nvim",
                    "int",
                    "dict[, ]",
                    "dict"
                ],
                "events": [
                    "List[nvim_diary_template.classes.calendar_event_class.CalendarEvent]"
                ],
                "strict_indexing": [
                    "bool"
                ]
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/utils/parse_markdown.py": {
        "parse_buffer_events": {
            "name": "parse_buffer_events",
            "location": 43,
            "return": [
                "List[nvim_diary_template.classes.calendar_event_class.CalendarEvent]"
            ],
            "arguments": {
                "event_lines": [
                    "List[str]"
                ],
                "format_string": [
                    "str"
                ],
                "diary_date": [
                    "str"
                ]
            }
        },
        "parse_buffer_issues": {
            "name": "parse_buffer_issues",
            "location": 104,
            "return": [
                "List[nvim_diary_template.classes.github_issue_class.GitHubIssue]"
            ],
            "arguments": {
                "issue_lines": [
                    "List[str]"
                ]
            }
        },
        "remove_events_not_from_today": {
            "name": "remove_events_not_from_today",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "nvim": [
                    "dict[str, typing.Any]",
                    "int",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.TokenAddress",
                    "Dict[str, Any]"
                ]
            }
        },
        "parse_markdown_file_for_events": {
            "name": "parse_markdown_file_for_events",
            "location": 236,
            "return": [
                "List[nvim_diary_template.classes.calendar_event_class.CalendarEvent]"
            ],
            "arguments": {
                "nvim": [
                    "str"
                ],
                "format_string": [
                    "str"
                ]
            }
        },
        "parse_markdown_file_for_issues": {
            "name": "parse_markdown_file_for_issues",
            "location": 257,
            "return": [
                "List[nvim_diary_template.classes.github_issue_class.GitHubIssue]"
            ],
            "arguments": {
                "nvim": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "combine_events": {
            "name": "combine_events",
            "location": 279,
            "return": [
                "List[nvim_diary_template.classes.calendar_event_class.CalendarEvent]"
            ],
            "arguments": {
                "markdown_events": [
                    "List[nvim_diary_template.classes.calendar_event_class.CalendarEvent]"
                ],
                "google_events": [
                    "List[nvim_diary_template.classes.calendar_event_class.CalendarEvent]"
                ]
            }
        },
        "combine_issues": {
            "name": "combine_issues",
            "location": 308,
            "return": [
                "List[nvim_diary_template.classes.github_issue_class.GitHubIssue]"
            ],
            "arguments": {
                "nvim": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "markdown_issues": [
                    "List[nvim_diary_template.classes.github_issue_class.GitHubIssue]"
                ],
                "api_issues": [
                    "List[nvim_diary_template.classes.github_issue_class.GitHubIssue]"
                ]
            }
        }
    },
    "nvim_diary_template-master/rplugin/python3/nvim_diary_template/utils/__init__.py": {},
    "nvim_diary_template-master/tools/generate_google_credentials.py": {
        "generate_credentials": {
            "name": "generate_credentials",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
{
    "nylas-api-demo-master/setup.py": {},
    "nylas-api-demo-master/__init__.py": {},
    "nylas-api-demo-master/api/cache.py": {
        "BaseCache.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_len": [
                    "int"
                ],
                "max_age_seconds": [
                    "int"
                ]
            }
        },
        "BaseCache.add": {
            "name": "add",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str"
                ],
                "item": [
                    "int",
                    "str",
                    "None",
                    "Union[str, int]",
                    "Optional[str]"
                ]
            }
        },
        "BaseCache.get": {
            "name": "get",
            "location": 23,
            "return": [
                "None",
                "bool",
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str"
                ]
            }
        },
        "BaseCache.get_if_fresh": {
            "name": "get_if_fresh",
            "location": 29,
            "return": [
                "None",
                "bool",
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str"
                ]
            }
        },
        "BaseCache.set_refresh": {
            "name": "set_refresh",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str"
                ]
            }
        },
        "BaseCache.update": {
            "name": "update",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str"
                ],
                "item": [
                    "bytes",
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ObjectCache.add": {
            "name": "add",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str"
                ],
                "item": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ObjectCache.get": {
            "name": "get",
            "location": 55,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str"
                ]
            }
        },
        "ObjectCache.get_if_fresh": {
            "name": "get_if_fresh",
            "location": 58,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str"
                ]
            }
        },
        "ObjectCache.update": {
            "name": "update",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str"
                ],
                "item": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ObjectListCache.add": {
            "name": "add",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str"
                ],
                "item": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ObjectListCache.get": {
            "name": "get",
            "location": 71,
            "return": [
                "Optional[List[Dict[(str, Any)]]]"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str"
                ]
            }
        },
        "ObjectListCache.get_if_fresh": {
            "name": "get_if_fresh",
            "location": 74,
            "return": [
                "Optional[List[Dict[(str, Any)]]]"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str"
                ]
            }
        },
        "ObjectListCache.update": {
            "name": "update",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str"
                ],
                "item": [
                    "List[Dict[(str, Any)]]"
                ]
            }
        }
    },
    "nylas-api-demo-master/api/config.py": {},
    "nylas-api-demo-master/api/index.py": {},
    "nylas-api-demo-master/api/model.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "first_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "last_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "email": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "password": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "nylas_access_token": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "User.serialize": {
            "name": "serialize",
            "location": 43,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.set_password": {
            "name": "set_password",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ]
            }
        },
        "User.check_password": {
            "name": "check_password",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ]
            }
        }
    },
    "nylas-api-demo-master/api/server.py": {
        "get_nylas_api": {
            "name": "get_nylas_api",
            "location": 31,
            "return": [
                "NylasAPI",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {}
        },
        "check_authorization": {
            "name": "check_authorization",
            "location": 39,
            "return": [
                "Optional[str]",
                "None",
                "str",
                "tuple[int]"
            ],
            "arguments": {}
        },
        "login": {
            "name": "login",
            "location": 50,
            "return": [
                "tuple[int]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "logout": {
            "name": "logout",
            "location": 70,
            "return": [
                "tuple[int]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "get_calendars": {
            "name": "get_calendars",
            "location": 76,
            "return": [
                "tuple[]",
                "int",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "create_event": {
            "name": "create_event",
            "location": 83,
            "return": [
                "tuple[]",
                "Dict[str, Any]",
                "int",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {}
        },
        "get_event": {
            "name": "get_event",
            "location": 95,
            "return": [
                "tuple[int]",
                "Dict[str, Any]",
                "tuple[]",
                "List['ValidatorRecord']",
                "List[str]"
            ],
            "arguments": {
                "event_id": [
                    "str",
                    "int"
                ]
            }
        },
        "update_event": {
            "name": "update_event",
            "location": 109,
            "return": [
                "tuple[]",
                "dict",
                "Optional[str]",
                "Response"
            ],
            "arguments": {
                "event_id": [
                    "int",
                    "str"
                ]
            }
        },
        "get_messages": {
            "name": "get_messages",
            "location": 120,
            "return": [
                "str",
                "tuple[int]",
                "Hashable",
                "tuple[]"
            ],
            "arguments": {}
        },
        "send_email": {
            "name": "send_email",
            "location": 138,
            "return": [
                "tuple[]",
                "Dict[str, Any]",
                "bool",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {}
        },
        "get_thread": {
            "name": "get_thread",
            "location": 150,
            "return": [
                "tuple[]",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "thread_id": [
                    "int"
                ]
            }
        },
        "get_threads": {
            "name": "get_threads",
            "location": 157,
            "return": [
                "tuple[]",
                "int",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "update_user": {
            "name": "update_user",
            "location": 165,
            "return": [
                "tuple[int]",
                "Generator",
                "Optional[bool]",
                "Optional[int]",
                "float",
                "dict"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "bool"
                ]
            }
        },
        "receive_webhook": {
            "name": "receive_webhook",
            "location": 194,
            "return": [
                "tuple[int]",
                "list",
                "str",
                "bytes"
            ],
            "arguments": {}
        },
        "validate_webhook": {
            "name": "validate_webhook",
            "location": 220,
            "return": [
                "tuple[int]",
                "Dict[str, Any]",
                "Sequence[Sequence[str]]",
                "dict",
                "str"
            ],
            "arguments": {}
        }
    },
    "nylas-api-demo-master/api/__init__.py": {},
    "nylas-api-demo-master/api/nylas/nylas_api.py": {
        "NylasAPI.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nylas_access_token": [
                    "str"
                ]
            }
        },
        "NylasAPI._construct_headers": {
            "name": "_construct_headers",
            "location": 25,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "Optional[Dict[(str, str)]]"
                ]
            }
        },
        "NylasAPI._call_api_endpoint": {
            "name": "_call_api_endpoint",
            "location": 30,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str"
                ],
                "method": [
                    "str"
                ],
                "headers": [
                    "Optional[Dict[(str, str)]]"
                ],
                "json": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "NylasAPI.create_event": {
            "name": "create_event",
            "location": 71,
            "return": [
                "Tuple[(Dict[(str, Any)], int)]"
            ],
            "arguments": {
                "self": [],
                "json": [
                    "dict"
                ]
            }
        },
        "NylasAPI.get_calendars": {
            "name": "get_calendars",
            "location": 78,
            "return": [
                "Tuple[(List[Dict[(str, Any)]], int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NylasAPI.get_event": {
            "name": "get_event",
            "location": 85,
            "return": [
                "Tuple[(Dict[(str, Any)], int)]"
            ],
            "arguments": {
                "self": [],
                "event_id": [
                    "str"
                ]
            }
        },
        "NylasAPI.get_messages": {
            "name": "get_messages",
            "location": 93,
            "return": [
                "Tuple[(List[Dict[(str, Any)]], int)]"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "dict"
                ]
            }
        },
        "NylasAPI.get_thread": {
            "name": "get_thread",
            "location": 100,
            "return": [
                "Tuple[(Dict[(str, Any)], int)]"
            ],
            "arguments": {
                "self": [],
                "thread_id": [
                    "str"
                ]
            }
        },
        "NylasAPI.get_threads": {
            "name": "get_threads",
            "location": 108,
            "return": [
                "Tuple[(List[Dict[(str, Any)]], int)]"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "dict"
                ]
            }
        },
        "NylasAPI.send_email": {
            "name": "send_email",
            "location": 115,
            "return": [
                "Tuple[(Dict[(str, Any)], int)]"
            ],
            "arguments": {
                "self": [],
                "json": [
                    "dict"
                ]
            }
        },
        "NylasAPI.update_event": {
            "name": "update_event",
            "location": 122,
            "return": [
                "Tuple[(Dict[(str, Any)], int)]"
            ],
            "arguments": {
                "self": [],
                "event_id": [
                    "str"
                ],
                "json": [
                    "dict"
                ]
            }
        }
    },
    "nylas-api-demo-master/api/nylas/nylas_utils.py": {
        "verify_signature": {
            "name": "verify_signature",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "message": [
                    "Optional[bytes]"
                ],
                "key": [
                    "bytes"
                ],
                "signature": [
                    "str"
                ]
            }
        }
    },
    "nylas-api-demo-master/api/nylas/__init__.py": {},
    "nylas-api-demo-master/api/scripts/nylas_demo_cli.py": {
        "cli": {
            "name": "cli",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "create_tables": {
            "name": "create_tables",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "add_user": {
            "name": "add_user",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "first_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Set[str]",
                    "set[str]"
                ],
                "last_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Set[str]",
                    "set[str]"
                ],
                "email": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Set[str]",
                    "set[str]"
                ],
                "password": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Set[str]",
                    "set[str]"
                ],
                "access_token": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Set[str]",
                    "set[str]"
                ]
            }
        }
    },
    "nylas-api-demo-master/api/scripts/__init__.py": {},
    "nylas-api-demo-master/api/tests/test_server.py": {
        "TestAPI._login_user": {
            "name": "_login_user",
            "location": 11,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_404_authenticated_user": {
            "name": "test_404_authenticated_user",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_404_unauthenticated_user": {
            "name": "test_404_unauthenticated_user",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_login_valid_credentials": {
            "name": "test_login_valid_credentials",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_login_missing_credentials": {
            "name": "test_login_missing_credentials",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_login_invalid_credentials": {
            "name": "test_login_invalid_credentials",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_logout_valid_credentials": {
            "name": "test_logout_valid_credentials",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_logout_invalid_credentials": {
            "name": "test_logout_invalid_credentials",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_create_event_invalid_credentials": {
            "name": "test_create_event_invalid_credentials",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_create_event": {
            "name": "test_create_event",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_get_calendars_invalid_credentials": {
            "name": "test_get_calendars_invalid_credentials",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_get_calendars": {
            "name": "test_get_calendars",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_get_event_invalid_credentials": {
            "name": "test_get_event_invalid_credentials",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_get_event": {
            "name": "test_get_event",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_get_event_invalid_id": {
            "name": "test_get_event_invalid_id",
            "location": 100,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_get_messages_invalid_credentials": {
            "name": "test_get_messages_invalid_credentials",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_get_messages": {
            "name": "test_get_messages",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_get_messages_from_thread": {
            "name": "test_get_messages_from_thread",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_get_thread_invalid_credentials": {
            "name": "test_get_thread_invalid_credentials",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_get_thread": {
            "name": "test_get_thread",
            "location": 139,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_get_threads_invalid_credentials": {
            "name": "test_get_threads_invalid_credentials",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_get_threads": {
            "name": "test_get_threads",
            "location": 153,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_get_threads_with_email": {
            "name": "test_get_threads_with_email",
            "location": 162,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_send_mail_invalid_credentials": {
            "name": "test_send_mail_invalid_credentials",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_send_mail": {
            "name": "test_send_mail",
            "location": 185,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_update_event_invalid_credentials": {
            "name": "test_update_event_invalid_credentials",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_update_event": {
            "name": "test_update_event",
            "location": 199,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_update_user": {
            "name": "test_update_user",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_update_user_bad_user": {
            "name": "test_update_user_bad_user",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_webhook_challenge": {
            "name": "test_webhook_challenge",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_webhook_post_no_login": {
            "name": "test_webhook_post_no_login",
            "location": 233,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "verify_signature_mock": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "TestAPI.test_webhook_post_no_verification": {
            "name": "test_webhook_post_no_verification",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_webhook_post_header_verification": {
            "name": "test_webhook_post_header_verification",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_webhook_event_update": {
            "name": "test_webhook_event_update",
            "location": 254,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_webhook_event_no_update": {
            "name": "test_webhook_event_no_update",
            "location": 302,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_webhook_thread_update": {
            "name": "test_webhook_thread_update",
            "location": 321,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_webhook_thread_no_update": {
            "name": "test_webhook_thread_no_update",
            "location": 372,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nylas-api-demo-master/api/tests/test_utils.py": {
        "NylasApiDemoTest.create_app": {
            "name": "create_app",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NylasApiDemoTest.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NylasApiDemoTest.tearDown": {
            "name": "tearDown",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nylas-api-demo-master/api/tests/__init__.py": {}
}
{
    "ocs-monkey-master/chaos_runner.py": {
        "verify_steady_state": {
            "name": "verify_steady_state",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "get_failure": {
            "name": "get_failure",
            "location": 32,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "types": [
                    "str",
                    "int"
                ]
            }
        },
        "await_mitigation": {
            "name": "await_mitigation",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "instance": [
                    "int",
                    "str",
                    "failure.Failure",
                    "float"
                ],
                "timeout": [
                    "int",
                    "float",
                    "str",
                    "failure.Failure"
                ]
            }
        },
        "await_next_failure": {
            "name": "await_next_failure",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "mttf": [
                    "float",
                    "int"
                ],
                "check_interval": [
                    "float",
                    "int",
                    "List[int]",
                    "List[dict]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 66,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "ocs-monkey-master/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]"
                ]
            }
        },
        "pytest_collection_modifyitems": {
            "name": "pytest_collection_modifyitems",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "str"
                ],
                "items": [
                    "List",
                    "Dict",
                    "str"
                ]
            }
        },
        "load_kubeconfig": {
            "name": "load_kubeconfig",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "storageclass_iterator": {
            "name": "storageclass_iterator",
            "location": 48,
            "return": [
                "int",
                "list"
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        },
        "unique_namespace": {
            "name": "unique_namespace",
            "location": 56,
            "return": [
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "request": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "load_kubeconfig": [
                    "str"
                ]
            }
        },
        "unique_namespace.teardown": {
            "name": "teardown",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ocs-monkey-master/event.py": {
        "Dispatcher.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dispatcher.add": {
            "name": "add",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dispatcher.run": {
            "name": "run",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runtime": [
                    "int",
                    "float"
                ]
            }
        },
        "Event.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "when": [
                    "float",
                    "int"
                ]
            }
        },
        "Event.execute": {
            "name": "execute",
            "location": 103,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.when": {
            "name": "when",
            "location": 114,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.__str__": {
            "name": "__str__",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.__eq__": {
            "name": "__eq__",
            "location": 122,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "Event.__ne__": {
            "name": "__ne__",
            "location": 128,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "Event.__lt__": {
            "name": "__lt__",
            "location": 134,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "Event.__le__": {
            "name": "__le__",
            "location": 140,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "Event.__gt__": {
            "name": "__gt__",
            "location": 146,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "Event.__ge__": {
            "name": "__ge__",
            "location": 152,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "OneShot.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "when": [
                    "float",
                    "int"
                ],
                "action": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "OneShot.execute": {
            "name": "execute",
            "location": 180,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Periodic.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interval": [
                    "int",
                    "float",
                    "bool"
                ],
                "action": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Periodic.execute": {
            "name": "execute",
            "location": 213,
            "return": [
                "List[Periodic]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ocs-monkey-master/failure.py": {
        "Failure.invoke": {
            "name": "invoke",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Failure.repair": {
            "name": "repair",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Failure.mitigated": {
            "name": "mitigated",
            "location": 34,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout_seconds": [
                    "int",
                    "float",
                    "Optional[float]",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Failure.execute": {
            "name": "execute",
            "location": 43,
            "return": [
                "bool",
                "int",
                "Optional[Union[str,Any]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "timeout_seconds": [
                    "int",
                    "Union[int,float]",
                    "Callable"
                ]
            }
        },
        "FailureType.get": {
            "name": "get",
            "location": 78,
            "return": [
                "Failure",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ocs-monkey-master/failure_ocs.py": {
        "CephCluster.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "List[str]",
                    "str",
                    "Dict"
                ]
            }
        },
        "CephCluster._get_cephcluster": {
            "name": "_get_cephcluster",
            "location": 40,
            "return": [
                "Callable",
                "IO[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CephCluster._is_healthy": {
            "name": "_is_healthy",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CephCluster.is_healthy": {
            "name": "is_healthy",
            "location": 58,
            "return": [
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "timeout_seconds": [
                    "int",
                    "float",
                    "Dict[str,str]",
                    "str"
                ]
            }
        },
        "CephCluster.problems": {
            "name": "problems",
            "location": 69,
            "return": [
                "Dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeletePod.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deployment": [
                    "int",
                    "bool",
                    "float"
                ],
                "pod": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "DeletePod.invoke": {
            "name": "invoke",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeletePod.mitigated": {
            "name": "mitigated",
            "location": 123,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "timeout_seconds": [
                    "int",
                    "float",
                    "Optional[float]",
                    "bool",
                    "Union[int,float]"
                ]
            }
        },
        "DeletePod.__str__": {
            "name": "__str__",
            "location": 144,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeletePodType.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "str",
                    "Sequence",
                    "List[str]",
                    "List[List[Any]]",
                    "List[list[Any]]"
                ],
                "labels": [
                    "str",
                    "Sequence",
                    "List[str]",
                    "List[List[Any]]",
                    "List[list[Any]]"
                ],
                "cluster": [
                    "str",
                    "Sequence",
                    "List[str]",
                    "List[List[Any]]",
                    "List[list[Any]]"
                ]
            }
        },
        "DeletePodType.get": {
            "name": "get",
            "location": 155,
            "return": [
                "DeletePod"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeletePodType.__str__": {
            "name": "__str__",
            "location": 192,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ocs-monkey-master/kube.py": {
        "call": {
            "name": "call",
            "location": 26,
            "return": [
                "Dict",
                "Dict[str,str]",
                "Mapping[str,Any]",
                "Dict[str,float]",
                "str",
                "Dict[Tuple[int,...],float]"
            ],
            "arguments": {
                "api": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "create_namespace": {
            "name": "create_namespace",
            "location": 61,
            "return": [
                "dict",
                "Dict[str, str]",
                "Set[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "existing_ok": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "deployment_is_ready": {
            "name": "deployment_is_ready",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "namespace": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "ocs-monkey-master/log_gather.py": {
        "gather": {
            "name": "gather",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "add": {
            "name": "add",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "collector": [
                    "float",
                    "int"
                ]
            }
        },
        "Collector.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "Collector.gather": {
            "name": "gather",
            "location": 19,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "Collector.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ocs-monkey-master/log_gather_ocs.py": {
        "MustGather.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oc": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MustGather.gather": {
            "name": "gather",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "OcsMustGather.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oc": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "OcsMustGather.gather": {
            "name": "gather",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "OcsImageVersions.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oc": [
                    "int",
                    "float",
                    "bool"
                ],
                "ocs_namespace": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "OcsImageVersions.gather": {
            "name": "gather",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "ocs-monkey-master/osio.py": {
        "start": {
            "name": "start",
            "location": 47,
            "return": [
                "List[Creator]"
            ],
            "arguments": {
                "namespace": [
                    "Exception"
                ],
                "storage_classes": [
                    "str",
                    "Optional[bytes]",
                    "bool",
                    "Callable"
                ],
                "access_mode": [
                    "str",
                    "Dict[str,Iterable[Any]]",
                    "Type",
                    "ClassVar",
                    "bool"
                ],
                "interarrival": [
                    "bool",
                    "Callable",
                    "Optional[Any]",
                    "int",
                    "Callable[...,None]"
                ],
                "lifetime": [
                    "int",
                    "str",
                    "List[dict]",
                    "bool"
                ],
                "active": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "BaseException",
                    "logging.Logger"
                ],
                "idle": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "BaseException",
                    "logging.Logger"
                ],
                "kernel_slots": [
                    "Type",
                    "Dict[str,Iterable[Any]]",
                    "Exception",
                    "bool"
                ],
                "kernel_untar": [
                    "Type",
                    "Dict[str,Iterable[Any]]",
                    "Exception",
                    "bool"
                ],
                "kernel_rm": [
                    "Type",
                    "Dict[str,Iterable[Any]]",
                    "Exception",
                    "bool"
                ],
                "workload_image": [
                    "str",
                    "Type",
                    "Union[str,int]",
                    "int"
                ]
            }
        },
        "resume": {
            "name": "resume",
            "location": 111,
            "return": [
                "List[Lifecycle]"
            ],
            "arguments": {
                "namespace": [
                    "str",
                    "int",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ]
            }
        },
        "_matchlabel_from_deployment": {
            "name": "_matchlabel_from_deployment",
            "location": 144,
            "return": [
                "str"
            ],
            "arguments": {
                "deployment": [
                    "Tuple[Union[int,int]]",
                    "Tuple",
                    "float",
                    "Sequence[float]",
                    "Tuple[int,int]"
                ]
            }
        },
        "_pod_start_watcher": {
            "name": "_pod_start_watcher",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "deployment": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "Dict[str,List[str]]"
                ]
            }
        },
        "_pod_stop_watcher": {
            "name": "_pod_stop_watcher",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "deployment": [
                    "str"
                ]
            }
        },
        "_get_workload": {
            "name": "_get_workload",
            "location": 199,
            "return": [
                "Dict[(str, Dict[(str, Dict[(str, Union[(int, str, Dict[(str, Union[(str, Dict[(str, Union[(str, Dict[(str, str)], List[Dict[(str, Union[(str, Dict[(str, Union[(int, str, Dict[(str, List[str])])])], List[Union[(str, Dict[(str, str)])]], _T6)])]])])])])], List[_T2], _T0, _T1)])])])]"
            ],
            "arguments": {
                "ns_name": [
                    "str",
                    "int",
                    "bool",
                    "Union[str,int]"
                ],
                "sc_name": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "access_mode": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "kernel_slots": [
                    "str",
                    "List[int]",
                    "Dict[str,int]",
                    "List[str]"
                ],
                "kernel_untar": [
                    "str",
                    "List[int]",
                    "Dict[str,int]",
                    "List[str]"
                ],
                "kernel_rm": [
                    "str",
                    "List[int]",
                    "Dict[str,int]",
                    "List[str]"
                ],
                "workload_image": [
                    "str",
                    "List[int]",
                    "Dict[str,int]",
                    "List[str]"
                ]
            }
        },
        "UnhealthyDeployment.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "Dict[str,Any]",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Creator.__init__": {
            "name": "__init__",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "int",
                    "None"
                ],
                "storage_class": [
                    "bool",
                    "Set",
                    "str"
                ],
                "access_mode": [
                    "bool",
                    "bytes",
                    "str",
                    "int"
                ],
                "interarrival": [
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "lifetime": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "int",
                    "None"
                ],
                "active": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "int",
                    "None"
                ],
                "idle": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "int",
                    "None"
                ],
                "kernel_slots": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "int",
                    "None"
                ],
                "kernel_untar": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "int",
                    "None"
                ],
                "kernel_rm": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "int",
                    "None"
                ],
                "workload_image": [
                    "str",
                    "int",
                    "float",
                    "List[str]"
                ]
            }
        },
        "Creator.execute": {
            "name": "execute",
            "location": 339,
            "return": [
                "List[Union[(Creator, Lifecycle)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lifecycle.__init__": {
            "name": "__init__",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "when": [
                    "Dict",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "namespace": [
                    "int",
                    "str",
                    "bool"
                ],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Lifecycle._get_deployment": {
            "name": "_get_deployment",
            "location": 406,
            "return": [
                "bool",
                "int",
                "str",
                "Dict[str, Union[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lifecycle._action_initialize": {
            "name": "_action_initialize",
            "location": 413,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "deploy": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "Lifecycle._action_destroy": {
            "name": "_action_destroy",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deploy": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Lifecycle._action_health": {
            "name": "_action_health",
            "location": 444,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "deploy": [
                    "str",
                    "Dict"
                ]
            }
        },
        "Lifecycle._action_idle": {
            "name": "_action_idle",
            "location": 454,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "deploy": [
                    "float"
                ]
            }
        },
        "Lifecycle._update_and_schedule": {
            "name": "_update_and_schedule",
            "location": 480,
            "return": [
                "List[Lifecycle]"
            ],
            "arguments": {
                "self": [],
                "deploy": [
                    "int"
                ]
            }
        },
        "Lifecycle.execute": {
            "name": "execute",
            "location": 507,
            "return": [
                "List[Lifecycle]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ocs-monkey-master/test_kube.py": {
        "test_create_namespace": {
            "name": "test_create_namespace",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exclusive_ns_create": {
            "name": "test_exclusive_ns_create",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_existing_ns_create": {
            "name": "test_existing_ns_create",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_delete_namespace": {
            "name": "_delete_namespace",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "ns_name": [
                    "str",
                    "Dict",
                    "Dict[Union[Any,Any],str]",
                    "bool"
                ]
            }
        }
    },
    "ocs-monkey-master/util.py": {
        "setup_logging": {
            "name": "setup_logging",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "log_dir": [
                    "str"
                ]
            }
        }
    },
    "ocs-monkey-master/workload_runner.py": {
        "set_health": {
            "name": "set_health",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "healthy": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ocs-monkey-master/osio-workload/workload.py": {
        "get_slots": {
            "name": "get_slots",
            "location": 18,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "max_slots": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "do_untar": {
            "name": "do_untar",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "image": [
                    "str"
                ],
                "data_dir": [
                    "str"
                ]
            }
        },
        "do_rm": {
            "name": "do_rm",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "data_dir": [
                    "str",
                    "bytes",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,dict[str,str]]"
                ]
            }
        },
        "rate_to_probability": {
            "name": "rate_to_probability",
            "location": 59,
            "return": [
                "float",
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "rate_per_hour": [
                    "int",
                    "bytes",
                    "IO",
                    "List[str]",
                    "str"
                ],
                "draw_rate": [
                    "int",
                    "bytes",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "_sig_handler": {
            "name": "_sig_handler",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "signum": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "stack": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 80,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    }
}
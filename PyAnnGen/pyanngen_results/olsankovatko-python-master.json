{
    "olsankovatko-python-master/src/manage.py": {},
    "olsankovatko-python-master/src/engine/crates.py": {
        "Court.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "bool",
                    "None",
                    "int",
                    "Type",
                    "Optional[int]",
                    "Type[T]"
                ],
                "is_empty": [
                    "bool",
                    "None",
                    "int",
                    "Type",
                    "Optional[int]",
                    "Type[T]"
                ]
            }
        },
        "Court.identifier": {
            "name": "identifier",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Court.is_empty": {
            "name": "is_empty",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Court.__repr__": {
            "name": "__repr__",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slot.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "time_from": [
                    "bool"
                ]
            }
        },
        "Slot.add_court": {
            "name": "add_court",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "court": [
                    "float",
                    "int"
                ]
            }
        },
        "Slot.get_courts": {
            "name": "get_courts",
            "location": 35,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slot.get_time_from": {
            "name": "get_time_from",
            "location": 38,
            "return": [
                "int",
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slot.__repr__": {
            "name": "__repr__",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Day.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "date": [
                    "datetime.date",
                    "datetime.datetime"
                ]
            }
        },
        "Day.add_slot": {
            "name": "add_slot",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "float",
                    "int"
                ]
            }
        },
        "Day.get_slots": {
            "name": "get_slots",
            "location": 55,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Day.get_date": {
            "name": "get_date",
            "location": 58,
            "return": [
                "Optional[str]",
                "int",
                "str",
                "datetime.datetime",
                "Sequence[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Day.__repr__": {
            "name": "__repr__",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schedule.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schedule.add_day": {
            "name": "add_day",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "day": [
                    "Callable[,T]",
                    "float"
                ]
            }
        },
        "Schedule.get_days": {
            "name": "get_days",
            "location": 72,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schedule.__repr__": {
            "name": "__repr__",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schedule.__eq__": {
            "name": "__eq__",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        }
    },
    "olsankovatko-python-master/src/engine/exceptions.py": {},
    "olsankovatko-python-master/src/engine/parser.py": {
        "Parser.parse_schedule": {
            "name": "parse_schedule",
            "location": 14,
            "return": [
                "engine.crates.Schedule"
            ],
            "arguments": {
                "self": [],
                "html_page": [
                    "float"
                ]
            }
        },
        "Parser.generate_matrix": {
            "name": "generate_matrix",
            "location": 57,
            "return": [
                "Dict[(Any, Dict[(Any, bool)])]"
            ],
            "arguments": {
                "first_slot_time": [
                    "float",
                    "int",
                    "List[int]",
                    "str"
                ],
                "last_slot_time": [
                    "int",
                    "float",
                    "bool"
                ],
                "slot_length": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "court_ids": [
                    "List[str]",
                    "List[int]",
                    "List[bytes]",
                    "int",
                    "str"
                ]
            }
        },
        "Parser.extract_date_string": {
            "name": "extract_date_string",
            "location": 107,
            "return": [
                "str",
                "List[Tuple[str, str]]",
                "dict",
                "List[object]"
            ],
            "arguments": {
                "table_tag": [
                    "str",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "None"
                ]
            }
        },
        "Parser.parse_day_date": {
            "name": "parse_day_date",
            "location": 114,
            "return": [
                "_datetime.date"
            ],
            "arguments": {
                "date_string": [
                    "str"
                ],
                "reference_date": [
                    "str",
                    "int",
                    "None",
                    "Sequence[str]"
                ]
            }
        },
        "Parser.get_schedule_data": {
            "name": "get_schedule_data",
            "location": 129,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "html_page": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Parser.expand_entries": {
            "name": "expand_entries",
            "location": 136,
            "return": [
                "List[Dict[(str, Union[(int, _T2)])]]"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "str",
                    "int",
                    "datetime.datetime",
                    "float",
                    "datetime.date"
                ],
                "end": [
                    "str",
                    "int",
                    "datetime.datetime"
                ],
                "event_id": [
                    "str"
                ]
            }
        },
        "Parser.generate_slots_from_matrix": {
            "name": "generate_slots_from_matrix",
            "location": 154,
            "return": [
                "List[engine.crates.Slot]"
            ],
            "arguments": {
                "self": [],
                "matrix": [
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,dict[str,str]]"
                ]
            }
        }
    },
    "olsankovatko-python-master/src/engine/slot_finder.py": {
        "DesiredSlot.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "court_priorities": [
                    "bool",
                    "float",
                    "str",
                    "Tuple",
                    "int",
                    "Union[str,float]"
                ],
                "start_time": [
                    "float",
                    "int",
                    "datetime.date.time",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "DesiredSlot.court_names": {
            "name": "court_names",
            "location": 12,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DesiredSlot.start_time": {
            "name": "start_time",
            "location": 16,
            "return": [
                "Type[T]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoundSlot.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "court_name": [
                    "str",
                    "List[str]",
                    "float",
                    "Sequence[str]",
                    "bool"
                ],
                "start_time": [
                    "float",
                    "int",
                    "datetime.timedelta"
                ]
            }
        },
        "FoundSlot.court_name": {
            "name": "court_name",
            "location": 26,
            "return": [
                "str",
                "List[Tuple[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoundSlot.start_time": {
            "name": "start_time",
            "location": 30,
            "return": [
                "Type[T]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoundSlot.__repr__": {
            "name": "__repr__",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoundSlot.__eq__": {
            "name": "__eq__",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        },
        "SlotFinder.find_empty_slot": {
            "name": "find_empty_slot",
            "location": 41,
            "return": [
                "Optional[FoundSlot]"
            ],
            "arguments": {
                "self": [],
                "schedule": [
                    "int",
                    "str"
                ],
                "desired_slot": [
                    "str"
                ]
            }
        }
    },
    "olsankovatko-python-master/src/engine/__init__.py": {},
    "olsankovatko-python-master/src/engine/tests/parser_test.py": {
        "ParserTestCase.test_parse_response": {
            "name": "test_parse_response",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_date_parsing": {
            "name": "test_date_parsing",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_slot_finder": {
            "name": "test_slot_finder",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_generate_matrix": {
            "name": "test_generate_matrix",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.provide_slot_finder": {
            "name": "provide_slot_finder",
            "location": 73,
            "return": [
                "List[List[Optional[Union[(engine.slot_finder.DesiredSlot, engine.slot_finder.FoundSlot)]]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.provide_schedule": {
            "name": "provide_schedule",
            "location": 96,
            "return": [
                "engine.crates.Schedule"
            ],
            "arguments": {}
        }
    },
    "olsankovatko-python-master/src/engine/tests/__init__.py": {},
    "olsankovatko-python-master/src/olsankovatko/settings.py": {},
    "olsankovatko-python-master/src/olsankovatko/urls.py": {},
    "olsankovatko-python-master/src/olsankovatko/wsgi.py": {},
    "olsankovatko-python-master/src/olsankovatko/__init__.py": {},
    "olsankovatko-python-master/src/reservations/admin.py": {},
    "olsankovatko-python-master/src/reservations/apps.py": {},
    "olsankovatko-python-master/src/reservations/models.py": {
        "Sport.__str__": {
            "name": "__str__",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Court.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "olsankovatko-python-master/src/reservations/tests.py": {},
    "olsankovatko-python-master/src/reservations/views.py": {},
    "olsankovatko-python-master/src/reservations/__init__.py": {},
    "olsankovatko-python-master/src/reservations/migrations/0001_initial.py": {},
    "olsankovatko-python-master/src/reservations/migrations/0002_auto_20181224_1206.py": {},
    "olsankovatko-python-master/src/reservations/migrations/0003_sport_olsanka_id.py": {},
    "olsankovatko-python-master/src/reservations/migrations/0004_court.py": {},
    "olsankovatko-python-master/src/reservations/migrations/__init__.py": {}
}
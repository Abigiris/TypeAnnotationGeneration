{
    "omnibus-master/setup.py": {
        "_read_about": {
            "name": "_read_about",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_get_static_files": {
            "name": "_get_static_files",
            "location": 37,
            "return": [
                "list"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "omnibus-master/omnibus/c3.py": {
        "merge": {
            "name": "merge",
            "location": 58,
            "return": [
                "list"
            ],
            "arguments": {
                "sequences": [
                    "list",
                    "float",
                    "List[int]",
                    "List[float]",
                    "int"
                ]
            }
        },
        "mro": {
            "name": "mro",
            "location": 86,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [
                    "T",
                    "Pattern",
                    "List[Tuple]"
                ],
                "abcs": []
            }
        },
        "compose_mro": {
            "name": "compose_mro",
            "location": 139,
            "return": [
                "str",
                "Pattern",
                "int",
                "OrderedDict"
            ],
            "arguments": {
                "cls": [
                    "T",
                    "int",
                    "Optional[str]",
                    "bool",
                    "Optional[int]"
                ],
                "types": [
                    "List[T]",
                    "str"
                ]
            }
        },
        "compose_mro.is_related": {
            "name": "is_related",
            "location": 156,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "typ": [
                    "Optional[int]",
                    "Optional[str]",
                    "Match[str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "compose_mro.is_strict_base": {
            "name": "is_strict_base",
            "location": 163,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": [
                    "List[str]"
                ]
            }
        }
    },
    "omnibus-master/omnibus/caches.py": {
        "_make_key": {
            "name": "_make_key",
            "location": 504,
            "return": [
                "str",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "typed": [
                    "bool",
                    "Iterable",
                    "str"
                ],
                "kwd_mark": [
                    "str",
                    "bool",
                    "List[T]",
                    "bytes"
                ],
                "fasttypes": [
                    "str",
                    "type",
                    "bytes"
                ],
                "tuple": [
                    "bool",
                    "int",
                    "Set[str]",
                    "set"
                ],
                "type": [
                    "Set[str]",
                    "List[str]",
                    "set"
                ],
                "len": [
                    "str",
                    "type",
                    "bytes"
                ]
            }
        },
        "ignore": {
            "name": "ignore",
            "location": 536,
            "return": [
                "Ignore"
            ],
            "arguments": {
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "cache": {
            "name": "cache",
            "location": 638,
            "return": [
                "Callable[([Callable], Callable)]"
            ],
            "arguments": {
                "scope": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "typed": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Cache.LRU": {
            "name": "LRU",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "cache": [
                    "int",
                    "str",
                    "logging.LogRecord",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "Cache.LRI": {
            "name": "LRI",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "cache": [
                    "int",
                    "str",
                    "logging.LogRecord",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "Cache.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cache._locked": {
            "name": "_locked",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cache._unlink": {
            "name": "_unlink",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "link": [
                    "str",
                    "Sequence[str]",
                    "dict"
                ]
            }
        },
        "Cache._kill": {
            "name": "_kill",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "link": [
                    "str",
                    "MutableMapping[Any, Any]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Cache._reap": {
            "name": "_reap",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cache.reap": {
            "name": "reap",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cache._get_link": {
            "name": "_get_link",
            "location": 250,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Cache.__getitem__": {
            "name": "__getitem__",
            "location": 280,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Cache._weak_die": {
            "name": "_weak_die",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "dead_ref": [
                    "str",
                    "Optional[List[str]]"
                ],
                "link": [
                    "Cache.Link",
                    "bool",
                    "List[str]",
                    "Callable",
                    "list"
                ],
                "key_ref": [
                    "weakref.ref",
                    "bool",
                    "IO",
                    "List[str]",
                    "str",
                    "Optional[IO]"
                ]
            }
        },
        "Cache._full": {
            "name": "_full",
            "location": 316,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cache.clear": {
            "name": "clear",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cache.__setitem__": {
            "name": "__setitem__",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict"
                ],
                "value": [
                    "bool",
                    "float",
                    "str",
                    "Hashable",
                    "Optional[str]",
                    "Sequence[str]",
                    "Optional[int]"
                ]
            }
        },
        "Cache.__delitem__": {
            "name": "__delitem__",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT",
                    "bytes",
                    "Callable[[T], Any]",
                    "Hashable"
                ]
            }
        },
        "Cache.__len__": {
            "name": "__len__",
            "location": 415,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cache.__contains__": {
            "name": "__contains__",
            "location": 428,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Iterator[str]"
                ]
            }
        },
        "Cache.__iter__": {
            "name": "__iter__",
            "location": 446,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cache.stats": {
            "name": "stats",
            "location": 468,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_HashedSeq.__init__": {
            "name": "__init__",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tup": [
                    "int",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "hasher": [
                    "str",
                    "float",
                    "int",
                    "Dict[str, int]"
                ]
            }
        },
        "_HashedSeq.__hash__": {
            "name": "__hash__",
            "location": 500,
            "return": [
                "int",
                "Optional[int]",
                "bool",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ignore.__init__": {
            "name": "__init__",
            "location": 530,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "enum.Enum",
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "_CacheDescriptor.__init__": {
            "name": "__init__",
            "location": 542,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "T"
                ],
                "scope": [
                    "List[str]",
                    "dict",
                    "Iterable[T]",
                    "Optional[basilisp.lang.interfaces.IPersistentMap]"
                ],
                "typed": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_CacheDescriptor.__set_name__": {
            "name": "__set_name__",
            "location": 561,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "Type",
                    "Type['Signature']",
                    "str"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "_CacheDescriptor._static": {
            "name": "_static",
            "location": 566,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CacheDescriptor._build": {
            "name": "_build",
            "location": 571,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "bool",
                    "list",
                    "Iterable[str]"
                ],
                "cache": [
                    "bool",
                    "list",
                    "Iterable[str]"
                ]
            }
        },
        "_CacheDescriptor.__get__": {
            "name": "__get__",
            "location": 600,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "int",
                    "Tuple[int, int]",
                    "MutableMapping[str, Any]"
                ],
                "owner": [
                    "str",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "_CacheDescriptor.__call__": {
            "name": "__call__",
            "location": 633,
            "return": [
                "Optional[Dict[str, str]]",
                "Dict[str, Any]",
                "Mapping[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "cache.inner": {
            "name": "inner",
            "location": 646,
            "return": [
                "tuple"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "Optional[Union[str, Any]]"
                ]
            }
        },
        "Cache._get_link.fail": {
            "name": "fail",
            "location": 255,
            "return": [],
            "arguments": {}
        },
        "_CacheDescriptor._build.miss": {
            "name": "miss",
            "location": 572,
            "return": [
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "key": [
                    "int",
                    "T"
                ],
                "result": [
                    "dict",
                    "T",
                    "str",
                    "Optional[str]",
                    "list",
                    "Union[str, dict]"
                ]
            }
        },
        "_CacheDescriptor._build.inner": {
            "name": "inner",
            "location": 590,
            "return": [
                "List[str]",
                "dict",
                "bool",
                "str",
                "List[\"TaskNode\"]"
            ],
            "arguments": {}
        },
        "Cache.Link.__repr__": {
            "name": "__repr__",
            "location": 63,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CacheDescriptor.__get__.trampoline": {
            "name": "trampoline",
            "location": 617,
            "return": [
                "str",
                "bool",
                "List[Union[int, Any]]",
                "List[Union[int, str]]"
            ],
            "arguments": {
                "this": [
                    "tuple",
                    "List[str]",
                    "_compaCallable[..., vendor.python.enum.Enum]",
                    "Set[str]",
                    "str",
                    "vendor.python.enum.EnumMeta"
                ]
            }
        }
    },
    "omnibus-master/omnibus/callables.py": {
        "get_arg_names": {
            "name": "get_arg_names",
            "location": 13,
            "return": [
                "builtins.tuple"
            ],
            "arguments": {
                "argspec": [
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "Dict[str,Union[str,Any]]",
                    "List[str]"
                ]
            }
        },
        "build_arg_dict": {
            "name": "build_arg_dict",
            "location": 22,
            "return": [
                "dict"
            ],
            "arguments": {
                "argspec": [
                    "str",
                    "Type",
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,Union[str,Any]]"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "alias": {
            "name": "alias",
            "location": 192,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {}
        },
        "constructor": {
            "name": "constructor",
            "location": 204,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {}
        },
        "const": {
            "name": "const",
            "location": 221,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "value": [
                    "int",
                    "complex",
                    "Tuple[str,int]",
                    "List",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "identity": {
            "name": "identity",
            "location": 228,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "raise_": {
            "name": "raise_",
            "location": 233,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "exc": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "tuple": {
            "name": "tuple",
            "location": 240,
            "return": [
                "float",
                "str",
                "Callable[[basilisp.lang.keyword.Keyword],Any]",
                "bool"
            ],
            "arguments": {}
        },
        "method": {
            "name": "method",
            "location": 245,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool",
                    "bytes"
                ]
            }
        },
        "Base.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.args": {
            "name": "args",
            "location": 61,
            "return": [
                "str",
                "List[str]",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "Tuple[str]",
                "Callable[[None], None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.kwargs": {
            "name": "kwargs",
            "location": 65,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.fn": {
            "name": "fn",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.__call__": {
            "name": "__call__",
            "location": 72,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.__repr__": {
            "name": "__repr__",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.__getstate__": {
            "name": "__getstate__",
            "location": 80,
            "return": [
                "builtins.tuple[(builtins.tuple, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.__setstate__": {
            "name": "__setstate__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args_and_kwargs": [
                    "str",
                    "Dict"
                ]
            }
        },
        "Base.construct": {
            "name": "construct",
            "location": 88,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "expr": [
                    "str"
                ]
            }
        },
        "Expr.construct": {
            "name": "construct",
            "location": 96,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "expr": [
                    "str",
                    "IO",
                    "Dict[str,Any]",
                    "List"
                ]
            }
        },
        "Lambda.construct": {
            "name": "construct",
            "location": 104,
            "return": [
                "str",
                "List[str]",
                "dict",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Fn.construct": {
            "name": "construct",
            "location": 120,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type",
                    "Type[Any]",
                    "Type[BaseException]"
                ]
            }
        },
        "Bindable.__repr__": {
            "name": "__repr__",
            "location": 174,
            "return": [
                "Text",
                "str",
                "Optional[Callable]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bindable.arg": {
            "name": "arg",
            "location": 183,
            "return": [
                "int",
                "float",
                "str",
                "Callable",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "alias.inner": {
            "name": "inner",
            "location": 193,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "constructor.inner": {
            "name": "inner",
            "location": 205,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "const.inner": {
            "name": "inner",
            "location": 222,
            "return": [],
            "arguments": {}
        },
        "raise_.inner": {
            "name": "inner",
            "location": 234,
            "return": [],
            "arguments": {}
        },
        "method.inner": {
            "name": "inner",
            "location": 246,
            "return": [
                "str",
                "bool",
                "Callable",
                "dict",
                "list"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "omnibus-master/omnibus/check.py": {
        "_raise": {
            "name": "_raise",
            "location": 19,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "exception_type": [
                    "Type"
                ],
                "default": [
                    "str",
                    "Type"
                ],
                "message": [
                    "str",
                    "List[str]",
                    "OSError",
                    "Callable[[str],None]",
                    "Callable[str,None]"
                ]
            }
        },
        "state": {
            "name": "state",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "condition": [
                    "bool",
                    "str"
                ],
                "message": [
                    "str",
                    "Dict",
                    "None"
                ]
            }
        },
        "arg": {
            "name": "arg",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "condition": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "message": [
                    "str",
                    "None"
                ]
            }
        },
        "isinstance": {
            "name": "isinstance",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ],
                "spec": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "message": [
                    "Optional[str]",
                    "None",
                    "Dict",
                    "str",
                    "List"
                ]
            }
        },
        "issubclass": {
            "name": "issubclass",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ],
                "spec": [
                    "str",
                    "int"
                ],
                "message": [
                    "Union[BinaryIO,str]",
                    "str",
                    "None",
                    "float",
                    "BinaryIO"
                ]
            }
        },
        "not_none": {
            "name": "not_none",
            "location": 59,
            "return": [
                "int",
                "float",
                "str",
                "List[str]",
                "List[Callable]",
                "None"
            ],
            "arguments": {
                "obj": [
                    "T",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "Optional[int]",
                    "int",
                    "Optional[List[Callable]]",
                    "List[Callable]"
                ],
                "message": [
                    "Optional[BaseException]",
                    "str",
                    "None",
                    "int",
                    "BaseException"
                ]
            }
        },
        "none": {
            "name": "none",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "T",
                    "int",
                    "List[str]",
                    "Optional[int]",
                    "None",
                    "Optional[List[Callable]]",
                    "List[Callable]"
                ],
                "message": [
                    "Optional[BaseException]",
                    "str",
                    "None",
                    "BaseException"
                ]
            }
        },
        "empty": {
            "name": "empty",
            "location": 71,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ],
                "message": [
                    "str",
                    "None"
                ]
            }
        },
        "not_empty": {
            "name": "not_empty",
            "location": 77,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ],
                "message": [
                    "str",
                    "None"
                ]
            }
        },
        "single": {
            "name": "single",
            "location": 83,
            "return": [
                "T",
                "str",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "obj": [
                    "Iterable[T]",
                    "str",
                    "bool",
                    "int"
                ],
                "message": [
                    "str",
                    "None"
                ]
            }
        },
        "unique": {
            "name": "unique",
            "location": 92,
            "return": [
                "float",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "it": [
                    "float",
                    "int"
                ],
                "message": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "in_": {
            "name": "in_",
            "location": 99,
            "return": [
                "Dict[str,Dict[str,int]]",
                "Container",
                "Dict[str,Any]",
                "int",
                "Union[Sequence,SweepFixedValues]",
                "Callable"
            ],
            "arguments": {
                "item": [
                    "Container",
                    "T",
                    "int",
                    "Callable",
                    "Container[T]"
                ],
                "container": [
                    "T",
                    "Container[T]",
                    "int",
                    "Callable"
                ],
                "message": [
                    "Exception",
                    "str",
                    "None"
                ]
            }
        },
        "not_in": {
            "name": "not_in",
            "location": 105,
            "return": [
                "Dict[str,Dict[str,int]]",
                "Container",
                "Dict[str,Any]",
                "Callable",
                "Union[Sequence,SweepFixedValues]",
                "Dict",
                "List"
            ],
            "arguments": {
                "item": [
                    "Container",
                    "T",
                    "Callable",
                    "Dict",
                    "List",
                    "Container[T]"
                ],
                "container": [
                    "Dict",
                    "List",
                    "T",
                    "Container[T]",
                    "Callable"
                ],
                "message": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "callable": {
            "name": "callable",
            "location": 111,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ],
                "message": [
                    "Optional[BaseException]",
                    "str",
                    "None",
                    "bytes",
                    "BaseException"
                ]
            }
        },
        "replacing_none": {
            "name": "replacing_none",
            "location": 117,
            "return": [
                "int",
                "Iterable[str]",
                "Callable",
                "Sequence[str]",
                "Iterable[T]"
            ],
            "arguments": {
                "old": [
                    "Optional[T]",
                    "int",
                    "None",
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,dict[str,str]]"
                ],
                "new": [
                    "int",
                    "T",
                    "Callable",
                    "Iterable[T]"
                ],
                "message": [
                    "int",
                    "List[str]",
                    "None"
                ]
            }
        },
        "raises": {
            "name": "raises",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "exc": [
                    "Type[BaseException]",
                    "BaseException"
                ],
                "message": [
                    "Optional[BaseException]",
                    "None",
                    "BaseException"
                ]
            }
        },
        "sets_equal": {
            "name": "sets_equal",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "given": [
                    "bool",
                    "List",
                    "bytes",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "int"
                ],
                "expected": [
                    "bool",
                    "List",
                    "bytes",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "int"
                ],
                "message": [
                    "str",
                    "Dict[str,str]",
                    "None"
                ]
            }
        },
        "exhausted": {
            "name": "exhausted",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "it": [
                    "Iterator",
                    "str",
                    "Callable",
                    "Iterator[T]",
                    "bool"
                ],
                "message": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "one_of": {
            "name": "one_of",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "omnibus-master/omnibus/code.py": {
        "make_cell": {
            "name": "make_cell",
            "location": 121,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "value": [
                    "int",
                    "ics.types.ContextDict",
                    "Tuple[Union[str,int]]",
                    "complex",
                    "List",
                    "ics.types.ExtraParams",
                    "ics.types.DatetimeLike",
                    "Tuple[str,int]"
                ]
            }
        },
        "get_code_flag_names": {
            "name": "get_code_flag_names",
            "location": 127,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "flags": [
                    "int",
                    "str",
                    "NamedTuple",
                    "Dict[int,str]",
                    "bool",
                    "Union[str,int]"
                ]
            }
        },
        "recode_func": {
            "name": "recode_func",
            "location": 131,
            "return": [
                "list"
            ],
            "arguments": {
                "func": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "Dict"
                ],
                "code_bytes": [
                    "Union[bytes, bytearray]",
                    "str",
                    "int",
                    "apps.monero.xmr.types.Sc25519",
                    "Optional[str]"
                ]
            }
        },
        "instruction_bytes": {
            "name": "instruction_bytes",
            "location": 141,
            "return": [
                "bytes"
            ],
            "arguments": {
                "instrs": [
                    "str",
                    "Optional[Iterable[Any]]"
                ]
            }
        },
        "get_frame_function": {
            "name": "get_frame_function",
            "location": 149,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "frame": [
                    "str",
                    "bytes"
                ]
            }
        },
        "CallTypes.__iter__": {
            "name": "__iter__",
            "location": 70,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallTypes._visit": {
            "name": "_visit",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallTypes.nullary": {
            "name": "nullary",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallTypes.arg": {
            "name": "arg",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "CallTypes.default": {
            "name": "default",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "int",
                    "Sequence[Any]",
                    "None"
                ]
            }
        },
        "CallTypes.varargs": {
            "name": "varargs",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallTypes.kwonly": {
            "name": "kwonly",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallTypes.kwargs": {
            "name": "kwargs",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallTypes.all": {
            "name": "all",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "int",
                    "ics.types.DatetimeLike",
                    "str",
                    "Tuple[Union[str,str]]",
                    "Union[str,Tuple[str,str]]",
                    "cg_sqlalchemy_helpers.types.DbColumn[bool]"
                ]
            }
        },
        "CallTypes.all2": {
            "name": "all2",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg0": [
                    "str",
                    "Union[str,Tuple[str,str]]",
                    "Tuple[Union[str,str]]",
                    "Optional[float]",
                    "float",
                    "List[int]",
                    "Optional[bool]",
                    "None",
                    "bool",
                    "Union[bool,Iterable[str]]",
                    "int"
                ],
                "arg1": [
                    "str",
                    "Union[str,Tuple[str,str]]",
                    "Tuple[Union[str,str]]",
                    "Optional[float]",
                    "float",
                    "List[int]",
                    "Optional[bool]",
                    "None",
                    "bool",
                    "Union[bool,Iterable[str]]",
                    "int"
                ]
            }
        },
        "_Op.__getattr__": {
            "name": "__getattr__",
            "location": 114,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "opname": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "make_cell.fn": {
            "name": "fn",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "omnibus-master/omnibus/collections.py": {
        "toposort": {
            "name": "toposort",
            "location": 19,
            "return": [
                "Generator[(set, Any, None)]"
            ],
            "arguments": {
                "data": [
                    "Dict[AbstractSet,set[Any]]",
                    "Dict",
                    "Dict[AbstractSet[str],Set[Any]]",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "List",
                    "List[int]"
                ]
            }
        },
        "histogram": {
            "name": "histogram",
            "location": 34,
            "return": [
                "Dict[(Any, int)]"
            ],
            "arguments": {
                "seq": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "multikey_dict": {
            "name": "multikey_dict",
            "location": 44,
            "return": [
                "dict"
            ],
            "arguments": {
                "dct": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "guarded_dict_update": {
            "name": "guarded_dict_update",
            "location": 57,
            "return": [
                "Set[str]",
                "Dict",
                "int",
                "float",
                "Tuple[str]",
                "str",
                "Dict[str,Any]",
                "Dict[str,int]"
            ],
            "arguments": {
                "dst": [
                    "Dict",
                    "float",
                    "str",
                    "Dict[str,int]"
                ]
            }
        },
        "yield_dict_init": {
            "name": "yield_dict_init",
            "location": 89,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {}
        },
        "IdentityWrapper.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "enum.Enum",
                    "int",
                    "T"
                ]
            }
        },
        "IdentityWrapper.__repr__": {
            "name": "__repr__",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentityWrapper.value": {
            "name": "value",
            "location": 76,
            "return": [
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentityWrapper.__eq__": {
            "name": "__eq__",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "str",
                    "Dict[str,Any]",
                    "List",
                    "Union[int,str]",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "IdentityWrapper.__ne__": {
            "name": "__ne__",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "IdentityWrapper.__hash__": {
            "name": "__hash__",
            "location": 85,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedKeyDict.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wrapper": [
                    "int",
                    "float",
                    "bool"
                ],
                "unwrapper": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "WrappedKeyDict.__repr__": {
            "name": "__repr__",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedKeyDict.__setitem__": {
            "name": "__setitem__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "enum.Enum",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "v": [
                    "int",
                    "enum.Enum",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "WrappedKeyDict.__delitem__": {
            "name": "__delitem__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "float",
                    "int",
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "WrappedKeyDict.__getitem__": {
            "name": "__getitem__",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "float",
                    "int",
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "WrappedKeyDict.__len__": {
            "name": "__len__",
            "location": 126,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedKeyDict.__iter__": {
            "name": "__iter__",
            "location": 129,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedKeyDict.clear": {
            "name": "clear",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentityKeyDict.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentityKeyDict.__repr__": {
            "name": "__repr__",
            "location": 144,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentityKeyDict.__setitem__": {
            "name": "__setitem__",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "Callable",
                    "float"
                ],
                "v": [
                    "Callable",
                    "float"
                ]
            }
        },
        "IdentityKeyDict.__delitem__": {
            "name": "__delitem__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "float",
                    "Optional[float]",
                    "bool",
                    "None",
                    "str",
                    "Optional[bool]",
                    "List[str]",
                    "Union[None,str,List[str]]",
                    "int"
                ]
            }
        },
        "IdentityKeyDict.__getitem__": {
            "name": "__getitem__",
            "location": 153,
            "return": [
                "str",
                "List[Union[int, Any]]",
                "List[Union[int, str]]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "float",
                    "Optional[float]",
                    "bool",
                    "None",
                    "str",
                    "Optional[bool]",
                    "List[str]",
                    "Union[None,str,List[str]]",
                    "int"
                ]
            }
        },
        "IdentityKeyDict.__len__": {
            "name": "__len__",
            "location": 156,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentityKeyDict.__iter__": {
            "name": "__iter__",
            "location": 159,
            "return": [
                "Iterator[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentityKeyDict.clear": {
            "name": "clear",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentitySet.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init": [
                    "str",
                    "None",
                    "Iterable[T]",
                    "List",
                    "Optional[str]",
                    "Optional[Sequence[Any]]"
                ]
            }
        },
        "IdentitySet.__repr__": {
            "name": "__repr__",
            "location": 175,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentitySet.add": {
            "name": "add",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "T"
                ]
            }
        },
        "IdentitySet.discard": {
            "name": "discard",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Dict",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "IdentitySet.update": {
            "name": "update",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "Iterable[T]",
                    "Dict[str, Any]"
                ]
            }
        },
        "IdentitySet.__contains__": {
            "name": "__contains__",
            "location": 191,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict",
                    "float",
                    "T",
                    "Iterable"
                ]
            }
        },
        "IdentitySet.__len__": {
            "name": "__len__",
            "location": 194,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentitySet.__iter__": {
            "name": "__iter__",
            "location": 197,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenDict.__new__": {
            "name": "__new__",
            "location": 207,
            "return": [
                "dict",
                "List[int]"
            ],
            "arguments": {
                "cls": [
                    "Type[FrozenDict]"
                ]
            }
        },
        "FrozenDict.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenDict.__repr__": {
            "name": "__repr__",
            "location": 220,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenDict.__getitem__": {
            "name": "__getitem__",
            "location": 223,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "Tuple",
                    "Dict[str,str]",
                    "None",
                    "int",
                    "Callable[[KT],VT]",
                    "Callable[KT,V]",
                    "Type[RuntimeError]",
                    "Type"
                ]
            }
        },
        "FrozenDict.__len__": {
            "name": "__len__",
            "location": 226,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenDict.__iter__": {
            "name": "__iter__",
            "location": 229,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenDict.__hash__": {
            "name": "__hash__",
            "location": 232,
            "return": [
                "int",
                "str",
                "Tuple[int,int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenDict.__eq__": {
            "name": "__eq__",
            "location": 237,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FrozenDict.__ne__": {
            "name": "__ne__",
            "location": 240,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "FrozenDict.__getstate__": {
            "name": "__getstate__",
            "location": 243,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenDict.__setstate__": {
            "name": "__setstate__",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int",
                    "float"
                ]
            }
        },
        "FrozenDict.drop": {
            "name": "drop",
            "location": 249,
            "return": [
                "Union[(FrozenDict, Generator[(Tuple[(Any, Any)], Any, None)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenDict.set": {
            "name": "set",
            "location": 253,
            "return": [
                "Union[(FrozenDict, itertools.chain)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.__init__": {
            "name": "__init__",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "Optional[float]",
                    "None",
                    "Optional[str]",
                    "float",
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "Callable",
                    "Hashable"
                ]
            }
        },
        "OrderedSet.__len__": {
            "name": "__len__",
            "location": 268,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.__contains__": {
            "name": "__contains__",
            "location": 271,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "List[float]",
                    "bool"
                ]
            }
        },
        "OrderedSet.add": {
            "name": "add",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Callable[T,T,bool]",
                    "Iterable[T]",
                    "Callable[[T,T],bool]",
                    "Dict",
                    "List",
                    "List[T]",
                    "T"
                ]
            }
        },
        "OrderedSet.discard": {
            "name": "discard",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "str",
                    "Type",
                    "T"
                ]
            }
        },
        "OrderedSet.__iter__": {
            "name": "__iter__",
            "location": 286,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.__reversed__": {
            "name": "__reversed__",
            "location": 293,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.pop": {
            "name": "pop",
            "location": 300,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": [],
                "last": [
                    "bool",
                    "int",
                    "str",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "OrderedSet.__repr__": {
            "name": "__repr__",
            "location": 307,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.__eq__": {
            "name": "__eq__",
            "location": 312,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Set[VT]",
                    "int",
                    "Set[V]",
                    "float",
                    "Dict"
                ]
            }
        },
        "OrderedFrozenSet.__new__": {
            "name": "__new__",
            "location": 320,
            "return": [
                "OrderedFrozenSet"
            ],
            "arguments": {
                "cls": [
                    "Type[OrderedFrozenSet]"
                ],
                "items": [
                    "Iterable[T]",
                    "T",
                    "Type[Exception]",
                    "list"
                ]
            }
        },
        "OrderedFrozenSet.__repr__": {
            "name": "__repr__",
            "location": 331,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedFrozenSet.__iter__": {
            "name": "__iter__",
            "location": 334,
            "return": [
                "listiterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedFrozenSet.__sub__": {
            "name": "__sub__",
            "location": 337,
            "return": [
                "OrderedFrozenSet"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IdentityHashableDict.__hash__": {
            "name": "__hash__",
            "location": 344,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentityHashableDict.__eq__": {
            "name": "__eq__",
            "location": 347,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "IdentityHashableDict.__ne__": {
            "name": "__ne__",
            "location": 350,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "IdentityHashableDict.__repr__": {
            "name": "__repr__",
            "location": 353,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentityHashableSet.__hash__": {
            "name": "__hash__",
            "location": 359,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentityHashableSet.__eq__": {
            "name": "__eq__",
            "location": 362,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "IdentityHashableSet.__ne__": {
            "name": "__ne__",
            "location": 365,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "IdentityHashableSet.__repr__": {
            "name": "__repr__",
            "location": 368,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentityHashableList.__hash__": {
            "name": "__hash__",
            "location": 374,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentityHashableList.__eq__": {
            "name": "__eq__",
            "location": 377,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "IdentityHashableList.__ne__": {
            "name": "__ne__",
            "location": 380,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "IdentityHashableList.__repr__": {
            "name": "__repr__",
            "location": 383,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortedList.default_comparator": {
            "name": "default_comparator",
            "location": 392,
            "return": [
                "int",
                "bytearray",
                "bytes",
                "List[dict]",
                "str",
                "float"
            ],
            "arguments": {
                "a": [
                    "T",
                    "int",
                    "Optional[Union[int,float]]",
                    "float"
                ],
                "b": [
                    "T",
                    "int",
                    "Optional[Union[int,float]]",
                    "float"
                ]
            }
        },
        "SortedList.__len__": {
            "name": "__len__",
            "location": 398,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortedList.__iter__": {
            "name": "__iter__",
            "location": 402,
            "return": [
                "Iterator[T]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortedList.__contains__": {
            "name": "__contains__",
            "location": 406,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "complex",
                    "Tuple[str,int]",
                    "List",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "SortedList.add": {
            "name": "add",
            "location": 410,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "T",
                    "str",
                    "int",
                    "List",
                    "Tuple[Union[str,int]]",
                    "Union[str,int]",
                    "Tuple[str,int]",
                    "bool"
                ]
            }
        },
        "SortedList.find": {
            "name": "find",
            "location": 414,
            "return": [
                "Optional[T]",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "T",
                    "float",
                    "bool"
                ]
            }
        },
        "SortedList.remove": {
            "name": "remove",
            "location": 418,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "complex",
                    "Tuple[str,int]",
                    "List",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "SortedList.iter": {
            "name": "iter",
            "location": 422,
            "return": [
                "Iterable[T]",
                "None"
            ],
            "arguments": {
                "self": [],
                "base": [
                    "None",
                    "Type",
                    "T",
                    "bool",
                    "str",
                    "Tuple",
                    "Set[str]",
                    "Iterable[str]"
                ]
            }
        },
        "SortedList.riter": {
            "name": "riter",
            "location": 426,
            "return": [
                "Iterable[T]",
                "None"
            ],
            "arguments": {
                "self": [],
                "base": [
                    "str",
                    "None",
                    "Type",
                    "bool",
                    "Tuple",
                    "T"
                ]
            }
        },
        "SkipList.__init__": {
            "name": "__init__",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkipList.__len__": {
            "name": "__len__",
            "location": 479,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkipList.__iter__": {
            "name": "__iter__",
            "location": 482,
            "return": [
                "generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkipList.__contains__": {
            "name": "__contains__",
            "location": 485,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "enum.Enum",
                    "int",
                    "Optional[int]",
                    "None",
                    "T",
                    "float",
                    "Dict[Type,Callable]",
                    "Dict[type,Callable]",
                    "str",
                    "Union[None,str,bytes]",
                    "bytes"
                ]
            }
        },
        "SkipList._random_level": {
            "name": "_random_level",
            "location": 488,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkipList.add": {
            "name": "add",
            "location": 494,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T",
                    "None",
                    "float",
                    "Optional[object]",
                    "Any",
                    "Optional[Any]",
                    "int",
                    "Optional[int]",
                    "Type",
                    "Union[type,Tuple[type,...]]",
                    "Tuple[Union[Type,...]]"
                ]
            }
        },
        "SkipList._find": {
            "name": "_find",
            "location": 528,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "T",
                    "None",
                    "float",
                    "Optional[str]",
                    "int",
                    "Hashable",
                    "Optional[int]",
                    "Optional[object]",
                    "Optional[bool]"
                ]
            }
        },
        "SkipList.find": {
            "name": "find",
            "location": 540,
            "return": [
                "None",
                "Optional[str]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "T",
                    "Dict",
                    "None",
                    "Optional[Dict]",
                    "str",
                    "Iterable",
                    "List",
                    "Optional[str]",
                    "Optional[List]"
                ]
            }
        },
        "SkipList.remove": {
            "name": "remove",
            "location": 548,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "T",
                    "Type",
                    "bool",
                    "Tuple[Union[Type,...]]",
                    "str",
                    "Union[type,Tuple[type,...]]",
                    "None",
                    "Optional[object]",
                    "Optional[str]"
                ]
            }
        },
        "SkipList.iter": {
            "name": "iter",
            "location": 577,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "base": [
                    "str",
                    "None",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "SkipList.riter": {
            "name": "riter",
            "location": 589,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "base": [
                    "Optional[float]",
                    "None",
                    "Optional[bool]",
                    "float",
                    "VT",
                    "bool"
                ]
            }
        },
        "SortedMapping.items": {
            "name": "items",
            "location": 610,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortedMapping.ritems": {
            "name": "ritems",
            "location": 614,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortedMapping.itemsfrom": {
            "name": "itemsfrom",
            "location": 618,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float,int]",
                    "float",
                    "abc.graph.GraphKeyType",
                    "int"
                ]
            }
        },
        "SortedMapping.ritemsfrom": {
            "name": "ritemsfrom",
            "location": 622,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float,int]",
                    "float",
                    "abc.graph.GraphKeyType",
                    "int"
                ]
            }
        },
        "SortedListDict._item_comparator": {
            "name": "_item_comparator",
            "location": 636,
            "return": [
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "a": [
                    "bytes",
                    "float",
                    "Optional[Sequence[T]]"
                ],
                "b": [
                    "bytes",
                    "float",
                    "Optional[Sequence[T]]"
                ]
            }
        },
        "SortedListDict.__init__": {
            "name": "__init__",
            "location": 639,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "impl": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "SortedListDict.__getitem__": {
            "name": "__getitem__",
            "location": 644,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int",
                    "None"
                ]
            }
        },
        "SortedListDict.__setitem__": {
            "name": "__setitem__",
            "location": 650,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int"
                ],
                "value": [
                    "str",
                    "T"
                ]
            }
        },
        "SortedListDict.__delitem__": {
            "name": "__delitem__",
            "location": 654,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Dict",
                    "Sequence[Any]",
                    "Callable",
                    "Sequence[str]",
                    "str",
                    "KT"
                ]
            }
        },
        "SortedListDict.__len__": {
            "name": "__len__",
            "location": 657,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortedListDict.__iter__": {
            "name": "__iter__",
            "location": 660,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortedListDict.items": {
            "name": "items",
            "location": 664,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortedListDict.ritems": {
            "name": "ritems",
            "location": 667,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortedListDict.itemsfrom": {
            "name": "itemsfrom",
            "location": 670,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Dict",
                    "Sequence[Any]",
                    "Callable",
                    "Sequence[str]",
                    "str",
                    "KT"
                ]
            }
        },
        "SortedListDict.ritemsfrom": {
            "name": "ritemsfrom",
            "location": 673,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Dict",
                    "Sequence[Any]",
                    "Callable",
                    "Sequence[str]",
                    "str",
                    "KT"
                ]
            }
        },
        "SkipListDict.__init__": {
            "name": "__init__",
            "location": 679,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BintreesDict._impls": {
            "name": "_impls",
            "location": 695,
            "return": [
                "Dict",
                "Dict[str,Any]",
                "Dict[str,Dict[str,str]]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "BintreesDict.new": {
            "name": "new",
            "location": 702,
            "return": [
                "BintreesDict"
            ],
            "arguments": {
                "cls": [
                    "Type[BintreesDict]"
                ],
                "impl": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "Type"
                ]
            }
        },
        "BintreesDict.__init__": {
            "name": "__init__",
            "location": 705,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "Iterable[bytes]"
                ]
            }
        },
        "BintreesDict.__getitem__": {
            "name": "__getitem__",
            "location": 710,
            "return": [
                "bytes",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "Tuple",
                    "Dict[str,str]",
                    "None",
                    "int",
                    "Callable[[KT],VT]",
                    "Callable[KT,V]",
                    "Type[RuntimeError]",
                    "Type"
                ]
            }
        },
        "BintreesDict.__setitem__": {
            "name": "__setitem__",
            "location": 713,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "BintreesDict.__delitem__": {
            "name": "__delitem__",
            "location": 716,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "Tuple",
                    "Dict[str,str]",
                    "None",
                    "int",
                    "Callable[[KT],VT]",
                    "Callable[KT,V]",
                    "Type[RuntimeError]",
                    "Type"
                ]
            }
        },
        "BintreesDict.__len__": {
            "name": "__len__",
            "location": 719,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BintreesDict.__iter__": {
            "name": "__iter__",
            "location": 722,
            "return": [
                "float",
                "Callable[[], None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BintreesDict.items": {
            "name": "items",
            "location": 725,
            "return": [
                "bool",
                "list",
                "IO[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BintreesDict.ritems": {
            "name": "ritems",
            "location": 728,
            "return": [
                "str",
                "Optional[str]",
                "List[Union[\"PipeChain\", str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BintreesDict.itemsfrom": {
            "name": "itemsfrom",
            "location": 731,
            "return": [
                "IO",
                "Dict[str, Any]",
                "Iterator[Any]",
                "Iterable[str]",
                "Iterator[int]",
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "BintreesDict.ritemsfrom": {
            "name": "ritemsfrom",
            "location": 734,
            "return": [
                "Generator[(Tuple[(_T0, Any)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "SortedContainersDict.new": {
            "name": "new",
            "location": 750,
            "return": [
                "SortedContainersDict"
            ],
            "arguments": {
                "cls": [
                    "Type[SortedContainersDict]"
                ]
            }
        },
        "SortedContainersDict.__init__": {
            "name": "__init__",
            "location": 753,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "Iterable[bytes]"
                ]
            }
        },
        "SortedContainersDict.__getitem__": {
            "name": "__getitem__",
            "location": 758,
            "return": [
                "bytes",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "Tuple",
                    "Dict[str,str]",
                    "None",
                    "int",
                    "Callable[[KT],VT]",
                    "Callable[KT,V]",
                    "Type[RuntimeError]",
                    "Type"
                ]
            }
        },
        "SortedContainersDict.__setitem__": {
            "name": "__setitem__",
            "location": 761,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "SortedContainersDict.__delitem__": {
            "name": "__delitem__",
            "location": 764,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "Tuple",
                    "Dict[str,str]",
                    "None",
                    "int",
                    "Callable[[KT],VT]",
                    "Callable[KT,V]",
                    "Type[RuntimeError]",
                    "Type"
                ]
            }
        },
        "SortedContainersDict.__len__": {
            "name": "__len__",
            "location": 767,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortedContainersDict.__iter__": {
            "name": "__iter__",
            "location": 770,
            "return": [
                "float",
                "Callable[[], None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortedContainersDict.items": {
            "name": "items",
            "location": 773,
            "return": [
                "int",
                "IO",
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortedContainersDict.ritems": {
            "name": "ritems",
            "location": 776,
            "return": [
                "reversed"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortedContainersDict.itemsfrom": {
            "name": "itemsfrom",
            "location": 779,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Dict",
                    "Tuple"
                ]
            }
        },
        "SortedContainersDict.ritemsfrom": {
            "name": "ritemsfrom",
            "location": 782,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Match",
                    "str",
                    "bool",
                    "Union[int,slice]"
                ]
            }
        },
        "SkipList._Node.__init__": {
            "name": "__init__",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "enum.Enum",
                    "float",
                    "str",
                    "int",
                    "T"
                ],
                "level": [
                    "Optional[float]",
                    "Optional[int]",
                    "Optional[bool]"
                ]
            }
        },
        "SkipList._Node.__repr__": {
            "name": "__repr__",
            "location": 459,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "omnibus-master/omnibus/defs.py": {
        "_basic": {
            "name": "_basic",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "bool",
                    "Tuple[str, str]"
                ]
            }
        },
        "basic": {
            "name": "basic",
            "location": 23,
            "return": [],
            "arguments": {
                "cls_dct": [
                    "str",
                    "dict",
                    "Collection[str]"
                ]
            }
        },
        "_repr_guard": {
            "name": "_repr_guard",
            "location": 34,
            "return": [
                "Callable"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "build_attr_repr": {
            "name": "build_attr_repr",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "dict"
                ]
            }
        },
        "build_repr": {
            "name": "build_repr",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "dict",
                    "bool",
                    "int"
                ]
            }
        },
        "repr": {
            "name": "repr",
            "location": 80,
            "return": [],
            "arguments": {
                "cls_dct": [
                    "str",
                    "dict",
                    "Type",
                    "Collection[str]"
                ]
            }
        },
        "bare_repr": {
            "name": "bare_repr",
            "location": 90,
            "return": [],
            "arguments": {
                "cls_dct": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "name_repr": {
            "name": "name_repr",
            "location": 97,
            "return": [],
            "arguments": {
                "cls_dct": [
                    "str",
                    "Type",
                    "int"
                ]
            }
        },
        "ne": {
            "name": "ne",
            "location": 104,
            "return": [],
            "arguments": {
                "cls_dct": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "no_order": {
            "name": "no_order",
            "location": 111,
            "return": [],
            "arguments": {
                "cls_dct": [
                    "Callable",
                    "int",
                    "str"
                ]
            }
        },
        "hash_eq": {
            "name": "hash_eq",
            "location": 128,
            "return": [],
            "arguments": {
                "cls_dct": [
                    "str",
                    "Type[\"SerializationDialect\"]"
                ]
            }
        },
        "getter": {
            "name": "getter",
            "location": 146,
            "return": [],
            "arguments": {
                "cls_dct": [
                    "str",
                    "Union[int, str, bool]",
                    "bool"
                ]
            }
        },
        "not_implemented": {
            "name": "not_implemented",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "cls_dct": [
                    "str"
                ]
            }
        },
        "abstract_method": {
            "name": "abstract_method",
            "location": 168,
            "return": [
                "bool",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "cls_dct": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "abstract_property": {
            "name": "abstract_property",
            "location": 173,
            "return": [
                "str",
                "bool",
                "Iterable[str]",
                "Callable"
            ],
            "arguments": {
                "cls_dct": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "abstract_hash_eq": {
            "name": "abstract_hash_eq",
            "location": 178,
            "return": [
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "cls_dct": [
                    "Callable",
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "delegate_method": {
            "name": "delegate_method",
            "location": 183,
            "return": [],
            "arguments": {
                "cls_dct": [
                    "int",
                    "str"
                ]
            }
        },
        "delegate_property": {
            "name": "delegate_property",
            "location": 193,
            "return": [],
            "arguments": {
                "cls_dct": [
                    "int",
                    "str"
                ]
            }
        },
        "_repr_guard.inner": {
            "name": "inner",
            "location": 36,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "obj": [
                    "type"
                ]
            }
        },
        "repr.__repr__": {
            "name": "__repr__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bare_repr.__repr__": {
            "name": "__repr__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "name_repr.__repr__": {
            "name": "__repr__",
            "location": 98,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ne.__ne__": {
            "name": "__ne__",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "no_order.fn": {
            "name": "fn",
            "location": 112,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "Tuple['cirq.Qid']",
                    "bool"
                ]
            }
        },
        "hash_eq.__hash__": {
            "name": "__hash__",
            "location": 129,
            "return": [
                "int",
                "str",
                "\"IApiCursor\""
            ],
            "arguments": {
                "self": []
            }
        },
        "hash_eq.__eq__": {
            "name": "__eq__",
            "location": 133,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "delegate_method.gen": {
            "name": "gen",
            "location": 184,
            "return": [],
            "arguments": {
                "attr": []
            }
        },
        "delegate_property.gen": {
            "name": "gen",
            "location": 194,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "attr": [
                    "str",
                    "Callable",
                    "List[str]",
                    "list"
                ]
            }
        },
        "not_implemented.not_implemented": {
            "name": "not_implemented",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "delegate_method.gen.delegate": {
            "name": "delegate",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "delegate_property.gen.delegate": {
            "name": "delegate",
            "location": 196,
            "return": [
                "Optional[Dict[str, Any]]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "omnibus-master/omnibus/docker.py": {
        "get_client": {
            "name": "get_client",
            "location": 11,
            "return": [
                "Callable"
            ],
            "arguments": {}
        },
        "close_client": {
            "name": "close_client",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "client_context": {
            "name": "client_context",
            "location": 34,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "find_container_by_name": {
            "name": "find_container_by_name",
            "location": 45,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "containers": [
                    "str",
                    "Iterable[Dict]",
                    "Optional[str]",
                    "int",
                    "Iterable[Tuple[str,Any]]",
                    "Iterable[str]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "None",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "get_container_tcp_host_port": {
            "name": "get_container_tcp_host_port",
            "location": 56,
            "return": [
                "Optional[Tuple[(Any, int)]]"
            ],
            "arguments": {
                "container": [
                    "str",
                    "bytes"
                ],
                "port": [
                    "str",
                    "bytes"
                ]
            }
        },
        "get_container_tcp_endpoints": {
            "name": "get_container_tcp_endpoints",
            "location": 64,
            "return": [
                "Dict[(Tuple[(Any, Any)], Tuple[(Any, Any)])]"
            ],
            "arguments": {
                "client": [
                    "str",
                    "docker.DockerClient"
                ],
                "name_port_pairs": [
                    "str",
                    "bytes",
                    "Iterable[Tuple[str,int]]",
                    "int"
                ]
            }
        },
        "TarBuilder.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fileobj": [
                    "bytes",
                    "None",
                    "TextIO",
                    "List",
                    "BinaryIO",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "TarBuilder.flip": {
            "name": "flip",
            "location": 88,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TarBuilder.__enter__": {
            "name": "__enter__",
            "location": 92,
            "return": [
                "TarBuilder"
            ],
            "arguments": {
                "self": [
                    "_TTarBuilder@@TarBuilder@@"
                ]
            }
        },
        "TarBuilder.__exit__": {
            "name": "__exit__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ]
            }
        },
        "TarBuilder.add_data": {
            "name": "add_data",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ],
                "data": [
                    "bytes",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TarBuilder.add_file": {
            "name": "add_file",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "file_path": [
                    "str"
                ]
            }
        },
        "TarBuilder.add_resource": {
            "name": "add_resource",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "package": [
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "resource": [
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        }
    },
    "omnibus-master/omnibus/dynamic.py": {
        "hoist": {
            "name": "hoist",
            "location": 17,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "depth": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "contextmanager": {
            "name": "contextmanager",
            "location": 219,
            "return": [
                "Callable"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "hoist.inner": {
            "name": "inner",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "dict",
                    "int",
                    "Union[float, str]",
                    "bytes"
                ]
            }
        },
        "Var.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "List[str]",
                    "set",
                    "str",
                    "list",
                    "Callable"
                ]
            }
        },
        "Var.__call__": {
            "name": "__call__",
            "location": 57,
            "return": [
                "int",
                "float",
                "tuple",
                "Type[BaseException]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Var.binding": {
            "name": "binding",
            "location": 67,
            "return": [
                "Binding"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Collection[str]",
                    "bool",
                    "complex"
                ]
            }
        },
        "Var.with_binding": {
            "name": "with_binding",
            "location": 72,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "Var.with_binding_fn": {
            "name": "with_binding_fn",
            "location": 81,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "binding_fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Var.values": {
            "name": "values",
            "location": 111,
            "return": [
                "typing.Iterator[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Var.__iter__": {
            "name": "__iter__",
            "location": 126,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Var.value": {
            "name": "value",
            "location": 130,
            "return": [
                "str",
                "int",
                "dict",
                "tuple",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Binding.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "str",
                    "int",
                    "Optional[Any]"
                ],
                "value": [
                    "float",
                    "str",
                    "list",
                    "int"
                ]
            }
        },
        "Binding.__enter__": {
            "name": "__enter__",
            "location": 150,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Binding.__exit__": {
            "name": "__exit__",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "et": [
                    "float",
                    "Iterable[T]",
                    "Tuple['cirq.Qid']"
                ],
                "e": [
                    "float",
                    "Iterable[T]",
                    "Tuple['cirq.Qid']"
                ],
                "tb": [
                    "float",
                    "Iterable[T]",
                    "Tuple['cirq.Qid']"
                ]
            }
        },
        "Dyn.__init__": {
            "name": "__init__",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dyn.__call__": {
            "name": "__call__",
            "location": 197,
            "return": [
                "Binding"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dyn.__getattr__": {
            "name": "__getattr__",
            "location": 200,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_GeneratorContextManager.__enter__": {
            "name": "__enter__",
            "location": 215,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "contextmanager.helper": {
            "name": "helper",
            "location": 221,
            "return": [
                "Callable"
            ],
            "arguments": {}
        },
        "Var.with_binding.outer": {
            "name": "outer",
            "location": 73,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "Var.with_binding_fn.outer": {
            "name": "outer",
            "location": 84,
            "return": [
                "dict",
                "Type",
                "Sequence[Any]",
                "bool",
                "Type[Any]"
            ],
            "arguments": {
                "fn": [
                    "dict",
                    "Hashable",
                    "Callable",
                    "float",
                    "str"
                ]
            }
        },
        "Var.with_binding.outer.inner": {
            "name": "inner",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "Var.with_binding_fn.outer.Descriptor.__call__": {
            "name": "__call__",
            "location": 90,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {}
        },
        "Var.with_binding_fn.outer.Descriptor.__get__": {
            "name": "__get__",
            "location": 94,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "type",
                    "Type",
                    "Callable",
                    "Optional[type]",
                    "Callable[[], None]"
                ],
                "cls": [
                    "type",
                    "Type",
                    "Callable",
                    "Optional[type]",
                    "Callable[[], None]"
                ]
            }
        },
        "Var.with_binding_fn.outer.Descriptor.__get__.inner": {
            "name": "inner",
            "location": 99,
            "return": [
                "int",
                "str",
                "list"
            ],
            "arguments": {}
        }
    },
    "omnibus-master/omnibus/inject.py": {
        "annotate": {
            "name": "annotate",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "return_": [
                    "Dict",
                    "NOT_SET"
                ]
            }
        },
        "get_annotations": {
            "name": "get_annotations",
            "location": 50,
            "return": [
                "Dict",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "make_box": {
            "name": "make_box",
            "location": 71,
            "return": [
                "bool",
                "List[str]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Dict[str,str]",
                    "int",
                    "Optional[str]",
                    "None",
                    "Dict[str,LabwareDefinition]",
                    "Dict[str,D]"
                ],
                "type": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Dict[str, 'LabwareDefinition']",
                    "int"
                ]
            }
        },
        "_special_binding_source": {
            "name": "_special_binding_source",
            "location": 153,
            "return": [
                "str",
                "Callable[[str], None]",
                "NamedTuple"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "annotate.inner": {
            "name": "inner",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "Box.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "Box.value": {
            "name": "value",
            "location": 67,
            "return": [
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Provider.__call__": {
            "name": "__call__",
            "location": 99,
            "return": [
                "T",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValueProvider.__call__": {
            "name": "__call__",
            "location": 107,
            "return": [
                "Dict[str, Any]",
                "float",
                "list",
                "dict",
                "Iterable[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallableProvider.__call__": {
            "name": "__call__",
            "location": 115,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedProvider.__call__": {
            "name": "__call__",
            "location": 128,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProviderLinkedProvider.__call__": {
            "name": "__call__",
            "location": 136,
            "return": [
                "bytes",
                "int",
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DelegatedProvider.__call__": {
            "name": "__call__",
            "location": 145,
            "return": [
                "str",
                "\"PerceptionGraphPattern\"",
                "Exception",
                "Optional[BaseException]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Binding.provide": {
            "name": "provide",
            "location": 175,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.provide": {
            "name": "provide",
            "location": 182,
            "return": [
                "T",
                "None"
            ],
            "arguments": {
                "self": [],
                "binding": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "NoScope.provide": {
            "name": "provide",
            "location": 193,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "binding": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AbstractSingletonScope.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractSingletonScope.provide": {
            "name": "provide",
            "location": 205,
            "return": [
                "int",
                "Union[int, Tuple[int, ...]]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "binding": [
                    "int",
                    "Union[int, slice]",
                    "T"
                ]
            }
        },
        "ThreadScope.__init_": {
            "name": "__init_",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadScope.provide": {
            "name": "provide",
            "location": 234,
            "return": [
                "int",
                "bool",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "binding": [
                    "int",
                    "bool",
                    "str",
                    "Union[int, slice]",
                    "T"
                ]
            }
        },
        "SetProvider.__call__": {
            "name": "__call__",
            "location": 265,
            "return": [
                "Set",
                "bool",
                "Dict[str,Dict[str,int]]",
                "Dict[str,Any]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictProvider.__call__": {
            "name": "__call__",
            "location": 283,
            "return": [
                "Dict",
                "bool",
                "Dict[str,Dict[str,int]]",
                "Dict[str,Any]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Injector.__init__": {
            "name": "__init__",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Injector._state": {
            "name": "_state",
            "location": 401,
            "return": [
                "int",
                "str",
                "bool",
                "None",
                "float",
                "State"
            ],
            "arguments": {
                "self": []
            }
        },
        "Injector._invalidate_self": {
            "name": "_invalidate_self",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Injector._invalidate": {
            "name": "_invalidate",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Injector._process_elements": {
            "name": "_process_elements",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elements": [
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "str",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "Injector.config": {
            "name": "config",
            "location": 440,
            "return": [
                "str",
                "Optional[dict]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Injector.parent": {
            "name": "parent",
            "location": 444,
            "return": [
                "Optional[int]",
                "T",
                "Optional[str]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Injector.create_child": {
            "name": "create_child",
            "location": 448,
            "return": [
                "Injector",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Injector.current": {
            "name": "current",
            "location": 460,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "complex",
                    "bytes"
                ]
            }
        },
        "Injector.get_instance": {
            "name": "get_instance",
            "location": 464,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str",
                    "int",
                    "List[str]",
                    "Dict[str,str]",
                    "Dict[Any,list]"
                ],
                "default": [
                    "NOT_SET",
                    "str",
                    "Optional[Any]",
                    "int",
                    "float"
                ]
            }
        },
        "Injector._blacklist": {
            "name": "_blacklist",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[int,slice]",
                    "int"
                ]
            }
        },
        "Injector.get_bindings": {
            "name": "get_bindings",
            "location": 507,
            "return": [
                "str",
                "Set",
                "Iterable[Tuple[str,str]]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "Injector._require_key": {
            "name": "_require_key",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bool",
                    "Type",
                    "str",
                    "Dict",
                    "int",
                    "bytes"
                ],
                "required_by": [
                    "List",
                    "str",
                    "List[str]",
                    "int",
                    "List[List[Any]]",
                    "List[list[Any]]",
                    "Optional[Callable]",
                    "Callable",
                    "None"
                ]
            }
        },
        "Injector._add_binding": {
            "name": "_add_binding",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "binding": [
                    "Dict[str,Any]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]"
                ]
            }
        },
        "Injector._add_private_elements": {
            "name": "_add_private_elements",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "private_elements": [
                    "str",
                    "int",
                    "Type"
                ]
            }
        },
        "Injector._add_scope_binding": {
            "name": "_add_scope_binding",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scope_binding": [
                    "str"
                ]
            }
        },
        "Injector._load_eager_singletons": {
            "name": "_load_eager_singletons",
            "location": 564,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Injector._add_jit_bindings": {
            "name": "_add_jit_bindings",
            "location": 569,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Injector._add_jit_binding": {
            "name": "_add_jit_binding",
            "location": 581,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Dict",
                    "bool"
                ],
                "required_by": [
                    "str",
                    "Type",
                    "int",
                    "Union[str,int]",
                    "Type[AbstractIntegrationConversation]"
                ]
            }
        },
        "Binder.__init__": {
            "name": "__init__",
            "location": 592,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Binder.elements": {
            "name": "elements",
            "location": 598,
            "return": [
                "List[str]",
                "str",
                "bool",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Binder._require_key": {
            "name": "_require_key",
            "location": 601,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "List",
                    "int",
                    "List[str]",
                    "List[List[Any]]",
                    "List[list[Any]]"
                ],
                "required_by": [
                    "str",
                    "bytes",
                    "List",
                    "int",
                    "List[str]",
                    "List[List[Any]]",
                    "List[list[Any]]"
                ]
            }
        },
        "Binder._add_binding": {
            "name": "_add_binding",
            "location": 604,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "binding": [
                    "Dict[str,list[str]]",
                    "List[str]",
                    "Dict[str,List[str]]",
                    "List",
                    "Iterable[float]"
                ]
            }
        },
        "Binder._add_provider_binding": {
            "name": "_add_provider_binding",
            "location": 609,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "binding": [
                    "Mapping",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[Tuple[str,...]]",
                    "Tuple[Union[str,...]]",
                    "None"
                ]
            }
        },
        "Binder._auto_expose_binding": {
            "name": "_auto_expose_binding",
            "location": 615,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "binding": [
                    "str",
                    "OrderedDict",
                    "int"
                ]
            }
        },
        "Binder._get_key": {
            "name": "_get_key",
            "location": 618,
            "return": [
                "Key",
                "str",
                "Dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Dict",
                    "str",
                    "bool",
                    "List[str]",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "Binder._get_scoping": {
            "name": "_get_scoping",
            "location": 638,
            "return": [
                "str",
                "bool",
                "None",
                "int",
                "NoScope"
            ],
            "arguments": {
                "self": []
            }
        },
        "Binder._get_provider": {
            "name": "_get_provider",
            "location": 656,
            "return": [
                "str",
                "bool",
                "List[None]",
                "int",
                "ValueProvider"
            ],
            "arguments": {
                "self": []
            }
        },
        "Binder.bind": {
            "name": "bind",
            "location": 687,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "bytes",
                    "List[int]",
                    "bool",
                    "str",
                    "Tuple[Dict[str,Any],bool]",
                    "Tuple[Union[dict[str,Any],bool]]"
                ]
            }
        },
        "Binder._get_callable_key": {
            "name": "_get_callable_key",
            "location": 733,
            "return": [
                "Key",
                "str",
                "Dict[str,str]",
                "IO"
            ],
            "arguments": {
                "self": [],
                "callable": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "Binder._get_callable_inputs": {
            "name": "_get_callable_inputs",
            "location": 737,
            "return": [
                "Dict[,Key]",
                "Dict[str,str]",
                "str",
                "Optional[str]",
                "bool",
                "Iterable[str]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "callable": [
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "Binder._make_callable_provider": {
            "name": "_make_callable_provider",
            "location": 741,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "callable": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Binder.bind_callable": {
            "name": "bind_callable",
            "location": 773,
            "return": [
                "Binding",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "callable": [
                    "str",
                    "OrderedDict",
                    "Callable",
                    "IO[bytes]",
                    "IO",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,dict[str,str]]"
                ]
            }
        },
        "Binder._make_class_provider": {
            "name": "_make_class_provider",
            "location": 794,
            "return": [
                "int",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Exception",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Binder.bind_class": {
            "name": "bind_class",
            "location": 806,
            "return": [
                "Binding",
                "int",
                "str",
                "Callable[...,T]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str,Any]",
                    "int",
                    "Dict",
                    "RegistryData"
                ]
            }
        },
        "Binder.new_set_binder": {
            "name": "new_set_binder",
            "location": 871,
            "return": [
                "SetBinder",
                "Set[str]",
                "bool",
                "Tuple[int,str]",
                "Dict[str,Set[str]]",
                "List[str]",
                "Iterator[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Dict",
                    "bool",
                    "Sequence[str]",
                    "bytes"
                ]
            }
        },
        "Binder.new_dict_binder": {
            "name": "new_dict_binder",
            "location": 936,
            "return": [
                "DictBinder",
                "Optional[Dict[str,str]]",
                "bytes",
                "Dict",
                "Dict[str,Dict[str,str]]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Dict",
                    "Union[float,None,int]",
                    "float",
                    "bool",
                    "None",
                    "Optional[float]",
                    "int"
                ],
                "value": [
                    "str",
                    "Dict",
                    "Union[float,None,int]",
                    "float",
                    "bool",
                    "None",
                    "Optional[float]",
                    "int"
                ]
            }
        },
        "PrivateBinder.__init__": {
            "name": "__init__",
            "location": 966,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Type",
                    "None"
                ]
            }
        },
        "PrivateBinder.parent": {
            "name": "parent",
            "location": 976,
            "return": [
                "Optional[int]",
                "T",
                "Optional[str]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrivateBinder._auto_expose_binding": {
            "name": "_auto_expose_binding",
            "location": 979,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "binding": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "PrivateBinder.expose": {
            "name": "expose",
            "location": 982,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str",
                    "bool"
                ]
            }
        },
        "Injector.State.__init__": {
            "name": "__init__",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "injector": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Injector.State.elements_by_type": {
            "name": "elements_by_type",
            "location": 385,
            "return": [
                "Dict",
                "List[str]",
                "Optional[str]",
                "str",
                "List",
                "List[Tuple[str,Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Injector.State.exposed_keys": {
            "name": "exposed_keys",
            "location": 393,
            "return": [
                "Set",
                "List[str]",
                "bool",
                "Dict",
                "List[List[str]]",
                "FrozenSet[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Injector.State.bound_keys": {
            "name": "bound_keys",
            "location": 397,
            "return": [
                "Set",
                "str",
                "Optional[Any]",
                "List[bytes]",
                "List[TaskNode]",
                "Callable[,bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Binder._make_callable_provider.provide": {
            "name": "provide",
            "location": 767,
            "return": [
                "str",
                "bool",
                "Dict[str, int]",
                "float"
            ],
            "arguments": {}
        },
        "Binder._Child.__init__": {
            "name": "__init__",
            "location": 828,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "binder": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Binder.SetBinder.__init__": {
            "name": "__init__",
            "location": 835,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "binder": [],
                "set_key": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "defaultdict"
                ]
            }
        },
        "Binder.SetBinder.bind": {
            "name": "bind",
            "location": 840,
            "return": [
                "str",
                "bool",
                "IO[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Binder.DictBinder.__init__": {
            "name": "__init__",
            "location": 899,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "binder": [
                    "str"
                ],
                "dict_key": [
                    "bytes",
                    "str",
                    "bool",
                    "dict",
                    "Optional[str]",
                    "Set[str]",
                    "int"
                ]
            }
        },
        "Binder.DictBinder.bind": {
            "name": "bind",
            "location": 904,
            "return": [
                "str",
                "bool",
                "IO[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "assignment": [
                    "Union[bytes, bytearray, memoryview]",
                    "bool",
                    "bytes",
                    "Dict[str, Any]",
                    "str",
                    "T"
                ]
            }
        }
    },
    "omnibus-master/omnibus/iterables.py": {
        "alias": {
            "name": "alias",
            "location": 66,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {}
        },
        "constructor": {
            "name": "constructor",
            "location": 70,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {}
        },
        "void": {
            "name": "void",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "it": [
                    "Dict",
                    "Set[str]",
                    "VT",
                    "bool",
                    "int"
                ],
                "exception": [
                    "Callable",
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "str",
                    "Dict[str,float]"
                ]
            }
        },
        "ilen": {
            "name": "ilen",
            "location": 88,
            "return": [
                "int"
            ],
            "arguments": {
                "it": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "with_": {
            "name": "with_",
            "location": 95,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "it": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "read": {
            "name": "read",
            "location": 103,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "readable": [
                    "int",
                    "Iterable",
                    "str",
                    "Tuple[int,int]"
                ],
                "size": [
                    "int",
                    "Iterable",
                    "str",
                    "Tuple[int,int]"
                ]
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 112,
            "return": [
                "bool",
                "bytes",
                "Dict[str, Dict[str, float]]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "items": [
                    "List[dict[str,Any]]",
                    "List[str]",
                    "List[Dict[str,Any]]",
                    "Iterable[str]"
                ]
            }
        },
        "compose": {
            "name": "compose",
            "location": 117,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "nop": {
            "name": "nop",
            "location": 130,
            "return": [
                "Dict[str,Any]",
                "Dict[str,Dict[str,int]]",
                "int",
                "None",
                "List[str]"
            ],
            "arguments": {
                "items": [
                    "int",
                    "T",
                    "List[str]",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None"
                ]
            }
        },
        "lazy": {
            "name": "lazy",
            "location": 135,
            "return": [
                "typing.Generator[typing.Union[int,dict[str, typing.Any],None,list[str]]]"
            ],
            "arguments": {
                "items": [
                    "int",
                    "T",
                    "List[str]",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None"
                ]
            }
        },
        "eager": {
            "name": "eager",
            "location": 140,
            "return": [
                "int",
                "List"
            ],
            "arguments": {
                "items": [
                    "T",
                    "int"
                ]
            }
        },
        "discard": {
            "name": "discard",
            "location": 145,
            "return": [
                "None",
                "Union[tuple,list]",
                "Generator",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "items": [
                    "Dict[str,Any]",
                    "List[str]",
                    "int",
                    "T",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "apply": {
            "name": "apply",
            "location": 153,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "bool",
                    "Callable[[T],Any]"
                ]
            }
        },
        "map": {
            "name": "map",
            "location": 165,
            "return": [
                "Optional[str]",
                "Callable[[basilisp.lang.keyword.Keyword], Any]",
                "bool"
            ],
            "arguments": {
                "function": [
                    "Callable[[str],bool]",
                    "Callable[str,bool]"
                ]
            }
        },
        "filter": {
            "name": "filter",
            "location": 170,
            "return": [
                "int",
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "predicate": [
                    "float",
                    "int",
                    "str",
                    "List"
                ]
            }
        },
        "filter_false": {
            "name": "filter_false",
            "location": 175,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "predicate": [
                    "int",
                    "str"
                ]
            }
        },
        "zip": {
            "name": "zip",
            "location": 180,
            "return": [
                "bytes",
                "Sequence['cirq.Qid']",
                "dict",
                "Sequence"
            ],
            "arguments": {}
        },
        "zip_same_length": {
            "name": "zip_same_length",
            "location": 185,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "type_filter": {
            "name": "type_filter",
            "location": 194,
            "return": [
                "Optional[List[\"custom_index\"]]"
            ],
            "arguments": {
                "type": []
            }
        },
        "type_remove": {
            "name": "type_remove",
            "location": 199,
            "return": [
                "Optional[List[\"custom_index\"]]",
                "Optional[str]"
            ],
            "arguments": {
                "type": []
            }
        },
        "flat_map": {
            "name": "flat_map",
            "location": 204,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "function": [
                    "Callable"
                ]
            }
        },
        "unreachable": {
            "name": "unreachable",
            "location": 209,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "exception": [
                    "Callable",
                    "Type",
                    "Optional[Exception]",
                    "Type[BaseException]",
                    "Exception",
                    "bool"
                ]
            }
        },
        "chain": {
            "name": "chain",
            "location": 219,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "permute": {
            "name": "permute",
            "location": 230,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "interleave": {
            "name": "interleave",
            "location": 241,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "broadcast": {
            "name": "broadcast",
            "location": 253,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "guard": {
            "name": "guard",
            "location": 259,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "predicate": [
                    "bool",
                    "str"
                ],
                "exception_type": [
                    "ValueError",
                    "bool",
                    "str"
                ]
            }
        },
        "type_guard": {
            "name": "type_guard",
            "location": 269,
            "return": [
                "str"
            ],
            "arguments": {
                "type": [
                    "Union[str,Type]",
                    "str"
                ],
                "exception_type": [
                    "Union[str,Type]",
                    "TypeError"
                ]
            }
        },
        "chunk": {
            "name": "chunk",
            "location": 274,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "capacity": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "weigh": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "route": {
            "name": "route",
            "location": 295,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "router": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "sorted_route": {
            "name": "sorted_route",
            "location": 309,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "router": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "target_order": [
                    "Tuple",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "_unpack_pairs": {
            "name": "_unpack_pairs",
            "location": 334,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "items": [
                    "list",
                    "List[int]",
                    "List[Tuple[int, int]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "match": {
            "name": "match",
            "location": 340,
            "return": [
                "str",
                "Dict[str, int]",
                "int"
            ],
            "arguments": {}
        },
        "type_match": {
            "name": "type_match",
            "location": 363,
            "return": [
                "Tuple[str]",
                "bool",
                "Type"
            ],
            "arguments": {}
        },
        "flat_match": {
            "name": "flat_match",
            "location": 376,
            "return": [
                "Optional[Dict[str, str]]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        },
        "flat_type_match": {
            "name": "flat_type_match",
            "location": 381,
            "return": [],
            "arguments": {}
        },
        "map_type": {
            "name": "map_type",
            "location": 386,
            "return": [
                "\"Pipeline\"",
                "bool",
                "Type"
            ],
            "arguments": {
                "type": [
                    "str",
                    "Callable",
                    "Type[T]",
                    "Type",
                    "List[type]",
                    "List[Type]"
                ],
                "fn": [
                    "str",
                    "Callable",
                    "Type[T]",
                    "Type",
                    "List[type]",
                    "List[Type]"
                ]
            }
        },
        "flat_map_type": {
            "name": "flat_map_type",
            "location": 397,
            "return": [
                "\"FieldElement\"",
                "Type",
                "bool"
            ],
            "arguments": {
                "type": [
                    "Type[T]",
                    "str",
                    "Type"
                ],
                "fn": [
                    "Type[T]",
                    "str",
                    "Type"
                ]
            }
        },
        "apply_type": {
            "name": "apply_type",
            "location": 409,
            "return": [
                "\"Pipeline\"",
                "bool",
                "Type"
            ],
            "arguments": {
                "type": [
                    "str",
                    "Callable",
                    "Type[T]",
                    "Type",
                    "List[type]",
                    "List[Type]"
                ],
                "fn": [
                    "str",
                    "Callable",
                    "Type[T]",
                    "Type",
                    "List[type]",
                    "List[Type]"
                ]
            }
        },
        "map_types": {
            "name": "map_types",
            "location": 419,
            "return": [
                "Type",
                "str"
            ],
            "arguments": {}
        },
        "flat_map_types": {
            "name": "flat_map_types",
            "location": 425,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "apply_types": {
            "name": "apply_types",
            "location": 431,
            "return": [
                "Type",
                "str"
            ],
            "arguments": {}
        },
        "context_managed": {
            "name": "context_managed",
            "location": 437,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "wrapped": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "fn": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "chunked_flat_map": {
            "name": "chunked_flat_map",
            "location": 445,
            "return": [
                "Callable[[basilisp.lang.keyword.Keyword], Any]",
                "bool"
            ],
            "arguments": {
                "function": [
                    "Callable[[VT],bool]",
                    "Callable[VT,bool]",
                    "bool",
                    "List[Block]",
                    "List[B]"
                ],
                "capacity": [
                    "Callable[[VT],bool]",
                    "Callable[VT,bool]",
                    "bool",
                    "List[Block]",
                    "List[B]"
                ]
            }
        },
        "map_randomly": {
            "name": "map_randomly",
            "location": 450,
            "return": [
                "int",
                "dict",
                "str",
                "bytes"
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "bool",
                    "Callable[[T],Any]"
                ],
                "chance": [
                    "Callable",
                    "bool",
                    "Callable[[T],Any]"
                ]
            }
        },
        "map_periodically": {
            "name": "map_periodically",
            "location": 459,
            "return": [
                "int",
                "dict",
                "str",
                "bytes"
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "bool",
                    "Callable[[T],Any]"
                ],
                "interval": [
                    "Callable",
                    "bool",
                    "Callable[[T],Any]"
                ]
            }
        },
        "map_every_nth": {
            "name": "map_every_nth",
            "location": 478,
            "return": [
                "int",
                "dict",
                "str",
                "bytes"
            ],
            "arguments": {
                "function": [
                    "bool",
                    "float",
                    "Callable",
                    "int"
                ],
                "n": [
                    "bool",
                    "float",
                    "Callable",
                    "int"
                ]
            }
        },
        "apply_randomly": {
            "name": "apply_randomly",
            "location": 493,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "bool",
                    "Callable[[T],Any]"
                ],
                "chance": [
                    "Callable[[str],bool]",
                    "Callable[str,bool]"
                ]
            }
        },
        "apply_periodically": {
            "name": "apply_periodically",
            "location": 501,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "bool",
                    "Callable[[T],Any]"
                ],
                "interval": [
                    "Callable[[str],bool]",
                    "Callable[str,bool]"
                ]
            }
        },
        "apply_every_nth": {
            "name": "apply_every_nth",
            "location": 509,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "float"
            ],
            "arguments": {
                "function": [
                    "bool",
                    "float",
                    "Callable",
                    "int"
                ],
                "n": [
                    "int",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "deduplicate": {
            "name": "deduplicate",
            "location": 525,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "keys": [
                    "str",
                    "Union[float, int]",
                    "abc.graph.GraphKeyType"
                ],
                "verbose": [
                    "bool",
                    "str",
                    "Union[float,int]",
                    "abc.graph.GraphKeyType"
                ]
            }
        },
        "merge_on": {
            "name": "merge_on",
            "location": 597,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "bool",
                    "Callable[[T],Any]"
                ]
            }
        },
        "expand_indexed_pairs": {
            "name": "expand_indexed_pairs",
            "location": 616,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "width": [
                    "int",
                    "None",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[str]",
                    "str"
                ],
                "default": [
                    "int",
                    "None",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "cut_lines": {
            "name": "cut_lines",
            "location": 630,
            "return": [
                "str",
                "int",
                "set"
            ],
            "arguments": {
                "max_buf_size": [
                    "int",
                    "bool",
                    "float"
                ],
                "Buf": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "multi_combinations": {
            "name": "multi_combinations",
            "location": 655,
            "return": [
                "Iterator",
                "None",
                "Generator[list]",
                "Generator"
            ],
            "arguments": {}
        },
        "builder": {
            "name": "builder",
            "location": 672,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {}
        },
        "_bind_builder": {
            "name": "_bind_builder",
            "location": 709,
            "return": [
                "None"
            ],
            "arguments": {
                "fn": [
                    "bool",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "sliding_window": {
            "name": "sliding_window",
            "location": 727,
            "return": [
                "int",
                "str",
                "dict",
                "bool",
                "Tuple[int, int, int, int]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "unzip": {
            "name": "unzip",
            "location": 859,
            "return": [
                "List[PrefetchIterator]"
            ],
            "arguments": {
                "it": [
                    "Iterable[T]",
                    "bool",
                    "int",
                    "List[str]",
                    "Iterable"
                ],
                "width": [
                    "int",
                    "str",
                    "None",
                    "float"
                ]
            }
        },
        "IterableTransform.__call__": {
            "name": "__call__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "Callable",
                    "bool",
                    "Callable[...,Dict]"
                ]
            }
        },
        "IterableTransform.__pos__": {
            "name": "__pos__",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IterableTransform.__neg__": {
            "name": "__neg__",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IterableTransform.__invert__": {
            "name": "__invert__",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IterableTransform.__and__": {
            "name": "__and__",
            "location": 47,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict",
                    "AbstractSet",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "IterableTransform.__rand__": {
            "name": "__rand__",
            "location": 50,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict",
                    "AbstractSet",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "IterableTransform.__or__": {
            "name": "__or__",
            "location": 53,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict",
                    "AbstractSet",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "IterableTransform.__ror__": {
            "name": "__ror__",
            "location": 56,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict",
                    "AbstractSet",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "IterableTransform.__mul__": {
            "name": "__mul__",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection"
                ]
            }
        },
        "IterableTransform.__matmul__": {
            "name": "__matmul__",
            "location": 62,
            "return": [
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[Cell]",
                    "str",
                    "None"
                ]
            }
        },
        "constructor.inner": {
            "name": "inner",
            "location": 75,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "compose.run": {
            "name": "run",
            "location": 122,
            "return": [],
            "arguments": {
                "items": []
            }
        },
        "apply.run": {
            "name": "run",
            "location": 156,
            "return": [],
            "arguments": {
                "items": []
            }
        },
        "unreachable.run": {
            "name": "run",
            "location": 210,
            "return": [],
            "arguments": {
                "items": []
            }
        },
        "chain.run": {
            "name": "run",
            "location": 222,
            "return": [],
            "arguments": {
                "items": []
            }
        },
        "permute.run": {
            "name": "run",
            "location": 233,
            "return": [],
            "arguments": {
                "items": []
            }
        },
        "interleave.run": {
            "name": "run",
            "location": 244,
            "return": [],
            "arguments": {
                "items": []
            }
        },
        "guard.run": {
            "name": "run",
            "location": 260,
            "return": [],
            "arguments": {
                "items": []
            }
        },
        "chunk.run": {
            "name": "run",
            "location": 277,
            "return": [],
            "arguments": {
                "items": []
            }
        },
        "route.run": {
            "name": "run",
            "location": 298,
            "return": [],
            "arguments": {
                "items": []
            }
        },
        "sorted_route.run": {
            "name": "run",
            "location": 312,
            "return": [],
            "arguments": {
                "items": []
            }
        },
        "match.router": {
            "name": "router",
            "location": 348,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "item": [
                    "str",
                    "Union[int, slice]",
                    "dict"
                ]
            }
        },
        "type_match.predicate": {
            "name": "predicate",
            "location": 368,
            "return": [
                "Tuple",
                "bool"
            ],
            "arguments": {
                "target_type": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "map_type.run": {
            "name": "run",
            "location": 387,
            "return": [],
            "arguments": {
                "items": []
            }
        },
        "flat_map_type.run": {
            "name": "run",
            "location": 398,
            "return": [],
            "arguments": {
                "items": []
            }
        },
        "apply_type.run": {
            "name": "run",
            "location": 410,
            "return": [],
            "arguments": {
                "items": []
            }
        },
        "context_managed.run": {
            "name": "run",
            "location": 438,
            "return": [],
            "arguments": {
                "in_items": []
            }
        },
        "map_randomly.run": {
            "name": "run",
            "location": 451,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "map_periodically.run": {
            "name": "run",
            "location": 462,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "map_every_nth.run": {
            "name": "run",
            "location": 481,
            "return": [
                "bool",
                "type",
                "str"
            ],
            "arguments": {
                "item": [
                    "Callable[..., Iterable[Any]]",
                    "List[str]",
                    "int",
                    "float"
                ]
            }
        },
        "apply_randomly.inner": {
            "name": "inner",
            "location": 494,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "apply_periodically.inner": {
            "name": "inner",
            "location": 502,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "apply_every_nth.inner": {
            "name": "inner",
            "location": 510,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "deduplicate.inner": {
            "name": "inner",
            "location": 544,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "merge_on.inner": {
            "name": "inner",
            "location": 600,
            "return": [],
            "arguments": {
                "its": []
            }
        },
        "expand_indexed_pairs.inner": {
            "name": "inner",
            "location": 617,
            "return": [],
            "arguments": {
                "seq": []
            }
        },
        "cut_lines.inner": {
            "name": "inner",
            "location": 631,
            "return": [],
            "arguments": {
                "chunks": []
            }
        },
        "builder.inner": {
            "name": "inner",
            "location": 673,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "_bind_builder.outer": {
            "name": "outer",
            "location": 710,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "sliding_window.inner": {
            "name": "inner",
            "location": 728,
            "return": [
                "str",
                "int",
                "float",
                "slice"
            ],
            "arguments": {
                "it": [
                    "int"
                ]
            }
        },
        "PeekIterator.__init__": {
            "name": "__init__",
            "location": 735,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "it": [
                    "float",
                    "int"
                ]
            }
        },
        "PeekIterator.__iter__": {
            "name": "__iter__",
            "location": 741,
            "return": [
                "PeekIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeekIterator.done": {
            "name": "done",
            "location": 745,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeekIterator.__next__": {
            "name": "__next__",
            "location": 752,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeekIterator.peek": {
            "name": "peek",
            "location": 764,
            "return": [
                "int",
                "bool",
                "Pattern",
                "str",
                "float",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeekIterator.next_peek": {
            "name": "next_peek",
            "location": 773,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeekIterator.takewhile": {
            "name": "takewhile",
            "location": 777,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PeekIterator.skipwhile": {
            "name": "skipwhile",
            "location": 781,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PeekIterator.takeuntil": {
            "name": "takeuntil",
            "location": 785,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "str",
                    "bool",
                    "float",
                    "List[list[str]]",
                    "List[List[str]]",
                    "int"
                ]
            }
        },
        "PeekIterator.skipuntil": {
            "name": "skipuntil",
            "location": 788,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "str",
                    "bool",
                    "float",
                    "List[list[str]]",
                    "List[List[str]]",
                    "int"
                ]
            }
        },
        "PeekIterator.takethrough": {
            "name": "takethrough",
            "location": 791,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int",
                    "List",
                    "str"
                ]
            }
        },
        "PeekIterator.skipthrough": {
            "name": "skipthrough",
            "location": 794,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int",
                    "List",
                    "str"
                ]
            }
        },
        "PeekIterator.taketo": {
            "name": "taketo",
            "location": 797,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PeekIterator.skipto": {
            "name": "skipto",
            "location": 800,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProxyIterator.__init__": {
            "name": "__init__",
            "location": 806,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ProxyIterator.__iter__": {
            "name": "__iter__",
            "location": 809,
            "return": [
                "ProxyIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyIterator.__next__": {
            "name": "__next__",
            "location": 812,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrefetchIterator.__init__": {
            "name": "__init__",
            "location": 818,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "PrefetchIterator.__iter__": {
            "name": "__iter__",
            "location": 824,
            "return": [
                "PrefetchIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrefetchIterator.push": {
            "name": "push",
            "location": 827,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "str",
                    "List[Deque]",
                    "Callable",
                    "T",
                    "List[deque]"
                ]
            }
        },
        "PrefetchIterator.__next__": {
            "name": "__next__",
            "location": 830,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RetainIterator.__init__": {
            "name": "__init__",
            "location": 841,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "RetainIterator.__iter__": {
            "name": "__iter__",
            "location": 847,
            "return": [
                "RetainIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "RetainIterator.pop": {
            "name": "pop",
            "location": 850,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RetainIterator.__next__": {
            "name": "__next__",
            "location": 853,
            "return": [
                "Dict[str,Any]",
                "Dict[str,Dict[str,int]]",
                "List[str]",
                "DefaultDict",
                "List",
                "int",
                "Tuple[tuple[Union[str,Any]]]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "unzip.next_fn": {
            "name": "next_fn",
            "location": 870,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "idx": [
                    "str",
                    "Dict[str, Any]",
                    "Union[int, str]",
                    "float"
                ]
            }
        },
        "builder.inner._filter": {
            "name": "_filter",
            "location": 692,
            "return": [
                "float",
                "Callable[[None], bool]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "builder.inner.__call__": {
            "name": "__call__",
            "location": 699,
            "return": [
                "None",
                "str",
                "Type",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_bind_builder.outer.inner": {
            "name": "inner",
            "location": 711,
            "return": [],
            "arguments": {
                "meth": []
            }
        }
    },
    "omnibus-master/omnibus/lang.py": {
        "cls_dct_fn": {
            "name": "cls_dct_fn",
            "location": 34,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "offset": [
                    "int",
                    "List[str]",
                    "List[Dict[int, float]]"
                ]
            }
        },
        "public": {
            "name": "public",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls_dct": [
                    "Optional[\"TaxCategoryResourceIdentifier\"]",
                    "Optional[\"ExternalTaxRateDraft\"]",
                    "Optional[\"TaxRate\"]",
                    "Optional[\"ShippingMethodResourceIdentifier\"]",
                    "Optional[List[\"Delivery\"]]",
                    "Type"
                ],
                "target": [
                    "str",
                    "bool",
                    "bytes",
                    "Dict[Any, list]",
                    "Set[str]",
                    "List[str]"
                ]
            }
        },
        "public_as": {
            "name": "public_as",
            "location": 62,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "cls_dct": [
                    "str",
                    "List[str]",
                    "bool",
                    "Iterator[str]"
                ]
            }
        },
        "register_on": {
            "name": "register_on",
            "location": 68,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "reg": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Iterable[float]",
                    "Any",
                    "Optional[Callable]",
                    "int"
                ],
                "name": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Iterable[float]",
                    "Any",
                    "Optional[Callable]",
                    "int"
                ]
            }
        },
        "attr_repr": {
            "name": "attr_repr",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "eth.abc.ChainAPI"
                ]
            }
        },
        "arg_repr": {
            "name": "arg_repr",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "new_type": {
            "name": "new_type",
            "location": 91,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Mapping[str, Any]",
                    "Sequence[Any]",
                    "List[Tuple[str, str]]"
                ],
                "bases": [
                    "str",
                    "Mapping[str, Any]",
                    "Sequence[Any]",
                    "List[Tuple[str, str]]"
                ],
                "namespace": [
                    "str",
                    "Mapping[str, Any]",
                    "Sequence[Any]",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "super_meta": {
            "name": "super_meta",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "super_meta": [
                    "Type",
                    "str"
                ],
                "meta": [
                    "Type",
                    "str"
                ],
                "name": [
                    "Type",
                    "str"
                ],
                "bases": [
                    "str",
                    "int",
                    "Type[T]",
                    "Iterable[T]"
                ],
                "namespace": [
                    "Mapping[str, Any]",
                    "Optional[float]",
                    "str",
                    "bool"
                ]
            }
        },
        "is_lambda": {
            "name": "is_lambda",
            "location": 121,
            "return": [
                "mypy.types.Type",
                "mypy.types.FunctionLike",
                "Type",
                "BaseException",
                "types.TracebackType"
            ],
            "arguments": {
                "f": [
                    "str",
                    "enum.Enum",
                    "type"
                ]
            }
        },
        "is_descriptor": {
            "name": "is_descriptor",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int"
                ]
            }
        },
        "unwrap_instance_weakproxy": {
            "name": "unwrap_instance_weakproxy",
            "location": 134,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "proxy": [
                    "List[str]",
                    "dict",
                    "ark.types.PrimalDinoCharacter",
                    "Dict[str, Any]"
                ],
                "cls": [
                    "str",
                    "Type[enum.Enum]",
                    "Type[T]",
                    "int",
                    "BinaryIO"
                ]
            }
        },
        "exhaust": {
            "name": "exhaust",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "it": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "singleton": {
            "name": "singleton",
            "location": 148,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {}
        },
        "maybe_call": {
            "name": "maybe_call",
            "location": 194,
            "return": [
                "types.Resolver"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Optional[Any]",
                    "bytes",
                    "Optional[List[str]]"
                ],
                "att": [
                    "str",
                    "Optional[Any]",
                    "bytes",
                    "Optional[List[str]]"
                ]
            }
        },
        "anon_object": {
            "name": "anon_object",
            "location": 203,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict"
                ]
            }
        },
        "dir_dict": {
            "name": "dir_dict",
            "location": 207,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "obj": [
                    "bool",
                    "Optional[Sequence[Any]]",
                    "str",
                    "int"
                ]
            }
        },
        "cached_nullary": {
            "name": "cached_nullary",
            "location": 220,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_make_abstract": {
            "name": "_make_abstract",
            "location": 233,
            "return": [
                "str",
                "float",
                "tuple"
            ],
            "arguments": {
                "obj": [
                    "T",
                    "bytes",
                    "int"
                ]
            }
        },
        "is_abstract": {
            "name": "is_abstract",
            "location": 337,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "Dict[str, Any]",
                    "List[str]",
                    "Type",
                    "dict"
                ]
            }
        },
        "_extension_ignored_attrs": {
            "name": "_extension_ignored_attrs",
            "location": 408,
            "return": [
                "Set[str]"
            ],
            "arguments": {}
        },
        "override": {
            "name": "override",
            "location": 486,
            "return": [
                "str",
                "int",
                "Iterable[Any]"
            ],
            "arguments": {
                "fn": [
                    "BaseException"
                ]
            }
        },
        "access_forbidden": {
            "name": "access_forbidden",
            "location": 609,
            "return": [
                "AccessForbiddenDescriptor"
            ],
            "arguments": {}
        },
        "void": {
            "name": "void",
            "location": 617,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "raise_": {
            "name": "raise_",
            "location": 621,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "exc": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "maybe_managing": {
            "name": "maybe_managing",
            "location": 695,
            "return": [
                "T"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "disposing": {
            "name": "disposing",
            "location": 704,
            "return": [
                "T"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "T",
                    "bool",
                    "int"
                ],
                "attr": [
                    "str",
                    "T",
                    "bool",
                    "int"
                ]
            }
        },
        "defer": {
            "name": "defer",
            "location": 712,
            "return": [],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "context_wrapped": {
            "name": "context_wrapped",
            "location": 762,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "cm": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "context_var_setting": {
            "name": "context_var_setting",
            "location": 769,
            "return": [
                "T"
            ],
            "arguments": {
                "var": [
                    "list",
                    "Optional[List[Dict]]",
                    "List[Tuple[str, ...]]",
                    "List[List[int]]"
                ],
                "val": [
                    "list",
                    "Optional[List[Dict]]",
                    "List[Tuple[str, ...]]"
                ]
            }
        },
        "manage_maybe_iterator": {
            "name": "manage_maybe_iterator",
            "location": 777,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "manager_factory": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "maybe_iterator_factory": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "camelize": {
            "name": "camelize",
            "location": 798,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "decamelize": {
            "name": "decamelize",
            "location": 802,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "Set[int]",
                    "Optional[Sequence[int]]"
                ]
            }
        },
        "prefix_lines": {
            "name": "prefix_lines",
            "location": 807,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "p": [
                    "str"
                ]
            }
        },
        "indent_lines": {
            "name": "indent_lines",
            "location": 811,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "Iterator[str]",
                    "Optional[int]"
                ],
                "num": [
                    "str",
                    "int",
                    "Iterator[str]",
                    "Optional[int]"
                ]
            }
        },
        "is_dunder": {
            "name": "is_dunder",
            "location": 815,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "is_sunder": {
            "name": "is_sunder",
            "location": 824,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "parse_enum": {
            "name": "parse_enum",
            "location": 839,
            "return": [
                "str",
                "types.Resolver"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Exception"
                ],
                "cls": [
                    "str",
                    "AnyStr",
                    "T"
                ]
            }
        },
        "get_bit": {
            "name": "get_bit",
            "location": 925,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "bit": [
                    "int",
                    "str",
                    "datetime.datetime",
                    "float",
                    "datetime.date",
                    "datetime.timedelta"
                ],
                "value": [
                    "int",
                    "str",
                    "datetime.datetime",
                    "float",
                    "datetime.date",
                    "datetime.timedelta"
                ]
            }
        },
        "get_bits": {
            "name": "get_bits",
            "location": 929,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[str]",
                "Dict[int, dict]"
            ],
            "arguments": {
                "bits_from": [
                    "int",
                    "Sequence[int]",
                    "Optional[int]"
                ],
                "num_bits": [
                    "int",
                    "Sequence[int]",
                    "Optional[int]"
                ],
                "value": [
                    "int",
                    "Sequence[int]",
                    "Optional[int]"
                ]
            }
        },
        "set_bit": {
            "name": "set_bit",
            "location": 933,
            "return": [
                "int",
                "bool",
                "Optional[str]",
                "Tuple[str]",
                "float"
            ],
            "arguments": {
                "bit": [
                    "int",
                    "bool",
                    "float",
                    "T",
                    "str"
                ],
                "bit_value": [
                    "Union[bool, int]",
                    "str",
                    "datetime.datetime"
                ],
                "value": [
                    "int",
                    "bool",
                    "float",
                    "T",
                    "str"
                ]
            }
        },
        "set_bits": {
            "name": "set_bits",
            "location": 940,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "bits_from": [
                    "int"
                ],
                "num_bits": [
                    "int"
                ],
                "bits_value": [
                    "int"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "to_seconds": {
            "name": "to_seconds",
            "location": 1015,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "value": [
                    "datetime.timedelta",
                    "bool",
                    "float",
                    "str",
                    "datetime.date",
                    "int"
                ]
            }
        },
        "months_ago": {
            "name": "months_ago",
            "location": 1019,
            "return": [
                "datetime.date"
            ],
            "arguments": {
                "date": [
                    "datetime.datetime",
                    "datetime.date",
                    "int",
                    "str"
                ],
                "num": [
                    "datetime.datetime",
                    "int",
                    "datetime.date",
                    "datetime.datetime.timedelta"
                ]
            }
        },
        "parse_date": {
            "name": "parse_date",
            "location": 1039,
            "return": [
                "datetime.date"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "parse_timedelta": {
            "name": "parse_timedelta",
            "location": 1064,
            "return": [
                "datetime.timedelta"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "lazy_import": {
            "name": "lazy_import",
            "location": 1086,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "package": [
                    "str",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "import_module": {
            "name": "import_module",
            "location": 1090,
            "return": [
                "float",
                "bool",
                "str",
                "IO[Any]",
                "hashdecoder.lib.types.hint_type"
            ],
            "arguments": {
                "dotted_path": [
                    "str"
                ]
            }
        },
        "import_module_attr": {
            "name": "import_module_attr",
            "location": 1102,
            "return": [
                "List[str]",
                "Iterable[str]",
                "str",
                "mypy.types.FunctionLike"
            ],
            "arguments": {
                "dotted_path": [
                    "str"
                ]
            }
        },
        "yield_importable": {
            "name": "yield_importable",
            "location": 1111,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "package_root": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "yield_import_all": {
            "name": "yield_import_all",
            "location": 1139,
            "return": [
                "Generator[(module, Any, None)]"
            ],
            "arguments": {
                "package_root": [
                    "str",
                    "bool"
                ]
            }
        },
        "import_all": {
            "name": "import_all",
            "location": 1150,
            "return": [
                "None"
            ],
            "arguments": {
                "package_root": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "sync_await": {
            "name": "sync_await",
            "location": 1161,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "sync_list": {
            "name": "sync_list",
            "location": 1177,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "Optional[int]",
                    "list",
                    "bool",
                    "List[str]",
                    "zerver.lib.types.Validator[zerver.lib.requesResultT]"
                ]
            }
        },
        "syncable_iterable": {
            "name": "syncable_iterable",
            "location": 1208,
            "return": [
                "Callable"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "await_futures": {
            "name": "await_futures",
            "location": 1215,
            "return": [
                "bool"
            ],
            "arguments": {
                "futures": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "cls_dct_fn.outer": {
            "name": "outer",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "public_as.inner": {
            "name": "inner",
            "location": 63,
            "return": [],
            "arguments": {
                "target": []
            }
        },
        "register_on.inner": {
            "name": "inner",
            "location": 69,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "singleton.inner": {
            "name": "inner",
            "location": 149,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Accessor.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "getter": [
                    "str",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "Callable",
                    "bool"
                ],
                "translated_exceptions": [
                    "bool",
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "BaseException"
                ]
            }
        },
        "Accessor.__getitem__": {
            "name": "__getitem__",
            "location": 168,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Accessor.__getattr__": {
            "name": "__getattr__",
            "location": 174,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Accessor.__get__": {
            "name": "__get__",
            "location": 180,
            "return": [
                "Accessor"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "owner": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "Accessor.from_dict": {
            "name": "from_dict",
            "location": 190,
            "return": [
                "Accessor"
            ],
            "arguments": {
                "cls": [
                    "Type[Accessor]"
                ],
                "dct": [
                    "Dict[str, T]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "cached_nullary.inner": {
            "name": "inner",
            "location": 224,
            "return": [],
            "arguments": {}
        },
        "ProtocolException.__init__": {
            "name": "__init__",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reqs": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "ProtocolException.__repr__": {
            "name": "__repr__",
            "location": 254,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ProtocolMeta.__new__": {
            "name": "__new__",
            "location": 260,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "mcls": [
                    "Type[_ProtocolMeta]"
                ],
                "name": [
                    "str",
                    "MutableMapping[str, Any]",
                    "wemake_python_styleguide.types.ConfigurationOptions"
                ],
                "bases": [
                    "str",
                    "MutableMapping[str, Any]",
                    "wemake_python_styleguide.types.ConfigurationOptions"
                ],
                "namespace": [
                    "dict",
                    "Union[dict, list]",
                    "types.ModuleType"
                ]
            }
        },
        "Protocol.__new__": {
            "name": "__new__",
            "location": 305,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "opentrons.types.Mount",
                    "int",
                    "str"
                ],
                "impl": [
                    "Callable",
                    "opentrons.types.Mount",
                    "int",
                    "str"
                ]
            }
        },
        "Protocol.__init__": {
            "name": "__init__",
            "location": 309,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Descriptor.__get__": {
            "name": "__get__",
            "location": 315,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Type['Signature']",
                    "Type[Any]"
                ],
                "owner": [
                    "Type['Signature']",
                    "Type[Any]"
                ]
            }
        },
        "Abstract.__forceabstract__": {
            "name": "__forceabstract__",
            "location": 321,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Abstract.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "Type[T]",
                    "Callable[..., None]",
                    "bool",
                    "Iterable[\"Entity\"]",
                    "str",
                    "int"
                ]
            }
        },
        "_InterfaceMeta.__new__": {
            "name": "__new__",
            "location": 347,
            "return": [
                "str",
                "bool",
                "type",
                "Callable"
            ],
            "arguments": {
                "mcls": [
                    "Type[_InterfaceMeta]"
                ],
                "name": [
                    "types.ModuleType",
                    "str",
                    "Mapping[str, T]",
                    "type",
                    "Sequence[type]"
                ],
                "bases": [
                    "str",
                    "Type[Any]"
                ],
                "namespace": [
                    "str",
                    "dict"
                ]
            }
        },
        "FinalException.__init__": {
            "name": "__init__",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_type": [
                    "str",
                    "int"
                ]
            }
        },
        "FinalException.__repr__": {
            "name": "__repr__",
            "location": 371,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Final.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "SealedException.__init__": {
            "name": "__init__",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_type": [
                    "str",
                    "int"
                ]
            }
        },
        "SealedException.__repr__": {
            "name": "__repr__",
            "location": 391,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sealed.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "Union[Sequence[str], str]",
                    "Dict[str, Iterable[Any]]",
                    "dict",
                    "Type[T]"
                ]
            }
        },
        "_ExtensionMeta.__new__": {
            "name": "__new__",
            "location": 419,
            "return": [
                "str",
                "bool",
                "type",
                "Callable"
            ],
            "arguments": {
                "mcls": [
                    "Type[_ExtensionMeta]"
                ],
                "name": [
                    "str",
                    "Type[Any]",
                    "types.ModuleType"
                ],
                "bases": [
                    "str",
                    "List[Tuple[str, str]]",
                    "types.ModuleType",
                    "Dict[str, Any]",
                    "dict",
                    "bool"
                ],
                "namespace": [
                    "str",
                    "Type[Any]",
                    "types.ModuleType"
                ]
            }
        },
        "_ExtensionMeta.__getitem__": {
            "name": "__getitem__",
            "location": 455,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "bind": [
                    "str"
                ]
            }
        },
        "Override.__init__": {
            "name": "__init__",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "Union[str, IO]",
                    "Pattern",
                    "Union[str, Any]"
                ]
            }
        },
        "Override.__repr__": {
            "name": "__repr__",
            "location": 472,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Override.__set_name__": {
            "name": "__set_name__",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "Type",
                    "str"
                ],
                "name": [
                    "str",
                    "Type",
                    "int"
                ]
            }
        },
        "Override.__get__": {
            "name": "__get__",
            "location": 479,
            "return": [
                "int",
                "bytes",
                "Callable[[], T]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "Optional[str]",
                    "Set[str]"
                ],
                "owner": [
                    "str",
                    "Optional[str]",
                    "Set[str]"
                ]
            }
        },
        "Override.__call__": {
            "name": "__call__",
            "location": 482,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotInstantiable.__new__": {
            "name": "__new__",
            "location": 492,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "int",
                    "Type",
                    "Type[T]",
                    "str",
                    "Callable[[None], None]"
                ]
            }
        },
        "_Marker.__mro_entries__": {
            "name": "__mro_entries__",
            "location": 498,
            "return": [
                "Tuple[(Type[Final], Type[NotInstantiable])]"
            ],
            "arguments": {
                "self": [],
                "bases": [
                    "str",
                    "Type",
                    "bool",
                    "T",
                    "tuple"
                ]
            }
        },
        "_Namespace.__mro_entries__": {
            "name": "__mro_entries__",
            "location": 507,
            "return": [
                "Tuple[(Type[Final], Type[NotInstantiable])]"
            ],
            "arguments": {
                "self": [],
                "bases": [
                    "str",
                    "Type",
                    "bool",
                    "T",
                    "tuple"
                ]
            }
        },
        "Picklable.__getstate__": {
            "name": "__getstate__",
            "location": 516,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Picklable.__setstate__": {
            "name": "__setstate__",
            "location": 519,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "NotPicklable.__getstate__": {
            "name": "__getstate__",
            "location": 525,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotPicklable.__setstate__": {
            "name": "__setstate__",
            "location": 528,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "staticfunction.__init__": {
            "name": "__init__",
            "location": 539,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "Callable",
                    "Union[str, IO[bytes]]",
                    "int"
                ]
            }
        },
        "staticfunction.__repr__": {
            "name": "__repr__",
            "location": 543,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "staticfunction.__call__": {
            "name": "__call__",
            "location": 546,
            "return": [
                "bool",
                "Mapping[str, str]",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MixinMeta.__new__": {
            "name": "__new__",
            "location": 558,
            "return": [
                "str",
                "bool",
                "type",
                "Callable"
            ],
            "arguments": {
                "mcls": [
                    "Type[_MixinMeta]"
                ],
                "name": [
                    "str",
                    "Tuple[type]",
                    "Optional[str]"
                ],
                "bases": [
                    "str",
                    "Tuple[type]",
                    "Optional[str]"
                ],
                "namespace": [
                    "str",
                    "Tuple[type]",
                    "Optional[str]"
                ]
            }
        },
        "Mixin.capture": {
            "name": "capture",
            "location": 570,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AttrAccessForbiddenException.__init__": {
            "name": "__init__",
            "location": 587,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "Dict[str, Any]",
                    "Optional[Set[str]]",
                    "mypy.types.Type"
                ]
            }
        },
        "AccessForbiddenDescriptor.__init__": {
            "name": "__init__",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "AccessForbiddenDescriptor.__set_name__": {
            "name": "__set_name__",
            "location": 599,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "Type",
                    "Type['Signature']",
                    "str"
                ],
                "name": [
                    "str",
                    "list"
                ]
            }
        },
        "AccessForbiddenDescriptor.__get__": {
            "name": "__get__",
            "location": 605,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Type['Signature']",
                    "Type[Any]"
                ],
                "owner": [
                    "Type['Signature']",
                    "Type[Any]"
                ]
            }
        },
        "ContextManaged.__enter__": {
            "name": "__enter__",
            "location": 630,
            "return": [
                "ContextManaged"
            ],
            "arguments": {
                "self": [
                    "_TContextManaged@@ContextManaged@@"
                ]
            }
        },
        "ContextManaged.__exit__": {
            "name": "__exit__",
            "location": 633,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "ContextManageable.__enter__": {
            "name": "__enter__",
            "location": 644,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextManageable.__exit__": {
            "name": "__exit__",
            "location": 647,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "ExitStacked._exit_stack": {
            "name": "_exit_stack",
            "location": 659,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExitStacked._enter_context": {
            "name": "_enter_context",
            "location": 666,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "context_manager": [
                    "IO",
                    "str",
                    "bytes"
                ]
            }
        },
        "ExitStacked.__enter__": {
            "name": "__enter__",
            "location": 669,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExitStacked.__exit__": {
            "name": "__exit__",
            "location": 679,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "bool"
                ]
            }
        },
        "ContextWrapped.__init__": {
            "name": "__init__",
            "location": 724,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "T"
                ],
                "cm": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "ContextWrapped.__get__": {
            "name": "__get__",
            "location": 732,
            "return": [
                "ContextWrapped"
            ],
            "arguments": {
                "self": [
                    "_TContextWrapped@@ContextWrapped@@"
                ],
                "instance": [
                    "Optional[Dict]",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "Optional[Any]",
                    "Dict[str, str]",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "owner": [
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "Optional[Union[Any, Any]]"
                ]
            }
        },
        "ContextWrapped.__call__": {
            "name": "__call__",
            "location": 752,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "context_wrapped.inner": {
            "name": "inner",
            "location": 763,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "SimpleDict.update": {
            "name": "update",
            "location": 850,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "Dict[str, str]",
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "OrderedDict[str, Any]",
                    "int"
                ]
            }
        },
        "_AutoEnumMeta.__new__": {
            "name": "__new__",
            "location": 872,
            "return": [
                "mypy.types.Type",
                "dict",
                "Optional[Dict[str, str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "mcls": [
                    "Type[_AutoEnumMeta]"
                ],
                "name": [
                    "str",
                    "bool",
                    "types.ModuleType",
                    "List[Tuple[str, str]]",
                    "Dict[str, Any]"
                ],
                "bases": [
                    "dict",
                    "str",
                    "List[Tuple[str, str]]",
                    "type",
                    "Sequence[type]",
                    "bool"
                ],
                "namespace": [
                    "str",
                    "bool",
                    "types.ModuleType",
                    "List[Tuple[str, str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_AutoEnumMeta.__prepare__": {
            "name": "__prepare__",
            "location": 879,
            "return": [
                "Union[(_AutoEnumMeta.Dict, Dict[(nothing, nothing)])]"
            ],
            "arguments": {
                "mcls": [
                    "Type[_AutoEnumMeta]"
                ],
                "cls": [
                    "Optional[str]",
                    "str",
                    "Callable",
                    "List[str]"
                ],
                "bases": [
                    "Dict[str, str]",
                    "Dict[int, List[str]]",
                    "Match"
                ]
            }
        },
        "_ValueEnumMeta.__new__": {
            "name": "__new__",
            "location": 900,
            "return": [
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "mcls": [
                    "Type[_ValueEnumMeta]"
                ],
                "name": [
                    "str",
                    "MutableMapping[str, Any]",
                    "wemake_python_styleguide.types.ConfigurationOptions"
                ],
                "bases": [
                    "str",
                    "MutableMapping[str, Any]",
                    "wemake_python_styleguide.types.ConfigurationOptions"
                ],
                "namespace": [
                    "str",
                    "MutableMapping[str, Any]",
                    "wemake_python_styleguide.types.ConfigurationOptions"
                ]
            }
        },
        "ValueEnum.__new__": {
            "name": "__new__",
            "location": 915,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "int",
                    "Type",
                    "Type[T]",
                    "str",
                    "Callable[[None], None]"
                ]
            }
        },
        "Infinity.__repr__": {
            "name": "__repr__",
            "location": 946,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Infinity.__hash__": {
            "name": "__hash__",
            "location": 949,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Infinity.__eq__": {
            "name": "__eq__",
            "location": 952,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        },
        "Infinity.__ne__": {
            "name": "__ne__",
            "location": 955,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        },
        "Infinity.__lt__": {
            "name": "__lt__",
            "location": 958,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "Infinity.__le__": {
            "name": "__le__",
            "location": 961,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "Infinity.__gt__": {
            "name": "__gt__",
            "location": 964,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "Infinity.__ge__": {
            "name": "__ge__",
            "location": 967,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "Infinity.__neg__": {
            "name": "__neg__",
            "location": 970,
            "return": [
                "NegativeInfinity"
            ],
            "arguments": {
                "self": []
            }
        },
        "NegativeInfinity.__repr__": {
            "name": "__repr__",
            "location": 976,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NegativeInfinity.__hash__": {
            "name": "__hash__",
            "location": 979,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NegativeInfinity.__eq__": {
            "name": "__eq__",
            "location": 982,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        },
        "NegativeInfinity.__ne__": {
            "name": "__ne__",
            "location": 985,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        },
        "NegativeInfinity.__lt__": {
            "name": "__lt__",
            "location": 988,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "NegativeInfinity.__le__": {
            "name": "__le__",
            "location": 991,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "NegativeInfinity.__gt__": {
            "name": "__gt__",
            "location": 994,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "NegativeInfinity.__ge__": {
            "name": "__ge__",
            "location": 997,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "NegativeInfinity.__neg__": {
            "name": "__neg__",
            "location": 1000,
            "return": [
                "Infinity"
            ],
            "arguments": {
                "self": []
            }
        },
        "yield_importable.rec": {
            "name": "rec",
            "location": 1112,
            "return": [
                "mypy.types.Instance"
            ],
            "arguments": {
                "dir": [
                    "str"
                ]
            }
        },
        "SyncableIterable.__init__": {
            "name": "__init__",
            "location": 1194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "SyncableIterable.__iter__": {
            "name": "__iter__",
            "location": 1198,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncableIterable.__aiter__": {
            "name": "__aiter__",
            "location": 1204,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "syncable_iterable.inner": {
            "name": "inner",
            "location": 1210,
            "return": [
                "List[str]",
                "int",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {}
        },
        "ImmediateExecutor.submit": {
            "name": "submit",
            "location": 1239,
            "return": [
                "concurrent.futures._base.Future[nothing]"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "Callable",
                    "Tuple[float]"
                ]
            }
        },
        "cls_dct_fn.outer.inner": {
            "name": "inner",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "_ProtocolMeta.__new__.get_missing_reqs": {
            "name": "get_missing_reqs",
            "location": 269,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "Type['DataclassT']",
                    "str",
                    "List[str]"
                ]
            }
        },
        "_ProtocolMeta.__new__.__subclasshook__": {
            "name": "__subclasshook__",
            "location": 275,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "AsyncGenerator",
                    "T",
                    "Type",
                    "str"
                ],
                "subclass": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "_ProtocolMeta.__new__.__protocolcheck__": {
            "name": "__protocolcheck__",
            "location": 286,
            "return": [],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "subclass": [
                    "bool",
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Mixin.capture.mixin": {
            "name": "mixin",
            "location": 574,
            "return": [],
            "arguments": {}
        },
        "manage_maybe_iterator.inner": {
            "name": "inner",
            "location": 784,
            "return": [],
            "arguments": {}
        },
        "_AutoEnumMeta.Dict.__init__": {
            "name": "__init__",
            "location": 861,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "int",
                    "Optional[str]",
                    "Callable[[str], None]",
                    "str"
                ]
            }
        },
        "_AutoEnumMeta.Dict.__setitem__": {
            "name": "__setitem__",
            "location": 867,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "T"
                ],
                "value": [
                    "str",
                    "Dict[str, str]",
                    "list"
                ]
            }
        }
    },
    "omnibus-master/omnibus/libc.py": {
        "lasterr": {
            "name": "lasterr",
            "location": 254,
            "return": [
                "Tuple[(Any, str)]"
            ],
            "arguments": {}
        },
        "sigtrap": {
            "name": "sigtrap",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Mmap.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "float",
                    "Optional[int]",
                    "int",
                    "bool",
                    "None"
                ],
                "prot": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bool"
                ],
                "flags": [
                    "None",
                    "bool",
                    "str",
                    "Optional[str]",
                    "Union[None,int]",
                    "int",
                    "Optional[int]"
                ],
                "fd": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bool"
                ],
                "offset": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bool"
                ],
                "desired_base": [
                    "int",
                    "str"
                ],
                "lock": [
                    "bool",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "Mmap.base": {
            "name": "base",
            "location": 202,
            "return": [
                "str",
                "List[int]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mmap.__enter__": {
            "name": "__enter__",
            "location": 205,
            "return": [
                "Mmap"
            ],
            "arguments": {
                "self": [
                    "_TMmap@@Mmap@@"
                ]
            }
        },
        "Mmap.__exit__": {
            "name": "__exit__",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "et": [
                    "Optional[Type[BaseException]]"
                ],
                "e": [
                    "Optional[BaseException]"
                ],
                "tb": [
                    "float",
                    "Iterable[T]",
                    "Tuple[cirq.Qid]"
                ]
            }
        },
        "Malloc.__init__": {
            "name": "__init__",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sz": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Malloc.__enter__": {
            "name": "__enter__",
            "location": 288,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Malloc.__exit__": {
            "name": "__exit__",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "et": [
                    "Optional[Type[BaseException]]"
                ],
                "e": [
                    "Optional[BaseException]"
                ],
                "tb": [
                    "float",
                    "Iterable[T]",
                    "Tuple[cirq.Qid]"
                ]
            }
        },
        "Malloc.__int__": {
            "name": "__int__",
            "location": 297,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CMSG_ALIGN": {
            "name": "CMSG_ALIGN",
            "location": 464,
            "return": [
                "int",
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "sz": [
                    "float",
                    "Iterable[int]",
                    "bool",
                    "List[Tuple[int,int]]"
                ]
            }
        },
        "CMSG_SPACE": {
            "name": "CMSG_SPACE",
            "location": 468,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sz": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "CMSG_LEN": {
            "name": "CMSG_LEN",
            "location": 471,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sz": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "sendfd": {
            "name": "sendfd",
            "location": 474,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sock": [
                    "str",
                    "bool",
                    "Optional[Dict]",
                    "Dict",
                    "int",
                    "None"
                ],
                "fd": [
                    "int",
                    "bytes",
                    "Dict[str,int]",
                    "float"
                ],
                "data": [
                    "bytes",
                    "int"
                ]
            }
        },
        "recvfd": {
            "name": "recvfd",
            "location": 506,
            "return": [
                "Tuple[(Any, Optional[list])]"
            ],
            "arguments": {
                "sock": [
                    "bytes",
                    "str"
                ],
                "buf_len": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "omnibus-master/omnibus/logs.py": {
        "build_log_format": {
            "name": "build_log_format",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "parts": [
                    "bytes",
                    "str",
                    "Iterable[Tuple[str,str]]",
                    "Dict",
                    "List",
                    "Union[bytes,str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "configure_standard_logging": {
            "name": "configure_standard_logging",
            "location": 82,
            "return": [
                "logging.StreamHandler[TextIO]"
            ],
            "arguments": {
                "level": [
                    "str",
                    "None",
                    "Optional[Iterable[Any]]",
                    "Iterable[Any]"
                ]
            }
        },
        "error_logging": {
            "name": "error_logging",
            "location": 94,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "log": [
                    "Optional[dict]",
                    "int",
                    "Type[T]",
                    "str",
                    "Callable[[None], None]",
                    "dict"
                ]
            }
        },
        "LogFormatter.formatTime": {
            "name": "formatTime",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "bytes",
                    "Union[str,bytes]"
                ],
                "datefmt": [
                    "str",
                    "List",
                    "None",
                    "int"
                ]
            }
        },
        "TidFilter.filter": {
            "name": "filter",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "float",
                    "List[str]",
                    "Callable[None,bool]",
                    "int",
                    "logging.LogRecord",
                    "Callable[[None],bool]"
                ]
            }
        },
        "error_logging.outer": {
            "name": "outer",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_gettid": {
            "name": "_gettid",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "error_logging.outer.inner": {
            "name": "inner",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "omnibus-master/omnibus/os.py": {
        "round_to_page_size": {
            "name": "round_to_page_size",
            "location": 28,
            "return": [
                "int",
                "float",
                "List[int]"
            ],
            "arguments": {
                "sz": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "check_locales": {
            "name": "check_locales",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "which": {
            "name": "which",
            "location": 42,
            "return": [
                "Optional[Union[(str, _T0)]]"
            ],
            "arguments": {
                "program": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "signal_handling": {
            "name": "signal_handling",
            "location": 61,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "handler": [
                    "str",
                    "Callable",
                    "BaseException",
                    "int"
                ],
                "sigs": [
                    "str",
                    "Dict",
                    "Optional[Dict]"
                ]
            }
        },
        "get_sock_cred": {
            "name": "get_sock_cred",
            "location": 86,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "conn": [
                    "str",
                    "slice",
                    "int",
                    "Union[int,float]",
                    "float"
                ]
            }
        },
        "set_cloexec_flag": {
            "name": "set_cloexec_flag",
            "location": 98,
            "return": [
                "int"
            ],
            "arguments": {
                "fd": [
                    "int",
                    "str",
                    "float"
                ],
                "value": [
                    "bool",
                    "List[str]",
                    "int"
                ]
            }
        },
        "try_lock": {
            "name": "try_lock",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "fd": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "tmp_chdir": {
            "name": "tmp_chdir",
            "location": 119,
            "return": [
                "Iterator",
                "Generator"
            ],
            "arguments": {
                "cwd": [
                    "bool",
                    "str",
                    "float",
                    "Sequence[int]",
                    "int"
                ]
            }
        },
        "atomic_write_file": {
            "name": "atomic_write_file",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ],
                "contents": [
                    "bytes",
                    "bool",
                    "str",
                    "Union[int,str]"
                ]
            }
        },
        "create_symlink": {
            "name": "create_symlink",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "real_path": [
                    "str",
                    "Dict[str,Any]"
                ],
                "symlink_path": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "clone_dir": {
            "name": "clone_dir",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [
                    "str",
                    "Dict[str,str]"
                ],
                "dst": [
                    "str"
                ]
            }
        },
        "set_path_readonly": {
            "name": "set_path_readonly",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "which.is_exe": {
            "name": "is_exe",
            "location": 43,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "fpath": [
                    "str"
                ]
            }
        },
        "SubprocessLike.pid": {
            "name": "pid",
            "location": 144,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubprocessLike.poll": {
            "name": "poll",
            "location": 147,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubprocessLike.wait": {
            "name": "wait",
            "location": 150,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float",
                    "None",
                    "int",
                    "Optional[float]",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "TempSubprocess.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "TempSubprocess.pid": {
            "name": "pid",
            "location": 176,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TempSubprocess.poll": {
            "name": "poll",
            "location": 179,
            "return": [
                "None",
                "Optional[str]",
                "List",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TempSubprocess.wait": {
            "name": "wait",
            "location": 185,
            "return": [
                "int",
                "Literal",
                "Callable",
                "str",
                "Dict[str,Type]",
                "Dict[str,str]",
                "Set",
                "Dict[str,int]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Sequence[Any]",
                    "None",
                    "Dict[str,Any]",
                    "Tuple[str,int]",
                    "Optional[Dict]",
                    "Tuple[Union[str,int]]",
                    "Dict"
                ]
            }
        }
    },
    "omnibus-master/omnibus/properties.py": {
        "cached": {
            "name": "cached",
            "location": 45,
            "return": [
                "CachedProperty"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "class_": {
            "name": "class_",
            "location": 98,
            "return": [
                "ClassProperty"
            ],
            "arguments": {
                "fn": [
                    "Callable[...,T]",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "cached_class": {
            "name": "cached_class",
            "location": 124,
            "return": [
                "CachedClassProperty"
            ],
            "arguments": {
                "fn": [
                    "Callable[...,T]",
                    "str",
                    "Exception",
                    "Dict[str,Any]"
                ]
            }
        },
        "registry": {
            "name": "registry",
            "location": 251,
            "return": [
                "RegistryProperty"
            ],
            "arguments": {}
        },
        "CachedProperty.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable[Any,T]",
                    "int",
                    "Callable[[Any],T]",
                    "str",
                    "Sequence[dict]",
                    "bool",
                    "List[tuple[Union[str,str]]]",
                    "List[Tuple[str,str]]"
                ]
            }
        },
        "CachedProperty.__get__": {
            "name": "__get__",
            "location": 38,
            "return": [
                "str",
                "int",
                "CachedProperty",
                "Dict",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "List[float]",
                    "Optional[List[float]]",
                    "None",
                    "int",
                    "Optional[object]"
                ],
                "cls": [
                    "Type",
                    "Callable",
                    "None",
                    "Optional[type]",
                    "Callable[,None]"
                ]
            }
        },
        "SetOnceProperty.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr_name": [
                    "str",
                    "None",
                    "Sequence[str]",
                    "Tuple[type]",
                    "bool",
                    "Tuple[Type]"
                ]
            }
        },
        "SetOnceProperty.__get__": {
            "name": "__get__",
            "location": 64,
            "return": [
                "SetOnceProperty"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "owner": [
                    "Type",
                    "Type[Signature]",
                    "Type[Any]"
                ]
            }
        },
        "SetOnceProperty.__set__": {
            "name": "__set__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Dict",
                    "None"
                ],
                "value": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Dict[str,str]",
                    "None"
                ]
            }
        },
        "SetOnceProperty.__delete__": {
            "name": "__delete__",
            "location": 80,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "bool",
                    "Iterable[int]",
                    "T"
                ]
            }
        },
        "ClassProperty.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "int",
                    "float",
                    "List[List[T]]",
                    "List[list[T]]"
                ]
            }
        },
        "ClassProperty.__get__": {
            "name": "__get__",
            "location": 94,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Type",
                    "Callable",
                    "None",
                    "Optional[type]",
                    "Callable[,None]"
                ],
                "cls": [
                    "str",
                    "None",
                    "int",
                    "bool"
                ]
            }
        },
        "CachedClassProperty.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "int",
                    "float",
                    "List[List[T]]",
                    "List[list[T]]"
                ]
            }
        },
        "CachedClassProperty.clear": {
            "name": "clear",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedClassProperty.__get__": {
            "name": "__get__",
            "location": 113,
            "return": [
                "Dict",
                "str",
                "Generator[Union[Any,None,None]]",
                "bool",
                "List[tuple[Union[str,str]]]",
                "int",
                "Optional[List[CustomLineItemDraft]]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Type",
                    "Callable",
                    "None",
                    "Optional[type]",
                    "Callable[,None]"
                ],
                "cls": [
                    "Type[object]",
                    "Callable",
                    "None",
                    "Type"
                ]
            }
        },
        "RegistryProperty.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegistryProperty.singledispatch": {
            "name": "singledispatch",
            "location": 153,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegistryProperty.__get__": {
            "name": "__get__",
            "location": 202,
            "return": [
                "Union[(RegistryProperty, RegistryProperty.DescriptorAccessor, Dict[(nothing, Any)])]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "bool"
                ],
                "cls": [
                    "bool",
                    "None",
                    "str",
                    "Callable[...,T]",
                    "Optional[object]"
                ]
            }
        },
        "RegistryProperty.register": {
            "name": "register",
            "location": 223,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegistryProperty.invalidate": {
            "name": "invalidate",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegistryMeta.__prepare__": {
            "name": "__prepare__",
            "location": 309,
            "return": [
                "RegistryMeta.RegisteringNamespace"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[mypy.types.Instance]",
                    "Type[T]",
                    "int",
                    "Type",
                    "float"
                ],
                "name": [
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[type]",
                    "Tuple[Type]"
                ],
                "bases": [
                    "str",
                    "Dict",
                    "Union[str,bytes]",
                    "bytes"
                ]
            }
        },
        "RegistryMeta.__new__": {
            "name": "__new__",
            "location": 318,
            "return": [
                "str",
                "bool",
                "type",
                "Callable"
            ],
            "arguments": {
                "mcls": [
                    "Type[RegistryMeta]"
                ],
                "name": [
                    "str",
                    "Dict",
                    "int"
                ],
                "bases": [
                    "str",
                    "Dict",
                    "int"
                ],
                "namespace": [
                    "str",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "CachedProperty.__init__.__get__": {
            "name": "__get__",
            "location": 30,
            "return": [
                "CachedProperty",
                "dict[, ]",
                "set[str]",
                "str"
            ],
            "arguments": {
                "obj": [
                    "bool",
                    "list[float]",
                    "None"
                ],
                "cls": [
                    "typing.Type",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "RegistryProperty.DescriptorAccessor.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Tuple[str, str]"
                ],
                "lookup": [
                    "bool",
                    "Optional[dict]",
                    "float",
                    "Union[float, Tuple[float, float]]"
                ],
                "obj": [
                    "bool",
                    "Optional[dict]",
                    "float",
                    "Union[float, Tuple[float, float]]"
                ],
                "cls": [
                    "bool",
                    "Optional[dict]",
                    "float",
                    "Union[float, Tuple[float, float]]"
                ]
            }
        },
        "RegistryProperty.DescriptorAccessor.__getitem__": {
            "name": "__getitem__",
            "location": 166,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List[str]",
                    "Mapping",
                    "bytes",
                    "bool"
                ]
            }
        },
        "RegistryProperty.DescriptorAccessor.__iter__": {
            "name": "__iter__",
            "location": 172,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegistryProperty.DescriptorAccessor.__len__": {
            "name": "__len__",
            "location": 175,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegistryProperty.DescriptorAccessor.register": {
            "name": "register",
            "location": 178,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegistryProperty.DescriptorAccessor.invalidate": {
            "name": "invalidate",
            "location": 181,
            "return": [
                "bool",
                "List[int]",
                "Iterable[str]",
                "tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegistryProperty.DescriptorAccessor._singledispatch": {
            "name": "_singledispatch",
            "location": 185,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegistryProperty.DescriptorAccessor.__call__": {
            "name": "__call__",
            "location": 196,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegistryProperty.DescriptorAccessor.dispatch": {
            "name": "dispatch",
            "location": 199,
            "return": [
                "float",
                "T",
                "int"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "RegistryProperty.register.inner": {
            "name": "inner",
            "location": 242,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "meth": [
                    "dict",
                    "int",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "RegistryMeta.RegisteringNamespace.__init__": {
            "name": "__init__",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "regs": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "RegistryMeta.RegisteringNamespace.__contains__": {
            "name": "__contains__",
            "location": 273,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "List[float]",
                    "bool"
                ]
            }
        },
        "RegistryMeta.RegisteringNamespace.__getitem__": {
            "name": "__getitem__",
            "location": 276,
            "return": [
                "Mapping",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List[str]",
                    "abc.Mapping"
                ]
            }
        },
        "RegistryMeta.RegisteringNamespace.__setitem__": {
            "name": "__setitem__",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT"
                ],
                "value": [
                    "str",
                    "bytes",
                    "int",
                    "Hashable",
                    "Callable"
                ]
            }
        },
        "RegistryMeta.RegisteringNamespace.__delitem__": {
            "name": "__delitem__",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[str]",
                    "str",
                    "tuple",
                    "Dict[str, str]",
                    "int",
                    "Callable[[KT], VT]",
                    "Type[RuntimeError]"
                ]
            }
        },
        "RegistryMeta.RegisteringNamespace.get": {
            "name": "get",
            "location": 295,
            "return": [
                "None",
                "str",
                "Tuple",
                "Optional[Dict[str,Any]]",
                "Optional[str]",
                "opentrons.types.Location",
                "opentrons.protocols.types.APIVersion"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "str",
                    "bool"
                ],
                "d": [
                    "None",
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[Any]",
                    "str"
                ]
            }
        },
        "RegistryMeta.RegisteringNamespace.setdefault": {
            "name": "setdefault",
            "location": 301,
            "return": [
                "None",
                "bool",
                "Optional[str]",
                "float",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int"
                ],
                "d": [
                    "int",
                    "None"
                ]
            }
        },
        "RegistryProperty.DescriptorAccessor._singledispatch.default": {
            "name": "default",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "arg": [
                    "str",
                    "int",
                    "float",
                    "Union[float, int]"
                ]
            }
        }
    },
    "omnibus-master/omnibus/pydevd.py": {
        "_pydevd": {
            "name": "_pydevd",
            "location": 17,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "Optional[List[Any]]",
                "List",
                "Optional[BaseException]"
            ],
            "arguments": {}
        },
        "is_present": {
            "name": "is_present",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "get_setup": {
            "name": "get_setup",
            "location": 28,
            "return": [
                "None",
                "str",
                "bool",
                "Optional[int]",
                "opentrons.types.Location",
                "opentrons.protocols.types.APIVersion"
            ],
            "arguments": {}
        },
        "is_running": {
            "name": "is_running",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "get_args": {
            "name": "get_args",
            "location": 39,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "save_args": {
            "name": "save_args",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "maybe_reexec": {
            "name": "maybe_reexec",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "omnibus-master/omnibus/reflect.py": {
        "is_generic": {
            "name": "is_generic",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Tuple[object]",
                    "Type",
                    "mypy.types.Type"
                ]
            }
        },
        "unerase_generic": {
            "name": "unerase_generic",
            "location": 48,
            "return": [
                "GenericAlias",
                "str",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "collections.abc.AsyncGenerator",
                    "str",
                    "AsyncGenerator",
                    "Type",
                    "Type[types.C]",
                    "types.StrucInput"
                ]
            }
        },
        "get_root_special": {
            "name": "get_root_special",
            "location": 63,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str"
                ]
            }
        },
        "is_special_generic": {
            "name": "is_special_generic",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "None",
                    "Optional[type]"
                ]
            }
        },
        "is_new_type": {
            "name": "is_new_type",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Callable[str,I]",
                    "str",
                    "Callable[[str],mypy.types.Instance]",
                    "types.ModuleType"
                ]
            }
        },
        "generic_bases": {
            "name": "generic_bases",
            "location": 95,
            "return": [
                "List[GenericAlias]",
                "str",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Dict[str,Any]",
                    "Type[Any]",
                    "Type"
                ]
            }
        },
        "erase_generic": {
            "name": "erase_generic",
            "location": 124,
            "return": [
                "Type",
                "str",
                "types.Resolver"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type"
                ]
            }
        },
        "erased_generic_bases": {
            "name": "erased_generic_bases",
            "location": 133,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Tuple[int]",
                    "Set",
                    "List[int]",
                    "str",
                    "Union[float,str]",
                    "float"
                ]
            }
        },
        "is_abc_dependent": {
            "name": "is_abc_dependent",
            "location": 137,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "Dict[str,Any]",
                    "mypy.types.Instance",
                    "Type[Any]",
                    "exporwiki.types.MissionType"
                ]
            }
        },
        "is_instance_dependent": {
            "name": "is_instance_dependent",
            "location": 145,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "List[mypy.types.Type]",
                    "List[T]"
                ]
            }
        },
        "is_subclass_dependent": {
            "name": "is_subclass_dependent",
            "location": 149,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "List[mypy.types.Type]",
                    "List[T]"
                ]
            }
        },
        "is_dependent": {
            "name": "is_dependent",
            "location": 153,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "int",
                    "str"
                ]
            }
        },
        "eval_types": {
            "name": "eval_types",
            "location": 168,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "annotations": [
                    "Mapping",
                    "Mapping[str,Any]",
                    "mypy.types.Type"
                ],
                "globalns": [
                    "Mapping[str,Any]",
                    "None",
                    "mypy.types.Type",
                    "Mapping"
                ],
                "localns": [
                    "Mapping[str,Any]",
                    "None",
                    "mypy.types.Type",
                    "Mapping"
                ]
            }
        },
        "eval_type": {
            "name": "eval_type",
            "location": 180,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "annotation": [
                    "Mapping",
                    "Mapping[str,Any]",
                    "mypy.types.Type"
                ],
                "globalns": [
                    "Mapping[str,Any]",
                    "None",
                    "mypy.types.Type",
                    "Mapping"
                ],
                "localns": [
                    "Mapping[str,Any]",
                    "None",
                    "mypy.types.Type",
                    "Mapping"
                ]
            }
        },
        "_get_spec": {
            "name": "_get_spec",
            "location": 550,
            "return": [
                "Optional[str]",
                "Spec",
                "str",
                "Optional[List[str]]",
                "AnySpec",
                "int",
                "VarSpec",
                "bool",
                "TupleTypeSpec",
                "UnionSpec",
                "SpecialParameterizedGenericTypeSpec",
                "ExplicitParameterizedGenericTypeSpec",
                "NonGenericTypeSpec"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[int]",
                    "int",
                    "bool",
                    "None",
                    "Type[T]",
                    "Type",
                    "Optional[Any]",
                    "Any"
                ]
            }
        },
        "get_spec": {
            "name": "get_spec",
            "location": 579,
            "return": [
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "str",
                    "List[str]",
                    "Type[DataclassT]",
                    "Type"
                ]
            }
        },
        "get_type_spec": {
            "name": "get_type_spec",
            "location": 583,
            "return": [
                "TypeSpec"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "mypy.types.Type.VarId"
                ]
            }
        },
        "get_unerased_type_spec": {
            "name": "get_unerased_type_spec",
            "location": 587,
            "return": [
                "TypeSpec"
            ],
            "arguments": {
                "cls": [
                    "Type"
                ]
            }
        },
        "spec_has_placeholders": {
            "name": "spec_has_placeholders",
            "location": 593,
            "return": [
                "bool"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "int"
                ]
            }
        },
        "spec_is_any": {
            "name": "spec_is_any",
            "location": 597,
            "return": [
                "bool"
            ],
            "arguments": {
                "spec": []
            }
        },
        "AnnotationAdapter.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "annotations": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "AnnotationAdapter.annotations": {
            "name": "annotations",
            "location": 164,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecVisitor.visit_spec": {
            "name": "visit_spec",
            "location": 198,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "Dict"
                ]
            }
        },
        "SpecVisitor.visit_placeholder_spec": {
            "name": "visit_placeholder_spec",
            "location": 201,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "Dict"
                ]
            }
        },
        "SpecVisitor.visit_any_spec": {
            "name": "visit_any_spec",
            "location": 204,
            "return": [
                "mypy.types.CallableType"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "Dict"
                ]
            }
        },
        "SpecVisitor.visit_var_spec": {
            "name": "visit_var_spec",
            "location": 207,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "Dict"
                ]
            }
        },
        "SpecVisitor.visit_union_spec": {
            "name": "visit_union_spec",
            "location": 210,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "Dict"
                ]
            }
        },
        "SpecVisitor.visit_type_spec": {
            "name": "visit_type_spec",
            "location": 213,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "Dict"
                ]
            }
        },
        "SpecVisitor.visit_non_generic_type_spec": {
            "name": "visit_non_generic_type_spec",
            "location": 216,
            "return": [
                "mypy.types.Type.Type",
                "mypy.types.TypeType",
                "mypy.types.CallableType",
                "mypy.types.PlaceholderType"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "mypy.types.TypeType",
                    "mypy.types.Type.Type",
                    "mypy.types.CallableType",
                    "mypy.types.PartialType"
                ]
            }
        },
        "SpecVisitor.visit_generic_type_spec": {
            "name": "visit_generic_type_spec",
            "location": 219,
            "return": [
                "mypy.types.Type.VarType",
                "mypy.types.TypeVarType",
                "mypy.types.CallableType",
                "mypy.types.PartialType",
                "mypy.types.Type.Type"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "mypy.types.TypeList",
                    "mypy.types.Type.List",
                    "mypy.types.TypeType",
                    "mypy.types.CallableType",
                    "mypy.types.PartialType"
                ]
            }
        },
        "SpecVisitor.visit_parameterized_generic_type_spec": {
            "name": "visit_parameterized_generic_type_spec",
            "location": 222,
            "return": [
                "mypy.types.CallableType",
                "mypy.types.Type.VarType",
                "mypy.types.TypeVarType"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "mypy.types.CallableType",
                    "mypy.types.Type",
                    "mypy.types.TypeType",
                    "mypy.types.PartialType"
                ]
            }
        },
        "SpecVisitor.visit_explicit_parameterized_generic_type_spec": {
            "name": "visit_explicit_parameterized_generic_type_spec",
            "location": 225,
            "return": [
                "mypy.types.CallableType",
                "mypy.types.UnboundType",
                "mypy.types.PlaceholderType",
                "mypy.types.PartialType",
                "bool",
                "wemake_python_styleguide.types.AnyFunctionDef"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "mypy.types.CallableType",
                    "mypy.types.Type",
                    "mypy.types.RawExpressionType",
                    "mypy.types.TypeType"
                ]
            }
        },
        "SpecVisitor.visit_special_parameterized_generic_type_spec": {
            "name": "visit_special_parameterized_generic_type_spec",
            "location": 228,
            "return": [
                "mypy.types.CallableType",
                "mypy.types.UnboundType",
                "mypy.types.PlaceholderType",
                "mypy.types.PartialType",
                "bool",
                "wemake_python_styleguide.types.AnyFunctionDef"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "mypy.types.CallableType",
                    "mypy.types.Type",
                    "mypy.types.RawExpressionType",
                    "mypy.types.TypeType"
                ]
            }
        },
        "SpecVisitor.visit_variadic_generic_type_spec": {
            "name": "visit_variadic_generic_type_spec",
            "location": 231,
            "return": [
                "mypy.types.CallableType",
                "mypy.types.Type.VarType",
                "mypy.types.TypeVarType"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "mypy.types.CallableType",
                    "mypy.types.Type",
                    "mypy.types.TypeType",
                    "mypy.types.PartialType"
                ]
            }
        },
        "SpecVisitor.visit_tuple_type_spec": {
            "name": "visit_tuple_type_spec",
            "location": 234,
            "return": [
                "mypy.types.CallableType",
                "mypy.types.Type.VarType",
                "mypy.types.TypeVarType",
                "mypy.types.PartialType"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "mypy.types.CallableType",
                    "mypy.types.Type",
                    "mypy.types.TypeType"
                ]
            }
        },
        "Spec.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "Dict",
                    "int"
                ]
            }
        },
        "Spec._cls": {
            "name": "_cls",
            "location": 246,
            "return": [
                "int",
                "str",
                "None",
                "Dict[str,Any]",
                "Callable[[str],T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spec.cls": {
            "name": "cls",
            "location": 258,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spec.__iter__": {
            "name": "__iter__",
            "location": 261,
            "return": [
                "Generator[(Spec, Any, builtins.NoneType)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spec.all_types": {
            "name": "all_types",
            "location": 265,
            "return": [
                "List",
                "str",
                "Iterable[str]",
                "bool",
                "Dict[str,List[Any]]",
                "List[Tuple[str,Any]]",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spec.accept": {
            "name": "accept",
            "location": 269,
            "return": [
                "T",
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "AnySpec.__init__": {
            "name": "__init__",
            "location": 279,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Optional[dict]",
                    "Dict",
                    "Tuple[int]",
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "AnySpec.accept": {
            "name": "accept",
            "location": 284,
            "return": [
                "Sequence['cirq.Qid']",
                "SupportsFloat"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "bool",
                    "T",
                    "List[str]"
                ]
            }
        },
        "VarSpec.__init__": {
            "name": "__init__",
            "location": 299,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Optional[dict]",
                    "str",
                    "Dict",
                    "None",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "VarSpec.bound": {
            "name": "bound",
            "location": 305,
            "return": [
                "None",
                "bool",
                "Optional[str]",
                "str",
                "Optional[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VarSpec.variance": {
            "name": "variance",
            "location": 312,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VarSpec.__iter__": {
            "name": "__iter__",
            "location": 322,
            "return": [
                "Generator[(Any, Any, builtins.NoneType)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VarSpec.accept": {
            "name": "accept",
            "location": 327,
            "return": [
                "Sequence['cirq.Qid']",
                "SupportsFloat",
                "bool",
                "types.signals.SignalHandlerT"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "int",
                    "dict",
                    "bool"
                ]
            }
        },
        "UnionSpec.__init__": {
            "name": "__init__",
            "location": 333,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str,str]",
                    "bool"
                ]
            }
        },
        "UnionSpec.args_cls": {
            "name": "args_cls",
            "location": 340,
            "return": [
                "Sequence[Any]",
                "Callable",
                "str",
                "Dict[str, Any]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnionSpec.args": {
            "name": "args",
            "location": 344,
            "return": [
                "List",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnionSpec.__iter__": {
            "name": "__iter__",
            "location": 347,
            "return": [
                "Generator[(nothing, Any, builtins.NoneType)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnionSpec.accept": {
            "name": "accept",
            "location": 352,
            "return": [
                "Sequence['cirq.Qid']",
                "SupportsFloat"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "bool",
                    "T",
                    "List[str]"
                ]
            }
        },
        "TypeSpec.__init__": {
            "name": "__init__",
            "location": 358,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "int",
                    "List[Callable]",
                    "Mapping",
                    "Dict",
                    "Callable",
                    "bool"
                ]
            }
        },
        "TypeSpec.cls": {
            "name": "cls",
            "location": 364,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeSpec.erased_cls": {
            "name": "erased_cls",
            "location": 369,
            "return": [
                "Type",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeSpec.erased": {
            "name": "erased",
            "location": 374,
            "return": [
                "TypeSpec",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeSpec.bases_cls": {
            "name": "bases_cls",
            "location": 379,
            "return": [
                "Sequence[TypeLike]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeSpec.bases": {
            "name": "bases",
            "location": 383,
            "return": [
                "bool",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeSpec.__iter__": {
            "name": "__iter__",
            "location": 386,
            "return": [
                "Generator[(nothing, Any, builtins.NoneType)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NonGenericTypeSpec.__init__": {
            "name": "__init__",
            "location": 394,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[T]",
                    "bytes",
                    "Type",
                    "Dict[str,str]"
                ]
            }
        },
        "NonGenericTypeSpec.cls": {
            "name": "cls",
            "location": 400,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NonGenericTypeSpec.erased_cls": {
            "name": "erased_cls",
            "location": 404,
            "return": [
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NonGenericTypeSpec.erased": {
            "name": "erased",
            "location": 408,
            "return": [
                "NonGenericTypeSpec",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NonGenericTypeSpec.bases_cls": {
            "name": "bases_cls",
            "location": 412,
            "return": [
                "str",
                "bytearray",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "NonGenericTypeSpec.accept": {
            "name": "accept",
            "location": 415,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "mypy.types.Type",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "GenericTypeSpec.__init__": {
            "name": "__init__",
            "location": 424,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "List[str]",
                    "bool",
                    "Mapping",
                    "T",
                    "Mapping[str,lang.asFragmentDefinition]"
                ]
            }
        },
        "GenericTypeSpec.cls": {
            "name": "cls",
            "location": 433,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericTypeSpec.erased_cls": {
            "name": "erased_cls",
            "location": 437,
            "return": [
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericTypeSpec.erased": {
            "name": "erased",
            "location": 441,
            "return": [
                "Type",
                "bool",
                "mypy.types.Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericTypeSpec.args_cls": {
            "name": "args_cls",
            "location": 445,
            "return": [
                "Sequence[Any]",
                "Callable",
                "str",
                "Dict[str, Any]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericTypeSpec.args": {
            "name": "args",
            "location": 449,
            "return": [
                "List",
                "List[str]",
                "str",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericTypeSpec.__iter__": {
            "name": "__iter__",
            "location": 452,
            "return": [
                "Generator[(nothing, Any, builtins.NoneType)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParameterizedGenericTypeSpec.__init__": {
            "name": "__init__",
            "location": 460,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "Mapping",
                    "Callable"
                ]
            }
        },
        "ParameterizedGenericTypeSpec.bases_cls": {
            "name": "bases_cls",
            "location": 468,
            "return": [
                "List",
                "str",
                "List[int]",
                "List[List[int]]",
                "Pattern"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParameterizedGenericTypeSpec.parameters_cls": {
            "name": "parameters_cls",
            "location": 480,
            "return": [
                "Sequence[Var]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParameterizedGenericTypeSpec.parameters": {
            "name": "parameters",
            "location": 484,
            "return": [
                "List",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParameterizedGenericTypeSpec.vars": {
            "name": "vars",
            "location": 488,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExplicitParameterizedGenericTypeSpec.__init__": {
            "name": "__init__",
            "location": 494,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[T]",
                    "bytes",
                    "Type",
                    "Dict[str,str]"
                ]
            }
        },
        "ExplicitParameterizedGenericTypeSpec.parameters_cls": {
            "name": "parameters_cls",
            "location": 500,
            "return": [
                "Type[Any]",
                "int",
                "dict",
                "Optional[Dict[str, str]]",
                "List[Dict[str, Any]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExplicitParameterizedGenericTypeSpec.accept": {
            "name": "accept",
            "location": 503,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "mypy.types.Type",
                    "bool",
                    "int"
                ]
            }
        },
        "SpecialParameterizedGenericTypeSpec.__init__": {
            "name": "__init__",
            "location": 509,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "cls": []
            }
        },
        "SpecialParameterizedGenericTypeSpec.parameters_cls": {
            "name": "parameters_cls",
            "location": 520,
            "return": [
                "int",
                "\"DGEList\"",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecialParameterizedGenericTypeSpec.bases_cls": {
            "name": "bases_cls",
            "location": 524,
            "return": [
                "Optional[str]",
                "bool",
                "OrderedDict",
                "DefaultDict[int, List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecialParameterizedGenericTypeSpec.accept": {
            "name": "accept",
            "location": 527,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "mypy.types.Type",
                    "bool",
                    "int"
                ]
            }
        },
        "TupleTypeSpec.__init__": {
            "name": "__init__",
            "location": 537,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str,str]",
                    "bool",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "TupleTypeSpec.bases_cls": {
            "name": "bases_cls",
            "location": 543,
            "return": [
                "List",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TupleTypeSpec.accept": {
            "name": "accept",
            "location": 546,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "mypy.types.Type",
                    "str"
                ]
            }
        },
        "ParameterizedGenericTypeSpec.bases_cls.reify_args": {
            "name": "reify_args",
            "location": 469,
            "return": [
                "mypy.types.Type",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "omnibus-master/omnibus/replserver.py": {
        "_main": {
            "name": "_main",
            "location": 358,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "InteractiveSocketConsole.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "bool",
                    "List[dict]",
                    "int",
                    "str",
                    "MutableMapping",
                    "List[Dict]",
                    "MutableMapping[str,str]",
                    "None",
                    "Optional[str]"
                ],
                "locals": [
                    "None",
                    "Optional[float]",
                    "bool",
                    "float",
                    "Optional[bool]",
                    "str",
                    "Any",
                    "Optional[Any]",
                    "Optional[str]"
                ],
                "filename": [
                    "str",
                    "Text"
                ]
            }
        },
        "InteractiveSocketConsole.reset_buffer": {
            "name": "reset_buffer",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InteractiveSocketConsole.conn": {
            "name": "conn",
            "location": 78,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InteractiveSocketConsole.interact": {
            "name": "interact",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "banner": [
                    "str",
                    "None",
                    "Any",
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "exitmsg": [
                    "None",
                    "bool",
                    "Optional[bool]",
                    "Optional[Outcome]",
                    "Optional[int]"
                ]
            }
        },
        "InteractiveSocketConsole.push_line": {
            "name": "push_line",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "Set[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "InteractiveSocketConsole.raw_input": {
            "name": "raw_input",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "prompt": [
                    "Text",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "InteractiveSocketConsole.write": {
            "name": "write",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "Union[str,bytes]"
                ]
            }
        },
        "InteractiveSocketConsole.compile": {
            "name": "compile",
            "location": 152,
            "return": [
                "Optional[types.CodeType]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Dict",
                    "apistar.types.ParamName"
                ],
                "filename": [
                    "Text",
                    "str",
                    "int",
                    "List[str]"
                ],
                "symbol": [
                    "Text",
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "InteractiveSocketConsole.run_source": {
            "name": "run_source",
            "location": 163,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "filename": [
                    "Text",
                    "str",
                    "Optional[str]"
                ],
                "symbol": [
                    "Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "InteractiveSocketConsole.run_code": {
            "name": "run_code",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int"
                ]
            }
        },
        "InteractiveSocketConsole.show_traceback": {
            "name": "show_traceback",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InteractiveSocketConsole.show_syntax_error": {
            "name": "show_syntax_error",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "None"
                ]
            }
        },
        "ReplServer.__init__": {
            "name": "__init__",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "ReplServer.__enter__": {
            "name": "__enter__",
            "location": 278,
            "return": [
                "ReplServer"
            ],
            "arguments": {
                "self": [
                    "_TReplServer@@ReplServer@@"
                ]
            }
        },
        "ReplServer.__exit__": {
            "name": "__exit__",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "None",
                    "Optional[types.TracebackType]",
                    "str",
                    "Type",
                    "BaseException",
                    "Optional[Type[BaseException]]",
                    "Exception",
                    "types.TracebackType",
                    "Optional[BaseException]"
                ]
            }
        },
        "ReplServer.run": {
            "name": "run",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReplServer.shutdown": {
            "name": "shutdown",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "bool",
                    "float",
                    "Exception",
                    "List"
                ],
                "timeout": [
                    "int",
                    "None",
                    "Tuple[int]",
                    "bool",
                    "str",
                    "Optional[int]",
                    "Any",
                    "Optional[Union[Any,Any]]"
                ]
            }
        },
        "ReplServer.run.run": {
            "name": "run",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": []
            }
        }
    },
    "omnibus-master/omnibus/revision.py": {
        "get_revision": {
            "name": "get_revision",
            "location": 10,
            "return": [
                "None",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "omnibus-master/omnibus/slotsdict.py": {
        "SlotsDict": {
            "name": "SlotsDict",
            "location": 34,
            "return": [
                "dict",
                "bool",
                "str",
                "list",
                "Set[str]"
            ],
            "arguments": {
                "keys": [
                    "str",
                    "Tuple[str]",
                    "Dict[int,List[int]]",
                    "Dict[int,list[int]]"
                ],
                "name": [
                    "Text",
                    "str",
                    "Type",
                    "Sequence[type]"
                ]
            }
        },
        "AdaptiveSlotsDict": {
            "name": "AdaptiveSlotsDict",
            "location": 106,
            "return": [
                "dict",
                "bool",
                "T",
                "float"
            ],
            "arguments": {
                "keys": [
                    "str",
                    "Tuple"
                ],
                "name": [
                    "str",
                    "Text"
                ]
            }
        },
        "AutoSlot": {
            "name": "AutoSlot",
            "location": 198,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "default_slots": [
                    "Tuple",
                    "bytes",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "AdaptiveSlotsDict.create_container_type": {
            "name": "create_container_type",
            "location": 117,
            "return": [
                "Type",
                "Dict[str,Any]"
            ],
            "arguments": {
                "keys": [
                    "dict",
                    "Set[str]",
                    "set",
                    "str"
                ]
            }
        },
        "AutoSlot.inner": {
            "name": "inner",
            "location": 209,
            "return": [
                "Wrapper",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "T",
                    "type",
                    "str",
                    "Collection[str]",
                    "Dict[str, Any]",
                    "MutableMapping"
                ]
            }
        },
        "get_mem": {
            "name": "get_mem",
            "location": 258,
            "return": [
                "bool",
                "bytes",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "comma_digit": {
            "name": "comma_digit",
            "location": 272,
            "return": [
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "str"
                ]
            }
        },
        "SlotsDict.SlotsDictBase.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SlotsDict.SlotsDictBase.__getitem__": {
            "name": "__getitem__",
            "location": 70,
            "return": [
                "str",
                "Optional[List[Any]]",
                "Optional[bool]",
                "list",
                "Optional[str]",
                "Optional[Tuple[Any, Any]]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str"
                ]
            }
        },
        "SlotsDict.SlotsDictBase.__setitem__": {
            "name": "__setitem__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "int",
                    "list"
                ],
                "v": [
                    "bool",
                    "Callable",
                    "Type['AbstractIntegrationConversation']",
                    "str",
                    "float"
                ]
            }
        },
        "SlotsDict.SlotsDictBase.__delitem__": {
            "name": "__delitem__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "bool",
                    "tuple",
                    "int"
                ]
            }
        },
        "SlotsDict.SlotsDictBase.__iter__": {
            "name": "__iter__",
            "location": 94,
            "return": [
                "Generator",
                "bool",
                "int",
                "Optional[List[float]]",
                "Sequence"
            ],
            "arguments": {
                "self": []
            }
        },
        "SlotsDict.SlotsDictBase.__len__": {
            "name": "__len__",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdaptiveSlotsDict.AdaptiveSlotsDictBase.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdaptiveSlotsDict.AdaptiveSlotsDictBase.__getitem__": {
            "name": "__getitem__",
            "location": 144,
            "return": [
                "str",
                "Optional[List[Any]]",
                "Optional[bool]",
                "list",
                "Optional[str]",
                "Optional[Tuple[Any, Any]]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str"
                ]
            }
        },
        "AdaptiveSlotsDict.AdaptiveSlotsDictBase.__setitem__": {
            "name": "__setitem__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "int",
                    "MutableMapping[str, Any]",
                    "dict",
                    "List['Product']"
                ],
                "v": [
                    "bool",
                    "Dict[str, Dict[str, str]]",
                    "\"Channel\"",
                    "dict",
                    "int"
                ]
            }
        },
        "AdaptiveSlotsDict.AdaptiveSlotsDictBase.__delitem__": {
            "name": "__delitem__",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "bool",
                    "tuple",
                    "int"
                ]
            }
        },
        "AdaptiveSlotsDict.AdaptiveSlotsDictBase.__iter__": {
            "name": "__iter__",
            "location": 183,
            "return": [
                "Generator",
                "bool",
                "int",
                "Optional[List[float]]",
                "Sequence"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdaptiveSlotsDict.AdaptiveSlotsDictBase.__len__": {
            "name": "__len__",
            "location": 187,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoSlot.inner.Wrapper.__new__": {
            "name": "__new__",
            "location": 216,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "type",
                    "bool",
                    "Type[T]",
                    "str"
                ]
            }
        },
        "AutoSlot.inner.Wrapper.__getattribute__": {
            "name": "__getattribute__",
            "location": 221,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "AutoSlot.inner.Wrapper.__setattr__": {
            "name": "__setattr__",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str"
                ],
                "v": [
                    "str"
                ]
            }
        },
        "AutoSlot.inner.Wrapper.__delattr__": {
            "name": "__delattr__",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "AutoSlot.inner.Wrapper.__hasattr__": {
            "name": "__hasattr__",
            "location": 236,
            "return": [
                "bool",
                "str",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "AnyStr"
                ]
            }
        }
    },
    "omnibus-master/omnibus/toolz.py": {},
    "omnibus-master/omnibus/__about__.py": {},
    "omnibus-master/omnibus/__init__.py": {
        "_test_install": {
            "name": "_test_install",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "omnibus-master/omnibus/tests/helpers.py": {
        "run_with_timeout": {
            "name": "run_with_timeout",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "waitpid_with_timeout": {
            "name": "waitpid_with_timeout",
            "location": 44,
            "return": [
                "int"
            ],
            "arguments": {
                "pid": [
                    "str"
                ],
                "timeout_s": [
                    "Optional[Dict]",
                    "None",
                    "int",
                    "Dict",
                    "Optional[float]",
                    "Optional[int]",
                    "float"
                ],
                "timeout_exception": [
                    "bool",
                    "float",
                    "Callable",
                    "List",
                    "str",
                    "Dict",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "with_env": {
            "name": "with_env",
            "location": 67,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "can_import": {
            "name": "can_import",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "skip_if_cant_import": {
            "name": "skip_if_cant_import",
            "location": 97,
            "return": [
                "str",
                "dict",
                "bool",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "module": [
                    "str",
                    "int"
                ]
            }
        },
        "run_with_timeout.inner": {
            "name": "inner",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "omnibus-master/omnibus/tests/test_c3.py": {
        "test_mro": {
            "name": "test_mro",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "omnibus-master/omnibus/tests/test_caches.py": {
        "test_cache": {
            "name": "test_cache",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_descriptor_static": {
            "name": "test_descriptor_static",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_descriptor_instance": {
            "name": "test_descriptor_instance",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_weak_keys": {
            "name": "test_weak_keys",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_expirey": {
            "name": "test_expirey",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_descriptor_static.f": {
            "name": "f",
            "location": 44,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "x": [
                    "str",
                    "dict",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_descriptor_instance.C.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_descriptor_instance.C.f": {
            "name": "f",
            "location": 62,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "dict",
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "omnibus-master/omnibus/tests/test_callables.py": {
        "test_get_arg_names": {
            "name": "test_get_arg_names",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_arg_dict": {
            "name": "test_build_arg_dict",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_alias": {
            "name": "test_alias",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_constructor": {
            "name": "test_constructor",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_const": {
            "name": "test_const",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_arg": {
            "name": "test_arg",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "adder": {
            "name": "adder",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_picklable": {
            "name": "test_picklable",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_method": {
            "name": "test_method",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_arg_names.f": {
            "name": "f",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_build_arg_dict.f": {
            "name": "f",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [],
                "y": [],
                "z": []
            }
        },
        "test_alias.f": {
            "name": "f",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "x": []
            }
        },
        "test_constructor.f": {
            "name": "f",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "x": []
            }
        },
        "test_arg.f": {
            "name": "f",
            "location": 89,
            "return": [
                "None",
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ],
                "z": [
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "adder.inner": {
            "name": "inner",
            "location": 101,
            "return": [
                "[[]]",
                "Iterable[str]",
                "Sequence[str]",
                "Iterable['cirq.Operation']",
                "bool"
            ],
            "arguments": {
                "v": [
                    "Sequence[Any]"
                ]
            }
        },
        "test_constructor.f.g": {
            "name": "g",
            "location": 63,
            "return": [],
            "arguments": {
                "y": []
            }
        },
        "test_arg.f.g": {
            "name": "g",
            "location": 81,
            "return": [
                "str",
                "bool",
                "Union[List[str], List[Any]]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "str",
                    "float",
                    "Optional[int]"
                ]
            }
        }
    },
    "omnibus-master/omnibus/tests/test_check.py": {
        "test_check": {
            "name": "test_check",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "omnibus-master/omnibus/tests/test_code.py": {
        "test_recode_func": {
            "name": "test_recode_func",
            "location": 6,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_get_frame_function": {
            "name": "test_get_frame_function",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_posonly": {
            "name": "test_posonly",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_recode_func.g": {
            "name": "g",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_frame_function.f": {
            "name": "f",
            "location": 26,
            "return": [
                "int",
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {}
        },
        "test_get_frame_function.g": {
            "name": "g",
            "location": 29,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "test_recode_func.C.f": {
            "name": "f",
            "location": 17,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "omnibus-master/omnibus/tests/test_collections.py": {
        "test_frozendict": {
            "name": "test_frozendict",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_skiplist": {
            "name": "test_skiplist",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_test_sorteddict": {
            "name": "_test_sorteddict",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "dct": [
                    "List[str]",
                    "list",
                    "List[Tuple[Any, Any]]",
                    "tuple"
                ]
            }
        },
        "test_skiplistdict": {
            "name": "test_skiplistdict",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bintrees": {
            "name": "test_bintrees",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test_sortedcontainers": {
            "name": "test_sortedcontainers",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "test_identity_hashable_set": {
            "name": "test_identity_hashable_set",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_identity_key_dict": {
            "name": "test_identity_key_dict",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_identity_key_set": {
            "name": "test_identity_key_set",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ordered_frozen_set": {
            "name": "test_ordered_frozen_set",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Incomparable.__eq__": {
            "name": "__eq__",
            "location": 77,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        }
    },
    "omnibus-master/omnibus/tests/test_defs.py": {
        "test_delegate_method": {
            "name": "test_delegate_method",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr_mro": {
            "name": "test_repr_mro",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr_recursion": {
            "name": "test_repr_recursion",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_delegate_method.C.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lst": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "omnibus-master/omnibus/tests/test_dynamic.py": {
        "test_dyn": {
            "name": "test_dyn",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_var": {
            "name": "test_var",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cm": {
            "name": "test_cm",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dyn._g1": {
            "name": "_g1",
            "location": 26,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_dyn._g2": {
            "name": "_g2",
            "location": 34,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_cm.cm": {
            "name": "cm",
            "location": 68,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_cm.cm2": {
            "name": "cm2",
            "location": 78,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "omnibus-master/omnibus/tests/test_inject.py": {
        "test_base": {
            "name": "test_base",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_box": {
            "name": "test_box",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_annotation": {
            "name": "test_annotation",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_provider": {
            "name": "test_provider",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default": {
            "name": "test_default",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set": {
            "name": "test_set",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dict": {
            "name": "test_dict",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_child": {
            "name": "test_child",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_child2": {
            "name": "test_child2",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_private": {
            "name": "test_private",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dataclasses": {
            "name": "test_dataclasses",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_box.make_title": {
            "name": "make_title",
            "location": 60,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "test_annotation.make_title": {
            "name": "make_title",
            "location": 80,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "test_default.make_title": {
            "name": "make_title",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "test_base.C.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_private.C.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "float"
                ]
            }
        },
        "test_private.D.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "float",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "omnibus-master/omnibus/tests/test_iterables.py": {
        "test_dict": {
            "name": "test_dict",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compose": {
            "name": "test_compose",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_map": {
            "name": "test_map",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_base": {
            "name": "test_base",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_route": {
            "name": "test_route",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_chunk": {
            "name": "test_chunk",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_match": {
            "name": "test_match",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_type_match": {
            "name": "test_type_match",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_type_match_sorted": {
            "name": "test_type_match_sorted",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_deduplicate": {
            "name": "test_deduplicate",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_builder": {
            "name": "test_builder",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_operators": {
            "name": "test_operators",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multi_combinations": {
            "name": "test_multi_combinations",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compose.inc": {
            "name": "inc",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_compose.dbl": {
            "name": "dbl",
            "location": 22,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_base.dbl": {
            "name": "dbl",
            "location": 37,
            "return": [],
            "arguments": {
                "xs": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_route.add_100": {
            "name": "add_100",
            "location": 45,
            "return": [
                "List",
                "List[Dict]",
                "str",
                "List[int]",
                "List[str]",
                "bool",
                "float",
                "List[List[Any]]",
                "Sequence[str]"
            ],
            "arguments": {
                "ys": [
                    "int",
                    "Match[str]",
                    "float"
                ]
            }
        },
        "test_route.route": {
            "name": "route",
            "location": 48,
            "return": [
                "None",
                "float",
                "int",
                "bool",
                "Iterable[cirq.Qid]"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        },
        "test_dict.Thing.__call__": {
            "name": "__call__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_builder.Thing.__init__": {
            "name": "__init__",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_builder.Thing.on_str_0": {
            "name": "on_str_0",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "test_builder.Thing.on_int": {
            "name": "on_int",
            "location": 354,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "Iterator"
                ]
            }
        },
        "test_builder.Thing.on_str_1": {
            "name": "on_str_1",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        }
    },
    "omnibus-master/omnibus/tests/test_lang.py": {
        "test_public": {
            "name": "test_public",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_protocol": {
            "name": "test_protocol",
            "location": 29,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_interface": {
            "name": "test_interface",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_final": {
            "name": "test_final",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sealed": {
            "name": "test_sealed",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extension": {
            "name": "test_extension",
            "location": 158,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_override": {
            "name": "test_override",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_camelize": {
            "name": "test_camelize",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decamelize": {
            "name": "test_decamelize",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bits": {
            "name": "test_bits",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_manage_maybe_iterator": {
            "name": "test_manage_maybe_iterator",
            "location": 241,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_autoenum": {
            "name": "test_autoenum",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mixin": {
            "name": "test_mixin",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_abstract": {
            "name": "test_abstract",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_marker": {
            "name": "test_marker",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_init_subclass": {
            "name": "test_init_subclass",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_new_type": {
            "name": "test_new_type",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_access_forbidden": {
            "name": "test_access_forbidden",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_await_futures": {
            "name": "test_await_futures",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exit_stacked": {
            "name": "test_exit_stacked",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_abstract": {
            "name": "test_is_abstract",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_context_wrapped": {
            "name": "test_context_wrapped",
            "location": 453,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_public.f": {
            "name": "f",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_public.g": {
            "name": "g",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_manage_maybe_iterator.manager": {
            "name": "manager",
            "location": 245,
            "return": [],
            "arguments": {}
        },
        "test_await_futures.fn": {
            "name": "fn",
            "location": 392,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "test_await_futures.pairs": {
            "name": "pairs",
            "location": 402,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "l": [
                    "Sized",
                    "int",
                    "float",
                    "Callable[..., bool]",
                    "str"
                ]
            }
        },
        "test_context_wrapped.f": {
            "name": "f",
            "location": 466,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "List[T]",
                    "Tuple[int]"
                ]
            }
        },
        "test_context_wrapped.g": {
            "name": "g",
            "location": 490,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_protocol.P.f": {
            "name": "f",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_protocol.A.f": {
            "name": "f",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_protocol.B.g": {
            "name": "g",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_protocol.C.f": {
            "name": "f",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_interface.I0.f": {
            "name": "f",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_interface.C1.f": {
            "name": "f",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_interface.I1.g": {
            "name": "g",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_interface.C3.f": {
            "name": "f",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_interface.C4.f": {
            "name": "f",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_interface.C4.g": {
            "name": "g",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_interface.C5.g": {
            "name": "g",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_extension._.f": {
            "name": "f",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_extension.C.f": {
            "name": "f",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_override.A.f": {
            "name": "f",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_override.B.f": {
            "name": "f",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_mixin.M0.f": {
            "name": "f",
            "location": 301,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_mixin.M1.f": {
            "name": "f",
            "location": 312,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_init_subclass.A.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 357,
            "return": [],
            "arguments": {
                "cls": [
                    "list",
                    "List[List[Any]]",
                    "bool",
                    "Callable[[], Any]",
                    "Dict[str, list]"
                ]
            }
        },
        "test_init_subclass.B.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 363,
            "return": [],
            "arguments": {
                "cls": [
                    "list",
                    "bool",
                    "List[List[Any]]",
                    "dict",
                    "Dict[str, list]"
                ]
            }
        },
        "test_init_subclass.C.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 370,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "test_exit_stacked.B.__enter__": {
            "name": "__enter__",
            "location": 419,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_is_abstract.C.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 439,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "test_context_wrapped.CM.__enter__": {
            "name": "__enter__",
            "location": 457,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_context_wrapped.CM.__exit__": {
            "name": "__exit__",
            "location": 460,
            "return": [],
            "arguments": {
                "self": [],
                "et": [
                    "float",
                    "Iterable[T]",
                    "Tuple['cirq.Qid']"
                ],
                "e": [
                    "float",
                    "Iterable[T]",
                    "Tuple['cirq.Qid']"
                ],
                "tb": [
                    "float",
                    "Iterable[T]",
                    "Tuple['cirq.Qid']"
                ]
            }
        },
        "test_context_wrapped.C.__init__": {
            "name": "__init__",
            "location": 475,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_context_wrapped.C.f": {
            "name": "f",
            "location": 479,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "List[T]",
                    "Tuple[int]"
                ]
            }
        },
        "test_context_wrapped.D.g": {
            "name": "g",
            "location": 498,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_override.C.g": {
            "name": "g",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_override.D.g": {
            "name": "g",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_autoenum.F.B.__init__": {
            "name": "__init__",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_autoenum.F.B.f": {
            "name": "f",
            "location": 287,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "omnibus-master/omnibus/tests/test_libc.py": {
        "test_libc": {
            "name": "test_libc",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "omnibus-master/omnibus/tests/test_properties.py": {
        "test_set_once_property": {
            "name": "test_set_once_property",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_registry_property": {
            "name": "test_registry_property",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_registry_dispatch": {
            "name": "test_registry_dispatch",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_registry_class": {
            "name": "test_registry_class",
            "location": 98,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_registry_property.C._a": {
            "name": "_a",
            "location": 26,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_registry_property.C._b": {
            "name": "_b",
            "location": 30,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_registry_property.D._c": {
            "name": "_c",
            "location": 36,
            "return": [
                "int",
                "T",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_registry_dispatch.A.fn_object": {
            "name": "fn_object",
            "location": 52,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_registry_dispatch.A.fn_int": {
            "name": "fn_int",
            "location": 56,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_registry_dispatch.B.fn_str": {
            "name": "fn_str",
            "location": 62,
            "return": [
                "Text",
                "float",
                "Tuple[int,int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "str",
                    "bool",
                    "int",
                    "float",
                    "IO[str]"
                ]
            }
        },
        "test_registry_dispatch.C.fn_str": {
            "name": "fn_str",
            "location": 68,
            "return": [
                "Text",
                "float",
                "Tuple[int,int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "str",
                    "bool",
                    "int",
                    "float",
                    "IO[str]"
                ]
            }
        },
        "test_registry_dispatch.D.fn_str": {
            "name": "fn_str",
            "location": 74,
            "return": [
                "Text",
                "float",
                "Tuple[int,int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "str",
                    "bool",
                    "int",
                    "float",
                    "IO[str]"
                ]
            }
        },
        "test_registry_dispatch.D.fn_float": {
            "name": "fn_float",
            "location": 78,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_registry_class.A.fn": {
            "name": "fn",
            "location": 105,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_registry_class.B.fn": {
            "name": "fn",
            "location": 110,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "omnibus-master/omnibus/tests/test_reflect.py": {
        "test_is_new_type": {
            "name": "test_is_new_type",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generic_bases": {
            "name": "test_generic_bases",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_specs": {
            "name": "test_specs",
            "location": 47,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_weak_cache": {
            "name": "test_weak_cache",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_instance_dependents": {
            "name": "test_instance_dependents",
            "location": 135,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_subclass_dependents": {
            "name": "test_subclass_dependents",
            "location": 154,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_var": {
            "name": "test_var",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tc": {
            "name": "test_tc",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_weak_cache.f": {
            "name": "f",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_instance_dependents.A.__instancecheck__": {
            "name": "__instancecheck__",
            "location": 139,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_subclass_dependents.A.__subclasscheck__": {
            "name": "__subclasscheck__",
            "location": 160,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "omnibus-master/omnibus/tests/test_replserver.py": {
        "test_replserver": {
            "name": "test_replserver",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_replserver.check": {
            "name": "check",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "test_replserver.inner": {
            "name": "inner",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_replserver.inner.run": {
            "name": "run",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "omnibus-master/omnibus/tests/test_revision.py": {
        "test_revision": {
            "name": "test_revision",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "omnibus-master/omnibus/tests/test_slotsdict.py": {
        "test_slotsdict": {
            "name": "test_slotsdict",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "omnibus-master/omnibus/tests/__init__.py": {}
}
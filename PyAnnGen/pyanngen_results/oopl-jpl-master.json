{
    "oopl-jpl-master/examples/Assertions.py": {
        "cycle_length": {
            "name": "cycle_length",
            "location": 14,
            "return": [
                "int",
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "oopl-jpl-master/examples/Cache.py": {},
    "oopl-jpl-master/examples/Classes.py": {
        "A.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "A.cm": {
            "name": "cm",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "int",
                    "bool",
                    "complex",
                    "bytes",
                    "Type"
                ]
            }
        },
        "A.sm": {
            "name": "sm",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "A.im": {
            "name": "im",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/examples/Comprehensions.py": {},
    "oopl-jpl-master/examples/Copy.py": {},
    "oopl-jpl-master/examples/Exceptions.py": {
        "f": {
            "name": "f",
            "location": 13,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "b": [
                    "bool",
                    "int"
                ]
            }
        }
    },
    "oopl-jpl-master/examples/FileInputOutput.py": {},
    "oopl-jpl-master/examples/FormattedOutput.py": {},
    "oopl-jpl-master/examples/FunctionDefaults.py": {
        "f": {
            "name": "f",
            "location": 14,
            "return": [
                "list[typing.Union[int,typing.Iterable[str],typing.Sequence[T],str]]",
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Iterable",
                    "typing.Iterable[str]",
                    "str",
                    "typing.Sequence[T]",
                    "Iterable[str]",
                    "Sequence[T]"
                ],
                "y": [
                    "int",
                    "Iterable",
                    "typing.Iterable[str]",
                    "str",
                    "typing.Sequence[T]",
                    "Iterable[str]",
                    "Sequence[T]"
                ],
                "z": [
                    "int",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "str"
                ]
            }
        },
        "g": {
            "name": "g",
            "location": 23,
            "return": [
                "str",
                "list[int]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ],
                "y": [
                    "int",
                    "float",
                    "str"
                ],
                "z": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "h1": {
            "name": "h1",
            "location": 34,
            "return": [
                "str",
                "list[int]"
            ],
            "arguments": {
                "x": [
                    "list[]",
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "h2": {
            "name": "h2",
            "location": 46,
            "return": [
                "str",
                "tuple[int]"
            ],
            "arguments": {
                "x": [
                    "tuple[]",
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "h3": {
            "name": "h3",
            "location": 58,
            "return": [
                "str",
                "list[]",
                "tuple[typing.Union[float,float]]",
                "int"
            ],
            "arguments": {
                "x": [
                    "None",
                    "Optional[T]",
                    "float",
                    "str",
                    "T",
                    "Optional[str]"
                ]
            }
        }
    },
    "oopl-jpl-master/examples/FunctionDict.py": {
        "f": {
            "name": "f",
            "location": 13,
            "return": [
                "list[typing.Union[int,typing.Iterable[str],typing.Sequence[T],str]]",
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Iterable",
                    "typing.Iterable[str]",
                    "str",
                    "typing.Sequence[T]",
                    "Iterable[str]",
                    "Sequence[T]"
                ],
                "y": [
                    "int",
                    "Iterable",
                    "typing.Iterable[str]",
                    "str",
                    "typing.Sequence[T]",
                    "Iterable[str]",
                    "Sequence[T]"
                ]
            }
        }
    },
    "oopl-jpl-master/examples/FunctionKeywords.py": {
        "f": {
            "name": "f",
            "location": 13,
            "return": [
                "list[typing.Union[int,typing.Iterable[str],typing.Sequence[T],str]]",
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Iterable",
                    "typing.Iterable[str]",
                    "str",
                    "typing.Sequence[T]",
                    "Iterable[str]",
                    "Sequence[T]"
                ],
                "y": [
                    "int",
                    "Iterable",
                    "typing.Iterable[str]",
                    "str",
                    "typing.Sequence[T]",
                    "Iterable[str]",
                    "Sequence[T]"
                ],
                "z": [
                    "int",
                    "Iterable",
                    "typing.Iterable[str]",
                    "str",
                    "typing.Sequence[T]",
                    "Iterable[str]",
                    "Sequence[T]"
                ]
            }
        },
        "g": {
            "name": "g",
            "location": 27,
            "return": [
                "str",
                "list[typing.Union[float,str]]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str"
                ]
            }
        }
    },
    "oopl-jpl-master/examples/FunctionTuple.py": {
        "f": {
            "name": "f",
            "location": 13,
            "return": [
                "list[typing.Union[int,typing.Iterable[str],typing.Sequence[T],str]]",
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Iterable",
                    "typing.Iterable[str]",
                    "str",
                    "typing.Sequence[T]",
                    "Iterable[str]",
                    "Sequence[T]"
                ],
                "y": [
                    "int",
                    "Iterable",
                    "typing.Iterable[str]",
                    "str",
                    "typing.Sequence[T]",
                    "Iterable[str]",
                    "Sequence[T]"
                ]
            }
        }
    },
    "oopl-jpl-master/examples/FunctionUnpacking.py": {
        "f": {
            "name": "f",
            "location": 13,
            "return": [
                "list[typing.Union[int,typing.Iterable[str],typing.Sequence[T],str]]",
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Iterable",
                    "typing.Iterable[str]",
                    "str",
                    "typing.Sequence[T]",
                    "Iterable[str]",
                    "Sequence[T]"
                ],
                "y": [
                    "int",
                    "Iterable",
                    "typing.Iterable[str]",
                    "str",
                    "typing.Sequence[T]",
                    "Iterable[str]",
                    "Sequence[T]"
                ],
                "z": [
                    "int",
                    "Iterable",
                    "typing.Iterable[str]",
                    "str",
                    "typing.Sequence[T]",
                    "Iterable[str]",
                    "Sequence[T]"
                ]
            }
        }
    },
    "oopl-jpl-master/examples/GlobalVariables.py": {
        "f1": {
            "name": "f1",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "f2": {
            "name": "f2",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "f3": {
            "name": "f3",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "f1.g1": {
            "name": "g1",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "f2.g2": {
            "name": "g2",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "f3.g3": {
            "name": "g3",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "oopl-jpl-master/examples/Hello.py": {},
    "oopl-jpl-master/examples/Iterables.py": {
        "test_iterator": {
            "name": "test_iterator",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "p": [
                    "str",
                    "float"
                ]
            }
        },
        "test_iterable": {
            "name": "test_iterable",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        }
    },
    "oopl-jpl-master/examples/Iteration.py": {},
    "oopl-jpl-master/examples/Lambdas.py": {
        "f": {
            "name": "f",
            "location": 15,
            "return": [
                "typing.Callable[, ]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "g": {
            "name": "g",
            "location": 18,
            "return": [
                "typing.Callable[, ]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "p": [
                    "bool"
                ]
            }
        }
    },
    "oopl-jpl-master/examples/MyPy.py": {
        "f": {
            "name": "f",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "f_int": {
            "name": "f_int",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "f_list": {
            "name": "f_list",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "a": [
                    "List[int]",
                    "int",
                    "list[int]",
                    "str",
                    "Callable[[Any], T]",
                    "typing.Callable[typing.Any, T]"
                ]
            }
        },
        "f_tuple": {
            "name": "f_tuple",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "a": [
                    "int",
                    "tuple[typing.Union[int,str]]",
                    "Tuple[int, str]",
                    "typing.Iterator",
                    "Iterator[int]",
                    "typing.Sequence[int]",
                    "Iterable[int]",
                    "Sequence[int]"
                ]
            }
        },
        "f_sequence": {
            "name": "f_sequence",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "a": [
                    "int",
                    "tuple[typing.Union[int,str]]",
                    "Tuple[int, str]",
                    "typing.Iterator",
                    "Iterator[int]",
                    "typing.Sequence[int]",
                    "Iterable[int]",
                    "Sequence[int]"
                ]
            }
        },
        "f_set": {
            "name": "f_set",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "a": [
                    "Set[int]",
                    "int",
                    "set[int]",
                    "str",
                    "List[int]",
                    "list[int]",
                    "List[T]",
                    "list[T]"
                ]
            }
        },
        "f_dict": {
            "name": "f_dict",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "a": [
                    "Dict[int, str]",
                    "str",
                    "dict[int, str]",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "f_iterable": {
            "name": "f_iterable",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "a": [
                    "int",
                    "tuple[typing.Union[int,str]]",
                    "Tuple[int, str]",
                    "typing.Iterator",
                    "Iterator[int]",
                    "typing.Sequence[int]",
                    "Iterable[int]",
                    "Sequence[int]"
                ]
            }
        },
        "f_iterator": {
            "name": "f_iterator",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "a": [
                    "int",
                    "tuple[typing.Union[int,str]]",
                    "Tuple[int, str]",
                    "typing.Iterator",
                    "Iterator[int]",
                    "typing.Sequence[int]",
                    "Iterable[int]",
                    "Sequence[int]"
                ]
            }
        }
    },
    "oopl-jpl-master/examples/Operators.py": {},
    "oopl-jpl-master/examples/Types.py": {
        "g": {
            "name": "g",
            "location": 106,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "v": [
                    "int",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "A.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "i": [
                    "str",
                    "Optional[str]",
                    "float",
                    "List[str]",
                    "Optional[int]",
                    "BinaryIO"
                ],
                "f": [
                    "str",
                    "Optional[str]",
                    "float",
                    "List[str]",
                    "Optional[int]",
                    "BinaryIO"
                ]
            }
        }
    },
    "oopl-jpl-master/examples/Variables.py": {},
    "oopl-jpl-master/examples/Yield.py": {
        "f": {
            "name": "f",
            "location": 15,
            "return": [
                "typing.Iterator[builtins.int]",
                "typing.Generator[int]"
            ],
            "arguments": {}
        },
        "g": {
            "name": "g",
            "location": 42,
            "return": [
                "typing.Iterator[builtins.int]",
                "typing.Generator[int]"
            ],
            "arguments": {}
        }
    },
    "oopl-jpl-master/exercises/Complex.py": {
        "my_complex.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "real": [
                    "int",
                    "bool",
                    "float"
                ],
                "imag": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "my_complex.__add__": {
            "name": "__add__",
            "location": 19,
            "return": [
                "my_complex",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "my_complex.__eq__": {
            "name": "__eq__",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "my_complex.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "my_complex.__sub__": {
            "name": "__sub__",
            "location": 32,
            "return": [
                "my_complex",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "my_complex.__isub__": {
            "name": "__isub__",
            "location": 37,
            "return": [
                "my_complex",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "my_complex.conjugate": {
            "name": "conjugate",
            "location": 42,
            "return": [
                "my_complex",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/exercises/ComplexT.py": {
        "MyUnitTests.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_01": {
            "name": "test_01",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_02": {
            "name": "test_02",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_03": {
            "name": "test_03",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_04": {
            "name": "test_04",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_05": {
            "name": "test_05",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_06": {
            "name": "test_06",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_07": {
            "name": "test_07",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_08": {
            "name": "test_08",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_09": {
            "name": "test_09",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_10": {
            "name": "test_10",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/exercises/Coverage1.py": {
        "cycle_length": {
            "name": "cycle_length",
            "location": 11,
            "return": [
                "int",
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "oopl-jpl-master/exercises/Coverage1T.py": {
        "MyUnitTests.test": {
            "name": "test",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/exercises/Coverage2.py": {
        "cycle_length": {
            "name": "cycle_length",
            "location": 11,
            "return": [
                "int",
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "oopl-jpl-master/exercises/Coverage2T.py": {
        "MyUnitTests.test": {
            "name": "test",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/exercises/Coverage3.py": {
        "cycle_length": {
            "name": "cycle_length",
            "location": 11,
            "return": [
                "int",
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "oopl-jpl-master/exercises/Coverage3T.py": {
        "MyUnitTests.test": {
            "name": "test",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/exercises/Factorial.py": {
        "factorial_recursion": {
            "name": "factorial_recursion",
            "location": 18,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "factorial_tail_recursion": {
            "name": "factorial_tail_recursion",
            "location": 26,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "factorial_while": {
            "name": "factorial_while",
            "location": 38,
            "return": [
                "int",
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "factorial_range_for": {
            "name": "factorial_range_for",
            "location": 48,
            "return": [
                "int",
                "str",
                "Iterable[str]",
                "Tuple[str]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "factorial_range_iterator": {
            "name": "factorial_range_iterator",
            "location": 57,
            "return": [
                "int",
                "Dict[str, Dict[str, int]]",
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "factorial_range_reduce": {
            "name": "factorial_range_reduce",
            "location": 71,
            "return": [
                "str",
                "bytes",
                "IO[str]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "factorial_tail_recursion.f": {
            "name": "f",
            "location": 28,
            "return": [
                "int",
                "float",
                "bool",
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "list"
                ],
                "v": [
                    "int",
                    "list"
                ]
            }
        }
    },
    "oopl-jpl-master/exercises/FactorialT.py": {
        "MyUnitTests.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_0": {
            "name": "test_0",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_1": {
            "name": "test_1",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_2": {
            "name": "test_2",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_3": {
            "name": "test_3",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_4": {
            "name": "test_4",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_5": {
            "name": "test_5",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_6": {
            "name": "test_6",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/exercises/IsPrime1.py": {
        "is_prime": {
            "name": "is_prime",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "oopl-jpl-master/exercises/IsPrime1T.py": {
        "MyUnitTests.test_01": {
            "name": "test_01",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_02": {
            "name": "test_02",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_03": {
            "name": "test_03",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_04": {
            "name": "test_04",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_05": {
            "name": "test_05",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_07": {
            "name": "test_07",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_09": {
            "name": "test_09",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_27": {
            "name": "test_27",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_29": {
            "name": "test_29",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/exercises/IsPrime2.py": {
        "is_prime": {
            "name": "is_prime",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "oopl-jpl-master/exercises/IsPrime2T.py": {
        "MyUnitTests.test_01": {
            "name": "test_01",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_02": {
            "name": "test_02",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_03": {
            "name": "test_03",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_04": {
            "name": "test_04",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_05": {
            "name": "test_05",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_07": {
            "name": "test_07",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_09": {
            "name": "test_09",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_27": {
            "name": "test_27",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_29": {
            "name": "test_29",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/exercises/Map.py": {
        "map_for_range": {
            "name": "map_for_range",
            "location": 29,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "uf": [
                    "Callable[[T], T]",
                    "str",
                    "typing.Callable[T, T]"
                ],
                "a": [
                    "Sequence[T]",
                    "List[int]",
                    "int",
                    "list",
                    "Union[int, float]",
                    "bool",
                    "List[float]"
                ]
            }
        },
        "map_for_enumerate": {
            "name": "map_for_enumerate",
            "location": 33,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "uf": [
                    "Callable[[T], T]",
                    "str",
                    "typing.Callable[T, T]",
                    "List[int]",
                    "list[int]"
                ],
                "a": [
                    "bytes",
                    "Sequence[T]",
                    "int",
                    "float"
                ]
            }
        },
        "map_for": {
            "name": "map_for",
            "location": 37,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "uf": [
                    "Callable[[T], T]",
                    "typing.Callable[T, T]",
                    "List[Dict[str, Any]]",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "dict",
                    "dict[, ]"
                ],
                "a": [
                    "Iterable[T]",
                    "bool"
                ]
            }
        },
        "map_generator": {
            "name": "map_generator",
            "location": 41,
            "return": [
                "typing.Generator[]",
                "str",
                "Optional[dict]",
                "int",
                "List[str]",
                "Tuple[int]",
                "Counter",
                "Sequence[int]"
            ],
            "arguments": {
                "uf": [
                    "typing.Callable[T, T]",
                    "Callable[[T], T]",
                    "int",
                    "typing.Iterable[T]",
                    "Iterable[T]",
                    "typing.Sequence[T]",
                    "List[str]",
                    "typing.AbstractSet",
                    "Sequence[T]",
                    "AbstractSet[\"OntologyNode\"]"
                ],
                "a": [
                    "Callable[[T], T]",
                    "Iterable[T]",
                    "int",
                    "List[str]",
                    "Sequence[T]",
                    "AbstractSet[\"OntologyNode\"]"
                ]
            }
        },
        "Map_Iterator.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uf": [
                    "list",
                    "list[]"
                ],
                "a": [
                    "typing.Callable[T, T]",
                    "Callable[[T, T], T]",
                    "int",
                    "T",
                    "list[str]",
                    "List[str]"
                ]
            }
        },
        "Map_Iterator.__iter__": {
            "name": "__iter__",
            "location": 23,
            "return": [
                "Map_Iterator",
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map_Iterator.__next__": {
            "name": "__next__",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/exercises/Map2.py": {
        "map_iter_yield": {
            "name": "map_iter_yield",
            "location": 11,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "nf": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "map_zip_yield": {
            "name": "map_zip_yield",
            "location": 17,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "nf": [
                    "List[int]",
                    "list[int]",
                    "str",
                    "Callable[[T], T]",
                    "typing.Callable[T, T]",
                    "dict",
                    "dict[, ]",
                    "List[T]",
                    "list[T]",
                    "list",
                    "list[]"
                ]
            }
        },
        "map_zip_generator": {
            "name": "map_zip_generator",
            "location": 21,
            "return": [
                "typing.Generator[]",
                "List[str]",
                "str",
                "Tuple[int]",
                "Optional[dict]"
            ],
            "arguments": {
                "nf": [
                    "typing.Callable[T, T]",
                    "Callable[[T], T]",
                    "int",
                    "typing.Iterable[T]",
                    "Iterable[T]",
                    "List[str]"
                ]
            }
        }
    },
    "oopl-jpl-master/exercises/Map2T.py": {
        "MyUnitTests.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_1": {
            "name": "test_1",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_2": {
            "name": "test_2",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/exercises/MapT.py": {
        "MyUnitTests.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_1": {
            "name": "test_1",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_2": {
            "name": "test_2",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_3": {
            "name": "test_3",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_4": {
            "name": "test_4",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_5": {
            "name": "test_5",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/exercises/Range.py": {
        "Range_1.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "int",
                    "float",
                    "str",
                    "Union[str, float]",
                    "bool"
                ],
                "e": [
                    "int",
                    "float",
                    "str",
                    "Union[str, float]",
                    "bool"
                ]
            }
        },
        "Range_1.__iter__": {
            "name": "__iter__",
            "location": 34,
            "return": [
                "iterator",
                "int",
                "Union[int, float]",
                "float",
                "Type[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Range_2.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "int",
                    "float",
                    "str",
                    "Union[str, float]",
                    "bool"
                ],
                "e": [
                    "int",
                    "float",
                    "str",
                    "Union[str, float]",
                    "bool"
                ]
            }
        },
        "Range_2.__iter__": {
            "name": "__iter__",
            "location": 42,
            "return": [
                "typing.Iterator[builtins.int]",
                "typing.Generator[typing.Union[int,tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Range_1.iterator.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "int",
                    "float",
                    "str",
                    "Union[str, float]",
                    "bool"
                ],
                "e": [
                    "int",
                    "float",
                    "str",
                    "Union[str, float]",
                    "bool"
                ]
            }
        },
        "Range_1.iterator.__iter__": {
            "name": "__iter__",
            "location": 20,
            "return": [
                "iterator",
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Range_1.iterator.__next__": {
            "name": "__next__",
            "location": 23,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/exercises/RangeIterator.py": {
        "range_iterator_yield": {
            "name": "range_iterator_yield",
            "location": 29,
            "return": [
                "typing.Iterator[builtins.int]",
                "typing.Generator[typing.Union[float,int]]"
            ],
            "arguments": {
                "b": [
                    "float",
                    "int",
                    "Sequence[float]"
                ],
                "e": [
                    "float",
                    "int",
                    "Sequence[float]",
                    "typing.Sequence[float]"
                ]
            }
        },
        "Range_Iterator.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "int",
                    "float",
                    "str",
                    "Union[str, float]",
                    "bool"
                ],
                "e": [
                    "int",
                    "float",
                    "str",
                    "Union[str, float]",
                    "bool"
                ]
            }
        },
        "Range_Iterator.__iter__": {
            "name": "__iter__",
            "location": 19,
            "return": [
                "Range_Iterator",
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Range_Iterator.__next__": {
            "name": "__next__",
            "location": 22,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/exercises/RangeIteratorT.py": {
        "MyUnitTests.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_1": {
            "name": "test_1",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_2": {
            "name": "test_2",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_3": {
            "name": "test_3",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_4": {
            "name": "test_4",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/exercises/RangeT.py": {
        "MyUnitTests.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_1": {
            "name": "test_1",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_2": {
            "name": "test_2",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_3": {
            "name": "test_3",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_4": {
            "name": "test_4",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/exercises/Reduce.py": {
        "reduce_for_range": {
            "name": "reduce_for_range",
            "location": 61,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "bool"
            ],
            "arguments": {
                "bf": [
                    "Callable[[T, T], T]",
                    "T",
                    "Optional[Dict]",
                    "str"
                ],
                "a": [
                    "int",
                    "bool",
                    "Union[int, float]",
                    "Sequence[T]"
                ],
                "v": [
                    "Callable[[T, T], T]",
                    "T",
                    "Optional[Dict]",
                    "str"
                ]
            }
        },
        "reduce_for_enumerate": {
            "name": "reduce_for_enumerate",
            "location": 68,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "bool",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "bf": [
                    "Callable[[T, T], T]",
                    "T",
                    "Optional[Dict]",
                    "str"
                ],
                "a": [
                    "bytes",
                    "str",
                    "Sequence[T]",
                    "int",
                    "float"
                ],
                "v": [
                    "Callable[[T, T], T]",
                    "T",
                    "Optional[Dict]",
                    "str"
                ]
            }
        },
        "reduce_for": {
            "name": "reduce_for",
            "location": 75,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "bool",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "bf": [
                    "Callable[[T, T], T]",
                    "T",
                    "Optional[Dict]",
                    "str"
                ],
                "a": [
                    "str",
                    "Iterable[T]",
                    "bool",
                    "Sequence[Union[str, int]]"
                ],
                "v": [
                    "Callable[[T, T], T]",
                    "T",
                    "Optional[Dict]",
                    "str"
                ]
            }
        },
        "reduce_while": {
            "name": "reduce_while",
            "location": 81,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "bf": [
                    "Callable[[T, T], T]",
                    "T",
                    "Optional[Dict]",
                    "Tuple[float, float]",
                    "float"
                ],
                "a": [
                    "Collection[int]",
                    "int",
                    "typing.Collection",
                    "List[str]",
                    "list[str]"
                ],
                "v": [
                    "Callable[[T, T], T]",
                    "T",
                    "Optional[Dict]",
                    "Tuple[float, float]",
                    "float"
                ]
            }
        }
    },
    "oopl-jpl-master/exercises/Reduce2.py": {
        "reduce_1": {
            "name": "reduce_1",
            "location": 11,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "bf": [
                    "Callable[[T, T], T]",
                    "typing.Callable[T,T, T]",
                    "T",
                    "dict[, ]",
                    "float",
                    "Optional[Dict]",
                    "None",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ],
                "a": [
                    "bool",
                    "float"
                ]
            }
        },
        "reduce_2": {
            "name": "reduce_2",
            "location": 23,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "bf": [
                    "Callable[[T, T], T]",
                    "typing.Callable[T,T, T]",
                    "T",
                    "dict[, ]",
                    "float",
                    "Optional[Dict]",
                    "None",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ],
                "a": [
                    "Collection[int]",
                    "int",
                    "typing.Collection",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "oopl-jpl-master/exercises/Reduce2T.py": {
        "MyUnitTests.setUp": {
            "name": "setUp",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_1": {
            "name": "test_1",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_2": {
            "name": "test_2",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_3": {
            "name": "test_3",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_4": {
            "name": "test_4",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_5": {
            "name": "test_5",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_6": {
            "name": "test_6",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_7": {
            "name": "test_7",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_8": {
            "name": "test_8",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/exercises/ReduceT.py": {
        "MyUnitTests.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_1": {
            "name": "test_1",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_2": {
            "name": "test_2",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_3": {
            "name": "test_3",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_4": {
            "name": "test_4",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/exercises/RMSE.py": {
        "rmse_for_range": {
            "name": "rmse_for_range",
            "location": 24,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "a": [
                    "Sequence[int]",
                    "int",
                    "List[int]",
                    "Union[int, float]",
                    "bool",
                    "list"
                ],
                "p": [
                    "typing.Sequence[int]",
                    "Sequence[int]",
                    "numpy.ndarray"
                ]
            }
        },
        "rmse_for_enumerate": {
            "name": "rmse_for_enumerate",
            "location": 33,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "a": [
                    "Sequence[int]"
                ],
                "p": [
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ]
            }
        },
        "rmse_iterator": {
            "name": "rmse_iterator",
            "location": 42,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "a": [
                    "Sequence[int]",
                    "numpy.ndarray",
                    "Sequence[T]",
                    "List[int]",
                    "List[Tuple[str]]",
                    "int"
                ],
                "p": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "int",
                    "dict",
                    "str",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "rmse_map_sum": {
            "name": "rmse_map_sum",
            "location": 56,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "a": [
                    "Sequence[int]"
                ],
                "p": [
                    "Sequence[int]",
                    "int",
                    "typing.Sequence[int]"
                ]
            }
        },
        "rmse_zip_map_sum": {
            "name": "rmse_zip_map_sum",
            "location": 64,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "a": [
                    "str",
                    "List[int]",
                    "T",
                    "Sequence[T]",
                    "int"
                ],
                "p": [
                    "List[int]",
                    "list[int]",
                    "T",
                    "typing.Sequence[T]",
                    "Sequence[T]",
                    "dict[, ]",
                    "dict",
                    "typing.Sequence[int]",
                    "Union[Sequence[int], Sequence[dict]]",
                    "typing.Sequence[dict[, ]]"
                ]
            }
        },
        "rmse_zip_for": {
            "name": "rmse_zip_for",
            "location": 73,
            "return": [
                "int",
                "bool",
                "Dict[str, Union[str, int]]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "Sequence[int]"
                ],
                "p": [
                    "Sequence[int]",
                    "int",
                    "typing.Sequence[int]"
                ]
            }
        },
        "rmse_zip_list_sum": {
            "name": "rmse_zip_list_sum",
            "location": 84,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "a": [
                    "list",
                    "List[T]",
                    "List[int]",
                    "T",
                    "List[Dict]",
                    "List[Union[int, float]]"
                ],
                "p": [
                    "str",
                    "T",
                    "dict[, ]",
                    "dict",
                    "list[typing.Any]",
                    "Optional[List[Any]]",
                    "None",
                    "Union[Sequence[int], Sequence[dict]]",
                    "typing.Sequence[int]",
                    "List[Dict]",
                    "typing.Sequence[dict[, ]]",
                    "List[Union[int, float]]",
                    "list[dict[, ]]",
                    "List[int]",
                    "list[typing.Union[int,float]]",
                    "list[int]"
                ]
            }
        },
        "rmse_zip_generator_sum": {
            "name": "rmse_zip_generator_sum",
            "location": 93,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "a": [
                    "str",
                    "List[int]",
                    "T",
                    "Sequence[T]",
                    "int"
                ],
                "p": [
                    "List[int]",
                    "list[int]",
                    "T",
                    "typing.Sequence[T]",
                    "Sequence[T]",
                    "dict[, ]",
                    "dict",
                    "typing.Sequence[int]",
                    "Union[Sequence[int], Sequence[dict]]",
                    "typing.Sequence[dict[, ]]"
                ]
            }
        },
        "rmse_numpy": {
            "name": "rmse_numpy",
            "location": 102,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "a": [
                    "typing.Sequence[int]",
                    "float",
                    "Sequence[int]",
                    "int",
                    "numpy.array"
                ],
                "p": [
                    "typing.Sequence[int]",
                    "float",
                    "Sequence[int]",
                    "int",
                    "numpy.array"
                ]
            }
        }
    },
    "oopl-jpl-master/exercises/RMSET.py": {
        "MyUnitTests.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_1": {
            "name": "test_1",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_2": {
            "name": "test_2",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_3": {
            "name": "test_3",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_4": {
            "name": "test_4",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_5": {
            "name": "test_5",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/exercises/UnitTests1.py": {
        "cycle_length": {
            "name": "cycle_length",
            "location": 11,
            "return": [
                "int",
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "oopl-jpl-master/exercises/UnitTests1T.py": {
        "MyUnitTests.test_1": {
            "name": "test_1",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_2": {
            "name": "test_2",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_3": {
            "name": "test_3",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/exercises/UnitTests2.py": {
        "cycle_length": {
            "name": "cycle_length",
            "location": 11,
            "return": [
                "int",
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "oopl-jpl-master/exercises/UnitTests2T.py": {
        "MyUnitTests.test_1": {
            "name": "test_1",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_2": {
            "name": "test_2",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_3": {
            "name": "test_3",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/exercises/UnitTests3.py": {
        "cycle_length": {
            "name": "cycle_length",
            "location": 11,
            "return": [
                "int",
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "oopl-jpl-master/exercises/UnitTests3T.py": {
        "MyUnitTests.test_1": {
            "name": "test_1",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_2": {
            "name": "test_2",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_3": {
            "name": "test_3",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/exercises/Zip.py": {
        "my_zip_iter": {
            "name": "my_zip_iter",
            "location": 11,
            "return": [
                "Callable",
                "typing.Generator[tuple[]]"
            ],
            "arguments": {}
        },
        "my_zip_map": {
            "name": "my_zip_map",
            "location": 19,
            "return": [
                "int",
                "bool",
                "Set[int]"
            ],
            "arguments": {}
        }
    },
    "oopl-jpl-master/exercises/ZipT.py": {
        "MyUnitTests.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_1": {
            "name": "test_1",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_2": {
            "name": "test_2",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_3": {
            "name": "test_3",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_4": {
            "name": "test_4",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_5": {
            "name": "test_5",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_6": {
            "name": "test_6",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/notes/03-13.py": {},
    "oopl-jpl-master/notes/03-14.py": {},
    "oopl-jpl-master/notes/03-15.py": {},
    "oopl-jpl-master/notes/03-16.py": {
        "f": {
            "name": "f",
            "location": 5,
            "return": [
                "",
                "typing.Generator[int]"
            ],
            "arguments": {}
        },
        "A.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "float"
                ],
                "j": [
                    "int",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "float"
                ]
            }
        },
        "A.__eq__": {
            "name": "__eq__",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "oopl-jpl-master/work/Complex.py": {
        "my_complex.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "int",
                    "str",
                    "bool",
                    "Mapping[str, str]"
                ],
                "i": [
                    "int",
                    "Callable[[T], bool]"
                ]
            }
        },
        "my_complex.__add__": {
            "name": "__add__",
            "location": 8,
            "return": [
                "str",
                "my_complex"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "Type",
                    "bool",
                    "typing.Type",
                    "List[Tuple[float, float]]",
                    "list[tuple[typing.Union[float,float]]]"
                ]
            }
        },
        "my_complex.__isub__": {
            "name": "__isub__",
            "location": 11,
            "return": [
                "my_complex",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "str"
                ]
            }
        },
        "my_complex.__sub__": {
            "name": "__sub__",
            "location": 14,
            "return": [
                "my_complex",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "str"
                ]
            }
        },
        "my_complex.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "my_complex.__eq__": {
            "name": "__eq__",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "str",
                    "Optional[bytes]",
                    "bytes",
                    "List[Tuple[float, float]]",
                    "None",
                    "Iterable[Any]",
                    "list[tuple[typing.Union[float,float]]]",
                    "List[Callable]",
                    "list[typing.Callable[, ]]"
                ]
            }
        },
        "my_complex.conjugate": {
            "name": "conjugate",
            "location": 27,
            "return": [
                "my_complex",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/work/Map.py": {
        "map_for_range": {
            "name": "map_for_range",
            "location": 16,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "f": [
                    "int",
                    "float",
                    "str",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ],
                "x": [
                    "dict",
                    "str"
                ]
            }
        },
        "map_for_enumerate": {
            "name": "map_for_enumerate",
            "location": 21,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "f": [
                    "int",
                    "float",
                    "str"
                ],
                "x": [
                    "list[T]",
                    "str",
                    "List[T]",
                    "int",
                    "Sequence[Any]"
                ]
            }
        },
        "map_for": {
            "name": "map_for",
            "location": 26,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "f": [
                    "int"
                ],
                "x": [
                    "str",
                    "SupportsFloat",
                    "bool",
                    "Literal[False]"
                ]
            }
        },
        "map_generator": {
            "name": "map_generator",
            "location": 31,
            "return": [
                "typing.Generator[]",
                "List[str]",
                "list",
                "List[List[Any]]",
                "List[float]",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "f": [
                    "int"
                ],
                "x": [
                    "int"
                ]
            }
        },
        "Map_Iterator.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str",
                    "int",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "typing.Callable[..., None]",
                    "bool",
                    "Callable[..., None]"
                ],
                "a": [
                    "int",
                    "str"
                ]
            }
        },
        "Map_Iterator.__iter__": {
            "name": "__iter__",
            "location": 8,
            "return": [
                "Map_Iterator",
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map_Iterator.__next__": {
            "name": "__next__",
            "location": 12,
            "return": [
                "str",
                "Tuple[str, str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/work/Map2.py": {
        "map_iter_yield": {
            "name": "map_iter_yield",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "map_zip_yield": {
            "name": "map_zip_yield",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "map_zip_generator": {
            "name": "map_zip_generator",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "oopl-jpl-master/work/Range.py": {
        "Range_1.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "str"
                ],
                "end": [
                    "int",
                    "str"
                ]
            }
        },
        "Range_1.__iter__": {
            "name": "__iter__",
            "location": 23,
            "return": [
                "Iterator",
                "Union[int, float]",
                "Set[int]",
                "Tuple[float, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Range_2.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "str"
                ],
                "end": [
                    "int",
                    "str"
                ]
            }
        },
        "Range_2.__iter__": {
            "name": "__iter__",
            "location": 34,
            "return": [
                "",
                "typing.Generator[typing.Union[int,tuple[typing.Union[str,str,str,str,str,str,str]],float,list[int],str,list[]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Range_1.Iterator.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "int",
                    "float",
                    "str",
                    "Union[str, float]",
                    "bool"
                ],
                "e": [
                    "int",
                    "float",
                    "str",
                    "Union[str, float]",
                    "bool"
                ]
            }
        },
        "Range_1.Iterator.__iter__": {
            "name": "__iter__",
            "location": 9,
            "return": [
                "Iterator",
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Range_1.Iterator.__next__": {
            "name": "__next__",
            "location": 12,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/work/RangeIterator.py": {
        "range_iterator_yield": {
            "name": "range_iterator_yield",
            "location": 20,
            "return": [
                "",
                "typing.Generator[int]"
            ],
            "arguments": {
                "start": [
                    "int",
                    "str"
                ],
                "end": [
                    "int",
                    "str"
                ]
            }
        },
        "Range_Iterator.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "str"
                ],
                "end": [
                    "int",
                    "str"
                ]
            }
        },
        "Range_Iterator.__iter__": {
            "name": "__iter__",
            "location": 8,
            "return": [
                "Range_Iterator",
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Range_Iterator.__next__": {
            "name": "__next__",
            "location": 11,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/work/Reduce2.py": {
        "reduce_for": {
            "name": "reduce_for",
            "location": 2,
            "return": [
                "int",
                "str",
                "Dict[str, Dict[str, int]]",
                "T",
                "bool",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "f": [
                    "int",
                    "dict[, ]",
                    "dict",
                    "list['Product']",
                    "List['Product']",
                    "bool"
                ],
                "l": [
                    "int",
                    "str",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "reduce_while": {
            "name": "reduce_while",
            "location": 19,
            "return": [
                "str",
                "T",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "f": [
                    "int",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "list",
                    "list[]",
                    "Union[Sequence[int], Sequence[dict]]",
                    "typing.Sequence[int]",
                    "typing.Sequence[dict[, ]]"
                ],
                "l": [
                    "int",
                    "str",
                    "tuple",
                    "tuple[]"
                ]
            }
        }
    },
    "oopl-jpl-master/work/Reduce2T.py": {
        "MyUnitTests.setUp": {
            "name": "setUp",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_1": {
            "name": "test_1",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_2": {
            "name": "test_2",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_3": {
            "name": "test_3",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_4": {
            "name": "test_4",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_5": {
            "name": "test_5",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_6": {
            "name": "test_6",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_7": {
            "name": "test_7",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_8": {
            "name": "test_8",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/work/RMSE.py": {
        "rmse_for_range": {
            "name": "rmse_for_range",
            "location": 16,
            "return": [
                "int",
                "str",
                "Iterable[Iterable[T]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "predictions": [
                    "str",
                    "List[Dict]",
                    "bytes",
                    "Union[slice, List[slice], List[int]]",
                    "int",
                    "bool"
                ],
                "targets": [
                    "str",
                    "float",
                    "Union[bool, List[bool]]",
                    "bool",
                    "list[bool]"
                ]
            }
        },
        "rmse_for_enumerate": {
            "name": "rmse_for_enumerate",
            "location": 36,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "predictions": [
                    "str",
                    "List[Dict]",
                    "int",
                    "bytes",
                    "Union[slice, List[slice], List[int]]",
                    "list",
                    "numpy.ndarray"
                ],
                "targets": [
                    "str",
                    "Union[bool, List[bool]]",
                    "bool",
                    "int",
                    "list[bool]"
                ]
            }
        },
        "rmse_iterator": {
            "name": "rmse_iterator",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "predictions": [
                    "str",
                    "List[Dict]",
                    "bytes",
                    "Union[slice, List[slice], List[int]]",
                    "numpy.ndarray",
                    "int",
                    "list"
                ],
                "targets": [
                    "str",
                    "int",
                    "float",
                    "dict",
                    "dict[, ]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "rmse_map_sum": {
            "name": "rmse_map_sum",
            "location": 78,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "predictions": [
                    "str",
                    "List[Dict]",
                    "bytes",
                    "Union[slice, List[slice], List[int]]",
                    "numpy.ndarray",
                    "int",
                    "list"
                ],
                "targets": [
                    "str",
                    "int",
                    "float",
                    "dict",
                    "dict[, ]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "rmse_zip_for": {
            "name": "rmse_zip_for",
            "location": 98,
            "return": [
                "int",
                "str",
                "List[int]",
                "List[str]"
            ],
            "arguments": {
                "predictions": [
                    "str",
                    "int",
                    "List[int]",
                    "list[int]",
                    "List[str]",
                    "list[str]"
                ],
                "targets": [
                    "str",
                    "int",
                    "List[int]",
                    "list[int]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "rmse_zip_map_sum": {
            "name": "rmse_zip_map_sum",
            "location": 116,
            "return": [
                "int",
                "List[int]",
                "IO",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "predictions": [
                    "int",
                    "Union[List[str], List[int]]",
                    "bool"
                ],
                "targets": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "set",
                    "[[]]"
                ]
            }
        },
        "rmse_zip_list_sum": {
            "name": "rmse_zip_list_sum",
            "location": 130,
            "return": [
                "int",
                "numpy.ndarray",
                "Optional[BaseException]",
                "str",
                "dict"
            ],
            "arguments": {
                "predictions": [
                    "str",
                    "numpy.ndarray",
                    "typing.Sequence[str]",
                    "int",
                    "set[]",
                    "Sequence[str]",
                    "set",
                    "Iterable[str]",
                    "Iterable"
                ],
                "targets": [
                    "str",
                    "numpy.ndarray",
                    "typing.Sequence[str]",
                    "int",
                    "set[]",
                    "Sequence[str]",
                    "set",
                    "Iterable[str]",
                    "Iterable"
                ]
            }
        },
        "rmse_zip_generator_sum": {
            "name": "rmse_zip_generator_sum",
            "location": 145,
            "return": [
                "int",
                "List[int]",
                "IO",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "predictions": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "set",
                    "[[]]"
                ],
                "targets": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "set",
                    "[[]]"
                ]
            }
        },
        "rmse_numpy": {
            "name": "rmse_numpy",
            "location": 159,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "predictions": [
                    "Dict[str, Tuple[int, int]]",
                    "float",
                    "dict[str, tuple[typing.Union[int,int]]]"
                ],
                "targets": [
                    "Dict[str, Tuple[int, int]]",
                    "float",
                    "dict[str, tuple[typing.Union[int,int]]]"
                ]
            }
        }
    },
    "oopl-jpl-master/work/RMSET.py": {
        "MyUnitTests.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_1": {
            "name": "test_1",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_2": {
            "name": "test_2",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_3": {
            "name": "test_3",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_4": {
            "name": "test_4",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyUnitTests.test_5": {
            "name": "test_5",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oopl-jpl-master/work/Zip.py": {
        "my_zip_iter": {
            "name": "my_zip_iter",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "my_zip_map": {
            "name": "my_zip_map",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
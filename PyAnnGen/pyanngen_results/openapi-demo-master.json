{
    "openapi-demo-master/connexion_app.py": {},
    "openapi-demo-master/flask_app.py": {
        "hello": {
            "name": "hello",
            "location": 17,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "openapi-demo-master/persons/db.py": {
        "get_db": {
            "name": "get_db",
            "location": 85,
            "return": [
                "DB"
            ],
            "arguments": {}
        },
        "DB.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "logging.Logger",
                    "str",
                    "None",
                    "List[str]"
                ]
            }
        },
        "DB._load_person": {
            "name": "_load_person",
            "location": 18,
            "return": [
                "Optional[persons.models.PersonModel]"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "DB._read_file": {
            "name": "_read_file",
            "location": 28,
            "return": [
                "List",
                "str",
                "int",
                "Dict[str,Any]",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ]
            }
        },
        "DB.setup": {
            "name": "setup",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "bytes",
                    "int",
                    "Dict"
                ]
            }
        },
        "DB.teardown": {
            "name": "teardown",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DB.list_persons": {
            "name": "list_persons",
            "location": 52,
            "return": [
                "List[persons.models.PersonModel]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DB.create_person": {
            "name": "create_person",
            "location": 56,
            "return": [
                "persons.models.PersonModel"
            ],
            "arguments": {
                "self": []
            }
        },
        "DB.get_person": {
            "name": "get_person",
            "location": 67,
            "return": [
                "Optional[persons.models.PersonModel]"
            ],
            "arguments": {
                "self": [],
                "person_id": [
                    "str",
                    "int",
                    "Dict[str,Any]",
                    "Union[int,str]"
                ]
            }
        },
        "DB.update_person": {
            "name": "update_person",
            "location": 70,
            "return": [
                "Optional[persons.models.PersonModel]"
            ],
            "arguments": {
                "self": [],
                "person_id": [
                    "str",
                    "float"
                ]
            }
        },
        "DB.delete_person": {
            "name": "delete_person",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "person_id": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None"
                ]
            }
        }
    },
    "openapi-demo-master/persons/handlers.py": {
        "_person_or_404": {
            "name": "_person_or_404",
            "location": 9,
            "return": [
                "dict",
                "str",
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Mapping[str, Union[int, slice]]"
            ],
            "arguments": {
                "person": [
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[models.PersonModel]",
                    "bool"
                ]
            }
        },
        "list_persons": {
            "name": "list_persons",
            "location": 15,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {}
        },
        "create_person": {
            "name": "create_person",
            "location": 20,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "body": [
                    "str",
                    "bytes",
                    "Union[str,TrackingCode]",
                    "int",
                    "users.models.CustomUser"
                ]
            }
        },
        "retrieve_person": {
            "name": "retrieve_person",
            "location": 29,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "person_id": [
                    "int",
                    "str"
                ]
            }
        },
        "update_person": {
            "name": "update_person",
            "location": 34,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "person_id": [
                    "int",
                    "str"
                ],
                "body": [
                    "str",
                    "int"
                ]
            }
        },
        "delete_person": {
            "name": "delete_person",
            "location": 43,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "person_id": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "openapi-demo-master/persons/logging.py": {},
    "openapi-demo-master/persons/models.py": {
        "PersonModel.as_dict": {
            "name": "as_dict",
            "location": 16,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersonModel.copy": {
            "name": "copy",
            "location": 19,
            "return": [
                "PersonModel"
            ],
            "arguments": {
                "self": [
                    "_TPersonModel@@PersonModel@@"
                ]
            }
        },
        "Error.as_dict": {
            "name": "as_dict",
            "location": 28,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "openapi-demo-master/persons/__init__.py": {},
    "openapi-demo-master/test_persons/conftest.py": {
        "db": {
            "name": "db",
            "location": 9,
            "return": [
                "Generator[persons.db.DB,None,None]",
                "Generator"
            ],
            "arguments": {}
        }
    },
    "openapi-demo-master/test_persons/test_db.py": {
        "test_list_persons": {
            "name": "test_list_persons",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "db": []
            }
        },
        "test_create_person": {
            "name": "test_create_person",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "deeplearning.ml4pl.models.log_database.Database",
                    "bool"
                ]
            }
        },
        "test_get_person": {
            "name": "test_get_person",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "zerver.models.UserProfile",
                    "zerver.models.UserGroup"
                ]
            }
        },
        "test_update_person": {
            "name": "test_update_person",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_delete_person": {
            "name": "test_delete_person",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "bool"
                ]
            }
        }
    },
    "openapi-demo-master/test_persons/test_handlers.py": {},
    "openapi-demo-master/test_persons/test_models.py": {
        "test_person_args_kwargs": {
            "name": "test_person_args_kwargs",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_person_dict": {
            "name": "test_person_dict",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_args_kwargs": {
            "name": "test_error_args_kwargs",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_dict": {
            "name": "test_error_dict",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "openapi-demo-master/test_persons/__init__.py": {}
}
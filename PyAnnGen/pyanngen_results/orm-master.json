{
    "orm-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "package": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_long_description": {
            "name": "get_long_description",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_packages": {
            "name": "get_packages",
            "location": 30,
            "return": [
                "list"
            ],
            "arguments": {
                "package": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "orm-master/orm/constants.py": {},
    "orm-master/orm/exceptions.py": {},
    "orm-master/orm/fields.py": {
        "ModelField.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "primary_key": [
                    "bool"
                ],
                "index": [
                    "bool"
                ],
                "unique": [
                    "bool"
                ]
            }
        },
        "ModelField.get_column": {
            "name": "get_column",
            "location": 26,
            "return": [
                "sqlalchemy.sql.schema.Column"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ModelField.get_validator": {
            "name": "get_validator",
            "location": 39,
            "return": [
                "typesystem.Field",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelField.get_column_type": {
            "name": "get_column_type",
            "location": 42,
            "return": [
                "sqlalchemy.sql.type_api.TypeEngine"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelField.get_constraints": {
            "name": "get_constraints",
            "location": 45,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelField.expand_relationship": {
            "name": "expand_relationship",
            "location": 48,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "_T0"
                ]
            }
        },
        "String.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.get_validator": {
            "name": "get_validator",
            "location": 57,
            "return": [
                "str",
                "String"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.get_column_type": {
            "name": "get_column_type",
            "location": 60,
            "return": [
                "sqlalchemy.sql.sqltypes.String"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.get_validator": {
            "name": "get_validator",
            "location": 65,
            "return": [
                "Text",
                "str",
                "int",
                "float",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.get_column_type": {
            "name": "get_column_type",
            "location": 68,
            "return": [
                "sqlalchemy.sql.sqltypes.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Integer.get_validator": {
            "name": "get_validator",
            "location": 73,
            "return": [
                "Integer",
                "List[List[int]]",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Integer.get_column_type": {
            "name": "get_column_type",
            "location": 76,
            "return": [
                "sqlalchemy.sql.sqltypes.Integer"
            ],
            "arguments": {
                "self": []
            }
        },
        "Float.get_validator": {
            "name": "get_validator",
            "location": 81,
            "return": [
                "Float",
                "List[List[int]]",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Float.get_column_type": {
            "name": "get_column_type",
            "location": 84,
            "return": [
                "sqlalchemy.sql.sqltypes.Float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BigInteger.get_validator": {
            "name": "get_validator",
            "location": 89,
            "return": [
                "Integer",
                "List[List[int]]",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BigInteger.get_column_type": {
            "name": "get_column_type",
            "location": 92,
            "return": [
                "sqlalchemy.sql.sqltypes.BigInteger"
            ],
            "arguments": {
                "self": []
            }
        },
        "Boolean.get_validator": {
            "name": "get_validator",
            "location": 97,
            "return": [
                "Boolean",
                "List[List[int]]",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Boolean.get_column_type": {
            "name": "get_column_type",
            "location": 100,
            "return": [
                "sqlalchemy.sql.sqltypes.Boolean"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoNowMixin.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auto_now": [
                    "bool",
                    "int",
                    "str",
                    "Union[float, Tuple[float, float]]",
                    "Callable"
                ],
                "auto_now_add": [
                    "bool",
                    "int",
                    "str",
                    "Union[float, Tuple[float, float]]",
                    "Callable"
                ]
            }
        },
        "DateTime.get_validator": {
            "name": "get_validator",
            "location": 116,
            "return": [
                "DateTime",
                "datetime.datetime",
                "str",
                "Tuple[str, str]",
                "float",
                "int",
                "datetime.date"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateTime.get_column_type": {
            "name": "get_column_type",
            "location": 121,
            "return": [
                "sqlalchemy.sql.sqltypes.DateTime"
            ],
            "arguments": {
                "self": []
            }
        },
        "Date.get_validator": {
            "name": "get_validator",
            "location": 126,
            "return": [
                "Date",
                "str",
                "float",
                "Optional[str]",
                "datetime.datetime",
                "int",
                "Sequence[str]",
                "datetime.date",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Date.get_column_type": {
            "name": "get_column_type",
            "location": 131,
            "return": [
                "sqlalchemy.sql.sqltypes.Date"
            ],
            "arguments": {
                "self": []
            }
        },
        "Time.get_validator": {
            "name": "get_validator",
            "location": 136,
            "return": [
                "Time",
                "str",
                "float",
                "int",
                "datetime.datetime",
                "Optional[datetime.timedelta]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Time.get_column_type": {
            "name": "get_column_type",
            "location": 139,
            "return": [
                "sqlalchemy.sql.sqltypes.Time"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSON.get_validator": {
            "name": "get_validator",
            "location": 144,
            "return": [
                "List[List[int]]",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSON.get_column_type": {
            "name": "get_column_type",
            "location": 147,
            "return": [
                "sqlalchemy.sql.sqltypes.JSON"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForeignKey.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "to": [
                    "int",
                    "str",
                    "float",
                    "None",
                    "Optional[int]",
                    "list[float]",
                    "List[float]",
                    "list[str]",
                    "List[str]",
                    "bool"
                ],
                "allow_null": [
                    "bool"
                ],
                "on_delete": [
                    "Optional[str]"
                ]
            }
        },
        "ForeignKey.target": {
            "name": "target",
            "location": 164,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForeignKey.get_validator": {
            "name": "get_validator",
            "location": 172,
            "return": [
                "ForeignKeyValidator",
                "str",
                "Optional[str]",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForeignKey.get_column": {
            "name": "get_column",
            "location": 175,
            "return": [
                "sqlalchemy.sql.schema.Column"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ForeignKey.expand_relationship": {
            "name": "expand_relationship",
            "location": 192,
            "return": [
                "target",
                "str",
                "int",
                "dict",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "bool",
                    "list[]",
                    "list"
                ]
            }
        },
        "OneToOne.get_column": {
            "name": "get_column",
            "location": 200,
            "return": [
                "sqlalchemy.sql.schema.Column"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Enum.__init__": {
            "name": "__init__",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enum": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Enum.get_validator": {
            "name": "get_validator",
            "location": 225,
            "return": [
                "List[List[int]]",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enum.get_column_type": {
            "name": "get_column_type",
            "location": 228,
            "return": [
                "sqlalchemy.sql.sqltypes.Enum"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decimal.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_digits": [
                    "int"
                ],
                "decimal_places": [
                    "int"
                ]
            }
        },
        "Decimal.get_validator": {
            "name": "get_validator",
            "location": 240,
            "return": [
                "Decimal",
                "List[List[int]]",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decimal.get_column_type": {
            "name": "get_column_type",
            "location": 243,
            "return": [
                "sqlalchemy.sql.sqltypes.Numeric"
            ],
            "arguments": {
                "self": []
            }
        },
        "UUID.get_validator": {
            "name": "get_validator",
            "location": 248,
            "return": [
                "UUID",
                "List[List[int]]",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UUID.get_column_type": {
            "name": "get_column_type",
            "location": 251,
            "return": [
                "orm.sqlalchemy_fields.GUID"
            ],
            "arguments": {
                "self": []
            }
        },
        "Email.get_validator": {
            "name": "get_validator",
            "location": 256,
            "return": [
                "Email",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Email.get_column_type": {
            "name": "get_column_type",
            "location": 259,
            "return": [
                "sqlalchemy.sql.sqltypes.String"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPAddress.get_validator": {
            "name": "get_validator",
            "location": 264,
            "return": [
                "IPAddress",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPAddress.get_column_type": {
            "name": "get_column_type",
            "location": 267,
            "return": [
                "orm.sqlalchemy_fields.GenericIP"
            ],
            "arguments": {
                "self": []
            }
        },
        "URL.get_validator": {
            "name": "get_validator",
            "location": 272,
            "return": [
                "str",
                "URL"
            ],
            "arguments": {
                "self": []
            }
        },
        "URL.get_column_type": {
            "name": "get_column_type",
            "location": 275,
            "return": [
                "sqlalchemy.sql.sqltypes.String"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForeignKey.ForeignKeyValidator.validate": {
            "name": "validate",
            "location": 153,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "datetime.timedelta",
                    "T",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "orm-master/orm/models.py": {
        "_update_auto_now_fields": {
            "name": "_update_auto_now_fields",
            "location": 24,
            "return": [
                "_T0"
            ],
            "arguments": {
                "values": [
                    "_T0"
                ],
                "fields": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "dict[str, dict[, ]]",
                    "T",
                    "list",
                    "Dict[str, Any]",
                    "Union[\"GenericFixed\", \"Table\"]",
                    "Dict[str, dict]"
                ]
            }
        },
        "ModelRegistry.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ModelRegistry.metadata": {
            "name": "metadata",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelRegistry._get_database_url": {
            "name": "_get_database_url",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelMeta.__new__": {
            "name": "__new__",
            "location": 76,
            "return": [
                "str",
                "Exception",
                "dict[, ]",
                "dict[typing.Type, dict[str, str]]",
                "dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[Dict, List, str]",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "list[]",
                    "Tuple[type]",
                    "dict[str, typing.Any]",
                    "Dict[str, object]",
                    "tuple[typing.Type]",
                    "dict[str, object]"
                ],
                "name": [
                    "str",
                    "Union[Dict, List, str]",
                    "Dict[str, Any]",
                    "Tuple[type]"
                ],
                "bases": [
                    "str",
                    "Union[Dict, List, str]",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "list[]",
                    "Tuple[type]",
                    "dict[str, typing.Any]",
                    "Dict[str, object]",
                    "tuple[typing.Type]",
                    "dict[str, object]"
                ],
                "attrs": [
                    "Dict[str, object]",
                    "str",
                    "T",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "ModelMeta.table": {
            "name": "table",
            "location": 94,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "str"
                ]
            }
        },
        "ModelMeta.columns": {
            "name": "columns",
            "location": 100,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "list"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "float"
                ]
            }
        },
        "QuerySet.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_cls": [
                    "int",
                    "None",
                    "bool",
                    "list",
                    "list[]"
                ],
                "filter_clauses": [
                    "Union[List, Dict, None]",
                    "None",
                    "Optional[float]",
                    "list[]",
                    "Optional[int]",
                    "dict[, ]",
                    "Optional[Callable[..., Any]]",
                    "float",
                    "Optional[bool]",
                    "int",
                    "typing.Callable[..., typing.Any]"
                ],
                "select_related": [
                    "Union[List, Dict, None]",
                    "None",
                    "Optional[float]",
                    "list[]",
                    "Optional[int]",
                    "dict[, ]",
                    "Optional[Callable[..., Any]]",
                    "float",
                    "Optional[bool]",
                    "int",
                    "typing.Callable[..., typing.Any]"
                ],
                "limit_count": [
                    "int",
                    "None",
                    "Optional[float]",
                    "List[str]",
                    "float",
                    "Tuple[List[Any], List[Any]]",
                    "list[str]",
                    "bool",
                    "tuple[typing.Union[list[typing.Any],list[typing.Any]]]",
                    "List[int]",
                    "list[int]"
                ],
                "offset": [
                    "int",
                    "None",
                    "bool",
                    "list",
                    "list[]"
                ],
                "order_by": [
                    "Union[List, Dict, None]",
                    "None",
                    "Optional[float]",
                    "Optional[str]",
                    "list[]",
                    "Optional[int]",
                    "dict[, ]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "QuerySet.__get__": {
            "name": "__get__",
            "location": 123,
            "return": [
                "QuerySet"
            ],
            "arguments": {
                "self": [
                    "_TQuerySet"
                ],
                "instance": [
                    "typing.Type",
                    "Type['Signature']",
                    "Type[Any]"
                ],
                "owner": [
                    "bool",
                    "str",
                    "typing.TextIO",
                    "int",
                    "TextIO"
                ]
            }
        },
        "QuerySet.database": {
            "name": "database",
            "location": 127,
            "return": [
                "bool",
                "str",
                "List[Dict[str, Any]]",
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.table": {
            "name": "table",
            "location": 131,
            "return": [
                "Optional[str]",
                "list",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.schema": {
            "name": "schema",
            "location": 135,
            "return": [
                "List[str]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.pkname": {
            "name": "pkname",
            "location": 140,
            "return": [
                "bool",
                "str",
                "List[Dict[str, Any]]",
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuerySet._build_select_expression": {
            "name": "_build_select_expression",
            "location": 143,
            "return": [
                "Tuple[List[str], int]",
                "bool",
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.filter": {
            "name": "filter",
            "location": 178,
            "return": [
                "QuerySet"
            ],
            "arguments": {
                "self": [
                    "_TQuerySet"
                ],
                "clause": [
                    "Optional[sqlalchemy.sql.elements.BinaryExpression]"
                ]
            }
        },
        "QuerySet.exclude": {
            "name": "exclude",
            "location": 189,
            "return": [
                "QuerySet"
            ],
            "arguments": {
                "self": [
                    "_TQuerySet"
                ],
                "clause": [
                    "Optional[sqlalchemy.sql.elements.BinaryExpression]"
                ]
            }
        },
        "QuerySet._filter_query": {
            "name": "_filter_query",
            "location": 200,
            "return": [
                "QuerySet"
            ],
            "arguments": {
                "self": [
                    "_TQuerySet"
                ],
                "_exclude": [
                    "bool"
                ]
            }
        },
        "QuerySet.search": {
            "name": "search",
            "location": 279,
            "return": [
                "QuerySet"
            ],
            "arguments": {
                "self": [
                    "_TQuerySet"
                ],
                "term": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Tuple[int]",
                    "tuple[int]"
                ]
            }
        },
        "QuerySet.order_by": {
            "name": "order_by",
            "location": 318,
            "return": [
                "QuerySet"
            ],
            "arguments": {
                "self": [
                    "_TQuerySet"
                ]
            }
        },
        "QuerySet.select_related": {
            "name": "select_related",
            "location": 328,
            "return": [
                "QuerySet"
            ],
            "arguments": {
                "self": [
                    "_TQuerySet"
                ],
                "related": [
                    "Optional[Union[str, Any]]",
                    "Callable",
                    "List['world.PerceivedNoise']",
                    "Optional[int]",
                    "List[Dict]",
                    "Union[int, slice]"
                ]
            }
        },
        "QuerySet.limit": {
            "name": "limit",
            "location": 347,
            "return": [
                "QuerySet"
            ],
            "arguments": {
                "self": [
                    "_TQuerySet"
                ],
                "limit_count": [
                    "int"
                ]
            }
        },
        "QuerySet.offset": {
            "name": "offset",
            "location": 357,
            "return": [
                "QuerySet"
            ],
            "arguments": {
                "self": [
                    "_TQuerySet"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "QuerySet._validate_kwargs": {
            "name": "_validate_kwargs",
            "location": 404,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Set[str]]",
                "Optional[Union[str, Any, Any, Any]]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuerySet._prepare_order_by": {
            "name": "_prepare_order_by",
            "location": 480,
            "return": [
                "int",
                "bool",
                "Tuple[int]",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "order_by": [
                    "str"
                ]
            }
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.pk": {
            "name": "pk",
            "location": 505,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "Model.__repr__": {
            "name": "__repr__",
            "location": 508,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__str__": {
            "name": "__str__",
            "location": 511,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.build_table": {
            "name": "build_table",
            "location": 515,
            "return": [
                "int",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "type",
                    "typing.Type",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Model.table": {
            "name": "table",
            "location": 524,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._from_row": {
            "name": "_from_row",
            "location": 560,
            "return": [
                "Model"
            ],
            "arguments": {
                "cls": [
                    "Type[_TModel]"
                ],
                "row": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]"
                ],
                "select_related": [
                    "list[]",
                    "Dict[str, Any]",
                    "List[str]",
                    "List[float]",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Model.__setattr__": {
            "name": "__setattr__",
            "location": 583,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "value": [
                    "str",
                    "typing.Iterator",
                    "KT",
                    "list[str]",
                    "Iterator[str]",
                    "List[str]"
                ]
            }
        },
        "Model.__eq__": {
            "name": "__eq__",
            "location": 590,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "orm-master/orm/sqlalchemy_fields.py": {
        "GUID.load_dialect_impl": {
            "name": "load_dialect_impl",
            "location": 18,
            "return": [
                "str",
                "Type[Any]",
                "Type",
                "list"
            ],
            "arguments": {
                "self": [],
                "dialect": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "GUID.process_bind_param": {
            "name": "process_bind_param",
            "location": 24,
            "return": [
                "str",
                "None",
                "Callable",
                "Optional[float]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "None",
                    "T",
                    "bool",
                    "Optional[bool]",
                    "typing.Any",
                    "Optional[Union[str, Any]]",
                    "float",
                    "Union[None, int, float]"
                ],
                "dialect": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "GUID.process_result_value": {
            "name": "process_result_value",
            "location": 33,
            "return": [
                "Union[(uuid.UUID, _T0)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "_T0"
                ],
                "dialect": [
                    "str",
                    "tuple[typing.Union[typing.Any,typing.Any]]",
                    "sqlalchemy.engine.interfaces.Dialect",
                    "None",
                    "Optional[Tuple[Any, Any]]",
                    "typing.Callable[, ]",
                    "Callable",
                    "dict[, ]",
                    "dict",
                    "Iterable[Any]"
                ]
            }
        },
        "GenericIP.load_dialect_impl": {
            "name": "load_dialect_impl",
            "location": 53,
            "return": [
                "str",
                "Type[Any]",
                "Type",
                "list"
            ],
            "arguments": {
                "self": [],
                "dialect": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "GenericIP.process_bind_param": {
            "name": "process_bind_param",
            "location": 59,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "None",
                    "Union[None, int, float]",
                    "int",
                    "str",
                    "Optional[dict]",
                    "float",
                    "Optional[str]",
                    "dict[, ]",
                    "list[]",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[List]",
                    "Optional[Dict]"
                ],
                "dialect": [
                    "int",
                    "complex",
                    "Tuple[str, int]",
                    "tuple[typing.Union[str,int]]",
                    "list",
                    "list[]"
                ]
            }
        },
        "GenericIP.process_result_value": {
            "name": "process_result_value",
            "location": 63,
            "return": [
                "Union[(ipaddress.IPv4Address, ipaddress.IPv6Address, _T0)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "_T0"
                ],
                "dialect": [
                    "str",
                    "tuple[typing.Union[typing.Any,typing.Any]]",
                    "sqlalchemy.engine.interfaces.Dialect",
                    "None",
                    "Optional[Tuple[Any, Any]]",
                    "typing.Callable[, ]",
                    "Callable",
                    "dict[, ]",
                    "dict",
                    "Iterable[Any]"
                ]
            }
        }
    },
    "orm-master/orm/__init__.py": {},
    "orm-master/tests/conftest.py": {
        "anyio_backend": {
            "name": "anyio_backend",
            "location": 5,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, bool]]]",
                "bool",
                "int",
                "str"
            ],
            "arguments": {}
        }
    },
    "orm-master/tests/settings.py": {},
    "orm-master/tests/test_columns.py": {
        "time": {
            "name": "time",
            "location": 19,
            "return": [
                "datetime.time"
            ],
            "arguments": {}
        }
    },
    "orm-master/tests/test_foreignkey.py": {},
    "orm-master/tests/test_models.py": {
        "test_model_class": {
            "name": "test_model_class",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_pk": {
            "name": "test_model_pk",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
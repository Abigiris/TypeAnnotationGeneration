{
    "oscon-2018-master/oscon.py": {
        "binary_encode": {
            "name": "binary_encode",
            "location": 146,
            "return": [
                "list"
            ],
            "arguments": {
                "x": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "fizz_buzz_encode": {
            "name": "fizz_buzz_encode",
            "location": 153,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "Loss.loss": {
            "name": "loss",
            "location": 32,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "predicted": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "actual": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Loss.gradient": {
            "name": "gradient",
            "location": 35,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "predicted": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "actual": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "SSE.loss": {
            "name": "loss",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "predicted": [
                    "int",
                    "Callable",
                    "str"
                ],
                "actual": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SSE.gradient": {
            "name": "gradient",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "predicted": [
                    "int",
                    "Callable",
                    "str"
                ],
                "actual": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Layer.forward": {
            "name": "forward",
            "location": 50,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Layer.backward": {
            "name": "backward",
            "location": 53,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "gradient": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Layer.params_and_grads": {
            "name": "params_and_grads",
            "location": 56,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Linear.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "List[int]",
                    "float"
                ],
                "output_size": [
                    "int",
                    "float"
                ]
            }
        },
        "Linear.forward": {
            "name": "forward",
            "location": 68,
            "return": [
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Linear.backward": {
            "name": "backward",
            "location": 76,
            "return": [
                "str",
                "int",
                "Iterable[Any]"
            ],
            "arguments": {
                "self": [],
                "gradient": [
                    "None",
                    "Set[str]",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray"
                ]
            }
        },
        "Linear.params_and_grads": {
            "name": "params_and_grads",
            "location": 84,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tanh.forward": {
            "name": "forward",
            "location": 90,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Tanh.backward": {
            "name": "backward",
            "location": 94,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "gradient": [
                    "int",
                    "str",
                    "Callable"
                ]
            }
        },
        "NeuralNet.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layers": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "NeuralNet.forward": {
            "name": "forward",
            "location": 110,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "NeuralNet.backward": {
            "name": "backward",
            "location": 116,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "gradient": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "NeuralNet.params_and_grads": {
            "name": "params_and_grads",
            "location": 121,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Optimizer.update": {
            "name": "update",
            "location": 127,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "net": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "SGD.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lr": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "SGD.update": {
            "name": "update",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    }
}
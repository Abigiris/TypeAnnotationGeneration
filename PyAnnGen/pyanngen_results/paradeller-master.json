{
    "paradeller-master/paradeller/analysis.py": {
        "find_matches_for_start_pairs": {
            "name": "find_matches_for_start_pairs",
            "location": 10,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "pairs": [
                    "int",
                    "str",
                    "bool"
                ],
                "adj_list_ids": [
                    "int",
                    "str",
                    "bool"
                ],
                "adj_list_words": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "find_matches": {
            "name": "find_matches",
            "location": 20,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "id1": [
                    "int",
                    "Optional[str]"
                ],
                "id2": [
                    "int",
                    "Optional[str]"
                ],
                "adj_list_ids": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "adj_list_words": [
                    "Tuple[object]",
                    "List[str]",
                    "int",
                    "Tuple",
                    "Set[str]"
                ]
            }
        },
        "find_valid_matches": {
            "name": "find_valid_matches",
            "location": 41,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "pot_ids": [
                    "int",
                    "str",
                    "Tuple[Union[str,None,str]]",
                    "Union[int,str]",
                    "Tuple[Optional[str],str]"
                ],
                "adj_list_ids": [
                    "int",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "stanza_words": [
                    "str",
                    "List[int]",
                    "Dict",
                    "int",
                    "Optional[str]",
                    "Pattern[str]"
                ]
            }
        },
        "consolidate_stanzas": {
            "name": "consolidate_stanzas",
            "location": 55,
            "return": [
                "List[tuple]"
            ],
            "arguments": {
                "valid_stanzas": [
                    "str",
                    "List[str]",
                    "Set[str]",
                    "int",
                    "Optional[str]",
                    "Iterable[Any]"
                ]
            }
        },
        "find_final_stanzas_from_stanzas": {
            "name": "find_final_stanzas_from_stanzas",
            "location": 71,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "stanzas": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ],
                "adj_list_ids": [
                    "str",
                    "int",
                    "bool"
                ],
                "adj_list_words": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "find_final_stanzas": {
            "name": "find_final_stanzas",
            "location": 88,
            "return": [
                "List[tuple]"
            ],
            "arguments": {
                "stan1": [
                    "str",
                    "int"
                ],
                "stan2": [
                    "str",
                    "int"
                ],
                "stan3": [
                    "str",
                    "int"
                ],
                "adj_list_ids": [
                    "str",
                    "List[float]",
                    "int",
                    "Union[int,str]"
                ],
                "adj_list_words": [
                    "List[int]",
                    "List[str]",
                    "Union[Type[Exception],Tuple[Any,...]]",
                    "Type",
                    "Dict",
                    "Dict[str,int]",
                    "Tuple[Union[Any,...]]",
                    "List[Tuple[int,int,int]]",
                    "List[tuple[Union[int,int,int]]]"
                ]
            }
        },
        "find_valid_final_lines": {
            "name": "find_valid_final_lines",
            "location": 115,
            "return": [
                "List[tuple]"
            ],
            "arguments": {
                "pot_ids": [
                    "int",
                    "Set[str]",
                    "Tuple[str]",
                    "List[str]",
                    "Callable",
                    "Optional[Sequence[str]]",
                    "Sequence[str]",
                    "None"
                ],
                "adj_list_ids": [
                    "List[int]",
                    "int",
                    "str",
                    "Optional[Any]",
                    "Any",
                    "None"
                ],
                "prev_stanza_words": [
                    "str",
                    "List[int]",
                    "Dict[Any,list]",
                    "int",
                    "Optional[str]",
                    "Pattern[str]"
                ]
            }
        },
        "consolidate_poems": {
            "name": "consolidate_poems",
            "location": 131,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "valid_poems": [
                    "str",
                    "List[str]",
                    "Set[str]",
                    "int",
                    "Optional[str]",
                    "Iterable[Any]"
                ]
            }
        },
        "get_num_combos": {
            "name": "get_num_combos",
            "location": 144,
            "return": [
                "int"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Dict",
                    "List[None]"
                ],
                "r": [
                    "int",
                    "Dict",
                    "List[None]"
                ]
            }
        }
    },
    "paradeller-master/paradeller/classy.py": {
        "RoboPoet.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "bytes",
                    "T"
                ]
            }
        },
        "RoboPoet.filter_data": {
            "name": "filter_data",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "paradeller-master/paradeller/dataprep.py": {
        "tokenize": {
            "name": "tokenize",
            "location": 12,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "text": []
            }
        },
        "find_duplicates": {
            "name": "find_duplicates",
            "location": 37,
            "return": [
                "Dict[(tuple, Any)]"
            ],
            "arguments": {
                "data": []
            }
        },
        "filter_out_duplicates": {
            "name": "filter_out_duplicates",
            "location": 51,
            "return": [
                "list"
            ],
            "arguments": {
                "data": [],
                "duplicates": []
            }
        },
        "filter_out_short": {
            "name": "filter_out_short",
            "location": 60,
            "return": [
                "list"
            ],
            "arguments": {
                "data": [],
                "n": [
                    "int"
                ]
            }
        },
        "filter_out_oddballs_recursive": {
            "name": "filter_out_oddballs_recursive",
            "location": 66,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": [],
                "verbose": [
                    "bool"
                ]
            }
        },
        "filter_out_oddballs": {
            "name": "filter_out_oddballs",
            "location": 79,
            "return": [
                "list"
            ],
            "arguments": {
                "data": []
            }
        },
        "restructure_data": {
            "name": "restructure_data",
            "location": 116,
            "return": [
                "Tuple[(dict, dict)]"
            ],
            "arguments": {
                "data": []
            }
        },
        "create_adj_list_by_id": {
            "name": "create_adj_list_by_id",
            "location": 143,
            "return": [
                "dict"
            ],
            "arguments": {
                "data": []
            }
        },
        "create_adj_list_by_word": {
            "name": "create_adj_list_by_word",
            "location": 152,
            "return": [
                "dict"
            ],
            "arguments": {
                "data": []
            }
        },
        "create_duplicates_dict": {
            "name": "create_duplicates_dict",
            "location": 162,
            "return": [
                "Dict[(Any, list)]"
            ],
            "arguments": {
                "adj_list_ids": [],
                "duplicates": []
            }
        },
        "prep_data": {
            "name": "prep_data",
            "location": 176,
            "return": [
                "Tuple[(Any, Dict[(Any, list)], dict, dict)]"
            ],
            "arguments": {
                "data": [],
                "verbose": [
                    "bool"
                ]
            }
        },
        "load_and_prep": {
            "name": "load_and_prep",
            "location": 214,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "use_pickle": [
                    "bool"
                ],
                "update_pickle": [
                    "bool"
                ]
            }
        },
        "sort_ids_by_popularity": {
            "name": "sort_ids_by_popularity",
            "location": 251,
            "return": [
                "list"
            ],
            "arguments": {
                "adj_list_ids": [],
                "adj_list_words": []
            }
        }
    },
    "paradeller-master/paradeller/helper.py": {
        "load_archive": {
            "name": "load_archive",
            "location": 13,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "update_archive": {
            "name": "update_archive",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "archive": [
                    "int",
                    "str"
                ]
            }
        },
        "save_results": {
            "name": "save_results",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "results": [
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None",
                    "bool",
                    "Optional[Any]",
                    "Any"
                ]
            }
        },
        "save_to_pickle": {
            "name": "save_to_pickle",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "stuff": [
                    "int",
                    "float",
                    "Dict",
                    "bool"
                ]
            }
        },
        "read_from_pickle": {
            "name": "read_from_pickle",
            "location": 44,
            "return": [
                "str",
                "int",
                "dict",
                "Dict[str, Dict[str, float]]",
                "list"
            ],
            "arguments": {}
        }
    },
    "paradeller-master/paradeller/keys.template.py": {},
    "paradeller-master/paradeller/postprocess.py": {
        "stanza_sorter_maker": {
            "name": "stanza_sorter_maker",
            "location": 1,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "adj_list_ids": [
                    "bool",
                    "Sequence[int]",
                    "Dict[str,Any]",
                    "MutableSet",
                    "int",
                    "MutableSet[str]"
                ]
            }
        },
        "print_stanza": {
            "name": "print_stanza",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "stanza": [
                    "List[tuple[Union[float,float]]]",
                    "str",
                    "List[Tuple[float,float]]",
                    "bytes",
                    "Optional[int]",
                    "Set[int]",
                    "Dict[int,str]"
                ],
                "data": [
                    "List[str]",
                    "Dict",
                    "int",
                    "str"
                ]
            }
        },
        "print_stanzas": {
            "name": "print_stanzas",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "stanzas": [
                    "List",
                    "int"
                ],
                "data": [
                    "int",
                    "str",
                    "Callable",
                    "bytearray",
                    "bool"
                ],
                "n": [
                    "int",
                    "List"
                ]
            }
        },
        "print_poems": {
            "name": "print_poems",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "poems": [
                    "List",
                    "int"
                ],
                "data": [
                    "int",
                    "Dict",
                    "str"
                ],
                "n": [
                    "int",
                    "List"
                ]
            }
        },
        "stanza_sorter_maker.stanza_sorter": {
            "name": "stanza_sorter",
            "location": 2,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "stanza": [
                    "str",
                    "int",
                    "list"
                ]
            }
        }
    },
    "paradeller-master/paradeller/run.py": {
        "find_matches_for_pair": {
            "name": "find_matches_for_pair",
            "location": 21,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "p": [
                    "int",
                    "bool"
                ]
            }
        },
        "find_final_stanzas_helper": {
            "name": "find_final_stanzas_helper",
            "location": 26,
            "return": [
                "List[tuple]"
            ],
            "arguments": {
                "stanzas": [
                    "int"
                ]
            }
        }
    },
    "paradeller-master/paradeller/scrape.py": {
        "get_tweets": {
            "name": "get_tweets",
            "location": 22,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "is_good": {
            "name": "is_good",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bytes",
                    "List[tuple[Union[str,Any]]]",
                    "List[Tuple[str,Any]]",
                    "Optional[int]"
                ]
            }
        },
        "format_status": {
            "name": "format_status",
            "location": 56,
            "return": [
                "dict"
            ],
            "arguments": {
                "status": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "n": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "paradeller-master/paradeller/__init__.py": {},
    "paradeller-master/paradeller/samples/poems.py": {},
    "paradeller-master/paradeller/samples/__init__.py": {
        "load_samples": {
            "name": "load_samples",
            "location": 5,
            "return": [
                "List[dict]"
            ],
            "arguments": {}
        },
        "datafy_poem": {
            "name": "datafy_poem",
            "location": 15,
            "return": [
                "Tuple[(List[dict], Any)]"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "name": [
                    "str",
                    "int"
                ],
                "counter": [
                    "Tuple",
                    "List[str]",
                    "str"
                ]
            }
        }
    }
}
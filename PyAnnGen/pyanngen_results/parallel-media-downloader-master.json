{
    "parallel-media-downloader-master/setup.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "parallel-media-downloader-master/tasks.py": {
        "_delete_file": {
            "name": "_delete_file",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "IO",
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Union[str, pathlib3x.Path, IO[str]]"
                ]
            }
        },
        "style": {
            "name": "style",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "Dict[str,Any]",
                    "Dict",
                    "bool"
                ],
                "check": [
                    "bool",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "isort": {
            "name": "isort",
            "location": 51,
            "return": [
                "str",
                "int",
                "float",
                "bool",
                "Sequence[int]"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int"
                ],
                "check": [
                    "bool",
                    "Tuple[cirq.Qid]",
                    "Dict[str,str]",
                    "Dict[str,Optional[str]]"
                ]
            }
        },
        "pipenv_setup": {
            "name": "pipenv_setup",
            "location": 57,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "context": [
                    "str",
                    "bytes",
                    "bool",
                    "Union[Sequence[str], Sequence[int]]",
                    "Iterable[str]"
                ],
                "check": [
                    "bool",
                    "Tuple[cirq.Qid]",
                    "Dict[str,str]",
                    "Dict[str,Optional[str]]"
                ]
            }
        },
        "black": {
            "name": "black",
            "location": 63,
            "return": [
                "str",
                "int",
                "float",
                "bool",
                "Sequence[int]"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int"
                ],
                "check": [
                    "bool",
                    "Tuple[cirq.Qid]",
                    "Dict[str,str]",
                    "Dict[str,Optional[str]]"
                ]
            }
        },
        "lint_flake8": {
            "name": "lint_flake8",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "lint_pylint": {
            "name": "lint_pylint",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "lint_mypy": {
            "name": "lint_mypy",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "lint": {
            "name": "lint",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "_context": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "radon_cc": {
            "name": "radon_cc",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "radon_mi": {
            "name": "radon_mi",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "radon": {
            "name": "radon",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "_context": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "xenon": {
            "name": "xenon",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "coverage": {
            "name": "coverage",
            "location": 141,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int"
                ],
                "publish": [
                    "bool",
                    "Union[List,set]",
                    "Iterator[str]",
                    "Optional[str]",
                    "IO[str]",
                    "str"
                ],
                "xml": [
                    "bool",
                    "Union[List,set]",
                    "Iterator[str]",
                    "Optional[str]",
                    "IO[str]",
                    "str"
                ]
            }
        },
        "clean_build": {
            "name": "clean_build",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "bool"
                ]
            }
        },
        "clean_python": {
            "name": "clean_python",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "Path",
                    "int",
                    "pathlib.Path",
                    "bool"
                ]
            }
        },
        "clean_tests": {
            "name": "clean_tests",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "_context": [
                    "bool",
                    "runners.TestRunner",
                    "Callable[,bytes]",
                    "Dict[scripts.node_integration_tests.playbooks.test_config_base.NodeId,pathlib.Path]",
                    "BaseException"
                ]
            }
        },
        "clean": {
            "name": "clean",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "_context": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "dist": {
            "name": "dist",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "bytes",
                    "bool",
                    "Optional[str]",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "parallel-media-downloader-master/parallelmediadownloader/exceptions.py": {
        "HttpTimeoutError.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpTimeoutError.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parallel-media-downloader-master/parallelmediadownloader/media_download_coroutine.py": {
        "MediaDownloadCoroutine.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "media_save_coroutine": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "parallel-media-downloader-master/parallelmediadownloader/media_file.py": {
        "SaveOrder.path_file": {
            "name": "path_file",
            "location": 20,
            "return": [
                "str",
                "pathlib.Path",
                "bool",
                "Union[pathlib.Path, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MediaFile.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "media": [
                    "bytes",
                    "str",
                    "pathlib.Path"
                ],
                "save_order": [
                    "str"
                ]
            }
        },
        "MediaFile.remove": {
            "name": "remove",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parallel-media-downloader-master/parallelmediadownloader/media_filter.py": {
        "MediaFilter.filter": {
            "name": "filter",
            "location": 12,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "media_file": [
                    "str",
                    "parallelmediadownloader.media_file.MediaFile",
                    "Sequence[str]",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "MediaFilter._filter": {
            "name": "_filter",
            "location": 17,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "media_file": [
                    "Iterable[str]",
                    "Sequence[str]",
                    "parallelmediadownloader.media_file.MediaFile",
                    "str",
                    "List[str]",
                    "Set[str]",
                    "Iterator[str]"
                ]
            }
        },
        "NotImageFilter._filter": {
            "name": "_filter",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "media_file": [
                    "str",
                    "parallelmediadownloader.media_file.MediaFile",
                    "List[str]",
                    "TextIO"
                ]
            }
        }
    },
    "parallel-media-downloader-master/parallelmediadownloader/media_save_coroutine.py": {
        "MediaSaveCoroutine.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parallel-media-downloader-master/parallelmediadownloader/modeia_download_result.py": {},
    "parallel-media-downloader-master/parallelmediadownloader/parallel_media_downloader.py": {
        "ParallelMediaDownloader.execute": {
            "name": "execute",
            "location": 17,
            "return": [
                "Union[str, List[str], Tuple[str, ...]]",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "list_download_order": [
                    "int",
                    "List[int]"
                ]
            }
        }
    },
    "parallel-media-downloader-master/parallelmediadownloader/parallel_media_download_coroutine.py": {},
    "parallel-media-downloader-master/parallelmediadownloader/__init__.py": {},
    "parallel-media-downloader-master/tests/conftest.py": {
        "mock_aioresponse": {
            "name": "mock_aioresponse",
            "location": 9,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "bytes_image_twitter": {
            "name": "bytes_image_twitter",
            "location": 15,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "resource_path_root": [
                    "str"
                ]
            }
        }
    },
    "parallel-media-downloader-master/tests/test_media_download_coroutine.py": {
        "download_order": {
            "name": "download_order",
            "location": 19,
            "return": [
                "typing.Generator[DownloadOrder]"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "int",
                    "bytes",
                    "List[int]",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "parallel-media-downloader-master/tests/test_media_file.py": {
        "TestSaveOrder.test": {
            "name": "test",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestMediaFile.test_timestamp": {
            "name": "test_timestamp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "bool",
                    "str"
                ],
                "bytes_image_twitter": []
            }
        },
        "TestMediaFile.test_bytes_remove": {
            "name": "test_bytes_remove",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ],
                "bytes_image_twitter": [
                    "bool"
                ]
            }
        }
    },
    "parallel-media-downloader-master/tests/test_media_filter.py": {
        "TestMediaFilter.test": {
            "name": "test",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "bytes_image_twitter": [
                    "str",
                    "Callable[[str],str]",
                    "Callable[str,str]"
                ]
            }
        },
        "TestMediaFilter.test_is_micro_image_not_image_file": {
            "name": "test_is_micro_image_not_image_file",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Optional[Callable[[Any],None]]",
                    "Callable[Any,None]",
                    "None"
                ],
                "bytes_image_twitter": [
                    "str",
                    "Tuple[str,str,str]",
                    "Tuple[Union[str,str,str]]"
                ]
            }
        },
        "TestMediaFilter.test_not_implemented_error": {
            "name": "test_not_implemented_error",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ],
                "bytes_image_twitter": [
                    "str",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "TestMediaFilter.test_not_implemented_error.ErrorFilter._filter": {
            "name": "_filter",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "media_file": [
                    "bool",
                    "int",
                    "Hashable",
                    "set",
                    "Dict[str, str]",
                    "str"
                ]
            }
        }
    },
    "parallel-media-downloader-master/tests/test_media_save_coroutine.py": {},
    "parallel-media-downloader-master/tests/test_parallel_media_downloader.py": {
        "TestParallelMediaDownloader.test": {
            "name": "test",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "Tuple[int,int]",
                    "int",
                    "Tuple[Union[int,int]]"
                ],
                "resource_path_root": [
                    "int",
                    "Tuple[int,int]"
                ],
                "mock_aioresponse": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "TestParallelMediaDownloader.check_download_result": {
            "name": "check_download_result",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "media_download_result": [
                    "str",
                    "Optional[Dict]",
                    "Optional",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "download_order": [
                    "str",
                    "Dict"
                ],
                "content": [
                    "bytes",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestParallelMediaDownloader.test_filtered_result_length": {
            "name": "test_filtered_result_length",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "str",
                    "int",
                    "List[Tuple[int,int,float]]",
                    "List[tuple[Union[int,int,float]]]"
                ],
                "bytes_image_twitter": [
                    "str",
                    "int",
                    "List[Tuple[int,int,float]]",
                    "List[tuple[Union[int,int,float]]]"
                ],
                "mock_aioresponse": [
                    "str",
                    "int",
                    "List[Tuple[int,int,float]]",
                    "List[tuple[Union[int,int,float]]]"
                ]
            }
        },
        "TestParallelMediaDownloader.test_filtered_result_content": {
            "name": "test_filtered_result_content",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "bytes_image_twitter": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mock_aioresponse": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "TestParallelMediaDownloader.filter": {
            "name": "filter",
            "location": 104,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "None",
                    "Optional[str]"
                ],
                "bytes_image_twitter": [
                    "str",
                    "bool",
                    "float",
                    "Callable[float,None]",
                    "Callable[[float],None]",
                    "int",
                    "None",
                    "Optional[str]"
                ],
                "mock_aioresponse": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "None"
                ]
            }
        }
    },
    "parallel-media-downloader-master/tests/__init__.py": {},
    "parallel-media-downloader-master/tests/testlibraries/instance_resource.py": {},
    "parallel-media-downloader-master/tests/testlibraries/__init__.py": {}
}
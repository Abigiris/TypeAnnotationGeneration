{
    "passport-master/src/passport/app.py": {
        "init": {
            "name": "init",
            "location": 15,
            "return": [
                "aiohttp.web.Application"
            ],
            "arguments": {
                "app_name": [
                    "str"
                ],
                "config": [
                    "passport.config.AppConfig"
                ]
            }
        }
    },
    "passport-master/src/passport/client.py": {
        "user_required": {
            "name": "user_required",
            "location": 17,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "header": [
                    "str"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "aiohttp.web.Application"
                ]
            }
        },
        "user_required.wrapper": {
            "name": "wrapper",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        }
    },
    "passport-master/src/passport/config.py": {
        "StorageConfig.uri": {
            "name": "uri",
            "location": 22,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VaultProvider.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "VaultConfig"
                ],
                "mount_point": [
                    "str"
                ]
            }
        },
        "VaultProvider.load": {
            "name": "load",
            "location": 70,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "IO[bytes]",
                    "typing.IO"
                ]
            }
        }
    },
    "passport-master/src/passport/exceptions.py": {},
    "passport-master/src/passport/__init__.py": {},
    "passport-master/src/passport/__main__.py": {
        "cli": {
            "name": "cli",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "click.Context"
                ],
                "conf_dir": [
                    "str",
                    "None",
                    "bool",
                    "Callable[..., bool]",
                    "click.Context",
                    "typing.Callable[..., bool]"
                ],
                "debug": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Callable",
                    "int"
                ]
            }
        }
    },
    "passport-master/src/passport/domain/__init__.py": {
        "User.set_password": {
            "name": "set_password",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "bytes"
                ]
            }
        },
        "User.verify_password": {
            "name": "verify_password",
            "location": 29,
            "return": [
                "bool",
                "str",
                "dict",
                "List[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "passport-master/src/passport/domain/storage/sessions.py": {},
    "passport-master/src/passport/domain/storage/users.py": {},
    "passport-master/src/passport/domain/storage/__init__.py": {},
    "passport-master/src/passport/handlers/auth.py": {},
    "passport-master/src/passport/handlers/__init__.py": {
        "token_required": {
            "name": "token_required",
            "location": 29,
            "return": [
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "header": [
                    "typing.Text"
                ]
            }
        },
        "session_required": {
            "name": "session_required",
            "location": 54,
            "return": [
                "bool",
                "List[Dict]",
                "Mapping[str, Any]",
                "str",
                "Dict[int, Dict[str, Any]]"
            ],
            "arguments": {
                "f": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Optional[bool]",
                    "bool",
                    "None"
                ]
            }
        },
        "token_required.wrapper": {
            "name": "wrapper",
            "location": 30,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "passport-master/src/passport/handlers/api/tokens.py": {},
    "passport-master/src/passport/handlers/api/users.py": {},
    "passport-master/src/passport/handlers/api/__init__.py": {},
    "passport-master/src/passport/services/tokens.py": {
        "TokenGenerator.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "private_key": [
                    "bytes",
                    "List[str]",
                    "list[str]",
                    "str",
                    "Tuple[bool]",
                    "tuple[bool]",
                    "Union[List[str], List[int]]",
                    "list[int]"
                ]
            }
        },
        "TokenGenerator.generate": {
            "name": "generate",
            "location": 15,
            "return": [
                "int",
                "str",
                "AsyncGenerator",
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "int",
                    "str",
                    "bytes",
                    "passpordomain.User",
                    "datetime"
                ],
                "token_type": [
                    "int",
                    "passpordomain.User",
                    "str",
                    "datetime",
                    "bytes"
                ],
                "expire": [
                    "int",
                    "passpordomain.User",
                    "str",
                    "datetime",
                    "bytes"
                ]
            }
        },
        "TokenDecoder.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "public_key": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TokenDecoder.decode": {
            "name": "decode",
            "location": 37,
            "return": [
                "User",
                "bool",
                "Iterable[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str"
                ],
                "token_type": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "bytes"
                ]
            }
        }
    },
    "passport-master/src/passport/services/users.py": {
        "UserService.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "passport-master/src/passport/services/__init__.py": {},
    "passport-master/src/passport/storage/sessions.py": {
        "SessionDBStorage.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "passport-master/src/passport/storage/users.py": {
        "UsersDBRepo.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "UsersDBRepo.get_query": {
            "name": "get_query",
            "location": 58,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersDBRepo._process_row": {
            "name": "_process_row",
            "location": 63,
            "return": [
                "User",
                "bool",
                "Dict[int, dict]"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "tuple[Q]",
                    "dict",
                    "list[str]",
                    "src.main.core.models.area.Area",
                    "Tuple['cirq.Qid']",
                    "List[str]"
                ]
            }
        }
    },
    "passport-master/src/passport/storage/__init__.py": {
        "DBStorage.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[str]",
                    "databases.Database"
                ]
            }
        }
    },
    "passport-master/src/passport/storage/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "passport-master/src/passport/storage/migrations/versions/615677fb3a4f_add_users_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "passport-master/src/passport/storage/migrations/versions/9ca629ddd362_add_permissions.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "passport-master/src/passport/storage/migrations/versions/a01d1258d7a7_add_sessions.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "passport-master/src/passport/storage/migrations/versions/__init__.py": {},
    "passport-master/src/passport/use_cases/users.py": {},
    "passport-master/src/passport/use_cases/__init__.py": {
        "UseCase.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "aiohttp.web.Application",
                    "aiohttp.web.Request"
                ]
            }
        }
    },
    "passport-master/tests/conftest.py": {
        "config": {
            "name": "config",
            "location": 10,
            "return": [
                "int",
                "str",
                "float",
                "bytes",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "app": {
            "name": "app",
            "location": 43,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "pg_server": [
                    "bool",
                    "Callable"
                ],
                "config": [
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "fake": {
            "name": "fake",
            "location": 74,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "passport-master/tests/__init__.py": {},
    "passport-master/tests/handlers/test_api.py": {
        "prepare_request": {
            "name": "prepare_request",
            "location": 14,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "bytes",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Sequence",
                    "typing.Sequence[]"
                ],
                "json": [
                    "bool",
                    "bytes",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict",
                    "List[dict]",
                    "Tuple[str]"
                ]
            }
        },
        "prepare_user": {
            "name": "prepare_user",
            "location": 24,
            "return": [
                "int",
                "str",
                "bool",
                "float",
                "datetime.date"
            ],
            "arguments": {}
        }
    },
    "passport-master/tests/handlers/__init__.py": {}
}
{
    "passzero-master/server.py": {},
    "passzero-master/passzero/api_utils.py": {
        "requires_json_auth": {
            "name": "requires_json_auth",
            "location": 12,
            "return": [
                "Callable"
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "List",
                    "List[str]",
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "requires_csrf_check": {
            "name": "requires_csrf_check",
            "location": 26,
            "return": [
                "Callable"
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "bool",
                    "Callable[[T],Any]"
                ]
            }
        },
        "get_request_data": {
            "name": "get_request_data",
            "location": 43,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "requires_json_form_validation": {
            "name": "requires_json_form_validation",
            "location": 55,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "form_class": [
                    "Type"
                ]
            }
        },
        "spend_csrf_token": {
            "name": "spend_csrf_token",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "generate_csrf_token": {
            "name": "generate_csrf_token",
            "location": 81,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {}
        },
        "write_json": {
            "name": "write_json",
            "location": 88,
            "return": [
                "Response",
                "str",
                "Optional[str]",
                "Dict[str,Any]",
                "Tuple[str,Optional[int]]"
            ],
            "arguments": {
                "code": [
                    "int",
                    "Dict",
                    "str",
                    "MutableMapping"
                ],
                "data": [
                    "int",
                    "Dict",
                    "str",
                    "MutableMapping"
                ]
            }
        },
        "json_form_validation_error": {
            "name": "json_form_validation_error",
            "location": 97,
            "return": [
                "Tuple[(int, dict)]"
            ],
            "arguments": {
                "errors": [
                    "str",
                    "Exception",
                    "Dict",
                    "bool"
                ]
            }
        },
        "json_error": {
            "name": "json_error",
            "location": 104,
            "return": [
                "Tuple[(_T0, Dict[(str, Union[(str, _T1)])])]"
            ],
            "arguments": {
                "code": [
                    "int",
                    "str",
                    "bytes"
                ],
                "msg": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "json_error_v2": {
            "name": "json_error_v2",
            "location": 111,
            "return": [
                "Tuple[(Dict[(str, Union[(str, _T0, _T2)])], _T1)]"
            ],
            "arguments": {
                "msg": [
                    "int",
                    "str",
                    "bool"
                ],
                "http_status_code": [
                    "int",
                    "str",
                    "Optional[float]",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "app_error_code": [
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "int",
                    "str"
                ]
            }
        },
        "json_success": {
            "name": "json_success",
            "location": 122,
            "return": [
                "Tuple[(int, Dict[(str, Union[(str, _T0)])])]"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "bytes",
                    "Dict",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "json_success_v2": {
            "name": "json_success_v2",
            "location": 130,
            "return": [
                "Tuple[(Dict[(str, Union[(str, _T0)])], int)]"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "int"
                ]
            }
        },
        "check_auth": {
            "name": "check_auth",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "json_noauth": {
            "name": "json_noauth",
            "location": 143,
            "return": [
                "Tuple[(int, Dict[(str, str)])]"
            ],
            "arguments": {}
        },
        "check_all_csrf": {
            "name": "check_all_csrf",
            "location": 148,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {}
        },
        "check_csrf": {
            "name": "check_csrf",
            "location": 154,
            "return": [
                "bool"
            ],
            "arguments": {
                "form": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "json_csrf_validation_error": {
            "name": "json_csrf_validation_error",
            "location": 161,
            "return": [
                "Tuple[(int, Dict[(str, str)])]"
            ],
            "arguments": {}
        },
        "json_internal_error": {
            "name": "json_internal_error",
            "location": 166,
            "return": [
                "Tuple[(int, Dict[(str, Union[(str, _T0)])])]"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "Dict",
                    "int"
                ]
            }
        },
        "requires_json_auth.inner": {
            "name": "inner",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "requires_csrf_check.inner": {
            "name": "inner",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "requires_json_form_validation.real_function": {
            "name": "real_function",
            "location": 56,
            "return": [
                "int",
                "bool",
                "Iterator"
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "Exception",
                    "Callable[..., T]"
                ]
            }
        },
        "requires_json_form_validation.real_function.inner": {
            "name": "inner",
            "location": 58,
            "return": [
                "List[float]",
                "str"
            ],
            "arguments": {}
        }
    },
    "passzero-master/passzero/api_v1.py": {
        "log_api_stats": {
            "name": "log_api_stats",
            "location": 31,
            "return": [
                "dict",
                "List[dict]",
                "List[str]"
            ],
            "arguments": {
                "response": [
                    "flask.Response"
                ]
            }
        },
        "get_api_status": {
            "name": "get_api_status",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "api_v1_get_csrf_token": {
            "name": "api_v1_get_csrf_token",
            "location": 57,
            "return": [
                "limbic.emotion.models.LexiconLimbicModel",
                "Optional[List[str]]",
                "Optional[str]",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "__logout": {
            "name": "__logout",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "api_v1_logout": {
            "name": "api_v1_logout",
            "location": 88,
            "return": [
                "str",
                "int",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "api_v1_login": {
            "name": "api_v1_login",
            "location": 113,
            "return": [
                "str",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "request_data": [
                    "dict"
                ]
            }
        },
        "api_v1_get_docs": {
            "name": "api_v1_get_docs",
            "location": 167,
            "return": [
                "str",
                "List[List[int]]",
                "list",
                "Callable"
            ],
            "arguments": {}
        },
        "api_v1_decrypt_doc": {
            "name": "api_v1_decrypt_doc",
            "location": 207,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "doc_id": [
                    "List[int]",
                    "int",
                    "sqlalchemy.orm.session.Session",
                    "shop.transfer.models.ShopID",
                    "transfer.models.ItemID",
                    "transfer.models.OrderID"
                ]
            }
        },
        "api_v1_create_doc": {
            "name": "api_v1_create_doc",
            "location": 255,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "form_data": [
                    "str"
                ]
            }
        },
        "api_v1_edit_doc": {
            "name": "api_v1_edit_doc",
            "location": 296,
            "return": [
                "str",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "form_data": [
                    "int",
                    "bytes",
                    "str"
                ],
                "document_id": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "api_v1_delete_doc": {
            "name": "api_v1_delete_doc",
            "location": 343,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "doc_id": [
                    "int",
                    "str"
                ]
            }
        },
        "api_v1_get_entries": {
            "name": "api_v1_get_entries",
            "location": 383,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "api_v1_delete_entry": {
            "name": "api_v1_delete_entry",
            "location": 419,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "entry_id": [
                    "str",
                    "Optional[str]",
                    "None",
                    "int",
                    "Optional[int]",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "api_v1_new_entry": {
            "name": "api_v1_new_entry",
            "location": 453,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "Optional[float]"
            ],
            "arguments": {
                "request_data": [
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[str,str]"
                ]
            }
        },
        "api_v1_update_entry": {
            "name": "api_v1_update_entry",
            "location": 504,
            "return": [
                "int",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "request_data": [
                    "str",
                    "int",
                    "Callable"
                ],
                "entry_id": [
                    "int",
                    "FrozenSet[bytes]",
                    "frozenset",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "api_v1_nuke_entries": {
            "name": "api_v1_nuke_entries",
            "location": 553,
            "return": [
                "str",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "request_data": [
                    "dict",
                    "Dict[str, str]",
                    "flask.Request",
                    "Dict[str, Any]"
                ]
            }
        },
        "api_v1_signup": {
            "name": "api_v1_signup",
            "location": 583,
            "return": [
                "str",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "request_data": [
                    "dict"
                ]
            }
        },
        "api_v1_confirm_signup": {
            "name": "api_v1_confirm_signup",
            "location": 644,
            "return": [
                "str",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "request_data": [
                    "str",
                    "Optional[dict]",
                    "flask.wrappers.Response",
                    "Mapping[str,str]",
                    "Iterator"
                ]
            }
        },
        "api_v1_user_recover": {
            "name": "api_v1_user_recover",
            "location": 691,
            "return": [
                "int",
                "str",
                "salon.models.Stylist",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request_data": [
                    "Dict"
                ]
            }
        },
        "api_v1_recover_password_confirm": {
            "name": "api_v1_recover_password_confirm",
            "location": 732,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request_data": [
                    "bytes",
                    "Tuple[Union[str,dict,int,Any]]",
                    "Union[zerver.models.UserProfile,zilencer.models.RemoteZulipServer]",
                    "Tuple[str,dict,int,Any]",
                    "Dict[str,List[str]]",
                    "Optional[Dict]"
                ]
            }
        },
        "api_v1_delete_user": {
            "name": "api_v1_delete_user",
            "location": 787,
            "return": [
                "int",
                "str",
                "salon.models.Stylist",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request_data": [
                    "str",
                    "Optional[dict]",
                    "Optional[Dict[str,str]]",
                    "Optional[MutableMapping[Any,Any]]",
                    "Mapping[str,str]"
                ]
            }
        },
        "api_v1_update_user_password": {
            "name": "api_v1_update_user_password",
            "location": 837,
            "return": [
                "int",
                "rotkehlchen.db.dbhandler.DBHandler",
                "salon.models.Stylist"
            ],
            "arguments": {
                "request_data": [
                    "dict",
                    "Sequence",
                    "Callable",
                    "story.models.Story",
                    "story.models.Choice"
                ]
            }
        },
        "api_v1_get_user_preferences": {
            "name": "api_v1_get_user_preferences",
            "location": 883,
            "return": [
                "str",
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "api_v1_update_user_preferences": {
            "name": "api_v1_update_user_preferences",
            "location": 915,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "request_data": [
                    "dict",
                    "flask.Response",
                    "flask.wrappers.Response",
                    "str",
                    "Optional[Dict[str, str]]",
                    "Optional[bytes]"
                ]
            }
        }
    },
    "passzero-master/passzero/api_v2.py": {
        "jsonify_entries_pool": {
            "name": "jsonify_entries_pool",
            "location": 18,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "entry": [
                    "BaseException"
                ]
            }
        },
        "__jsonify_entries_multiprocess": {
            "name": "__jsonify_entries_multiprocess",
            "location": 31,
            "return": [
                "list"
            ],
            "arguments": {
                "enc_entries": [
                    "str",
                    "bool"
                ]
            }
        },
        "api_get_entries": {
            "name": "api_get_entries",
            "location": 41,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {}
        },
        "api_get_entry": {
            "name": "api_get_entry",
            "location": 75,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "entry_id": [
                    "int",
                    "None",
                    "shop.transfer.models.ShopID",
                    "Optional[int]"
                ]
            }
        },
        "api_v1_login": {
            "name": "api_v1_login",
            "location": 111,
            "return": [
                "str",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "request_data": [
                    "dict"
                ]
            }
        }
    },
    "passzero-master/passzero/app_factory.py": {
        "dict_to_base64": {
            "name": "dict_to_base64",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "d": [
                    "str",
                    "Type",
                    "Optional[str]",
                    "Dict",
                    "None",
                    "Dict[str,str]",
                    "Optional[Union[Dict,str,int,bytes]]",
                    "int",
                    "bytes"
                ]
            }
        },
        "read_database_uri": {
            "name": "read_database_uri",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "create_app": {
            "name": "create_app",
            "location": 39,
            "return": [
                "flask.Flask",
                "Flask"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Dict",
                    "bool",
                    "Set[str]"
                ],
                "settings_override": [
                    "Dict",
                    "str",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "create_app.check_token_in_blacklist": {
            "name": "check_token_in_blacklist",
            "location": 90,
            "return": [
                "bool",
                "str",
                "Callable",
                "float",
                "models.Name",
                "int"
            ],
            "arguments": {
                "token_dict": [
                    "Dict[str, Set[str]]",
                    "Dict[str, str]"
                ]
            }
        },
        "create_app.error_handler": {
            "name": "error_handler",
            "location": 101,
            "return": [
                "Tuple[Union[dict[Text,Union[Text,bool]],int]]",
                "str",
                "datetime.datetime",
                "int"
            ],
            "arguments": {
                "e": [
                    "type",
                    "str",
                    "bool",
                    "Exception",
                    "Callable"
                ]
            }
        },
        "create_app.set_session_expiry": {
            "name": "set_session_expiry",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "passzero-master/passzero/audit.py": {
        "password_strength": {
            "name": "password_strength",
            "location": 4,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "password": [
                    "str"
                ],
                "user_inputs": [
                    "str"
                ]
            }
        }
    },
    "passzero-master/passzero/backend.py": {
        "activate_account": {
            "name": "activate_account",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "db_session": [
                    "str",
                    "sqlalchemy.orm.session.Session.Transaction",
                    "sqlalchemy.orm.session.Session",
                    "uita.auth.Session",
                    "app.models.User",
                    "sqlalchemy.orm.Session"
                ],
                "user": [
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "password_strength_scores": {
            "name": "password_strength_scores",
            "location": 47,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "email": [
                    "str",
                    "int",
                    "bool"
                ],
                "dec_entries": [
                    "str",
                    "Dict",
                    "List[tuple[Union[str,str]]]",
                    "List[Tuple[str,str]]",
                    "Set[str]",
                    "Optional[Set[str]]",
                    "Iterable[bytes]"
                ]
            }
        },
        "decrypt_entries_pool": {
            "name": "decrypt_entries_pool",
            "location": 65,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "entry_key_pair": [
                    "bytes",
                    "str",
                    "IO",
                    "Callable[T,Any]",
                    "IO[str]",
                    "Callable[[T],Any]"
                ]
            }
        },
        "_decrypt_entries_multiprocess": {
            "name": "_decrypt_entries_multiprocess",
            "location": 71,
            "return": [
                "list"
            ],
            "arguments": {
                "entries": [
                    "str",
                    "Dict",
                    "MutableMapping[Any,Any]",
                    "Sequence[str]"
                ],
                "key": [
                    "str",
                    "Dict",
                    "MutableMapping[Any,Any]",
                    "Sequence[str]",
                    "MutableMapping"
                ]
            }
        },
        "_decrypt_entries_single_thread": {
            "name": "_decrypt_entries_single_thread",
            "location": 81,
            "return": [
                "list"
            ],
            "arguments": {
                "entries": [
                    "Tuple[bool]",
                    "str",
                    "Hashable",
                    "int"
                ],
                "key": [
                    "str",
                    "Hashable",
                    "Tuple[bool]",
                    "int"
                ]
            }
        },
        "decrypt_entries": {
            "name": "decrypt_entries",
            "location": 85,
            "return": [
                "list"
            ],
            "arguments": {
                "entries": [
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "List[str]",
                    "List[dict[str,Any]]",
                    "T",
                    "List[Dict[str,Any]]"
                ],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "get_entries": {
            "name": "get_entries",
            "location": 95,
            "return": [
                "sqlalchemy.orm.Session",
                "bool",
                "str",
                "zerver.models.UserProfile",
                "int"
            ],
            "arguments": {
                "db_session": [
                    "int",
                    "storage.istorage.IStorage[storage.user.User]",
                    "sqlalchemy.orm.Session"
                ],
                "user_id": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "storage.istorage.IStorage[storage.user.User]"
                ]
            }
        },
        "get_links": {
            "name": "get_links",
            "location": 106,
            "return": [
                "str",
                "Optional[str]",
                "Callable[[Dict], None]",
                "list"
            ],
            "arguments": {
                "db_session": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "storage.istorage.IStorage[storage.user.User]"
                ],
                "user_id": [
                    "int",
                    "str",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "get_link_by_id": {
            "name": "get_link_by_id",
            "location": 116,
            "return": [
                "bool",
                "None",
                "str",
                "Optional[bool]",
                "Optional[float]",
                "int",
                "Dict[str,Union[str,None]]",
                "Optional[str]",
                "Counter"
            ],
            "arguments": {
                "db_session": [
                    "int",
                    "str",
                    "grouper.models.base.session.Session"
                ],
                "user_id": [
                    "int",
                    "List[int]",
                    "Set[int]"
                ],
                "link_id": [
                    "int",
                    "str",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "get_account_with_email": {
            "name": "get_account_with_email",
            "location": 129,
            "return": [
                "bool",
                "Callable[[], str]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "db_session": [
                    "str",
                    "sqlalchemy.orm.Session"
                ],
                "email": [
                    "str",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "delete_entry": {
            "name": "delete_entry",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "db_session": [
                    "int",
                    "bool",
                    "sqlalchemy.orm.Session",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "entry_id": [
                    "bool",
                    "bytes",
                    "int"
                ],
                "user_id": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None"
                ],
                "user_key": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Dict[str,str]",
                    "transfer.models.ShopID",
                    "Optional[Dict[str,str]]"
                ]
            }
        },
        "delete_link": {
            "name": "delete_link",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "db_session": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "link_id": [
                    "str",
                    "int",
                    "List[str]",
                    "None",
                    "bool",
                    "Optional[str]",
                    "raiden.utils.ChannelID"
                ],
                "user_id": [
                    "str",
                    "int",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "user_key": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "transfer.models.ShopID"
                ]
            }
        },
        "delete_all_entries": {
            "name": "delete_all_entries",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "db_session": [
                    "sqlalchemy.orm.Session",
                    "int",
                    "django.contrib.auth.models.User",
                    "tracim.models.auth.User",
                    "str",
                    "sqlalchemy.orm.session.Session"
                ],
                "user": [
                    "int",
                    "str",
                    "sqlalchemy.orm.Session",
                    "django.contrib.auth.models.User",
                    "tracim.models.auth.User",
                    "sqlalchemy.orm.session.Session"
                ],
                "user_key": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Dict",
                    "None",
                    "Dict[str,Any]",
                    "Mapping",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "delete_account": {
            "name": "delete_account",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "db_session": [
                    "zerver.models.UserProfile",
                    "bool",
                    "django.contrib.auth.models.User",
                    "musictaxonomy.spotify.models.SpotifyUser",
                    "zerver.models.UserGroup"
                ],
                "user": [
                    "bool",
                    "zerver.models.UserProfile",
                    "django.contrib.auth.models.User",
                    "musictaxonomy.spotify.models.SpotifyUser",
                    "zerver.models.UserGroup"
                ]
            }
        },
        "create_pinned_entry": {
            "name": "create_pinned_entry",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "int",
                    "transfer.models.TopicID",
                    "transfer.models.PostingID"
                ],
                "user_id": [
                    "str",
                    "int",
                    "transfer.models.TopicID",
                    "excars.models.locations.Location",
                    "excars.models.user.User"
                ],
                "master_password": [
                    "str"
                ]
            }
        },
        "create_inactive_user": {
            "name": "create_inactive_user",
            "location": 243,
            "return": [
                "passzero.models.user.User"
            ],
            "arguments": {
                "db_session": [
                    "str",
                    "Dict[str, Any]",
                    "qutebrowser.config.configfiles.StateConfig"
                ],
                "email": [
                    "str"
                ],
                "password": [
                    "str",
                    "Dict[str,Any]",
                    "Tuple[type]",
                    "Tuple[Type]",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "password_hash_algo": [
                    "zerver.models.UserProfile",
                    "int",
                    "Optional[str]",
                    "raiden.utils.MessageID",
                    "raiden.utils.Address",
                    "raiden.utils.ChannelID"
                ]
            }
        },
        "_create_empty_encryption_key_db": {
            "name": "_create_empty_encryption_key_db",
            "location": 282,
            "return": [
                "passzero.models.encryption_keys.EncryptionKeys"
            ],
            "arguments": {
                "db_session": [
                    "bool",
                    "sqlalchemy.Table",
                    "tracim.models.data.Content",
                    "str",
                    "Optional[str]"
                ],
                "user": [
                    "bytes"
                ],
                "user_key": [
                    "bytes",
                    "str",
                    "int",
                    "Dict",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "None"
                ]
            }
        },
        "validate_user_supplied_entry": {
            "name": "validate_user_supplied_entry",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "dec_entry": [
                    "Mapping[str,Any]",
                    "Dict[str,Any]",
                    "Mapping",
                    "bytes",
                    "bool",
                    "str",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "insert_entry_for_user": {
            "name": "insert_entry_for_user",
            "location": 319,
            "return": [
                "passzero.models.entries.Entry"
            ],
            "arguments": {
                "db_session": [
                    "str",
                    "sqlalchemy.Table",
                    "dict"
                ],
                "dec_entry": [
                    "bool",
                    "str",
                    "None",
                    "django.contrib.auth.models.AbstractUser",
                    "Optional[str]",
                    "zerver.models.UserProfile",
                    "Optional[raiden.utils.TokenNetworkAddress]"
                ],
                "user_id": [
                    "bytes",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "user_key": [
                    "bytes",
                    "Optional[bytes]",
                    "str",
                    "None",
                    "Union[bytes,str,None]",
                    "Dict",
                    "Optional[Union[str,int]]",
                    "int",
                    "Mapping",
                    "Union[Mapping,str]"
                ],
                "version": [
                    "str",
                    "int",
                    "dict",
                    "Optional[List[Any]]",
                    "Union[Mapping, str]",
                    "Optional[str]",
                    "bytes"
                ],
                "prevent_deprecated_versions": [
                    "bool",
                    "str",
                    "Dict",
                    "Optional[str]"
                ]
            }
        },
        "_insert_encryption_key": {
            "name": "_insert_encryption_key",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "db_session": [
                    "int",
                    "str",
                    "transfer.models.ShopID",
                    "Optional[str]"
                ],
                "user_id": [
                    "int",
                    "str",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "user_key": [
                    "str",
                    "Dict",
                    "bool",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ],
                "elem_id": [
                    "int",
                    "str",
                    "List",
                    "Optional[bytes]",
                    "bytes",
                    "None",
                    "bool"
                ],
                "symmetric_key": [
                    "str",
                    "int"
                ],
                "elem_type": [
                    "str",
                    "Set[T]",
                    "Callable",
                    "Set[models.Tag]",
                    "bytes",
                    "None",
                    "bool",
                    "Optional[str]",
                    "ennead.models.user.User"
                ]
            }
        },
        "_update_encryption_key": {
            "name": "_update_encryption_key",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "db_session": [
                    "int",
                    "transfer.models.ShopID",
                    "str"
                ],
                "user_id": [
                    "int",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "user_key": [
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "Dict"
                ],
                "elem_id": [
                    "int"
                ],
                "new_symmetric_key": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "elem_type": [
                    "int",
                    "str",
                    "MutableMapping",
                    "models.Dashboard"
                ]
            }
        },
        "_delete_encryption_key": {
            "name": "_delete_encryption_key",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "db_session": [
                    "str",
                    "transfer.models.ShopID",
                    "int"
                ],
                "user_id": [
                    "int",
                    "str",
                    "transfer.models.ShopID",
                    "bytes",
                    "Optional[bytes]",
                    "None",
                    "List[aw_core.models.Event]",
                    "List[E]"
                ],
                "user_key": [
                    "str",
                    "bytes",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ],
                "elem_id": [
                    "int",
                    "str"
                ],
                "elem_type": [
                    "str",
                    "int",
                    "None",
                    "List[str]",
                    "Optional[str]",
                    "logging.Logger"
                ]
            }
        },
        "insert_link_for_user": {
            "name": "insert_link_for_user",
            "location": 447,
            "return": [
                "passzero.models.links.Link"
            ],
            "arguments": {
                "db_session": [
                    "int",
                    "bytes",
                    "str"
                ],
                "dec_link": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None"
                ],
                "user_id": [
                    "str",
                    "List[int]",
                    "bytes",
                    "float"
                ],
                "user_key": [
                    "bytes",
                    "Optional[bytes]",
                    "None"
                ]
            }
        },
        "encrypt_link": {
            "name": "encrypt_link",
            "location": 461,
            "return": [
                "Tuple[(passzero.models.links.Link, Any)]"
            ],
            "arguments": {
                "user_key": [
                    "str",
                    "bytes",
                    "Dict",
                    "Optional[bytes]",
                    "int",
                    "None",
                    "core.models.GroupingKey",
                    "core.models.User.Key"
                ],
                "dec_link": [
                    "str"
                ]
            }
        },
        "insert_new_link": {
            "name": "insert_new_link",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.Session",
                    "Sequence[str]",
                    "str",
                    "int"
                ],
                "link": [
                    "int",
                    "str",
                    "transfer.models.TopicID",
                    "transfer.models.ItemID",
                    "sqlalchemy.orm.Session",
                    "verification_token.models.Token"
                ],
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "insert_new_entry": {
            "name": "insert_new_entry",
            "location": 476,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.Session",
                    "mediaarchiver.models.Account",
                    "str",
                    "Tuple[int]"
                ],
                "entry": [
                    "str",
                    "Callable[,None]",
                    "asgard.models.accounAccount",
                    "asgard.models.user.User"
                ],
                "user_id": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[str]",
                    "sqlalchemy.engine.Engine",
                    "None"
                ]
            }
        },
        "encrypt_entry": {
            "name": "encrypt_entry",
            "location": 483,
            "return": [
                "Tuple[(passzero.models.entries.Entry, Any)]"
            ],
            "arguments": {
                "user_key": [
                    "raiden.utils.AdditionalHash"
                ],
                "dec_entry": [
                    "str",
                    "bool"
                ],
                "version": [
                    "int",
                    "str",
                    "raiden.utils.PaymentAmount",
                    "bool",
                    "Optional[int]"
                ],
                "prevent_deprecated_versions": [
                    "bool",
                    "Callable",
                    "str",
                    "int"
                ]
            }
        },
        "update_entry_versions_for_user": {
            "name": "update_entry_versions_for_user",
            "location": 519,
            "return": [
                "int"
            ],
            "arguments": {
                "db_session": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "str",
                    "Optional[str]"
                ],
                "user_id": [
                    "int",
                    "str",
                    "sqlalchemy.orm.Session",
                    "None",
                    "Optional[str]"
                ],
                "master_key": [
                    "bytes",
                    "str",
                    "Union[bytes,str]"
                ],
                "limit": [
                    "int",
                    "bytes",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "edit_link": {
            "name": "edit_link",
            "location": 558,
            "return": [
                "str",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "session": [
                    "int",
                    "Optional[str]",
                    "Set[int]",
                    "transfer.models.StorefronID",
                    "sqlalchemy.orm.Session",
                    "str"
                ],
                "link_id": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "user_key": [
                    "str",
                    "Dict",
                    "int"
                ],
                "edited_link": [
                    "str",
                    "Optional[str]",
                    "List[list[fonduer.candidates.models.Candidate]]",
                    "List[str]",
                    "List[List[fonduer.candidates.models.Candidate]]",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "user_id": [
                    "str",
                    "int",
                    "bytes",
                    "None",
                    "raiden.utils.ChainID",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "edit_entry": {
            "name": "edit_entry",
            "location": 585,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "session": [
                    "int",
                    "bool",
                    "str",
                    "transfer.models.StorefronID",
                    "Set[int]"
                ],
                "entry_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Set[int]",
                    "None"
                ],
                "user_key": [
                    "str",
                    "Dict[str,str]",
                    "bytes",
                    "MutableMapping",
                    "int",
                    "Callable",
                    "Optional[str]",
                    "None"
                ],
                "edited_entry": [
                    "str",
                    "Dict[str,str]",
                    "Literal"
                ],
                "user_id": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[int]",
                    "None",
                    "raiden.utils.ChainID",
                    "bool"
                ]
            }
        },
        "get_services_map": {
            "name": "get_services_map",
            "location": 627,
            "return": [
                "Dict[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "session": [
                    "abilian.core.sqlalchemy.SQLAlchemy",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "recidiviz.persistence.database.session.Session",
                    "apistar.backends.sqlalchemy_backend.Session"
                ]
            }
        },
        "get_document_by_id": {
            "name": "get_document_by_id",
            "location": 639,
            "return": [
                "None",
                "Optional[str]",
                "int",
                "Optional[bool]",
                "List",
                "Optional[float]",
                "float",
                "str",
                "bool"
            ],
            "arguments": {
                "db_session": [
                    "int",
                    "str",
                    "grouper.models.base.session.Session"
                ],
                "user_id": [
                    "int",
                    "List[int]",
                    "Set[int]",
                    "transfer.models.ShopID"
                ],
                "document_id": [
                    "int",
                    "str",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "encrypt_document": {
            "name": "encrypt_document",
            "location": 652,
            "return": [
                "passzero.models.documents.EncryptedDocument"
            ],
            "arguments": {
                "session": [
                    "str",
                    "int",
                    "None",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "user_id": [
                    "int",
                    "str",
                    "Set[int]"
                ],
                "master_key": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "document_name": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "mimetype": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "document": [
                    "str",
                    "bool",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "insert_document_for_user": {
            "name": "insert_document_for_user",
            "location": 669,
            "return": [
                "list",
                "int",
                "str"
            ],
            "arguments": {
                "session": [
                    "Iterable[str]",
                    "bool",
                    "Session",
                    "sqlalchemy.orm.session.Session",
                    "authentication.session.models.current_user.CurrentUser",
                    "Dict[str,object]",
                    "Tuple[int,str]"
                ],
                "decrypted_document": [
                    "bool",
                    "List",
                    "corporate.models.Customer",
                    "str",
                    "utils.Vote",
                    "Union[user.User,str]"
                ],
                "user_id": [
                    "int",
                    "str",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "tracklater.models.Entry"
                ],
                "master_key": [
                    "bytes",
                    "Union[bytes,str,None]",
                    "str",
                    "Union[Mapping,str]",
                    "None",
                    "Optional[str]",
                    "Mapping"
                ]
            }
        },
        "edit_document": {
            "name": "edit_document",
            "location": 693,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "session": [
                    "int",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "sqlalchemy.orm.Session",
                    "Optional[int]"
                ],
                "document_id": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "master_key": [
                    "bytes",
                    "int",
                    "Union[bytes,str,None]",
                    "str",
                    "None"
                ],
                "form_data": [
                    "str",
                    "bool",
                    "Dict"
                ],
                "user_id": [
                    "str",
                    "int",
                    "List",
                    "None",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        }
    },
    "passzero-master/passzero/change_password.py": {
        "find_entries": {
            "name": "find_entries",
            "location": 13,
            "return": [
                "str",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "Exception",
                "tartare.core.models.Job",
                "int"
            ],
            "arguments": {
                "session": [
                    "int",
                    "None",
                    "sqlalchemy.orm.Session",
                    "Optional[int]",
                    "grouper.models.base.session.Session"
                ],
                "user_id": [
                    "int",
                    "None",
                    "sqlalchemy.orm.Session",
                    "Optional[int]",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "find_link": {
            "name": "find_link",
            "location": 19,
            "return": [
                "str",
                "Optional[List[Any]]",
                "zerver.models.UserProfile",
                "Dict[str, Any]",
                "zerver.models.Realm"
            ],
            "arguments": {
                "session": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "transfer.models.ArticleID",
                    "grouper.models.base.session.Session"
                ],
                "user_id": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "transfer.models.ArticleID",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "find_pinned_entry": {
            "name": "find_pinned_entry",
            "location": 23,
            "return": [
                "str",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "Exception",
                "tartare.core.models.Job",
                "int"
            ],
            "arguments": {
                "session": [
                    "int",
                    "str",
                    "sqlalchemy.orm.Session"
                ],
                "user_id": [
                    "int",
                    "str",
                    "None",
                    "sqlalchemy.orm.Session",
                    "Optional[int]",
                    "shop.transfer.models.ShopID"
                ]
            }
        },
        "find_user": {
            "name": "find_user",
            "location": 29,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "bool",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "session": [
                    "str",
                    "List[int]",
                    "None",
                    "excars.models.locations.Location",
                    "float",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "user_id": [
                    "str",
                    "List[int]",
                    "None",
                    "excars.models.locations.Location",
                    "float",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "verify_pinned_entry": {
            "name": "verify_pinned_entry",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "bool"
                ],
                "pinned_entry": [
                    "str",
                    "bool",
                    "airflow.models.TaskInstance"
                ],
                "old_password": [
                    "str",
                    "bool"
                ]
            }
        },
        "reencrypt_entry": {
            "name": "reencrypt_entry",
            "location": 43,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "session": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "Mapping"
                ],
                "entry": [
                    "str",
                    "pynmrstar.Entry",
                    "annofabapi.models.TaskPhase",
                    "int"
                ],
                "old_password": [
                    "str"
                ],
                "new_password": [
                    "str",
                    "Set[str]",
                    "Dict[str,str]",
                    "Optional[Callable]",
                    "Callable",
                    "None"
                ]
            }
        },
        "reencrypt_link": {
            "name": "reencrypt_link",
            "location": 52,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Union[str, bytes]",
                "Dict[str, str]"
            ],
            "arguments": {
                "session": [
                    "str"
                ],
                "link": [
                    "str",
                    "bool"
                ],
                "old_password": [
                    "str",
                    "bytes",
                    "Union[str,List]",
                    "List"
                ],
                "new_password": [
                    "str",
                    "Set[str]",
                    "Dict[str,str]",
                    "bool",
                    "List[str]",
                    "Optional[Callable]",
                    "Callable",
                    "None"
                ]
            }
        },
        "reencrypt_entries": {
            "name": "reencrypt_entries",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "transfer.models.SnippetID"
                ],
                "user_id": [
                    "str",
                    "int"
                ],
                "old_password": [
                    "str",
                    "Iterable[str]"
                ],
                "new_password": [
                    "str",
                    "bytes",
                    "Tuple[str]"
                ]
            }
        },
        "reencrypt_links": {
            "name": "reencrypt_links",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "transfer.models.MatchCommentID"
                ],
                "user_id": [
                    "str",
                    "int",
                    "transfer.models.MatchCommentID"
                ],
                "old_password": [
                    "str",
                    "Iterable[str]"
                ],
                "new_password": [
                    "str",
                    "Dict",
                    "Dict[str,str]",
                    "Tuple[str]"
                ]
            }
        },
        "reencrypt_keys_db": {
            "name": "reencrypt_keys_db",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "int",
                    "transfer.models.ListID",
                    "transfer.models.MatchCommentID",
                    "transfer.models.SnippetID"
                ],
                "user_id": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "old_password": [
                    "str",
                    "float",
                    "int",
                    "bool"
                ],
                "new_password": [
                    "str"
                ]
            }
        },
        "change_password_in_user_table": {
            "name": "change_password_in_user_table",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "int"
                ],
                "user_id": [
                    "str",
                    "int"
                ],
                "new_password": [
                    "str"
                ]
            }
        },
        "change_password": {
            "name": "change_password",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "str",
                    "models.evenUserEventData",
                    "transfer.models.SiteID"
                ],
                "user_id": [
                    "str"
                ],
                "old_password": [
                    "str",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "new_password": [
                    "str"
                ]
            }
        }
    },
    "passzero-master/passzero/config.py": {
        "read_build_name": {
            "name": "read_build_name",
            "location": 5,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "passzero-master/passzero/crypto_utils.py": {
        "byte_to_hex_legacy": {
            "name": "byte_to_hex_legacy",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "str",
                    "AnyStr"
                ]
            }
        },
        "hex_to_byte_legacy": {
            "name": "hex_to_byte_legacy",
            "location": 34,
            "return": [
                "bytes"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "Iterable[int]"
                ]
            }
        },
        "pad_to_length": {
            "name": "pad_to_length",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes"
                ],
                "length": [
                    "int",
                    "float",
                    "slice",
                    "bytes",
                    "MutableMapping[Any,Any]",
                    "Union[int,slice]"
                ]
            }
        },
        "pad_key_legacy": {
            "name": "pad_key_legacy",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "MutableMapping[Any, Any]"
                ]
            }
        },
        "encrypt_password_legacy": {
            "name": "encrypt_password_legacy",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "padded_key": [
                    "str"
                ],
                "password": [
                    "str",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "encrypt_field_v1": {
            "name": "encrypt_field_v1",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Optional[str]"
                ],
                "salt": [
                    "str",
                    "bytes"
                ],
                "field": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "encrypt_field_v2": {
            "name": "encrypt_field_v2",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "extended_key": [
                    "bytes",
                    "int"
                ],
                "message": [
                    "str",
                    "bytes",
                    "Union[str,bytes]",
                    "bool"
                ],
                "iv": [
                    "bytes"
                ]
            }
        },
        "encrypt_messages": {
            "name": "encrypt_messages",
            "location": 123,
            "return": [
                "list"
            ],
            "arguments": {
                "extended_key": [
                    "bytes",
                    "int"
                ],
                "iv": [
                    "bytes",
                    "str",
                    "int"
                ],
                "messages": [
                    "bytes",
                    "str"
                ]
            }
        },
        "decrypt_messages": {
            "name": "decrypt_messages",
            "location": 133,
            "return": [
                "list"
            ],
            "arguments": {
                "extended_key": [
                    "bytes",
                    "int"
                ],
                "iv": [
                    "bytes",
                    "str",
                    "int"
                ],
                "messages": [
                    "str",
                    "bytes"
                ]
            }
        },
        "random_bytes": {
            "name": "random_bytes",
            "location": 150,
            "return": [
                "Dict[str, Dict[str, int]]",
                "float",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "length": [
                    "int",
                    "str",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ]
            }
        },
        "random_string": {
            "name": "random_string",
            "location": 157,
            "return": [
                "float",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "length": [
                    "str",
                    "List",
                    "List[tuple[Union[int,int]]]",
                    "int",
                    "List[Tuple[int,int]]",
                    "bool"
                ]
            }
        },
        "get_kdf_salt": {
            "name": "get_kdf_salt",
            "location": 162,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "num_bytes": [
                    "int",
                    "Union[int,float]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "extend_key": {
            "name": "extend_key",
            "location": 169,
            "return": [
                "str",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "salt": [
                    "bytes",
                    "str"
                ],
                "key_length": [
                    "int",
                    "bytes",
                    "str",
                    "Union[int,slice]"
                ]
            }
        },
        "get_iv": {
            "name": "get_iv",
            "location": 181,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "decrypt_field_v2": {
            "name": "decrypt_field_v2",
            "location": 186,
            "return": [
                "str",
                "float",
                "Dict[str,list[Any]]",
                "int",
                "Dict[str,str]",
                "Dict[tuple[Union[str,str]],str]",
                "Tuple",
                "Tuple[str,str,str]",
                "Tuple[int]",
                "Sequence"
            ],
            "arguments": {
                "extended_key": [
                    "bytes",
                    "int"
                ],
                "hex_ciphertext": [
                    "str",
                    "bytes",
                    "Type"
                ],
                "iv": [
                    "bytes",
                    "str"
                ]
            }
        },
        "decrypt_field_v1": {
            "name": "decrypt_field_v1",
            "location": 206,
            "return": [
                "str",
                "int",
                "float",
                "Tuple",
                "Tuple[str,str,str]",
                "Tuple[int]",
                "Sequence"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes"
                ],
                "salt": [
                    "str",
                    "bytes"
                ],
                "hex_ciphertext": [
                    "str",
                    "Type",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "decrypt_password_legacy": {
            "name": "decrypt_password_legacy",
            "location": 228,
            "return": [
                "str",
                "Type",
                "List[str]",
                "Set[str]",
                "Dict",
                "int"
            ],
            "arguments": {
                "padded_key": [
                    "str",
                    "bytes"
                ],
                "hex_ciphertext": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "get_salt": {
            "name": "get_salt",
            "location": 245,
            "return": [
                "bytes"
            ],
            "arguments": {
                "size": [
                    "int"
                ]
            }
        },
        "random_hex": {
            "name": "random_hex",
            "location": 257,
            "return": [
                "str"
            ],
            "arguments": {
                "size": [
                    "int",
                    "str"
                ]
            }
        },
        "get_hashed_password": {
            "name": "get_hashed_password",
            "location": 263,
            "return": [
                "str",
                "tuple",
                "Awaitable"
            ],
            "arguments": {
                "password": [
                    "str",
                    "List[int]",
                    "Callable",
                    "Mapping"
                ],
                "salt": [
                    "bytes",
                    "int",
                    "str",
                    "bool"
                ],
                "hash_algo": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "float",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "__get_hashed_password_argon2": {
            "name": "__get_hashed_password_argon2",
            "location": 281,
            "return": [
                "str",
                "Dict",
                "bytes"
            ],
            "arguments": {
                "password": [
                    "str",
                    "List[str]"
                ],
                "salt": [
                    "bytes",
                    "str"
                ]
            }
        },
        "__get_hashed_password_sha512": {
            "name": "__get_hashed_password_sha512",
            "location": 297,
            "return": [
                "bytes"
            ],
            "arguments": {
                "password": [
                    "str",
                    "List[str]"
                ],
                "salt": [
                    "bytes",
                    "str",
                    "Union[str,bytes]"
                ]
            }
        },
        "constant_time_compare_passwords": {
            "name": "constant_time_compare_passwords",
            "location": 311,
            "return": [
                "bool"
            ],
            "arguments": {
                "password_hash": [
                    "str",
                    "Optional[str]"
                ],
                "password": [
                    "str",
                    "bytes",
                    "Union[str,bytes]"
                ],
                "salt": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[bytes]",
                    "None"
                ],
                "hash_algo": [
                    "int",
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None",
                    "Optional[bool]"
                ]
            }
        }
    },
    "passzero-master/passzero/email.py": {
        "send_email_sendgrid": {
            "name": "send_email_sendgrid",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "to_email": [
                    "str",
                    "Callable",
                    "int",
                    "os.stat_result"
                ],
                "subject": [
                    "str",
                    "bytes",
                    "IO[Any]",
                    "IO"
                ],
                "msg": [
                    "str",
                    "bytes",
                    "IO[Any]",
                    "IO"
                ]
            }
        },
        "send_email": {
            "name": "send_email",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "email": [
                    "str"
                ],
                "subject": [
                    "str"
                ],
                "msg": [
                    "str"
                ]
            }
        },
        "send_recovery_email": {
            "name": "send_recovery_email",
            "location": 50,
            "return": [
                "str",
                "int",
                "bool",
                "IO"
            ],
            "arguments": {
                "email": [
                    "str"
                ],
                "token": [
                    "str"
                ]
            }
        },
        "send_confirmation_email": {
            "name": "send_confirmation_email",
            "location": 59,
            "return": [
                "bool",
                "Dict[str, Tuple[str, str]]",
                "Optional[str]"
            ],
            "arguments": {
                "email": [
                    "str"
                ],
                "token": [
                    "str"
                ]
            }
        }
    },
    "passzero-master/passzero/export_utils.py": {
        "export_decrypted_entries": {
            "name": "export_decrypted_entries",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "db_session": [
                    "str",
                    "bool",
                    "List[dict]",
                    "int"
                ],
                "user_id": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "List[Dict[str,Any]]",
                    "None",
                    "int",
                    "List[dict[str,Any]]"
                ],
                "master_password": [
                    "str",
                    "int",
                    "IO",
                    "None",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "passzero-master/passzero/forms.py": {},
    "passzero-master/passzero/limits.py": {},
    "passzero-master/passzero/main_routes.py": {
        "auth_or_redirect_login": {
            "name": "auth_or_redirect_login",
            "location": 18,
            "return": [
                "Callable"
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "str",
                    "List",
                    "int",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "auth_or_abort": {
            "name": "auth_or_abort",
            "location": 31,
            "return": [
                "Callable"
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "bool",
                    "List[str]",
                    "float",
                    "None",
                    "Callable[...,T]",
                    "Optional[Callable]"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 45,
            "return": [
                "int",
                "Dict[str, Any]",
                "bool",
                "Optional[bool]",
                "Dict[str, object]",
                "jumeaux.models.Res2ResAddOnPayload"
            ],
            "arguments": {}
        },
        "post_login": {
            "name": "post_login",
            "location": 54,
            "return": [
                "int",
                "models.Dashboard",
                "Dict[int, dict]"
            ],
            "arguments": {}
        },
        "login": {
            "name": "login",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "logout": {
            "name": "logout",
            "location": 65,
            "return": [
                "int",
                "Dict[str, Any]",
                "bool",
                "Optional[bool]",
                "Dict[str, object]",
                "jumeaux.models.Res2ResAddOnPayload"
            ],
            "arguments": {}
        },
        "post_account_delete": {
            "name": "post_account_delete",
            "location": 76,
            "return": [
                "int",
                "dict",
                "models.Dashboard"
            ],
            "arguments": {}
        },
        "post_signup": {
            "name": "post_signup",
            "location": 82,
            "return": [
                "int",
                "models.Dashboard",
                "Dict[int, dict]"
            ],
            "arguments": {
                "email": [
                    "str",
                    "Type",
                    "Callable"
                ]
            }
        },
        "post_delete": {
            "name": "post_delete",
            "location": 90,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "account_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "new_entry_view": {
            "name": "new_entry_view",
            "location": 97,
            "return": [
                "str",
                "salon.models.Stylist",
                "Dict[str, str]",
                "T",
                "List[mtg_ssm.scryfall.models.ScryCard]",
                "bytes"
            ],
            "arguments": {}
        },
        "post_edit": {
            "name": "post_edit",
            "location": 109,
            "return": [
                "int",
                "models.Dashboard",
                "Dict[int, dict]"
            ],
            "arguments": {
                "account_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "post_create": {
            "name": "post_create",
            "location": 116,
            "return": [
                "int"
            ],
            "arguments": {
                "account_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "view_entries": {
            "name": "view_entries",
            "location": 123,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "view_links": {
            "name": "view_links",
            "location": 131,
            "return": [
                "str",
                "salon.models.Stylist",
                "tuple",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "new_link_view": {
            "name": "new_link_view",
            "location": 137,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "edit_link": {
            "name": "edit_link",
            "location": 143,
            "return": [
                "int",
                "Dict[str, str]",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "link_id": [
                    "int",
                    "str"
                ]
            }
        },
        "view_docs": {
            "name": "view_docs",
            "location": 160,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "new_doc_view": {
            "name": "new_doc_view",
            "location": 166,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {}
        },
        "edit_doc": {
            "name": "edit_doc",
            "location": 173,
            "return": [
                "int",
                "Dict[str, Any]",
                "bool",
                "Optional[bool]",
                "Dict[str, object]",
                "jumeaux.models.Res2ResAddOnPayload"
            ],
            "arguments": {
                "document_id": [
                    "int",
                    "None",
                    "Optional[int]",
                    "float",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "view_decrypted_doc": {
            "name": "view_decrypted_doc",
            "location": 186,
            "return": [
                "int",
                "Dict[str, Any]",
                "bool",
                "Optional[bool]",
                "Dict[str, object]",
                "jumeaux.models.Res2ResAddOnPayload"
            ],
            "arguments": {
                "document_id": [
                    "int",
                    "Optional[int]",
                    "None",
                    "str",
                    "float",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "signup": {
            "name": "signup",
            "location": 205,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "post_confirm_signup": {
            "name": "post_confirm_signup",
            "location": 211,
            "return": [
                "int",
                "models.Dashboard",
                "Dict[int, dict]"
            ],
            "arguments": {}
        },
        "confirm_signup": {
            "name": "confirm_signup",
            "location": 217,
            "return": [
                "jumeaux.models.Res2DictAddOnPayload",
                "Dict[str, Any]",
                "bool",
                "flask.Response",
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "export_entries": {
            "name": "export_entries",
            "location": 243,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {}
        },
        "done_export": {
            "name": "done_export",
            "location": 258,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Union[str, Dict]"
            ],
            "arguments": {}
        },
        "edit_entry": {
            "name": "edit_entry",
            "location": 266,
            "return": [
                "int",
                "Dict[str, Any]",
                "bool",
                "Optional[bool]",
                "Dict[str, object]",
                "jumeaux.models.Res2ResAddOnPayload"
            ],
            "arguments": {
                "entry_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "List[int]",
                    "None"
                ]
            }
        },
        "password_strength": {
            "name": "password_strength",
            "location": 290,
            "return": [
                "dict",
                "str",
                "int",
                "flask.Flask",
                "models.characters.chassis.Chassis",
                "Exception"
            ],
            "arguments": {}
        },
        "two_factor": {
            "name": "two_factor",
            "location": 299,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "advanced": {
            "name": "advanced",
            "location": 315,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "profile": {
            "name": "profile",
            "location": 321,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "recover_password": {
            "name": "recover_password",
            "location": 335,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {}
        },
        "recover_account_confirm": {
            "name": "recover_account_confirm",
            "location": 340,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "about": {
            "name": "about",
            "location": 362,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "get_version": {
            "name": "get_version",
            "location": 367,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "auth_or_redirect_login.inner": {
            "name": "inner",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "auth_or_abort.inner": {
            "name": "inner",
            "location": 36,
            "return": [
                "str",
                "models.User",
                "tartare.core.models.Job",
                "Iterable[str]"
            ],
            "arguments": {}
        }
    },
    "passzero-master/passzero/utils.py": {
        "base64_encode": {
            "name": "base64_encode",
            "location": 4,
            "return": [
                "bytes"
            ],
            "arguments": {
                "bin_data": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        }
    },
    "passzero-master/passzero/__init__.py": {},
    "passzero-master/passzero/api/api_token.py": {
        "ApiTokenResource.create_token_and_add_to_database": {
            "name": "create_token_and_add_to_database",
            "location": 30,
            "return": [
                "int",
                "str",
                "Set[int]",
                "Dict",
                "zerver.models.UserProfile",
                "float"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str"
                ]
            }
        },
        "ApiTokenResource.get": {
            "name": "get",
            "location": 53,
            "return": [
                "Dict[Text,]",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiTokenResource.maybe_create_token_and_add_to_database": {
            "name": "maybe_create_token_and_add_to_database",
            "location": 78,
            "return": [
                "int",
                "bool",
                "str",
                "List"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int"
                ]
            }
        },
        "ApiTokenResource.post": {
            "name": "post",
            "location": 95,
            "return": [
                "Dict[Text,]",
                "str",
                "Callable[,T]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiTokenResource.delete": {
            "name": "delete",
            "location": 146,
            "return": [
                "str",
                "Iterable[str]",
                "bool",
                "Callable",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "passzero-master/passzero/api/app_error_codes.py": {},
    "passzero-master/passzero/api/entry.py": {
        "ApiEntry.delete": {
            "name": "delete",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "entry_id": [
                    "int",
                    "str",
                    "Type[models.taxonomies.T]",
                    "Type"
                ]
            }
        },
        "ApiEntry.patch": {
            "name": "patch",
            "location": 63,
            "return": [
                "Iterable[str]",
                "str",
                "salon.models.Stylist",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "entry_id": [
                    "int",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "ApiEntry.post": {
            "name": "post",
            "location": 135,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "entry_id": [
                    "int",
                    "None",
                    "Optional[int]",
                    "transfer.models.ArticleID"
                ]
            }
        }
    },
    "passzero-master/passzero/api/entry_list.py": {
        "jsonify_entries": {
            "name": "jsonify_entries",
            "location": 15,
            "return": [
                "list"
            ],
            "arguments": {
                "enc_entries": [
                    "Dict",
                    "str",
                    "T"
                ]
            }
        },
        "ApiEntryList.post": {
            "name": "post",
            "location": 27,
            "return": [
                "Dict",
                "Dict[Text,]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiEntryList.delete": {
            "name": "delete",
            "location": 90,
            "return": [
                "bool",
                "str",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiEntryList.get": {
            "name": "get",
            "location": 126,
            "return": [
                "str",
                "bool",
                "Iterable[str]",
                "int",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiEntryList.patch": {
            "name": "patch",
            "location": 173,
            "return": [
                "str",
                "Dict[Text,]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "passzero-master/passzero/api/jwt_auth.py": {},
    "passzero-master/passzero/api/link.py": {
        "ApiLink.delete": {
            "name": "delete",
            "location": 19,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "link_id": [
                    "str",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "ApiLink.patch": {
            "name": "patch",
            "location": 60,
            "return": [
                "str",
                "Iterable[str]",
                "salon.models.Stylist",
                "int"
            ],
            "arguments": {
                "self": [],
                "link_id": [
                    "int"
                ]
            }
        },
        "ApiLink.post": {
            "name": "post",
            "location": 122,
            "return": [
                "int",
                "str",
                "dict",
                "Optional[\"Cell\"]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "link_id": [
                    "int",
                    "bytes",
                    "transfer.models.ArticleID",
                    "grouper.models.base.session.Session"
                ]
            }
        }
    },
    "passzero-master/passzero/api/link_list.py": {
        "jsonify_links": {
            "name": "jsonify_links",
            "location": 15,
            "return": [
                "list"
            ],
            "arguments": {
                "enc_links": [
                    "Dict[str,tonga.models.structs.positioning.BasePositioning]",
                    "Dict[int,list[Any]]",
                    "int",
                    "Link",
                    "games.models.Game",
                    "Dict[int,List[Any]]"
                ]
            }
        },
        "ApiLinkList.post": {
            "name": "post",
            "location": 27,
            "return": [
                "Dict[Text,]",
                "contenusers.User",
                "zerver.models.UserProfile",
                "daylighdb.models.User",
                "models.User"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiLinkList.delete": {
            "name": "delete",
            "location": 81,
            "return": [
                "bool",
                "str",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiLinkList.get": {
            "name": "get",
            "location": 116,
            "return": [
                "str",
                "zerver.models.Recipient",
                "limbic.emotion.models.LexiconLimbicModel"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecryptedApiLink.post": {
            "name": "post",
            "location": 156,
            "return": [
                "Dict[str,Any]",
                "List"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "passzero-master/passzero/api/services.py": {
        "ApiLink.get": {
            "name": "get",
            "location": 11,
            "return": [
                "Dict[Text,list]",
                "str",
                "bool",
                "Optional[str]",
                "FrozenSet[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "passzero-master/passzero/api/user.py": {
        "username": {
            "name": "username",
            "location": 13,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "min_len": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "max_len": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "username.validate": {
            "name": "validate",
            "location": 18,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "CurrentUser.get": {
            "name": "get",
            "location": 38,
            "return": [
                "zerver.models.UserProfile",
                "zerver.models.Realm",
                "int",
                "Callable[[], T]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrentUser.patch": {
            "name": "patch",
            "location": 72,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "passzero-master/passzero/api/__init__.py": {},
    "passzero-master/passzero/models/api_stats.py": {},
    "passzero-master/passzero/models/api_token.py": {
        "ApiToken.is_expired": {
            "name": "is_expired",
            "location": 20,
            "return": [
                "bool",
                "datetime.datetime",
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "passzero-master/passzero/models/auth_tokens.py": {
        "AuthToken.random_token": {
            "name": "random_token",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthToken.is_expired": {
            "name": "is_expired",
            "location": 22,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthToken.__repr__": {
            "name": "__repr__",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "passzero-master/passzero/models/documents.py": {
        "EncryptedDocument.extend_key": {
            "name": "extend_key",
            "location": 28,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "master_key": [
                    "bytes",
                    "Union[str,bytes]",
                    "str"
                ]
            }
        },
        "EncryptedDocument.to_json": {
            "name": "to_json",
            "location": 40,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncryptedDocument.decrypt": {
            "name": "decrypt",
            "location": 53,
            "return": [
                "DecryptedDocument"
            ],
            "arguments": {
                "self": [],
                "master_key": [
                    "bytes",
                    "str"
                ]
            }
        },
        "DecryptedDocument.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ],
                "mimetype": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "None",
                    "Mapping",
                    "Optional[str]",
                    "Mapping[str,Any]"
                ],
                "contents": [
                    "str",
                    "int"
                ]
            }
        },
        "DecryptedDocument.extend_key": {
            "name": "extend_key",
            "location": 94,
            "return": [
                "Tuple[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "master_key": [
                    "bytes"
                ]
            }
        },
        "DecryptedDocument.encrypt": {
            "name": "encrypt",
            "location": 111,
            "return": [
                "EncryptedDocument"
            ],
            "arguments": {
                "self": [],
                "extended_key": [
                    "bytes"
                ]
            }
        }
    },
    "passzero-master/passzero/models/encryption_keys.py": {
        "EncryptionKeys.to_json": {
            "name": "to_json",
            "location": 61,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncryptionKeys.derive_symmetric_key": {
            "name": "derive_symmetric_key",
            "location": 76,
            "return": [
                "str",
                "Callable",
                "dict",
                "cmk.utils.type_defs.EventRule",
                "Dict[str, Any]",
                "Callable[[Dict], None]"
            ],
            "arguments": {
                "self": [],
                "master_key": [
                    "bytes",
                    "Counter[str]",
                    "IO[bytes]",
                    "cmk.utils.type_defs.AgentRawData",
                    "int"
                ],
                "kdf_salt": [
                    "bytes"
                ]
            }
        },
        "EncryptionKeys.encrypt": {
            "name": "encrypt",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "master_key": [
                    "bytes",
                    "Tuple[Literal,Literal]",
                    "Tuple[Union[Literal,Literal]]"
                ],
                "dec_encryption_keys": [
                    "Dict",
                    "bytes",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ]
            }
        },
        "EncryptionKeys.decrypt": {
            "name": "decrypt",
            "location": 109,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "master_key": [
                    "bytes"
                ]
            }
        }
    },
    "passzero-master/passzero/models/entries.py": {
        "Entry.__repr__": {
            "name": "__repr__",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entry.to_json": {
            "name": "to_json",
            "location": 56,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entry.decrypt_with_entry_key": {
            "name": "decrypt_with_entry_key",
            "location": 76,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "entry_key": [
                    "List[dict]",
                    "int",
                    "str",
                    "bytes",
                    "Optional[bytes]",
                    "None"
                ]
            }
        },
        "Entry.decrypt": {
            "name": "decrypt",
            "location": 79,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "master_key": [
                    "bytes",
                    "int",
                    "Counter",
                    "Counter[str]",
                    "raiden.utils.PrivateKey"
                ]
            }
        },
        "Entry.encrypt": {
            "name": "encrypt",
            "location": 107,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "master_key": [
                    "bool",
                    "bytes",
                    "Dict"
                ],
                "dec_entry": [
                    "str",
                    "bytes",
                    "List"
                ]
            }
        },
        "Entry_v2.decrypt_with_entry_key": {
            "name": "decrypt_with_entry_key",
            "location": 153,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "entry_key": [
                    "bytes",
                    "str"
                ]
            }
        },
        "Entry_v2.decrypt": {
            "name": "decrypt",
            "location": 178,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "master_key": [
                    "bytes",
                    "str",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "Entry_v2.encrypt": {
            "name": "encrypt",
            "location": 184,
            "return": [
                "str",
                "bytes",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "master_key": [
                    "bytes",
                    "str",
                    "IO[str]",
                    "IO"
                ],
                "dec_entry": [
                    "dict",
                    "list",
                    "str"
                ]
            }
        },
        "Entry_v3.encrypt": {
            "name": "encrypt",
            "location": 232,
            "return": [
                "str",
                "List[int]",
                "Type",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "master_key": [
                    "bytes",
                    "str"
                ],
                "dec_entry": [
                    "str",
                    "MutableMapping[str, str]",
                    "Optional[Dict]"
                ]
            }
        },
        "Entry_v3.decrypt_with_entry_key": {
            "name": "decrypt_with_entry_key",
            "location": 266,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "entry_key": [
                    "bytes",
                    "str"
                ]
            }
        },
        "Entry_v3.decrypt": {
            "name": "decrypt",
            "location": 286,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "master_key": [
                    "bytes",
                    "str"
                ]
            }
        },
        "Entry_v4.to_json": {
            "name": "to_json",
            "location": 320,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entry_v4.decrypt_with_entry_key": {
            "name": "decrypt_with_entry_key",
            "location": 328,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "entry_key": [
                    "bytes",
                    "str"
                ]
            }
        },
        "Entry_v4.decrypt": {
            "name": "decrypt",
            "location": 349,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "master_key": [
                    "bytes",
                    "str"
                ]
            }
        },
        "Entry_v4.encrypt": {
            "name": "encrypt",
            "location": 363,
            "return": [
                "str",
                "int",
                "List[int]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "master_key": [
                    "bytes",
                    "str"
                ],
                "dec_entry": [
                    "str"
                ]
            }
        },
        "Entry_v5.to_json": {
            "name": "to_json",
            "location": 438,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entry_v5.__get_entry_key": {
            "name": "__get_entry_key",
            "location": 457,
            "return": [
                "int",
                "cmk.utils.type_defs.UserId",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": [],
                "master_key": [
                    "str",
                    "int",
                    "IO[bytes]",
                    "bytes",
                    "Optional[str]"
                ],
                "kdf_salt": [
                    "bytes",
                    "int"
                ]
            }
        },
        "Entry_v5.decrypt_with_entry_key": {
            "name": "decrypt_with_entry_key",
            "location": 469,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "entry_key": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "Entry_v5.decrypt": {
            "name": "decrypt",
            "location": 485,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "master_key": [
                    "bytes",
                    "List[str]",
                    "Union[str,bytes]",
                    "str"
                ],
                "return_symmetric_key": [
                    "bool",
                    "bytes",
                    "Iterable[Any]",
                    "str"
                ]
            }
        },
        "Entry_v5.encrypt": {
            "name": "encrypt",
            "location": 499,
            "return": [
                "str",
                "frozenset",
                "List[int]",
                "Pattern",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "master_key": [
                    "bytes",
                    "raiden.utils.PrivateKey"
                ],
                "dec_entry": [
                    "bytes"
                ]
            }
        }
    },
    "passzero-master/passzero/models/links.py": {
        "_get_key": {
            "name": "_get_key",
            "location": 18,
            "return": [
                "str",
                "dict",
                "Callable[[None, None], bool]",
                "bool"
            ],
            "arguments": {
                "master_key": [
                    "str",
                    "bytes",
                    "int",
                    "IO[bytes]",
                    "Counter[str]"
                ],
                "kdf_salt": [
                    "bytes",
                    "str"
                ]
            }
        },
        "DecryptedLink.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "link": [
                    "Optional[str]",
                    "str",
                    "int",
                    "List[str]",
                    "None",
                    "bool"
                ],
                "id": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "user_id": [
                    "int",
                    "None",
                    "str",
                    "ImportError",
                    "Dict[str,Dict]",
                    "Optional[int]",
                    "Dict[str,dict]"
                ],
                "version": [
                    "Optional[str]",
                    "None",
                    "int",
                    "List[str]",
                    "str",
                    "bool"
                ],
                "symmetric_key": [
                    "str",
                    "None",
                    "Optional[str]",
                    "List[str]",
                    "List[Any]",
                    "Mapping",
                    "Optional[List[Any]]",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "List"
                ]
            }
        },
        "DecryptedLink.to_json": {
            "name": "to_json",
            "location": 46,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Link.to_json": {
            "name": "to_json",
            "location": 82,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Link.decrypt_symmetric": {
            "name": "decrypt_symmetric",
            "location": 96,
            "return": [
                "DecryptedLink"
            ],
            "arguments": {
                "self": [],
                "symmetric_key": [
                    "bytes",
                    "int"
                ]
            }
        },
        "Link.decrypt": {
            "name": "decrypt",
            "location": 115,
            "return": [
                "DecryptedLink"
            ],
            "arguments": {
                "self": [],
                "master_key": [
                    "bytes",
                    "str"
                ]
            }
        },
        "Link.encrypt": {
            "name": "encrypt",
            "location": 124,
            "return": [
                "str",
                "List[int]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "master_key": [
                    "bytes",
                    "str",
                    "float",
                    "List"
                ],
                "dec_link": [
                    "str",
                    "Optional[bool]"
                ]
            }
        }
    },
    "passzero-master/passzero/models/services.py": {
        "Service.to_json": {
            "name": "to_json",
            "location": 10,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "passzero-master/passzero/models/shared.py": {},
    "passzero-master/passzero/models/user.py": {
        "User.to_json": {
            "name": "to_json",
            "location": 39,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.authenticate": {
            "name": "authenticate",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "form_password": [
                    "str",
                    "datetime.datetime"
                ]
            }
        },
        "User.change_password": {
            "name": "change_password",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_password": [
                    "str"
                ]
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "passzero-master/passzero/models/__init__.py": {},
    "passzero-master/scripts/add_build_name.py": {
        "update_config_file": {
            "name": "update_config_file",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "config_file_path": [
                    "str",
                    "Optional[str]"
                ],
                "build_name": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_build_name": {
            "name": "get_build_name",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "animals": [
                    "bool"
                ],
                "adj": [
                    "bool"
                ]
            }
        },
        "read_list": {
            "name": "read_list",
            "location": 24,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        }
    },
    "passzero-master/scripts/api_doc_builder/api_docs_from_swagger.py": {
        "parse_param": {
            "name": "parse_param",
            "location": 59,
            "return": [
                "Dict[(str, Union[(bool, str)])]"
            ],
            "arguments": {
                "arg": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "parse_rst_docstring_response": {
            "name": "parse_rst_docstring_response",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "str",
                    "Dict",
                    "int",
                    "bool"
                ],
                "parsed_doc": [
                    "str",
                    "Dict",
                    "List[List[str]]",
                    "List[list[str]]"
                ],
                "tag": [
                    "str",
                    "None",
                    "Dict",
                    "List[List[str]]",
                    "List[list[str]]"
                ]
            }
        },
        "parse_docstring_rst": {
            "name": "parse_docstring_rst",
            "location": 95,
            "return": [
                "ParsedDoc"
            ],
            "arguments": {
                "docstring": [
                    "int",
                    "str",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "docutils.nodes.Node"
                ],
                "http_method": [
                    "str",
                    "float",
                    "int"
                ],
                "route": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "docs_from_swagger_file": {
            "name": "docs_from_swagger_file",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "bytes",
                    "Type[Any]",
                    "Dict[str,Any]"
                ]
            }
        },
        "ParsedDoc.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedDoc.add_parameter": {
            "name": "add_parameter",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Set[str]"
                ],
                "type": [
                    "str",
                    "List[str]",
                    "Set[str]"
                ],
                "is_required": [
                    "str",
                    "List[str]",
                    "Set[str]"
                ],
                "subtypes": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "ParsedDoc.add_response": {
            "name": "add_response",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Mapping[str,str]",
                    "Mapping"
                ],
                "val": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Mapping[str,str]",
                    "Mapping"
                ],
                "tag": [
                    "str",
                    "None",
                    "bool",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "ParsedDoc.add_status_code": {
            "name": "add_status_code",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int"
                ],
                "description": [
                    "int"
                ]
            }
        }
    },
    "passzero-master/scripts/api_doc_builder/compare_docs.py": {
        "compare": {
            "name": "compare",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "bs_prettify": {
            "name": "bs_prettify",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "passzero-master/scripts/api_doc_builder/create_api_docs.py": {
        "parse_child_function": {
            "name": "parse_child_function",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "child": [
                    "int",
                    "str"
                ],
                "api_method_annotation": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[float]",
                    "float"
                ],
                "is_api_method": [
                    "bool",
                    "Dict[str,Any]"
                ],
                "api_doc_annotation": [
                    "None",
                    "Optional[str]",
                    "bool",
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "is_parametrized_component": {
            "name": "is_parametrized_component",
            "location": 277,
            "return": [
                "bool"
            ],
            "arguments": {
                "item": [
                    "str",
                    "int",
                    "bs4.elemenTag"
                ]
            }
        },
        "generate_docs_for_function": {
            "name": "generate_docs_for_function",
            "location": 282,
            "return": [
                "bs4.BeautifulSoup"
            ],
            "arguments": {
                "fn": [
                    "str"
                ],
                "expected_route_prefix": [
                    "str",
                    "int"
                ]
            }
        },
        "get_internal_anchor_for_function": {
            "name": "get_internal_anchor_for_function",
            "location": 364,
            "return": [
                "str"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "Dict[str,str]"
                ],
                "expected_route_prefix": [
                    "str",
                    "Dict[str,str]",
                    "int",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "filename_from_function": {
            "name": "filename_from_function",
            "location": 378,
            "return": [
                "str"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "int"
                ],
                "expected_route_prefix": [
                    "str",
                    "int"
                ]
            }
        },
        "generate_method_table": {
            "name": "generate_method_table",
            "location": 392,
            "return": [
                "bs4.BeautifulSoup"
            ],
            "arguments": {
                "functions": [
                    "str",
                    "List[str]",
                    "Callable[[Any,Any],Any]",
                    "Optional[str]"
                ],
                "expected_route_prefix": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "write_method_table": {
            "name": "write_method_table",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "method_table_soup": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]",
                    "Optional[int]"
                ],
                "output_folder": [
                    "str"
                ]
            }
        },
        "write_function_docs_html": {
            "name": "write_function_docs_html",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "bool",
                    "int"
                ],
                "expected_route_prefix": [
                    "str",
                    "bool",
                    "int"
                ],
                "output_folder": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "write_function_docs_json": {
            "name": "write_function_docs_json",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "functions": [
                    "str",
                    "Iterable[str]",
                    "List[str]",
                    "bool"
                ],
                "expected_route_prefix": [
                    "str",
                    "Iterable[str]",
                    "bool",
                    "List[str]"
                ],
                "output_fname": [
                    "str",
                    "Dict[str,object]",
                    "Optional[Dict]"
                ]
            }
        },
        "Function.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "Function.add_argument": {
            "name": "add_argument",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg_name": [
                    "str",
                    "List[str]",
                    "int",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "arg_type": [
                    "str",
                    "List[str]",
                    "int",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "is_required": [
                    "str",
                    "Optional[Union[int,float]]",
                    "int",
                    "Optional[bool]",
                    "float",
                    "Optional[Type]",
                    "None",
                    "Optional[str]",
                    "Type"
                ]
            }
        },
        "Function.set_docstring": {
            "name": "set_docstring",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "docstring": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "bool"
                ]
            }
        },
        "Function._parse_param": {
            "name": "_parse_param",
            "location": 88,
            "return": [
                "Dict[(str, Union[(bool, str)])]"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Function._parse_docstring_rst": {
            "name": "_parse_docstring_rst",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "docstring": [
                    "str"
                ]
            }
        },
        "ApiParser.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ApiParser.parse_tree": {
            "name": "parse_tree",
            "location": 219,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str",
                    "List[str]"
                ],
                "api_method_annotation": [
                    "str",
                    "List[str]",
                    "float",
                    "Callable[...,None]"
                ]
            }
        },
        "ApiParser.parse_tree_class": {
            "name": "parse_tree_class",
            "location": 228,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str",
                    "Protocol"
                ],
                "base_class": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "List[PydanticModelField]"
                ],
                "api_doc_annotation": [
                    "Text",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Dict"
                ]
            }
        },
        "ApiParser.parse_tree_functions": {
            "name": "parse_tree_functions",
            "location": 256,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "Callable[[T],T]",
                    "Iterable[T]",
                    "Callable[T,T]",
                    "int"
                ],
                "api_method_annotation": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "passzero-master/scripts/api_doc_builder/legacy_grammar.py": {
        "parse_docstring": {
            "name": "parse_docstring",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "docstring": [
                    "str"
                ]
            }
        }
    },
    "passzero-master/scripts/api_doc_builder/my_grammar.py": {},
    "passzero-master/scripts/api_doc_builder/parse_source.py": {
        "parse_child_function": {
            "name": "parse_child_function",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "child": [],
                "api_method_annotation": [
                    "T",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "parse_tree": {
            "name": "parse_tree",
            "location": 217,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "root": [
                    "Pattern",
                    "int",
                    "Dict",
                    "Callable[[T],T]",
                    "Callable[T,T]"
                ],
                "api_method_annotation": [
                    "float",
                    "str"
                ]
            }
        },
        "Function.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "Function.set_docstring": {
            "name": "set_docstring",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "docstring": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "bool"
                ]
            }
        },
        "Function._parse_docstring": {
            "name": "_parse_docstring",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "docstring": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "passzero-master/scripts/api_doc_builder/rst_utils.py": {
        "parse_rst": {
            "name": "parse_rst",
            "location": 6,
            "return": [
                "str",
                "int",
                "List",
                "Callable"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bytes"
                ]
            }
        },
        "get_bullet_list_children": {
            "name": "get_bullet_list_children",
            "location": 15,
            "return": [
                "str",
                "bool",
                "Set[str]",
                "Callable[[str, Any], Tuple[bytes, int]]",
                "MutableMapping[str, int]",
                "List[Mapping[str, Any]]"
            ],
            "arguments": {
                "node": [
                    "str",
                    "int"
                ]
            }
        },
        "has_child_with_tag": {
            "name": "has_child_with_tag",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "AbstractSet[str]",
                    "AbstractSet",
                    "List",
                    "List[Dict[str,str]]",
                    "OrderedDict",
                    "List[dict[str,str]]",
                    "str",
                    "bool",
                    "Dict[int,Dict[str,Any]]",
                    "Dict[int,dict[str,Any]]"
                ],
                "tag": [
                    "AbstractSet[str]",
                    "AbstractSet",
                    "List",
                    "List[Dict[str,str]]",
                    "OrderedDict",
                    "List[dict[str,str]]",
                    "str",
                    "bool",
                    "Dict[int,Dict[str,Any]]",
                    "Dict[int,dict[str,Any]]"
                ]
            }
        },
        "get_text_child": {
            "name": "get_text_child",
            "location": 28,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "node": []
            }
        },
        "get_bullet_list_item_text": {
            "name": "get_bullet_list_item_text",
            "location": 33,
            "return": [
                "str",
                "int",
                "Tuple[str]"
            ],
            "arguments": {
                "node": []
            }
        },
        "get_section_title": {
            "name": "get_section_title",
            "location": 39,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[str,str]"
            ],
            "arguments": {
                "section": [
                    "str",
                    "List"
                ]
            }
        }
    },
    "passzero-master/scripts/api_doc_builder/swag.py": {},
    "passzero-master/scripts/api_doc_builder/__init__.py": {},
    "passzero-master/tests/__init__.py": {},
    "passzero-master/tests/common/api.py": {
        "_is_requests_session": {
            "name": "_is_requests_session",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "str"
                ]
            }
        },
        "_get_response_data": {
            "name": "_get_response_data",
            "location": 32,
            "return": [
                "Dict[str, Any]",
                "requests.Session"
            ],
            "arguments": {
                "session": [
                    "Dict[str,int]",
                    "Callable",
                    "bytes"
                ],
                "response": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "requests.Response"
                ]
            }
        },
        "_get_response_json": {
            "name": "_get_response_json",
            "location": 42,
            "return": [
                "bool",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "response": []
            }
        },
        "_print_if_test": {
            "name": "_print_if_test",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Dict",
                    "Callable",
                    "str"
                ],
                "data": [
                    "str",
                    "List[str]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "_print_response_text_if_test": {
            "name": "_print_response_text_if_test",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "Dict",
                    "str",
                    "requests.Response",
                    "flask.Response",
                    "requests.models.Response"
                ]
            }
        },
        "json_header_with_token": {
            "name": "json_header_with_token",
            "location": 69,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "token": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "json_get": {
            "name": "json_get",
            "location": 76,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "session": [
                    "Dict",
                    "str",
                    "requests.Session"
                ],
                "relative_url": [
                    "str",
                    "requests.Session"
                ],
                "token": [
                    "Optional[str]",
                    "str",
                    "None",
                    "int"
                ],
                "verify": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "json_post": {
            "name": "json_post",
            "location": 96,
            "return": [
                "List[Dict[str, Any]]",
                "set",
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "session": [
                    "str",
                    "int",
                    "Optional[dict]",
                    "Dict",
                    "None"
                ],
                "relative_url": [
                    "str",
                    "Dict[str,str]"
                ],
                "data": [
                    "Dict",
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "requests.models.Response"
                ],
                "token": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Dict"
                ],
                "verify": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]",
                    "Union[bool,int,str]",
                    "Dict[str,str]"
                ]
            }
        },
        "json_put": {
            "name": "json_put",
            "location": 117,
            "return": [
                "int",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Optional[Dict[str, Any]]",
                "dict",
                "Exception"
            ],
            "arguments": {
                "session": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "int",
                    "None"
                ],
                "relative_url": [
                    "str",
                    "Dict",
                    "requests.Session"
                ],
                "data": [
                    "Dict",
                    "Dict[str,Any]",
                    "str"
                ],
                "token": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Dict"
                ]
            }
        },
        "json_patch": {
            "name": "json_patch",
            "location": 138,
            "return": [
                "str",
                "dict",
                "Optional[MutableMapping]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "session": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "relative_url": [
                    "str",
                    "Dict[str,str]",
                    "requests.Session"
                ],
                "data": [
                    "Dict",
                    "str",
                    "Mapping[str,str]"
                ],
                "token": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Dict"
                ]
            }
        },
        "json_delete": {
            "name": "json_delete",
            "location": 164,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "session": [
                    "str"
                ],
                "relative_url": [
                    "str",
                    "requests.Session",
                    "Tuple[str]",
                    "Optional[Tuple[str]]",
                    "None"
                ],
                "data": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "token": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "get_status": {
            "name": "get_status",
            "location": 194,
            "return": [
                "float",
                "Dict[str,Union[Any,Any,Any,str]]",
                "int",
                "Exception",
                "Dict[str,Union[str,Set]]",
                "Dict",
                "Dict[str,str]",
                "Optional[str]"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Sequence[str]",
                    "Dict[str,list]",
                    "flask.Flask"
                ],
                "check_status": [
                    "bool"
                ]
            }
        },
        "login": {
            "name": "login",
            "location": 205,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Dict[str,str]",
                    "Dict[str,Union[Any,Any,Any]]",
                    "requests.models.Response"
                ],
                "email": [
                    "str",
                    "int",
                    "Dict[str,Any]",
                    "Exception",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ],
                "password": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "Callable"
                ],
                "check_status": [
                    "bool"
                ]
            }
        },
        "logout": {
            "name": "logout",
            "location": 222,
            "return": [
                "Tuple[Union[str,str,str]]",
                "Dict[str,bool]",
                "List[str]",
                "bool",
                "List[Mapping[str,Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Dict[str,str]",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "check_status": [
                    "bool",
                    "int",
                    "float",
                    "Type[T]",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "get_csrf_token": {
            "name": "get_csrf_token",
            "location": 230,
            "return": [
                "str",
                "Dict",
                "bool",
                "int",
                "float",
                "List[List[str]]"
            ],
            "arguments": {
                "app": [
                    "str",
                    "flask.Flask"
                ]
            }
        },
        "get_entries": {
            "name": "get_entries",
            "location": 240,
            "return": [
                "float",
                "bool",
                "Dict[str,Union[Any,Any,Any,str]]",
                "Optional[str]",
                "str",
                "Dict[str,str]"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Callable",
                    "int",
                    "Dict[str,list]",
                    "Dict"
                ],
                "check_status": [
                    "bool",
                    "str",
                    "Type",
                    "int"
                ]
            }
        },
        "get_user_preferences": {
            "name": "get_user_preferences",
            "location": 250,
            "return": [
                "float",
                "str",
                "Dict[str,Union[Any,Any,Any,str]]",
                "bool",
                "Dict[str,str]",
                "List[str]"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Dict[str,list]",
                    "Sequence[str]",
                    "flask.Flask"
                ],
                "check_status": [
                    "bool"
                ]
            }
        },
        "put_user_preferences": {
            "name": "put_user_preferences",
            "location": 261,
            "return": [
                "List[str]",
                "dict",
                "Iterable[str]",
                "List[Mapping[str, Any]]"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Dict[str,str]"
                ],
                "prefs": [
                    "str"
                ],
                "csrf_token": [
                    "str",
                    "Dict[str,int]"
                ],
                "check_status": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "create_entry": {
            "name": "create_entry",
            "location": 286,
            "return": [
                "dict"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Dict[str,Union[Any,Any,Any]]",
                    "int"
                ],
                "entry": [
                    "Dict",
                    "str",
                    "bool",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "None"
                ],
                "csrf_token": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "check_status": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "delete_entry": {
            "name": "delete_entry",
            "location": 302,
            "return": [
                "List[str]",
                "str",
                "bool",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "app": [
                    "str",
                    "bytes",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "entry_id": [
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "csrf_token": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "check_status": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "delete_all_entries": {
            "name": "delete_all_entries",
            "location": 314,
            "return": [
                "List[str]",
                "bool",
                "str",
                "Iterable[str]",
                "List[Mapping[str, Any]]"
            ],
            "arguments": {
                "app": [
                    "str",
                    "None",
                    "requests.models.Response",
                    "Optional[str]",
                    "requests.Session"
                ],
                "password": [
                    "str"
                ],
                "csrf_token": [
                    "str"
                ],
                "check_status": [
                    "bool"
                ]
            }
        },
        "delete_user": {
            "name": "delete_user",
            "location": 327,
            "return": [
                "List[str]",
                "dict",
                "str",
                "List[Mapping[str, Any]]",
                "Iterable[str]",
                "Union[List, Dict]"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Dict[str,str]",
                    "Union[str,bytes]",
                    "bytes"
                ],
                "password": [
                    "str",
                    "Dict",
                    "requests.Session",
                    "requests.Response"
                ],
                "csrf_token": [
                    "str"
                ],
                "check_status": [
                    "bool"
                ]
            }
        },
        "edit_entry": {
            "name": "edit_entry",
            "location": 345,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "app": [
                    "str",
                    "bool",
                    "int"
                ],
                "entry_id": [
                    "str",
                    "int",
                    "bool"
                ],
                "entry": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "csrf_token": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "check_status": [
                    "bool"
                ]
            }
        },
        "signup": {
            "name": "signup",
            "location": 359,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Dict[str,str]",
                    "Dict[str,Union[Any,Any,Any]]",
                    "requests.models.Response"
                ],
                "email": [
                    "str",
                    "Dict[str,int]",
                    "Union[str,bytes]",
                    "bytes"
                ],
                "password": [
                    "str"
                ],
                "check_status": [
                    "bool"
                ]
            }
        },
        "recover_account": {
            "name": "recover_account",
            "location": 376,
            "return": [
                "Set[str]",
                "bool",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "app": [
                    "str"
                ],
                "email": [
                    "str",
                    "Dict[str,str]",
                    "T"
                ],
                "csrf_token": [
                    "str",
                    "Dict[str,str]",
                    "T"
                ]
            }
        },
        "recover_account_confirm": {
            "name": "recover_account_confirm",
            "location": 388,
            "return": [
                "Set[str]",
                "bool",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Dict[str,str]",
                    "None",
                    "Optional[str]",
                    "requests.Session"
                ],
                "password": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "recovery_token": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "csrf_token": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "check_status": [
                    "bool",
                    "str",
                    "Dict[str,List[Any]]"
                ]
            }
        },
        "activate_account": {
            "name": "activate_account",
            "location": 404,
            "return": [
                "Set[str]",
                "bool",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "bool",
                    "None"
                ],
                "token": [
                    "str",
                    "Dict",
                    "Callable"
                ],
                "check_status": [
                    "bool",
                    "int"
                ]
            }
        },
        "update_user_password": {
            "name": "update_user_password",
            "location": 416,
            "return": [
                "List[str]",
                "Set[str]",
                "List[Match]",
                "dict",
                "List[Mapping[str, Any]]",
                "bool"
            ],
            "arguments": {
                "app": [
                    "str"
                ],
                "old_password": [
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "new_password": [
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "csrf_token": [
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "check_status": [
                    "bool",
                    "str",
                    "List[Tuple[str,...]]"
                ]
            }
        },
        "get_documents": {
            "name": "get_documents",
            "location": 437,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "check_status": [
                    "bool",
                    "str",
                    "Type",
                    "int"
                ]
            }
        },
        "post_document": {
            "name": "post_document",
            "location": 448,
            "return": [
                "dict"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "List[Dict[str,Any]]",
                    "None",
                    "List[dict[str,Any]]"
                ],
                "doc_params": [
                    "Optional[Dict[str, Any]]",
                    "bytes"
                ],
                "csrf_token": [
                    "str",
                    "Tuple",
                    "IO[bytes]",
                    "IO"
                ],
                "check_status": [
                    "bool",
                    "str"
                ]
            }
        },
        "get_document": {
            "name": "get_document",
            "location": 484,
            "return": [
                "str",
                "Set[str]",
                "bool",
                "MutableMapping[str, int]",
                "List[Optional[str]]",
                "List[str]"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Dict",
                    "None",
                    "int"
                ],
                "doc_id": [
                    "str",
                    "int",
                    "Optional[bool]",
                    "None"
                ],
                "check_status": [
                    "bool",
                    "str",
                    "int",
                    "Dict[int,Dict[str,float]]"
                ]
            }
        },
        "update_document": {
            "name": "update_document",
            "location": 495,
            "return": [
                "bool",
                "List[int]",
                "List[Mapping[str, Any]]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "app": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "bytes",
                    "Optional[int]",
                    "None"
                ],
                "doc_id": [
                    "str",
                    "int"
                ],
                "doc_params": [
                    "str",
                    "Dict[str, str]",
                    "bytes",
                    "dict"
                ],
                "csrf_token": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[List[str]]",
                    "List[str]",
                    "bool",
                    "None"
                ],
                "check_status": [
                    "bool",
                    "List[Tuple[str,int]]",
                    "int",
                    "Set[int]",
                    "Optional[str]"
                ]
            }
        },
        "delete_document": {
            "name": "delete_document",
            "location": 519,
            "return": [
                "List[str]",
                "str",
                "bool",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "app": [
                    "str",
                    "bytes",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "doc_id": [
                    "int",
                    "Dict[str,Any]"
                ],
                "csrf_token": [
                    "int",
                    "Dict[str,Any]"
                ],
                "check_status": [
                    "bool",
                    "int",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "get_entries_v2": {
            "name": "get_entries_v2",
            "location": 531,
            "return": [
                "Optional[str]",
                "int",
                "dict",
                "bool"
            ],
            "arguments": {
                "app": [
                    "str",
                    "flask.Flask"
                ]
            }
        },
        "get_entry_v2": {
            "name": "get_entry_v2",
            "location": 539,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "app": [
                    "Optional[str]",
                    "Dict",
                    "str",
                    "None"
                ],
                "entry_id": [
                    "int"
                ],
                "check_status": [
                    "bool",
                    "str",
                    "int",
                    "Dict[int,Dict[str,float]]"
                ]
            }
        },
        "login_v2": {
            "name": "login_v2",
            "location": 550,
            "return": [
                "str",
                "List[str]",
                "dict",
                "Iterable[str]",
                "bool",
                "List[Mapping[str, Any]]"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Dict[str,Union[Any,Any,Any]]",
                    "Dict[str,str]",
                    "Dict"
                ],
                "username_or_email": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ],
                "password": [
                    "str",
                    "Dict[str,Any]"
                ],
                "check_status": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "get_api_token_with_login": {
            "name": "get_api_token_with_login",
            "location": 570,
            "return": [
                "str",
                "bytes",
                "int",
                "Tuple[Union[str,str,str]]",
                "Exception",
                "Optional[Callable]"
            ],
            "arguments": {
                "session": [
                    "bool",
                    "flask.Request",
                    "flask.Response"
                ],
                "check_status": [
                    "bool",
                    "List[libkol.Item]",
                    "Optional[str]"
                ]
            }
        },
        "login_with_token": {
            "name": "login_with_token",
            "location": 582,
            "return": [
                "Dict",
                "Dict[str,Union[Any,Any,str]]",
                "List[str]",
                "Dict[str,dict[str,str]]",
                "Dict[str,Any]",
                "bytes",
                "Dict[int,str]"
            ],
            "arguments": {
                "session": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "email": [
                    "str",
                    "int",
                    "Dict",
                    "Tuple[int,str]",
                    "Tuple[Union[int,str]]",
                    "FrozenSet",
                    "frozenset"
                ],
                "password": [
                    "str",
                    "Dict[str,Any]",
                    "Awaitable",
                    "collections.abc.Awaitable",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "Optional[str]",
                    "None"
                ],
                "check_status": [
                    "bool",
                    "str",
                    "int"
                ],
                "verify": [
                    "bool",
                    "str",
                    "Awaitable",
                    "Dict[str,Any]",
                    "List[Dict[str,Any]]",
                    "Optional[str]"
                ]
            }
        },
        "delete_token": {
            "name": "delete_token",
            "location": 601,
            "return": [
                "Tuple[Union[str,str,str]]",
                "List[str]",
                "bytes",
                "str",
                "bool",
                "int",
                "Iterable[str]",
                "List[Mapping[str,Any]]",
                "Tuple[Any,Any,Any]"
            ],
            "arguments": {
                "session": [
                    "bool",
                    "Union[str,bytes,Any]",
                    "Dict[str,Any]",
                    "Dict",
                    "str",
                    "bytes",
                    "Any"
                ],
                "token": [
                    "bytes",
                    "Dict",
                    "str",
                    "None",
                    "Optional[Dict]",
                    "Optional[str]"
                ],
                "check_status": [
                    "bool"
                ]
            }
        },
        "create_entry_with_token": {
            "name": "create_entry_with_token",
            "location": 612,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "session": [
                    "str",
                    "Dict",
                    "None",
                    "requests.Session",
                    "Optional[dict]",
                    "Optional[str]"
                ],
                "entry": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "password": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "token": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "check_status": [
                    "bool",
                    "str",
                    "Dict[str,str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "delete_all_entries_with_token": {
            "name": "delete_all_entries_with_token",
            "location": 628,
            "return": [
                "Dict[str,int]",
                "str",
                "Tuple[Union[str,str,str]]",
                "bytes",
                "List[str]",
                "Iterable[str]",
                "List[Mapping[str,Any]]",
                "Union[List,Dict]"
            ],
            "arguments": {
                "session": [
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,Sequence[str]]",
                    "Dict[str,Sequence[Any]]"
                ],
                "password": [
                    "str",
                    "Dict"
                ],
                "token": [
                    "str",
                    "Dict"
                ],
                "check_status": [
                    "bool",
                    "List[Dict[str,Any]]",
                    "str",
                    "List",
                    "Optional[str]",
                    "Dict",
                    "int"
                ]
            }
        },
        "get_encrypted_entries_with_token": {
            "name": "get_encrypted_entries_with_token",
            "location": 640,
            "return": [
                "bool",
                "int",
                "str",
                "Dict[str, str]",
                "Dict[str, object]"
            ],
            "arguments": {
                "session": [
                    "Optional[str]",
                    "str",
                    "int",
                    "List[Tuple[str,str]]",
                    "None",
                    "List[tuple[Union[str,str]]]",
                    "Optional[bytes]",
                    "bool",
                    "bytes"
                ],
                "token": [
                    "int",
                    "str",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ],
                "check_status": [
                    "bool",
                    "str"
                ],
                "verify": [
                    "bool",
                    "int",
                    "str",
                    "Optional[Dict]"
                ]
            }
        },
        "delete_entry_with_token": {
            "name": "delete_entry_with_token",
            "location": 656,
            "return": [
                "str",
                "Tuple[Any, Any, Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "session": [
                    "str",
                    "Dict"
                ],
                "entry_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "password": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "token": [
                    "str"
                ],
                "check_status": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Dict[int,Dict[str,float]]"
                ]
            }
        },
        "decrypt_entry_with_token": {
            "name": "decrypt_entry_with_token",
            "location": 667,
            "return": [
                "Dict[str,Any]",
                "int",
                "bytes",
                "Tuple[Union[str,str,str]]",
                "List[str]"
            ],
            "arguments": {
                "session": [
                    "str",
                    "bool"
                ],
                "entry_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "password": [
                    "str",
                    "int"
                ],
                "token": [
                    "str",
                    "int"
                ],
                "check_status": [
                    "bool",
                    "int",
                    "Dict[int,str]",
                    "List[Dict[str,int]]",
                    "Dict[int,int]"
                ],
                "verify": [
                    "bool",
                    "str",
                    "MutableMapping",
                    "int"
                ]
            }
        },
        "edit_entry_with_token": {
            "name": "edit_entry_with_token",
            "location": 695,
            "return": [
                "Tuple[Union[str,str,str]]",
                "int",
                "bool",
                "Dict[str,Any]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "session": [
                    "str",
                    "int",
                    "Dict[str,Any]",
                    "Dict",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "entry_id": [
                    "str"
                ],
                "new_entry": [
                    "str",
                    "Optional[str]",
                    "None",
                    "bytes",
                    "bool",
                    "Dict[str,str]",
                    "Dict",
                    "Optional[bytes]"
                ],
                "password": [
                    "str",
                    "Optional[str]",
                    "None",
                    "bytes",
                    "bool",
                    "Dict[str,str]",
                    "Dict",
                    "Optional[bytes]"
                ],
                "token": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "int"
                ],
                "check_status": [
                    "bool",
                    "str",
                    "List[dict]"
                ]
            }
        },
        "BadStatusCodeException.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int"
                ]
            }
        },
        "ApiV3.__init__": {
            "name": "__init__",
            "location": 721,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "int",
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "base_url": [
                    "str",
                    "None"
                ]
            }
        },
        "ApiV3.login": {
            "name": "login",
            "location": 733,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "verify": [
                    "str",
                    "bool"
                ]
            }
        },
        "ApiV3.logout": {
            "name": "logout",
            "location": 743,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiV3.json_post": {
            "name": "json_post",
            "location": 753,
            "return": [
                "List[Dict[str, Any]]",
                "int",
                "float",
                "dict"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bytes",
                    "Callable",
                    "bool"
                ],
                "data": [
                    "str",
                    "bytes",
                    "Callable",
                    "bool"
                ],
                "check_status": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "List",
                    "int"
                ],
                "use_token": [
                    "bool",
                    "str",
                    "bytes",
                    "Callable"
                ]
            }
        },
        "ApiV3.json_get": {
            "name": "json_get",
            "location": 774,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "Optional[Mapping[str,str]]",
                    "Mapping",
                    "None"
                ],
                "check_status": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "use_token": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "ApiV3.json_patch": {
            "name": "json_patch",
            "location": 787,
            "return": [
                "bool",
                "Dict[str, Any]",
                "str",
                "Optional[Union[Any, Any]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Dict[str,Any]",
                    "str",
                    "Dict",
                    "bytes",
                    "Optional[str]",
                    "None"
                ],
                "data": [
                    "Dict[str,Any]",
                    "str",
                    "Dict",
                    "bytes",
                    "Optional[str]",
                    "None"
                ],
                "check_status": [
                    "bool",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "ApiV3.json_delete": {
            "name": "json_delete",
            "location": 798,
            "return": [
                "tuple",
                "int",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None",
                    "Optional[Mapping[str,Any]]",
                    "Mapping"
                ],
                "data": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "Optional[Mapping[str,Any]]",
                    "Mapping"
                ],
                "check_status": [
                    "bool",
                    "Dict[str,Any]",
                    "str",
                    "int",
                    "Optional[bool]",
                    "Sequence[Any]"
                ]
            }
        },
        "ApiV3.get_encrypted_entries": {
            "name": "get_encrypted_entries",
            "location": 813,
            "return": [
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "verify": [
                    "bool",
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "ApiV3.decrypt_entry": {
            "name": "decrypt_entry",
            "location": 822,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "entry_id": [
                    "str"
                ],
                "verify": [
                    "str",
                    "bool"
                ]
            }
        },
        "ApiV3.create_entry": {
            "name": "create_entry",
            "location": 834,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "ApiV3.edit_entry": {
            "name": "edit_entry",
            "location": 847,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry_id": [
                    "str",
                    "int"
                ],
                "new_entry": [
                    "str",
                    "int",
                    "Dict[str,str]",
                    "List[Tuple[str,str]]",
                    "List[tuple[Union[str,str]]]"
                ]
            }
        },
        "ApiV3.update_entry_versions": {
            "name": "update_entry_versions",
            "location": 861,
            "return": [
                "dict",
                "Dict[str, str]",
                "bool",
                "str",
                "Dict[str, Any]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiV3.create_link": {
            "name": "create_link",
            "location": 873,
            "return": [
                "bool",
                "Optional[Dict]",
                "str"
            ],
            "arguments": {
                "self": [],
                "link": [
                    "str",
                    "flask_dialogflow.json.JSON"
                ]
            }
        },
        "ApiV3.decrypt_link": {
            "name": "decrypt_link",
            "location": 888,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "link_id": [
                    "int",
                    "str"
                ]
            }
        },
        "ApiV3.get_encrypted_links": {
            "name": "get_encrypted_links",
            "location": 900,
            "return": [
                "Dict[str, Tuple[Any, Any]]",
                "bool",
                "Dict[str, Dict[str, str]]",
                "Dict[str, Any]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiV3.delete_link": {
            "name": "delete_link",
            "location": 907,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "link_id": [
                    "int",
                    "str"
                ]
            }
        },
        "ApiV3.edit_link": {
            "name": "edit_link",
            "location": 919,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "link_id": [
                    "int",
                    "str"
                ],
                "new_link": [
                    "str",
                    "int",
                    "List[dict[str,str]]",
                    "List[Dict[str,str]]",
                    "List[dict]",
                    "bool",
                    "List[Dict]"
                ]
            }
        },
        "ApiV3.decrypt_links": {
            "name": "decrypt_links",
            "location": 932,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "link_ids": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "password": [
                    "Optional[str]",
                    "None",
                    "bytes",
                    "Optional[int]",
                    "str",
                    "int"
                ],
                "check_status": [
                    "bool",
                    "str",
                    "int",
                    "Exception",
                    "Any",
                    "Dict[int,dict]"
                ]
            }
        },
        "ApiV3.delete_all_links": {
            "name": "delete_all_links",
            "location": 951,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiV3.get_services": {
            "name": "get_services",
            "location": 965,
            "return": [
                "str",
                "int",
                "bool",
                "tuple",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiV3.get_current_user": {
            "name": "get_current_user",
            "location": 971,
            "return": [
                "str",
                "int",
                "bool",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiV3.patch_current_user": {
            "name": "patch_current_user",
            "location": 975,
            "return": [
                "bool",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Dict",
                    "Sequence[str]",
                    "Optional[int]",
                    "int",
                    "Optional[bool]",
                    "None",
                    "Optional[bytes]",
                    "bytes"
                ],
                "check_status": [
                    "bool",
                    "str",
                    "Dict",
                    "Sequence[str]",
                    "Optional[int]",
                    "Optional[bool]",
                    "Optional[bytes]"
                ]
            }
        }
    },
    "passzero-master/tests/end_to_end_tests/api_v1_test.py": {
        "get_db_session": {
            "name": "get_db_session",
            "location": 26,
            "return": [
                "str",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {}
        },
        "create_active_account": {
            "name": "create_active_account",
            "location": 32,
            "return": [
                "Tuple[(passzero.models.user.User, Any)]"
            ],
            "arguments": {
                "email": [
                    "str"
                ],
                "password": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "PassZeroApiV1Tester.base_url": {
            "name": "base_url",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiV1Tester.entry_fields": {
            "name": "entry_fields",
            "location": 57,
            "return": [
                "List[Text]",
                "Dict",
                "Dict[str,bool]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiV1Tester.json_header": {
            "name": "json_header",
            "location": 61,
            "return": [
                "Dict[Text,Text]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiV1Tester._fake_account_cleanup": {
            "name": "_fake_account_cleanup",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiV1Tester.setUp": {
            "name": "setUp",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiV1Tester.tearDown": {
            "name": "tearDown",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiV1Tester._login": {
            "name": "_login",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "sqlalchemy.orm.session.Session"
                ],
                "email": [
                    "str",
                    "sqlalchemy.orm.session.Session"
                ],
                "password": [
                    "str",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "PassZeroApiV1Tester._logout": {
            "name": "_logout",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "Session",
                    "mwapi.Session"
                ]
            }
        },
        "PassZeroApiV1Tester._signup": {
            "name": "_signup",
            "location": 89,
            "return": [
                "Optional[str]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "sqlalchemy.orm.session.Session"
                ],
                "email": [
                    "str",
                    "sqlalchemy.orm.session.Session"
                ],
                "password": [
                    "str",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "PassZeroApiV1Tester._get_csrf_token": {
            "name": "_get_csrf_token",
            "location": 94,
            "return": [
                "dict",
                "bool",
                "int",
                "float",
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "bool",
                    "deeplearning.ml4pl.models.logger.Logger"
                ]
            }
        },
        "PassZeroApiV1Tester._create_entry": {
            "name": "_create_entry",
            "location": 102,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "int",
                    "sqlalchemy.orm.Session",
                    "arxiv.users.domain.Session",
                    "sqlalchemy.orm.session.Session"
                ],
                "entry": [
                    "str",
                    "int",
                    "sqlalchemy.orm.Session",
                    "arxiv.users.domain.Session",
                    "sqlalchemy.orm.session.Session"
                ],
                "token": [
                    "str",
                    "int",
                    "sqlalchemy.orm.Session",
                    "arxiv.users.domain.Session",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "PassZeroApiV1Tester._edit_entry": {
            "name": "_edit_entry",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "int",
                    "Dict",
                    "sqlalchemy.orm.session.Session",
                    "None",
                    "Optional[int]"
                ],
                "entry_id": [
                    "str",
                    "int",
                    "Dict",
                    "sqlalchemy.orm.session.Session",
                    "None",
                    "Optional[int]"
                ],
                "entry": [
                    "str",
                    "int",
                    "Dict",
                    "sqlalchemy.orm.session.Session",
                    "None",
                    "Optional[int]"
                ],
                "token": [
                    "str",
                    "int",
                    "Dict",
                    "sqlalchemy.orm.session.Session",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "PassZeroApiV1Tester._get_entries": {
            "name": "_get_entries",
            "location": 112,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "None",
                    "sqlalchemy.orm.session.Session",
                    "Optional[str]",
                    "Session",
                    "mwapi.Session"
                ]
            }
        },
        "PassZeroApiV1Tester._delete_entry": {
            "name": "_delete_entry",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "int",
                    "sqlalchemy.orm.session.Session",
                    "arxiv.users.domain.Session",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "sqlalchemy.orm.Session"
                ],
                "entry_id": [
                    "str",
                    "int",
                    "sqlalchemy.orm.session.Session",
                    "arxiv.users.domain.Session",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "sqlalchemy.orm.Session"
                ],
                "token": [
                    "str",
                    "int",
                    "sqlalchemy.orm.session.Session",
                    "arxiv.users.domain.Session",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "PassZeroApiV1Tester.test_login_no_users": {
            "name": "test_login_no_users",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiV1Tester.test_no_email": {
            "name": "test_no_email",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiV1Tester.test_no_password": {
            "name": "test_no_password",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiV1Tester.test_login_inactive": {
            "name": "test_login_inactive",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiV1Tester.test_correct_login": {
            "name": "test_correct_login",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiV1Tester.test_get_entries_empty": {
            "name": "test_get_entries_empty",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiV1Tester.test_create_no_csrf": {
            "name": "test_create_no_csrf",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiV1Tester.test_create_and_delete_entry": {
            "name": "test_create_and_delete_entry",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiV1Tester.test_get_csrf_token": {
            "name": "test_get_csrf_token",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiV1Tester.test_delete_entry": {
            "name": "test_delete_entry",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiV1Tester.test_delete_entry_no_token": {
            "name": "test_delete_entry_no_token",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiV1Tester.test_delete_nonexistant_entry": {
            "name": "test_delete_nonexistant_entry",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiV1Tester._check_entries_equal": {
            "name": "_check_entries_equal",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e1": [
                    "str"
                ],
                "e2": [
                    "str"
                ]
            }
        },
        "PassZeroApiV1Tester.test_edit_existing_entry": {
            "name": "test_edit_existing_entry",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiV1Tester.test_logout": {
            "name": "test_logout",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiV1Tester.test_no_docs": {
            "name": "test_no_docs",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiV1Tester.test_upload_doc_then_decrypt": {
            "name": "test_upload_doc_then_decrypt",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiV1Tester.test_upload_and_get_docs": {
            "name": "test_upload_and_get_docs",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiV1Tester.test_upload_doc_then_delete": {
            "name": "test_upload_doc_then_delete",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiV1Tester.test_no_such_doc": {
            "name": "test_no_such_doc",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "passzero-master/tests/end_to_end_tests/email_test.py": {
        "test_send_email": {
            "name": "test_send_email",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "passzero-master/tests/end_to_end_tests/__init__.py": {},
    "passzero-master/tests/unit_tests/test_api_v1.py": {
        "PassZeroApiTester._assert_entries_equal": {
            "name": "_assert_entries_equal",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e1": [
                    "Dict",
                    "Dict[str,Any]"
                ],
                "e2": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "PassZeroApiTester.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.tearDown": {
            "name": "tearDown",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_status": {
            "name": "test_status",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_delete_all_entries": {
            "name": "test_delete_all_entries",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_get_entries_no_login": {
            "name": "test_get_entries_no_login",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_delete_entry_no_login": {
            "name": "test_delete_entry_no_login",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_delete_invalid_entry": {
            "name": "test_delete_invalid_entry",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_delete_not_your_entry": {
            "name": "test_delete_not_your_entry",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_create_entry_no_login": {
            "name": "test_create_entry_no_login",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_delete_user_with_entries": {
            "name": "test_delete_user_with_entries",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_delete_user_with_docs": {
            "name": "test_delete_user_with_docs",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_delete_user_bad_password": {
            "name": "test_delete_user_bad_password",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_delete_user_with_recovery_token": {
            "name": "test_delete_user_with_recovery_token",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m1": []
            }
        },
        "PassZeroApiTester._extract_token_from_send_email_call": {
            "name": "_extract_token_from_send_email_call",
            "location": 219,
            "return": [
                "dict",
                "Iterable[str]",
                "Optional[str]",
                "List[str]",
                "allennlp.common.util.JsonDict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "m1": [
                    "str",
                    "int"
                ]
            }
        },
        "PassZeroApiTester.test_signup": {
            "name": "test_signup",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m1": [
                    "Dict[str,Sequence[Any]]",
                    "common.ComponentFactory"
                ]
            }
        },
        "PassZeroApiTester.test_get_csrf_token": {
            "name": "test_get_csrf_token",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_login": {
            "name": "test_login",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_login_invalid_account": {
            "name": "test_login_invalid_account",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester._create_active_account": {
            "name": "_create_active_account",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "neuromation.api.JobStatus"
                ],
                "password": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "m1": [
                    "str",
                    "int"
                ]
            }
        },
        "PassZeroApiTester.test_get_entries_empty": {
            "name": "test_get_entries_empty",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_create_entry": {
            "name": "test_create_entry",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_create_entry_no_account": {
            "name": "test_create_entry_no_account",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_create_entry_bad_csrf": {
            "name": "test_create_entry_bad_csrf",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_create_and_delete_entry": {
            "name": "test_create_and_delete_entry",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_edit_non_existant_entry": {
            "name": "test_edit_non_existant_entry",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_edit_existing_entry": {
            "name": "test_edit_existing_entry",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_edit_not_your_entry": {
            "name": "test_edit_not_your_entry",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_change_master_password": {
            "name": "test_change_master_password",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_put_user_prefs": {
            "name": "test_put_user_prefs",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_put_user_prefs_single": {
            "name": "test_put_user_prefs_single",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_change_master_password_bad_old_password": {
            "name": "test_change_master_password_bad_old_password",
            "location": 526,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_logout": {
            "name": "test_logout",
            "location": 561,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_recover_account_valid_email": {
            "name": "test_recover_account_valid_email",
            "location": 572,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m1": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "passzero-master/tests/unit_tests/test_api_v2.py": {
        "PassZeroApiTester.assertEntriesEqual": {
            "name": "assertEntriesEqual",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e1": [
                    "Dict",
                    "Dict[str,Any]"
                ],
                "e2": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "PassZeroApiTester.setUp": {
            "name": "setUp",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester._create_inactive_account": {
            "name": "_create_inactive_account",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "neuromation.api.JobStatus"
                ],
                "password": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "m1": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "PassZeroApiTester._create_active_account": {
            "name": "_create_active_account",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "neuromation.api.JobStatus"
                ],
                "password": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "m1": [
                    "str",
                    "int"
                ]
            }
        },
        "PassZeroApiTester.test_get_entries": {
            "name": "test_get_entries",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_get_entries_not_your_entry": {
            "name": "test_get_entries_not_your_entry",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_login_v2_with_email": {
            "name": "test_login_v2_with_email",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_login_v2_no_such_email": {
            "name": "test_login_v2_no_such_email",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_login_v2_inactive_user": {
            "name": "test_login_v2_inactive_user",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_login_v2_incorrect_password": {
            "name": "test_login_v2_incorrect_password",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroApiTester.test_login_v2_with_username": {
            "name": "test_login_v2_with_username",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "passzero-master/tests/unit_tests/test_api_v3.py": {
        "_assert_entries_equal": {
            "name": "_assert_entries_equal",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "e1": [
                    "Dict",
                    "Dict[str,Any]",
                    "Type[serious.utils.Dataclass]",
                    "Type"
                ],
                "e2": [
                    "Dict",
                    "Dict[str,Any]",
                    "Type[serious.utils.Dataclass]",
                    "Type"
                ]
            }
        },
        "my_app": {
            "name": "my_app",
            "location": 35,
            "return": [
                "flask.Flask",
                "\"App\""
            ],
            "arguments": {
                "request": []
            }
        },
        "db": {
            "name": "db",
            "location": 49,
            "return": [
                "Callable"
            ],
            "arguments": {
                "request": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "my_app": [
                    "str",
                    "List"
                ]
            }
        },
        "app": {
            "name": "app",
            "location": 59,
            "return": [
                "flask.Flask",
                "int",
                "str",
                "None",
                "Iterable[tuple[Union[str,int]]]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "int",
                    "bool"
                ],
                "db": [
                    "int",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "Iterable[tuple[Union[str,int]]]",
                    "Iterable[Tuple[str,int]]"
                ],
                "my_app": [
                    "int",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "Iterable[tuple[Union[str,int]]]",
                    "Iterable[Tuple[str,int]]"
                ]
            }
        },
        "create_active_account": {
            "name": "create_active_account",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "email": [
                    "str",
                    "Dict[str,Any]",
                    "Dict"
                ],
                "password": [
                    "str"
                ],
                "m1": [
                    "str"
                ]
            }
        },
        "active_user": {
            "name": "active_user",
            "location": 99,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "db": [
                    "grouper.models.user.User",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "test_login_then_get_token": {
            "name": "test_login_then_get_token",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_login_then_get_token_twice": {
            "name": "test_login_then_get_token_twice",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_login_with_token": {
            "name": "test_login_with_token",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_login_logout": {
            "name": "test_login_logout",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_login_invalid_account": {
            "name": "test_login_invalid_account",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_login_invalid_password": {
            "name": "test_login_invalid_password",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_get_entries_no_login": {
            "name": "test_get_entries_no_login",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_delete_entry_no_login": {
            "name": "test_delete_entry_no_login",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_create_entry_no_login": {
            "name": "test_create_entry_no_login",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_delete_all_entries": {
            "name": "test_delete_all_entries",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "test_delete_invalid_entry": {
            "name": "test_delete_invalid_entry",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_get_entries_empty": {
            "name": "test_get_entries_empty",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "test_create_entry": {
            "name": "test_create_entry",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_create_entry_no_account": {
            "name": "test_create_entry_no_account",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_create_entry_bad_token": {
            "name": "test_create_entry_bad_token",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_create_entry_bad_password": {
            "name": "test_create_entry_bad_password",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_create_and_delete_entry": {
            "name": "test_create_and_delete_entry",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_edit_non_existant_entry": {
            "name": "test_edit_non_existant_entry",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_edit_entry": {
            "name": "test_edit_entry",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_edit_entry_bad_password": {
            "name": "test_edit_entry_bad_password",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_edit_not_your_entry": {
            "name": "test_edit_not_your_entry",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_decrypt_entry_bad_password": {
            "name": "test_decrypt_entry_bad_password",
            "location": 542,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_decrypt_entry_not_your_entry": {
            "name": "test_decrypt_entry_not_your_entry",
            "location": 563,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_delete_entry_not_your_entry": {
            "name": "test_delete_entry_not_your_entry",
            "location": 589,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_delete_entry_incorrect_password": {
            "name": "test_delete_entry_incorrect_password",
            "location": 622,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ],
                "active_user": [
                    "str",
                    "float",
                    "Type",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ]
            }
        },
        "test_get_entries": {
            "name": "test_get_entries",
            "location": 638,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "test_get_entries_not_your_entry": {
            "name": "test_get_entries_not_your_entry",
            "location": 665,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "test_update_entry_versions": {
            "name": "test_update_entry_versions",
            "location": 711,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "_assert_links_equal": {
            "name": "_assert_links_equal",
            "location": 725,
            "return": [
                "None"
            ],
            "arguments": {
                "l1": [
                    "Dict[str,Set[str]]",
                    "float",
                    "Dict[str,set[str]]",
                    "Dict[str,int]",
                    "List[List[str]]",
                    "List[list[str]]",
                    "Mapping[str,str]",
                    "Mapping"
                ],
                "l2": [
                    "Dict[str,Set[str]]",
                    "float",
                    "Dict[str,set[str]]",
                    "Dict[str,int]",
                    "List[List[str]]",
                    "List[list[str]]",
                    "Mapping[str,str]",
                    "Mapping"
                ]
            }
        },
        "test_get_links_empty": {
            "name": "test_get_links_empty",
            "location": 732,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "test_create_link": {
            "name": "test_create_link",
            "location": 741,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "test_decrypt_link": {
            "name": "test_decrypt_link",
            "location": 757,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "test_delete_link": {
            "name": "test_delete_link",
            "location": 772,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "test_delete_link_not_your_link": {
            "name": "test_delete_link_not_your_link",
            "location": 790,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_delete_link_invalid_link": {
            "name": "test_delete_link_invalid_link",
            "location": 820,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_edit_link": {
            "name": "test_edit_link",
            "location": 840,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "test_decrypt_links_no_links": {
            "name": "test_decrypt_links_no_links",
            "location": 863,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_decrypt_links_some_not_yours": {
            "name": "test_decrypt_links_some_not_yours",
            "location": 873,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "test_decrypt_links_too_many": {
            "name": "test_decrypt_links_too_many",
            "location": 901,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "test_decrypt_links_bad_password": {
            "name": "test_decrypt_links_bad_password",
            "location": 919,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "test_decrypt_links_max": {
            "name": "test_decrypt_links_max",
            "location": 934,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "test_get_services": {
            "name": "test_get_services",
            "location": 956,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "test_get_current_user": {
            "name": "test_get_current_user",
            "location": 969,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask",
                    "app.utils.models.ModelManager"
                ],
                "active_user": [
                    "core.models.Recipe"
                ]
            }
        },
        "test_update_current_user_username": {
            "name": "test_update_current_user_username",
            "location": 985,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ],
                "active_user": [
                    "core.models.Recipe"
                ]
            }
        },
        "db.teardown": {
            "name": "teardown",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "app.teardown": {
            "name": "teardown",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "passzero-master/tests/unit_tests/test_backend.py": {
        "app": {
            "name": "app",
            "location": 30,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "db": {
            "name": "db",
            "location": 52,
            "return": [
                "Callable"
            ],
            "arguments": {
                "app": [],
                "request": [
                    "str",
                    "bool",
                    "bytes",
                    "float",
                    "List[str]",
                    "int"
                ]
            }
        },
        "session": {
            "name": "session",
            "location": 69,
            "return": [
                "dict",
                "Exception",
                "tartare.core.models.Job",
                "Dict[str, Any]",
                "str",
                "Dict[str, Union[str, Set]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "db": [
                    "Dict"
                ],
                "request": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_create_inactive_user_sha512": {
            "name": "test_create_inactive_user_sha512",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "id3c.db.types.KitRecord"
                ]
            }
        },
        "test_create_inactive_user_argon2": {
            "name": "test_create_inactive_user_argon2",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "id3c.db.types.KitRecord"
                ]
            }
        },
        "test_create_inactive_user": {
            "name": "test_create_inactive_user",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.scoping.scoped_session",
                    "sqlalchemy.orm.Session",
                    "id3c.db.types.KitRecord",
                    "sqlalchemy.orm.session.Session",
                    "arxiv.users.domain.User"
                ]
            }
        },
        "test_delete_account": {
            "name": "test_delete_account",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session.Transaction",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "test_insert_entry_for_user": {
            "name": "test_insert_entry_for_user",
            "location": 174,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "session": [
                    "List[dict[str,Any]]",
                    "str",
                    "sqlalchemy.orm.Session",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "test_delete_entry": {
            "name": "test_delete_entry",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "sqlalchemy.orm.scoping.scoped_session"
                ]
            }
        },
        "test_delete_pinned_entry": {
            "name": "test_delete_pinned_entry",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "test_delete_all_entries": {
            "name": "test_delete_all_entries",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "__encrypt_decrypt_entry": {
            "name": "__encrypt_decrypt_entry",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "version": [
                    "str",
                    "bytes",
                    "Tuple[str,int]",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "test_encrypt_decrypt_entry_v5": {
            "name": "test_encrypt_decrypt_entry_v5",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encrypt_decrypt_entry_v4": {
            "name": "test_encrypt_decrypt_entry_v4",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encrypt_decrypt_entry_v3": {
            "name": "test_encrypt_decrypt_entry_v3",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fail_encrypt_entry_v2": {
            "name": "test_fail_encrypt_entry_v2",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "__edit_entry": {
            "name": "__edit_entry",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session"
                ],
                "version": [
                    "str",
                    "int",
                    "Type",
                    "None",
                    "discord.User",
                    "Optional[int]"
                ]
            }
        },
        "test_edit_entry_v3": {
            "name": "test_edit_entry_v3",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "deeplearning.ml4pl.models.log_database.Database",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "test_edit_entry_v4": {
            "name": "test_edit_entry_v4",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "deeplearning.ml4pl.models.log_database.Database",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "test_edit_entry_v5": {
            "name": "test_edit_entry_v5",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "deeplearning.ml4pl.models.log_database.Database",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "test_edit_entry_fail_validation": {
            "name": "test_edit_entry_fail_validation",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "test_edit_pinned_entry": {
            "name": "test_edit_pinned_entry",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "app.db_models.user.User",
                    "sqlalchemy.orm.Session",
                    "app.db.session.Session"
                ]
            }
        },
        "test_update_entry_versions_for_user": {
            "name": "test_update_entry_versions_for_user",
            "location": 463,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "asgard.models.job.ScheduledJob",
                    "asgard.models.user.User"
                ]
            }
        },
        "test_update_entry_versions_for_user_only_latest": {
            "name": "test_update_entry_versions_for_user_only_latest",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Dict[str,Any]",
                    "sqlalchemy.orm.Session",
                    "abilian.core.sqlalchemy.SQLAlchemy",
                    "grouper.models.permission.Permission",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "test_update_entry_versions_for_user_no_entries": {
            "name": "test_update_entry_versions_for_user_no_entries",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.scoping.scoped_session"
                ]
            }
        },
        "test_get_account_with_email": {
            "name": "test_get_account_with_email",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "zerver.models.UserProfile",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "django.contrib.auth.models.User",
                    "app.models.User"
                ]
            }
        },
        "test_change_password": {
            "name": "test_change_password",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "app.models.User"
                ]
            }
        },
        "test_password_strength_scores": {
            "name": "test_password_strength_scores",
            "location": 598,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_services_map": {
            "name": "test_get_services_map",
            "location": 617,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "test_edit_document": {
            "name": "test_edit_document",
            "location": 626,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Dict[str,Any]",
                    "sqlalchemy.orm.Session",
                    "abilian.core.sqlalchemy.SQLAlchemy",
                    "sqlalchemy.orm.scoping.scoped_session"
                ]
            }
        },
        "test_edit_nonexistant_document": {
            "name": "test_edit_nonexistant_document",
            "location": 657,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.Session",
                    "abilian.core.sqlalchemy.SQLAlchemy",
                    "grouper.models.permission.Permission"
                ]
            }
        },
        "test_edit_not_your_document": {
            "name": "test_edit_not_your_document",
            "location": 678,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "abilian.core.sqlalchemy.SQLAlchemy",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "app.models.User"
                ]
            }
        },
        "app.teardown": {
            "name": "teardown",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "db.teardown": {
            "name": "teardown",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "session.teardown": {
            "name": "teardown",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "passzero-master/tests/unit_tests/test_crypto_utils.py": {
        "test_encrypt_decrypt_v2": {
            "name": "test_encrypt_decrypt_v2",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "passzero-master/tests/unit_tests/test_docs.py": {
        "PassZeroDocTester.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroDocTester.tearDown": {
            "name": "tearDown",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroDocTester._create_active_account": {
            "name": "_create_active_account",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "neuromation.api.JobStatus"
                ],
                "password": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "m1": [
                    "str",
                    "int"
                ]
            }
        },
        "PassZeroDocTester.test_no_docs": {
            "name": "test_no_docs",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroDocTester.__create_and_verify_text_doc": {
            "name": "__create_and_verify_text_doc",
            "location": 67,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroDocTester.__create_and_verify_binary_doc": {
            "name": "__create_and_verify_binary_doc",
            "location": 87,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroDocTester.__verify_delete_doc": {
            "name": "__verify_delete_doc",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "document_id": [
                    "str",
                    "int"
                ]
            }
        },
        "PassZeroDocTester.test_upload_and_get_doc_then_delete": {
            "name": "test_upload_and_get_doc_then_delete",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroDocTester.test_get_nonexistant_doc": {
            "name": "test_get_nonexistant_doc",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroDocTester.test_get_not_your_doc": {
            "name": "test_get_not_your_doc",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroDocTester.test_delete_nonexistant_doc": {
            "name": "test_delete_nonexistant_doc",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassZeroDocTester.test_delete_not_your_doc": {
            "name": "test_delete_not_your_doc",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "passzero-master/tests/unit_tests/test_email.py": {
        "test_send_email_no_api_key": {
            "name": "test_send_email_no_api_key",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_send_email_post_failed": {
            "name": "test_send_email_post_failed",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "m": [
                    "int"
                ]
            }
        },
        "test_send_email": {
            "name": "test_send_email",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "m": []
            }
        },
        "test_send_recovery_email": {
            "name": "test_send_recovery_email",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_send_confirmation_email": {
            "name": "test_send_confirmation_email",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "passzero-master/tests/unit_tests/test_export_utils.py": {
        "app": {
            "name": "app",
            "location": 19,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "db": {
            "name": "db",
            "location": 41,
            "return": [
                "Callable"
            ],
            "arguments": {
                "app": [],
                "request": [
                    "str",
                    "bool",
                    "bytes",
                    "float",
                    "List[str]",
                    "int"
                ]
            }
        },
        "session": {
            "name": "session",
            "location": 58,
            "return": [
                "dict",
                "Exception",
                "tartare.core.models.Job",
                "Dict[str, Any]",
                "str",
                "Dict[str, Union[str, Set]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "db": [
                    "Dict"
                ],
                "request": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_assert_entries_equal": {
            "name": "_assert_entries_equal",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "e1": [
                    "Dict",
                    "Dict[str,Any]"
                ],
                "e2": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_export_decrypted_entries": {
            "name": "test_export_decrypted_entries",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "id3c.db.types.KitRecord"
                ]
            }
        },
        "app.teardown": {
            "name": "teardown",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "db.teardown": {
            "name": "teardown",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "session.teardown": {
            "name": "teardown",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "passzero-master/tests/unit_tests/test_templates.py": {
        "test_client": {
            "name": "test_client",
            "location": 26,
            "return": [
                "app.utils.models.ModelManager",
                "int"
            ],
            "arguments": {}
        },
        "_create_active_account": {
            "name": "_create_active_account",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "email": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "_create_entry": {
            "name": "_create_entry",
            "location": 64,
            "return": [
                "float",
                "bool",
                "Optional[Callable[..., Any]]"
            ],
            "arguments": {
                "client": [
                    "salon.models.Stylist"
                ]
            }
        },
        "_create_document": {
            "name": "_create_document",
            "location": 76,
            "return": [
                "int",
                "Optional[str]",
                "float",
                "List[Dict[str, Any]]",
                "Optional[int]",
                "django.db.models.query.QuerySet"
            ],
            "arguments": {
                "client": [
                    "salon.models.Stylist"
                ]
            }
        },
        "test_landing_template": {
            "name": "test_landing_template",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "neuromation.api.Client",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_login_template": {
            "name": "test_login_template",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "neuromation.api.Client",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_signup_template": {
            "name": "test_signup_template",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "neuromation.api.Client",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_about_template": {
            "name": "test_about_template",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "neuromation.api.Client",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_version_template": {
            "name": "test_version_template",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "neuromation.api.Client",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_recover_template": {
            "name": "test_recover_template",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "neuromation.api.Client",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_post_account_delete_no_login": {
            "name": "test_post_account_delete_no_login",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "neuromation.api.Client",
                    "flask.testing.FlaskClient",
                    "str"
                ]
            }
        },
        "test_post_confirm_signup_no_login": {
            "name": "test_post_confirm_signup_no_login",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "neuromation.api.Client",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_post_login_no_login": {
            "name": "test_post_login_no_login",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "neuromation.api.Client",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_post_delete_no_login": {
            "name": "test_post_delete_no_login",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "neuromation.api.Client",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_post_update_no_login": {
            "name": "test_post_update_no_login",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "neuromation.api.Client",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_post_create_no_login": {
            "name": "test_post_create_no_login",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "neuromation.api.Client",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_post_export_no_login": {
            "name": "test_post_export_no_login",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "neuromation.api.Client",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_export_no_login": {
            "name": "test_export_no_login",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "neuromation.api.Client",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_edit_entry_no_login": {
            "name": "test_edit_entry_no_login",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_new_entry_no_login": {
            "name": "test_new_entry_no_login",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_view_entries_no_login": {
            "name": "test_view_entries_no_login",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_view_links_no_login": {
            "name": "test_view_links_no_login",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_new_link_no_login": {
            "name": "test_new_link_no_login",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_edit_link_no_login": {
            "name": "test_edit_link_no_login",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_view_docs_no_login": {
            "name": "test_view_docs_no_login",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_new_doc_no_login": {
            "name": "test_new_doc_no_login",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_edit_doc_no_login": {
            "name": "test_edit_doc_no_login",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_view_decrypted_doc_no_login": {
            "name": "test_view_decrypted_doc_no_login",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_password_strength_no_login": {
            "name": "test_password_strength_no_login",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_entry_2fa_no_login": {
            "name": "test_entry_2fa_no_login",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_advanced_no_login": {
            "name": "test_advanced_no_login",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_profile_no_login": {
            "name": "test_profile_no_login",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_logout_no_login": {
            "name": "test_logout_no_login",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_signup_no_signup": {
            "name": "test_signup_no_signup",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_confirm_signup_no_token": {
            "name": "test_confirm_signup_no_token",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_confirm_signup_invalid_token": {
            "name": "test_confirm_signup_invalid_token",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_confirm_recover_no_token": {
            "name": "test_confirm_recover_no_token",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_confirm_recover_invalid_token": {
            "name": "test_confirm_recover_invalid_token",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_done_login_with_login": {
            "name": "test_done_login_with_login",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_done_edit_with_login": {
            "name": "test_done_edit_with_login",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_done_new_with_login": {
            "name": "test_done_new_with_login",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_done_login_post_delete": {
            "name": "test_done_login_post_delete",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_done_export_with_login": {
            "name": "test_done_export_with_login",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_root_with_login": {
            "name": "test_root_with_login",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_view_entries_with_login": {
            "name": "test_view_entries_with_login",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_new_entry_view_with_login": {
            "name": "test_new_entry_view_with_login",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_view_links_with_login": {
            "name": "test_view_links_with_login",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_new_link_view_with_login": {
            "name": "test_new_link_view_with_login",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_edit_link_no_link_with_login": {
            "name": "test_edit_link_no_link_with_login",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_view_docs_with_login": {
            "name": "test_view_docs_with_login",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_new_doc_view_with_login": {
            "name": "test_new_doc_view_with_login",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_view_decrypted_doc_no_doc_with_login": {
            "name": "test_view_decrypted_doc_no_doc_with_login",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_view_decrypted_doc_with_login": {
            "name": "test_view_decrypted_doc_with_login",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_edit_doc_no_doc_with_login": {
            "name": "test_edit_doc_no_doc_with_login",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_edit_doc_with_login": {
            "name": "test_edit_doc_with_login",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_edit_entry_view_with_login_invalid_entry": {
            "name": "test_edit_entry_view_with_login_invalid_entry",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_strength_view_with_login": {
            "name": "test_strength_view_with_login",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_2fa_view_with_login_no_entries": {
            "name": "test_2fa_view_with_login_no_entries",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_2fa_view_with_login_and_entries": {
            "name": "test_2fa_view_with_login_and_entries",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_advanced_view_with_login": {
            "name": "test_advanced_view_with_login",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_profile_view_with_login": {
            "name": "test_profile_view_with_login",
            "location": 524,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_edit_entry_with_login": {
            "name": "test_edit_entry_with_login",
            "location": 532,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_recover_account_confirm": {
            "name": "test_recover_account_confirm",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_signup_confirm": {
            "name": "test_signup_confirm",
            "location": 556,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_logout_with_login": {
            "name": "test_logout_with_login",
            "location": 569,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        }
    },
    "passzero-master/tests/unit_tests/test_user.py": {
        "test_authenticate_user": {
            "name": "test_authenticate_user",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_authenticate_user_argon2": {
            "name": "test_authenticate_user_argon2",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "passzero-master/tests/unit_tests/utils.py": {
        "get_test_decrypted_entry": {
            "name": "get_test_decrypted_entry",
            "location": 4,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "i": [
                    "Optional[int]",
                    "None",
                    "str",
                    "int",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "assert_decrypted_entries_equal": {
            "name": "assert_decrypted_entries_equal",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "actual": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,int]",
                    "float",
                    "Type[T]",
                    "Type"
                ],
                "expected": [
                    "Dict",
                    "Dict[str,Any]",
                    "Type",
                    "T"
                ]
            }
        },
        "assert_decrypted_links_equal": {
            "name": "assert_decrypted_links_equal",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "actual": [
                    "str",
                    "Type"
                ],
                "expected": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "passzero-master/tests/unit_tests/__init__.py": {},
    "passzero-master/tests/unit_tests/models/test_encryption_keys.py": {
        "test_encryption_key_db_empty": {
            "name": "test_encryption_key_db_empty",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encryption_key_db_nonempty": {
            "name": "test_encryption_key_db_nonempty",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "passzero-master/tests/unit_tests/models/test_entry.py": {
        "test_encrypt_and_decrypt_entry_v4": {
            "name": "test_encrypt_and_decrypt_entry_v4",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encrypt_and_decrypt_entry_v3": {
            "name": "test_encrypt_and_decrypt_entry_v3",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encrypt_and_decrypt_entry_v2": {
            "name": "test_encrypt_and_decrypt_entry_v2",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encrypt_and_decrypt_entry_v1": {
            "name": "test_encrypt_and_decrypt_entry_v1",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "passzero-master/tests/unit_tests/models/test_entry_v5.py": {
        "test_encrypt_and_decrypt_entry_v5": {
            "name": "test_encrypt_and_decrypt_entry_v5",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encrypt_and_decrypt_entry_v5_utf_password": {
            "name": "test_encrypt_and_decrypt_entry_v5_utf_password",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "passzero-master/tests/unit_tests/models/test_links.py": {
        "test_encrypt_and_decrypt_link_v1": {
            "name": "test_encrypt_and_decrypt_link_v1",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "passzero-master/tests/unit_tests/models/__init__.py": {},
    "passzero-master/utils/api.py": {
        "login": {
            "name": "login",
            "location": 13,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Dict[str,str]",
                    "Union[str,bytes]",
                    "bytes"
                ],
                "email": [
                    "str",
                    "Dict[str,str]",
                    "Dict",
                    "bytes"
                ],
                "password": [
                    "str",
                    "Dict[str,str]",
                    "Dict",
                    "bytes"
                ],
                "check_status": [
                    "bool",
                    "str"
                ]
            }
        },
        "logout": {
            "name": "logout",
            "location": 26,
            "return": [
                "List[str]",
                "bool"
            ],
            "arguments": {
                "app": []
            }
        },
        "get_csrf_token": {
            "name": "get_csrf_token",
            "location": 31,
            "return": [
                "dict",
                "bool",
                "int",
                "float",
                "List[List[str]]"
            ],
            "arguments": {
                "app": [
                    "str"
                ]
            }
        },
        "get_entries": {
            "name": "get_entries",
            "location": 40,
            "return": [
                "str",
                "Iterable[int]",
                "Optional[int]",
                "bool",
                "int"
            ],
            "arguments": {
                "app": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "check_status": [
                    "bool",
                    "str",
                    "Type",
                    "int"
                ]
            }
        },
        "create_entry": {
            "name": "create_entry",
            "location": 50,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Dict[str,object]",
                    "Dict",
                    "Dict[str,str]",
                    "bool",
                    "requests.models.Response"
                ],
                "entry": [
                    "str",
                    "tuple",
                    "Optional[str]"
                ],
                "token": [
                    "str",
                    "Dict"
                ],
                "check_status": [
                    "bool",
                    "Optional[str]",
                    "float",
                    "str"
                ]
            }
        },
        "delete_entry": {
            "name": "delete_entry",
            "location": 67,
            "return": [
                "List[str]",
                "str",
                "bool",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "app": [
                    "str",
                    "dict"
                ],
                "entry_id": [
                    "str",
                    "Dict[str,str]"
                ],
                "token": [
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "edit_entry": {
            "name": "edit_entry",
            "location": 77,
            "return": [
                "List[str]",
                "Optional[int]"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ],
                "entry_id": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "entry": [
                    "str",
                    "tuple",
                    "Optional[str]",
                    "int"
                ],
                "token": [
                    "str",
                    "List[str]",
                    "Dict",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "signup": {
            "name": "signup",
            "location": 86,
            "return": [
                "List[str]",
                "Optional[int]"
            ],
            "arguments": {
                "app": [
                    "str",
                    "int"
                ],
                "email": [
                    "str",
                    "Dict"
                ],
                "password": [
                    "str",
                    "Dict"
                ]
            }
        },
        "recover_account": {
            "name": "recover_account",
            "location": 98,
            "return": [
                "Set[str]",
                "bool",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Dict[str,Any]"
                ],
                "email": [
                    "str",
                    "Dict[str,str]",
                    "T"
                ],
                "csrf_token": [
                    "str",
                    "Dict[str,str]",
                    "T"
                ]
            }
        },
        "recover_account_confirm": {
            "name": "recover_account_confirm",
            "location": 112,
            "return": [
                "Set[str]",
                "bool",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Dict[str,str]",
                    "Optional[dict]",
                    "Dict",
                    "None"
                ],
                "password": [
                    "str"
                ],
                "recovery_token": [
                    "str"
                ],
                "csrf_token": [
                    "str"
                ]
            }
        },
        "activate_account": {
            "name": "activate_account",
            "location": 128,
            "return": [
                "List[str]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "app": [
                    "str"
                ],
                "token": [
                    "str"
                ]
            }
        },
        "update_user_password": {
            "name": "update_user_password",
            "location": 134,
            "return": [
                "List[str]",
                "Set[str]",
                "List[Match]",
                "dict",
                "List[Mapping[str, Any]]",
                "bool"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,dict[str,str]]"
                ],
                "old_password": [
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "new_password": [
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "csrf_token": [
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "check_status": [
                    "bool",
                    "str",
                    "List[Tuple[str,...]]"
                ]
            }
        },
        "get_json": {
            "name": "get_json",
            "location": 155,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "app": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "json_header_with_token": {
            "name": "json_header_with_token",
            "location": 163,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "token": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "json_post": {
            "name": "json_post",
            "location": 170,
            "return": [
                "set",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "session": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[dict]",
                    "None"
                ],
                "relative_url": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[dict]"
                ],
                "data": [
                    "Dict",
                    "str",
                    "Dict[str,Any]",
                    "Optional[dict]"
                ],
                "token": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Dict"
                ]
            }
        },
        "json_get": {
            "name": "json_get",
            "location": 183,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "dict"
            ],
            "arguments": {
                "session": [
                    "str"
                ],
                "relative_url": [
                    "str"
                ],
                "token": [
                    "Optional[str]",
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "get_entries_v2": {
            "name": "get_entries_v2",
            "location": 195,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "app": [
                    "str",
                    "List[str]",
                    "Tuple"
                ]
            }
        },
        "get_entry_v2": {
            "name": "get_entry_v2",
            "location": 202,
            "return": [
                "str",
                "int",
                "Iterable[int]"
            ],
            "arguments": {
                "app": [
                    "str",
                    "int"
                ],
                "entry_id": [
                    "str",
                    "int"
                ],
                "check_status": [
                    "bool",
                    "str",
                    "int",
                    "Dict[int,Dict[str,float]]"
                ]
            }
        },
        "login_with_token": {
            "name": "login_with_token",
            "location": 214,
            "return": [
                "bool"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "email": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "password": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "check_status": [
                    "bool",
                    "str"
                ]
            }
        },
        "get_encrypted_entries_with_token": {
            "name": "get_encrypted_entries_with_token",
            "location": 226,
            "return": [
                "bool",
                "List[Mapping[str, Any]]",
                "Union[List, Dict]",
                "int",
                "List[Optional[str]]",
                "str",
                "Iterable[str]",
                "Tuple[float, float]"
            ],
            "arguments": {
                "app": [
                    "str"
                ],
                "token": [
                    "str"
                ],
                "check_status": [
                    "bool"
                ]
            }
        }
    },
    "passzero-master/utils/convert_version.py": {
        "get_db_session": {
            "name": "get_db_session",
            "location": 37,
            "return": [
                "str",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {}
        },
        "update_entry": {
            "name": "update_entry",
            "location": 43,
            "return": [
                "Tuple[(passzero.models.entries.Entry, Any)]"
            ],
            "arguments": {
                "db_session": [
                    "str",
                    "models.Tag",
                    "Union[sqlalchemy.orm.session.Session, abilian.core.models.blob.Blob]",
                    "int",
                    "ocspdash.models.Authority"
                ],
                "user": [
                    "str",
                    "int",
                    "sqlalchemy.orm.session.Session"
                ],
                "entry": [
                    "str",
                    "medtagger.database.models.User",
                    "asgard.models.accounAccount"
                ],
                "dec_entry": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "password": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "convert": {
            "name": "convert",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "email": [
                    "str",
                    "int",
                    "List[int]"
                ],
                "password": [
                    "str",
                    "int",
                    "zerver.models.Realm",
                    "zerver.models.UserProfile"
                ],
                "target_version": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "download_and_save_entries": {
            "name": "download_and_save_entries",
            "location": 80,
            "return": [
                "str",
                "Dict",
                "Dict[str,int]",
                "Dict[str,str]",
                "float",
                "audio_profiling.models.AudioPage"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "save_entries": {
            "name": "save_entries",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "entries": [
                    "List[dict]",
                    "Dict",
                    "str",
                    "T",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "convert_live_to_v5": {
            "name": "convert_live_to_v5",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "email": [
                    "str",
                    "Dict[str,str]",
                    "None",
                    "zerver.models.UserProfile",
                    "Optional[zerver.models.Realm]"
                ],
                "password": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "base_url": [
                    "str",
                    "bool"
                ],
                "target_version": [
                    "int",
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "dry_run": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Dict[str,List[Any]]"
                ]
            }
        },
        "convert_live_to_v4": {
            "name": "convert_live_to_v4",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "email": [
                    "str",
                    "bool"
                ],
                "password": [
                    "str",
                    "bool"
                ],
                "base_url": [
                    "str"
                ],
                "target_version": [
                    "int",
                    "str"
                ],
                "cleanup": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "setup_logging": {
            "name": "setup_logging",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        }
    },
    "passzero-master/utils/create_entries.py": {
        "get_db_session": {
            "name": "get_db_session",
            "location": 13,
            "return": [
                "str",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {}
        },
        "parse_args": {
            "name": "parse_args",
            "location": 19,
            "return": [
                "argparse.Namespace",
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "setup_logging": {
            "name": "setup_logging",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "create_fake_entry": {
            "name": "create_fake_entry",
            "location": 38,
            "return": [
                "Dict[Text,Union[Text,bool]]",
                "bool",
                "float"
            ],
            "arguments": {
                "i": [
                    "int",
                    "Optional[int]",
                    "Sequence[int]",
                    "str",
                    "Union[float, str]"
                ]
            }
        }
    },
    "passzero-master/utils/create_user.py": {
        "get_db_session": {
            "name": "get_db_session",
            "location": 14,
            "return": [
                "Session",
                "str",
                "Dict[str,str]",
                "Dict"
            ],
            "arguments": {}
        },
        "parse_args": {
            "name": "parse_args",
            "location": 20,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        }
    },
    "passzero-master/utils/import_entries.py": {
        "get_db_session": {
            "name": "get_db_session",
            "location": 20,
            "return": [
                "str",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {}
        },
        "import_entries": {
            "name": "import_entries",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "email": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "entries": [
                    "str",
                    "bool"
                ]
            }
        },
        "read_entries_from_file": {
            "name": "read_entries_from_file",
            "location": 47,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "fp": [
                    "str"
                ]
            }
        },
        "delete_entries": {
            "name": "delete_entries",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "email": [
                    "str",
                    "models.Tag",
                    "ocspdash.models.Authority"
                ],
                "password": [
                    "str",
                    "zerver.models.UserProfile"
                ]
            }
        }
    },
    "passzero-master/utils/timing.py": {
        "read_words": {
            "name": "read_words",
            "location": 34,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "get_user_by_email": {
            "name": "get_user_by_email",
            "location": 43,
            "return": [
                "zam_repondeur.models.Lecture",
                "Callable",
                "asgard.models.user.User",
                "user_models.User",
                "int",
                "core.models.UserPreferences"
            ],
            "arguments": {
                "db_session": [
                    "bool",
                    "str",
                    "Dict",
                    "None",
                    "User",
                    "Optional[str]",
                    "Optional[sqlalchemy.orm.session.Session]",
                    "Optional[requests.sessions.Session]",
                    "django.contrib.auth.models.User"
                ],
                "email": [
                    "bool",
                    "str",
                    "Dict",
                    "None",
                    "User",
                    "Optional[str]",
                    "Optional[sqlalchemy.orm.session.Session]",
                    "Optional[requests.sessions.Session]",
                    "django.contrib.auth.models.User"
                ]
            }
        },
        "create_active_user": {
            "name": "create_active_user",
            "location": 48,
            "return": [
                "passzero.models.user.User"
            ],
            "arguments": {
                "db_session": [
                    "str",
                    "Dict",
                    "None",
                    "sqlalchemy.orm.Session",
                    "abilian.core.models.subjects.User",
                    "Optional[str]"
                ],
                "email": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "create_fake_user": {
            "name": "create_fake_user",
            "location": 55,
            "return": [
                "Tuple[(passzero.models.user.User, Union[(str, _T2)])]"
            ],
            "arguments": {
                "db_session": [
                    "str",
                    "zerver.models.UserProfile"
                ],
                "email": [
                    "None",
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "float",
                    "Union[str]",
                    "Optional[float]"
                ],
                "password": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Union[str]"
                ]
            }
        },
        "get_fake_account_name": {
            "name": "get_fake_account_name",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "random_nonce": [
                    "str",
                    "List",
                    "int"
                ]
            }
        },
        "create_fake_entry_for_user": {
            "name": "create_fake_entry_for_user",
            "location": 71,
            "return": [
                "passzero.models.entries.Entry"
            ],
            "arguments": {
                "db_session": [
                    "str"
                ],
                "user_id": [
                    "str"
                ],
                "user_pt_password": [
                    "str"
                ],
                "version": [
                    "str",
                    "int"
                ]
            }
        },
        "_decrypt_entry_v2": {
            "name": "_decrypt_entry_v2",
            "location": 98,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "pair": [
                    "List[list[int]]",
                    "str",
                    "List[int]",
                    "backend.src.sheets_commands.sheeGrid",
                    "bool",
                    "List[List[int]]",
                    "zam_repondeur.models.Amendement",
                    "int"
                ]
            }
        },
        "_decrypt_entries_multiprocess_v2": {
            "name": "_decrypt_entries_multiprocess_v2",
            "location": 106,
            "return": [
                "list"
            ],
            "arguments": {
                "entries": [
                    "bytes",
                    "faustypes.models.ModelT"
                ],
                "master_key": [
                    "bytes",
                    "faustypes.models.ModelT"
                ]
            }
        },
        "_decrypt_entries_normal_v2": {
            "name": "_decrypt_entries_normal_v2",
            "location": 116,
            "return": [
                "list"
            ],
            "arguments": {
                "db_session": [
                    "str",
                    "Dict",
                    "int",
                    "None",
                    "sqlalchemy.orm.session.Session",
                    "discord.User",
                    "Optional[str]"
                ],
                "user_id": [
                    "str",
                    "Dict",
                    "int",
                    "None",
                    "sqlalchemy.orm.session.Session",
                    "discord.User",
                    "Optional[str]"
                ],
                "master_key": [
                    "Dict",
                    "Dict[str,int]",
                    "None",
                    "Optional[TrackingData]",
                    "List[int]",
                    "Dict[bytes,bytes]",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "decrypt_entries_v2": {
            "name": "decrypt_entries_v2",
            "location": 127,
            "return": [
                "list"
            ],
            "arguments": {
                "enc_entries": [
                    "str",
                    "List",
                    "int",
                    "bool"
                ],
                "master_key": [
                    "str",
                    "List",
                    "int",
                    "bool"
                ]
            }
        },
        "time_decrypt_entries_v2": {
            "name": "time_decrypt_entries_v2",
            "location": 131,
            "return": [
                "str",
                "Callable",
                "float",
                "int"
            ],
            "arguments": {
                "db_session": [
                    "str",
                    "Dict",
                    "None",
                    "Optional[str]",
                    "Optional[django.db.models.Model]"
                ],
                "user_id": [
                    "str",
                    "Dict",
                    "None",
                    "Optional[str]",
                    "Optional[django.db.models.Model]"
                ],
                "user_pt_password": [
                    "str",
                    "int"
                ]
            }
        },
        "time_decrypt_entries_v1": {
            "name": "time_decrypt_entries_v1",
            "location": 142,
            "return": [
                "list"
            ],
            "arguments": {
                "db_session": [
                    "str",
                    "Dict",
                    "None",
                    "Optional[str]",
                    "Optional[django.db.models.Model]"
                ],
                "user_id": [
                    "str",
                    "Dict",
                    "None",
                    "Optional[str]",
                    "Optional[django.db.models.Model]"
                ],
                "user_pt_password": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "time_decrypt_entries": {
            "name": "time_decrypt_entries",
            "location": 153,
            "return": [
                "list"
            ],
            "arguments": {
                "db_session": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict",
                    "int",
                    "Optional[int]",
                    "Optional[django.db.models.Model]"
                ],
                "user_id": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict",
                    "int",
                    "Optional[int]",
                    "Optional[django.db.models.Model]"
                ],
                "user_pt_password": [
                    "str",
                    "bool",
                    "int",
                    "utils.types.JSON"
                ]
            }
        },
        "time_decrypt_partial": {
            "name": "time_decrypt_partial",
            "location": 164,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "db_session": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict",
                    "int",
                    "Optional[int]",
                    "Optional[django.db.models.Model]"
                ],
                "user_id": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict",
                    "int",
                    "Optional[int]",
                    "Optional[django.db.models.Model]"
                ],
                "user_pt_password": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "delete_all_entries_for_user": {
            "name": "delete_all_entries_for_user",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "db_session": [
                    "int",
                    "django.contrib.auth.models.User",
                    "sqlalchemy.orm.Session",
                    "str"
                ],
                "user_id": [
                    "int",
                    "str",
                    "sqlalchemy.orm.Session",
                    "django.contrib.auth.models.User"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "version": [
                    "str",
                    "int",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "main_api_v2": {
            "name": "main_api_v2",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "proportions": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "create_fake_entries_for_user": {
            "name": "create_fake_entries_for_user",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "db_session": [
                    "str",
                    "int"
                ],
                "user_id": [
                    "str",
                    "int"
                ],
                "password": [
                    "str",
                    "int"
                ],
                "version": [
                    "str",
                    "int"
                ],
                "num": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "save_user_id": {
            "name": "save_user_id",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "test_live": {
            "name": "test_live",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "version": [
                    "raiden.utils.Address"
                ]
            }
        },
        "get_live": {
            "name": "get_live",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "base_url": [
                    "str",
                    "Text"
                ],
                "num_samples": [
                    "int",
                    "str"
                ]
            }
        },
        "delete_live": {
            "name": "delete_live",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "time_jsonify_encrypted_entries": {
            "name": "time_jsonify_encrypted_entries",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "num_entries_list": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "Union[None, float, str]",
                    "Type[BaseException]"
                ],
                "cleanup": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "Union[None,float,str]",
                    "Type[BaseException]"
                ]
            }
        },
        "read_pstats": {
            "name": "read_pstats",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "fname": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ]
            }
        }
    },
    "passzero-master/utils/__init__.py": {}
}
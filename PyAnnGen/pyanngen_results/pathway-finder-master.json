{
    "pathway-finder-master/example.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pathway-finder-master/setup.py": {},
    "pathway-finder-master/__init__.py": {},
    "pathway-finder-master/pathway_finder/app.py": {
        "establish_connnection": {
            "name": "establish_connnection",
            "location": 25,
            "return": [
                "Optional[sqlite3.dbapi2.Connection]"
            ],
            "arguments": {}
        },
        "insert_job_number": {
            "name": "insert_job_number",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "job_number": [
                    "str",
                    "Dict",
                    "os.PathLike"
                ]
            }
        },
        "insert_job_data": {
            "name": "insert_job_data",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "job_number": [
                    "Dict[str,Any]",
                    "Dict",
                    "bool",
                    "bytes"
                ],
                "data": [
                    "str",
                    "Iterable[bytes]",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "retrieve_info": {
            "name": "retrieve_info",
            "location": 67,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "job_number": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "send_email": {
            "name": "send_email",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "email": [
                    "str",
                    "int",
                    "float",
                    "bytes",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "job_id": [
                    "str",
                    "int"
                ]
            }
        },
        "ping_pong": {
            "name": "ping_pong",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "index": {
            "name": "index",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "diagram": {
            "name": "diagram",
            "location": 164,
            "return": [
                "Dict[str, List[int]]",
                "Dict[str, Tuple[str, str, str, bool]]",
                "list",
                "Dict[str, List[str]]",
                "dict",
                "bool",
                "int"
            ],
            "arguments": {
                "jobnumber": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "allowed_file": {
            "name": "allowed_file",
            "location": 189,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Union[str,bytes]",
                    "bytes"
                ]
            }
        }
    },
    "pathway-finder-master/pathway_finder/finder.py": {
        "ReadFile.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gbfile": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ReadFile.getGenome": {
            "name": "getGenome",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Finder.__post_init__": {
            "name": "__post_init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Finder.finder": {
            "name": "finder",
            "location": 91,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Finder.repProcedure": {
            "name": "repProcedure",
            "location": 116,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "Dict[str,Any]",
                    "List[str]",
                    "int",
                    "T",
                    "Optional[Dict[str,Any]]"
                ],
                "bp": [
                    "int",
                    "List",
                    "List[T]",
                    "T"
                ],
                "coreGene": [
                    "str",
                    "float",
                    "List",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "similarity": [
                    "str",
                    "float",
                    "List",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "Finder.flatten": {
            "name": "flatten",
            "location": 142,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "List",
                    "str",
                    "Set[str]",
                    "List[str]",
                    "List[Tuple[str,str]]",
                    "List[tuple[Union[str,str]]]",
                    "List[Tuple[int,int,Any]]",
                    "List[tuple[Union[int,int,Any]]]"
                ]
            }
        }
    },
    "pathway-finder-master/pathway_finder/__init__.py": {},
    "pathway-finder-master/pathway_finder/utils/connector.py": {
        "BioConnect.__post_init__": {
            "name": "__post_init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BioConnect.load": {
            "name": "load",
            "location": 60,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "accession": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "BioConnect.bioBlast": {
            "name": "bioBlast",
            "location": 68,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "seq": [
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "pathway-finder-master/pathway_finder/utils/form.py": {},
    "pathway-finder-master/pathway_finder/utils/processor.py": {
        "ReadGB.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "genbank": [
                    "str",
                    "TextIO",
                    "IO[Any]",
                    "float",
                    "IO",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "ReadGB.provideOrg": {
            "name": "provideOrg",
            "location": 63,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadGB.readfile": {
            "name": "readfile",
            "location": 67,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Writer.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "genes": []
            }
        },
        "Writer.parse": {
            "name": "parse",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pathway-finder-master/pathway_finder/utils/structures.py": {
        "Organism.info": {
            "name": "info",
            "location": 38,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gene.keys": {
            "name": "keys",
            "location": 58,
            "return": [
                "Tuple[(Any, Any, Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gene.values": {
            "name": "values",
            "location": 63,
            "return": [
                "Gene",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Genome.addGene": {
            "name": "addGene",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gene": [
                    "Dict",
                    "Dict[int,int]",
                    "Dict[str,Any]",
                    "List[Tuple[Any,...]]",
                    "Mapping"
                ]
            }
        },
        "Genome.findGene": {
            "name": "findGene",
            "location": 84,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "ident": [
                    "str",
                    "bool",
                    "Type",
                    "OrderedDict",
                    "int",
                    "Any",
                    "Optional[Union[Any,str]]",
                    "None"
                ]
            }
        },
        "Genome.findCoreGeneBySimilarity": {
            "name": "findCoreGeneBySimilarity",
            "location": 92,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "seq": [
                    "Dict",
                    "str",
                    "OrderedDict",
                    "List[Dict[str,Any]]",
                    "Union[int,float,complex]",
                    "List[dict[str,Any]]",
                    "int",
                    "float",
                    "complex"
                ],
                "similarity": [
                    "int",
                    "Set",
                    "str"
                ]
            }
        },
        "Genome.setCore": {
            "name": "setCore",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ident": [
                    "bool",
                    "float"
                ]
            }
        },
        "Genome.__setCore__": {
            "name": "__setCore__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ident": [
                    "str",
                    "int",
                    "Iterable[Sequence[str]]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Genome.getCore": {
            "name": "getCore",
            "location": 111,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Genome.build": {
            "name": "build",
            "location": 115,
            "return": [
                "bool",
                "List"
            ],
            "arguments": {
                "self": [],
                "ident": [
                    "str",
                    "Dict[str,str]",
                    "List[dict]"
                ],
                "bp": [
                    "int",
                    "Tuple[int]",
                    "List[LoadableRelation]",
                    "List[L]"
                ]
            }
        },
        "Genome.rbuild": {
            "name": "rbuild",
            "location": 126,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "Sequence[Sequence[Any]]",
                    "Tuple[float, float]",
                    "dict"
                ],
                "size": [
                    "str",
                    "bool",
                    "Sequence[Sequence[Any]]",
                    "Dict",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ],
                "bp": [
                    "str",
                    "Tuple[str,str,str]",
                    "Tuple[Union[str,str,str]]",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]",
                    "Optional[int]",
                    "int",
                    "Optional[float]",
                    "None",
                    "float"
                ]
            }
        },
        "Genome.lbuild": {
            "name": "lbuild",
            "location": 145,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "Sequence[Sequence[Any]]",
                    "Tuple[float, float]",
                    "dict"
                ],
                "size": [
                    "str",
                    "bool",
                    "Sequence[Sequence[Any]]",
                    "Dict",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ],
                "bp": [
                    "str",
                    "Tuple[str,str,str]",
                    "Tuple[Union[str,str,str]]",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]",
                    "Optional[int]",
                    "int",
                    "Optional[float]",
                    "None",
                    "float"
                ]
            }
        },
        "Genome.buildsimilarity": {
            "name": "buildsimilarity",
            "location": 164,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List",
                    "str",
                    "int",
                    "Set",
                    "Union[str,list]",
                    "Iterable[int]"
                ],
                "bp": [
                    "List",
                    "str",
                    "int",
                    "Set",
                    "Union[str,list]",
                    "Iterable[int]"
                ]
            }
        },
        "Genome.paths": {
            "name": "paths",
            "location": 171,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "dict",
                    "str"
                ],
                "bp": [
                    "int",
                    "Dict",
                    "str"
                ]
            }
        }
    },
    "pathway-finder-master/pathway_finder/utils/__init__.py": {}
}
{
    "pckr-master/setup.py": {},
    "pckr-master/pckr/client.py": {
        "init_user": {
            "name": "init_user",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": []
            }
        },
        "challenge_user_pk": {
            "name": "challenge_user_pk",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": []
            }
        },
        "challenge_user_has_pk": {
            "name": "challenge_user_has_pk",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": []
            }
        },
        "request_public_key": {
            "name": "request_public_key",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": []
            }
        },
        "surface_user": {
            "name": "surface_user",
            "location": 152,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": []
            }
        },
        "add_ipcache": {
            "name": "add_ipcache",
            "location": 198,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": []
            }
        },
        "remove_ipcache": {
            "name": "remove_ipcache",
            "location": 220,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": []
            }
        },
        "seek_user": {
            "name": "seek_user",
            "location": 242,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": []
            }
        },
        "ping_user": {
            "name": "ping_user",
            "location": 263,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": []
            }
        },
        "send_message": {
            "name": "send_message",
            "location": 284,
            "return": [
                "bool",
                "Optional[bool]",
                "int",
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "process_public_key_responses": {
            "name": "process_public_key_responses",
            "location": 307,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": []
            }
        },
        "process_public_key_requests": {
            "name": "process_public_key_requests",
            "location": 330,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": []
            }
        },
        "pulse_network": {
            "name": "pulse_network",
            "location": 352,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": []
            }
        },
        "check_net_topo": {
            "name": "check_net_topo",
            "location": 375,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": []
            }
        },
        "public_keys": {
            "name": "public_keys",
            "location": 396,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": []
            }
        },
        "ipcache": {
            "name": "ipcache",
            "location": 418,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": []
            }
        },
        "messages": {
            "name": "messages",
            "location": 440,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": []
            }
        },
        "massage_args": {
            "name": "massage_args",
            "location": 462,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "argparser": [
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 539,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "pckr-master/pckr/nt.py": {
        "_users": {
            "name": "_users",
            "location": 19,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "analyze_topo": {
            "name": "analyze_topo",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "dump_topo": {
            "name": "dump_topo",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pckr-master/pckr/plot_nt.py": {
        "main": {
            "name": "main",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pckr-master/pckr/__init__.py": {},
    "pckr-master/pckr/frame/frame.py": {
        "Frame.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "int",
                    "float",
                    "bool"
                ],
                "action": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Frame.__unicode__": {
            "name": "__unicode__",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame.__str__": {
            "name": "__str__",
            "location": 22,
            "return": [
                "Dict[str, bool]",
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pckr-master/pckr/frame/__init__.py": {},
    "pckr-master/pckr/message/message.py": {
        "Message.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Dict",
                    "int",
                    "None",
                    "Optional[bool]",
                    "bool"
                ],
                "filename": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "mime_type": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "user2": [
                    "Dict",
                    "int",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "Message.__str__": {
            "name": "__str__",
            "location": 28,
            "return": [
                "str",
                "Mapping",
                "Optional[Tuple[str, Any]]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message._send_key": {
            "name": "_send_key",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message._send_message": {
            "name": "_send_message",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message._send_message_term": {
            "name": "_send_message_term",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.send": {
            "name": "send",
            "location": 162,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pckr-master/pckr/message/__init__.py": {},
    "pckr-master/pckr/surface/surface.py": {
        "IncomingFrameThread.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "clientsocket": [
                    "int",
                    "float",
                    "bool"
                ],
                "username": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "IncomingFrameThread._receive_ping": {
            "name": "_receive_ping",
            "location": 46,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "IncomingFrameThread._receive_seek_user": {
            "name": "_receive_seek_user",
            "location": 66,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "str",
                    "bool"
                ]
            }
        },
        "IncomingFrameThread._receive_request_public_key": {
            "name": "_receive_request_public_key",
            "location": 212,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "request_frame": [
                    "Dict"
                ]
            }
        },
        "IncomingFrameThread._receive_public_key_response": {
            "name": "_receive_public_key_response",
            "location": 240,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "request_frame": [
                    "Dict[str,str]",
                    "Dict",
                    "bytes",
                    "str"
                ]
            }
        },
        "IncomingFrameThread._receive_challenge_user_pk": {
            "name": "_receive_challenge_user_pk",
            "location": 272,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "request_frame": []
            }
        },
        "IncomingFrameThread._receive_challenge_user_has_pk": {
            "name": "_receive_challenge_user_has_pk",
            "location": 309,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "request_frame": []
            }
        },
        "IncomingFrameThread._receive_send_message": {
            "name": "_receive_send_message",
            "location": 348,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "request_frame": []
            }
        },
        "IncomingFrameThread._receive_send_message_term": {
            "name": "_receive_send_message_term",
            "location": 411,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "request_frame": []
            }
        },
        "IncomingFrameThread._receive_send_message_key": {
            "name": "_receive_send_message_key",
            "location": 479,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "request_frame": [
                    "bytes"
                ]
            }
        },
        "IncomingFrameThread._receive_surface_user": {
            "name": "_receive_surface_user",
            "location": 522,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "request_frame": []
            }
        },
        "IncomingFrameThread._receive_seek_user_response": {
            "name": "_receive_seek_user_response",
            "location": 586,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "request_frame": []
            }
        },
        "IncomingFrameThread._receive_pulse_network": {
            "name": "_receive_pulse_network",
            "location": 662,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "request_frame": []
            }
        },
        "IncomingFrameThread._receive_check_net_topo": {
            "name": "_receive_check_net_topo",
            "location": 682,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "request_frame": []
            }
        },
        "IncomingFrameThread._receive_net_topo_damaged": {
            "name": "_receive_net_topo_damaged",
            "location": 699,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "request_frame": [
                    "str",
                    "int"
                ]
            }
        },
        "IncomingFrameThread.process_request": {
            "name": "process_request",
            "location": 714,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "IncomingFrameThread.run": {
            "name": "run",
            "location": 773,
            "return": [
                "Union[(bool, dict)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeekUsersThread.__init__": {
            "name": "__init__",
            "location": 812,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "bool",
                    "str",
                    "tracim.models.auth.User",
                    "bytes",
                    "bob_emploi.frontend.api.user_pb2.User",
                    "models.User",
                    "server.models.User"
                ]
            }
        },
        "SeekUsersThread.run": {
            "name": "run",
            "location": 816,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeekUsersThread._seek_users": {
            "name": "_seek_users",
            "location": 824,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SurfaceUserThread.__init__": {
            "name": "__init__",
            "location": 883,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "bool",
                    "str",
                    "tracim.models.auth.User",
                    "bytes",
                    "bob_emploi.frontend.api.user_pb2.User",
                    "models.User",
                    "server.models.User"
                ]
            }
        },
        "SurfaceUserThread.run": {
            "name": "run",
            "location": 887,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Surface.__init__": {
            "name": "__init__",
            "location": 908,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "int",
                    "float",
                    "bool"
                ],
                "port": [
                    "int",
                    "str"
                ]
            }
        },
        "Surface.run": {
            "name": "run",
            "location": 927,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pckr-master/pckr/surface/__init__.py": {},
    "pckr-master/pckr/user/user.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "User.__str__": {
            "name": "__str__",
            "location": 32,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.exists": {
            "name": "exists",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.path": {
            "name": "path",
            "location": 49,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.private_key_path": {
            "name": "private_key_path",
            "location": 62,
            "return": [
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.current_ip_port": {
            "name": "current_ip_port",
            "location": 74,
            "return": [
                "None",
                "str",
                "Tuple[str,str]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.private_key_text": {
            "name": "private_key_text",
            "location": 83,
            "return": [
                "str",
                "bool",
                "List[str]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.message_keys_path": {
            "name": "message_keys_path",
            "location": 96,
            "return": [
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.pulse_network": {
            "name": "pulse_network",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "custody_chain": [
                    "List",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "User.surface": {
            "name": "surface",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.messages_path": {
            "name": "messages_path",
            "location": 179,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.messages": {
            "name": "messages",
            "location": 183,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.public_key_path": {
            "name": "public_key_path",
            "location": 201,
            "return": [
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.public_key_text": {
            "name": "public_key_text",
            "location": 214,
            "return": [
                "str",
                "bool",
                "List[str]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.public_keys_path": {
            "name": "public_keys_path",
            "location": 227,
            "return": [
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.public_keys": {
            "name": "public_keys",
            "location": 240,
            "return": [
                "List",
                "int",
                "str",
                "Tuple[str,int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.seek_tokens_path": {
            "name": "seek_tokens_path",
            "location": 264,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.seek_tokens": {
            "name": "seek_tokens",
            "location": 268,
            "return": [
                "List",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.seek_user": {
            "name": "seek_user",
            "location": 278,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user2": [
                    "str",
                    "Callable[,str]",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "User.get_contact_public_key": {
            "name": "get_contact_public_key",
            "location": 326,
            "return": [
                "None",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "contact": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "User.init_directory_structure": {
            "name": "init_directory_structure",
            "location": 333,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.init_rsa": {
            "name": "init_rsa",
            "location": 360,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.ping_user": {
            "name": "ping_user",
            "location": 370,
            "return": [
                "Dict[str, Union[int, str]]",
                "Optional[Dict[str, Any]]",
                "bytes",
                "Optional[Dict[str, str]]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "user2": []
            }
        },
        "User.challenge_user_pk": {
            "name": "challenge_user_pk",
            "location": 382,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user2": [
                    "str"
                ]
            }
        },
        "User.challenge_user_has_pk": {
            "name": "challenge_user_has_pk",
            "location": 405,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user2": [
                    "Dict[str,Any]"
                ]
            }
        },
        "User.public_key_requests_path": {
            "name": "public_key_requests_path",
            "location": 437,
            "return": [
                "Optional[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.public_key_requests": {
            "name": "public_key_requests",
            "location": 441,
            "return": [
                "List[dict]",
                "Optional[bytes]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.store_volunteered_public_key": {
            "name": "store_volunteered_public_key",
            "location": 453,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ]
            }
        },
        "User.store_public_key_request": {
            "name": "store_public_key_request",
            "location": 464,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, str]",
                    "Mapping",
                    "dict"
                ]
            }
        },
        "User.process_public_key_request": {
            "name": "process_public_key_request",
            "location": 477,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "User.remove_public_key_request": {
            "name": "remove_public_key_request",
            "location": 500,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Exception"
                ]
            }
        },
        "User.public_key_responses_path": {
            "name": "public_key_responses_path",
            "location": 516,
            "return": [
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.public_key_responses": {
            "name": "public_key_responses",
            "location": 520,
            "return": [
                "List[dict]",
                "Dict",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.store_public_key_response": {
            "name": "store_public_key_response",
            "location": 533,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "str",
                    "IO[str]"
                ]
            }
        },
        "User.process_public_key_response": {
            "name": "process_public_key_response",
            "location": 547,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "str",
                    "Iterable",
                    "Dict[str,Any]",
                    "Iterator"
                ]
            }
        },
        "User.remove_public_key_response": {
            "name": "remove_public_key_response",
            "location": 564,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "User.ipcache_path": {
            "name": "ipcache_path",
            "location": 581,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.ipcache": {
            "name": "ipcache",
            "location": 594,
            "return": [
                "Dict",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.remove_contact_ip_port": {
            "name": "remove_contact_ip_port",
            "location": 612,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ]
            }
        },
        "User.get_contact_ip_port": {
            "name": "get_contact_ip_port",
            "location": 638,
            "return": [
                "str",
                "Tuple",
                "Optional[str]",
                "Tuple[None]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "bool"
                ]
            }
        },
        "User.set_contact_ip_port": {
            "name": "set_contact_ip_port",
            "location": 658,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "ip": [
                    "str"
                ],
                "port": [
                    "str"
                ]
            }
        },
        "User.hashed_ipcache": {
            "name": "hashed_ipcache",
            "location": 682,
            "return": [
                "Dict",
                "Callable",
                "bytes",
                "T",
                "int",
                "IO"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.flush_inconsistent_user": {
            "name": "flush_inconsistent_user",
            "location": 704,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user2": [
                    "str",
                    "Dict"
                ]
            }
        },
        "User.check_net_topo": {
            "name": "check_net_topo",
            "location": 732,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "custody_chain": [
                    "List",
                    "Dict",
                    "bool",
                    "float"
                ],
                "hashed_ipcaches": [
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "pckr-master/pckr/user/__init__.py": {},
    "pckr-master/pckr/utilities/logging.py": {
        "setup_logger": {
            "name": "setup_logger",
            "location": 15,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "name": [
                    "str",
                    "None",
                    "Optional[str]",
                    "logging.Logger"
                ],
                "log_file": [
                    "str"
                ],
                "level": [
                    "int",
                    "str",
                    "Union[int, float, str]"
                ]
            }
        }
    },
    "pckr-master/pckr/utilities/__init__.py": {
        "flatten": {
            "name": "flatten",
            "location": 27,
            "return": [
                "list"
            ],
            "arguments": {
                "data_list": [
                    "Dict[str,set[str]]",
                    "List[Union[int,float]]",
                    "Dict[str,Set[str]]",
                    "int",
                    "Sequence[T]",
                    "T"
                ]
            }
        },
        "command_header": {
            "name": "command_header",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "action": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Iterable[str]",
                    "Iterable[Dict[str,Any]]",
                    "Iterable[dict[str,Any]]",
                    "Union[Sequence[str],Sequence[int]]",
                    "Sequence[str]",
                    "Sequence[int]"
                ],
                "args": []
            }
        },
        "split_contents": {
            "name": "split_contents",
            "location": 60,
            "return": [
                "list"
            ],
            "arguments": {
                "contents": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "List[int]"
                ],
                "split_size": [
                    "int",
                    "Set[int]",
                    "List",
                    "List[Dict[str,Any]]",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "hexstr2bytes": {
            "name": "hexstr2bytes",
            "location": 89,
            "return": [
                "bytes"
            ],
            "arguments": {
                "hs": [
                    "int",
                    "Iterable[Any]",
                    "Dict[str,bool]"
                ]
            }
        },
        "bytes2hexstr": {
            "name": "bytes2hexstr",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "bs": [
                    "str",
                    "Dict",
                    "Optional[Union[str,bytes]]",
                    "bytes",
                    "None"
                ]
            }
        },
        "str2hashed_hexstr": {
            "name": "str2hashed_hexstr",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "Union[str,Iterable[str]]",
                    "Iterable[str]"
                ]
            }
        },
        "pad_content": {
            "name": "pad_content",
            "location": 112,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "content": [
                    "bytes"
                ]
            }
        },
        "generate_rsa_pub_priv": {
            "name": "generate_rsa_pub_priv",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "encrypt_rsa": {
            "name": "encrypt_rsa",
            "location": 126,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "content": [
                    "str"
                ],
                "public_key_text": [
                    "str",
                    "bytes",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "decrypt_rsa": {
            "name": "decrypt_rsa",
            "location": 133,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "content": [
                    "str",
                    "AnyStr",
                    "Union[str,int]",
                    "int"
                ],
                "private_key_text": [
                    "str",
                    "bytes",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "encrypt_symmetric": {
            "name": "encrypt_symmetric",
            "location": 140,
            "return": [
                "bytes"
            ],
            "arguments": {
                "content": [
                    "str",
                    "Union[str,bytes,IO[bytes]]",
                    "bytes",
                    "IO"
                ],
                "password": [
                    "str",
                    "int",
                    "bytes"
                ],
                "callback": [
                    "str",
                    "None",
                    "Dict",
                    "List",
                    "bytes"
                ]
            }
        },
        "decrypt_symmetric": {
            "name": "decrypt_symmetric",
            "location": 174,
            "return": [
                "Union[(bytes, str)]"
            ],
            "arguments": {
                "content": [
                    "str",
                    "bytes",
                    "List[str]"
                ],
                "password": [
                    "str",
                    "int",
                    "bytes"
                ],
                "decode": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "normalize_path": {
            "name": "normalize_path",
            "location": 210,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "is_binary": {
            "name": "is_binary",
            "location": 228,
            "return": [
                "bool"
            ],
            "arguments": {
                "mt": [
                    "str",
                    "int"
                ]
            }
        },
        "send_frame_users": {
            "name": "send_frame_users",
            "location": 246,
            "return": [
                "str",
                "List[str]",
                "List",
                "bool",
                "Optional[str]",
                "List[Tuple[str,str]]",
                "Callable",
                "Dict"
            ],
            "arguments": {
                "frame": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "user1": [
                    "str"
                ],
                "user2": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "pckr-master/scripts/bootstrap_new_user.py": {
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pckr-master/scripts/damage_ipcache.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pckr-master/scripts/grant_pks.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pckr-master/scripts/stitch_ips.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pckr-master/scripts/stitch_network.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pckr-master/scripts/tenuous.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pckr-master/scripts/utils.py": {
        "gather_user_ip_ports": {
            "name": "gather_user_ip_ports",
            "location": 10,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "rpk": {
            "name": "rpk",
            "location": 23,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "user1": [
                    "str",
                    "arxiv.users.domain.User",
                    "boucanpy.db.models.user.User"
                ],
                "user2": [
                    "str",
                    "arxiv.users.domain.User",
                    "boucanpy.db.models.user.User"
                ],
                "robustness": [
                    "int"
                ]
            }
        },
        "aip": {
            "name": "aip",
            "location": 68,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "users": [
                    "str",
                    "Optional[str]",
                    "boucanpy.db.models.user.User"
                ],
                "user1": [
                    "str",
                    "List[str]",
                    "arxiv.users.domain.User",
                    "boucanpy.db.models.user.User"
                ],
                "user2": [
                    "str",
                    "arxiv.users.domain.User",
                    "boucanpy.db.models.user.User",
                    "List[str]"
                ],
                "robustness": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "pckr-master/scripts/weird_network.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
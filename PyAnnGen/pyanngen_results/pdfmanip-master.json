{
    "pdfmanip-master/build.py": {
        "call_external_command": {
            "name": "call_external_command",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": []
            }
        },
        "mypy": {
            "name": "mypy",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pdfmanip-master/pdfmanip.py": {
        "usage": {
            "name": "usage",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "print_help": {
            "name": "print_help",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_pages": {
            "name": "get_pages",
            "location": 61,
            "return": [
                "int",
                "str",
                "Iterable[str]",
                "Sequence",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ],
                "last": [
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "print_info": {
            "name": "print_info",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "pdf": [
                    "str",
                    "pikepdf.Pdf",
                    "List[tuple[Union[str,Any]]]",
                    "List[str]",
                    "List[Tuple[str,Any]]",
                    "List[slice]",
                    "Union[slice,List[slice],List[int]]",
                    "List[int]"
                ]
            }
        },
        "write_file": {
            "name": "write_file",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "pdf": [
                    "pikepdf.Pdf",
                    "str",
                    "List[str]"
                ],
                "overwrite": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "List[str]",
                    "List"
                ]
            }
        },
        "open_pdf": {
            "name": "open_pdf",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "Iterable[str]"
                ],
                "what": [
                    "str",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "delete_pages": {
            "name": "delete_pages",
            "location": 108,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "pdf": [
                    "str",
                    "int"
                ],
                "pages": [
                    "str"
                ]
            }
        },
        "process": {
            "name": "process",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "bool"
                ]
            }
        },
        "delete_pages.minus_one": {
            "name": "minus_one",
            "location": 110,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "q": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    }
}
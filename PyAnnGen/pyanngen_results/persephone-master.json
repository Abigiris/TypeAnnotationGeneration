{
    "persephone-master/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "pytest_runtest_setup": {
            "name": "pytest_runtest_setup",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "item": [
                    "Dict[str, Any]",
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        }
    },
    "persephone-master/setup.py": {},
    "persephone-master/docs/conf.py": {},
    "persephone-master/persephone/config.py": {},
    "persephone-master/persephone/context_manager.py": {
        "cd.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "new_path": [
                    "str"
                ]
            }
        },
        "cd.__enter__": {
            "name": "__enter__",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "cd.__exit__": {
            "name": "__exit__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "etype": [
                    "Optional[BaseException]",
                    "BaseException",
                    "Callable[[str, object], None]",
                    "bool",
                    "None",
                    "Iterable[float]",
                    "typing.Callable[c, None]",
                    "typing.Iterable[float]"
                ],
                "value": [
                    "Optional[BaseException]",
                    "BaseException",
                    "Callable[[str, object], None]",
                    "bool",
                    "None",
                    "Iterable[float]",
                    "typing.Callable[c, None]",
                    "typing.Iterable[float]"
                ],
                "traceback": [
                    "Optional[BaseException]",
                    "BaseException",
                    "Callable[[str, object], None]",
                    "bool",
                    "None",
                    "Iterable[float]",
                    "typing.Callable[c, None]",
                    "typing.Iterable[float]"
                ]
            }
        }
    },
    "persephone-master/persephone/corpus.py": {
        "ensure_no_set_overlap": {
            "name": "ensure_no_set_overlap",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "train": [
                    "str",
                    "utils.tags.Tags"
                ],
                "valid": [
                    "str",
                    "utils.tags.Tags"
                ],
                "test": [
                    "str",
                    "utils.tags.Tags"
                ]
            }
        },
        "find_untranscribed_wavs": {
            "name": "find_untranscribed_wavs",
            "location": 49,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "wav_path": [
                    "str",
                    "Optional[str]"
                ],
                "transcription_path": [
                    "str"
                ],
                "label_type": [
                    "str"
                ]
            }
        },
        "get_untranscribed_prefixes_from_file": {
            "name": "get_untranscribed_prefixes_from_file",
            "location": 69,
            "return": [
                "List[int]",
                "List[str]",
                "list",
                "Tuple[int]",
                "List[Tuple[int, str, str]]"
            ],
            "arguments": {
                "target_directory": [
                    "str",
                    "list",
                    "bool",
                    "int"
                ]
            }
        },
        "determine_labels": {
            "name": "determine_labels",
            "location": 620,
            "return": [
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "Callable[[str], bool]"
            ],
            "arguments": {
                "target_dir": [
                    "pathlib.Path",
                    "str",
                    "Iterable[str]"
                ],
                "label_type": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "Corpus.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feat_type": [
                    "str",
                    "Optional[Sequence[str]]",
                    "Optional[Set[str]]",
                    "Optional[Dict[str, Any]]",
                    "List[Tuple[str, str]]",
                    "bool",
                    "Exception"
                ],
                "label_type": [
                    "str",
                    "Type[T]",
                    "Hashable"
                ],
                "tgt_dir": [
                    "pathlib.Path",
                    "str",
                    "Optional[Set[str]]",
                    "Dict[str, Any]",
                    "List[openapi_core.exceptions.OpenAPIError]",
                    "Optional[int]",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "Corpus.from_elan": {
            "name": "from_elan",
            "location": 238,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]",
                "numpy.ndarray"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ],
                "org_dir": [
                    "Tuple[str]",
                    "pathlib.Path",
                    "str",
                    "Optional[str]",
                    "Optional[Union[str, Any]]"
                ],
                "tgt_dir": [
                    "pathlib.Path",
                    "str",
                    "List[str]"
                ],
                "feat_type": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ],
                "label_type": [
                    "str"
                ]
            }
        },
        "Corpus.get_wav_dir": {
            "name": "get_wav_dir",
            "location": 320,
            "return": [
                "pathlib.Path",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.get_feat_dir": {
            "name": "get_feat_dir",
            "location": 323,
            "return": [
                "pathlib.Path",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.get_label_dir": {
            "name": "get_label_dir",
            "location": 326,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.train_prefix_fn": {
            "name": "train_prefix_fn",
            "location": 330,
            "return": [
                "str",
                "pathlib.Path",
                "int",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.valid_prefix_fn": {
            "name": "valid_prefix_fn",
            "location": 334,
            "return": [
                "str",
                "pathlib.Path",
                "Optional[Callable[[Any], None]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.test_prefix_fn": {
            "name": "test_prefix_fn",
            "location": 338,
            "return": [
                "pathlib.Path",
                "path.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.set_and_check_directories": {
            "name": "set_and_check_directories",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tgt_dir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "Corpus.initialize_labels": {
            "name": "initialize_labels",
            "location": 360,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "str",
                    "List[str]",
                    "Tuple[Literal]",
                    "bytes"
                ]
            }
        },
        "Corpus.prepare_feats": {
            "name": "prepare_feats",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.make_data_splits": {
            "name": "make_data_splits",
            "location": 397,
            "return": [
                "bytes",
                "Optional[bool]",
                "Union[tuple, list]",
                "raiden.utils.Signature"
            ],
            "arguments": {
                "self": [],
                "max_samples": [
                    "str",
                    "dict"
                ]
            }
        },
        "Corpus.read_prefixes": {
            "name": "read_prefixes",
            "location": 444,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "prefix_fn": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "Corpus.write_prefixes": {
            "name": "write_prefixes",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "prefixes": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "prefix_fn": [
                    "pathlib.Path",
                    "str",
                    "Tuple['cirq.Qid']"
                ]
            }
        },
        "Corpus.divide_prefixes": {
            "name": "divide_prefixes",
            "location": 467,
            "return": [
                "int",
                "bool",
                "dict",
                "float"
            ],
            "arguments": {
                "prefixes": [
                    "str",
                    "int"
                ]
            }
        },
        "Corpus.indices_to_labels": {
            "name": "indices_to_labels",
            "location": 500,
            "return": [
                "list",
                "dict",
                "Dict[str, List[Any]]",
                "numpy.ndarray",
                "List[str]",
                "int",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "indices": [
                    "dict",
                    "List[str]",
                    "str",
                    "list",
                    "set"
                ]
            }
        },
        "Corpus.labels_to_indices": {
            "name": "labels_to_indices",
            "location": 505,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "bool",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "numpy.ndarray",
                    "int",
                    "Optional[numpy.dtype]",
                    "numpy.array"
                ]
            }
        },
        "Corpus.num_feats": {
            "name": "num_feats",
            "location": 511,
            "return": [
                "int",
                "Optional[Dict[str, int]]",
                "List[List[int]]",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.prefixes_to_fns": {
            "name": "prefixes_to_fns",
            "location": 528,
            "return": [
                "Iterable[int]",
                "dict",
                "IO[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "prefixes": [
                    "str",
                    "pathlib.Path",
                    "List[str]"
                ]
            }
        },
        "Corpus.get_train_fns": {
            "name": "get_train_fns",
            "location": 538,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.get_valid_fns": {
            "name": "get_valid_fns",
            "location": 547,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.get_test_fns": {
            "name": "get_test_fns",
            "location": 551,
            "return": [
                "str",
                "int",
                "List[str]",
                "Mapping[str, Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.get_untranscribed_prefixes": {
            "name": "get_untranscribed_prefixes",
            "location": 555,
            "return": [
                "str",
                "pathlib.Path",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.get_untranscribed_fns": {
            "name": "get_untranscribed_fns",
            "location": 568,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.determine_prefixes": {
            "name": "determine_prefixes",
            "location": 573,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.review": {
            "name": "review",
            "location": 592,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.pickle": {
            "name": "pickle",
            "location": 604,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.from_pickle": {
            "name": "from_pickle",
            "location": 613,
            "return": [
                "Callable[[Any], bool]",
                "Sequence['cirq.Qid']",
                "Set[cmk.utils.type_defs.HostName]",
                "dict",
                "Optional[Dict[str, Any]]",
                "Dict[str, numpy.ndarray]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "List[pathlib.Path]",
                    "str",
                    "Path",
                    "Iterable[Any]"
                ],
                "tgt_dir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        }
    },
    "persephone-master/persephone/corpus_reader.py": {
        "CorpusReader.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "int",
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray"
                ],
                "num_train": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "batch_size": [
                    "int",
                    "str"
                ],
                "max_samples": [
                    "bool",
                    "int",
                    "float"
                ],
                "rand_seed": [
                    "int",
                    "numpy.ndarray",
                    "Optional[List[Any]]"
                ]
            }
        },
        "CorpusReader.load_batch": {
            "name": "load_batch",
            "location": 99,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "fn_batch": [
                    "int",
                    "Sequence[str]",
                    "set",
                    "bool",
                    "Iterable"
                ]
            }
        },
        "CorpusReader.make_batches": {
            "name": "make_batches",
            "location": 124,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "utterance_fns": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "CorpusReader.train_batch_gen": {
            "name": "train_batch_gen",
            "location": 129,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CorpusReader.valid_batch": {
            "name": "valid_batch",
            "location": 151,
            "return": [
                "str",
                "Callable",
                "dict",
                "Optional[float]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "CorpusReader.test_batch": {
            "name": "test_batch",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CorpusReader.untranscribed_batch_gen": {
            "name": "untranscribed_batch_gen",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CorpusReader.human_readable_hyp_ref": {
            "name": "human_readable_hyp_ref",
            "location": 174,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "dense_decoded": [
                    "str",
                    "List[int]",
                    "List[float]",
                    "numpy.ndarray",
                    "list"
                ],
                "dense_y": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "CorpusReader.human_readable": {
            "name": "human_readable",
            "location": 191,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dense_repr": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "CorpusReader.__repr__": {
            "name": "__repr__",
            "location": 204,
            "return": [
                "dict",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CorpusReader.calc_time": {
            "name": "calc_time",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CorpusReader.calc_time.get_number_of_frames": {
            "name": "get_number_of_frames",
            "location": 216,
            "return": [
                "List[str]",
                "str",
                "Callable",
                "int",
                "dss.config.Replica"
            ],
            "arguments": {
                "feat_fns": [
                    "int",
                    "Dict[str, Any]",
                    "tuple",
                    "bool"
                ]
            }
        },
        "CorpusReader.calc_time.numframes_to_minutes": {
            "name": "numframes_to_minutes",
            "location": 227,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "cmk.utils.type_defs.HostAddress",
                "str"
            ],
            "arguments": {
                "num_frames": [
                    "int",
                    "Optional[int]"
                ]
            }
        }
    },
    "persephone-master/persephone/distance.py": {
        "min_edit_distance": {
            "name": "min_edit_distance",
            "location": 9,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "source": [
                    "Iterable[str]",
                    "bool",
                    "List[Tuple[int, Any]]",
                    "Optional[Dict]",
                    "List[int]",
                    "List[Callable[[], None]]"
                ],
                "target": [
                    "bytes",
                    "List[str]",
                    "List[Dict]",
                    "int",
                    "Optional[T]",
                    "Sequence[T]"
                ],
                "ins_cost": [
                    "typing.Callable[, ]",
                    "numpy.ndarray",
                    "int",
                    "list"
                ],
                "del_cost": [
                    "typing.Callable[, ]",
                    "str",
                    "numpy.ndarray",
                    "Sequence[int]",
                    "bool",
                    "int"
                ],
                "sub_cost": [
                    "typing.Callable[, ]",
                    "str",
                    "numpy.ndarray",
                    "Sequence[int]",
                    "bool",
                    "int"
                ]
            }
        },
        "min_edit_distance_align": {
            "name": "min_edit_distance_align",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "source": [
                    "Tuple[int]",
                    "bytes",
                    "Optional[\"PNRelationMetaData\"]",
                    "Sequence[T]",
                    "int",
                    "list"
                ],
                "target": [
                    "int",
                    "bool"
                ],
                "ins_cost": [
                    "typing.Callable[, ]",
                    "int",
                    "str",
                    "float"
                ],
                "del_cost": [
                    "typing.Callable[, ]",
                    "int",
                    "str",
                    "float"
                ],
                "sub_cost": [
                    "typing.Callable[, ]",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "cluster_alignment_errors": {
            "name": "cluster_alignment_errors",
            "location": 150,
            "return": [
                "list[tuple[tuple[]]]",
                "str",
                "Sequence"
            ],
            "arguments": {
                "alignment": [
                    "Exception"
                ]
            }
        },
        "word_error_rate": {
            "name": "word_error_rate",
            "location": 178,
            "return": [
                "float",
                "Dict[str, int]",
                "Dict[str, Any]",
                "str",
                "bool"
            ],
            "arguments": {
                "ref": [
                    "numpy.array",
                    "List[str]",
                    "List['cirq.Qid']",
                    "list",
                    "Optional[List[str]]",
                    "callable"
                ],
                "hyp": [
                    "bool",
                    "int"
                ]
            }
        }
    },
    "persephone-master/persephone/exceptions.py": {},
    "persephone-master/persephone/experiment.py": {
        "get_exp_dir_num": {
            "name": "get_exp_dir_num",
            "location": 14,
            "return": [
                "int",
                "bool",
                "Sequence[Any]",
                "str",
                "float"
            ],
            "arguments": {
                "parent_dir": [
                    "str"
                ]
            }
        },
        "_prepare_directory": {
            "name": "_prepare_directory",
            "location": 20,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "directory_path": [
                    "str"
                ]
            }
        },
        "prep_sub_exp_dir": {
            "name": "prep_sub_exp_dir",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "parent_dir": [
                    "str",
                    "bool",
                    "List[Dict]",
                    "list[dict[, ]]"
                ]
            }
        },
        "prep_exp_dir": {
            "name": "prep_exp_dir",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "directory": [
                    "str"
                ]
            }
        },
        "get_simple_model": {
            "name": "get_simple_model",
            "location": 57,
            "return": [
                "str",
                "Model"
            ],
            "arguments": {
                "exp_dir": [
                    "str",
                    "int",
                    "list",
                    "list[]",
                    "Optional[int]",
                    "None"
                ],
                "corpus": [
                    "bytes",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "train_ready": {
            "name": "train_ready",
            "location": 85,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "corpus": [
                    "str",
                    "int"
                ],
                "directory": [
                    "str",
                    "float"
                ]
            }
        },
        "transcribe": {
            "name": "transcribe",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "model_path": [
                    "str"
                ],
                "corpus": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "get_simple_model.decide_batch_size": {
            "name": "decide_batch_size",
            "location": 61,
            "return": [
                "int",
                "str",
                "List[float]",
                "float"
            ],
            "arguments": {
                "num_train": [
                    "int",
                    "float",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "persephone-master/persephone/model.py": {
        "load_metagraph": {
            "name": "load_metagraph",
            "location": 27,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "model_path_prefix": [
                    "str",
                    "dict[str, str]",
                    "pathlib.Path",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "dense_to_human_readable": {
            "name": "dense_to_human_readable",
            "location": 37,
            "return": [
                "list[list[typing.Union[str,list[typing.Any]]]]",
                "bytes",
                "int",
                "IO",
                "List[str]",
                "cmk.utils.type_defs.HostAddress",
                "str"
            ],
            "arguments": {
                "dense_repr": [
                    "list[str]",
                    "Sequence[Sequence[int]]",
                    "bool",
                    "List[str]",
                    "float"
                ],
                "index_to_label": [
                    "str",
                    "int",
                    "list[list[typing.Any]]",
                    "list[str]",
                    "Optional[str]",
                    "List[List[Any]]",
                    "Iterator[str]",
                    "List[str]"
                ]
            }
        },
        "decode_corpus": {
            "name": "decode_corpus",
            "location": 49,
            "return": [
                "str",
                "Callable",
                "TextIO"
            ],
            "arguments": {
                "model_path_prefix": [
                    "str",
                    "None",
                    "int",
                    "Optional[pathlib.Path]",
                    "Union[str, pathlib.Path]",
                    "pathlib.Path"
                ],
                "corpus": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "decode": {
            "name": "decode",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "model_path_prefix": [
                    "str",
                    "pathlib.Path",
                    "int",
                    "pathlib2.Path",
                    "None",
                    "dict[str, str]",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "input_paths": [
                    "Sequence[pathlib.Path]",
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "label_set": [
                    "str"
                ]
            }
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exp_dir": [
                    "str",
                    "int",
                    "pathlib.Path"
                ],
                "corpus_reader": [
                    "bool",
                    "str",
                    "pathlib.Path",
                    "dict[, ]",
                    "dict"
                ]
            }
        },
        "Model.transcribe": {
            "name": "transcribe",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "restore_model_path": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Model.decode": {
            "name": "decode",
            "location": 236,
            "return": [
                "str",
                "Callable",
                "TextIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.eval": {
            "name": "eval",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "restore_model_path": [
                    "None",
                    "str",
                    "Optional[str]",
                    "pathlib.Path"
                ]
            }
        },
        "Model.output_best_scores": {
            "name": "output_best_scores",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "best_epoch_str": [
                    "str"
                ]
            }
        },
        "Model.train": {
            "name": "train",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "persephone-master/persephone/results.py": {
        "filter_labels": {
            "name": "filter_labels",
            "location": 11,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "sent": [
                    "Sequence[str]",
                    "str",
                    "dict",
                    "int"
                ],
                "labels": [
                    "Set[str]",
                    "str",
                    "Union[str, List]"
                ]
            }
        },
        "filtered_error_rate": {
            "name": "filtered_error_rate",
            "location": 18,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "hyps_path": [
                    "pathlib.Path"
                ],
                "refs_path": [
                    "pathlib.Path"
                ],
                "labels": [
                    "str",
                    "list",
                    "List[str]",
                    "Set[str]",
                    "Optional[tuple]"
                ]
            }
        },
        "latex_header": {
            "name": "latex_header",
            "location": 44,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "defaultdict"
            ],
            "arguments": {}
        },
        "fmt_latex_output": {
            "name": "fmt_latex_output",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "hyps": [
                    "bool",
                    "str",
                    "dict",
                    "int"
                ],
                "refs": [
                    "bool",
                    "str",
                    "dict",
                    "int"
                ],
                "prefixes": [
                    "Sequence[str]",
                    "str",
                    "BinaryIO"
                ],
                "out_fn": [
                    "pathlib.Path",
                    "IO",
                    "str",
                    "Optional[pathlib.Path]",
                    "Optional[str]",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "fmt_error_types": {
            "name": "fmt_error_types",
            "location": 98,
            "return": [
                "str",
                "Optional[str]",
                "Match"
            ],
            "arguments": {
                "hyps": [
                    "str",
                    "raiden.utils.PrivateKey",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.Address",
                    "raiden.utils.OneToNAddress",
                    "raiden.utils.BlockNumber"
                ],
                "refs": [
                    "str",
                    "raiden.utils.PrivateKey",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.Address",
                    "raiden.utils.OneToNAddress",
                    "raiden.utils.BlockNumber"
                ]
            }
        },
        "fmt_confusion_matrix": {
            "name": "fmt_confusion_matrix",
            "location": 132,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "hyps": [
                    "str",
                    "float",
                    "Tuple[float, float]",
                    "Dict[int, str]"
                ],
                "refs": [
                    "str",
                    "float",
                    "Tuple[float, float]",
                    "Dict[int, str]"
                ],
                "label_set": [
                    "Set[str]",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "str"
                ],
                "max_width": [
                    "bool",
                    "List[int]",
                    "Optional[List[int]]",
                    "int",
                    "Union[int, str]"
                ]
            }
        },
        "fmt_latex_untranscribed": {
            "name": "fmt_latex_untranscribed",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "hyps": [
                    "Sequence[Sequence[str]]",
                    "Sequence[str]",
                    "bool",
                    "T",
                    "Container[T]",
                    "Set[str]"
                ],
                "prefixes": [
                    "Sequence[Sequence[str]]",
                    "Sequence[str]",
                    "bool",
                    "T",
                    "Container[T]",
                    "Set[str]"
                ],
                "out_fn": [
                    "pathlib.Path",
                    "path.Path",
                    "str"
                ]
            }
        },
        "fmt_latex_untranscribed.utter_id_key": {
            "name": "utter_id_key",
            "location": 176,
            "return": [
                "bool",
                "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                "rl_algorithms.utils.config.ConfigDict",
                "str",
                "list"
            ],
            "arguments": {
                "hyp_prefix": [
                    "str",
                    "int",
                    "pathlib.Path",
                    "bytes"
                ]
            }
        }
    },
    "persephone-master/persephone/rnn_ctc.py": {
        "lstm_cell": {
            "name": "lstm_cell",
            "location": 12,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "hidden_size": [
                    "int"
                ]
            }
        },
        "Model.write_desc": {
            "name": "write_desc",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exp_dir": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "list[]",
                    "int",
                    "tuple[typing.Union[str,str]]",
                    "Union[int, List]",
                    "Tuple[str, str]"
                ],
                "corpus_reader": [
                    "int",
                    "str",
                    "float",
                    "List[str]",
                    "list[str]"
                ],
                "num_layers": [
                    "int",
                    "str",
                    "float"
                ],
                "hidden_size": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "float"
                ],
                "beam_width": [
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "decoding_merge_repeated": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        }
    },
    "persephone-master/persephone/utils.py": {
        "target_list_to_sparse_tensor": {
            "name": "target_list_to_sparse_tensor",
            "location": 19,
            "return": [
                "tuple[]",
                "int",
                "numpy.ndarray",
                "str",
                "Union[int, float]",
                "subprocess.Popen",
                "set",
                "bytes"
            ],
            "arguments": {
                "target_list": [
                    "list",
                    "List[T]",
                    "List[str]",
                    "List[dict]"
                ]
            }
        },
        "zero_pad": {
            "name": "zero_pad",
            "location": 35,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "matrix": [
                    "int",
                    "float",
                    "str"
                ],
                "to_length": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "collapse": {
            "name": "collapse",
            "location": 48,
            "return": [
                "float",
                "Set[str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "batch_x": [
                    "list[str]",
                    "str",
                    "int",
                    "list[dict[str, typing.Any]]",
                    "float",
                    "List[str]",
                    "Sequence[str]",
                    "List[Dict[str, Any]]"
                ],
                "time_major": [
                    "bool",
                    "int",
                    "float",
                    "List[str]",
                    "str",
                    "Sequence[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "load_batch_x": {
            "name": "load_batch_x",
            "location": 65,
            "return": [
                "tuple[]",
                "Callable[[T], bool]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "path_batch": [
                    "pathlib.Path",
                    "os.PathLike"
                ],
                "flatten": [
                    "bool",
                    "str",
                    "list"
                ],
                "time_major": [
                    "bool",
                    "str",
                    "int",
                    "type",
                    "Optional[str]"
                ]
            }
        },
        "batch_per": {
            "name": "batch_per",
            "location": 83,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "hyps": [
                    "List[int]",
                    "str",
                    "List[Tuple[str, str]]",
                    "Collection[int]",
                    "List[float]",
                    "numpy.ma.MaskedArray",
                    "int"
                ],
                "refs": [
                    "float",
                    "typing.Iterable[]",
                    "numpy.array",
                    "Iterable"
                ]
            }
        },
        "get_prefixes": {
            "name": "get_prefixes",
            "location": 94,
            "return": [
                "list[]",
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "dirname": [
                    "str",
                    "int",
                    "float",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "List[str]",
                    "list[str]"
                ],
                "extension": [
                    "str"
                ]
            }
        },
        "get_prefix_lens": {
            "name": "get_prefix_lens",
            "location": 109,
            "return": [
                "list[tuple[typing.Union[str,bytes]]]",
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "feat_dir": [
                    "str",
                    "list",
                    "Tuple[str]",
                    "Dict[Any, str]"
                ],
                "prefixes": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "bool",
                    "Union[str, None]",
                    "Sequence[str]"
                ],
                "feat_type": [
                    "str",
                    "list",
                    "list[]",
                    "Tuple[str]",
                    "tuple[str]",
                    "Dict[Any, str]",
                    "dict[typing.Any, str]"
                ]
            }
        },
        "filter_by_size": {
            "name": "filter_by_size",
            "location": 118,
            "return": [
                "list[]",
                "str",
                "float",
                "int",
                "Dict[str, bool]"
            ],
            "arguments": {
                "feat_dir": [
                    "str"
                ],
                "prefixes": [
                    "str",
                    "norfs.fs.base.Path"
                ],
                "feat_type": [
                    "str"
                ],
                "max_samples": [
                    "str",
                    "int"
                ]
            }
        },
        "sort_by_size": {
            "name": "sort_by_size",
            "location": 133,
            "return": [
                "List[List[str]]",
                "list[]"
            ],
            "arguments": {
                "feat_dir": [
                    "str"
                ],
                "prefixes": [
                    "str"
                ],
                "feat_type": [
                    "str"
                ]
            }
        },
        "is_number": {
            "name": "is_number",
            "location": 139,
            "return": [
                "bool"
            ],
            "arguments": {
                "string": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "wav_length": {
            "name": "wav_length",
            "location": 147,
            "return": [
                "float",
                "int",
                "bool",
                "List[Tuple[str, str]]",
                "numpy.ndarray",
                "List[str]"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None"
                ]
            }
        },
        "make_batches": {
            "name": "make_batches",
            "location": 159,
            "return": [
                "list[]",
                "str",
                "list",
                "Iterable[str]",
                "Generator[pathlib.Path, None, None]",
                "bool"
            ],
            "arguments": {
                "paths": [
                    "int",
                    "Sequence[pathlib.Path]",
                    "str"
                ],
                "batch_size": [
                    "int",
                    "str",
                    "Sequence[pathlib.Path]",
                    "typing.Sequence[pathlib.Path]"
                ]
            }
        }
    },
    "persephone-master/persephone/utterance.py": {
        "write_transcriptions": {
            "name": "write_transcriptions",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "utterances": [
                    "list[]",
                    "str",
                    "bool",
                    "dict[str, str]",
                    "Optional[List]",
                    "int",
                    "IO",
                    "Dict[str, str]"
                ],
                "tgt_dir": [
                    "pathlib.Path",
                    "str"
                ],
                "ext": [
                    "str",
                    "None",
                    "Optional[pathlib.Path]",
                    "pathlib.Path"
                ],
                "lazy": [
                    "bool",
                    "str",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "remove_duplicates": {
            "name": "remove_duplicates",
            "location": 67,
            "return": [
                "list[typing.Text]",
                "float",
                "int"
            ],
            "arguments": {
                "utterances": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "remove_empty_text": {
            "name": "remove_empty_text",
            "location": 82,
            "return": [
                "list[typing.Union[str,bytes]]",
                "str",
                "int",
                "list",
                "List[\"models.Name\"]",
                "Optional[dict]"
            ],
            "arguments": {
                "utterances": [
                    "dict[str, list[str]]",
                    "Dict[str, List[str]]",
                    "str",
                    "list[str]",
                    "bool",
                    "tuple[typing.Union[bytes,bytes,bytes]]",
                    "List[str]",
                    "Tuple[bytes, bytes, bytes]",
                    "Pattern[str]"
                ]
            }
        },
        "duration": {
            "name": "duration",
            "location": 91,
            "return": [
                "str",
                "int",
                "Tuple[float, float]",
                "bool"
            ],
            "arguments": {
                "utter": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "None",
                    "Optional[float]"
                ]
            }
        },
        "total_duration": {
            "name": "total_duration",
            "location": 98,
            "return": [
                "bool",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "utterances": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "make_speaker_utters": {
            "name": "make_speaker_utters",
            "location": 106,
            "return": [
                "int",
                "Callable",
                "str",
                "list[str]",
                "list[list[typing.Any]]",
                "list[]",
                "dict[, ]"
            ],
            "arguments": {
                "utterances": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "speaker_durations": {
            "name": "speaker_durations",
            "location": 115,
            "return": [
                "list[tuple[list[]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "utterances": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "remove_too_short": {
            "name": "remove_too_short",
            "location": 128,
            "return": [
                "list[typing.Text]",
                "int",
                "list",
                "List[Dict]",
                "List[Tuple[int, float]]",
                "List[dict]",
                "List[str]",
                "Iterator[str]",
                "List[int]"
            ],
            "arguments": {
                "utterances": [
                    "str",
                    "int",
                    "Callable"
                ],
                "_winlen": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "winstep": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "remove_too_short.is_too_short": {
            "name": "is_too_short",
            "location": 134,
            "return": [
                "bool"
            ],
            "arguments": {
                "utterance": [
                    "str",
                    "Sequence[str]",
                    "int",
                    "Tuple[str]",
                    "Tuple[int]"
                ]
            }
        }
    },
    "persephone-master/persephone/__init__.py": {
        "handle_unhandled_exception": {
            "name": "handle_unhandled_exception",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "exc_type": [
                    "str",
                    "Optional[type]",
                    "typing.Type",
                    "dict",
                    "None",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "exc_value": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "type",
                    "None",
                    "typing.Type"
                ],
                "exc_traceback": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "type",
                    "None",
                    "typing.Type"
                ]
            }
        }
    },
    "persephone-master/persephone/datasets/bkw.py": {
        "pull_en_words": {
            "name": "pull_en_words",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_en_words": {
            "name": "get_en_words",
            "location": 36,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {}
        },
        "explore_elan_files": {
            "name": "explore_elan_files",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "elan_paths": [
                    "str",
                    "pathlib.Path",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "segment_utterance": {
            "name": "segment_utterance",
            "location": 92,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "utterance": [
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]",
                    "bool"
                ]
            }
        },
        "segment_str": {
            "name": "segment_str",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "phoneme_inventory": [
                    "str",
                    "Optional[str]",
                    "ebl.corpus.domain.texText"
                ]
            }
        },
        "explore_code_switching": {
            "name": "explore_code_switching",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "utterances": [
                    "List[utterance.Utterance]",
                    "str",
                    "pathlib.Path",
                    "List[str]",
                    "IO[str]"
                ],
                "out_path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "filter_for_not_codeswitched": {
            "name": "filter_for_not_codeswitched",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "utter": [
                    "int",
                    "list",
                    "float",
                    "List[str]"
                ]
            }
        },
        "filter_for_not_empty": {
            "name": "filter_for_not_empty",
            "location": 139,
            "return": [
                "str"
            ],
            "arguments": {
                "utter": [
                    "utterance.Utterance",
                    "Optional[str]",
                    "str",
                    "int",
                    "Callable[[KT, VT], bool]",
                    "dict"
                ]
            }
        },
        "bkw_filter": {
            "name": "bkw_filter",
            "location": 142,
            "return": [
                "Optional[str]",
                "str",
                "list",
                "Iterable[T]"
            ],
            "arguments": {
                "utter": [
                    "str",
                    "utterance.Utterance",
                    "dict",
                    "bytes"
                ]
            }
        },
        "create_corpus": {
            "name": "create_corpus",
            "location": 145,
            "return": [
                "str",
                "Callable",
                "bool"
            ],
            "arguments": {
                "org_dir": [
                    "pathlib.Path",
                    "str",
                    "List[str]"
                ],
                "tgt_dir": [
                    "pathlib.Path",
                    "str",
                    "List[str]"
                ],
                "feat_type": [
                    "pathlib.Path",
                    "str",
                    "List[str]"
                ],
                "label_type": [
                    "str"
                ],
                "speakers": [
                    "pathlib.Path",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "persephone-master/persephone/datasets/na.py": {
        "preprocess_na": {
            "name": "preprocess_na",
            "location": 67,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "sent": [],
                "label_type": []
            }
        },
        "preprocess_french": {
            "name": "preprocess_french",
            "location": 209,
            "return": [
                "str"
            ],
            "arguments": {
                "trans": [],
                "fr_nlp": [],
                "remove_brackets_content": [
                    "bool"
                ]
            }
        },
        "trim_wavs": {
            "name": "trim_wavs",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "org_wav_dir": [],
                "tgt_wav_dir": [],
                "org_xml_dir": []
            }
        },
        "prepare_labels": {
            "name": "prepare_labels",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "label_type": [],
                "org_xml_dir": [],
                "label_dir": []
            }
        },
        "prepare_untran": {
            "name": "prepare_untran",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "feat_type": [],
                "tgt_dir": [],
                "untran_dir": []
            }
        },
        "prepare_feats": {
            "name": "prepare_feats",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "feat_type": [],
                "org_wav_dir": [],
                "feat_dir": [],
                "tgt_wav_dir": [],
                "org_xml_dir": [],
                "label_dir": []
            }
        },
        "get_story_prefixes": {
            "name": "get_story_prefixes",
            "location": 404,
            "return": [
                "list[]"
            ],
            "arguments": {
                "label_type": [],
                "label_dir": []
            }
        },
        "make_data_splits": {
            "name": "make_data_splits",
            "location": 412,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "label_type": [],
                "train_rec_type": [
                    "typing.Text"
                ],
                "max_samples": [
                    "int"
                ],
                "seed": [
                    "int"
                ],
                "tgt_dir": []
            }
        },
        "get_stories": {
            "name": "get_stories",
            "location": 456,
            "return": [
                "list[]"
            ],
            "arguments": {
                "label_type": []
            }
        },
        "make_story_splits": {
            "name": "make_story_splits",
            "location": 463,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "valid_story": [],
                "test_story": [],
                "max_samples": [],
                "label_type": [],
                "tgt_dir": []
            }
        },
        "preprocess_na.pop_phoneme": {
            "name": "pop_phoneme",
            "location": 97,
            "return": [
                "tuple[]",
                "tuple[typing.Text]",
                "tuple[typing.Optional[typing.Text]]"
            ],
            "arguments": {
                "sentence": []
            }
        },
        "preprocess_na.filter_for_phonemes": {
            "name": "filter_for_phonemes",
            "location": 191,
            "return": [
                "str"
            ],
            "arguments": {
                "sentence": []
            }
        },
        "Corpus.__init__": {
            "name": "__init__",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feat_type": [
                    "typing.Text"
                ],
                "label_type": [
                    "typing.Text"
                ],
                "train_rec_type": [
                    "typing.Text"
                ],
                "max_samples": [
                    "int"
                ],
                "valid_story": [
                    "None"
                ],
                "test_story": [
                    "None"
                ],
                "tgt_dir": [
                    "Path"
                ]
            }
        },
        "Corpus.make_data_splits": {
            "name": "make_data_splits",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_samples": [],
                "valid_story": [
                    "None"
                ],
                "test_story": [
                    "None"
                ]
            }
        },
        "Corpus.output_story_prefixes": {
            "name": "output_story_prefixes",
            "location": 560,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.__repr__": {
            "name": "__repr__",
            "location": 574,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "persephone-master/persephone/datasets/__init__.py": {},
    "persephone-master/persephone/preprocess/elan.py": {
        "sort_annotations": {
            "name": "sort_annotations",
            "location": 62,
            "return": [
                "list[tuple[typing.Union[int,int,str]]]",
                "dict",
                "int",
                "str"
            ],
            "arguments": {
                "annotations": [
                    "list[tuple[typing.Union[int,int,str]]]",
                    "List[Tuple[int, int, str]]",
                    "int"
                ]
            }
        },
        "utterances_from_tier": {
            "name": "utterances_from_tier",
            "location": 68,
            "return": [
                "list[Utterance]",
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "eafob": [
                    "str",
                    "Callable",
                    "List[str]"
                ],
                "tier_name": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "utterances_from_eaf": {
            "name": "utterances_from_eaf",
            "location": 94,
            "return": [
                "list[]",
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "eaf_path": [
                    "pathlib.Path",
                    "str",
                    "Union[pathlib.Path, str]"
                ],
                "tier_prefixes": [
                    "tuple[str]",
                    "str",
                    "Tuple[str]",
                    "list[str]",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "utterances_from_dir": {
            "name": "utterances_from_dir",
            "location": 116,
            "return": [
                "list[]",
                "int",
                "Dict[str, Any]",
                "pathlib.PosixPath",
                "Type[Any]",
                "str"
            ],
            "arguments": {
                "eaf_dir": [
                    "pathlib.Path",
                    "str"
                ],
                "tier_prefixes": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "Eaf.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eaf_path": [
                    "str",
                    "None",
                    "pathlib.Path",
                    "typing.Sequence[str]",
                    "Optional[str]",
                    "Sequence[str]"
                ]
            }
        },
        "Eaf.media_path": {
            "name": "media_path",
            "location": 26,
            "return": [
                "pathlib.Path",
                "str",
                "List[int]",
                "pathlib.PurePath",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Eaf.time_origin": {
            "name": "time_origin",
            "location": 31,
            "return": [
                "int",
                "float",
                "List[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Eaf.get_media_path": {
            "name": "get_media_path",
            "location": 40,
            "return": [
                "Union[pathlib.Path, str]",
                "pathlib.Path",
                "List[pathlib.Path]",
                "paradigm.catalog.Path"
            ],
            "arguments": {
                "self": [],
                "media_descriptor": [
                    "str",
                    "list[str]",
                    "int",
                    "dict",
                    "List[str]",
                    "pathlib.Path",
                    "bool",
                    "Callable[[str], bool]"
                ]
            }
        },
        "Eaf.initialize_media_descriptor": {
            "name": "initialize_media_descriptor",
            "location": 43,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "persephone-master/persephone/preprocess/feat_extract.py": {
        "empty_wav": {
            "name": "empty_wav",
            "location": 19,
            "return": [
                "bool",
                "str",
                "int",
                "pathlib.Path",
                "dict"
            ],
            "arguments": {
                "wav_path": [
                    "str",
                    "Union[pathlib.Path, str]",
                    "pathlib.Path"
                ]
            }
        },
        "extract_energy": {
            "name": "extract_energy",
            "location": 25,
            "return": [
                "int",
                "bool",
                "Tuple[int]",
                "Hashable"
            ],
            "arguments": {
                "rate": [
                    "str",
                    "bytearray",
                    "bool",
                    "pathlib.Path",
                    "tuple[typing.Union[int,int]]",
                    "typing.Callable[, ]",
                    "Tuple[int, int]",
                    "Callable"
                ],
                "sig": [
                    "str",
                    "bytearray",
                    "bool",
                    "pathlib.Path",
                    "tuple[typing.Union[int,int]]",
                    "typing.Callable[, ]",
                    "Tuple[int, int]",
                    "Callable"
                ]
            }
        },
        "fbank": {
            "name": "fbank",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "wav_path": [
                    "str"
                ],
                "flat": [
                    "bool",
                    "str",
                    "Optional[Tuple[str, ...]]",
                    "path.Path",
                    "Iterable[pathlib.Path]",
                    "pathlib.Path",
                    "Optional['Directory']",
                    "Optional[str]"
                ]
            }
        },
        "mfcc": {
            "name": "mfcc",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "wav_path": [
                    "str",
                    "tuple[typing.Union[str,...]]",
                    "pathlib.Path",
                    "norfs.fs.base.Path",
                    "Optional[Tuple[str, ...]]",
                    "cerulean.Path"
                ]
            }
        },
        "combine_fbank_and_pitch": {
            "name": "combine_fbank_and_pitch",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "feat_dir": [
                    "str",
                    "bool"
                ],
                "prefix": [
                    "str",
                    "bool"
                ]
            }
        },
        "from_dir": {
            "name": "from_dir",
            "location": 117,
            "return": [
                "None",
                "Iterator[object]",
                "str",
                "Dict[str, Any]",
                "Set[str]"
            ],
            "arguments": {
                "dirpath": [
                    "str",
                    "pathlib.Path",
                    "int",
                    "list[int]",
                    "Optional[List[int]]",
                    "None"
                ],
                "feat_type": [
                    "str",
                    "bool",
                    "logging.Logger"
                ]
            }
        },
        "convert_wav": {
            "name": "convert_wav",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "org_wav_fn": [
                    "Dict[str, Any]",
                    "cmk.base.config.ConfigCache",
                    "Mapping[str, Any]"
                ],
                "tgt_wav_fn": [
                    "int"
                ]
            }
        },
        "kaldi_pitch": {
            "name": "kaldi_pitch",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "wav_dir": [
                    "str"
                ],
                "feat_dir": [
                    "str"
                ]
            }
        },
        "from_dir.all_wavs_processed": {
            "name": "all_wavs_processed",
            "location": 129,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "combine_fbank_and_pitch.flatten": {
            "name": "flatten",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "feats_3d": [
                    "str",
                    "bool",
                    "BinaryIO",
                    "Type[T]"
                ]
            }
        }
    },
    "persephone-master/persephone/preprocess/labels.py": {
        "segment_into_chars": {
            "name": "segment_into_chars",
            "location": 56,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "utterance": [
                    "str"
                ]
            }
        },
        "segment_into_tokens": {
            "name": "segment_into_tokens",
            "location": 68,
            "return": [
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "utterance": [
                    "str",
                    "Dict[str, int]",
                    "dict[str, int]"
                ],
                "token_inventory": [
                    "str",
                    "Iterable[str]",
                    "Callable",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "make_indices_to_labels": {
            "name": "make_indices_to_labels",
            "location": 111,
            "return": [
                "dict[, ]",
                "int",
                "List[int]",
                "Dict[str, Any]",
                "List[str]",
                "List[\"TaskNode\"]"
            ],
            "arguments": {
                "labels": [
                    "set[typing.Union[str,str,str,str,str,str,str,str,str,str]]",
                    "str",
                    "Set[str]",
                    "list[dict[, ]]",
                    "List[Dict]",
                    "Optional[float]"
                ]
            }
        },
        "segment_into_tokens.segment_token": {
            "name": "segment_token",
            "location": 90,
            "return": [
                "tuple[typing.Text]",
                "int",
                "tuple[]",
                "list",
                "str"
            ],
            "arguments": {
                "utterance": [
                    "str"
                ]
            }
        }
    },
    "persephone-master/persephone/preprocess/pangloss.py": {
        "get_sents_times_and_translations": {
            "name": "get_sents_times_and_translations",
            "location": 8,
            "return": [
                "tuple[typing.Union[list[tuple[float]],list[list[]]]]",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "xml_fn": [
                    "str",
                    "IO[str]",
                    "typing.IO",
                    "TextIO",
                    "typing.TextIO"
                ]
            }
        },
        "remove_content_in_brackets": {
            "name": "remove_content_in_brackets",
            "location": 43,
            "return": [
                "typing.Text",
                "str",
                "Dict[str, Any]",
                "list",
                "Set[str]",
                "List[str]"
            ],
            "arguments": {
                "sentence": [
                    "set[str]",
                    "Set[str]",
                    "list[dict[int, float]]",
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "List[Dict[int, float]]",
                    "Callable[[], object]",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "brackets": [
                    "typing.Text",
                    "List[deque]",
                    "str",
                    "float",
                    "int"
                ]
            }
        }
    },
    "persephone-master/persephone/preprocess/wav.py": {
        "millisecs_to_secs": {
            "name": "millisecs_to_secs",
            "location": 15,
            "return": [
                "float",
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "millisecs": [
                    "int",
                    "float",
                    "str",
                    "List[int]",
                    "List[List[str]]"
                ]
            }
        },
        "trim_wav_ms": {
            "name": "trim_wav_ms",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "in_path": [
                    "str",
                    "bool",
                    "bytes",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "out_path": [
                    "str",
                    "bool",
                    "bytes",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "start_time": [
                    "str",
                    "bool",
                    "bytes",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "end_time": [
                    "str",
                    "bool",
                    "bytes",
                    "None",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "trim_wav_pydub": {
            "name": "trim_wav_pydub",
            "location": 45,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "in_path": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Optional[Callable[[], None]]",
                    "typing.Callable[[], None]"
                ],
                "out_path": [
                    "str",
                    "Optional[str]"
                ],
                "start_time": [
                    "int",
                    "str",
                    "bool"
                ],
                "end_time": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "trim_wav_sox": {
            "name": "trim_wav_sox",
            "location": 72,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "in_path": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "Optional[Union[str, pathlib.Path]]"
                ],
                "out_path": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ],
                "start_time": [
                    "str",
                    "int"
                ],
                "end_time": [
                    "str",
                    "int"
                ]
            }
        },
        "extract_wavs": {
            "name": "extract_wavs",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "utterances": [
                    "str",
                    "bool",
                    "list[pathlib.Path]",
                    "bytes",
                    "List[pathlib.Path]",
                    "Path",
                    "Union[str, bytes]"
                ],
                "tgt_dir": [
                    "pathlib.Path",
                    "str"
                ],
                "lazy": [
                    "str",
                    "bool",
                    "path.Path"
                ]
            }
        }
    },
    "persephone-master/persephone/preprocess/__init__.py": {},
    "persephone-master/persephone/tests/conftest.py": {
        "make_wav": {
            "name": "make_wav",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "create_sine": {
            "name": "create_sine",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "create_note_sequence": {
            "name": "create_note_sequence",
            "location": 73,
            "return": [],
            "arguments": {
                "create_sine": []
            }
        },
        "create_test_corpus": {
            "name": "create_test_corpus",
            "location": 86,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "create_note_sequence": [],
                "make_wav": []
            }
        },
        "make_wav._make_audio": {
            "name": "_make_audio",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "audio_data": [],
                "filename": [],
                "framerate": [],
                "duration": [
                    "int"
                ]
            }
        },
        "create_sine._create_sine": {
            "name": "_create_sine",
            "location": 45,
            "return": [
                "list[]"
            ],
            "arguments": {
                "note": [
                    "typing.Text"
                ],
                "seconds": [
                    "int"
                ],
                "framerate": [
                    "float"
                ]
            }
        },
        "create_note_sequence._create_note_sequence": {
            "name": "_create_note_sequence",
            "location": 75,
            "return": [
                "list[]"
            ],
            "arguments": {
                "notes": [],
                "seconds": [
                    "int"
                ],
                "framerate": [
                    "float"
                ]
            }
        },
        "create_test_corpus._create_corpus": {
            "name": "_create_corpus",
            "location": 89,
            "return": [
                "Corpus"
            ],
            "arguments": {}
        }
    },
    "persephone-master/persephone/tests/test_corpus.py": {
        "test_corpus_import": {
            "name": "test_corpus_import",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_missing_experiment_dir": {
            "name": "test_missing_experiment_dir",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_missing_wav_dir": {
            "name": "test_missing_wav_dir",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_create_corpus_no_data": {
            "name": "test_create_corpus_no_data",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_create_corpus_basic": {
            "name": "test_create_corpus_basic",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "create_sine": [],
                "make_wav": []
            }
        },
        "test_corpus_with_predefined_data_sets": {
            "name": "test_corpus_with_predefined_data_sets",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "create_sine": [],
                "make_wav": []
            }
        },
        "test_create_corpus_label_mismatch": {
            "name": "test_create_corpus_label_mismatch",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_determine_labels_throws": {
            "name": "test_determine_labels_throws",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_determine_labels": {
            "name": "test_determine_labels",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_data_overlap": {
            "name": "test_data_overlap",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_untranscribed_wavs": {
            "name": "test_untranscribed_wavs",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_untranscribed_prefixes_from_file": {
            "name": "test_untranscribed_prefixes_from_file",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_divide_prefixes_too_few": {
            "name": "test_divide_prefixes_too_few",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_divide_prefixes": {
            "name": "test_divide_prefixes",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "persephone-master/persephone/tests/test_corpus_reader.py": {
        "test_corpus_reader": {
            "name": "test_corpus_reader",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_test_corpus": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "persephone-master/persephone/tests/test_datasets.py": {
        "test_na": {
            "name": "test_na",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_kunwinjku_steven": {
            "name": "test_kunwinjku_steven",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "persephone-master/persephone/tests/test_distance.py": {
        "rand_str": {
            "name": "rand_str",
            "location": 11,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "length": [
                    "int",
                    "str"
                ],
                "alphabet": [
                    "int",
                    "str"
                ]
            }
        },
        "seq_cases": {
            "name": "seq_cases",
            "location": 15,
            "return": [
                "list[typing.Union[tuple[typing.Union[typing.Text,int]],tuple[typing.Union[list[int],int]]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_med": {
            "name": "test_med",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "seq_cases": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_med_align": {
            "name": "test_med_align",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "seq_cases": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "persephone-master/persephone/tests/test_feature_extraction.py": {
        "test_empty_wave": {
            "name": "test_empty_wave",
            "location": 2,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "bool"
                ],
                "create_note_sequence": [
                    "int",
                    "str"
                ],
                "make_wav": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_empty_wave_skipped": {
            "name": "test_empty_wave_skipped",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmp_path": [],
                "make_wav": [
                    "str"
                ]
            }
        }
    },
    "persephone-master/persephone/tests/test_results.py": {
        "prepared_data": {
            "name": "prepared_data",
            "location": 17,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[float]",
                "List[int]",
                "Tuple[str, List[str]]"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "test_speaker_results": {
            "name": "test_speaker_results",
            "location": 45,
            "return": [],
            "arguments": {
                "prepared_data": [
                    "bytes",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "persephone-master/persephone/tests/test_rnn_ctc_model.py": {
        "test_model_creation": {
            "name": "test_model_creation",
            "location": 3,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_test_corpus": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_model_train_and_decode": {
            "name": "test_model_train_and_decode",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "Pattern",
                    "Set[str]",
                    "pathlib.Path",
                    "bool"
                ],
                "create_sine": [
                    "str",
                    "bool",
                    "float",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "make_wav": [
                    "str",
                    "path.Path"
                ],
                "create_test_corpus": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_model_train_callback": {
            "name": "test_model_train_callback",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "int",
                    "list[str]",
                    "bool",
                    "List[str]"
                ],
                "create_sine": [
                    "int",
                    "list[str]",
                    "bool",
                    "List[str]"
                ],
                "make_wav": [
                    "int",
                    "list[str]",
                    "bool",
                    "List[str]"
                ],
                "create_test_corpus": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        }
    },
    "persephone-master/persephone/tests/test_transcription_preprocessing.py": {
        "test_segment_into_chars": {
            "name": "test_segment_into_chars",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_segment_into_tokens": {
            "name": "test_segment_into_tokens",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unicode_segmentation": {
            "name": "test_unicode_segmentation",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "persephone-master/persephone/tests/test_utils.py": {
        "test_is_number": {
            "name": "test_is_number",
            "location": 2,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_make_batches": {
            "name": "test_make_batches",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_zero_batch_size": {
            "name": "test_zero_batch_size",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "persephone-master/persephone/tests/test_utterance.py": {
        "test_too_short": {
            "name": "test_too_short",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_remove_duplicates_same_time": {
            "name": "test_remove_duplicates_same_time",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_utterance_durations": {
            "name": "test_utterance_durations",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_make_speaker_utters": {
            "name": "test_make_speaker_utters",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_speaker_durations": {
            "name": "test_speaker_durations",
            "location": 165,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "persephone-master/persephone/tests/experiments/test_bkw.py": {
        "prep_org_data": {
            "name": "prep_org_data",
            "location": 72,
            "return": [
                "Path",
                "str",
                "pathlib.Path",
                "paradigm.catalog.Path"
            ],
            "arguments": {}
        },
        "clean_tgt_dir": {
            "name": "clean_tgt_dir",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "preprocessed_corpus": {
            "name": "preprocessed_corpus",
            "location": 99,
            "return": [
                "bytes",
                "dict",
                "str"
            ],
            "arguments": {
                "prep_org_data": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_load_model": {
            "name": "test_load_model",
            "location": 391,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_feed_batch": {
            "name": "test_feed_batch",
            "location": 395,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "preprocessed_corpus": [
                    "str",
                    "float"
                ]
            }
        },
        "test_decode": {
            "name": "test_decode",
            "location": 411,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "preprocessed_corpus": [
                    "str",
                    "float"
                ]
            }
        },
        "TestBKWExperiment.clean_git": {
            "name": "clean_git",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBKWExperiment.test_tf_gpu": {
            "name": "test_tf_gpu",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBKWExperiment.train_bkw": {
            "name": "train_bkw",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "num_layers": [
                    "int",
                    "Optional[int]",
                    "None",
                    "str",
                    "bool",
                    "list[str]",
                    "List[str]",
                    "list[float]",
                    "List[float]"
                ]
            }
        },
        "TestBKWExperiment.test_bkw_2_layers": {
            "name": "test_bkw_2_layers",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "clean_git": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "TestBKWExperiment.test_bkw_3_layers": {
            "name": "test_bkw_3_layers",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "clean_git": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "TestBKW.check_corpus": {
            "name": "check_corpus",
            "location": 107,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "corp": [
                    "str",
                    "raiden.utils.Optional[int]",
                    "int",
                    "OrderedDict",
                    "None",
                    "typing.OrderedDict"
                ]
            }
        },
        "TestBKW.test_bkw_preprocess": {
            "name": "test_bkw_preprocess",
            "location": 120,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "prep_org_data": [
                    "str",
                    "bool",
                    "list[str]",
                    "Union[str, List[str]]",
                    "None",
                    "Optional[bool]",
                    "List[str]"
                ],
                "clean_tgt_dir": [
                    "str",
                    "bool",
                    "list[str]",
                    "Union[str, List[str]]",
                    "None",
                    "Optional[bool]",
                    "List[str]"
                ],
                "preprocessed_corpus": [
                    "typing.Sequence[str]",
                    "Sequence[str]",
                    "sensibility.model.lstm.DualLSTMModel"
                ]
            }
        },
        "TestBKW.test_bkw_after_preprocessing": {
            "name": "test_bkw_after_preprocessing",
            "location": 123,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "preprocessed_corpus": [
                    "str",
                    "float"
                ]
            }
        },
        "TestBKW.count_empty": {
            "name": "count_empty",
            "location": 127,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "utterances": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestBKW.test_utterances_from_dir": {
            "name": "test_utterances_from_dir",
            "location": 134,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "prep_org_data": [
                    "tuple[typing.Union[M,T,T]]",
                    "bytes",
                    "Tuple[foolbox.Model, eagerpy.Tensor, eagerpy.Tensor]",
                    "str",
                    "cmk.utils.type_defs.OptionalConfigSerial"
                ]
            }
        },
        "TestBKW.check_text_in_utters": {
            "name": "check_text_in_utters",
            "location": 159,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ],
                "utters": [
                    "str",
                    "Optional[str]",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "TestBKW.test_mark_on_rock_rf_xv_duplicate": {
            "name": "test_mark_on_rock_rf_xv_duplicate",
            "location": 166,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "prep_org_data": [
                    "cmk.utils.type_defs.OptionalConfigSerial",
                    "pypi2nix.path.Path",
                    "bytes",
                    "str"
                ]
            }
        },
        "TestBKW.test_corpus_duration": {
            "name": "test_corpus_duration",
            "location": 187,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "preprocessed_corpus": [
                    "str",
                    "float"
                ]
            }
        },
        "TestBKW.test_explore_code_switching": {
            "name": "test_explore_code_switching",
            "location": 193,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "prep_org_data": [
                    "bytes",
                    "str",
                    "tuple[typing.Union[M,T,T]]",
                    "Tuple[foolbox.Model, eagerpy.Tensor, eagerpy.Tensor]",
                    "cmk.utils.type_defs.OptionalConfigSerial"
                ]
            }
        },
        "TestBKW.test_speaker_id": {
            "name": "test_speaker_id",
            "location": 201,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "prep_org_data": [
                    "bytes",
                    "str",
                    "tuple[typing.Union[M,T,T]]",
                    "Tuple[foolbox.Model, eagerpy.Tensor, eagerpy.Tensor]",
                    "cmk.utils.type_defs.OptionalConfigSerial"
                ]
            }
        },
        "TestBKW.test_overlapping_utters": {
            "name": "test_overlapping_utters",
            "location": 218,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "prep_org_data": [
                    "str",
                    "Tuple[foolbox.Model, eagerpy.Tensor, eagerpy.Tensor]",
                    "Optional[str]"
                ]
            }
        },
        "TestBKW.test_speaker_durations": {
            "name": "test_speaker_durations",
            "location": 226,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "prep_org_data": [
                    "bytes",
                    "str",
                    "cmk.utils.type_defs.OptionalConfigSerial",
                    "pypi2nix.path.Path"
                ]
            }
        },
        "TestBKW.test_poly_durations": {
            "name": "test_poly_durations",
            "location": 252,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "prep_org_data": [
                    "bytes",
                    "str",
                    "cmk.utils.type_defs.OptionalConfigSerial",
                    "pypi2nix.path.Path"
                ]
            }
        },
        "TestBKW.test_train_data_isnt_test_data": {
            "name": "test_train_data_isnt_test_data",
            "location": 260,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "preprocessed_corpus": []
            }
        },
        "TestBKW.test_multispeaker": {
            "name": "test_multispeaker",
            "location": 314,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "preprocessed_corpus": [
                    "str",
                    "float"
                ]
            }
        },
        "TestBKW.test_utt2spk": {
            "name": "test_utt2spk",
            "location": 325,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "prep_org_data": [
                    "bool"
                ]
            }
        },
        "TestBKW.test_deterministic": {
            "name": "test_deterministic",
            "location": 333,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "prep_org_data": [
                    "bytes",
                    "str",
                    "cmk.utils.type_defs.OptionalConfigSerial",
                    "pypi2nix.path.Path"
                ]
            }
        },
        "TestBKW.test_deterministic_2": {
            "name": "test_deterministic_2",
            "location": 354,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "prep_org_data": [
                    "bool"
                ]
            }
        },
        "TestBKW.test_empty_wav": {
            "name": "test_empty_wav",
            "location": 368,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "prep_org_data": [
                    "bytes",
                    "str",
                    "cmk.utils.type_defs.OptionalConfigSerial",
                    "pypi2nix.path.Path"
                ]
            }
        },
        "TestBKW.test_pickle_corpus": {
            "name": "test_pickle_corpus",
            "location": 383,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "preprocessed_corpus": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "persephone-master/persephone/tests/experiments/test_na.py": {
        "set_up_base_testing_dir": {
            "name": "set_up_base_testing_dir",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data_base_dir": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "rm_dir": {
            "name": "rm_dir",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "Optional[str]",
                    "waterbutler.core.path.WaterButlerPath",
                    "str",
                    "int"
                ]
            }
        },
        "download_example_data": {
            "name": "download_example_data",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "example_link": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "data_base_dir": [
                    "typing.Text",
                    "str",
                    "pathlib.Path",
                    "Union[str, bytes]",
                    "Optional[str]",
                    "cerulean.Path"
                ]
            }
        },
        "get_test_ler": {
            "name": "get_test_ler",
            "location": 65,
            "return": [
                "float",
                "str",
                "Callable",
                "List[List[int]]"
            ],
            "arguments": {
                "exp_dir": [
                    "str",
                    "pathlib.Path",
                    "norfs.fs.base.Path"
                ]
            }
        },
        "test_tutorial": {
            "name": "test_tutorial",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_fast": {
            "name": "test_fast",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_full_na": {
            "name": "test_full_na",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_na_preprocess": {
            "name": "test_na_preprocess",
            "location": 191,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "prep_org_data": {
            "name": "prep_org_data",
            "location": 216,
            "return": [
                "tuple[]",
                "str",
                "list",
                "List[int]",
                "pathlib.Path",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "preprocess_na": {
            "name": "preprocess_na",
            "location": 238,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "prep_org_data": [
                    "bytes",
                    "bool",
                    "Optional[float]",
                    "float",
                    "Optional[tuple]",
                    "None",
                    "Optional[dict]",
                    "tuple[]",
                    "dict[, ]"
                ]
            }
        },
        "test_reuse_model": {
            "name": "test_reuse_model",
            "location": 264,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "preprocess_na": [
                    "str"
                ]
            }
        },
        "test_load_saver": {
            "name": "test_load_saver",
            "location": 279,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_load_meta": {
            "name": "test_load_meta",
            "location": 288,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_feed_batch": {
            "name": "test_feed_batch",
            "location": 372,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "persephone-master/stubs/git/exc.py": {},
    "persephone-master/stubs/git/__init__.py": {
        "Repo.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "search_parent_directories": []
            }
        },
        "Repo.is_dirty": {
            "name": "is_dirty",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "persephone-master/stubs/logging/config.py": {},
    "persephone-master/stubs/logging/__init__.py": {},
    "persephone-master/stubs/nltk/metrics.py": {},
    "persephone-master/stubs/nltk/__init__.py": {},
    "persephone-master/stubs/nltk/metrics/distance.py": {
        "edit_distance": {
            "name": "edit_distance",
            "location": 5,
            "return": [],
            "arguments": {
                "ref": [],
                "hyp": []
            }
        }
    },
    "persephone-master/stubs/nltk/metrics/__init__.py": {},
    "persephone-master/stubs/nltk_contrib/textgrid.py": {},
    "persephone-master/stubs/nltk_contrib/__init__.py": {},
    "persephone-master/stubs/numpy/__init__.py": {
        "array": {
            "name": "array",
            "location": 453,
            "return": [],
            "arguments": {
                "object": [],
                "dtype": [],
                "copy": [],
                "subok": [],
                "ndmin": []
            }
        },
        "__getattr__": {
            "name": "__getattr__",
            "location": 462,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "dtype.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "align": [],
                "copy": []
            }
        },
        "dtype.alignment": {
            "name": "alignment",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.base": {
            "name": "base",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.byteorder": {
            "name": "byteorder",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.char": {
            "name": "char",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.descr": {
            "name": "descr",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.fields": {
            "name": "fields",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.flags": {
            "name": "flags",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.hasobject": {
            "name": "hasobject",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.isbuiltin": {
            "name": "isbuiltin",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.isnative": {
            "name": "isnative",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.isalignedstruct": {
            "name": "isalignedstruct",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.itemsize": {
            "name": "itemsize",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.kind": {
            "name": "kind",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.metadata": {
            "name": "metadata",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.name": {
            "name": "name",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.num": {
            "name": "num",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.shape": {
            "name": "shape",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.ndim": {
            "name": "ndim",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.subdtype": {
            "name": "subdtype",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.newbyteorder": {
            "name": "newbyteorder",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "new_order": []
            }
        },
        "dtype.str": {
            "name": "str",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.type": {
            "name": "type",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_flagsobj.behaved": {
            "name": "behaved",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_flagsobj.c_contiguous": {
            "name": "c_contiguous",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_flagsobj.carray": {
            "name": "carray",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_flagsobj.contiguous": {
            "name": "contiguous",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_flagsobj.f_contiguous": {
            "name": "f_contiguous",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_flagsobj.farray": {
            "name": "farray",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_flagsobj.fnc": {
            "name": "fnc",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_flagsobj.forc": {
            "name": "forc",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_flagsobj.fortran": {
            "name": "fortran",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_flagsobj.num": {
            "name": "num",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_flagsobj.owndata": {
            "name": "owndata",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_flagsobj.__getitem__": {
            "name": "__getitem__",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "_flagsobj.__setitem__": {
            "name": "__setitem__",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "flatiter.base": {
            "name": "base",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "flatiter.coords": {
            "name": "coords",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "flatiter.index": {
            "name": "index",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "flatiter.copy": {
            "name": "copy",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "flatiter.__iter__": {
            "name": "__iter__",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "flatiter.__next__": {
            "name": "__next__",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.T": {
            "name": "T",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.base": {
            "name": "base",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.dtype": {
            "name": "dtype",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.data": {
            "name": "data",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.flags": {
            "name": "flags",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.size": {
            "name": "size",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.itemsize": {
            "name": "itemsize",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.nbytes": {
            "name": "nbytes",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.ndim": {
            "name": "ndim",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.shape": {
            "name": "shape",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.strides": {
            "name": "strides",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__int__": {
            "name": "__int__",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__float__": {
            "name": "__float__",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__complex__": {
            "name": "__complex__",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__str__": {
            "name": "__str__",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__repr__": {
            "name": "__repr__",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__copy__": {
            "name": "__copy__",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "_ArrayOrScalarCommon.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "memo": []
            }
        },
        "_ArrayOrScalarCommon.__lt__": {
            "name": "__lt__",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__le__": {
            "name": "__le__",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__eq__": {
            "name": "__eq__",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__ne__": {
            "name": "__ne__",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__gt__": {
            "name": "__gt__",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__ge__": {
            "name": "__ge__",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__add__": {
            "name": "__add__",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__radd__": {
            "name": "__radd__",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__iadd__": {
            "name": "__iadd__",
            "location": 278,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__sub__": {
            "name": "__sub__",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__rsub__": {
            "name": "__rsub__",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__isub__": {
            "name": "__isub__",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__mul__": {
            "name": "__mul__",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__rmul__": {
            "name": "__rmul__",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__imul__": {
            "name": "__imul__",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__truediv__": {
            "name": "__truediv__",
            "location": 293,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 294,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__itruediv__": {
            "name": "__itruediv__",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__floordiv__": {
            "name": "__floordiv__",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__rfloordiv__": {
            "name": "__rfloordiv__",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__ifloordiv__": {
            "name": "__ifloordiv__",
            "location": 299,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__mod__": {
            "name": "__mod__",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__rmod__": {
            "name": "__rmod__",
            "location": 302,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__imod__": {
            "name": "__imod__",
            "location": 303,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__divmod__": {
            "name": "__divmod__",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__rdivmod__": {
            "name": "__rdivmod__",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__pow__": {
            "name": "__pow__",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__rpow__": {
            "name": "__rpow__",
            "location": 310,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__ipow__": {
            "name": "__ipow__",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__lshift__": {
            "name": "__lshift__",
            "location": 313,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__rlshift__": {
            "name": "__rlshift__",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__ilshift__": {
            "name": "__ilshift__",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__rshift__": {
            "name": "__rshift__",
            "location": 317,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__rrshift__": {
            "name": "__rrshift__",
            "location": 318,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__irshift__": {
            "name": "__irshift__",
            "location": 319,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__and__": {
            "name": "__and__",
            "location": 321,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__rand__": {
            "name": "__rand__",
            "location": 322,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__iand__": {
            "name": "__iand__",
            "location": 323,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__xor__": {
            "name": "__xor__",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__rxor__": {
            "name": "__rxor__",
            "location": 326,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__ixor__": {
            "name": "__ixor__",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__or__": {
            "name": "__or__",
            "location": 329,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__ror__": {
            "name": "__ror__",
            "location": 330,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__ior__": {
            "name": "__ior__",
            "location": 331,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__neg__": {
            "name": "__neg__",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__pos__": {
            "name": "__pos__",
            "location": 338,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__abs__": {
            "name": "__abs__",
            "location": 339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__invert__": {
            "name": "__invert__",
            "location": 340,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__getattr__": {
            "name": "__getattr__",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ndarray.dtype": {
            "name": "dtype",
            "location": 353,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ndarray.ctypes": {
            "name": "ctypes",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ndarray.shape": {
            "name": "shape",
            "location": 361,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ndarray.flat": {
            "name": "flat",
            "location": 364,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ndarray.strides": {
            "name": "strides",
            "location": 369,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ndarray.__len__": {
            "name": "__len__",
            "location": 374,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ndarray.__getitem__": {
            "name": "__getitem__",
            "location": 375,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ndarray.__setitem__": {
            "name": "__setitem__",
            "location": 376,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "ndarray.__iter__": {
            "name": "__iter__",
            "location": 377,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ndarray.__contains__": {
            "name": "__contains__",
            "location": 378,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ndarray.__index__": {
            "name": "__index__",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "generic.__init__": {
            "name": "__init__",
            "location": 382,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "generic.base": {
            "name": "base",
            "location": 384,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_real_generic.real": {
            "name": "real",
            "location": 388,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_real_generic.imag": {
            "name": "imag",
            "location": 391,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "number.__init__": {
            "name": "__init__",
            "location": 394,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "complexfloating.__init__": {
            "name": "__init__",
            "location": 422,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "complex64.real": {
            "name": "real",
            "location": 429,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "complex64.imag": {
            "name": "imag",
            "location": 431,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "complex128.real": {
            "name": "real",
            "location": 434,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "complex128.imag": {
            "name": "imag",
            "location": 436,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__oct__": {
            "name": "__oct__",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__hex__": {
            "name": "__hex__",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__nonzero__": {
            "name": "__nonzero__",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__unicode__": {
            "name": "__unicode__",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__bool__": {
            "name": "__bool__",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__bytes__": {
            "name": "__bytes__",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__div__": {
            "name": "__div__",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__rdiv__": {
            "name": "__rdiv__",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__idiv__": {
            "name": "__idiv__",
            "location": 291,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__matmul__": {
            "name": "__matmul__",
            "location": 334,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__rmatmul__": {
            "name": "__rmatmul__",
            "location": 335,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "persephone-master/stubs/numpy/core/_internal.py": {
        "_ctypes.data": {
            "name": "data",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ctypes.shape": {
            "name": "shape",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ctypes.strides": {
            "name": "strides",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ctypes.data_as": {
            "name": "data_as",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "_ctypes.shape_as": {
            "name": "shape_as",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "_ctypes.strides_as": {
            "name": "strides_as",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "_ctypes.get_data": {
            "name": "get_data",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ctypes.get_shape": {
            "name": "get_shape",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ctypes.get_strides": {
            "name": "get_strides",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ctypes.get_as_parameter": {
            "name": "get_as_parameter",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "persephone-master/stubs/numpy/core/__init__.py": {},
    "persephone-master/stubs/pympi/Elan.py": {
        "Eaf.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [],
            "arguments": {
                "self": [],
                "elan_paths": []
            }
        },
        "Eaf.get_tier_names": {
            "name": "get_tier_names",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Eaf.get_annotation_data_for_tier": {
            "name": "get_annotation_data_for_tier",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "tier": []
            }
        }
    },
    "persephone-master/stubs/pympi/__init__.py": {},
    "persephone-master/stubs/python_speech_features/__init__.py": {},
    "persephone-master/stubs/scipy/__init__.py": {},
    "persephone-master/stubs/scipy/io/wavfile.py": {},
    "persephone-master/stubs/scipy/io/__init__.py": {},
    "persephone-master/stubs/spacy/__init__.py": {
        "load": {
            "name": "load",
            "location": 3,
            "return": [],
            "arguments": {
                "str": []
            }
        }
    },
    "persephone-master/stubs/tensorflow/__init__.py": {
        "edit_distance": {
            "name": "edit_distance",
            "location": 89,
            "return": [],
            "arguments": {
                "hypothesis": [],
                "truth": [],
                "normalize": [],
                "name": []
            }
        },
        "global_variables_initializer": {
            "name": "global_variables_initializer",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "reset_default_graph": {
            "name": "reset_default_graph",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "placeholder": {
            "name": "placeholder",
            "location": 103,
            "return": [],
            "arguments": {
                "dtype": [],
                "shape": [],
                "name": []
            }
        },
        "sparse_placeholder": {
            "name": "sparse_placeholder",
            "location": 108,
            "return": [],
            "arguments": {
                "dtype": [],
                "shape": [],
                "name": []
            }
        },
        "sparse_tensor_to_dense": {
            "name": "sparse_tensor_to_dense",
            "location": 114,
            "return": [],
            "arguments": {
                "sp_input": [],
                "default_value": [],
                "validate_indices": [],
                "name": []
            }
        },
        "shape": {
            "name": "shape",
            "location": 122,
            "return": [],
            "arguments": {
                "input": [],
                "name": [],
                "out_type": []
            }
        },
        "truncated_normal": {
            "name": "truncated_normal",
            "location": 126,
            "return": [],
            "arguments": {
                "shape": [],
                "mean": [],
                "stddev": [],
                "dtype": [],
                "seed": [],
                "name": []
            }
        },
        "reduce_mean": {
            "name": "reduce_mean",
            "location": 131,
            "return": [],
            "arguments": {
                "input_tensor": [],
                "axis": [],
                "keepdims": [],
                "name": [],
                "reduction_indices": [],
                "keep_dims": []
            }
        },
        "reshape": {
            "name": "reshape",
            "location": 135,
            "return": [],
            "arguments": {
                "tensor": [],
                "shape": [],
                "name": []
            }
        },
        "gpu_options.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigProto.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "log_device_placement": []
            }
        },
        "BaseSession.run": {
            "name": "run",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "fetches": [],
                "feed_dict": [],
                "run_options": [],
                "run_metadata": []
            }
        },
        "BaseSession.close": {
            "name": "close",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "graph": [],
                "config": []
            }
        },
        "Session.__enter__": {
            "name": "__enter__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.__exit__": {
            "name": "__exit__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "value": [],
                "traceback": []
            }
        },
        "Session.close": {
            "name": "close",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Variable.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "initial_value": [],
                "trainable": [],
                "collections": [],
                "validate_shape": [],
                "caching_device": [],
                "name": [],
                "variable_def": [],
                "dtype": [],
                "expected_shape": [],
                "import_scope": [],
                "constraint": []
            }
        }
    },
    "persephone-master/stubs/tensorflow/errors/__init__.py": {},
    "persephone-master/stubs/tensorflow/nn/__init__.py": {
        "ctc_beam_search_decoder": {
            "name": "ctc_beam_search_decoder",
            "location": 5,
            "return": [],
            "arguments": {
                "inputs": [],
                "sequence_length": [],
                "beam_width": [],
                "top_paths": [],
                "merge_repeated": []
            }
        },
        "bidirectional_dynamic_rnn": {
            "name": "bidirectional_dynamic_rnn",
            "location": 12,
            "return": [],
            "arguments": {
                "cell_fw": [],
                "cell_bw": [],
                "inputs": [],
                "sequence_length": [],
                "initial_state_fw": [],
                "initial_state_bw": [],
                "dtype": [],
                "parallel_iterations": [],
                "swap_memory": [],
                "time_major": [],
                "scope": []
            }
        },
        "ctc_loss": {
            "name": "ctc_loss",
            "location": 20,
            "return": [],
            "arguments": {
                "labels": [],
                "inputs": [],
                "sequence_length": [],
                "preprocess_collapse_repeated": [],
                "ctc_merge_repeated": [],
                "ignore_longer_outputs_than_inputs": [],
                "time_major": []
            }
        },
        "log_softmax": {
            "name": "log_softmax",
            "location": 29,
            "return": [],
            "arguments": {
                "logits": [],
                "axis": [],
                "name": [],
                "dim": []
            }
        }
    },
    "persephone-master/stubs/tensorflow/train/__init__.py": {
        "import_meta_graph": {
            "name": "import_meta_graph",
            "location": 3,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "Saver.restore": {
            "name": "restore",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "path": []
            }
        },
        "Saver.save": {
            "name": "save",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "sess": [],
                "save_path": [],
                "global_step": [],
                "latest_filename": [],
                "meta_graph_suffix": [],
                "write_meta_graph": [],
                "write_state": [],
                "strip_default_attrs": []
            }
        }
    }
}
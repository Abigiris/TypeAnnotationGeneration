{
    "petri-master/setup.py": {},
    "petri-master/docs/source/conf.py": {},
    "petri-master/petri/dot_env.py": {
        "init_dotenv": {
            "name": "init_dotenv",
            "location": 12,
            "return": [
                "None",
                "bool",
                "str",
                "Optional[int]",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {}
        }
    },
    "petri-master/petri/ext.py": {
        "to_upper_underscore": {
            "name": "to_upper_underscore",
            "location": 5,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "pkg_2_envvar": {
            "name": "pkg_2_envvar",
            "location": 17,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "petri-master/petri/loggin.py": {
        "maybe_patch_tqdm": {
            "name": "maybe_patch_tqdm",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "logger": [
                    "str",
                    "Union[str,Iterable[str]]",
                    "bool",
                    "Iterable[str]",
                    "int"
                ],
                "dev_mode": [
                    "str",
                    "Union[str,Iterable[str]]",
                    "bool",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "_control_logging": {
            "name": "_control_logging",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "level": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[bool]"
                ],
                "dest": [
                    "bool",
                    "str"
                ],
                "formatter": [
                    "bool",
                    "float",
                    "int",
                    "Dict",
                    "str",
                    "Optional[str]",
                    "None",
                    "Sequence[List[Any]]",
                    "Sequence[list[Any]]"
                ],
                "log_file": [
                    "str",
                    "None",
                    "pathlib.Path",
                    "Optional[str]",
                    "Union[str,pathlib.Path]",
                    "pathlib.PurePosixPath",
                    "cerulean.path.Path"
                ],
                "dev_mode": [
                    "bool",
                    "float",
                    "Iterator",
                    "Iterator[str]",
                    "int"
                ]
            }
        },
        "configure_logging": {
            "name": "configure_logging",
            "location": 165,
            "return": [
                "str",
                "List[bytes]",
                "Iterable[float]",
                "type",
                "int"
            ],
            "arguments": {
                "name": [],
                "level": [
                    "bool",
                    "str",
                    "pathlib.Path"
                ],
                "dest": [
                    "int",
                    "str",
                    "bool",
                    "None",
                    "Optional[int]"
                ],
                "formatter": [
                    "int",
                    "str",
                    "bool",
                    "None",
                    "Optional[int]"
                ],
                "log_file": [
                    "bool",
                    "str",
                    "pathlib.Path"
                ],
                "kidnap_loggers": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "Optional[Union[Any,Any]]",
                    "str"
                ]
            }
        },
        "trace_using": {
            "name": "trace_using",
            "location": 201,
            "return": [
                "str",
                "float",
                "int",
                "Dict[str, int]"
            ],
            "arguments": {
                "logger": [
                    "float",
                    "int"
                ]
            }
        },
        "trace_using.real_decorator": {
            "name": "real_decorator",
            "location": 212,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "maybe_patch_tqdm._tqdm": {
            "name": "_tqdm",
            "location": 76,
            "return": [
                "float",
                "int"
            ],
            "arguments": {}
        },
        "trace_using.real_decorator.wrapper": {
            "name": "wrapper",
            "location": 216,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "petri-master/petri/metadata.py": {
        "Metadata.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "package": [
                    "str",
                    "bool",
                    "Dict[int,bool]",
                    "int"
                ]
            }
        },
        "Metadata.data": {
            "name": "data",
            "location": 19,
            "return": [
                "List",
                "Dict[str,List[int]]",
                "Dict",
                "str",
                "Dict[str,dict]",
                "Set",
                "Optional[float]",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Metadata.__getattribute__": {
            "name": "__getattribute__",
            "location": 26,
            "return": [
                "tuple",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        }
    },
    "petri-master/petri/settings.py": {
        "BaseSettings.validate_basepath": {
            "name": "validate_basepath",
            "location": 64,
            "return": [
                "bool",
                "str",
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Callable[,None]",
                    "str",
                    "List",
                    "float",
                    "KT",
                    "T"
                ],
                "v": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "values": [
                    "str"
                ]
            }
        },
        "BaseSettings.validate_pkg_path": {
            "name": "validate_pkg_path",
            "location": 70,
            "return": [
                "bool",
                "int",
                "float",
                "str",
                "Callable[T,None]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "None",
                    "Callable",
                    "int",
                    "Iterable[str]",
                    "bool",
                    "Iterable"
                ],
                "v": [
                    "int",
                    "float",
                    "str",
                    "Union[int,float,str]",
                    "Callable[T,None]",
                    "Callable[[T],None]",
                    "Union[str]",
                    "T"
                ],
                "values": [
                    "str",
                    "int",
                    "Union[int,float,str]",
                    "Callable[[T],None]",
                    "Union[str]",
                    "T"
                ]
            }
        },
        "BaseSettings.validate_data": {
            "name": "validate_data",
            "location": 75,
            "return": [
                "Iterable[str]",
                "bool",
                "None",
                "str",
                "Callable[[List,bool],None]",
                "Optional[str]",
                "List[str]",
                "pathlib.Path"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "List[str]",
                    "Union[Type[Exception],Tuple[Any,...]]",
                    "List",
                    "Type",
                    "Callable",
                    "Tuple[Union[Any,...]]"
                ],
                "v": [
                    "Iterable[str]",
                    "None",
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Iterable[Any]",
                    "Optional[List[DeliveryItem]]",
                    "List[str]"
                ],
                "values": [
                    "str",
                    "Iterable[str]",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Iterable[Any]",
                    "Optional[List[DeliveryItem]]",
                    "List[str]"
                ]
            }
        },
        "BaseSettings.validate_log_storage": {
            "name": "validate_log_storage",
            "location": 80,
            "return": [
                "List[str]",
                "bool",
                "str",
                "Optional[str]",
                "None",
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "List[str]",
                    "List",
                    "List[Union[str,int]]"
                ],
                "v": [
                    "List[str]",
                    "str",
                    "Optional[List[str]]",
                    "None"
                ],
                "values": [
                    "List[str]",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "BaseSettings.from_envvar": {
            "name": "from_envvar",
            "location": 85,
            "return": [
                "SendCh[trio.abc.Stream]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "pkg_name": [
                    "str",
                    "Dict",
                    "List[str]",
                    "bool",
                    "List",
                    "None",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "init_dot_py": [
                    "str",
                    "int",
                    "float",
                    "bool",
                    "List[list[str]]",
                    "List[List[str]]"
                ],
                "default_config": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[bool]"
                ]
            }
        },
        "BaseSettings._dict_2_cls": {
            "name": "_dict_2_cls",
            "location": 135,
            "return": [
                "Type",
                "str",
                "Dict[str,Any]",
                "List[str]",
                "Tuple[str,str]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "T",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None",
                    "Optional[List[str]]",
                    "List[str]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "config_obj": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "cls_name": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "BaseSettings._impose_basesettings_parent": {
            "name": "_impose_basesettings_parent",
            "location": 149,
            "return": [
                "Type",
                "int",
                "Dict"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "None",
                    "Optional[dict]",
                    "Tuple[int,int]",
                    "Dict",
                    "Optional[Dict[str,Any]]",
                    "Tuple[Union[int,int]]",
                    "Dict[str,Any]"
                ],
                "config_obj": [
                    "Dict",
                    "str",
                    "Mapping",
                    "bool"
                ],
                "cls_name": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "env_prefix": [
                    "Dict",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "BaseSettings.validate_class": {
            "name": "validate_class",
            "location": 170,
            "return": [
                "BaseException",
                "str",
                "Type",
                "Exception",
                "Dict[str,_]",
                "Type[BaseException]",
                "Dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "Type[T]"
                ],
                "pkg_name": [
                    "str"
                ],
                "cls_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Type[T]",
                    "Type"
                ],
                "config_obj": [
                    "str",
                    "Dict",
                    "Dict[str,object]",
                    "Type",
                    "Dict[str,_]"
                ]
            }
        },
        "BaseSettings.to_str": {
            "name": "to_str",
            "location": 247,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": [],
                "dict_kw": [
                    "str",
                    "Dict[str,Any]",
                    "None",
                    "Dict"
                ]
            }
        },
        "BaseSettings.__str__": {
            "name": "__str__",
            "location": 265,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "petri-master/petri/__init__.py": {
        "Petri.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_dot_py": [
                    "str",
                    "int",
                    "pathlib.Path",
                    "bool"
                ]
            }
        }
    },
    "petri-master/tests/__init__.py": {},
    "petri-master/tests/fixtures/a_pkg/a_pkg/settings.py": {},
    "petri-master/tests/fixtures/a_pkg/a_pkg/__init__.py": {},
    "petri-master/tests/fixtures/a_pkg/tests/test_a_pkg.py": {
        "test_version": {
            "name": "test_version",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "petri-master/tests/fixtures/a_pkg/tests/__init__.py": {},
    "petri-master/tests/fixtures/second_order/second_order/settings.py": {},
    "petri-master/tests/fixtures/second_order/second_order/__init__.py": {},
    "petri-master/tests/fixtures/second_order/tests/test_second_order.py": {
        "test_version": {
            "name": "test_version",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "petri-master/tests/fixtures/second_order/tests/__init__.py": {},
    "petri-master/tests/unit/test_01_nodebug.py": {
        "test_pdb": {
            "name": "test_pdb",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "str",
                    "pathlib.Path"
                ],
                "debug_statement": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "petri-master/tests/unit/test_02_bootstrap.py": {
        "pyproject_toml": {
            "name": "pyproject_toml",
            "location": 9,
            "return": [
                "Dict[str,]",
                "List[str]",
                "MutableMapping[str,int]",
                "Set[str]",
                "Dict[str,Union[int,str,Any]]",
                "bool"
            ],
            "arguments": {}
        },
        "test_version": {
            "name": "test_version",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "pyproject_toml": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "petri-master/tests/unit/test_dot_env.py": {
        "test_dotenv": {
            "name": "test_dotenv",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "a_pkg_import": [
                    "bool"
                ],
                "requested": [
                    "Dict[str,str]",
                    "Callable",
                    "str"
                ],
                "real": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "petri-master/tests/unit/test_ext.py": {
        "test_ext": {
            "name": "test_ext",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "petri-master/tests/unit/test_loggin.py": {
        "check_log": {
            "name": "check_log",
            "location": 33,
            "return": [
                "None",
                "bytes",
                "float"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "outerr": [
                    "bool",
                    "int"
                ],
                "lvl": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "msg_lvl": [
                    "str",
                    "Callable",
                    "Union[int,float]",
                    "Optional[bool]"
                ],
                "dest": [
                    "bool",
                    "str"
                ],
                "fmt": [
                    "bool",
                    "str"
                ],
                "logfile_location": [
                    "str",
                    "bool"
                ],
                "old_logdata": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Optional[bytes]",
                    "bytes"
                ]
            }
        },
        "test_loglevel_format_output": {
            "name": "test_loglevel_format_output",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "tests.basilisp.helpers.CompileFn",
                    "Dict[str, Any]",
                    "pathlib.Path"
                ],
                "capsys": [
                    "str",
                    "pathlib.Path"
                ],
                "a_pkg_import": [
                    "Dict[str,Any]",
                    "Mapping",
                    "Mapping[str,Any]",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "tmpdir": [
                    "str",
                    "Dict",
                    "int",
                    "datetime.datetime"
                ],
                "lvl": [
                    "Tuple[Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "Tuple[paradigm.models.Base,tests.utils.Kwargs]",
                    "str",
                    "IO",
                    "IO[str]",
                    "pathlib.Path"
                ],
                "msg_lvl": [],
                "dest": [
                    "int",
                    "Dict",
                    "logging.LogRecord"
                ],
                "fmt": []
            }
        },
        "test_trace": {
            "name": "test_trace",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "bool",
                    "List[str]",
                    "List[Tuple[str, Any]]",
                    "int",
                    "str"
                ],
                "capsys": [
                    "str",
                    "float",
                    "int"
                ],
                "a_pkg_import": [
                    "bool",
                    "List[str]",
                    "str",
                    "List[tuple[Union[str,Any]]]",
                    "List[Tuple[str,Any]]",
                    "int"
                ]
            }
        },
        "test_trace.repeat": {
            "name": "repeat",
            "location": 154,
            "return": [
                "bytearray",
                "Tuple[Any, Any, Any]",
                "int",
                "float",
                "Tuple[str, List[str]]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ],
                "c": [
                    "Text",
                    "int",
                    "float"
                ],
                "d": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "petri-master/tests/unit/test_metadata.py": {
        "read_meta": {
            "name": "read_meta",
            "location": 7,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "a_pkg_import": [
                    "Callable[[T],T]",
                    "int",
                    "Callable[T,T]"
                ]
            }
        },
        "test_meta": {
            "name": "test_meta",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "read_meta": [
                    "int"
                ]
            }
        }
    },
    "petri-master/tests/unit/test_settings.py": {
        "test_load_settings": {
            "name": "test_load_settings",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "bool",
                    "T_co",
                    "Optional[str]",
                    "Callable[[str], None]"
                ],
                "a_pkg_import": [
                    "str",
                    "pathlib.Path"
                ],
                "envalue": [
                    "Optional[Callable[[str],bool]]",
                    "Callable[str,bool]",
                    "None"
                ]
            }
        },
        "make_setting_obj": {
            "name": "make_setting_obj",
            "location": 85,
            "return": [
                "int",
                "Dict[Text,Union[Text,dict[Text,Union[Text,bool]],Type,tuple[dict[Text,Union[Text,bool]]]]]",
                "Callable",
                "Type",
                "str",
                "Tuple[dict[Text,Union[Text,dict[Text,Union[Text,bool]],Type,tuple[dict[Text,Union[Text,bool]]]]]]"
            ],
            "arguments": {
                "outer": [
                    "int",
                    "List[int]",
                    "str",
                    "bool"
                ],
                "inner": [
                    "int",
                    "List[int]",
                    "str",
                    "bool"
                ],
                "parent": [
                    "List[str]",
                    "str",
                    "int",
                    "bool"
                ],
                "additional_config": [
                    "int",
                    "List[int]",
                    "str",
                    "bool"
                ],
                "prefix": [
                    "int",
                    "List[int]",
                    "str",
                    "bool"
                ]
            }
        },
        "test_validate_class": {
            "name": "test_validate_class",
            "location": 127,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "outer": [
                    "tests.conftesWorker",
                    "slice"
                ],
                "inner": [
                    "tests.conftesWorker",
                    "slice"
                ],
                "parent": [
                    "Dict[str,Any]",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "additional_config": [
                    "Dict[str,Any]",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "prefix": [
                    "tests.conftesWorker",
                    "slice"
                ]
            }
        },
        "test_validate_class.validate": {
            "name": "validate",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "petri-master/tests/unit/__init__.py": {
        "temp_file": {
            "name": "temp_file",
            "location": 13,
            "return": [],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "os.PathLike",
                    "Iterable[pathlib.Path]",
                    "bool",
                    "Optional[str]"
                ],
                "mode": [
                    "str",
                    "int",
                    "os.PathLike",
                    "Tuple[str]"
                ]
            }
        },
        "restore_file": {
            "name": "restore_file",
            "location": 23,
            "return": [],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "a_pkg_import": {
            "name": "a_pkg_import",
            "location": 35,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "monkeypatch": [],
                "request": []
            }
        },
        "a_pkg_import.importer": {
            "name": "importer",
            "location": 36,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "setenv": [
                    "int",
                    "str",
                    "bool",
                    "Tuple[float, float]"
                ]
            }
        },
        "nullcontext.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "enter_result": [
                    "int",
                    "float",
                    "List[List[int]]",
                    "Callable[[str, str], float]"
                ]
            }
        },
        "nullcontext.__enter__": {
            "name": "__enter__",
            "location": 83,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "nullcontext.__exit__": {
            "name": "__exit__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    }
}
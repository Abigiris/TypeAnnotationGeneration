{
    "phial-develop/setup.py": {
        "read": {
            "name": "read",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "find_version": {
            "name": "find_version",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "VerifyVersionCommand.run": {
            "name": "run",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "phial-develop/docs/source/conf.py": {},
    "phial-develop/examples/advanced.py": {
        "regex_in_command": {
            "name": "regex_in_command",
            "location": 14,
            "return": [
                "Response",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "regex_in_command_with_arg": {
            "name": "regex_in_command_with_arg",
            "location": 32,
            "return": [
                "Response",
                "str",
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "arg": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "fire_and_forget": {
            "name": "fire_and_forget",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "channel": [
                    "str"
                ]
            }
        },
        "background_processing": {
            "name": "background_processing",
            "location": 52,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "log_message": {
            "name": "log_message",
            "location": 60,
            "return": [
                "str",
                "int",
                "List[bytes]",
                "Iterable[float]",
                "float"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int",
                    "logging.Logger"
                ]
            }
        },
        "shceduled_function": {
            "name": "shceduled_function",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_message_with_attachment": {
            "name": "get_message_with_attachment",
            "location": 73,
            "return": [
                "Response",
                "str",
                "Dict[str, Any]",
                "int",
                "bool"
            ],
            "arguments": {}
        }
    },
    "phial-develop/examples/starter.py": {
        "ping": {
            "name": "ping",
            "location": 12,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "pong": {
            "name": "pong",
            "location": 18,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "hi": {
            "name": "hi",
            "location": 28,
            "return": [
                "Response",
                "bool",
                "str",
                "dict",
                "Dict[str, Iterable[Any]]",
                "OrderedDict",
                "int"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "add": {
            "name": "add",
            "location": 35,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "hello": {
            "name": "hello",
            "location": 41,
            "return": [
                "Response",
                "str",
                "Dict[str, Any]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "from_": [
                    "str"
                ]
            }
        },
        "react": {
            "name": "react",
            "location": 49,
            "return": [
                "Response",
                "int",
                "List[str]",
                "Optional[str]",
                "Dict[str, Any]",
                "bool",
                "float",
                "flask.Response",
                "str"
            ],
            "arguments": {}
        },
        "upload": {
            "name": "upload",
            "location": 57,
            "return": [
                "Attachment",
                "str",
                "int",
                "datetime.date.time",
                "bool"
            ],
            "arguments": {}
        },
        "reply": {
            "name": "reply",
            "location": 67,
            "return": [
                "Response",
                "dict",
                "Dict[str, Any]",
                "bool",
                "Optional[int]",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "case_sensitive": {
            "name": "case_sensitive",
            "location": 75,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {}
        },
        "get_message_with_attachment": {
            "name": "get_message_with_attachment",
            "location": 81,
            "return": [
                "Response",
                "str",
                "Dict[str, Any]",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "long": {
            "name": "long",
            "location": 100,
            "return": [
                "typing.Text",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "hidden": {
            "name": "hidden",
            "location": 107,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "fallback_command": {
            "name": "fallback_command",
            "location": 113,
            "return": [
                "typing.Text",
                "str",
                "Tuple[str]",
                "int"
            ],
            "arguments": {
                "command": [
                    "str",
                    "list[str]",
                    "bool",
                    "List[str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "dict[, ]",
                    "dict",
                    "int"
                ]
            }
        }
    },
    "phial-develop/phial/bot.py": {
        "Phial.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str"
                ],
                "config": [
                    "dict"
                ]
            }
        },
        "Phial.add_command": {
            "name": "add_command",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str"
                ],
                "func": [
                    "Callable[(..., Optional[Union[(str, phial.wrappers.Attachment, phial.wrappers.Response)]])]"
                ],
                "case_sensitive": [
                    "bool"
                ],
                "help_text_override": [
                    "Optional[str]"
                ],
                "hide_from_help_command": [
                    "bool"
                ]
            }
        },
        "Phial.command": {
            "name": "command",
            "location": 142,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str"
                ],
                "case_sensitive": [
                    "bool"
                ],
                "help_text_override": [
                    "Optional[str]"
                ],
                "hide_from_help_command": [
                    "bool"
                ]
            }
        },
        "Phial.alias": {
            "name": "alias",
            "location": 202,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str"
                ]
            }
        },
        "Phial.add_fallback_command": {
            "name": "add_fallback_command",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable[([phial.wrappers.Message], Optional[Union[(str, phial.wrappers.Attachment, phial.wrappers.Response)]])]"
                ]
            }
        },
        "Phial.fallback_command": {
            "name": "fallback_command",
            "location": 261,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Phial.add_middleware": {
            "name": "add_middleware",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable[([phial.wrappers.Message], Optional[phial.wrappers.Message])]"
                ]
            }
        },
        "Phial.middleware": {
            "name": "middleware",
            "location": 317,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Phial.add_scheduled": {
            "name": "add_scheduled",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schedule": [
                    "phial.scheduler.Schedule"
                ],
                "func": [
                    "Callable"
                ]
            }
        },
        "Phial.scheduled": {
            "name": "scheduled",
            "location": 372,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "schedule": [
                    "phial.scheduler.Schedule"
                ]
            }
        },
        "Phial.send_message": {
            "name": "send_message",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "phial.wrappers.Response"
                ]
            }
        },
        "Phial.send_reaction": {
            "name": "send_reaction",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "phial.wrappers.Response"
                ]
            }
        },
        "Phial.upload_attachment": {
            "name": "upload_attachment",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attachment": [
                    "phial.wrappers.Attachment"
                ]
            }
        },
        "Phial._register_standard_commands": {
            "name": "_register_standard_commands",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Phial._send_response": {
            "name": "_send_response",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Optional[Union[(str, phial.wrappers.Attachment, phial.wrappers.Response)]]"
                ],
                "original_channel": [
                    "str"
                ]
            }
        },
        "Phial._handle_message": {
            "name": "_handle_message",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Optional[phial.wrappers.Message]"
                ]
            }
        },
        "Phial._start": {
            "name": "_start",
            "location": 549,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Phial.run": {
            "name": "run",
            "location": 577,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Phial.command.decorator": {
            "name": "decorator",
            "location": 190,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "Phial.alias.decorator": {
            "name": "decorator",
            "location": 222,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "Phial.fallback_command.decorator": {
            "name": "decorator",
            "location": 277,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "Phial.middleware.decorator": {
            "name": "decorator",
            "location": 332,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "Phial.scheduled.decorator": {
            "name": "decorator",
            "location": 392,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "phial-develop/phial/commands.py": {
        "help_command": {
            "name": "help_command",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "bot": [
                    "phial.bot.Phial"
                ]
            }
        }
    },
    "phial-develop/phial/errors.py": {},
    "phial-develop/phial/globals.py": {
        "_find_command": {
            "name": "_find_command",
            "location": 9,
            "return": [
                "phial.wrappers.Message"
            ],
            "arguments": {}
        }
    },
    "phial-develop/phial/scheduler.py": {
        "Schedule.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schedule.every": {
            "name": "every",
            "location": 43,
            "return": [
                "Schedule"
            ],
            "arguments": {
                "self": [
                    "_TSchedule"
                ]
            }
        },
        "Schedule.day": {
            "name": "day",
            "location": 56,
            "return": [
                "Schedule"
            ],
            "arguments": {
                "self": [
                    "_TSchedule"
                ]
            }
        },
        "Schedule.days": {
            "name": "days",
            "location": 66,
            "return": [
                "Schedule"
            ],
            "arguments": {
                "self": [
                    "_TSchedule"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "Schedule.at": {
            "name": "at",
            "location": 81,
            "return": [
                "Schedule"
            ],
            "arguments": {
                "self": [
                    "_TSchedule"
                ],
                "hour": [
                    "int"
                ],
                "minute": [
                    "int"
                ],
                "second": [
                    "int"
                ]
            }
        },
        "Schedule.hour": {
            "name": "hour",
            "location": 108,
            "return": [
                "Schedule"
            ],
            "arguments": {
                "self": [
                    "_TSchedule"
                ]
            }
        },
        "Schedule.hours": {
            "name": "hours",
            "location": 118,
            "return": [
                "Schedule"
            ],
            "arguments": {
                "self": [
                    "_TSchedule"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "Schedule.minute": {
            "name": "minute",
            "location": 134,
            "return": [
                "Schedule"
            ],
            "arguments": {
                "self": [
                    "_TSchedule"
                ]
            }
        },
        "Schedule.minutes": {
            "name": "minutes",
            "location": 144,
            "return": [
                "Schedule"
            ],
            "arguments": {
                "self": [
                    "_TSchedule"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "Schedule.second": {
            "name": "second",
            "location": 160,
            "return": [
                "Schedule"
            ],
            "arguments": {
                "self": [
                    "_TSchedule"
                ]
            }
        },
        "Schedule.seconds": {
            "name": "seconds",
            "location": 170,
            "return": [
                "Schedule"
            ],
            "arguments": {
                "self": [
                    "_TSchedule"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "Schedule.get_next_run_time": {
            "name": "get_next_run_time",
            "location": 185,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "last_run": [
                    "_datetime.datetime"
                ]
            }
        },
        "ScheduledJob.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schedule": [
                    "Schedule"
                ],
                "func": [
                    "Callable"
                ]
            }
        },
        "ScheduledJob.should_run": {
            "name": "should_run",
            "location": 224,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScheduledJob.run": {
            "name": "run",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scheduler.__init__": {
            "name": "__init__",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scheduler.add_job": {
            "name": "add_job",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "ScheduledJob"
                ]
            }
        },
        "Scheduler.run_pending": {
            "name": "run_pending",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "phial-develop/phial/utils.py": {
        "validate_kwargs": {
            "name": "validate_kwargs",
            "location": 10,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ],
                "kwargs": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "parse_help_text": {
            "name": "parse_help_text",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "help_text": [
                    "str"
                ]
            }
        },
        "parse_slack_output": {
            "name": "parse_slack_output",
            "location": 56,
            "return": [
                "Optional[phial.wrappers.Message]"
            ],
            "arguments": {
                "slack_rtm_output": [
                    "List[dict]"
                ]
            }
        }
    },
    "phial-develop/phial/wrappers.py": {
        "Response.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str"
                ],
                "text": [
                    "Optional[str]"
                ],
                "original_ts": [
                    "Optional[str]"
                ],
                "reaction": [
                    "Optional[str]"
                ],
                "ephemeral": [
                    "bool"
                ],
                "user": [
                    "Optional[str]"
                ],
                "attachments": [
                    "Optional[List[Dict[(str, Optional[Union[(float, list, str)]])]]]"
                ]
            }
        },
        "Response.__repr__": {
            "name": "__repr__",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__eq__": {
            "name": "__eq__",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Attachment.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str"
                ],
                "filename": [
                    "str"
                ],
                "content": [
                    "IO"
                ]
            }
        },
        "Attachment.__repr__": {
            "name": "__repr__",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "channel": [
                    "str"
                ],
                "user": [
                    "str"
                ],
                "timestamp": [
                    "str"
                ],
                "team": [
                    "Optional[str]"
                ],
                "bot_id": [
                    "Optional[str]"
                ]
            }
        },
        "Message.__repr__": {
            "name": "__repr__",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__eq__": {
            "name": "__eq__",
            "location": 141,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Command.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str"
                ],
                "func": [
                    "Callable[(..., Optional[Union[(Attachment, Response, str)]])]"
                ],
                "case_sensitive": [
                    "bool"
                ],
                "help_text_override": [
                    "Optional[str]"
                ],
                "hide_from_help_command": [
                    "bool"
                ]
            }
        },
        "Command.__repr__": {
            "name": "__repr__",
            "location": 177,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._get_alias_patterns": {
            "name": "_get_alias_patterns",
            "location": 180,
            "return": [
                "List[Pattern]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable"
                ]
            }
        },
        "Command._build_pattern_regex": {
            "name": "_build_pattern_regex",
            "location": 188,
            "return": [
                "Pattern[str]"
            ],
            "arguments": {
                "pattern": [
                    "str"
                ],
                "case_sensitive": [
                    "bool"
                ]
            }
        },
        "Command.pattern_matches": {
            "name": "pattern_matches",
            "location": 197,
            "return": [
                "Optional[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Message"
                ]
            }
        },
        "Command.help_text": {
            "name": "help_text",
            "location": 217,
            "return": [
                "Sequence[Any]",
                "Dict[str, Any]",
                "Optional[Union[bool, str]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "phial-develop/phial/_reloader.py": {
        "iteritems": {
            "name": "iteritems",
            "location": 55,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "_iter_module_files": {
            "name": "_iter_module_files",
            "location": 60,
            "return": [
                "Generator[(str, None, None)]"
            ],
            "arguments": {}
        },
        "_find_observable_paths": {
            "name": "_find_observable_paths",
            "location": 89,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "extra_files": [
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "_get_args_for_reloading": {
            "name": "_get_args_for_reloading",
            "location": 109,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "_find_common_roots": {
            "name": "_find_common_roots",
            "location": 159,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "paths": []
            }
        },
        "ensure_echo_on": {
            "name": "ensure_echo_on",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_with_reloader": {
            "name": "run_with_reloader",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "main_func": [
                    "Callable"
                ],
                "extra_files": [
                    "Optional[List[str]]"
                ],
                "interval": [
                    "int"
                ],
                "reloader_type": [
                    "str"
                ]
            }
        },
        "_find_common_roots._walk": {
            "name": "_walk",
            "location": 171,
            "return": [],
            "arguments": {
                "node": [],
                "path": []
            }
        },
        "ReloaderLoop.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extra_files": [
                    "Optional[List[str]]"
                ],
                "interval": [
                    "int"
                ]
            }
        },
        "ReloaderLoop.run": {
            "name": "run",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReloaderLoop.restart_with_reloader": {
            "name": "restart_with_reloader",
            "location": 194,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReloaderLoop.trigger_reload": {
            "name": "trigger_reload",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "ReloaderLoop.log_reload": {
            "name": "log_reload",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "StatReloaderLoop.run": {
            "name": "run",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WatchdogReloaderLoop.__init__": {
            "name": "__init__",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WatchdogReloaderLoop.trigger_reload": {
            "name": "trigger_reload",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "WatchdogReloaderLoop.run": {
            "name": "run",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WatchdogReloaderLoop.__init__._check_modification": {
            "name": "_check_modification",
            "location": 255,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "WatchdogReloaderLoop.__init__._CustomHandler.on_created": {
            "name": "on_created",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "WatchdogReloaderLoop.__init__._CustomHandler.on_modified": {
            "name": "on_modified",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "WatchdogReloaderLoop.__init__._CustomHandler.on_moved": {
            "name": "on_moved",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "WatchdogReloaderLoop.__init__._CustomHandler.on_deleted": {
            "name": "on_deleted",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        }
    },
    "phial-develop/phial/__init__.py": {},
    "phial-develop/stubs/freezegun.py": {
        "freeze_time": {
            "name": "freeze_time",
            "location": 4,
            "return": [],
            "arguments": {
                "time": []
            }
        }
    },
    "phial-develop/stubs/pytest.py": {
        "raises": {
            "name": "raises",
            "location": 4,
            "return": [],
            "arguments": {
                "exc_type": [],
                "match": []
            }
        }
    },
    "phial-develop/stubs/werkzeug/local.py": {
        "LocalProxy": {
            "name": "LocalProxy",
            "location": 12,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "LocalStack.top": {
            "name": "top",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LocalStack.push": {
            "name": "push",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "LocalStack.pop": {
            "name": "pop",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "phial-develop/stubs/werkzeug/__init__.py": {},
    "phial-develop/tests/helpers.py": {
        "wildpatch": {
            "name": "wildpatch",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "target": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "str"
                ],
                "value": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[Any]",
                    "typing.Any",
                    "Optional[int]",
                    "int",
                    "Optional[Callable[[], Any]]",
                    "typing.Callable[[], typing.Any]"
                ],
                "raising": [
                    "bool"
                ]
            }
        }
    },
    "phial-develop/tests/test_globals.py": {
        "test_find_command_throws_when_no_command": {
            "name": "test_find_command_throws_when_no_command",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_find_command_returns_command": {
            "name": "test_find_command_returns_command",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "phial-develop/tests/test_reloader.py": {
        "test_find_observable_paths": {
            "name": "test_find_observable_paths",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_find_observable_paths_with_extra_file": {
            "name": "test_find_observable_paths_with_extra_file",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iteritems": {
            "name": "test_iteritems",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter_module_files": {
            "name": "test_iter_module_files",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_watchdog_reloader_loop": {
            "name": "test_watchdog_reloader_loop",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_watchdog_reloader_loop_log_reload": {
            "name": "test_watchdog_reloader_loop_log_reload",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_watchdog_reloader_loop_trigger_reload": {
            "name": "test_watchdog_reloader_loop_trigger_reload",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reloader_loop_run": {
            "name": "test_reloader_loop_run",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reloader_loop_log_reload": {
            "name": "test_reloader_loop_log_reload",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reloader_get_args_for_reloading": {
            "name": "test_reloader_get_args_for_reloading",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "phial-develop/tests/__init__.py": {},
    "phial-develop/tests/bot/test_add_command.py": {
        "test_add_command": {
            "name": "test_add_command",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_same_command_throws": {
            "name": "test_add_same_command_throws",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_command_decorator": {
            "name": "test_add_command_decorator",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_alias_decorator": {
            "name": "test_alias_decorator",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_command.test": {
            "name": "test",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_same_command_throws.test": {
            "name": "test",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_command_decorator.test": {
            "name": "test",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_alias_decorator.test": {
            "name": "test",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "phial-develop/tests/bot/test_add_middleware.py": {
        "test_add_middleware_command": {
            "name": "test_add_middleware_command",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_middleware_decorator": {
            "name": "test_add_middleware_decorator",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_middleware_command.test": {
            "name": "test",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        },
        "test_add_middleware_decorator.test": {
            "name": "test",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "phial.Message",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "phial-develop/tests/bot/test_add_scheduled.py": {
        "test_add_scheduled_command": {
            "name": "test_add_scheduled_command",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_scheduled_decorator": {
            "name": "test_add_scheduled_decorator",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_scheduled_command.test": {
            "name": "test",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        },
        "test_add_scheduled_decorator.test": {
            "name": "test",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "phial.Message",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "phial-develop/tests/bot/test_fallback_command.py": {
        "test_add_fallback_command": {
            "name": "test_add_fallback_command",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_fallback_decorator": {
            "name": "test_add_fallback_decorator",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_fallback_command.test": {
            "name": "test",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        },
        "test_add_fallback_decorator.test": {
            "name": "test",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "phial.Message",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "phial-develop/tests/bot/test_handle_message.py": {
        "test_handle_message_handles_none_correctly": {
            "name": "test_handle_message_handles_none_correctly",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_message_passed_to_middleware": {
            "name": "test_message_passed_to_middleware",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_message_ignored_if_no_prefix": {
            "name": "test_message_ignored_if_no_prefix",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_message_calls_command_correctly": {
            "name": "test_message_calls_command_correctly",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_message_calls_command_correctly_when_no_prefix": {
            "name": "test_message_calls_command_correctly_when_no_prefix",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_message_falls_back_correctly": {
            "name": "test_message_falls_back_correctly",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_argument_validation_works_correctly": {
            "name": "test_argument_validation_works_correctly",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_type_validation_works_correctly": {
            "name": "test_type_validation_works_correctly",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_handle_message_handles_none_correctly.command": {
            "name": "command",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_handle_message_handles_none_correctly.middleware": {
            "name": "middleware",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        },
        "test_message_passed_to_middleware.command": {
            "name": "command",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_message_passed_to_middleware.middleware": {
            "name": "middleware",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        },
        "test_message_ignored_if_no_prefix.command": {
            "name": "command",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_message_ignored_if_no_prefix.middleware": {
            "name": "middleware",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        },
        "test_message_calls_command_correctly.command": {
            "name": "command",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_message_calls_command_correctly.middleware": {
            "name": "middleware",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        },
        "test_message_calls_command_correctly_when_no_prefix.command": {
            "name": "command",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_message_calls_command_correctly_when_no_prefix.middleware": {
            "name": "middleware",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        },
        "test_message_falls_back_correctly.command": {
            "name": "command",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_message_falls_back_correctly.middleware": {
            "name": "middleware",
            "location": 114,
            "return": [
                "None",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_message_falls_back_correctly.fallback": {
            "name": "fallback",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_argument_validation_works_correctly.command": {
            "name": "command",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "name": []
            }
        },
        "test_type_validation_works_correctly.command": {
            "name": "command",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "age": [
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "phial-develop/tests/bot/test_phial_config.py": {
        "test_uses_default_config_when_not_specified": {
            "name": "test_uses_default_config_when_not_specified",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_override": {
            "name": "test_config_override",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_partial_config_override": {
            "name": "test_partial_config_override",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "phial-develop/tests/bot/test_send_message.py": {
        "test_send_message": {
            "name": "test_send_message",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "typing.Mapping",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "phial.Message",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_send_full_message": {
            "name": "test_send_full_message",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "typing.Mapping",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "phial.Message",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_send_ephemeral_message": {
            "name": "test_send_ephemeral_message",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "typing.Mapping",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "phial.Message",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_send_message.mock_api_call": {
            "name": "mock_api_call",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_send_full_message.mock_api_call": {
            "name": "mock_api_call",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_send_ephemeral_message.mock_api_call": {
            "name": "mock_api_call",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "phial-develop/tests/bot/test_send_reaction.py": {
        "test_send_reaction": {
            "name": "test_send_reaction",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "typing.Mapping",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "phial.Message",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_send_reaction.mock_api_call": {
            "name": "mock_api_call",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "phial-develop/tests/bot/test_send_response.py": {
        "test_send_response_string": {
            "name": "test_send_response_string",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_send_response_with_none": {
            "name": "test_send_response_with_none",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_send_response_fails_with_non_response_object": {
            "name": "test_send_response_fails_with_non_response_object",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_send_response": {
            "name": "test_send_response",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_send_response_fails_with_text_and_reaction": {
            "name": "test_send_response_fails_with_text_and_reaction",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_send_response_with_attachment": {
            "name": "test_send_response_with_attachment",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_send_response_reaction": {
            "name": "test_send_response_reaction",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_send_response_string.mock_send_message": {
            "name": "mock_send_message",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [],
                "response": []
            }
        },
        "test_send_response.mock_send_message": {
            "name": "mock_send_message",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [],
                "response": []
            }
        },
        "test_send_response_fails_with_text_and_reaction.mock_send_message": {
            "name": "mock_send_message",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "phial.Phial",
                    "dict",
                    "Optional[bytes]"
                ],
                "response": [
                    "phial.Response",
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "IO[bytes]"
                ]
            }
        },
        "test_send_response_with_attachment.mock_send_attachment": {
            "name": "mock_send_attachment",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "phial.Phial",
                    "dict",
                    "Optional[bytes]"
                ],
                "response": [
                    "scrapy.http.Response",
                    "collector_utilities.type.Response",
                    "flask.Response",
                    "phial.Response",
                    "requests.Response"
                ]
            }
        },
        "test_send_response_reaction.mock_send_reaction": {
            "name": "mock_send_reaction",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "phial.Phial",
                    "dict",
                    "Optional[bytes]"
                ],
                "response": [
                    "phial.Response",
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "IO[bytes]"
                ]
            }
        }
    },
    "phial-develop/tests/bot/test_upload_attachment.py": {
        "test_send_attachment": {
            "name": "test_send_attachment",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_send_attachment.mock_api_call": {
            "name": "mock_api_call",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "phial-develop/tests/commands/test_help_command.py": {
        "test_returns_help_string_correctly": {
            "name": "test_returns_help_string_correctly",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_returns_help_string_correctly_when_no_help_text": {
            "name": "test_returns_help_string_correctly_when_no_help_text",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hide_from_help_command_hides_correctly": {
            "name": "test_hide_from_help_command_hides_correctly",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_help_text_override_overrides_correctly": {
            "name": "test_help_text_override_overrides_correctly",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_returns_help_string_correctly_when_no_base": {
            "name": "test_returns_help_string_correctly_when_no_base",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_returns_help_string_correctly.test": {
            "name": "test",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_returns_help_string_correctly_when_no_help_text.test": {
            "name": "test",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hide_from_help_command_hides_correctly.test": {
            "name": "test",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_help_text_override_overrides_correctly.test": {
            "name": "test",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_returns_help_string_correctly_when_no_base.test": {
            "name": "test",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "phial-develop/tests/scheduler/test_scheduled_jobs.py": {
        "test_job_create_correctly": {
            "name": "test_job_create_correctly",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_job_run_correctly": {
            "name": "test_job_run_correctly",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_job_reschedules_after_failure": {
            "name": "test_job_reschedules_after_failure",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_job_create_correctly.job_func": {
            "name": "job_func",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_job_reschedules_after_failure.test": {
            "name": "test",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "phial-develop/tests/scheduler/test_scheduler.py": {
        "test_creates_correctly": {
            "name": "test_creates_correctly",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_adds_job_correctly": {
            "name": "test_adds_job_correctly",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_runs_jobs_correctly": {
            "name": "test_runs_jobs_correctly",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "phial-develop/tests/scheduler/test_schedules.py": {
        "test_day": {
            "name": "test_day",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_days": {
            "name": "test_days",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hour": {
            "name": "test_hour",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hours": {
            "name": "test_hours",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_minute": {
            "name": "test_minute",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_minutes": {
            "name": "test_minutes",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_second": {
            "name": "test_second",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_seconds": {
            "name": "test_seconds",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_at_before_time": {
            "name": "test_at_before_time",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_at_after_time": {
            "name": "test_at_after_time",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_at_throws_when_on_hour": {
            "name": "test_at_throws_when_on_hour",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_at_throws_when_on_minute": {
            "name": "test_at_throws_when_on_minute",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_at_throws_when_on_already_set": {
            "name": "test_at_throws_when_on_already_set",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_at_throws_when_not_on_day": {
            "name": "test_at_throws_when_not_on_day",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "phial-develop/tests/utils/test_parse_help_text.py": {
        "test_parse_help_text": {
            "name": "test_parse_help_text",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_help_text_single_new_line": {
            "name": "test_parse_help_text_single_new_line",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_help_text_double_new_line": {
            "name": "test_parse_help_text_double_new_line",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_help_text_single_new_line_multline": {
            "name": "test_parse_help_text_single_new_line_multline",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_help_text_double_new_line_multline": {
            "name": "test_parse_help_text_double_new_line_multline",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "phial-develop/tests/utils/test_parse_slack_output.py": {
        "test_parse_slack_output": {
            "name": "test_parse_slack_output",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_slack_output_bot": {
            "name": "test_parse_slack_output_bot",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_slack_output_returns_none_on_empty_input": {
            "name": "test_parse_slack_output_returns_none_on_empty_input",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "phial-develop/tests/utils/test_validate_kwargs.py": {
        "test_string_validation_succesful": {
            "name": "test_string_validation_succesful",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_int_validation_succesful": {
            "name": "test_int_validation_succesful",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_args_validation_errors_correctly": {
            "name": "test_args_validation_errors_correctly",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_args_type_validation_errors_correctly": {
            "name": "test_args_type_validation_errors_correctly",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validation_ignores_defaulted_kwargs_correctly": {
            "name": "test_validation_ignores_defaulted_kwargs_correctly",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validation_allows_override_of_kwargs_correctly": {
            "name": "test_validation_allows_override_of_kwargs_correctly",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string_validation_succesful.test": {
            "name": "test",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "name": []
            }
        },
        "test_int_validation_succesful.test": {
            "name": "test",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "age": []
            }
        },
        "test_args_validation_errors_correctly.test": {
            "name": "test",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "name": []
            }
        },
        "test_args_type_validation_errors_correctly.test": {
            "name": "test",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "age": []
            }
        },
        "test_validation_ignores_defaulted_kwargs_correctly.test": {
            "name": "test",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "age": []
            }
        },
        "test_validation_allows_override_of_kwargs_correctly.test": {
            "name": "test",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ],
                "age": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "phial-develop/tests/wrappers/test_attachment.py": {
        "test_attachment_repr": {
            "name": "test_attachment_repr",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "phial-develop/tests/wrappers/test_command.py": {
        "test_command_repr": {
            "name": "test_command_repr",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_command_help_text": {
            "name": "test_command_help_text",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_command_help_text_override": {
            "name": "test_command_help_text_override",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_command_build_patter_regex_no_substition_ignore_case": {
            "name": "test_command_build_patter_regex_no_substition_ignore_case",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_command_build_patter_regex_single_substition_ignore_case": {
            "name": "test_command_build_patter_regex_single_substition_ignore_case",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_command_build_patter_regex_multiple_substition_ignore_case": {
            "name": "test_command_build_patter_regex_multiple_substition_ignore_case",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_command_build_patter_regex_no_substition_case_sensitive": {
            "name": "test_command_build_patter_regex_no_substition_case_sensitive",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_patter_regex_single_substition_case_sensitive": {
            "name": "test_build_patter_regex_single_substition_case_sensitive",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_patter_regex_multiple_substition_case_sensitive": {
            "name": "test_build_patter_regex_multiple_substition_case_sensitive",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_command_allows_quotation_marks": {
            "name": "test_build_command_allows_quotation_marks",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_command_allows_all_params_with_quotation_marks": {
            "name": "test_build_command_allows_all_params_with_quotation_marks",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_command_allows_multiple_params_with_quotation_marks": {
            "name": "test_build_command_allows_multiple_params_with_quotation_marks",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_command_pattern_matches": {
            "name": "test_command_pattern_matches",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_command_pattern_matches_aliases": {
            "name": "test_command_pattern_matches_aliases",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_command_pattern_matches_returns_values": {
            "name": "test_command_pattern_matches_returns_values",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_command_pattern_matches_returns_none": {
            "name": "test_command_pattern_matches_returns_none",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_command_repr.test": {
            "name": "test",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_command_help_text.test": {
            "name": "test",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_command_help_text_override.test": {
            "name": "test",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_command_pattern_matches.test": {
            "name": "test",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_command_pattern_matches_aliases.test": {
            "name": "test",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_command_pattern_matches_returns_values.test": {
            "name": "test",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "val": []
            }
        },
        "test_command_pattern_matches_returns_none.test": {
            "name": "test",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "phial-develop/tests/wrappers/test_message.py": {
        "test_message_equality": {
            "name": "test_message_equality",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_message_equality_fails": {
            "name": "test_message_equality_fails",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_repr": {
            "name": "test_response_repr",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "phial-develop/tests/wrappers/test_response.py": {
        "test_response_equality": {
            "name": "test_response_equality",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_equality_attachment": {
            "name": "test_response_equality_attachment",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_equality_attachment_fails": {
            "name": "test_response_equality_attachment_fails",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_repr": {
            "name": "test_response_repr",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
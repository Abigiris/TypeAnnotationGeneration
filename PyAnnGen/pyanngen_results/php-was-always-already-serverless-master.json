{
    "php-was-always-already-serverless-master/app.py": {
        "shutdown_php_fpm": {
            "name": "shutdown_php_fpm",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 37,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "event": [
                    "dict"
                ],
                "context": [
                    "bool",
                    "Type[T]",
                    "typing.Type",
                    "List[dict]",
                    "list[dict[, ]]"
                ]
            }
        },
        "transform_header_name_for_php": {
            "name": "transform_header_name_for_php",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "k": [
                    "str"
                ]
            }
        },
        "charset_from_response": {
            "name": "charset_from_response",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "headers": [
                    "List[Tuple[(bytes, bytes)]]"
                ]
            }
        },
        "charset_from_event": {
            "name": "charset_from_event",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "event": [
                    "dict"
                ]
            }
        },
        "query_string": {
            "name": "query_string",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "event": [
                    "dict"
                ]
            }
        },
        "make_fcgi_params_and_input_from_event": {
            "name": "make_fcgi_params_and_input_from_event",
            "location": 88,
            "return": [
                "Tuple[(Dict[(str, Any)], bytes)]"
            ],
            "arguments": {
                "event": [
                    "dict"
                ]
            }
        }
    },
    "php-was-always-already-serverless-master/fcgi_client.py": {
        "parse_out": {
            "name": "parse_out",
            "location": 170,
            "return": [
                "Tuple[(bytes, List[Tuple[(bytes, bytes)]], bytes)]"
            ],
            "arguments": {
                "result": [
                    "bytes"
                ]
            }
        },
        "decode_name_value_pairs": {
            "name": "decode_name_value_pairs",
            "location": 399,
            "return": [
                "List[Tuple[(str, str)]]"
            ],
            "arguments": {
                "buffer": [
                    "bytearray"
                ]
            }
        },
        "encode_name_value_pairs": {
            "name": "encode_name_value_pairs",
            "location": 441,
            "return": [
                "bytes"
            ],
            "arguments": {
                "pairs": [
                    "List[Tuple[(Union[(bytes, str)], Union[(bytes, str)])]]"
                ]
            }
        },
        "decode_record": {
            "name": "decode_record",
            "location": 469,
            "return": [
                "Optional[FCGIRecord]"
            ],
            "arguments": {
                "buffer": [
                    "bytearray"
                ]
            }
        },
        "decode_buffer_generator": {
            "name": "decode_buffer_generator",
            "location": 497,
            "return": [
                "Generator[(Optional[FCGIRecord], Any, None)]"
            ],
            "arguments": {
                "buffer": [
                    "bytearray"
                ]
            }
        },
        "FCGIApp.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connect": [
                    "int",
                    "str",
                    "None"
                ],
                "host": [
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "str",
                    "int"
                ],
                "port": [
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "str",
                    "int"
                ]
            }
        },
        "FCGIApp.__call__": {
            "name": "__call__",
            "location": 63,
            "return": [
                "Tuple[(bytes, bytes)]"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "dict"
                ],
                "input": [
                    "bytes"
                ],
                "data": [
                    "bytes"
                ]
            }
        },
        "FCGIApp._read_packet": {
            "name": "_read_packet",
            "location": 120,
            "return": [
                "FCGIRecord"
            ],
            "arguments": {
                "sock": [
                    "socket.socket"
                ]
            }
        },
        "FCGIApp._get_connection": {
            "name": "_get_connection",
            "location": 152,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIRecord.__init__": {
            "name": "__init__",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_id": [
                    "int"
                ]
            }
        },
        "FCGIRecord.parse": {
            "name": "parse",
            "location": 224,
            "return": [
                "FCGIRecord"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFCGIRecord]"
                ],
                "request_id": [
                    "str",
                    "int"
                ],
                "content": [
                    "str",
                    "bool",
                    "Optional[Mapping[str, str]]",
                    "typing.Mapping",
                    "Set[str]",
                    "None",
                    "set[str]"
                ]
            }
        },
        "FCGIRecord.encode_header": {
            "name": "encode_header",
            "location": 228,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "Tuple[int, int]",
                    "int",
                    "bool"
                ]
            }
        },
        "FCGIRecord.encode": {
            "name": "encode",
            "location": 231,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIRecord.__bytes__": {
            "name": "__bytes__",
            "location": 234,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIBytestreamRecord.__init__": {
            "name": "__init__",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_id": [
                    "int"
                ],
                "content": [
                    "bytes"
                ]
            }
        },
        "FCGIBytestreamRecord.parse": {
            "name": "parse",
            "location": 246,
            "return": [
                "FCGIBytestreamRecord"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFCGIBytestreamRecord]"
                ],
                "request_id": [
                    "str",
                    "bool"
                ],
                "content": [
                    "str",
                    "bool"
                ]
            }
        },
        "FCGIBytestreamRecord.encode": {
            "name": "encode",
            "location": 249,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIUnknownManagementRecord.__init__": {
            "name": "__init__",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record_type": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "FCGIUnknownManagementRecord.encode": {
            "name": "encode",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIGetValues.__init__": {
            "name": "__init__",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "str",
                    "int",
                    "bytes",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "FCGIGetValues.parse": {
            "name": "parse",
            "location": 272,
            "return": [
                "FCGIGetValues"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFCGIGetValues]"
                ],
                "request_id": [
                    "str",
                    "list",
                    "list[]",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "content": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "FCGIGetValues.encode": {
            "name": "encode",
            "location": 277,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIGetValuesResult.__init__": {
            "name": "__init__",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "FCGIGetValuesResult.parse": {
            "name": "parse",
            "location": 293,
            "return": [
                "FCGIGetValuesResult"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFCGIGetValuesResult]"
                ],
                "request_id": [
                    "str",
                    "list",
                    "list[]",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "content": [
                    "bool",
                    "Optional[list]",
                    "list[]",
                    "Dict[str, str]",
                    "None",
                    "str",
                    "List[Callable]",
                    "dict[str, str]",
                    "Callable[[Any], bool]",
                    "list[typing.Callable[, ]]",
                    "typing.Callable[typing.Any, bool]",
                    "Optional[str]"
                ]
            }
        },
        "FCGIGetValuesResult.encode": {
            "name": "encode",
            "location": 298,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIUnknownType.__init__": {
            "name": "__init__",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str",
                    "typing.Type",
                    "Type[Any]",
                    "Type"
                ]
            }
        },
        "FCGIUnknownType.encode": {
            "name": "encode",
            "location": 314,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIBeginRequest.__init__": {
            "name": "__init__",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_id": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "dict[, ]",
                    "dict",
                    "list['Request']",
                    "List['Request']",
                    "dict[int, dict[, ]]",
                    "int",
                    "Dict[int, dict]"
                ],
                "role": [
                    "int",
                    "str",
                    "List[int]",
                    "list[int]"
                ],
                "flags": [
                    "int",
                    "str",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "FCGIBeginRequest.encode": {
            "name": "encode",
            "location": 330,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIAbortRequest.parse": {
            "name": "parse",
            "location": 341,
            "return": [
                "FCGIAbortRequest"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFCGIAbortRequest]"
                ],
                "request_id": [
                    "str",
                    "bytearray",
                    "dict",
                    "dict[, ]"
                ],
                "content": [
                    "str",
                    "list",
                    "list[]",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "FCGIAbortRequest.encode": {
            "name": "encode",
            "location": 344,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIEndRequest.__init__": {
            "name": "__init__",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_id": [
                    "dict[, ]",
                    "bool",
                    "dict",
                    "int"
                ],
                "app_status": [
                    "int",
                    "str",
                    "TextIO",
                    "typing.TextIO"
                ],
                "protocol_status": [
                    "int",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "FCGIEndRequest.encode": {
            "name": "encode",
            "location": 389,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProtocolError.__init__": {
            "name": "__init__",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "FastCgiClientProtocol.__init__": {
            "name": "__init__",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_id": [
                    "int"
                ],
                "params": [
                    "dict"
                ],
                "input": [
                    "bytes"
                ],
                "data": [
                    "bytes"
                ],
                "loop": [
                    "str",
                    "dict",
                    "int",
                    "dict[, ]",
                    "List[int]",
                    "list[int]",
                    "Dict[str, List[Any]]",
                    "dict[str, list[typing.Any]]"
                ]
            }
        },
        "FastCgiClientProtocol.connection_made": {
            "name": "connection_made",
            "location": 519,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "bool",
                    "str",
                    "bytes",
                    "typing.IO",
                    "asyncio.StreamWriter",
                    "IO"
                ]
            }
        },
        "FastCgiClientProtocol.connection_lost": {
            "name": "connection_lost",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "FastCgiClientProtocol.data_received": {
            "name": "data_received",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "float",
                    "dict[, ]",
                    "bytes",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "list",
                    "list[]"
                ]
            }
        },
        "FastCgiClientProtocol.eof_received": {
            "name": "eof_received",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "php-was-always-already-serverless-master/test_fcgi_client.py": {
        "ClientTestCase.test_call": {
            "name": "test_call",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIStdoutTestCase.test_encode_simple_record": {
            "name": "test_encode_simple_record",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIGetValuesTestCase.test_parse": {
            "name": "test_parse",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIGetValuesTestCase.test_encode": {
            "name": "test_encode",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIGetValuesResultTestCase.test_parse": {
            "name": "test_parse",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIGetValuesResultTestCase.test_encode": {
            "name": "test_encode",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIBeginRequestTestCase.test_parse": {
            "name": "test_parse",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIBeginRequestTestCase.test_encode": {
            "name": "test_encode",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIAbortRequestTestCase.test_parse": {
            "name": "test_parse",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIAbortRequestTestCase.test_encode": {
            "name": "test_encode",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIEndRequestTestCase.test_parse": {
            "name": "test_parse",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIEndRequestTestCase.test_encode": {
            "name": "test_encode",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIUnknownTypeTestCase.test_encode": {
            "name": "test_encode",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecodeNameValuePairsTestCase.test_decode_name_value_pairs": {
            "name": "test_decode_name_value_pairs",
            "location": 126,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "int",
                    "str",
                    "bool",
                    "list[tuple[typing.Union[str,str]]]",
                    "List[Tuple[str, str]]"
                ],
                "data": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "dict"
                ],
                "expected": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "DecodeNameValuePairsTestCase.test_decode_name_value_pairs_incomplete": {
            "name": "test_decode_name_value_pairs_incomplete",
            "location": 135,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "bool",
                    "str",
                    "bytes",
                    "list[]",
                    "list",
                    "dict[, ]",
                    "dict",
                    "int"
                ],
                "data": [
                    "dict",
                    "str",
                    "List[str]"
                ],
                "message": [
                    "str",
                    "Callable",
                    "bool",
                    "typing.Callable[, ]",
                    "Optional[dict]",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "EncodeNameValuePairsTestCase.test_encode_name_value_pairs": {
            "name": "test_encode_name_value_pairs",
            "location": 151,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "int",
                    "str"
                ],
                "pairs": [
                    "str",
                    "int",
                    "bool"
                ],
                "expected": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "DecodeRecordTestCase.test_decode_record": {
            "name": "test_decode_record",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecodeRecordTestCase.test_decode_record_incomplete": {
            "name": "test_decode_record_incomplete",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecodeRecordTestCase.test_decode_record_wrong_version": {
            "name": "test_decode_record_wrong_version",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecodeRecordTestCase.test_decode_unknown_record_type": {
            "name": "test_decode_unknown_record_type",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseOutputTestCase.test_parse_out": {
            "name": "test_parse_out",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseOutputTestCase.test_parse_out_no_status": {
            "name": "test_parse_out_no_status",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseOutputTestCase.test_parse_out_no_reason": {
            "name": "test_parse_out_no_reason",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
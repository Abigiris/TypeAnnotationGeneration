{
    "physical-commonsense-master/pc/baselines.py": {
        "_random": {
            "name": "_random",
            "location": 30,
            "return": [
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "y_labels_train": [
                    "List[str]",
                    "numpy.ndarray"
                ],
                "y_train": [
                    "List[str]",
                    "numpy.ndarray"
                ],
                "y_labels_test": [
                    "List[str]",
                    "numpy.ndarray"
                ],
                "y_test_shape": [
                    "Tuple[int]",
                    "int",
                    "List[str]",
                    "Tuple[int,int]"
                ]
            }
        },
        "_all_0": {
            "name": "_all_0",
            "location": 39,
            "return": [
                "numpy.ndarray",
                "float",
                "tensorflow.data.Dataset",
                "int",
                "bool",
                "Tuple[dict, int]"
            ],
            "arguments": {
                "y_labels_train": [
                    "List[str]",
                    "numpy.ndarray",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "y_train": [
                    "List[str]",
                    "numpy.ndarray",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "y_labels_test": [
                    "List[str]",
                    "numpy.ndarray",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "y_test_shape": [
                    "Tuple[int]",
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "_all_1": {
            "name": "_all_1",
            "location": 48,
            "return": [
                "numpy.ndarray",
                "float",
                "tensorflow.data.Dataset",
                "int",
                "bool",
                "Tuple[dict, int]"
            ],
            "arguments": {
                "y_labels_train": [
                    "List[str]",
                    "numpy.ndarray",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "y_train": [
                    "List[str]",
                    "numpy.ndarray",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "y_labels_test": [
                    "List[str]",
                    "numpy.ndarray",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "y_test_shape": [
                    "Tuple[int]",
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "_maj_naive": {
            "name": "_maj_naive",
            "location": 57,
            "return": [
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {
                "y_labels_train": [
                    "List[str]",
                    "Tuple[int]"
                ],
                "y_train": [
                    "numpy.ndarray",
                    "Union[int, str]",
                    "tuple",
                    "List[int]",
                    "bytes",
                    "Sequence[T]",
                    "Dict[str, int]"
                ],
                "y_labels_test": [
                    "List[str]",
                    "Tuple[int]"
                ],
                "y_test_shape": [
                    "List[str]",
                    "Tuple[int]"
                ]
            }
        },
        "_maj_cat": {
            "name": "_maj_cat",
            "location": 68,
            "return": [
                "List[int]",
                "numpy.ndarray",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "y_labels_train": [
                    "List[str]",
                    "List[float]",
                    "List[int]",
                    "numpy.ndarray",
                    "Set[str]",
                    "int"
                ],
                "y_train": [
                    "List[int]",
                    "int",
                    "List[List[int]]",
                    "List[list[int]]"
                ],
                "y_labels_test": [
                    "List[str]",
                    "List[int]",
                    "list",
                    "int"
                ],
                "y_test_shape": [
                    "str",
                    "bool",
                    "List[allennlp.data.tokenizers.token.Token]",
                    "List[T]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "baseline": {
            "name": "baseline",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "func": [
                    "str",
                    "bool",
                    "Tuple",
                    "List[T]",
                    "List[allennlp.data.tokenizers.token.Token]",
                    "int"
                ],
                "name": [
                    "str",
                    "int"
                ],
                "shortname": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "physical-commonsense-master/pc/bert.py": {
        "make_epoch_runner": {
            "name": "make_epoch_runner",
            "location": 128,
            "return": [
                "Callable[([Any, Any, Any, Any, Any], Any)]"
            ],
            "arguments": {
                "task": [
                    "List[str]",
                    "str",
                    "torch.nn.Module",
                    "List[T]",
                    "Dict[str,Any]",
                    "pc.data.Task",
                    "List[type.Task]",
                    "Task",
                    "taskiapplication.models.task.Task"
                ],
                "device": [
                    "List[str]",
                    "str",
                    "torch.nn.Module",
                    "List[T]",
                    "Dict[str,Any]",
                    "pc.data.Task",
                    "List[type.Task]",
                    "Task",
                    "taskiapplication.models.task.Task"
                ],
                "model": [
                    "List[str]",
                    "str",
                    "torch.nn.Module",
                    "List[T]",
                    "Dict[str,Any]",
                    "pc.data.Task",
                    "List[type.Task]",
                    "Task",
                    "taskiapplication.models.task.Task"
                ],
                "optimizer": [
                    "List[str]",
                    "str",
                    "torch.nn.Module",
                    "List[T]",
                    "Dict[str,Any]",
                    "pc.data.Task",
                    "List[type.Task]",
                    "Task",
                    "taskiapplication.models.task.Task"
                ],
                "scheduler": [
                    "List[str]",
                    "str",
                    "torch.nn.Module",
                    "List[T]",
                    "Dict[str,Any]",
                    "pc.data.Task",
                    "List[type.Task]",
                    "Task",
                    "taskiapplication.models.task.Task"
                ],
                "viz": [
                    "List[str]",
                    "str",
                    "torch.nn.Module",
                    "List[T]",
                    "Dict[str,Any]",
                    "pc.data.Task",
                    "List[type.Task]",
                    "Task",
                    "taskiapplication.models.task.Task"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BertDataset.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "Dict[str,Any]",
                    "str",
                    "pc.data.Task",
                    "List[T]",
                    "List[asyncio.Task]",
                    "List[google.cloud.tasks_v2.types.task_pb2.Task]"
                ],
                "train": [],
                "seq_len": [
                    "int",
                    "Step",
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "BertDataset.__len__": {
            "name": "__len__",
            "location": 98,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BertDataset.__getitem__": {
            "name": "__getitem__",
            "location": 101,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "str",
                    "Tuple[float]",
                    "raiden.utils.Nonce",
                    "raiden.utils.TokenAmount"
                ]
            }
        },
        "make_epoch_runner.epoch": {
            "name": "epoch",
            "location": 133,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "loader": [
                    "bool",
                    "torch.utils.data.DataLoader",
                    "int",
                    "bytes",
                    "float",
                    "str"
                ],
                "data_len": [
                    "int",
                    "torch.Tensor",
                    "Iterable[int]",
                    "Tuple[int, int]",
                    "bool",
                    "Tuple[int, int, int]"
                ],
                "train": [
                    "bool",
                    "torch.utils.data.DataLoader",
                    "int",
                    "bytes",
                    "float",
                    "str"
                ],
                "split": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "global_i": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "physical-commonsense-master/pc/data.py": {
        "_read": {
            "name": "_read",
            "location": 67,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_expand": {
            "name": "_expand",
            "location": 72,
            "return": [
                "Tuple[(List[str], Any)]"
            ],
            "arguments": {
                "df": [
                    "Collection[int]",
                    "Deque",
                    "bytes",
                    "tuple",
                    "str",
                    "List[\"SqlFile\"]"
                ]
            }
        },
        "_train_test_df_split": {
            "name": "_train_test_df_split",
            "location": 89,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "df": [
                    "int",
                    "List",
                    "str",
                    "bool"
                ],
                "train_uid_path": [
                    "List[str]",
                    "str",
                    "Pattern",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "test_uid_path": [
                    "str"
                ]
            }
        },
        "_train_test_df_expand": {
            "name": "_train_test_df_expand",
            "location": 102,
            "return": [
                "Tuple[(Tuple[(List[str], Any)], Tuple[(List[str], Any)])]"
            ],
            "arguments": {
                "df": [
                    "str",
                    "pandas.DataFrame"
                ],
                "train_uid_path": [
                    "str",
                    "pandas.DataFrame"
                ],
                "test_uid_path": [
                    "str",
                    "pandas.DataFrame"
                ]
            }
        },
        "_get_abstract_objects_properties": {
            "name": "_get_abstract_objects_properties",
            "location": 114,
            "return": [
                "Tuple[(Tuple[(Any, Any)], Tuple[(Any, Any)])]"
            ],
            "arguments": {}
        },
        "_get_situated_objects_properties": {
            "name": "_get_situated_objects_properties",
            "location": 127,
            "return": [
                "Tuple[(Tuple[(Any, Any)], Tuple[(Any, Any)])]"
            ],
            "arguments": {}
        },
        "_get_situated_objects_affordances": {
            "name": "_get_situated_objects_affordances",
            "location": 140,
            "return": [
                "Tuple[(Tuple[(List[str], Any)], Tuple[(List[str], Any)])]"
            ],
            "arguments": {}
        },
        "_get_situated_affordances_properties": {
            "name": "_get_situated_affordances_properties",
            "location": 175,
            "return": [
                "Tuple[(Tuple[(List[str], Any)], Tuple[(List[str], Any)])]"
            ],
            "arguments": {}
        },
        "get": {
            "name": "get",
            "location": 220,
            "return": [
                "Tuple[(Tuple[(Any, Any)], Tuple[(Any, Any)])]"
            ],
            "arguments": {
                "task": [
                    "Dict[str,Any]",
                    "argparse.Namespace"
                ]
            }
        },
        "_get_wordembedding_name_map": {
            "name": "_get_wordembedding_name_map",
            "location": 248,
            "return": [
                "dict"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "_wordembedding_words_objects_properties": {
            "name": "_wordembedding_words_objects_properties",
            "location": 254,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "labels": [
                    "List[str]",
                    "List",
                    "Optional[Container[str]]",
                    "int"
                ]
            }
        },
        "_wordembedding_words_objects_affordances": {
            "name": "_wordembedding_words_objects_affordances",
            "location": 269,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "labels": [
                    "List[int]",
                    "str",
                    "List[str]",
                    "Set[str]",
                    "Tuple[Sequence[Any],Sequence[Any]]",
                    "Tuple[Union[Sequence[Any],Sequence[Any]]]"
                ]
            }
        },
        "_wordembedding_words_affordances_properties": {
            "name": "_wordembedding_words_affordances_properties",
            "location": 285,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "labels": [
                    "List[str]",
                    "List",
                    "Optional[Container[str]]",
                    "int"
                ]
            }
        },
        "_wordembedding": {
            "name": "_wordembedding",
            "location": 301,
            "return": [
                "bool",
                "pandas.DataFrame",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "task": [
                    "Dict",
                    "Dict[str,List[dict]]",
                    "Dict[str,list[dict]]"
                ],
                "labels": [
                    "List[str]",
                    "int",
                    "str",
                    "float",
                    "List[float]"
                ],
                "archive_path": [
                    "str",
                    "Tuple[str]"
                ],
                "d": [
                    "List[int]",
                    "List[str]",
                    "List",
                    "List[dict[str,Any]]",
                    "pandas.DataFrame",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "glove": {
            "name": "glove",
            "location": 332,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "task": [
                    "List[str]",
                    "Dict",
                    "List"
                ],
                "labels": [
                    "List[str]",
                    "Dict",
                    "List"
                ]
            }
        },
        "dep_embs": {
            "name": "dep_embs",
            "location": 338,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "task": [
                    "List[str]",
                    "Dict",
                    "List"
                ],
                "labels": [
                    "List[str]",
                    "Dict",
                    "List"
                ]
            }
        },
        "_uids2sentidx": {
            "name": "_uids2sentidx",
            "location": 342,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "task": [
                    "List[str]",
                    "Dict[str,str]",
                    "bool",
                    "str",
                    "pandas.core.frame.DataFrame"
                ],
                "labels": [
                    "List[str]",
                    "Dict",
                    "Tuple[str]",
                    "List",
                    "int"
                ]
            }
        },
        "_ctx_emb": {
            "name": "_ctx_emb",
            "location": 361,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "task": [
                    "List[str]",
                    "int",
                    "Optional[int]",
                    "None",
                    "bool",
                    "collections.abc.Awaitable",
                    "pandas.DataFrame",
                    "Awaitable"
                ],
                "labels": [
                    "List[str]",
                    "int",
                    "Optional[int]",
                    "None",
                    "bool",
                    "collections.abc.Awaitable",
                    "pandas.DataFrame",
                    "Awaitable"
                ],
                "archive_path": [
                    "str",
                    "Tuple[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "elmo": {
            "name": "elmo",
            "location": 369,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "task": [
                    "List[str]",
                    "Dict"
                ],
                "labels": [
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "features": {
            "name": "features",
            "location": 373,
            "return": [
                "int",
                "bool",
                "Optional[str]",
                "Optional[List[Any]]",
                "Dict[str, Any]",
                "str",
                "Dict[Hashable, Any]"
            ],
            "arguments": {
                "task": [
                    "List[str]",
                    "str",
                    "int"
                ],
                "variant": [
                    "bool",
                    "str",
                    "Dict",
                    "None",
                    "int",
                    "Optional[str]",
                    "pandas.DataFrame"
                ],
                "x_labels": [
                    "List[str]",
                    "str",
                    "Optional[List[T]]",
                    "List[T]",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "physical-commonsense-master/pc/experiments.py": {
        "main": {
            "name": "main",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "physical-commonsense-master/pc/graph.py": {
        "get_cms": {
            "name": "get_cms",
            "location": 16,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_setup": {
            "name": "_setup",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "figsize": [
                    "Tuple[float]",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "build_prop_cat_graph": {
            "name": "build_prop_cat_graph",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "cat2props": [
                    "Dict[str,list[str]]",
                    "Dict[str,List[str]]",
                    "Dict",
                    "Dict[str,dict[str,str]]",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,Any]"
                ],
                "prop2cm": [
                    "bool"
                ],
                "prop2human": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "metric": [
                    "bool",
                    "str",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "build_prop_aff_graph": {
            "name": "build_prop_aff_graph",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "prop2cm": [
                    "Dict[str,list[str]]",
                    "Dict[str,List[str]]",
                    "Dict",
                    "Dict[str,dict[str,str]]",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,Any]"
                ],
                "aff2cm": [
                    "Dict[str,list[str]]",
                    "Dict[str,List[str]]",
                    "Dict",
                    "Dict[str,dict[str,str]]",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "build_item_freqs_vs_f1": {
            "name": "build_item_freqs_vs_f1",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "item_freqs": [
                    "Optional[bool]",
                    "bool"
                ],
                "item2cm": [
                    "Dict",
                    "Dict[str,bool]",
                    "Dict[str,dict[str,str]]",
                    "Dict[str,Dict[str,str]]",
                    "Optional[dict]",
                    "Optional[Dict[str,Any]]",
                    "str"
                ],
                "freq_lab": [
                    "str",
                    "bool",
                    "List[float]",
                    "int",
                    "Union[int,str]",
                    "numpy.array"
                ],
                "out_path": [
                    "str",
                    "bool"
                ],
                "title": [
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "str",
                    "Optional[bool]",
                    "int",
                    "Optional[Union[str,Any]]",
                    "Any"
                ],
                "f1_lab": [
                    "Text",
                    "str",
                    "bool",
                    "List[float]",
                    "int",
                    "Union[int,str]",
                    "numpy.array"
                ]
            }
        },
        "build_prop_freqs_vs_acc": {
            "name": "build_prop_freqs_vs_acc",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "prop_freqs": [
                    "Dict",
                    "Dict[str,str]",
                    "Dict[str,list[str]]",
                    "bool",
                    "Dict[str,List[str]]"
                ],
                "prop2cm": [
                    "str",
                    "List[Any]",
                    "Optional[str]",
                    "bool",
                    "float",
                    "Optional[List[Any]]",
                    "int"
                ],
                "freq_lab": [
                    "str",
                    "bool",
                    "int"
                ],
                "out_path": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "build_freq_vs_freq": {
            "name": "build_freq_vs_freq",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "freq1": [
                    "Dict[str,float]",
                    "Dict",
                    "Dict[str,bool]",
                    "Dict[str,Any]",
                    "Mapping[str,Any]"
                ],
                "freq2": [
                    "str",
                    "List[str]",
                    "int",
                    "complex",
                    "bool"
                ],
                "freq1_lab": [
                    "str",
                    "pandas.DataFrame",
                    "numpy.ndarray"
                ],
                "freq2_lab": [
                    "str",
                    "pandas.DataFrame",
                    "numpy.ndarray"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "physical-commonsense-master/pc/human.py": {
        "create": {
            "name": "create",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_gold": {
            "name": "get_gold",
            "location": 54,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "lim": [
                    "str",
                    "None"
                ]
            }
        },
        "get_labels": {
            "name": "get_labels",
            "location": 62,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "lim": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "get_anns": {
            "name": "get_anns",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "lim": [
                    "str",
                    "None"
                ]
            }
        },
        "evaluate_round1": {
            "name": "evaluate_round1",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "physical-commonsense-master/pc/metrics.py": {
        "cms": {
            "name": "cms",
            "location": 11,
            "return": [
                "Dict[(int, Dict[(str, Any)])]"
            ],
            "arguments": {
                "y_hat": [
                    "dict",
                    "Sequence[int]",
                    "Dict[str, str]"
                ],
                "y": [
                    "int",
                    "Set[int]",
                    "List[str]",
                    "Tuple[float, float]",
                    "List[int]",
                    "numpy.ndarray"
                ],
                "y_labels": [
                    "List[str]",
                    "str",
                    "Set[str]",
                    "Dict[str,str]"
                ]
            }
        },
        "prf1": {
            "name": "prf1",
            "location": 54,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "cm": [
                    "str",
                    "Iterable[T]",
                    "bool"
                ]
            }
        },
        "mc_nemar": {
            "name": "mc_nemar",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "results_1": [
                    "numpy.ndarray",
                    "List[Union[int, float]]",
                    "int",
                    "Union[numpy.dtype, numpy.ndarray]",
                    "list"
                ],
                "results_2": [
                    "Dict[str,Set[str]]",
                    "str",
                    "Dict[str,set[str]]"
                ]
            }
        },
        "report": {
            "name": "report",
            "location": 118,
            "return": [
                "Tuple[(Any, Any, dict, Dict[(int, Dict[(str, Any)])], Any)]"
            ],
            "arguments": {
                "y_hat": [
                    "numpy.array"
                ],
                "y": [
                    "numpy.array"
                ],
                "y_labels": [
                    "bool",
                    "int"
                ],
                "task_labels": [
                    "List[str]",
                    "str",
                    "int",
                    "Iterable[T]",
                    "bool"
                ]
            }
        }
    },
    "physical-commonsense-master/pc/models.py": {
        "mlp": {
            "name": "mlp",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "d_in": [
                    "int",
                    "float"
                ],
                "input_dropout": [
                    "int",
                    "float"
                ],
                "h": [
                    "int",
                    "float"
                ],
                "activation": [
                    "int",
                    "float"
                ],
                "inner_dropout": [
                    "int",
                    "float"
                ],
                "d_out": [
                    "int",
                    "float"
                ]
            }
        },
        "init_weights": {
            "name": "init_weights",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "m": [
                    "Sequence[cirq.Qid]",
                    "torch.nn.Module",
                    "Iterable[str]",
                    "int",
                    "None",
                    "Optional[int]",
                    "numpy.ndarray"
                ]
            }
        },
        "make_batcher": {
            "name": "make_batcher",
            "location": 75,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "torch.Tensor",
                    "int"
                ],
                "y": [
                    "bool",
                    "torch.Tensor",
                    "int"
                ],
                "batch_size": [
                    "bool",
                    "torch.Tensor",
                    "int"
                ]
            }
        },
        "train": {
            "name": "train",
            "location": 91,
            "return": [
                "Optional[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "model": [
                    "Set[int]",
                    "Task"
                ],
                "x_np": [
                    "int",
                    "Tuple",
                    "numpy.ndarray",
                    "List",
                    "float",
                    "numpy.random.RandomState",
                    "numpy.dtype"
                ],
                "y_np": [
                    "int",
                    "Dict[str,tuple[Union[str,str]]]",
                    "float",
                    "numpy.ndarray",
                    "Dict[str,Tuple[str,str]]",
                    "allennlp.nn.beam_search.BeamSearch"
                ],
                "config": [
                    "str",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 145,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "model": [
                    "int",
                    "Tuple[int, int]"
                ],
                "x_np": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "Tuple[int]",
                    "Union[int,float]",
                    "Union[Tuple[int],Tuple[int,int]]",
                    "numpy.dtype"
                ],
                "y_np": [
                    "int",
                    "float",
                    "List[int]",
                    "Optional[Iterable[Any]]",
                    "None",
                    "Optional[Set[str]]",
                    "Set[str]",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ],
                "centering": [
                    "Optional[Tuple[torch.Tensor,torch.Tensor]]",
                    "bool",
                    "Tuple[Union[torch.Tensor,torch.Tensor]]",
                    "None"
                ],
                "config": [
                    "Dict[str,Any]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "cv": {
            "name": "cv",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "str",
                    "pc.data.Task",
                    "Dict[str,Any]",
                    "Dict"
                ],
                "variant": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "logging.Logger",
                    "pc.data.Task"
                ],
                "model": [
                    "Dict[str,Any]",
                    "torch.nn.Module"
                ],
                "config": [
                    "Dict[str,Any]",
                    "torch.nn.Module"
                ]
            }
        },
        "train_and_test": {
            "name": "train_and_test",
            "location": 200,
            "return": [
                "int",
                "bool",
                "Iterable[Any]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]",
                    "pc.data.Task",
                    "Type",
                    "celery.events.state.State.Task",
                    "Type[BaseConfig]"
                ],
                "variant": [
                    "Callable",
                    "pc.data.Task",
                    "Dict[str,Any]",
                    "Dict"
                ],
                "model": [
                    "Dict[str,Any]",
                    "torch.nn.Module"
                ],
                "config": [
                    "Dict[str,Any]",
                    "torch.nn.Module"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "make_batcher.batcher": {
            "name": "batcher",
            "location": 83,
            "return": [
                "Iterable[Tuple[torch.Tensor,torch.Tensor]]",
                "Generator[tuple]"
            ],
            "arguments": {}
        }
    },
    "physical-commonsense-master/pc/significance.py": {
        "get_symbol": {
            "name": "get_symbol",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "p": [
                    "bool"
                ]
            }
        },
        "get_data": {
            "name": "get_data",
            "location": 37,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "task": [
                    "str",
                    "bool"
                ],
                "method": [
                    "str",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "physical-commonsense-master/pc/util.py": {
        "np2str": {
            "name": "np2str",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int",
                    "Type"
                ]
            }
        },
        "str2np": {
            "name": "str2np",
            "location": 19,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        }
    },
    "physical-commonsense-master/scripts/perdatum_to_category.py": {
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
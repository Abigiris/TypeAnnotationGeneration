{
    "poe-currency-flip-planner-master/cli.py": {},
    "poe-currency-flip-planner-master/data_analysis/analysis.py": {
        "extract_transaction_edges": {
            "name": "extract_transaction_edges",
            "location": 20,
            "return": [
                "List[Text]",
                "int",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "day": [
                    "str",
                    "int",
                    "Dict[str,Any]",
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "stuff_per_day": {
            "name": "stuff_per_day",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "Dict",
                    "numpy.ndarray"
                ],
                "timestamps": [
                    "bool",
                    "Iterable[bytes]",
                    "memoryview",
                    "bytes",
                    "Dict",
                    "List",
                    "Set[str]"
                ]
            }
        },
        "number_of_edges_between_currencies_per_instance": {
            "name": "number_of_edges_between_currencies_per_instance",
            "location": 64,
            "return": [
                "Tuple[Union[list,int,str,dict[str,dict[str,Any]],list[str],Type,list[int]]]",
                "str",
                "Optional[str]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "data": [
                    "bool",
                    "int",
                    "bytes",
                    "numpy.ndarray"
                ],
                "timestamps": [
                    "str",
                    "bytes",
                    "List[int]"
                ]
            }
        },
        "plot_heatmap": {
            "name": "plot_heatmap",
            "location": 118,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "Dict",
                    "Set[str]"
                ],
                "y": [
                    "int",
                    "Sequence",
                    "str",
                    "Tuple[float, float]"
                ],
                "z": [
                    "str",
                    "bytes",
                    "List[str]",
                    "int",
                    "bool"
                ],
                "league": [
                    "bool",
                    "float",
                    "str",
                    "Optional[str]",
                    "None",
                    "int"
                ],
                "start_date": [
                    "bool",
                    "float",
                    "str",
                    "Optional[str]",
                    "None",
                    "int"
                ],
                "end_date": [
                    "bool",
                    "float",
                    "str",
                    "Optional[str]",
                    "None",
                    "int"
                ],
                "x_label": [
                    "Text",
                    "str",
                    "numpy.ndarray",
                    "bool"
                ],
                "y_label": [
                    "Text",
                    "str",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "find_relevant_currency_hops": {
            "name": "find_relevant_currency_hops",
            "location": 155,
            "return": [
                "Dict[Text,float]",
                "int",
                "Set",
                "str"
            ],
            "arguments": {
                "data": [
                    "int",
                    "Union[bytes, bytearray]",
                    "bytes",
                    "str",
                    "numpy.ndarray",
                    "dict"
                ],
                "minimum": [
                    "float",
                    "Sequence[T]",
                    "Dict",
                    "Union[Dict,List]",
                    "numpy.ndarray",
                    "bytes"
                ]
            }
        },
        "stuff_per_day.sum_results": {
            "name": "sum_results",
            "location": 46,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "results": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "float",
                    "bool",
                    "list"
                ]
            }
        }
    },
    "poe-currency-flip-planner-master/data_analysis/collector.py": {
        "gen_filename": {
            "name": "gen_filename",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "parse_args": {
            "name": "parse_args",
            "location": 26,
            "return": [
                "str",
                "CollectorConfig"
            ],
            "arguments": {}
        },
        "Collector.run": {
            "name": "run",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "poe-currency-flip-planner-master/data_analysis/converter.py": {
        "load_pickle": {
            "name": "load_pickle",
            "location": 17,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "folder": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "load_json": {
            "name": "load_json",
            "location": 25,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "folder": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "utc_ts_from_filename": {
            "name": "utc_ts_from_filename",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "datetime.datetime",
                    "int"
                ]
            }
        },
        "load_pickle_incursion": {
            "name": "load_pickle_incursion",
            "location": 38,
            "return": [
                "str",
                "Dict[Text,]",
                "bool",
                "None"
            ],
            "arguments": {
                "folder": [
                    "str"
                ],
                "filename": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "poe-currency-flip-planner-master/data_analysis/experiments/edge_popularity_per_snapshot_betrayal/run.py": {
        "read_merged_pickle": {
            "name": "read_merged_pickle",
            "location": 11,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "map_groups_to_dataframe": {
            "name": "map_groups_to_dataframe",
            "location": 27,
            "return": [
                "bytes",
                "List[Dict[str, Any]]",
                "int",
                "str"
            ],
            "arguments": {
                "groups": [
                    "str",
                    "List[tuple[Union[int,int,str]]]",
                    "List[str]",
                    "int",
                    "List[tuple[Union[int,int]]]",
                    "[]",
                    "List[Tuple[int,int,str]]",
                    "List[Tuple[int,int]]"
                ],
                "league": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "poe-currency-flip-planner-master/data_analysis/experiments/edge_popularity_per_snapshot_betrayal_bulk/run.py": {
        "read_merged_pickle": {
            "name": "read_merged_pickle",
            "location": 11,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "map_groups_to_dataframe": {
            "name": "map_groups_to_dataframe",
            "location": 27,
            "return": [
                "bytes",
                "List[Dict[str, Any]]",
                "int",
                "str"
            ],
            "arguments": {
                "groups": [
                    "str",
                    "List[tuple[Union[int,int,str]]]",
                    "List[str]",
                    "int",
                    "List[tuple[Union[int,int]]]",
                    "[]",
                    "List[Tuple[int,int,str]]",
                    "List[Tuple[int,int]]"
                ],
                "league": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "poe-currency-flip-planner-master/data_analysis/experiments/edge_popularity_per_snapshot_delve/run.py": {
        "read_merged_pickle": {
            "name": "read_merged_pickle",
            "location": 11,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "map_groups_to_dataframe": {
            "name": "map_groups_to_dataframe",
            "location": 27,
            "return": [
                "bytes",
                "List[Dict[str, Any]]",
                "int",
                "str"
            ],
            "arguments": {
                "groups": [
                    "str",
                    "List[tuple[Union[int,int,str]]]",
                    "List[str]",
                    "int",
                    "List[tuple[Union[int,int]]]",
                    "[]",
                    "List[Tuple[int,int,str]]",
                    "List[Tuple[int,int]]"
                ],
                "league": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "poe-currency-flip-planner-master/src/commons.py": {
        "filter_large_outliers": {
            "name": "filter_large_outliers",
            "location": 10,
            "return": [
                "List",
                "float",
                "logging.LogRecord",
                "Callable[[None],bool]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "offers": [
                    "Dict[str, numpy.ndarray]",
                    "List[dict]",
                    "Dict[str, Any]",
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "init_logger": {
            "name": "init_logger",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "debug": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "load_excluded_traders": {
            "name": "load_excluded_traders",
            "location": 30,
            "return": [
                "List",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "unique_conversions_by_trader_name": {
            "name": "unique_conversions_by_trader_name",
            "location": 37,
            "return": [
                "list[]"
            ],
            "arguments": {
                "conversions": []
            }
        }
    },
    "poe-currency-flip-planner-master/src/pathfinder.py": {
        "format_conversions": {
            "name": "format_conversions",
            "location": 15,
            "return": [
                "str",
                "int",
                "List[List[str]]",
                "Tuple"
            ],
            "arguments": {
                "conversions": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]",
                    "int",
                    "float"
                ]
            }
        },
        "format_conversion": {
            "name": "format_conversion",
            "location": 21,
            "return": [
                "str",
                "int",
                "List[List[str]]",
                "Tuple"
            ],
            "arguments": {
                "conversion": [
                    "str",
                    "bytes"
                ]
            }
        },
        "PathFinder.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "league": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "int",
                    "bool",
                    "None"
                ],
                "item_pairs": [
                    "bool",
                    "float",
                    "None",
                    "Optional[static_frame.core.util.PathSpecifierOrFileLike]",
                    "pandas.core.frame.DataFrame"
                ],
                "user_config": [
                    "List[str]"
                ],
                "excluded_traders": [
                    "List",
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "PathFinder.prepickle": {
            "name": "prepickle",
            "location": 59,
            "return": [
                "Dict[str, int]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathFinder._filter_traders": {
            "name": "_filter_traders",
            "location": 72,
            "return": [
                "List",
                "List[Dict]",
                "List[str]",
                "str",
                "Optional[Union[str,Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "offers": [
                    "List[src.core.offer.Offer]",
                    "Dict[str,Any]",
                    "Dict",
                    "str",
                    "Optional[preacher.core.value.Value.Context]",
                    "None"
                ],
                "excluded_traders": [
                    "Dict[str,set[str]]",
                    "Dict[str,Set[str]]",
                    "Iterable[Type]"
                ]
            }
        },
        "PathFinder._fetch": {
            "name": "_fetch",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathFinder._build_graph": {
            "name": "_build_graph",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathFinder._find_profitable_paths": {
            "name": "_find_profitable_paths",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_transaction_length": [
                    "str",
                    "bool",
                    "Iterable[I]",
                    "Iterable[Issue]",
                    "List[str]"
                ]
            }
        },
        "PathFinder.run": {
            "name": "run",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_transaction_length": [
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "poe-currency-flip-planner-master/src/bin/fetch_item_list.py": {},
    "poe-currency-flip-planner-master/src/commands/pathfinder.py": {
        "log_conversions": {
            "name": "log_conversions",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "conversions": [
                    "str",
                    "List[bytes]",
                    "Iterable[float]",
                    "int",
                    "float"
                ],
                "limit": [
                    "int",
                    "str",
                    "List[bytes]",
                    "Iterable[float]",
                    "float"
                ]
            }
        },
        "log_conversion": {
            "name": "log_conversion",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "c": [
                    "str",
                    "bytes",
                    "List[str]",
                    "bool",
                    "Union[str,List[str],None]",
                    "float"
                ]
            }
        },
        "execute_pathfinding": {
            "name": "execute_pathfinding",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "currency": [
                    "str",
                    "int",
                    "Type",
                    "bool"
                ],
                "league": [
                    "bool",
                    "str",
                    "int"
                ],
                "limit": [
                    "bytes",
                    "TextIO",
                    "float",
                    "int"
                ],
                "item_pairs": [
                    "int",
                    "Mapping[str,str]",
                    "Mapping",
                    "Dict[str,Any]",
                    "bool",
                    "List[ValidatorRecord]",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "user_config": [
                    "int",
                    "Mapping[str,str]",
                    "Mapping",
                    "Dict[str,Any]",
                    "bool",
                    "List[ValidatorRecord]",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "excluded_traders": [
                    "int",
                    "Mapping[str,str]",
                    "Mapping",
                    "Dict[str,Any]",
                    "bool",
                    "List[ValidatorRecord]",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "poe-currency-flip-planner-master/src/commands/sync.py": {
        "execute_sync": {
            "name": "execute_sync",
            "location": 10,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "config_file_path": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "league": [
                    "str",
                    "Tuple[str,int]",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "aggregate": {
            "name": "aggregate",
            "location": 59,
            "return": [
                "Dict[str,str]",
                "int",
                "Dict[str,dict[str,Any]]",
                "Callable",
                "str"
            ],
            "arguments": {
                "acc": [
                    "Dict[str,Any]",
                    "str",
                    "Dict[str,dict[str,Any]]",
                    "Dict[str,str]",
                    "List",
                    "Dict[str,Dict[str,Any]]"
                ],
                "stash_items": [
                    "int",
                    "T",
                    "bool",
                    "Optional[Callable]"
                ]
            }
        },
        "fetch_stash_tabs": {
            "name": "fetch_stash_tabs",
            "location": 66,
            "return": [
                "Optional[int]",
                "Callable",
                "int",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "session": [
                    "str",
                    "Dict[str,str]"
                ],
                "league": [
                    "str"
                ],
                "account_name": [
                    "str"
                ]
            }
        },
        "fetch_stash_tab_items": {
            "name": "fetch_stash_tab_items",
            "location": 77,
            "return": [
                "int",
                "float",
                "List[float]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "session": [
                    "Dict[str,str]",
                    "str",
                    "requests.Session",
                    "Type"
                ],
                "league": [
                    "str",
                    "Type",
                    "Dict[str,str]",
                    "requests.Session"
                ],
                "account_name": [
                    "str",
                    "Type",
                    "Dict[str,str]",
                    "requests.Session"
                ],
                "tab_idx": [
                    "str",
                    "Type",
                    "Dict[str,str]",
                    "requests.Session"
                ]
            }
        },
        "find_public_stashes": {
            "name": "find_public_stashes",
            "location": 95,
            "return": [
                "List[Text]",
                "List[int]",
                "List[List[int]]",
                "str",
                "Optional[dict]",
                "int",
                "List"
            ],
            "arguments": {
                "json": [
                    "Dict",
                    "str",
                    "Callable[[str],T]",
                    "Callable",
                    "OrderedDict[str,Any]",
                    "Mapping[str,Any]"
                ]
            }
        },
        "parse_items": {
            "name": "parse_items",
            "location": 101,
            "return": [
                "List[tuple]",
                "int",
                "List[int]",
                "bool",
                "float",
                "str"
            ],
            "arguments": {
                "json": [
                    "Dict",
                    "str",
                    "List[dict]",
                    "logging.LogRecord",
                    "Optional[List[dict]]"
                ]
            }
        }
    },
    "poe-currency-flip-planner-master/src/config/parser.py": {
        "TradingConfigItemSellItem.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "minimum_stock": [
                    "int",
                    "bool",
                    "float"
                ],
                "maximum_stock": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TradingConfigItemSellItemSchema.make_trading_config_item_sell_item": {
            "name": "make_trading_config_item_sell_item",
            "location": 25,
            "return": [
                "TradingConfigItemSellItem",
                "Optional[List[str]]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "Optional[Dict]",
                    "Dict[str,Any]",
                    "MutableMapping[str,Any]",
                    "None",
                    "MutableMapping",
                    "Optional[str]",
                    "str"
                ],
                "many": [
                    "Tuple[str]",
                    "bool",
                    "Dict",
                    "List[str]",
                    "List[dict]",
                    "bytes",
                    "str",
                    "List[List[Any]]",
                    "List[list[Any]]"
                ],
                "partial": [
                    "Tuple[str]",
                    "bool",
                    "Dict",
                    "List[str]",
                    "List[dict]",
                    "bytes",
                    "str",
                    "List[List[Any]]",
                    "List[list[Any]]"
                ]
            }
        },
        "TradingConfigItem.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sell_for": [
                    "Dict",
                    "int",
                    "Optional[bool]",
                    "Tuple"
                ],
                "minimum_stock": [
                    "int",
                    "Optional[bool]",
                    "Tuple"
                ],
                "maximum_stock": [
                    "int",
                    "Optional[bool]",
                    "Tuple"
                ]
            }
        },
        "TradingConfigItemSchema.make_trading_config_item": {
            "name": "make_trading_config_item",
            "location": 53,
            "return": [
                "TradingConfigItem",
                "Dict",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict",
                    "bytes",
                    "Optional[Dict[str,Any]]",
                    "None"
                ],
                "many": [
                    "List[str]",
                    "Dict[str,Any]",
                    "Dict",
                    "List",
                    "str",
                    "bool"
                ],
                "partial": [
                    "List[str]",
                    "Dict[str,Any]",
                    "Dict",
                    "List",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "poe-currency-flip-planner-master/src/config/user_config.py": {
        "UserConfigSchema.make_user_config": {
            "name": "make_user_config",
            "location": 36,
            "return": [
                "UserConfig",
                "str",
                "Mapping[str,str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "bytes",
                    "Dict[str,float]",
                    "Dict[str,Union[str,bool]]",
                    "Dict[str,Any]"
                ],
                "many": [
                    "Dict[str,Any]",
                    "List",
                    "Dict",
                    "bytes",
                    "str",
                    "Tuple[str]",
                    "bool"
                ],
                "partial": [
                    "Dict[str,Any]",
                    "List",
                    "Dict",
                    "bytes",
                    "str",
                    "Tuple[str]",
                    "bool"
                ]
            }
        },
        "UserConfig.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "Optional[str]",
                    "str",
                    "Optional[List[Any]]",
                    "bool",
                    "None",
                    "Optional[bool]",
                    "List[Any]"
                ],
                "assets": [
                    "Optional[str]",
                    "str",
                    "Optional[List[Any]]",
                    "bool",
                    "None",
                    "Optional[bool]",
                    "List[Any]"
                ],
                "trading": [
                    "Optional[str]",
                    "str",
                    "Optional[List[Any]]",
                    "bool",
                    "None",
                    "Optional[bool]",
                    "List[Any]"
                ],
                "account_name": [
                    "str",
                    "None",
                    "bool",
                    "Union[Optional[str],Literal[Literal]]",
                    "Optional[str]"
                ],
                "poe_session_id": [
                    "int",
                    "None",
                    "Optional[List[str]]",
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "UserConfig.save": {
            "name": "save",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "Union[str,pathlib.Path]"
                ]
            }
        },
        "UserConfig.get_maximum_trade_volume_for_item": {
            "name": "get_maximum_trade_volume_for_item",
            "location": 66,
            "return": [
                "str",
                "List",
                "bool",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Callable[[str],bool]",
                    "Dict",
                    "Callable[str,bool]",
                    "bytes"
                ]
            }
        },
        "UserConfig.get_stock_boundaries": {
            "name": "get_stock_boundaries",
            "location": 83,
            "return": [
                "Tuple[int]",
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": [],
                "sell": [
                    "str",
                    "bool",
                    "cerise.config.Config"
                ],
                "buy": [
                    "str",
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        },
        "UserConfig.get_item_pairs": {
            "name": "get_item_pairs",
            "location": 122,
            "return": [
                "List[tuple]",
                "str",
                "List",
                "Iterable[str]",
                "schema.Schema"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserConfig.set_asset_quantity": {
            "name": "set_asset_quantity",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "asset": [
                    "Dict",
                    "int",
                    "Dict[str,Any]",
                    "bytes",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,dict[str,str]]"
                ],
                "quantity": [
                    "Dict",
                    "int",
                    "Dict[str,Any]",
                    "bytes",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,dict[str,str]]"
                ]
            }
        },
        "UserConfig.get_file_path": {
            "name": "get_file_path",
            "location": 138,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "pathlib.Path",
                    "List",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "UserConfig.from_file": {
            "name": "from_file",
            "location": 143,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "config.Config",
                "Dict[str, str]"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "pathlib.Path",
                    "Union[pathlib.Path,str]"
                ],
                "allow_default_config": [
                    "bool",
                    "str",
                    "List[pathlib.Path]",
                    "Tuple[str]",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "UserConfig.from_raw": {
            "name": "from_raw",
            "location": 162,
            "return": [
                "pyramid.config.Configurator",
                "opentrons.config.robot_configs.robot_config",
                "str",
                "cerise.config.Config",
                "sphinx.config.Config"
            ],
            "arguments": {
                "raw": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "poe-currency-flip-planner-master/src/core/edge.py": {
        "Edge.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offer": [
                    "str",
                    "int"
                ],
                "received": [
                    "int",
                    "float",
                    "bool"
                ],
                "paid": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "poe-currency-flip-planner-master/src/core/graph.py": {
        "build_graph": {
            "name": "build_graph",
            "location": 12,
            "return": [
                "bool",
                "Dict"
            ],
            "arguments": {
                "offers": [
                    "List",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "calculate_path_length": {
            "name": "calculate_path_length",
            "location": 33,
            "return": [
                "int",
                "List[str]",
                "Optional[str]",
                "str",
                "List[bytes]",
                "Tuple[int,int]",
                "List"
            ],
            "arguments": {
                "path": [
                    "List[str]",
                    "str",
                    "bool",
                    "Iterator[Tuple[str,Any,Any]]",
                    "int"
                ]
            }
        },
        "find_paths": {
            "name": "find_paths",
            "location": 37,
            "return": [
                "List",
                "str",
                "List[int]"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "Dict[str,Dict[str,Any]]",
                    "bool",
                    "BaseException"
                ],
                "have": [
                    "str",
                    "dict",
                    "Callable[[List, bool], None]",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "want": [
                    "str",
                    "src.config.user_config.UserConfig",
                    "List[int]",
                    "Dict[str,Any]"
                ],
                "user_config": [
                    "str",
                    "src.config.user_config.UserConfig",
                    "List[int]",
                    "Dict[str,Any]"
                ],
                "max_length": [
                    "int",
                    "Tuple[str,int]",
                    "str"
                ]
            }
        },
        "maximum_conversion_rate": {
            "name": "maximum_conversion_rate",
            "location": 93,
            "return": [
                "float",
                "str",
                "bool",
                "Tuple[str]",
                "tartare.core.models.Job",
                "Iterable[str]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "is_profitable": {
            "name": "is_profitable",
            "location": 100,
            "return": [
                "bool",
                "str",
                "Dict"
            ],
            "arguments": {
                "path": [
                    "List[Dict]",
                    "str",
                    "List[dict]",
                    "List"
                ]
            }
        },
        "equalize_stock_differences": {
            "name": "equalize_stock_differences",
            "location": 104,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "path": [
                    "List[src.core.offer.Offer]",
                    "Sequence[cirq.Qid]",
                    "int"
                ],
                "user_config": [
                    "str",
                    "src.config.user_config.UserConfig"
                ]
            }
        },
        "build_conversion": {
            "name": "build_conversion",
            "location": 152,
            "return": [
                "None",
                "str",
                "Dict[Text,]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "path": [
                    "List[src.core.offer.Offer]",
                    "List[SqlFile]",
                    "src.config.user_config.UserConfig"
                ],
                "user_config": [
                    "List[src.core.offer.Offer]",
                    "List[SqlFile]",
                    "src.config.user_config.UserConfig"
                ]
            }
        }
    },
    "poe-currency-flip-planner-master/src/core/offer.py": {
        "Offer.from_offer": {
            "name": "from_offer",
            "location": 14,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "int",
                    "Dict"
                ],
                "offer": [
                    "List[str]",
                    "int",
                    "Dict"
                ]
            }
        },
        "Offer.from_parts": {
            "name": "from_parts",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Type[T]",
                    "Type",
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "Optional[Iterable[T]]",
                    "None"
                ],
                "league": [
                    "int",
                    "Type[T]",
                    "Type",
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "Optional[Iterable[T]]",
                    "None"
                ],
                "have": [
                    "int",
                    "Type[T]",
                    "Type",
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "Optional[Iterable[T]]",
                    "None"
                ],
                "want": [
                    "int",
                    "Type[T]",
                    "Type",
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "Optional[Iterable[T]]",
                    "None"
                ],
                "contact_ign": [
                    "int",
                    "Type[T]",
                    "Type",
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "Optional[Iterable[T]]",
                    "None"
                ],
                "conversion_rate": [
                    "int",
                    "Type[T]",
                    "Type",
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "Optional[Iterable[T]]",
                    "None"
                ],
                "stock": [
                    "int",
                    "Type[T]",
                    "Type",
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "Optional[Iterable[T]]",
                    "None"
                ]
            }
        }
    },
    "poe-currency-flip-planner-master/src/core/backends/backend_pool.py": {
        "BackendPoolWorker.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "backend": [
                    "int",
                    "bool",
                    "float"
                ],
                "loop": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BackendPoolWorker.pick_tasks": {
            "name": "pick_tasks",
            "location": 28,
            "return": [
                "str",
                "bytes",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "Dict[str, Any]",
                    "bool",
                    "asyncio.Queue",
                    "int",
                    "str"
                ],
                "n_tasks": [
                    "int",
                    "list",
                    "List[str]"
                ]
            }
        },
        "BackendPool.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "item_list": [
                    "Optional[tortoise.backends.base.clienBaseDBAsyncClient]",
                    "List[dict]",
                    "Optional[int]",
                    "dict",
                    "int"
                ]
            }
        },
        "BackendPool.schedule": {
            "name": "schedule",
            "location": 112,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "league": [
                    "int",
                    "Generator",
                    "asyncio.events.AbstractEventLoop",
                    "bool",
                    "List[str]",
                    "dict",
                    "str"
                ],
                "item_pairs": [
                    "src.trading.ItemList",
                    "List[Tuple[str, str]]",
                    "bytes",
                    "List[Dict]",
                    "Optional[int]"
                ],
                "item_list": [
                    "src.trading.ItemList",
                    "List[Tuple[str, str]]",
                    "bytes",
                    "List[Dict]",
                    "Optional[int]"
                ],
                "limit": [
                    "int",
                    "Generator",
                    "asyncio.events.AbstractEventLoop",
                    "bool",
                    "List[str]",
                    "dict",
                    "str"
                ]
            }
        }
    },
    "poe-currency-flip-planner-master/src/core/backends/poeofficial.py": {
        "PoeOfficial.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_list": [
                    "Dict",
                    "Union[str,List[str]]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "PoeOfficial.name": {
            "name": "name",
            "location": 118,
            "return": [
                "Text",
                "Dict[str,Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PoeOfficial.map_offers_details": {
            "name": "map_offers_details",
            "location": 126,
            "return": [
                "Dict[Text,Union[str,float]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "offer_details": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "poe-currency-flip-planner-master/src/core/backends/poetrade.py": {
        "PoeTrade.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_list": [
                    "Dict",
                    "Union[str,List[str]]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "PoeTrade.name": {
            "name": "name",
            "location": 56,
            "return": [
                "Text",
                "Dict[str,Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PoeTrade.parse_conversion_offers": {
            "name": "parse_conversion_offers",
            "location": 64,
            "return": [
                "List",
                "List[str]",
                "Dict[int,int]",
                "str",
                "Set[str]",
                "Optional[dict]"
            ],
            "arguments": {
                "html": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PoeTrade.parse_conversion_offer": {
            "name": "parse_conversion_offer",
            "location": 71,
            "return": [
                "str",
                "None",
                "Optional[str]",
                "Dict[Text,Union[float,int]]"
            ],
            "arguments": {
                "offer_html": [
                    "int",
                    "Optional[Callable[[str], bool]]"
                ]
            }
        }
    },
    "poe-currency-flip-planner-master/src/core/backends/task.py": {
        "TaskException.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int"
                ]
            }
        }
    },
    "poe-currency-flip-planner-master/src/core/backends/throttler_ensemble.py": {
        "ThrottlerEnsemble.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "throttlers": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ThrottlerEnsemble.has_capacity": {
            "name": "has_capacity",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "poe-currency-flip-planner-master/src/trading/items.py": {
        "poetrade": {
            "name": "poetrade",
            "location": 238,
            "return": [
                "List[Item]",
                "str",
                "int",
                "Union[str,Pattern]"
            ],
            "arguments": {}
        },
        "poeofficial": {
            "name": "poeofficial",
            "location": 282,
            "return": [
                "List[Item]",
                "str",
                "int",
                "Union[str,Pattern]"
            ],
            "arguments": {}
        },
        "Item.is_supported_by": {
            "name": "is_supported_by",
            "location": 75,
            "return": [
                "bool",
                "str",
                "Tuple[str]",
                "Type",
                "Union[str,List[str]]",
                "Optional[bytes]"
            ],
            "arguments": {
                "self": [],
                "backend_name": [
                    "str",
                    "bytes"
                ]
            }
        },
        "ItemList.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_dict": [
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "ItemList.load_from_file": {
            "name": "load_from_file",
            "location": 91,
            "return": [
                "str",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "None",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        },
        "ItemList.find_discrepancies": {
            "name": "find_discrepancies",
            "location": 99,
            "return": [
                "Tuple[list]",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemList.map_item": {
            "name": "map_item",
            "location": 119,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "backend": [
                    "str",
                    "bool"
                ]
            }
        },
        "ItemList.is_item_supported": {
            "name": "is_item_supported",
            "location": 126,
            "return": [
                "bool",
                "str",
                "int",
                "Match"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict"
                ]
            }
        },
        "ItemList.ensure_items_are_supported": {
            "name": "ensure_items_are_supported",
            "location": 134,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "requested_item_pairs": [
                    "List[Tuple[str,str]]",
                    "List[tuple[Union[str,str]]]"
                ],
                "backend": [
                    "List[Tuple[str,str]]",
                    "List[tuple[Union[str,str]]]"
                ]
            }
        },
        "ItemList.get_item_list_for_backend": {
            "name": "get_item_list_for_backend",
            "location": 143,
            "return": [
                "List",
                "str",
                "Optional[str]",
                "int",
                "Callable",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "backend": [
                    "str",
                    "Dict[str, str]",
                    "dict"
                ],
                "config": [
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[Dict]"
                ]
            }
        },
        "ItemList.generate": {
            "name": "generate",
            "location": 184,
            "return": [
                "ItemList",
                "str",
                "bool",
                "pathlib.Path",
                "int"
            ],
            "arguments": {}
        },
        "ItemList.__merge_lists": {
            "name": "__merge_lists",
            "location": 200,
            "return": [
                "List[Union[tuple[Union[Any,Any]],tuple[Union[int,Any]],float,int]]",
                "List[int]",
                "List[str]",
                "bytes",
                "bool",
                "str",
                "Sequence[int]"
            ],
            "arguments": {
                "ground_truth": [
                    "List",
                    "List[tuple[Union[Any,Any]]]",
                    "List[float]",
                    "List[Tuple[Any,Any]]",
                    "List[tuple[Union[int,Any]]]",
                    "List[tuple]",
                    "Tuple[Union[int,int,int]]",
                    "Iterable[int]",
                    "List[Tuple[int,Any]]",
                    "Tuple[int,int,int]"
                ],
                "incoming": [
                    "str",
                    "List[int]",
                    "int",
                    "float"
                ]
            }
        },
        "ItemList.__postprocess_list": {
            "name": "__postprocess_list",
            "location": 219,
            "return": [
                "List[Text]",
                "List[int]",
                "List[str]",
                "bytes",
                "bool",
                "str",
                "Sequence[int]"
            ],
            "arguments": {
                "item_list": [
                    "List",
                    "str",
                    "Iterable",
                    "bs4.BeautifulSoup"
                ]
            }
        },
        "poetrade.map_item_name": {
            "name": "map_item_name",
            "location": 249,
            "return": [
                "bool",
                "List[Tuple[Any, str]]",
                "Optional[Union[int, str]]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "poe-currency-flip-planner-master/src/trading/stack_sizes.py": {
        "StackSizeHelper.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StackSizeHelper.get_stack_size": {
            "name": "get_stack_size",
            "location": 37,
            "return": [
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "StackSizeHelper.get_maximum_volume_for_item": {
            "name": "get_maximum_volume_for_item",
            "location": 40,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bytes",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "poe-currency-flip-planner-master/src/trading/vendor_offers.py": {
        "build_vendor_offers": {
            "name": "build_vendor_offers",
            "location": 23,
            "return": [
                "List[Offer]",
                "List[str]",
                "int",
                "Dict",
                "bool",
                "str"
            ],
            "arguments": {
                "league": [
                    "List[cirq.Qid]",
                    "float"
                ]
            }
        }
    },
    "poe-currency-flip-planner-master/tests/backend_test.py": {
        "BackendTest.test_backend_pool": {
            "name": "test_backend_pool",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BackendTest.has_key": {
            "name": "has_key",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "struct": [
                    "Dict[str,Any]",
                    "str",
                    "List[Dict[str,Any]]",
                    "List[str]"
                ],
                "key": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        }
    },
    "poe-currency-flip-planner-master/tests/config_test.py": {
        "UserConfigTest.test_deserialize_user_config_with_correct_defaults": {
            "name": "test_deserialize_user_config_with_correct_defaults",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserConfigTest.test_deserialize_user_config": {
            "name": "test_deserialize_user_config",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserConfigTest.test_load_default_user_config_from_file": {
            "name": "test_load_default_user_config_from_file",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserConfigTest.assert_is_user_config": {
            "name": "assert_is_user_config",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "poe-currency-flip-planner-master/tests/graph_test.py": {
        "expected_paths_small_same_currency": {
            "name": "expected_paths_small_same_currency",
            "location": 242,
            "return": [
                "List[list[Offer]]",
                "str",
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {}
        },
        "expected_profitable_paths_small_same_currency": {
            "name": "expected_profitable_paths_small_same_currency",
            "location": 327,
            "return": [
                "List",
                "int",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "GraphTest.test_build_graph": {
            "name": "test_build_graph",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphTest.test_find_paths": {
            "name": "test_find_paths",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphTest.test_is_profitable": {
            "name": "test_is_profitable",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphTest.test_build_non_profitable_conversions": {
            "name": "test_build_non_profitable_conversions",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphTest.test_calculate_path_length_ignores_all_vendor_offers": {
            "name": "test_calculate_path_length_ignores_all_vendor_offers",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphTest.test_calculate_path_length": {
            "name": "test_calculate_path_length",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "poe-currency-flip-planner-master/tests/graph_vendor_test.py": {
        "GraphVendorTest.test_build_graph": {
            "name": "test_build_graph",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "poe-currency-flip-planner-master/tests/item_test.py": {
        "ItemListTest.test_load_itemlist_from_file": {
            "name": "test_load_itemlist_from_file",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
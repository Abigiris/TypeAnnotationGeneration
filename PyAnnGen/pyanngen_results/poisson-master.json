{
    "poisson-master/basic_stats.py": {
        "get_aspect_bounds": {
            "name": "get_aspect_bounds",
            "location": 14,
            "return": [
                "Tuple[(Tuple[(float, float)], Tuple[(float, float)])]"
            ],
            "arguments": {
                "x": [
                    "np.ndarray"
                ],
                "y": [
                    "np.ndarray"
                ]
            }
        },
        "load_mc": {
            "name": "load_mc",
            "location": 137,
            "return": [
                "Stats"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "HitStats.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "all_hits": [
                    "int",
                    "bytes"
                ]
            }
        },
        "HitStats._scatter": {
            "name": "_scatter",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "tuple[typing.Union[float,float]]",
                    "numpy.ndarray",
                    "int",
                    "float",
                    "Tuple[float, float]"
                ],
                "y": [
                    "tuple[typing.Union[float,float]]",
                    "numpy.ndarray",
                    "int",
                    "float",
                    "Tuple[float, float]"
                ],
                "x_bounds": [
                    "float",
                    "int",
                    "Optional[Collection[int]]",
                    "typing.Collection",
                    "None",
                    "numpy.ndarray"
                ],
                "y_bounds": [
                    "float",
                    "int",
                    "Optional[Collection[int]]",
                    "typing.Collection",
                    "None",
                    "numpy.ndarray"
                ]
            }
        },
        "HitStats.get_aspect_bounds": {
            "name": "get_aspect_bounds",
            "location": 58,
            "return": [
                "Tuple[(Tuple[(float, float)], Tuple[(float, float)])]"
            ],
            "arguments": {
                "self": [],
                "x_coord": [
                    "str"
                ],
                "y_coord": [
                    "str"
                ]
            }
        },
        "HitStats.scatter": {
            "name": "scatter",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hits": [
                    "list[list[float]]",
                    "pandas.DataFrame",
                    "list[float]",
                    "list[list[T]]",
                    "List[List[float]]",
                    "list[T]",
                    "List[float]",
                    "numpy.ndarray",
                    "float",
                    "List[List[T]]",
                    "List[T]"
                ],
                "x_coord": [
                    "str"
                ],
                "y_coord": [
                    "str"
                ],
                "zoom": [
                    "bool"
                ]
            }
        },
        "HitStats.scatter3d": {
            "name": "scatter3d",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hits": [
                    "list[int]",
                    "float",
                    "list[numpy.ndarray]",
                    "int",
                    "List[int]",
                    "List[numpy.ndarray]"
                ]
            }
        },
        "Stats.get_stats": {
            "name": "get_stats",
            "location": 91,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stats.get_xyz_bounds": {
            "name": "get_xyz_bounds",
            "location": 102,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stats.draw_hists": {
            "name": "draw_hists",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stats.draw_energy_vs_charge": {
            "name": "draw_energy_vs_charge",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.test": {
            "name": "test",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "poisson-master/emd.py": {
        "emd": {
            "name": "emd",
            "location": 8,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "numpy.ndarray",
                    "numpy.array"
                ],
                "y": [
                    "float",
                    "numpy.ndarray"
                ],
                "xy_dist": [
                    "int"
                ]
            }
        },
        "sparse_emd": {
            "name": "sparse_emd",
            "location": 65,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "Union[int, float]"
                ],
                "x_points": [
                    "str",
                    "float",
                    "int",
                    "typing.Container",
                    "numpy.ndarray",
                    "Container",
                    "list[str]",
                    "List[str]"
                ],
                "y": [
                    "float",
                    "int",
                    "Union[int, float]"
                ],
                "y_points": [
                    "str",
                    "float",
                    "int",
                    "typing.Container",
                    "numpy.ndarray",
                    "Container",
                    "list[str]",
                    "List[str]"
                ],
                "p": [
                    "int",
                    "str",
                    "float",
                    "numpy.ndarray",
                    "Container",
                    "List[str]"
                ]
            }
        },
        "Test.test_1d_emd": {
            "name": "test_1d_emd",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.test_2d_emd": {
            "name": "test_2d_emd",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.test_sparse_emd": {
            "name": "test_sparse_emd",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "poisson-master/hits.py": {
        "hits_to_density": {
            "name": "hits_to_density",
            "location": 11,
            "return": [
                "Tuple[(np.ndarray, np.ndarray)]"
            ],
            "arguments": {
                "hits": [
                    "Union[numpy.ndarray, numpy.void]",
                    "numpy.ndarray",
                    "float",
                    "int"
                ]
            }
        },
        "Test.test": {
            "name": "test",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "poisson-master/mc_loader.py": {
        "get_xyz_bounds": {
            "name": "get_xyz_bounds",
            "location": 10,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "hits": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "get_bin_edges": {
            "name": "get_bin_edges",
            "location": 21,
            "return": [
                "List[np.ndarray]"
            ],
            "arguments": {
                "bounds": [
                    "np.ndarray"
                ],
                "divisions": [
                    "Sequence[int]"
                ]
            }
        },
        "digitize": {
            "name": "digitize",
            "location": 50,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "data": [
                    "pandas.DataFrame"
                ],
                "bins": [
                    "np.ndarray"
                ]
            }
        },
        "file_to_model": {
            "name": "file_to_model",
            "location": 137,
            "return": [
                "MC"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "divisions": [
                    "Sequence[int]"
                ]
            }
        },
        "MC.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "dict",
                    "pandas.DataFrame"
                ],
                "bins": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Test.test_model": {
            "name": "test_model",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
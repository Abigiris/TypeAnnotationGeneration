{
    "polyvers-master/setup.py": {
        "yield_rst_only_markup": {
            "name": "yield_rst_only_markup",
            "location": 22,
            "return": [
                "",
                "typing.Generator[typing.Generator[]]"
            ],
            "arguments": {
                "lines": [
                    "str",
                    "dict[str, str]",
                    "Union[Dict[str, str], List[Any], str]",
                    "list[typing.Any]",
                    "Union[Dict[str, str], List[str], str]",
                    "list[str]",
                    "List[str]",
                    "Iterator[str]"
                ]
            }
        },
        "yield_rst_only_markup.clean_line": {
            "name": "clean_line",
            "location": 78,
            "return": [
                "Sequence[str]",
                "str",
                "Iterable[str]",
                "list",
                "Set[str]",
                "List[str]"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        }
    },
    "polyvers-master/docs/conf.py": {},
    "polyvers-master/pvcmd/polyvers/bumpcmd.py": {
        "BumpCmd._stop_if_git_dirty": {
            "name": "_stop_if_git_dirty",
            "location": 192,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BumpCmd._filter_projects_by_pnames": {
            "name": "_filter_projects_by_pnames",
            "location": 203,
            "return": [
                "tuple[typing.Union[int,str,list[]]]",
                "str",
                "Dict[str, Dict[str, int]]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "projects": [],
                "version": [
                    "int",
                    "str"
                ]
            }
        },
        "BumpCmd._make_commit_message": {
            "name": "_make_commit_message",
            "location": 219,
            "return": [
                "typing.Text",
                "str",
                "raiden.utils.Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BumpCmd._commit_new_release": {
            "name": "_commit_new_release",
            "location": 238,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[Mapping[str, Any]]",
                    "None",
                    "typing.Mapping"
                ],
                "projects": [
                    "bool",
                    "float",
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "BumpCmd._prepare_project_for_bump": {
            "name": "_prepare_project_for_bump",
            "location": 250,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "prj": [
                    "int",
                    "str",
                    "float",
                    "raiden.utils.Dict",
                    "bool"
                ],
                "version_bump": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "List[Tuple[str, Any]]",
                    "None",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "is_to_bump": [
                    "bool",
                    "list[str]",
                    "str",
                    "List[str]",
                    "None",
                    "Optional[List[str]]",
                    "int"
                ]
            }
        },
        "BumpCmd._log_action_completed": {
            "name": "_log_action_completed",
            "location": 274,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "projects": [
                    "str",
                    "int"
                ],
                "fproc": [
                    "Iterable[Any]",
                    "int"
                ]
            }
        },
        "BumpCmd.run": {
            "name": "run",
            "location": 297,
            "return": [
                "Awaitable",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "polyvers-master/pvcmd/polyvers/cli.py": {
        "merge_dict": {
            "name": "merge_dict",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "dct": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "merge_dct": [
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "_git_desc_without_screams": {
            "name": "_git_desc_without_screams",
            "location": 503,
            "return": [
                "str",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "proj": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 645,
            "return": [
                "int",
                "float",
                "bytes"
            ],
            "arguments": {
                "argv": [
                    "int",
                    "str",
                    "dict",
                    "Optional[int]"
                ],
                "cmd_consumer": [
                    "int",
                    "List[int]",
                    "trezor.io.HID",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "PolyversCmd._subcommands": {
            "name": "_subcommands",
            "location": 87,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolyversCmd.collect_app_infos": {
            "name": "collect_app_infos",
            "location": 98,
            "return": [
                "bool",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolyversCmd._all_app_configurables": {
            "name": "_all_app_configurables",
            "location": 107,
            "return": [
                "bool",
                "cmk.utils.type_defs.EventRule"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolyversCmd._config_paths": {
            "name": "_config_paths",
            "location": 116,
            "return": [
                "str",
                "pathlib.Path",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolyversCmd.parse_command_line": {
            "name": "parse_command_line",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "PolyversCmd.git_root": {
            "name": "git_root",
            "location": 153,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolyversCmd._autodiscover_project_basepaths": {
            "name": "_autodiscover_project_basepaths",
            "location": 240,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolyversCmd._autodiscover_versioning_scheme": {
            "name": "_autodiscover_versioning_scheme",
            "location": 288,
            "return": [
                "str",
                "int",
                "Optional[int]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolyversCmd.bootstrapp_projects": {
            "name": "bootstrapp_projects",
            "location": 310,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SubCmd.__init__": {
            "name": "__init__",
            "location": 369,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InitCmd._read_non_user_configs": {
            "name": "_read_non_user_configs",
            "location": 398,
            "return": [
                "bool",
                "Mapping[str, int]",
                "Optional[str]",
                "config.Config",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InitCmd.initialize": {
            "name": "initialize",
            "location": 405,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "InitCmd._cleaned_config": {
            "name": "_cleaned_config",
            "location": 422,
            "return": [
                "str",
                "dict",
                "Optional[dict]",
                "app.config.MQConfig",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InitCmd._make_yaml_config": {
            "name": "_make_yaml_config",
            "location": 445,
            "return": [
                "Dict[str, Any]",
                "Optional[IO[str]]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InitCmd.run": {
            "name": "run",
            "location": 465,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusCmd._describe_projects": {
            "name": "_describe_projects",
            "location": 523,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "projects": [
                    "bool",
                    "config.Project",
                    "Tuple[int, int]",
                    "pathlib.Path"
                ]
            }
        },
        "StatusCmd._fetch_all": {
            "name": "_fetch_all",
            "location": 527,
            "return": [
                "str",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": [],
                "projects": [
                    "int",
                    "str"
                ]
            }
        },
        "StatusCmd.run": {
            "name": "run",
            "location": 535,
            "return": [
                "str",
                "utils.Node",
                "raiden.utils.Tuple[int, int]",
                "bytes",
                "bool",
                "int",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogconfCmd.run": {
            "name": "run",
            "location": 556,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "polyvers-master/pvcmd/polyvers/engrave.py": {
        "_as_glob_pattern_pair": {
            "name": "_as_glob_pattern_pair",
            "location": 27,
            "return": [
                "tuple[None]",
                "bool",
                "tuple[typing.Union[int,dict[, ],list[int],list[list[int]],str]]",
                "tuple[typing.Optional[str]]",
                "Optional[int]",
                "str",
                "Optional[float]",
                "Optional[bool]"
            ],
            "arguments": {
                "fpath": [
                    "str",
                    "dict",
                    "IO"
                ]
            }
        },
        "_prepare_glob_pairs": {
            "name": "_prepare_glob_pairs",
            "location": 56,
            "return": [
                "list[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "patterns": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "_glob_find_files": {
            "name": "_glob_find_files",
            "location": 63,
            "return": [
                "str",
                "dict[typing.Any, str]",
                "Tuple[str, str]",
                "dict[str, dict[str, typing.Any]]",
                "int",
                "dict[str, str]",
                "pathlib.Path",
                "dict[typing.Union[str,str,str], typing.Union[str,pathlib.Path,str]]"
            ],
            "arguments": {
                "pattern_pairs": [
                    "tuple[typing.Union[str,str]]",
                    "Tuple[str, str]",
                    "tuple[tuple[typing.Union[str,str]]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "int",
                    "Collection[str]",
                    "Tuple[Tuple[str, str]]",
                    "Dict[str, Any]"
                ],
                "mybase": [
                    "str",
                    "pathlib.Path",
                    "int",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "_glob_filter_in_mybase": {
            "name": "_glob_filter_in_mybase",
            "location": 83,
            "return": [
                "list[]",
                "int",
                "str",
                "List[str]",
                "float"
            ],
            "arguments": {
                "files": [
                    "pathlib.Path",
                    "str",
                    "IO[str]",
                    "pynamodb.expressions.operand.Path",
                    "bool"
                ],
                "mybase": [
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "typing.BinaryIO",
                    "BinaryIO",
                    "torch.nn.utils.rnn.PackedSequence",
                    "pathlib.Path"
                ]
            }
        },
        "_glob_filter_out_other_bases": {
            "name": "_glob_filter_out_other_bases",
            "location": 98,
            "return": [
                "list[str]",
                "pathlib.Path",
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "files": [
                    "list[str]",
                    "pathlib.Path",
                    "List[str]",
                    "pynamodb.expressions.operand.Path",
                    "BinaryIO",
                    "utils.typeshed.pathlike",
                    "pathlib.PosixPath"
                ],
                "other_bases": [
                    "list[str]",
                    "str",
                    "pathlib.Path",
                    "pynamodb.expressions.operand.Path",
                    "List[str]",
                    "IO[str]"
                ]
            }
        },
        "glob_files": {
            "name": "glob_files",
            "location": 113,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "patterns": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "mybase": [
                    "typing.Text",
                    "str",
                    "pathlib.Path"
                ],
                "other_bases": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path"
                ]
            }
        },
        "overlapped_matches": {
            "name": "overlapped_matches",
            "location": 145,
            "return": [
                "set[]",
                "cmk.utils.type_defs.EventRule",
                "Callable[[T], bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "matches": [
                    "int",
                    "str",
                    "List[List]",
                    "list[list[]]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Awaitable[T]",
                    "collections.abc.Awaitable[T]"
                ],
                "no_touch": [
                    "bool",
                    "str",
                    "SupportsFloat",
                    "Literal[False]",
                    "Iterable[Any]",
                    "List[Tuple]"
                ]
            }
        },
        "overlapped_matches.overlap": {
            "name": "overlap",
            "location": 157,
            "return": [
                "str",
                "Dict[str, int]",
                "List[Dict[str, Any]]",
                "bytes",
                "Dict[str, List[str]]",
                "int"
            ],
            "arguments": {
                "a": [
                    "T",
                    "int"
                ],
                "b": [
                    "T",
                    "int"
                ]
            }
        },
        "FileProcessor._set_file_bytes": {
            "name": "_set_file_bytes",
            "location": 188,
            "return": [
                "str",
                "Optional[Dict]",
                "int",
                "None",
                "typing.Iterable[dict[, ]]",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "fpath": [
                    "bool",
                    "Dict[str, Any]",
                    "bytes",
                    "qcodes.utils.metadata.Metadatable",
                    "Exception"
                ],
                "fbytes": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "float",
                    "typing.Iterable[dict[, ]]",
                    "Iterable[dict]",
                    "dict"
                ]
            }
        },
        "FileProcessor._read_file": {
            "name": "_read_file",
            "location": 200,
            "return": [
                "pathlib.Path",
                "str",
                "bytes",
                "bool",
                "list[]",
                "float",
                "list[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "fpath": [
                    "List[pathlib.Path]",
                    "str",
                    "List[Union[pathlib.Path, str]]",
                    "dict",
                    "Set[pathlib.Path]",
                    "int",
                    "list"
                ]
            }
        },
        "FileProcessor._write_all_files": {
            "name": "_write_all_files",
            "location": 213,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileProcessor.nmatches": {
            "name": "nmatches",
            "location": 234,
            "return": [
                "int",
                "list",
                "List[Dict[str, Any]]",
                "frozenset",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileProcessor.grafted_files": {
            "name": "grafted_files",
            "location": 237,
            "return": [
                "list[]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "all_searched": [
                    "bool",
                    "Optional[List[str]]",
                    "str",
                    "dict"
                ]
            }
        },
        "FileProcessor._glob_project": {
            "name": "_glob_project",
            "location": 243,
            "return": [
                "list[tuple[typing.Union[list[str],tuple[typing.Union[typing.Literal,typing.Literal]],str]]]",
                "str",
                "Iterable[allennlp.data.instance.Instance]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "raiden.utils.Address",
                    "Optional[\"Node\"]",
                    "raiden.tests.fuzz.utils.SendUnlockInNode"
                ],
                "other_bases": [
                    "str",
                    "tuple[]"
                ]
            }
        },
        "FileProcessor._reindex_glob_results_on_fpaths": {
            "name": "_reindex_glob_results_on_fpaths",
            "location": 264,
            "return": [
                "int",
                "str",
                "dict[str, typing.Any]",
                "bool",
                "list[]",
                "dict[str, str]",
                "dict[, ]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "gtruples": [
                    "bool",
                    "utils.Controller",
                    "raiden.utils.List[raiden.transfer.mediated_transfer.state.MediationPairState]"
                ]
            }
        },
        "FileProcessor._glob_all_projects": {
            "name": "_glob_all_projects",
            "location": 272,
            "return": [
                "dict",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "projects": [
                    "Set[str]",
                    "set[str]"
                ],
                "all_projects": []
            }
        },
        "FileProcessor._scan_all_grafts": {
            "name": "_scan_all_grafts",
            "location": 285,
            "return": [
                "bool",
                "tuple[]",
                "str",
                "list[]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "grafts_map": [
                    "dict",
                    "dict[, ]",
                    "Dict[int, Dict[int, int]]",
                    "dict[int, dict[int, int]]",
                    "Dict[str, float]",
                    "dict[str, float]"
                ]
            }
        },
        "FileProcessor._drop_overlapping_matches": {
            "name": "_drop_overlapping_matches",
            "location": 312,
            "return": [
                "dict[tuple[typing.Union[str,typing.Any]], list[typing.Union[str,typing.Any]]]",
                "int",
                "str",
                "bool",
                "Dict[str, int]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "match_map": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "FileProcessor.scan_projects": {
            "name": "scan_projects",
            "location": 333,
            "return": [
                "bool",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "projects": [],
                "all_projects": [
                    "None"
                ]
            }
        },
        "FileProcessor._graft_match": {
            "name": "_graft_match",
            "location": 346,
            "return": [
                "tuple[typing.Union[bool,str,typing.Iterable[str]]]",
                "cmk.utils.type_defs.EventRule",
                "Callable[[T], bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "graft": [
                    "bool",
                    "int",
                    "str"
                ],
                "fbytes": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "match": [
                    "str",
                    "Pattern[str]",
                    "List[float]",
                    "int"
                ],
                "offset": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "project": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "FileProcessor.engrave_matches": {
            "name": "engrave_matches",
            "location": 370,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "polyvers-master/pvcmd/polyvers/pvproject.py": {
        "_slices_to_ids": {
            "name": "_slices_to_ids",
            "location": 44,
            "return": [
                "list[str]",
                "str",
                "list",
                "bytes"
            ],
            "arguments": {
                "slices": [
                    "Callable",
                    "bool",
                    "str"
                ],
                "thelist": [
                    "List[int]",
                    "Tuple[FrozenSet[int]]",
                    "str",
                    "List[dict]"
                ]
            }
        },
        "Graft._is_valid_regex": {
            "name": "_is_valid_regex",
            "location": 69,
            "return": [
                "str",
                "list",
                "float"
            ],
            "arguments": {
                "self": [],
                "proposal": [
                    "type",
                    "bool",
                    "typing.Type",
                    "str",
                    "Exception",
                    "callable",
                    "typing.Callable[, ]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "Graft.regex_resolved": {
            "name": "regex_resolved",
            "location": 80,
            "return": [
                "Optional[str]",
                "str",
                "Pattern"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "bool",
                    "str"
                ]
            }
        },
        "Graft.subst_resolved": {
            "name": "subst_resolved",
            "location": 100,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "str"
                ]
            }
        },
        "Graft.collect_matches": {
            "name": "collect_matches",
            "location": 128,
            "return": [
                "list[]",
                "str",
                "bool",
                "OrderedDict",
                "int"
            ],
            "arguments": {
                "self": [],
                "fbytes": [
                    "set[]",
                    "set",
                    "set[str]",
                    "Set[str]",
                    "typing.Sequence[str]",
                    "Iterable",
                    "Sequence[str]"
                ],
                "project": [
                    "bool",
                    "str",
                    "pathlib.Path",
                    "pathlib.PosixPath"
                ]
            }
        },
        "Graft.sliced_matches": {
            "name": "sliced_matches",
            "location": 140,
            "return": [
                "str",
                "list[str]",
                "List[Dict[str, Any]]",
                "List[T]",
                "Optional[Union[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "matches": [
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Graft.__str__": {
            "name": "__str__",
            "location": 151,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engrave.__str__": {
            "name": "__str__",
            "location": 184,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project._get_now": {
            "name": "_get_now",
            "location": 227,
            "return": [
                "str",
                "datetime.date",
                "int",
                "datetime.datetime",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.load_current_version_from_history": {
            "name": "load_current_version_from_history",
            "location": 237,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vtag_index": [
                    "int",
                    "Dict[str, Dict[str, int]]",
                    "str",
                    "list"
                ]
            }
        },
        "Project.set_new_version": {
            "name": "set_new_version",
            "location": 245,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "version_bump": [
                    "str",
                    "None",
                    "dict",
                    "cmk.utils.type_defs.UserId",
                    "dict[, ]"
                ]
            }
        },
        "Project._format_vtag": {
            "name": "_format_vtag",
            "location": 281,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None",
                    "Tuple[str]",
                    "tuple[str]",
                    "Optional[List[Any]]",
                    "list[typing.Any]"
                ],
                "is_release": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Tuple[str]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "Project.tag_fnmatch": {
            "name": "tag_fnmatch",
            "location": 286,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "is_release": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Project._is_valid_pvtag_regex": {
            "name": "_is_valid_pvtag_regex",
            "location": 325,
            "return": [
                "str",
                "list",
                "float"
            ],
            "arguments": {
                "self": [],
                "proposal": [
                    "type",
                    "bool",
                    "typing.Type",
                    "str",
                    "Exception",
                    "callable",
                    "typing.Callable[, ]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "Project.is_good": {
            "name": "is_good",
            "location": 337,
            "return": [
                "bool",
                "str",
                "Dict[int, str]",
                "type",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.summary_interped": {
            "name": "summary_interped",
            "location": 362,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "is_release": [
                    "int",
                    "Optional[int]",
                    "datetime.datetime",
                    "float",
                    "str"
                ]
            }
        },
        "Project.tag_regex": {
            "name": "tag_regex",
            "location": 375,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "is_release": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Project.pvtags_history": {
            "name": "pvtags_history",
            "location": 393,
            "return": [
                "None",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.version_from_pvtag": {
            "name": "version_from_pvtag",
            "location": 404,
            "return": [],
            "arguments": {
                "self": [],
                "pvtag": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "is_release": [
                    "Optional[int]",
                    "None",
                    "dict",
                    "int",
                    "str",
                    "Callable",
                    "dict[, ]",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Project.git_describe": {
            "name": "git_describe",
            "location": 415,
            "return": [
                "str",
                "logging.LogRecord"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.last_commit_tstamp": {
            "name": "last_commit_tstamp",
            "location": 493,
            "return": [
                "str",
                "dict[, ]",
                "Set[str]",
                "None",
                "Dict[str, Any]",
                "int",
                "List[str]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.tag_version_commit": {
            "name": "tag_version_commit",
            "location": 520,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Project.active_engraves": {
            "name": "active_engraves",
            "location": 618,
            "return": [
                "list[]",
                "str",
                "list",
                "Optional[dict]",
                "List[List[str]]",
                "Dict[str, Any]",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project._require_relative_version": {
            "name": "_require_relative_version",
            "location": 632,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "change": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/polyvers/pvtags.py": {
        "git_project_errors_handled": {
            "name": "git_project_errors_handled",
            "location": 57,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "pname": [
                    "str",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "_git_current_branch": {
            "name": "_git_current_branch",
            "location": 73,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {}
        },
        "_parse_ref_pairs_list": {
            "name": "_parse_ref_pairs_list",
            "location": 84,
            "return": [
                "dict[, ]",
                "Set[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "reflines": [
                    "str"
                ]
            }
        },
        "_restore_refs": {
            "name": "_restore_refs",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "old_refs": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, dict]"
                ],
                "new_refs": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, dict]"
                ]
            }
        },
        "git_restore_point": {
            "name": "git_restore_point",
            "location": 114,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "restore_head": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ],
                "heads": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "int",
                    "List[int]",
                    "list",
                    "Optional[List[str]]",
                    "Optional[Sequence[str]]",
                    "str"
                ],
                "tags": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "int",
                    "List[int]",
                    "list",
                    "Optional[List[str]]",
                    "Optional[Sequence[str]]",
                    "str"
                ]
            }
        },
        "make_pvtag_project": {
            "name": "make_pvtag_project",
            "location": 141,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "pname": [
                    "typing.Text",
                    "str",
                    "bool"
                ]
            }
        },
        "make_match_all_pvtags_project": {
            "name": "make_match_all_pvtags_project",
            "location": 156,
            "return": [
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {}
        },
        "make_vtag_project": {
            "name": "make_vtag_project",
            "location": 177,
            "return": [
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "pname": [
                    "typing.Text",
                    "str",
                    "Tuple[float, float, float, float]"
                ]
            }
        },
        "make_match_all_vtags_project": {
            "name": "make_match_all_vtags_project",
            "location": 194,
            "return": [
                "int",
                "List[str]",
                "Optional[Callable]"
            ],
            "arguments": {}
        },
        "_fetch_all_tags": {
            "name": "_fetch_all_tags",
            "location": 206,
            "return": [
                "str",
                "tuple[]"
            ],
            "arguments": {
                "tag_patterns": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]"
                ],
                "pnames_msg": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "List['LabelTag']",
                    "list[L]"
                ]
            }
        },
        "_parse_git_tag_ref_lines": {
            "name": "_parse_git_tag_ref_lines",
            "location": 214,
            "return": [
                "list[str]",
                "List[str]",
                "str",
                "Set[str]",
                "bool"
            ],
            "arguments": {
                "tag_ref_lines": [
                    "str",
                    "dict[, ]",
                    "int",
                    "Optional[dict]"
                ],
                "keep_lightweight": [
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "_fetch_annotated_tags": {
            "name": "_fetch_annotated_tags",
            "location": 229,
            "return": [
                "str",
                "Tuple[str]",
                "list[]",
                "Set[str]",
                "list[str]",
                "typing.Pattern",
                "dict[, ]",
                "typing.Type"
            ],
            "arguments": {
                "tag_patterns": [
                    "str",
                    "Optional[qutebrowser.utils.urlmatch.UrlPattern]",
                    "Optional[str]",
                    "int",
                    "Mapping"
                ],
                "pnames_msg": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "_replace_pvtags_in_projects": {
            "name": "_replace_pvtags_in_projects",
            "location": 251,
            "return": [
                "list[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "projects": [
                    "str"
                ],
                "pvtags_by_pname": [
                    "str"
                ]
            }
        },
        "populate_pvtags_history": {
            "name": "populate_pvtags_history",
            "location": 261,
            "return": [
                "list[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "assign_tags_to_projects": {
            "name": "assign_tags_to_projects",
            "location": 307,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tags": [
                    "str",
                    "Sequence[str]",
                    "list[str]",
                    "List[str]"
                ],
                "projects": [
                    "list[str]",
                    "Sequence[str]",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/polyvers/vermath.py": {
        "_packver": {
            "name": "_packver",
            "location": 29,
            "return": [
                "Version",
                "bool",
                "Callable"
            ],
            "arguments": {
                "v": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "is_version_id_relative": {
            "name": "is_version_id_relative",
            "location": 87,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "version_str": [
                    "str"
                ]
            }
        },
        "_add_pre": {
            "name": "_add_pre",
            "location": 91,
            "return": [
                "str",
                "int",
                "Callable[[str], T]",
                "List[str]",
                "None",
                "Union[Callable, None]",
                "tuple[typing.Optional[int]]",
                "tuple[typing.Union[str,list[str],list[],bool]]"
            ],
            "arguments": {
                "base_tuple": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]"
                ],
                "rel_label": [
                    "list[str]",
                    "int",
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[List[int]]",
                    "list[int]",
                    "float",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "rel_num": [
                    "list[str]",
                    "int",
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[List[int]]",
                    "list[int]",
                    "float",
                    "Optional[float]",
                    "Optional[int]"
                ]
            }
        },
        "_add_versions": {
            "name": "_add_versions",
            "location": 106,
            "return": [
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {
                "base_ver": [
                    "bool",
                    "str",
                    "list[str]",
                    "List[str]",
                    "list[int]",
                    "List[int]",
                    "typing.Type",
                    "int",
                    "Type"
                ],
                "relative_ver": [
                    "bool",
                    "str",
                    "list[str]",
                    "List[str]",
                    "list[int]",
                    "List[int]",
                    "typing.Type",
                    "int",
                    "Type"
                ]
            }
        },
        "add_versions": {
            "name": "add_versions",
            "location": 195,
            "return": [
                "list[str]",
                "int",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "v1": [
                    "list[str]",
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "Pep440Version.cast": {
            "name": "cast",
            "location": 41,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "list[float]",
                    "float",
                    "T",
                    "bool",
                    "Union[bool, Any]",
                    "typing.Any"
                ]
            }
        },
        "_add_versions.is_part_in_new_version": {
            "name": "is_part_in_new_version",
            "location": 142,
            "return": [
                "bool",
                "int",
                "Iterable[bytes]",
                "List[str]"
            ],
            "arguments": {
                "rel_exist": [
                    "Callable"
                ],
                "base_exist": [
                    "Callable"
                ],
                "part_fix": [
                    "Callable"
                ]
            }
        },
        "_add_versions.rebase_part": {
            "name": "rebase_part",
            "location": 164,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "base_part": [
                    "Optional[int]",
                    "str",
                    "int",
                    "float",
                    "Iterator[str]"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/polyvers/__init__.py": {},
    "polyvers-master/pvcmd/polyvers/__main__.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "polyvers-master/pvcmd/polyvers/cmdlet/autotrait.py": {
        "AutoInstance.cast": {
            "name": "cast",
            "location": 17,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "AutoInstance.validate": {
            "name": "validate",
            "location": 33,
            "return": [
                "iclass",
                "int",
                "Tuple[str, str]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "dict[, ]",
                    "dict",
                    "dict[str, float]",
                    "str",
                    "Dict[str, float]",
                    "tuple[typing.Union[int,int,int]]",
                    "Tuple[int, int, int]",
                    "bool",
                    "dict[str, dict[str, int]]",
                    "Dict[str, Dict[str, int]]",
                    "dict[str, dict[str, typing.Any]]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]"
                ],
                "value": [
                    "list[]",
                    "T",
                    "list"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/polyvers/cmdlet/cfgcmd.py": {
        "prepare_matcher": {
            "name": "prepare_matcher",
            "location": 26,
            "return": [
                "Dict[str, Any]",
                "bool",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "terms": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "dict"
                ],
                "is_regex": [
                    "bool",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "prepare_search_map": {
            "name": "prepare_search_map",
            "location": 43,
            "return": [
                "OrderedDict",
                "str",
                "bool",
                "IO",
                "List[object]"
            ],
            "arguments": {
                "all_classes": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "Optional[Dict[Any, Any]]",
                    "int"
                ],
                "own_traits": [
                    "Optional[str]",
                    "str",
                    "Optional[Any]",
                    "None",
                    "int",
                    "Dict[str, Any]",
                    "typing.Any",
                    "dict[str, typing.Any]",
                    "Optional[T]"
                ]
            }
        },
        "prepare_help_selector": {
            "name": "prepare_help_selector",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "only_class_in_values": [
                    "str",
                    "int",
                    "list",
                    "list[]",
                    "Optional[str]",
                    "None",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "verbose": [
                    "str",
                    "int",
                    "list",
                    "list[]",
                    "Optional[str]",
                    "None",
                    "Tuple[str]",
                    "tuple[str]"
                ]
            }
        },
        "all_configurables": {
            "name": "all_configurables",
            "location": 607,
            "return": [
                "bool",
                "dict",
                "revlibs.connections.config.Config",
                "qutebrowser.config.config.Config",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "cmd": [
                    "List[str]",
                    "list[str]",
                    "Dict[int, dict]",
                    "bool",
                    "dict[int, dict[, ]]",
                    "Callable[[], bool]",
                    "typing.Callable[[], bool]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "prepare_matcher.matcher": {
            "name": "matcher",
            "location": 29,
            "return": [
                "str",
                "typing.Callable[, ]"
            ],
            "arguments": {
                "r": [
                    "str",
                    "Mapping[str, Any]",
                    "Mapping[str, str]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[Sequence[str]]",
                    "List[str]"
                ]
            }
        },
        "prepare_matcher.match": {
            "name": "match",
            "location": 37,
            "return": [
                "bool",
                "List[str]",
                "Tuple[int, int]",
                "tuple",
                "float",
                "int"
            ],
            "arguments": {
                "word": [
                    "int"
                ]
            }
        },
        "_ConfigBase._rebase_hierarchy": {
            "name": "_rebase_hierarchy",
            "location": 135,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "change": [
                    "bool",
                    "int",
                    "mypy.types.Instance"
                ]
            }
        },
        "ConfigCmd._inherit_parent_cmd": {
            "name": "_inherit_parent_cmd",
            "location": 187,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "change": [
                    "str"
                ]
            }
        },
        "ConfigCmd.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfosCmd._collect_env_vars": {
            "name": "_collect_env_vars",
            "location": 225,
            "return": [
                "list[]",
                "str",
                "Set[str]",
                "dict",
                "List[int]",
                "Optional[bool]",
                "Iterator[Tuple[str, Any, Any]]"
            ],
            "arguments": {
                "self": [],
                "classes": [
                    "str",
                    "Type[BaseException]",
                    "typing.Type"
                ]
            }
        },
        "InfosCmd.run": {
            "name": "run",
            "location": 234,
            "return": [
                "",
                "typing.Generator[typing.Text]",
                "typing.Generator[typing.Generator[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShowCmd.__init__": {
            "name": "__init__",
            "location": 347,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShowCmd.initialize": {
            "name": "initialize",
            "location": 370,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "int",
                    "None",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ShowCmd._yield_file_configs": {
            "name": "_yield_file_configs",
            "location": 376,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[str,typing.Any]]]",
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[str, str]",
                    "dict[, ]",
                    "Dict[str, str]",
                    "tbump.config.Config",
                    "int",
                    "dict",
                    "str"
                ],
                "classes": [
                    "str",
                    "None",
                    "bool",
                    "MutableMapping[str, str]",
                    "typing.MutableMapping",
                    "Optional[str]",
                    "list[dict[, ]]",
                    "List[Dict]",
                    "typing.Type",
                    "type",
                    "int"
                ]
            }
        },
        "ShowCmd.instanciate_class": {
            "name": "instanciate_class",
            "location": 387,
            "return": [
                "C",
                "int",
                "str",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "bool",
                    "config.Config",
                    "dict",
                    "pymap.config.IMAPConfig"
                ],
                "clsname": [
                    "str",
                    "typing.Callable[, ]",
                    "trinity.config.ChainConfig",
                    "Callable",
                    "flask.config.Config",
                    "config.RunningConfig"
                ],
                "config": [
                    "MutableMapping[str, Any]",
                    "Dict[str, Any]",
                    "sphinx.config.Config",
                    "dict",
                    "Dict[str, str]",
                    "pyramid.config.Configurator",
                    "revlibs.connections.config.Config"
                ]
            }
        },
        "ShowCmd._yield_configs_and_defaults": {
            "name": "_yield_configs_and_defaults",
            "location": 404,
            "return": [
                "",
                "typing.Generator[]",
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "search_terms": [
                    "str",
                    "bool",
                    "typing.Mapping",
                    "Mapping[str, Any]",
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "config.Config",
                    "Dict[str, Any]"
                ],
                "merged": [
                    "bool",
                    "dict[, ]",
                    "dict",
                    "int"
                ]
            }
        },
        "ShowCmd.run": {
            "name": "run",
            "location": 464,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DescCmd.__init__": {
            "name": "__init__",
            "location": 554,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DescCmd.run": {
            "name": "run",
            "location": 575,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "prepare_help_selector.selector": {
            "name": "selector",
            "location": 89,
            "return": [],
            "arguments": {
                "ne": [],
                "cls": []
            }
        },
        "InfosCmd.run.format_tuple": {
            "name": "format_tuple",
            "location": 245,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "os.PathLike"
                ],
                "files": [
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/polyvers/cmdlet/cmdlets.py": {
        "class2cmd_name": {
            "name": "class2cmd_name",
            "location": 74,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "dict",
                    "bytearray"
                ]
            }
        },
        "first_line": {
            "name": "first_line",
            "location": 87,
            "return": [
                "List[str]",
                "bool",
                "Set[str]",
                "str",
                "List[Mapping[str, Any]]"
            ],
            "arguments": {
                "doc": [
                    "str",
                    "Tuple[Tuple[int, ...]]",
                    "bytes"
                ]
            }
        },
        "_set_also_read_only_trait_values": {
            "name": "_set_also_read_only_trait_values",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "class_help_description_lines": {
            "name": "class_help_description_lines",
            "location": 105,
            "return": [
                "Dict[str, Optional[BaseException]]",
                "str"
            ],
            "arguments": {
                "app_class": [
                    "type",
                    "Exception",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "cmd_class_short_help": {
            "name": "cmd_class_short_help",
            "location": 119,
            "return": [
                "Mapping[str, Any]",
                "List[Dict[str, Any]]",
                "Iterator[Dict[str, str]]",
                "Dict[str, Any]",
                "type",
                "Tuple[str, str, str]"
            ],
            "arguments": {
                "app_class": [
                    "str",
                    "bool",
                    "Type[BaseException]"
                ]
            }
        },
        "build_sub_cmds": {
            "name": "build_sub_cmds",
            "location": 123,
            "return": [
                "dict",
                "cmk.utils.type_defs.EventRule",
                "Callable"
            ],
            "arguments": {}
        },
        "cmd_line_chain": {
            "name": "cmd_line_chain",
            "location": 129,
            "return": [
                "List[str]",
                "str",
                "Iterable[str]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "cmd": [
                    "Dict[str, List[Any]]",
                    "bool"
                ]
            }
        },
        "chain_cmds": {
            "name": "chain_cmds",
            "location": 134,
            "return": [
                "Optional[datetime.datetime]",
                "cmk.utils.type_defs.HostName",
                "str"
            ],
            "arguments": {
                "app_classes": [
                    "List[List[str]]",
                    "str",
                    "Optional[str]",
                    "Optional[List[cmk.utils.type_defs.HostName]]"
                ],
                "argv": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "_travel_parents": {
            "name": "_travel_parents",
            "location": 534,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_travel_parents_untill_active_cmd": {
            "name": "_travel_parents_untill_active_cmd",
            "location": 549,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "scream": [
                    "str"
                ]
            }
        },
        "_dumpable_trait_value": {
            "name": "_dumpable_trait_value",
            "location": 1127,
            "return": [
                "bool",
                "int",
                "raiden.utils.BlockHash",
                "str",
                "Iterable['cirq.Qid']"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[Dict]",
                    "List[cmk.utils.type_defs.HostName]"
                ],
                "trait": [
                    "sphinx.config.Config"
                ],
                "config": [
                    "dict",
                    "pyramid.config.Configurator"
                ]
            }
        },
        "_make_comment": {
            "name": "_make_comment",
            "location": 1139,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "class_config_yaml": {
            "name": "class_config_yaml",
            "location": 1145,
            "return": [
                "Set[str]",
                "Optional[bool]",
                "Dict[str, Any]",
                "Mapping",
                "dict",
                "str",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "str",
                    "Callable",
                    "_vendor.traitlets.config.Config"
                ],
                "outer_cfg": [
                    "Optional[str]",
                    "Set[str]"
                ],
                "classes": [
                    "dict",
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "Callable"
                ],
                "config": [
                    "_vendor.traitlets.config.Config",
                    "Optional[Dict[str, Any]]",
                    "cmk.base.config.HostConfig",
                    "MutableMapping"
                ]
            }
        },
        "order_class_hierarchy": {
            "name": "order_class_hierarchy",
            "location": 1231,
            "return": [
                "int",
                "str",
                "ue.loader.AssetLoader",
                "Callable[..., T]"
            ],
            "arguments": {
                "classes": [
                    "bool",
                    "Literal"
                ],
                "mro_func": [
                    "bool",
                    "Literal"
                ]
            }
        },
        "generate_class_hierarchy_text": {
            "name": "generate_class_hierarchy_text",
            "location": 1263,
            "return": [
                "str"
            ],
            "arguments": {
                "classes": [
                    "Type[Any]",
                    "bool"
                ]
            }
        },
        "generate_config_file_yaml": {
            "name": "generate_config_file_yaml",
            "location": 1279,
            "return": [
                "str",
                "List[str]",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "classes": [
                    "dict",
                    "str",
                    "cmk.utils.type_defs.Item"
                ],
                "config": [
                    "_vendor.traitlets.config.Config",
                    "str",
                    "logging.Logger",
                    "config.Config",
                    "zaimcsvconverter.config.SFCardViewerConfig",
                    "Dict[str, Any]"
                ]
            }
        },
        "CfgFilesRegistry.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "supported_cfg_extensions": [
                    "List[int]",
                    "List[Dict]",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "CfgFilesRegistry.config_tuples": {
            "name": "config_tuples",
            "location": 197,
            "return": [
                "Callable",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CfgFilesRegistry._consolidate": {
            "name": "_consolidate",
            "location": 206,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "visited_tuples": [
                    "str",
                    "bool"
                ]
            }
        },
        "CfgFilesRegistry.visit_file": {
            "name": "visit_file",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fpath": [
                    "str",
                    "set",
                    "int",
                    "Callable",
                    "Iterator[str]",
                    "Optional[\"Node\"]",
                    "Union[str, ruamel.yaml.comments.CommentedMap, ruamel.yaml.comments.CommentedSeq]"
                ],
                "loaded": [
                    "bool",
                    "float",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "CfgFilesRegistry.collect_fpaths": {
            "name": "collect_fpaths",
            "location": 257,
            "return": [
                "str",
                "List[List[str]]",
                "Tuple[float]",
                "List[str]",
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "path_list": [
                    "str",
                    "bool",
                    "int",
                    "List[str]",
                    "Iterable[Any]"
                ]
            }
        },
        "CfgFilesRegistry.head_folder": {
            "name": "head_folder",
            "location": 310,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathList.__init__": {
            "name": "__init__",
            "location": 320,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PathList.validate": {
            "name": "validate",
            "location": 325,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "Type",
                    "T",
                    "Optional[str]",
                    "bool",
                    "dict",
                    "str"
                ],
                "value": [
                    "str",
                    "bool",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "PathList.from_string": {
            "name": "from_string",
            "location": 333,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "Replaceable.new": {
            "name": "new",
            "location": 353,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "datetime.datetime",
                    "type"
                ]
            }
        },
        "Replaceable.replace": {
            "name": "replace",
            "location": 359,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Replaceable._load_config": {
            "name": "_load_config",
            "location": 367,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "Callable",
                    "Optional[cmk.utils.type_defs.SectionName]",
                    "cmk.utils.type_defs.CheckPluginName.Str",
                    "dict"
                ],
                "section_names": [
                    "str",
                    "Optional[str]",
                    "Union[None, List[str]]"
                ],
                "traits": [
                    "str",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "Printable.__str__": {
            "name": "__str__",
            "location": 422,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Forceable.is_forced": {
            "name": "is_forced",
            "location": 439,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "Union[str, bool]",
                    "Collection[int]",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "Forceable.errlogged": {
            "name": "errlogged",
            "location": 472,
            "return": [
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CmdletsInterpolation.__init__": {
            "name": "__init__",
            "location": 521,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_travel_parents_untill_active_cmd.test_app": {
            "name": "test_app",
            "location": 558,
            "return": [],
            "arguments": {
                "app": [
                    "app.utils.models.ModelManager"
                ]
            }
        },
        "Spec.class_get_trait_help": {
            "name": "class_get_trait_help",
            "location": 580,
            "return": [
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type",
                    "type",
                    "float",
                    "int"
                ],
                "trait": [
                    "int",
                    "Optional[Dict]",
                    "Dict[str, Any]"
                ],
                "inst": [
                    "int",
                    "Optional[Dict]",
                    "Dict[str, Any]"
                ],
                "helptext": [
                    "int",
                    "Optional[Dict]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Spec._log_default": {
            "name": "_log_default",
            "location": 586,
            "return": [
                "Optional[str]",
                "str",
                "Tuple[str, str]",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spec.ikeys": {
            "name": "ikeys",
            "location": 609,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spec.interp": {
            "name": "interp",
            "location": 623,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "cmk.utils.type_defs.SectionName"
                ]
            }
        },
        "Cmd.make_cmd": {
            "name": "make_cmd",
            "location": 644,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "app": [],
                "argv": [
                    "str"
                ]
            }
        },
        "Cmd._name": {
            "name": "_name",
            "location": 665,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cmd._desc": {
            "name": "_desc",
            "location": 671,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cmd._log_default": {
            "name": "_log_default",
            "location": 676,
            "return": [
                "Optional[str]",
                "str",
                "Tuple[str, str]",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cmd.emit_description": {
            "name": "emit_description",
            "location": 685,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Cmd.emit_options_help": {
            "name": "emit_options_help",
            "location": 703,
            "return": [
                "str",
                "DefaultDict",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cmd.emit_subcommands_help": {
            "name": "emit_subcommands_help",
            "location": 727,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cmd.emit_examples": {
            "name": "emit_examples",
            "location": 746,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Cmd.emit_help_epilogue": {
            "name": "emit_help_epilogue",
            "location": 757,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "classes": [
                    "bool",
                    "Callable[..., T]",
                    "list"
                ]
            }
        },
        "Cmd._inherit_parent_cmd": {
            "name": "_inherit_parent_cmd",
            "location": 780,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "change": [
                    "str"
                ]
            }
        },
        "Cmd.loaded_config_files": {
            "name": "loaded_config_files",
            "location": 829,
            "return": [
                "str",
                "deeplearning.clgen.clgen.Instance"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cmd._config_basename": {
            "name": "_config_basename",
            "location": 840,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cmd._collect_static_fpaths": {
            "name": "_collect_static_fpaths",
            "location": 843,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "config_paths": [
                    "Optional[str]"
                ]
            }
        },
        "Cmd._read_supported_configs": {
            "name": "_read_supported_configs",
            "location": 853,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "revlibs.connections.config.Config",
                "qutebrowser.config.config.Config"
            ],
            "arguments": {
                "self": [],
                "cfpath": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Cmd.read_config_files": {
            "name": "read_config_files",
            "location": 886,
            "return": [
                "List[str]",
                "config.Project",
                "List[cmk.utils.type_defs.HostName]",
                "str"
            ],
            "arguments": {
                "self": [],
                "config_paths": [
                    "str"
                ]
            }
        },
        "Cmd.write_default_config": {
            "name": "write_default_config",
            "location": 926,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_file": [
                    "str",
                    "Optional[str]"
                ],
                "force": [
                    "bool",
                    "List[int]",
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "List[str]",
                    "io.TextIOBase"
                ]
            }
        },
        "Cmd.initialize_subcommand": {
            "name": "initialize_subcommand",
            "location": 977,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "subc": [
                    "str",
                    "Optional[int]"
                ],
                "argv": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Cmd.clear_instance": {
            "name": "clear_instance",
            "location": 1002,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "Cmd.instance": {
            "name": "instance",
            "location": 1008,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "Optional[Callable]",
                    "dict",
                    "KT",
                    "str",
                    "type"
                ]
            }
        },
        "Cmd.my_cmd_chain": {
            "name": "my_cmd_chain",
            "location": 1028,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cmd._is_dispatching": {
            "name": "_is_dispatching",
            "location": 1038,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cmd.update_interp_context": {
            "name": "update_interp_context",
            "location": 1042,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "Cmd.initialize": {
            "name": "initialize",
            "location": 1048,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Cmd.start": {
            "name": "start",
            "location": 1076,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cmd.run": {
            "name": "run",
            "location": 1089,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "order_class_hierarchy.visit_class": {
            "name": "visit_class",
            "location": 1235,
            "return": [
                ""
            ],
            "arguments": {
                "cls": []
            }
        },
        "generate_class_hierarchy_text.class_line": {
            "name": "class_line",
            "location": 1264,
            "return": [
                "str",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "CfgFilesRegistry.collect_fpaths.try_file_extensions": {
            "name": "try_file_extensions",
            "location": 271,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "basepath": [
                    "str",
                    "bool",
                    "List[Dict]"
                ]
            }
        },
        "CfgFilesRegistry.collect_fpaths._derive_config_fpaths": {
            "name": "_derive_config_fpaths",
            "location": 296,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[Dict]",
                    "list"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/polyvers/cmdlet/errlog.py": {
        "nesterrlog": {
            "name": "nesterrlog",
            "location": 44,
            "return": [
                "int",
                "str",
                "Callable",
                "dict[str, typing.Union[typing.Any,typing.Any,typing.Any,typing.Any]]",
                "ErrLog"
            ],
            "arguments": {
                "parent": [
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "str",
                    "Union[bool, str]",
                    "float",
                    "None",
                    "Optional[float]",
                    "Optional[Union[int, str]]",
                    "T"
                ]
            }
        },
        "_idstr": {
            "name": "_idstr",
            "location": 83,
            "return": [
                "typing.Text",
                "str",
                "int"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Optional[BaseException]",
                    "BaseException",
                    "float",
                    "bool",
                    "None",
                    "Match[str]",
                    "typing.Match"
                ]
            }
        },
        "_exstr": {
            "name": "_exstr",
            "location": 89,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "err": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Any]",
                    "typing.Any",
                    "dict",
                    "dict[, ]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "errlogged": {
            "name": "errlogged",
            "location": 592,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "_ErrNode.new_cnode": {
            "name": "new_cnode",
            "location": 127,
            "return": [
                "_ErrNode",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "doing": [
                    "str",
                    "list",
                    "list[]"
                ],
                "is_forced": [
                    "str",
                    "list",
                    "list[]"
                ],
                "token": [
                    "str",
                    "list",
                    "list[]"
                ]
            }
        },
        "_ErrNode.node_coordinates": {
            "name": "node_coordinates",
            "location": 137,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "_ErrNode._cnode_coords_recurse": {
            "name": "_cnode_coords_recurse",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "list[int]",
                    "List[int]",
                    "T"
                ],
                "coords": [
                    "List[int]",
                    "list[int]",
                    "int",
                    "list",
                    "list[]"
                ]
            }
        },
        "_ErrNode.count_error_tree": {
            "name": "count_error_tree",
            "location": 158,
            "return": [
                "Tuple[bytes]",
                "tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ErrNode._node_repr": {
            "name": "_node_repr",
            "location": 176,
            "return": [
                "typing.Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "print_cnodes": [
                    "List[str]",
                    "list[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_ErrNode.__str__": {
            "name": "__str__",
            "location": 198,
            "return": [
                "int",
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ErrNode.__repr__": {
            "name": "__repr__",
            "location": 201,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ErrNode.tree_text": {
            "name": "tree_text",
            "location": 204,
            "return": [
                "None",
                "int",
                "str",
                "bool",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrLog.plog": {
            "name": "plog",
            "location": 346,
            "return": [
                "int",
                "str",
                "bool",
                "bytes",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrLog.logw": {
            "name": "logw",
            "location": 350,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrLog.pdebug": {
            "name": "pdebug",
            "location": 355,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrLog.is_forced": {
            "name": "is_forced",
            "location": 360,
            "return": [
                "Callable[..., None]",
                "Optional[str]",
                "float",
                "Optional[T]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrLog.is_root": {
            "name": "is_root",
            "location": 366,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrLog.is_armed": {
            "name": "is_armed",
            "location": 370,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrLog.is_good": {
            "name": "is_good",
            "location": 375,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrLog.coords": {
            "name": "coords",
            "location": 384,
            "return": [
                "str",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrLog.__init__": {
            "name": "__init__",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "List[str]",
                    "list[str]",
                    "str",
                    "Optional[str]",
                    "Optional[dict]",
                    "None",
                    "Optional[Union[int, str]]",
                    "dict[, ]",
                    "Optional[float]",
                    "int",
                    "float",
                    "Dict[str, Dict[str, Any]]",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "ErrLog.__repr__": {
            "name": "__repr__",
            "location": 408,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrLog._scream_on_faulted_reuse": {
            "name": "_scream_on_faulted_reuse",
            "location": 417,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrLog.__call__": {
            "name": "__call__",
            "location": 422,
            "return": [
                "Callable",
                "str",
                "int",
                "bool",
                "float",
                "dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrLog.__enter__": {
            "name": "__enter__",
            "location": 471,
            "return": [
                "Iterable[str]",
                "int",
                "typing.Final",
                "Callable",
                "str",
                "list[dict[str, typing.Any]]",
                "list[tuple[typing.Union[str,str,str]]]",
                "list[str]",
                "dict[str, typing.Any]",
                "dict[typing.Type, typing.Union[typing.Any,typing.Any]]",
                "typing.Type",
                "dict[str, dict[str, typing.Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrLog._report_ok_completion": {
            "name": "_report_ok_completion",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrLog.__exit__": {
            "name": "__exit__",
            "location": 510,
            "return": [
                "bool",
                "int",
                "None",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "exctype": [
                    "Sequence[float]",
                    "typing.Sequence[float]",
                    "float",
                    "Optional[Iterable['cirq.Qid']]",
                    "typing.Iterable['cirq.Qid']",
                    "int",
                    "str",
                    "None",
                    "Optional[float]"
                ],
                "ex": [
                    "Optional[str]",
                    "str",
                    "Optional[Any]",
                    "None",
                    "typing.Any"
                ],
                "_exctb": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ErrLog._collect_error": {
            "name": "_collect_error",
            "location": 543,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "ex": [
                    "str",
                    "Sequence[float]",
                    "typing.Sequence[float]"
                ]
            }
        },
        "ErrLog.report_root": {
            "name": "report_root",
            "location": 550,
            "return": [
                "None",
                "Dict[str, Any]",
                "dict",
                "str",
                "logging.LogRecord"
            ],
            "arguments": {
                "self": [],
                "ex_raised": [
                    "bool",
                    "typing.Callable[, ]",
                    "str",
                    "Callable",
                    "list[dict[, ]]",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "errlogged.decorate": {
            "name": "decorate",
            "location": 599,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "errlogged.decorate.inner": {
            "name": "inner",
            "location": 601,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "forceable": [
                    "str",
                    "Callable",
                    "tuple",
                    "logging.LogRecord",
                    "bool"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/polyvers/cmdlet/interpctxt.py": {
        "dictize_object": {
            "name": "dictize_object",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "ChainMap",
                "str",
                "_EscapedObjectDict",
                "_HasTraitObjectDict",
                "typing.OrderedDict",
                "list[dict[str, typing.Any]]"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Union['AbstractSetIntStr', 'MappingIntStrAny']",
                    "str",
                    "typing.OrderedDict",
                    "list[dict[str, typing.Any]]",
                    "OrderedDict",
                    "List[Dict[str, Any]]"
                ],
                "_escaped_for": [
                    "str",
                    "None",
                    "int",
                    "bool",
                    "Iterable['cirq.Qid']",
                    "typing.Iterable[_]"
                ]
            }
        },
        "Now.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "is_utc": [
                    "bool",
                    "Optional[Any]",
                    "List[str]",
                    "Callable[[str], bool]",
                    "int",
                    "Union[float, Tuple[float, float]]"
                ]
            }
        },
        "Now.__format__": {
            "name": "__format__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "format_spec": [
                    "str",
                    "bool"
                ]
            }
        },
        "_KeysDumper.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mydict": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "_KeysDumper.__format__": {
            "name": "__format__",
            "location": 38,
            "return": [
                "str",
                "bool",
                "Optional[dict]",
                "Tuple[int]",
                "Iterable",
                "List[Tuple[str, Any]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "format_spec": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "list",
                    "list[]"
                ]
            }
        },
        "_MissingKeys.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "None",
                    "str",
                    "int",
                    "datetime.timedelta",
                    "T"
                ]
            }
        },
        "_MissingKeys.__missing__": {
            "name": "__missing__",
            "location": 48,
            "return": [
                "typing.Text",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "KT",
                    "T"
                ]
            }
        },
        "_HasTraitObjectDict.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_obj": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "_HasTraitObjectDict.__len__": {
            "name": "__len__",
            "location": 62,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_HasTraitObjectDict.__getitem__": {
            "name": "__getitem__",
            "location": 65,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "list[str]",
                    "List[str]",
                    "typing.Type",
                    "type",
                    "KT"
                ]
            }
        },
        "_HasTraitObjectDict.__iter__": {
            "name": "__iter__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_EscapedObjectDict.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_obj": [
                    "int",
                    "_vendor.traitlets.traitlets.HasTraits",
                    "bool"
                ],
                "escape_func": [
                    "int",
                    "float",
                    "Optional[List[str]]",
                    "list[str]",
                    "List[List[int]]",
                    "None",
                    "list[list[int]]"
                ]
            }
        },
        "_EscapedObjectDict.__getitem__": {
            "name": "__getitem__",
            "location": 86,
            "return": [
                "str",
                "typing.Pattern",
                "tuple[typing.Union[typing.Any,typing.Any]]",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "typing.Type",
                    "type",
                    "bytes",
                    "list[str]",
                    "List[str]",
                    "abc.graph.EdgeKeyType"
                ]
            }
        },
        "InterpolationContext.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterpolationContext.update_env": {
            "name": "update_env",
            "location": 160,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterpolationContext.ikeys": {
            "name": "ikeys",
            "location": 165,
            "return": [
                "typing.ContextManager['InterpolationContext']",
                "typing.Generator[InterpolationContext]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterpolationContext.interp": {
            "name": "interp",
            "location": 197,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/polyvers/cmdlet/slicetrait.py": {
        "_parse_slice": {
            "name": "_parse_slice",
            "location": 16,
            "return": [
                "bool",
                "range",
                "str",
                "None"
            ],
            "arguments": {
                "v": [
                    "None",
                    "int",
                    "dict[, ]",
                    "Optional[int]",
                    "dict"
                ]
            }
        },
        "Slice.cast": {
            "name": "cast",
            "location": 56,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/polyvers/cmdlet/traitquery.py": {
        "_find_1st_mro_with_classprop": {
            "name": "_find_1st_mro_with_classprop",
            "location": 19,
            "return": [
                "str",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "has_traits": [
                    "float",
                    "str",
                    "bool",
                    "IO[Any]",
                    "typing.IO"
                ],
                "classprop_selector": [
                    "dict",
                    "dict[, ]",
                    "Union[Dict, str]",
                    "str"
                ]
            }
        },
        "_select_traits_from_classprop": {
            "name": "_select_traits_from_classprop",
            "location": 33,
            "return": [
                "dict[typing.Text, ]",
                "Set[str]",
                "Tuple[str]",
                "Dict[str, Any]",
                "int",
                "Sequence[float]"
            ],
            "arguments": {
                "has_traits": [
                    "int",
                    "bool",
                    "Callable[..., None]"
                ],
                "classprop_selector": [
                    "str",
                    "typing.Callable[str, None]",
                    "Callable[[str], None]",
                    "list[str]",
                    "List[str]",
                    "T"
                ],
                "tnames": [
                    "str",
                    "Collection[int]",
                    "int",
                    "Sequence[Sequence[T]]"
                ]
            }
        },
        "_traits_till_mro": {
            "name": "_traits_till_mro",
            "location": 77,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "traits": [
                    "dict[, ]",
                    "str",
                    "List[\"libkol.Item\"]",
                    "dict",
                    "List['cirq.Qid']"
                ],
                "mixin": [
                    "str",
                    "List[\"libkol.Item\"]",
                    "list[\"libkol.Item\"]",
                    "dict",
                    "dict[, ]",
                    "List['cirq.Qid']",
                    "list['cirq.Qid']"
                ]
            }
        },
        "_select_traits": {
            "name": "_select_traits",
            "location": 84,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "has_traits": [
                    "Optional[bool]",
                    "Type",
                    "str",
                    "Optional[str]"
                ],
                "mixin": [
                    "str",
                    "None",
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Callable[..., Awaitable]",
                    "typing.Callable[..., collections.abc.Awaitable[]]"
                ],
                "classprop_selector": [
                    "Optional[List[str]]",
                    "None",
                    "Optional[Dict]",
                    "list[str]",
                    "dict[, ]"
                ],
                "append_tags": [
                    "None",
                    "Optional[List[Any]]",
                    "str",
                    "list[typing.Any]",
                    "bool",
                    "float",
                    "Optional[str]",
                    "slice"
                ]
            }
        },
        "select_traits": {
            "name": "select_traits",
            "location": 139,
            "return": [
                "dict[tuple[typing.Union[typing.Any,typing.Any]], typing.Any]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "has_traits": [
                    "bool",
                    "list",
                    "list[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "tuple",
                    "tuple[]"
                ],
                "mixin": [
                    "bool",
                    "None",
                    "list",
                    "Dict[str, Any]",
                    "list[]",
                    "tuple",
                    "dict[str, typing.Any]",
                    "tuple[]"
                ],
                "classprop_selector": [
                    "bool",
                    "None",
                    "list",
                    "Dict[str, Any]",
                    "list[]",
                    "tuple",
                    "dict[str, typing.Any]",
                    "tuple[]"
                ],
                "append_tags": [
                    "bool",
                    "None",
                    "list",
                    "Dict[str, Any]",
                    "list[]",
                    "tuple",
                    "dict[str, typing.Any]",
                    "tuple[]"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/polyvers/cmdlet/yamlconfloader.py": {
        "YAMLFileConfigLoader.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YAMLFileConfigLoader.load_config": {
            "name": "load_config",
            "location": 31,
            "return": [
                "Optional[dict]",
                "dict[, ]",
                "bool",
                "dict[typing.Any, int]",
                "str",
                "dict[str, typing.Any]",
                "Optional[str]",
                "dict[str, str]",
                "Dict[str, Any]",
                "dict[str, dict[typing.Any, typing.Any]]",
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "YAMLFileConfigLoader._read_file_as_dict": {
            "name": "_read_file_as_dict",
            "location": 42,
            "return": [
                "Callable[[Any], bool]",
                "str",
                "bool",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "YAMLFileConfigLoader._convert_to_config": {
            "name": "_convert_to_config",
            "location": 46,
            "return": [
                "Dict[str, Any]",
                "lightbus.config.Config",
                "opentrons.config.robot_configs.robot_config",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "dictionary": [
                    "Optional[int]",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "YAMLFileConfigLoader.__enter__": {
            "name": "__enter__",
            "location": 58,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "revlibs.connections.config.Config",
                "qutebrowser.config.config.Config"
            ],
            "arguments": {
                "self": []
            }
        },
        "YAMLFileConfigLoader.__exit__": {
            "name": "__exit__",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "type",
                    "BaseException",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_value": [
                    "typing.Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "type",
                    "BaseException",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "traceback": [
                    "typing.Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "type",
                    "BaseException",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/polyvers/cmdlet/__init__.py": {},
    "polyvers-master/pvcmd/polyvers/utils/fileutil.py": {
        "normpath": {
            "name": "normpath",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "abspath": {
            "name": "abspath",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "pathlib.Path"
                ]
            }
        },
        "convpath": {
            "name": "convpath",
            "location": 42,
            "return": [
                "str",
                "int",
                "list[]",
                "Callable"
            ],
            "arguments": {
                "fpath": [
                    "str",
                    "bool",
                    "List[int]",
                    "Optional[str]"
                ],
                "abs_path": [
                    "bool",
                    "str"
                ],
                "exp_user": [
                    "bool",
                    "int",
                    "List[Dict[str, Any]]",
                    "str"
                ],
                "exp_vars": [
                    "bool",
                    "int",
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "ensure_file_ext": {
            "name": "ensure_file_ext",
            "location": 55,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "fname": [
                    "bool",
                    "int",
                    "dict"
                ],
                "ext": [
                    "bool",
                    "int",
                    "dict"
                ]
            }
        },
        "ensure_dir_exists": {
            "name": "ensure_dir_exists",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "int"
                ],
                "mode": [
                    "int",
                    "str"
                ]
            }
        },
        "find_git_root": {
            "name": "find_git_root",
            "location": 144,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "Iterable[str]",
                "Mapping"
            ],
            "arguments": {
                "path": [
                    "str",
                    "None",
                    "List[str]",
                    "pathlib.Path",
                    "list[str]"
                ]
            }
        },
        "_is_base_or_same": {
            "name": "_is_base_or_same",
            "location": 168,
            "return": [
                "None",
                "bool",
                "Optional[List[str]]",
                "Optional[str]",
                "Optional[List[Any]]",
                "Optional[Union[str, Any]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "basepath": [
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "longpath": [
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "strict": [
                    "bool",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "_is_same_file": {
            "name": "_is_same_file",
            "location": 196,
            "return": [
                "None",
                "str",
                "List[Dict[str, Any]]",
                "Optional[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "fp1": [
                    "pathlib.Path",
                    "str"
                ],
                "fp2": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "chdir": {
            "name": "chdir",
            "location": 210,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/polyvers/utils/logconfutils.py": {
        "patch_new_level_in_logging": {
            "name": "patch_new_level_in_logging",
            "location": 23,
            "return": [
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "DefaultDict",
                "Iterable[Hashable]",
                "str"
            ],
            "arguments": {
                "level": [
                    "str",
                    "int",
                    "List[str]",
                    "float"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "color_spec": [
                    "str",
                    "int",
                    "List[str]",
                    "float"
                ]
            }
        },
        "_classify_fpaths": {
            "name": "_classify_fpaths",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fpaths": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_load_logconfs": {
            "name": "_load_logconfs",
            "location": 69,
            "return": [
                "str",
                "src.config.user_config.UserConfig"
            ],
            "arguments": {
                "yaml_fpaths": [
                    "str",
                    "bool"
                ],
                "conf_fpaths": [
                    "str"
                ]
            }
        },
        "_setup_color_logs": {
            "name": "_setup_color_logs",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "frmt": [
                    "float",
                    "logging.Logger",
                    "str"
                ]
            }
        },
        "_count_multiflag_in_argv": {
            "name": "_count_multiflag_in_argv",
            "location": 122,
            "return": [
                "tuple"
            ],
            "arguments": {
                "args": [],
                "short": [
                    "str",
                    "tuple"
                ],
                "long": [
                    "Dict[str, str]",
                    "int",
                    "Iterable[Iterable[T]]",
                    "List[str]",
                    "str"
                ],
                "eliminate": [
                    "int"
                ]
            }
        },
        "log_level_from_argv": {
            "name": "log_level_from_argv",
            "location": 155,
            "return": [
                "bool",
                "Callable[..., None]",
                "str",
                "int",
                "Optional[BaseException]",
                "Tuple[str, str]",
                "Type"
            ],
            "arguments": {
                "args": [],
                "start_level": [
                    "int",
                    "float"
                ],
                "eliminate_verbose": [
                    "Optional[List[str]]",
                    "Optional[dict]",
                    "str",
                    "int",
                    "dict",
                    "Callable"
                ],
                "eliminate_quiet": [
                    "bool",
                    "Dict[str, Any]",
                    "float",
                    "str",
                    "Callable",
                    "Hashable",
                    "Optional[int]"
                ],
                "verbosity_step": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Union[str, float]",
                    "bytes"
                ]
            }
        },
        "init_logging": {
            "name": "init_logging",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "level": [
                    "logging.Logger",
                    "Optional[logging.Formatter]",
                    "logging.Formatter",
                    "str"
                ],
                "logconf": [
                    "Union[str, List[Any]]",
                    "Union[bool, List[bool]]",
                    "str",
                    "list"
                ],
                "color": [
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "int"
                ],
                "logger": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "exit_with_pride": {
            "name": "exit_with_pride",
            "location": 257,
            "return": [
                "Union[str, List[str]]",
                "str",
                "bool"
            ],
            "arguments": {
                "reason": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "bool"
                ],
                "warn_color": [
                    "int",
                    "Callable",
                    "str"
                ],
                "err_color": [
                    "int",
                    "Callable",
                    "str"
                ],
                "logger": [
                    "str",
                    "logging.Logger",
                    "int"
                ]
            }
        },
        "patch_new_level_in_logging.new_log_method": {
            "name": "new_log_method",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/polyvers/utils/mainpump.py": {
        "pump_cmd": {
            "name": "pump_cmd",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "cmd_res": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "Optional[int]",
                    "int",
                    "Sequence[str]",
                    "None",
                    "typing.Sequence[str]"
                ],
                "consumer": [
                    "bool",
                    "None",
                    "str",
                    "float",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "collect_cmd": {
            "name": "collect_cmd",
            "location": 84,
            "return": [
                "float",
                "int",
                "bool",
                "mypy.types.Type"
            ],
            "arguments": {
                "cmd_res": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "dict[str, typing.Any]",
                    "list",
                    "list[]"
                ],
                "dont_coalesce": [
                    "bool",
                    "str"
                ],
                "assert_ok": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "ConsumerBase.__call__": {
            "name": "__call__",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "typing.Sequence[str]",
                    "mypy.types.CallableType",
                    "T",
                    "Sequence[str]"
                ]
            }
        },
        "ConsumerBase.__bool__": {
            "name": "__bool__",
            "location": 24,
            "return": [
                "bool",
                "Optional[str]",
                "Callable",
                "Optional[DefaultDict[str, Any]]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrintConsumer._emit": {
            "name": "_emit",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "list[T]",
                    "int",
                    "List[T]",
                    "dict[, ]",
                    "Iterable[T]",
                    "dict"
                ]
            }
        },
        "ListConsumer.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListConsumer._emit": {
            "name": "_emit",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "str",
                    "list[typing.Deque]",
                    "T",
                    "List[deque]",
                    "typing.Callable[, ]",
                    "Callable"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/polyvers/utils/oscmd.py": {
        "err_includes_stderr": {
            "name": "err_includes_stderr",
            "location": 26,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "format_syscmd": {
            "name": "format_syscmd",
            "location": 47,
            "return": [
                "str",
                "int",
                "List[List[str]]",
                "tuple"
            ],
            "arguments": {
                "cmd": [
                    "bool",
                    "List[Tuple[float, str]]",
                    "Union[str, List]",
                    "List[Tuple[bool, str]]"
                ]
            }
        },
        "exec_cmd": {
            "name": "exec_cmd",
            "location": 66,
            "return": [
                "Dict[str, Any]",
                "str",
                "Union[tuple, list]"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "Optional[str]"
                ],
                "dry_run": [
                    "logging.Logger",
                    "starfish.core.util.logging.Log"
                ],
                "check_stdout": [
                    "bool"
                ],
                "check_stderr": [
                    "TextIO",
                    "List[str]",
                    "str",
                    "logging.Logger",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, str]"
                ],
                "check_returncode": [
                    "bool",
                    "logging.Logger",
                    "Callable",
                    "int"
                ],
                "encoding": [
                    "TextIO",
                    "List[str]",
                    "str",
                    "logging.Logger",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, str]"
                ],
                "encoding_errors": [
                    "TextIO",
                    "List[str]",
                    "str",
                    "logging.Logger",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, str]"
                ]
            }
        },
        "_as_flag": {
            "name": "_as_flag",
            "location": 144,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "k": [
                    "int",
                    "List[Tuple[int, float]]",
                    "float",
                    "str"
                ]
            }
        },
        "_CmdName.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "_CmdName.__repr__": {
            "name": "__repr__",
            "location": 62,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Cli.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "popen_kw": [
                    "int",
                    "bool",
                    "float"
                ],
                "cmd": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_Cli._extend_cmdlist": {
            "name": "_extend_cmdlist",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "args": [],
                "kw": [
                    "Optional[Union[str, Any]]",
                    "list"
                ]
            }
        },
        "_Cli.__getattr__": {
            "name": "__getattr__",
            "location": 182,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "_Cli.__call__": {
            "name": "__call__",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Cli._": {
            "name": "_",
            "location": 200,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Cli.__str__": {
            "name": "__str__",
            "location": 205,
            "return": [
                "str",
                "bool",
                "bytearray"
            ],
            "arguments": {
                "self": []
            }
        },
        "PopenCmd.__init__": {
            "name": "__init__",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dry_run": [
                    "bool"
                ],
                "check_stdout": [
                    "bool"
                ],
                "check_stderr": [
                    "bool"
                ],
                "check_returncode": [
                    "bool"
                ]
            }
        },
        "PopenCmd.__getattr__": {
            "name": "__getattr__",
            "location": 255,
            "return": [
                "str",
                "Iterable[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "list"
                ]
            }
        },
        "_Cli._extend_cmdlist.kv2args": {
            "name": "kv2args",
            "location": 154,
            "return": [
                "str",
                "bool",
                "list",
                "Optional[List[str]]"
            ],
            "arguments": {
                "k": [
                    "Union[int, str]",
                    "Iterable[str]",
                    "Iterable[T_co]",
                    "Set[str]",
                    "float"
                ],
                "v": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[T]"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/polyvers/utils/yamlutil.py": {
        "_make_trait_help": {
            "name": "_make_trait_help",
            "location": 27,
            "return": [
                "str",
                "float",
                "Union[str, bytes]"
            ],
            "arguments": {
                "has_traits": [
                    "str",
                    "Union[str, bytes]",
                    "bytes"
                ],
                "trait": [
                    "int"
                ]
            }
        },
        "preserve_yaml_literals": {
            "name": "preserve_yaml_literals",
            "location": 61,
            "return": [
                "Tuple[float, float]",
                "str",
                "list[str]",
                "list[]",
                "bytes"
            ],
            "arguments": {
                "v": [
                    "str",
                    "list[str]",
                    "list[]",
                    "bytes",
                    "int",
                    "pathlib.Path",
                    "List[str]",
                    "Optional[int]",
                    "list"
                ]
            }
        },
        "get_yamel": {
            "name": "get_yamel",
            "location": 96,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "typ": [
                    "typing.Text",
                    "str",
                    "int"
                ]
            }
        },
        "ydumps": {
            "name": "ydumps",
            "location": 116,
            "return": [
                "None",
                "Union[tuple, list]",
                "typing.Text",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "obj": [
                    "bool",
                    "str"
                ],
                "sink": [
                    "str",
                    "bool",
                    "int",
                    "List[Dict]"
                ],
                "trait_help": [
                    "bool",
                    "str",
                    "None"
                ],
                "classes": [
                    "tuple[]",
                    "bool",
                    "str"
                ]
            }
        },
        "yloads": {
            "name": "yloads",
            "location": 151,
            "return": [
                "None",
                "int",
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "YAMLable._YAML_represent_instance": {
            "name": "_YAML_represent_instance",
            "location": 74,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "dumper": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "has_traits": [
                    "int"
                ]
            }
        },
        "get_yamel._represent_to_str": {
            "name": "_represent_to_str",
            "location": 100,
            "return": [
                "bool",
                "Iterable[str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "_dumper": [
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "Tuple[str]",
                    "list"
                ],
                "path": [
                    "str",
                    "pathlib.Path",
                    "pathlib.PurePath",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "ydumps.dump_with_contextvars": {
            "name": "dump_with_contextvars",
            "location": 134,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "polyvers-master/pvcmd/polyvers/utils/__init__.py": {},
    "polyvers-master/pvcmd/polyvers/_vendor/__init__.py": {},
    "polyvers-master/pvcmd/polyvers/_vendor/traitlets/log.py": {
        "get_logger": {
            "name": "get_logger",
            "location": 10,
            "return": [
                "None",
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {}
        }
    },
    "polyvers-master/pvcmd/polyvers/_vendor/traitlets/traitlets.py": {
        "isidentifier": {
            "name": "isidentifier",
            "location": 130,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[Any]",
                "Type"
            ],
            "arguments": {
                "s": [
                    "str",
                    "types.ModuleType",
                    "Union[bytes, str]",
                    "float"
                ]
            }
        },
        "_should_warn": {
            "name": "_should_warn",
            "location": 137,
            "return": [
                "bool"
            ],
            "arguments": {
                "key": [
                    "int",
                    "KT",
                    "Optional[apps.monero.xmr.types.Sc25519]",
                    "Mapping",
                    "str"
                ]
            }
        },
        "_deprecated_method": {
            "name": "_deprecated_method",
            "location": 152,
            "return": [
                "str",
                "Optional[bool]",
                "List[mypy.types.Type.VarDef]"
            ],
            "arguments": {
                "method": [
                    "str"
                ],
                "cls": [
                    "str"
                ],
                "method_name": [
                    "str",
                    "int",
                    "dict",
                    "Optional[str]"
                ],
                "msg": [
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "is_trait": {
            "name": "is_trait",
            "location": 181,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "t": [
                    "mypy.types.Type",
                    "Type"
                ]
            }
        },
        "parse_notifier_name": {
            "name": "parse_notifier_name",
            "location": 188,
            "return": [
                "str"
            ],
            "arguments": {
                "names": [
                    "str",
                    "type",
                    "dict",
                    "bool"
                ]
            }
        },
        "getmembers": {
            "name": "getmembers",
            "location": 224,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "object": [
                    "dict",
                    "str"
                ],
                "predicate": [
                    "dict",
                    "str",
                    "List[str]"
                ]
            }
        },
        "_validate_link": {
            "name": "_validate_link",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_callback_wrapper": {
            "name": "_callback_wrapper",
            "location": 782,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cb": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "observe": {
            "name": "observe",
            "location": 846,
            "return": [
                "mypy.types.Type",
                "Optional[mypy.types.Type]"
            ],
            "arguments": {}
        },
        "observe_compat": {
            "name": "observe_compat",
            "location": 876,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "validate": {
            "name": "validate",
            "location": 907,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "default": {
            "name": "default",
            "location": 939,
            "return": [
                "Optional[Dict[str, Any]]",
                "bool",
                "str",
                "Optional[mypy.types.Type]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Union[List[str], str]",
                    "Optional[str]"
                ]
            }
        },
        "_add_all": {
            "name": "_add_all",
            "location": 3443,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_SimpleTest.__init__": {
            "name": "__init__",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Iterable[T]",
                    "int",
                    "bytes",
                    "T",
                    "bool",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "_SimpleTest.__call__": {
            "name": "__call__",
            "location": 216,
            "return": [
                "str",
                "bool",
                "Type",
                "int"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "List[str]",
                    "Iterable[Any]",
                    "bool",
                    "Optional[Type]",
                    "List[int]"
                ]
            }
        },
        "_SimpleTest.__repr__": {
            "name": "__repr__",
            "location": 218,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SimpleTest.__str__": {
            "name": "__str__",
            "location": 220,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "link.__init__": {
            "name": "__init__",
            "location": 272,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "raiden.tests.fuzz.utils.SendUnlockInNode",
                    "raiden.tests.fuzz.utils.SendSecretRequestInNode",
                    "str",
                    "raiden.tests.fuzz.utils.SendLockedTransferInNode"
                ],
                "target": [
                    "raiden.tests.fuzz.utils.SendUnlockInNode",
                    "raiden.tests.fuzz.utils.SendSecretRequestInNode",
                    "str",
                    "raiden.tests.fuzz.utils.SendLockedTransferInNode"
                ],
                "transform": [
                    "str",
                    "int",
                    "list",
                    "Iterable['cirq.Qid']",
                    "List['cirq.Qid']",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "link.link": {
            "name": "link",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "link._busy_updating": {
            "name": "_busy_updating",
            "location": 290,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "link._update_target": {
            "name": "_update_target",
            "location": 297,
            "return": [
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {
                "self": [],
                "change": [
                    "List[str]",
                    "bool"
                ]
            }
        },
        "link._update_source": {
            "name": "_update_source",
            "location": 307,
            "return": [
                "Union[tuple, list]",
                "float"
            ],
            "arguments": {
                "self": [],
                "change": [
                    "List[Callable]",
                    "Optional[Iterable[Any]]",
                    "dict"
                ]
            }
        },
        "link.unlink": {
            "name": "unlink",
            "location": 318,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "directional_link.__init__": {
            "name": "__init__",
            "location": 342,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "raiden.tests.fuzz.utils.SendUnlockInNode",
                    "raiden.tests.fuzz.utils.SendSecretRequestInNode",
                    "str",
                    "raiden.tests.fuzz.utils.SendLockedTransferInNode"
                ],
                "target": [
                    "raiden.tests.fuzz.utils.SendUnlockInNode",
                    "raiden.tests.fuzz.utils.SendSecretRequestInNode",
                    "str",
                    "raiden.tests.fuzz.utils.SendLockedTransferInNode"
                ],
                "transform": [
                    "int",
                    "List[list]",
                    "str"
                ]
            }
        },
        "directional_link.link": {
            "name": "link",
            "location": 348,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "directional_link._busy_updating": {
            "name": "_busy_updating",
            "location": 356,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "directional_link._update": {
            "name": "_update",
            "location": 363,
            "return": [
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {
                "self": [],
                "change": [
                    "bool",
                    "List[str]",
                    "type"
                ]
            }
        },
        "directional_link.unlink": {
            "name": "unlink",
            "location": 370,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDescriptor.absolute_name": {
            "name": "absolute_name",
            "location": 406,
            "return": [
                "str",
                "Dict[str, str]",
                "\"RequirementsFile\"",
                "Pattern",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDescriptor.class_init": {
            "name": "class_init",
            "location": 409,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "Union[int, str]",
                    "Iterable[str]",
                    "list",
                    "mypy.types.CallableType",
                    "bool",
                    "Dict[str, Any]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "parent": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "BaseDescriptor.subclass_init": {
            "name": "subclass_init",
            "location": 433,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "bool",
                    "Callable[[Any], T]",
                    "Optional[str]",
                    "str",
                    "int"
                ]
            }
        },
        "BaseDescriptor.instance_init": {
            "name": "instance_init",
            "location": 436,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "BaseDescriptor._lineage": {
            "name": "_lineage",
            "location": 454,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDescriptor.__str__": {
            "name": "__str__",
            "location": 461,
            "return": [
                "OrderedDict",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraitType.__init__": {
            "name": "__init__",
            "location": 483,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "default_value": [
                    "Optional[types.ContextValue]",
                    "bool",
                    "Union[int, Tuple[int, ...]]",
                    "str",
                    "Optional[bytes]"
                ],
                "allow_none": [
                    "str",
                    "Optional[Mapping]",
                    "raiden.utils.Callable",
                    "Exception",
                    "Optional[int]",
                    "Type[T]",
                    "bool"
                ],
                "read_only": [
                    "Optional[Set[int]]",
                    "Optional[Union[str, Any]]"
                ],
                "help": [
                    "bool"
                ],
                "config": [
                    "Optional[str]",
                    "bool",
                    "Callable",
                    "Optional[bool]",
                    "Optional[List[str]]",
                    "Optional[List[Any]]",
                    "Optional[Union[str, Any]]"
                ]
            }
        },
        "TraitType.default": {
            "name": "default",
            "location": 532,
            "return": [
                "bool",
                "float",
                "int",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool",
                    "Any",
                    "Optional[str]"
                ]
            }
        },
        "TraitType.get_default_value": {
            "name": "get_default_value",
            "location": 548,
            "return": [
                "bool",
                "Tuple[float, float, float, float]",
                "int",
                "str",
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraitType.init_default_value": {
            "name": "init_default_value",
            "location": 557,
            "return": [
                "str",
                "Type[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int"
                ]
            }
        },
        "TraitType.get": {
            "name": "get",
            "location": 566,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[Tuple[str]]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Dict[str, int]"
                ],
                "cls": [
                    "type",
                    "Type",
                    "Callable",
                    "Optional[type]",
                    "raiden.utils.Any",
                    "Callable[[], None]"
                ]
            }
        },
        "TraitType.__get__": {
            "name": "__get__",
            "location": 593,
            "return": [
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[str]",
                    "Dict[str, float]",
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "cls": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "TraitType.set": {
            "name": "set",
            "location": 606,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "Dict[str, Any]",
                    "Dict[str, object]",
                    "Iterable[dict]"
                ],
                "value": [
                    "str",
                    "int",
                    "float",
                    "bool",
                    "dict"
                ]
            }
        },
        "TraitType.__set__": {
            "name": "__set__",
            "location": 624,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool"
                ],
                "value": [
                    "bool"
                ]
            }
        },
        "TraitType._validate": {
            "name": "_validate",
            "location": 635,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Optional[str]",
                    "float",
                    "bool"
                ],
                "value": [
                    "Optional[object]",
                    "float",
                    "T",
                    "Optional[Any]",
                    "bool",
                    "Optional[int]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TraitType._cross_validate": {
            "name": "_cross_validate",
            "location": 644,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int"
                ],
                "value": [
                    "int",
                    "list",
                    "Iterable[int]",
                    "types.streams.T",
                    "T"
                ]
            }
        },
        "TraitType.__or__": {
            "name": "__or__",
            "location": 656,
            "return": [
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "AbstractSet[T]",
                    "Set[VT]"
                ]
            }
        },
        "TraitType.info": {
            "name": "info",
            "location": 662,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraitType.error": {
            "name": "error",
            "location": 665,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "types.CodecArg",
                    "types.SchemaT",
                    "bool",
                    "dict",
                    "str"
                ],
                "value": [
                    "str",
                    "int",
                    "bool",
                    "dict",
                    "Optional[str]"
                ],
                "error": [
                    "str",
                    "Type",
                    "Optional[Tuple[int, int]]"
                ],
                "info": [
                    "str",
                    "Exception"
                ]
            }
        },
        "TraitType.get_metadata": {
            "name": "get_metadata",
            "location": 701,
            "return": [
                "Optional[bool]",
                "Optional[Dict[str, Any]]",
                "Optional[str]",
                "str",
                "Iterable[Sequence[str]]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "default": [
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "TraitType.set_metadata": {
            "name": "set_metadata",
            "location": 713,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "TraitType.tag": {
            "name": "tag",
            "location": 725,
            "return": [
                "str",
                "bool",
                "Iterable[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraitType.default_value_repr": {
            "name": "default_value_repr",
            "location": 740,
            "return": [
                "int",
                "types.Resolver",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CallbackWrapper.__init__": {
            "name": "__init__",
            "location": 754,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cb": [
                    "str",
                    "Type",
                    "MutableSequence[utils.CWLObjectType]",
                    "tuple"
                ]
            }
        },
        "_CallbackWrapper.__eq__": {
            "name": "__eq__",
            "location": 762,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsInt",
                    "float",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "_CallbackWrapper.__call__": {
            "name": "__call__",
            "location": 769,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "change": [
                    "mypy.types.Type",
                    "mypy.types.Instance",
                    "ics.types.ContainerItem",
                    "Callable"
                ]
            }
        },
        "MetaHasDescriptors.__new__": {
            "name": "__new__",
            "location": 796,
            "return": [
                "bool",
                "str",
                "float",
                "bytes",
                "Optional[int]"
            ],
            "arguments": {
                "mcls": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "bases": [
                    "str"
                ],
                "classdict": [
                    "str",
                    "utils.mssql_counters.Section",
                    "Dict[str, Any]",
                    "dict",
                    "wemake_python_styleguide.types.ConfigurationOptions",
                    "Match",
                    "utils.MinMaxStats"
                ]
            }
        },
        "MetaHasDescriptors.__init__": {
            "name": "__init__",
            "location": 811,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Tuple[type]"
                ],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "bases": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "classdict": [
                    "str",
                    "bool",
                    "Tuple[type]"
                ]
            }
        },
        "MetaHasDescriptors.setup_class": {
            "name": "setup_class",
            "location": 816,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "mypy.types.Type.dDictType",
                    "Dict[str, str]",
                    "Iterator"
                ],
                "classdict": [
                    "Dict[str, str]",
                    "dict",
                    "int"
                ]
            }
        },
        "MetaHasTraits.setup_class": {
            "name": "setup_class",
            "location": 839,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Optional[Callable[[], mypy.types.Instance]]"
                ],
                "classdict": [
                    "bool",
                    "str"
                ]
            }
        },
        "observe_compat.compatible_observer": {
            "name": "compatible_observer",
            "location": 889,
            "return": [
                "mypy.types.Type",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "types.Resolver",
                "str"
            ],
            "arguments": {
                "self": [],
                "change_or_name": [
                    "str",
                    "bool",
                    "Callable",
                    "dict",
                    "Optional[str]",
                    "bytes"
                ],
                "old": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[\"AbstractPurpose\"]"
                ],
                "new": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[\"AbstractPurpose\"]"
                ]
            }
        },
        "EventHandler._init_call": {
            "name": "_init_call",
            "location": 984,
            "return": [
                "str",
                "Optional[List[str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "Callable[[Dict], None]",
                    "Callable[[T], bool]"
                ]
            }
        },
        "EventHandler.__call__": {
            "name": "__call__",
            "location": 988,
            "return": [
                "Type",
                "Mapping[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventHandler.__get__": {
            "name": "__get__",
            "location": 995,
            "return": [
                "Optional[mypy.types.Type]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "inst": [
                    "Optional[mypy.types.Type]",
                    "Type[object]",
                    "str",
                    "Type"
                ],
                "cls": [
                    "type",
                    "Type",
                    "Callable",
                    "Optional[type]",
                    "raiden.utils.Any",
                    "Callable[[], None]"
                ]
            }
        },
        "ObserveHandler.__init__": {
            "name": "__init__",
            "location": 1003,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "names": [
                    "str",
                    "List[str]"
                ],
                "type": [
                    "str",
                    "bool",
                    "List[mypy.types.Instance]",
                    "int",
                    "Type",
                    "type"
                ]
            }
        },
        "ObserveHandler.instance_init": {
            "name": "instance_init",
            "location": 1007,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "inst": [
                    "dict",
                    "pybuses.types.Listener"
                ]
            }
        },
        "ValidateHandler.__init__": {
            "name": "__init__",
            "location": 1013,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "names": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "ValidateHandler.instance_init": {
            "name": "instance_init",
            "location": 1016,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "inst": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "DefaultHandler.__init__": {
            "name": "__init__",
            "location": 1022,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "DefaultHandler.class_init": {
            "name": "class_init",
            "location": 1025,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str"
                ],
                "name": [
                    "List[mypy.types.Instance]",
                    "str"
                ],
                "parent": [
                    "List[mypy.types.Instance]",
                    "str"
                ]
            }
        },
        "HasDescriptors.__new__": {
            "name": "__new__",
            "location": 1034,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "HasDescriptors.setup_instance": {
            "name": "setup_instance",
            "location": 1049,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "HasTraits.setup_instance": {
            "name": "setup_instance",
            "location": 1076,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "HasTraits.__init__": {
            "name": "__init__",
            "location": 1089,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HasTraits.__getstate__": {
            "name": "__getstate__",
            "location": 1122,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasTraits.__setstate__": {
            "name": "__setstate__",
            "location": 1134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "HasTraits.cross_validation_lock": {
            "name": "cross_validation_lock",
            "location": 1156,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasTraits.hold_trait_notifications": {
            "name": "hold_trait_notifications",
            "location": 1175,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasTraits._notify_trait": {
            "name": "_notify_trait",
            "location": 1242,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Sequence[Any]",
                    "Dict[str, str]"
                ],
                "old_value": [
                    "str",
                    "Optional[str]",
                    "Sequence[Any]",
                    "Dict[str, str]"
                ],
                "new_value": [
                    "str",
                    "Optional[str]",
                    "Sequence[Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "HasTraits.notify_change": {
            "name": "notify_change",
            "location": 1251,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "change": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "HasTraits._notify_observers": {
            "name": "_notify_observers",
            "location": 1255,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Optional[Dict]"
                ]
            }
        },
        "HasTraits._add_notifiers": {
            "name": "_add_notifiers",
            "location": 1292,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "List[str]",
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "bool",
                    "cmk.utils.type_defs.ServiceName"
                ],
                "name": [
                    "str",
                    "types.ModuleType",
                    "Optional[str]"
                ],
                "type": [
                    "str",
                    "Optional[\"TypeResourceIdentifier\"]",
                    "Optional[str]"
                ]
            }
        },
        "HasTraits._remove_notifiers": {
            "name": "_remove_notifiers",
            "location": 1305,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "mypy.types.Type",
                    "Optional[str]",
                    "str"
                ],
                "name": [
                    "str"
                ],
                "type": [
                    "str"
                ]
            }
        },
        "HasTraits.on_trait_change": {
            "name": "on_trait_change",
            "location": 1314,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "Optional[str]",
                    "str",
                    "Optional['Directory']",
                    "Optional[List[str]]"
                ],
                "remove": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Iterable[float]",
                    "Any",
                    "Optional[Callable]",
                    "int"
                ]
            }
        },
        "HasTraits.observe": {
            "name": "observe",
            "location": 1351,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "str"
                ],
                "names": [
                    "str"
                ],
                "type": [
                    "str"
                ]
            }
        },
        "HasTraits.unobserve": {
            "name": "unobserve",
            "location": 1381,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "str"
                ],
                "names": [
                    "str"
                ],
                "type": [
                    "str"
                ]
            }
        },
        "HasTraits.unobserve_all": {
            "name": "unobserve_all",
            "location": 1402,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "mypy.types.Type"
                ]
            }
        },
        "HasTraits._register_validator": {
            "name": "_register_validator",
            "location": 1413,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "str",
                    "dict"
                ],
                "names": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Iterable[float]",
                    "Any",
                    "Optional[Callable]",
                    "int"
                ]
            }
        },
        "HasTraits.add_traits": {
            "name": "add_traits",
            "location": 1443,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HasTraits.set_trait": {
            "name": "set_trait",
            "location": 1450,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "Optional[IO[bytes]]"
                ]
            }
        },
        "HasTraits.class_trait_names": {
            "name": "class_trait_names",
            "location": 1460,
            "return": [
                "Sequence[mypy.types.Type]",
                "mypy.types.Instance"
            ],
            "arguments": {
                "cls": [
                    "mypy.types.UnionType",
                    "mypy.types.TypedDictType",
                    "mypy.types.TupleType",
                    "bool"
                ]
            }
        },
        "HasTraits.class_traits": {
            "name": "class_traits",
            "location": 1469,
            "return": [
                "list",
                "Tuple[str, List[str]]"
            ],
            "arguments": {
                "cls": [
                    "Optional[List[Any]]",
                    "Optional[Any]",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "dict",
                    "int"
                ]
            }
        },
        "HasTraits.class_own_traits": {
            "name": "class_own_traits",
            "location": 1504,
            "return": [
                "List[\"Taxon\"]",
                "Tuple[str]",
                "List[str]",
                "Union[str, List[str], None]",
                "Iterable",
                "Optional[dict]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "HasTraits.has_trait": {
            "name": "has_trait",
            "location": 1513,
            "return": [
                "bool",
                "type",
                "mypy.types.CallableType"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Callable[[Any], str]",
                    "mypy.types.Type"
                ]
            }
        },
        "HasTraits.trait_has_value": {
            "name": "trait_has_value",
            "location": 1517,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "type",
                    "Tuple[str, int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "HasTraits.trait_values": {
            "name": "trait_values",
            "location": 1538,
            "return": [
                "List[str]",
                "Set[str]",
                "cmk.gui.plugins.metrics.utils.TranslatedMetrics",
                "FrozenSet[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasTraits._get_trait_default_generator": {
            "name": "_get_trait_default_generator",
            "location": 1560,
            "return": [
                "str",
                "Iterable[cmk.utils.type_defs.SectionName]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "HasTraits.trait_defaults": {
            "name": "trait_defaults",
            "location": 1585,
            "return": [
                "Optional[int]",
                "Iterable[T]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasTraits.trait_names": {
            "name": "trait_names",
            "location": 1608,
            "return": [
                "str",
                "List[Dict]",
                "Optional[Type]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasTraits.traits": {
            "name": "traits",
            "location": 1612,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasTraits.trait_metadata": {
            "name": "trait_metadata",
            "location": 1644,
            "return": [
                "str",
                "Callable",
                "Optional[str]",
                "Union[str, Sequence[str]]"
            ],
            "arguments": {
                "self": [],
                "traitname": [
                    "str",
                    "Optional[str]"
                ],
                "key": [
                    "str",
                    "Iterable",
                    "Optional[Iterable]",
                    "dict",
                    "MutableMapping[str, Any]",
                    "telethon.tl.types.Channel"
                ],
                "default": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "HasTraits.class_own_trait_events": {
            "name": "class_own_trait_events",
            "location": 1658,
            "return": [
                "bool",
                "object"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "str",
                    "Iterable[str]"
                ],
                "name": [
                    "Type[enum.Enum]",
                    "Type[Any]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "HasTraits.trait_events": {
            "name": "trait_events",
            "location": 1668,
            "return": [
                "dict",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ClassBasedTraitType._resolve_string": {
            "name": "_resolve_string",
            "location": 1708,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "Type.__init__": {
            "name": "__init__",
            "location": 1718,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "default_value": [
                    "int",
                    "Optional[float]",
                    "Optional[int]",
                    "bool"
                ],
                "klass": [
                    "Optional[float]",
                    "Optional[int]",
                    "int",
                    "Union[str, dict]"
                ]
            }
        },
        "Type.validate": {
            "name": "validate",
            "location": 1760,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "dict"
                ],
                "value": [
                    "enum.Enum",
                    "str",
                    "Type[T]",
                    "T",
                    "Mapping[str, str]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "Type.info": {
            "name": "info",
            "location": 1776,
            "return": [
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Type.instance_init": {
            "name": "instance_init",
            "location": 1787,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Type[Any]",
                    "int"
                ]
            }
        },
        "Type._resolve_classes": {
            "name": "_resolve_classes",
            "location": 1791,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Type.default_value_repr": {
            "name": "default_value_repr",
            "location": 1797,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.__init__": {
            "name": "__init__",
            "location": 1817,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.validate": {
            "name": "validate",
            "location": 1885,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bytes",
                    "int",
                    "float"
                ],
                "value": [
                    "bool",
                    "int",
                    "Iterable[object]"
                ]
            }
        },
        "Instance.cast": {
            "name": "cast",
            "location": 1897,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "Instance.castable": {
            "name": "castable",
            "location": 1904,
            "return": [
                "mypy.types.Type",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "dict",
                    "int",
                    "Tuple[str, List[Any]]",
                    "bool"
                ]
            }
        },
        "Instance.cast_error": {
            "name": "cast_error",
            "location": 1908,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str",
                    "bool"
                ],
                "error": [
                    "Optional[list]",
                    "str",
                    "Union[str, Exception]",
                    "Optional[Exception]"
                ]
            }
        },
        "Instance.info": {
            "name": "info",
            "location": 1917,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance._cast_info": {
            "name": "_cast_info",
            "location": 1931,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.instance_init": {
            "name": "instance_init",
            "location": 1944,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool",
                    "int",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "Instance._resolve_classes": {
            "name": "_resolve_classes",
            "location": 1948,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.make_dynamic_default": {
            "name": "make_dynamic_default",
            "location": 1956,
            "return": [
                "float",
                "utils.Node",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.default_value_repr": {
            "name": "default_value_repr",
            "location": 1964,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForwardDeclaredMixin._resolve_string": {
            "name": "_resolve_string",
            "location": 1976,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str",
                    "Union[str, 'Path']"
                ]
            }
        },
        "This.__init__": {
            "name": "__init__",
            "location": 2009,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "This.validate": {
            "name": "validate",
            "location": 2012,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bytes",
                    "int",
                    "float"
                ],
                "value": [
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Union.__init__": {
            "name": "__init__",
            "location": 2025,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "trait_types": [
                    "List[str]",
                    "Optional[List[str]]",
                    "str",
                    "bool"
                ]
            }
        },
        "Union.default": {
            "name": "default",
            "location": 2046,
            "return": [
                "list",
                "bool",
                "int",
                "types.Resolver"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "Union.class_init": {
            "name": "class_init",
            "location": 2055,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "type"
                ],
                "name": [
                    "str"
                ],
                "parent": [
                    "str"
                ]
            }
        },
        "Union.instance_init": {
            "name": "instance_init",
            "location": 2060,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int"
                ]
            }
        },
        "Union.validate": {
            "name": "validate",
            "location": 2065,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Optional[str]",
                    "int",
                    "AbstractSet[str]",
                    "Callable",
                    "Dict[str, Any]"
                ],
                "value": [
                    "Dict[type, Callable]",
                    "Optional[Exception]",
                    "Optional[float]",
                    "str",
                    "Exception"
                ]
            }
        },
        "Union.__or__": {
            "name": "__or__",
            "location": 2078,
            "return": [
                "mypy.types.Type",
                "Type",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict[str, Any]",
                    "Callable",
                    "mypy.types.Type.dDictType"
                ]
            }
        },
        "Bounded.__init__": {
            "name": "__init__",
            "location": 2100,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "default_value": [
                    "Optional[float]",
                    "bool",
                    "int",
                    "Optional[int]"
                ],
                "allow_none": [
                    "Optional[float]",
                    "bool",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Bounded.validate": {
            "name": "validate",
            "location": 2107,
            "return": [
                "int",
                "bool",
                "str",
                "Type",
                "tuple",
                "raiden.utils.BlockHash",
                "float",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Optional[str]",
                    "Union[bool, str]",
                    "Union[Type, Tuple[Type, ...]]"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "Union[bool, str]",
                    "Union[Type, Tuple[Type, ...]]"
                ]
            }
        },
        "Bounded._validate_bounds": {
            "name": "_validate_bounds",
            "location": 2111,
            "return": [
                "str",
                "int",
                "list",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Callable",
                    "bool",
                    "bytes",
                    "int"
                ],
                "value": [
                    "Optional[str]",
                    "Exception",
                    "float",
                    "str",
                    "bytes"
                ]
            }
        },
        "Unicode.cast": {
            "name": "cast",
            "location": 2236,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "str",
                    "raiden.utils.Nonce",
                    "ics.types.ContextDict",
                    "ics.types.ExtraParams"
                ]
            }
        },
        "ObjectName.validate": {
            "name": "validate",
            "location": 2263,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "nutrition.recipe.types.Ingredient",
                    "T",
                    "bool"
                ],
                "value": [
                    "str",
                    "int",
                    "Union[str, int, float]"
                ]
            }
        },
        "DottedObjectName.validate": {
            "name": "validate",
            "location": 2272,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "nutrition.recipe.types.Ingredient",
                    "T",
                    "bool"
                ],
                "value": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Callable",
                    "Union[bytes, str, None]",
                    "T",
                    "bytes"
                ]
            }
        },
        "Enum.__init__": {
            "name": "__init__",
            "location": 2293,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "values": [
                    "dict",
                    "enum.Enum",
                    "float",
                    "int",
                    "str",
                    "List[str]"
                ],
                "default_value": [
                    "bool",
                    "Union['AbstractSetIntStr', 'MappingIntStrAny']",
                    "Optional[Union[str, bool]]",
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "Enum.validate": {
            "name": "validate",
            "location": 2299,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bytes",
                    "int",
                    "float"
                ],
                "value": [
                    "type",
                    "str",
                    "bool"
                ]
            }
        },
        "Enum._choices_str": {
            "name": "_choices_str",
            "location": 2304,
            "return": [
                "float",
                "Tuple[int, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "as_rst": [
                    "bool",
                    "int"
                ]
            }
        },
        "Enum._info": {
            "name": "_info",
            "location": 2313,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]",
                "dict",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "as_rst": [
                    "str",
                    "int"
                ]
            }
        },
        "Enum.info": {
            "name": "info",
            "location": 2320,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enum.info_rst": {
            "name": "info_rst",
            "location": 2323,
            "return": [
                "int",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaselessStrEnum.__init__": {
            "name": "__init__",
            "location": 2330,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "values": [
                    "str",
                    "dict",
                    "types.Comparison",
                    "Optional[int]"
                ],
                "default_value": [
                    "int",
                    "float"
                ]
            }
        },
        "CaselessStrEnum.validate": {
            "name": "validate",
            "location": 2334,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "nutrition.recipe.types.Ingredient",
                    "bool",
                    "bytes"
                ],
                "value": [
                    "Union[None, str, bytes]",
                    "str",
                    "Union[str, int, float]",
                    "T",
                    "bool"
                ]
            }
        },
        "CaselessStrEnum._info": {
            "name": "_info",
            "location": 2345,
            "return": [
                "cmk.utils.type_defs.EventRule",
                "List[str]",
                "apistar.types.WSGIEnviron"
            ],
            "arguments": {
                "self": [],
                "as_rst": [
                    "str",
                    "int"
                ]
            }
        },
        "CaselessStrEnum.info": {
            "name": "info",
            "location": 2352,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaselessStrEnum.info_rst": {
            "name": "info_rst",
            "location": 2355,
            "return": [
                "int",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FuzzyEnum.__init__": {
            "name": "__init__",
            "location": 2366,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "values": [
                    "bool",
                    "dict",
                    "int"
                ],
                "default_value": [
                    "Optional[Tuple[int, ...]]",
                    "Optional[List[Any]]",
                    "Optional[Sequence[Any]]"
                ],
                "case_sensitive": [
                    "bool",
                    "float",
                    "Optional[float]"
                ],
                "substring_matching": [
                    "bool",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "FuzzyEnum.validate": {
            "name": "validate",
            "location": 2373,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "nutrition.recipe.types.Ingredient",
                    "bool",
                    "bytes"
                ],
                "value": [
                    "str",
                    "T",
                    "Union[None, str, bytes]",
                    "bool"
                ]
            }
        },
        "FuzzyEnum._info": {
            "name": "_info",
            "location": 2394,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "as_rst": [
                    "bool",
                    "str",
                    "Union[int, str]",
                    "raiden.utils.Dict"
                ]
            }
        },
        "FuzzyEnum.info": {
            "name": "info",
            "location": 2405,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FuzzyEnum.info_rst": {
            "name": "info_rst",
            "location": 2408,
            "return": [
                "int",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Notifier.__init__": {
            "name": "__init__",
            "location": 2416,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cb": [
                    "int",
                    "str",
                    "bool",
                    "Optional[List[str]]"
                ],
                "v": [
                    "int",
                    "str",
                    "T",
                    "bool"
                ]
            }
        },
        "_Notifier.__call__": {
            "name": "__call__",
            "location": 2421,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "etype": [
                    "List[List[T]]",
                    "list",
                    "dict",
                    "List[dict]",
                    "Mapping[starfish.types.Axes, Union[int, slice]]"
                ]
            }
        },
        "_Notifier.send": {
            "name": "send",
            "location": 2432,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "validate": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_Callback.__init__": {
            "name": "__init__",
            "location": 2471,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str",
                    "types.V",
                    "types.core.OpenHeadersArg",
                    "dict",
                    "Tuple[Tuple[str, ...]]",
                    "Dict[str, Any]",
                    "list"
                ],
                "trait": [
                    "str",
                    "Callable[[Any, Any], Any]",
                    "float",
                    "Union[str, int]",
                    "bool",
                    "int",
                    "tuple"
                ],
                "function": [
                    "str",
                    "Callable[[Any, Any], Any]",
                    "float",
                    "Union[str, int]",
                    "bool",
                    "int",
                    "tuple"
                ]
            }
        },
        "_Callback.__eq__": {
            "name": "__eq__",
            "location": 2487,
            "return": [
                "bytes",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "_Callback.__repr__": {
            "name": "__repr__",
            "location": 2499,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Callback.owner": {
            "name": "owner",
            "location": 2503,
            "return": [
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Beforeback.__call__": {
            "name": "__call__",
            "location": 2513,
            "return": [
                "bool",
                "Dict[str, Any]",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[Any]",
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "type"
                ],
                "call": [
                    "bytes",
                    "T",
                    "str"
                ]
            }
        },
        "_Afterback.__call__": {
            "name": "__call__",
            "location": 2548,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional['ModelOrDc']",
                    "Dict[str, Any]",
                    "dict",
                    "Callable",
                    "types.ExistentialTyVar"
                ],
                "answer": [
                    "Type",
                    "Callable",
                    "type",
                    "str",
                    "Type[T]"
                ]
            }
        },
        "Mutable.__init__": {
            "name": "__init__",
            "location": 2638,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Mutable.default": {
            "name": "default",
            "location": 2642,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool",
                    "Any",
                    "Optional[str]"
                ]
            }
        },
        "Mutable.register_events": {
            "name": "register_events",
            "location": 2650,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "bytes",
                    "str",
                    "int",
                    "Dict[str, Dict[str, str]]",
                    "raiden.utils.TokenNetworkID"
                ],
                "value": [
                    "Union[int, float, str]",
                    "bytes",
                    "str",
                    "Sequence[Any]",
                    "float",
                    "types.topics.ChannelT",
                    "int",
                    "bool"
                ]
            }
        },
        "Mutable.unregister_events": {
            "name": "unregister_events",
            "location": 2668,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ]
            }
        },
        "Mutable.iter_events": {
            "name": "iter_events",
            "location": 2682,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Mutable.set": {
            "name": "set",
            "location": 2697,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "List[int]",
                    "float",
                    "str",
                    "list"
                ],
                "val": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "Mutable.validate": {
            "name": "validate",
            "location": 2702,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str",
                    "IO",
                    "bool"
                ],
                "value": [
                    "Dict[str, Union[str, Any]]",
                    "Optional[List]",
                    "float",
                    "list"
                ]
            }
        },
        "Mutable._validate_mutation": {
            "name": "_validate_mutation",
            "location": 2726,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str",
                    "list",
                    "int",
                    "Dict[str, Any]",
                    "Pattern[str]",
                    "dict"
                ],
                "value": [
                    "str",
                    "list",
                    "int",
                    "Dict[str, Any]",
                    "Pattern[str]",
                    "dict"
                ]
            }
        },
        "Mutable._test_mutable_builtin": {
            "name": "_test_mutable_builtin",
            "location": 2731,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "list"
                ]
            }
        },
        "Container.validate": {
            "name": "validate",
            "location": 2741,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "dict",
                    "types.Comparison",
                    "T",
                    "Optional['ModelOrDc']"
                ],
                "value": [
                    "dict",
                    "types.Comparison",
                    "T",
                    "Optional['ModelOrDc']"
                ]
            }
        },
        "Container.validate_elements": {
            "name": "validate_elements",
            "location": 2746,
            "return": [
                "str",
                "int",
                "dict",
                "types.TracebackType",
                "Tuple[int]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "bool"
                ],
                "value": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Collection.__init__": {
            "name": "__init__",
            "location": 2755,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.class_init": {
            "name": "class_init",
            "location": 2776,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "List[str]",
                    "types.TracebackType"
                ],
                "name": [
                    "str",
                    "dict",
                    "Optional[cmk.utils.type_defs.SectionName]",
                    "Optional[BaseException]"
                ],
                "parent": [
                    "str",
                    "dict",
                    "Optional[cmk.utils.type_defs.SectionName]",
                    "Optional[BaseException]"
                ]
            }
        },
        "Collection.instance_init": {
            "name": "instance_init",
            "location": 2782,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str"
                ]
            }
        },
        "Collection.validate_elements": {
            "name": "validate_elements",
            "location": 2788,
            "return": [
                "bool",
                "Optional[int]",
                "tuple",
                "int",
                "float",
                "list",
                "Dict[Tuple[str, str], Tuple[float, float]]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "Set[str]",
                    "List[str]",
                    "Sequence[T]",
                    "List[int]"
                ],
                "value": [
                    "int",
                    "Set[str]",
                    "List[str]",
                    "List[int]",
                    "Dict[str, Dict[str, Any]]",
                    "Sequence[T]"
                ]
            }
        },
        "Sequence.__init__": {
            "name": "__init__",
            "location": 2812,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "trait": [
                    "int",
                    "float",
                    "str",
                    "Optional[Union[bool, Any]]",
                    "List[Union[\"PipeChain\", str]]"
                ],
                "default_value": [
                    "Dict[str, str]",
                    "float",
                    "Dict[str, bool]"
                ],
                "minlen": [
                    "int",
                    "bool"
                ],
                "maxlen": [
                    "int",
                    "bool"
                ]
            }
        },
        "Sequence.class_init": {
            "name": "class_init",
            "location": 2835,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "dict",
                    "bool"
                ],
                "name": [
                    "str",
                    "apistar.types.ParamName",
                    "Optional[str]",
                    "Callable"
                ],
                "parent": [
                    "str",
                    "apistar.types.ParamName",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "Sequence.instance_init": {
            "name": "instance_init",
            "location": 2840,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool",
                    "int",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "Sequence.validate": {
            "name": "validate",
            "location": 2845,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int"
                ],
                "value": [
                    "int",
                    "List[str]",
                    "Sequence[Any]",
                    "bool",
                    "str"
                ]
            }
        },
        "Sequence._validate_mutation": {
            "name": "_validate_mutation",
            "location": 2856,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str",
                    "bool",
                    "tests.utils.Strategy[paradigm.hints.Domain]",
                    "Dict[Any, list]",
                    "Set[str]"
                ],
                "value": [
                    "str",
                    "bool",
                    "tests.utils.Strategy[paradigm.hints.Domain]",
                    "Dict[Any, list]",
                    "Set[str]"
                ]
            }
        },
        "Sequence.validate_elements": {
            "name": "validate_elements",
            "location": 2859,
            "return": [
                "int",
                "str",
                "float",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "List[Dict[str, str]]"
                ],
                "value": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Set.validate_elements": {
            "name": "validate_elements",
            "location": 2895,
            "return": [
                "int",
                "str",
                "float",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "List[Dict[str, str]]"
                ],
                "value": [
                    "str",
                    "Optional[Any]",
                    "int",
                    "float"
                ]
            }
        },
        "Set._before_update": {
            "name": "_before_update",
            "location": 2908,
            "return": [
                "str",
                "int",
                "List[List[float]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Type[T]",
                    "bool",
                    "dict"
                ],
                "call": [
                    "str",
                    "dict",
                    "tuple",
                    "float",
                    "vimiv.utils.customtypes.FuncT"
                ],
                "notify": [
                    "str",
                    "dict",
                    "tuple",
                    "float",
                    "vimiv.utils.customtypes.FuncT"
                ]
            }
        },
        "Set._after_update": {
            "name": "_after_update",
            "location": 2911,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "Callable[..., Awaitable[None]]"
                ],
                "answer": [
                    "bool",
                    "Callable[..., Awaitable[None]]"
                ],
                "notify": [
                    "raiden.utils.Address",
                    "dict",
                    "str"
                ]
            }
        },
        "List.validate_elements": {
            "name": "validate_elements",
            "location": 2934,
            "return": [
                "int",
                "str",
                "float",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "List[Dict[str, str]]"
                ],
                "value": [
                    "list",
                    "bool",
                    "int"
                ]
            }
        },
        "List._before_setitem": {
            "name": "_before_setitem",
            "location": 2948,
            "return": [
                "str",
                "torch.nn.utils.rnn.PackedSequence",
                "Iterable[int]",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "value": [
                    "T",
                    "bytes",
                    "str",
                    "Exception",
                    "Dict[str, Any]"
                ],
                "call": [
                    "Callable",
                    "tuple",
                    "Callable[..., None]",
                    "Callable[..., Coroutine[Any, Any, Any]]",
                    "Dict[str, Any]"
                ],
                "notify": [
                    "str",
                    "bool",
                    "vimiv.utils.customtypes.FuncT"
                ]
            }
        },
        "List._after_setitem": {
            "name": "_after_setitem",
            "location": 2957,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "float"
                ],
                "answer": [
                    "str"
                ],
                "notify": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "List._before_delitem": {
            "name": "_before_delitem",
            "location": 2964,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "value": [
                    "T",
                    "bytes",
                    "str",
                    "Exception",
                    "Dict[str, Any]"
                ],
                "call": [
                    "Callable",
                    "tuple",
                    "Callable[..., None]",
                    "Callable[..., Coroutine[Any, Any, Any]]",
                    "Dict[str, Any]"
                ],
                "notify": [
                    "str",
                    "bool",
                    "vimiv.utils.customtypes.FuncT"
                ]
            }
        },
        "List._after_delitem": {
            "name": "_after_delitem",
            "location": 2969,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "int",
                    "Match",
                    "bool",
                    "Optional[dict]",
                    "Type[Set[Any]]"
                ],
                "answer": [
                    "str"
                ],
                "notify": [
                    "int",
                    "List[str]",
                    "tests.utils.Strategy[paradigm.hints.Domain]",
                    "Sequence"
                ]
            }
        },
        "List._before_insert": {
            "name": "_before_insert",
            "location": 2979,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "value": [
                    "T",
                    "bytes",
                    "str",
                    "Exception",
                    "Dict[str, Any]"
                ],
                "call": [
                    "Callable",
                    "tuple",
                    "Callable[..., None]",
                    "Callable[..., Coroutine[Any, Any, Any]]",
                    "Dict[str, Any]"
                ],
                "notify": [
                    "str",
                    "bool",
                    "vimiv.utils.customtypes.FuncT"
                ]
            }
        },
        "List._after_insert": {
            "name": "_after_insert",
            "location": 2984,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "Callable",
                    "Set[str]",
                    "List[int]",
                    "list",
                    "int",
                    "Set[int]",
                    "bytes",
                    "List[bytes]",
                    "str"
                ],
                "answer": [
                    "str"
                ],
                "notify": [
                    "int",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "List._after_append": {
            "name": "_after_append",
            "location": 2993,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "list",
                    "Callable",
                    "List[str]",
                    "utils.types.NDArray[float]",
                    "int",
                    "str"
                ],
                "answer": [
                    "str",
                    "List[str]",
                    "Callable",
                    "int",
                    "Type[T]",
                    "Optional[float]",
                    "T",
                    "bool"
                ],
                "notify": [
                    "list",
                    "Callable",
                    "List[str]",
                    "utils.types.NDArray[float]",
                    "int",
                    "str"
                ]
            }
        },
        "List._before_extend": {
            "name": "_before_extend",
            "location": 2996,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "T",
                    "Mapping[str, Dict[str, Any]]",
                    "Optional[str]"
                ],
                "call": [
                    "str",
                    "bool",
                    "vimiv.utils.customtypes.FuncT"
                ],
                "notify": [
                    "str",
                    "bool",
                    "vimiv.utils.customtypes.FuncT"
                ]
            }
        },
        "List._after_extend": {
            "name": "_after_extend",
            "location": 2999,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "Dict[str, Any]",
                    "List[int]",
                    "Sequence[Dict[str, Any]]",
                    "Optional[List[Any]]"
                ],
                "answer": [
                    "str",
                    "dict",
                    "List[str]",
                    "List[int]",
                    "bytes"
                ],
                "notify": [
                    "int",
                    "nutrition.recipe.types.Ingredient",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "List._before_remove": {
            "name": "_before_remove",
            "location": 3003,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Sequence[T]",
                    "Iterable[str]",
                    "Type[Any]",
                    "Callable",
                    "str",
                    "bool"
                ],
                "call": [
                    "List[str]",
                    "T"
                ],
                "notify": [
                    "str",
                    "bool",
                    "vimiv.utils.customtypes.FuncT"
                ]
            }
        },
        "List._before_reverse": {
            "name": "_before_reverse",
            "location": 3009,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "T",
                    "Mapping[str, Dict[str, Any]]",
                    "Optional[str]"
                ],
                "call": [
                    "str",
                    "bool",
                    "vimiv.utils.customtypes.FuncT"
                ],
                "notify": [
                    "str",
                    "bool",
                    "vimiv.utils.customtypes.FuncT"
                ]
            }
        },
        "List._before_sort": {
            "name": "_before_sort",
            "location": 3012,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "T",
                    "Mapping[str, Dict[str, Any]]",
                    "Optional[str]"
                ],
                "call": [
                    "str",
                    "bool",
                    "vimiv.utils.customtypes.FuncT"
                ],
                "notify": [
                    "str",
                    "bool",
                    "vimiv.utils.customtypes.FuncT"
                ]
            }
        },
        "List.rearrangement": {
            "name": "rearrangement",
            "location": 3016,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "new": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "float"
                ]
            }
        },
        "Mapping.__init__": {
            "name": "__init__",
            "location": 3033,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "trait": [
                    "Optional[str]",
                    "Optional[Any]",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[int]"
                ],
                "trait_mapping": [
                    "bool",
                    "Optional[bool]",
                    "Dict[str, Any]",
                    "cmk.utils.type_defs.HostName"
                ],
                "default_value": [
                    "bool",
                    "List[Dict[str, int]]",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Mapping.class_init": {
            "name": "class_init",
            "location": 3067,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "dict"
                ],
                "name": [
                    "str",
                    "apistar.types.ParamName",
                    "Optional[str]",
                    "Callable"
                ],
                "parent": [
                    "str",
                    "apistar.types.ParamName",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "Mapping.instance_init": {
            "name": "instance_init",
            "location": 3077,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "float"
                ]
            }
        },
        "Mapping.validate_elements": {
            "name": "validate_elements",
            "location": 3087,
            "return": [
                "int",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "List[str]",
                    "Union[None, int, str]",
                    "int"
                ],
                "new": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Dict.__init__": {
            "name": "__init__",
            "location": 3146,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value_trait": [
                    "Optional[List[Any]]",
                    "Optional[str]",
                    "bool",
                    "List[Union[int, str]]"
                ],
                "per_key_traits": [
                    "Optional[bytes]",
                    "bytes"
                ],
                "key_trait": [
                    "Callable[[], str]",
                    "Optional[dict]",
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "default_value": [
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Optional[List[str]]",
                    "app.types.HTML"
                ]
            }
        },
        "Dict._before_setitem": {
            "name": "_before_setitem",
            "location": 3240,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "Mapping[str, bool]"
            ],
            "arguments": {
                "value": [
                    "T",
                    "Dict[str, str]",
                    "Iterable",
                    "Optional[Iterable]"
                ],
                "call": [
                    "Dict[str, Any]",
                    "T",
                    "\"Track\"",
                    "object"
                ],
                "notify": [
                    "str",
                    "bool",
                    "vimiv.utils.customtypes.FuncT"
                ]
            }
        },
        "Dict._after_setitem": {
            "name": "_after_setitem",
            "location": 3246,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "str",
                    "List[int]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "answer": [
                    "dict",
                    "Optional[types.ContextValue]",
                    "bytes"
                ],
                "notify": [
                    "str",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "Dict._before_delitem": {
            "name": "_before_delitem",
            "location": 3253,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool",
                    "vimiv.utils.customtypes.FuncT"
                ],
                "call": [
                    "str",
                    "bool",
                    "vimiv.utils.customtypes.FuncT"
                ],
                "notify": [
                    "str",
                    "bool",
                    "vimiv.utils.customtypes.FuncT"
                ]
            }
        },
        "Dict._before_update": {
            "name": "_before_update",
            "location": 3264,
            "return": [
                "List[int]",
                "int",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "Exception",
                    "dict"
                ],
                "call": [
                    "dict",
                    "tuple",
                    "Optional[str]",
                    "str"
                ],
                "notify": [
                    "str",
                    "dict",
                    "tuple",
                    "float",
                    "vimiv.utils.customtypes.FuncT"
                ]
            }
        },
        "Dict._after_update": {
            "name": "_after_update",
            "location": 3277,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, int]",
                    "Dict[str, Dict[str, str]]"
                ],
                "answer": [
                    "str",
                    "dict",
                    "bool",
                    "Callable",
                    "Dict[str, Any]"
                ],
                "notify": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "dict",
                    "int"
                ]
            }
        },
        "Dict._before_clear": {
            "name": "_before_clear",
            "location": 3282,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int"
                ],
                "call": [
                    "str",
                    "bool",
                    "vimiv.utils.customtypes.FuncT"
                ],
                "notify": [
                    "str",
                    "bool",
                    "vimiv.utils.customtypes.FuncT"
                ]
            }
        },
        "Dict._after_clear": {
            "name": "_after_clear",
            "location": 3285,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[str]",
                    "Callable",
                    "int",
                    "Type[T]",
                    "Optional[float]",
                    "T",
                    "bool"
                ],
                "answer": [
                    "str",
                    "Union[int, float, str]",
                    "int",
                    "Callable",
                    "Dict[str, List]"
                ],
                "notify": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, float]",
                    "bool"
                ]
            }
        },
        "Dict._validate_mutation": {
            "name": "_validate_mutation",
            "location": 3289,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str",
                    "list",
                    "int",
                    "Dict[str, Any]",
                    "Pattern[str]",
                    "dict"
                ],
                "value": [
                    "str",
                    "list",
                    "int",
                    "Dict[str, Any]",
                    "Pattern[str]",
                    "dict"
                ]
            }
        },
        "TCPAddress.validate": {
            "name": "validate",
            "location": 3304,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bytes",
                    "int",
                    "float"
                ],
                "value": [
                    "List[tuple]",
                    "tuple",
                    "List[float]",
                    "list",
                    "int",
                    "snorkel.types.DataPoint"
                ]
            }
        },
        "CRegExp.validate": {
            "name": "validate",
            "location": 3321,
            "return": [
                "str",
                "bytes",
                "Type",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "str",
                    "complex",
                    "float",
                    "SupportsBytes"
                ],
                "value": [
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "UseEnum.__init__": {
            "name": "__init__",
            "location": 3357,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "enum_class": [
                    "bool",
                    "Tuple[int, int, int, str]",
                    "Optional['Region']"
                ],
                "default_value": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "Optional[Any]"
                ]
            }
        },
        "UseEnum.select_by_number": {
            "name": "select_by_number",
            "location": 3367,
            "return": [
                "mypy.types.Type",
                "list"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float",
                    "Union[int, bool]"
                ],
                "default": [
                    "bool",
                    "core.base.types.DataDict",
                    "KT",
                    "list",
                    "float"
                ]
            }
        },
        "UseEnum.select_by_name": {
            "name": "select_by_name",
            "location": 3377,
            "return": [
                "mypy.types.Type",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Container[\"Taxon\"]",
                    "Optional[int]",
                    "Dict[str, Any]"
                ],
                "default": [
                    "str",
                    "AnyStr",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "UseEnum.validate": {
            "name": "validate",
            "location": 3385,
            "return": [
                "int",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bytes",
                    "int",
                    "float"
                ],
                "value": [
                    "T",
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "UseEnum._choices_str": {
            "name": "_choices_str",
            "location": 3405,
            "return": [
                "int",
                "Iterable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "as_rst": [
                    "bool",
                    "int"
                ]
            }
        },
        "UseEnum._info": {
            "name": "_info",
            "location": 3413,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]",
                "dict",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "as_rst": [
                    "str",
                    "int"
                ]
            }
        },
        "UseEnum.info": {
            "name": "info",
            "location": 3420,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UseEnum.info_rst": {
            "name": "info_rst",
            "location": 3423,
            "return": [
                "int",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Callable.validate": {
            "name": "validate",
            "location": 3437,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bytes",
                    "int",
                    "float"
                ],
                "value": [
                    "int",
                    "str",
                    "nutrition.recipe.types.Ingredient",
                    "bool",
                    "bytes"
                ]
            }
        },
        "Integer.validate": {
            "name": "validate",
            "location": 2169,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool",
                    "dict",
                    "list",
                    "Dict[str, Any]"
                ],
                "value": [
                    "float",
                    "T"
                ]
            }
        },
        "List.rearrangement.after_rearangement": {
            "name": "after_rearangement",
            "location": 3018,
            "return": [
                ""
            ],
            "arguments": {
                "returned": [
                    "str",
                    "Literal[True]",
                    "Literal[False]",
                    "bool"
                ],
                "notify": [
                    "int",
                    "list",
                    "List[str]",
                    "FrozenSet[Any]",
                    "bool",
                    "str"
                ]
            }
        },
        "HasTraits.hold_trait_notifications.compress": {
            "name": "compress",
            "location": 1190,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "past_changes": [
                    "utils.JobsType"
                ],
                "change": [
                    "str",
                    "cmk.utils.type_defs.ConfigSerial"
                ]
            }
        },
        "HasTraits.hold_trait_notifications.hold": {
            "name": "hold",
            "location": 1204,
            "return": [
                ""
            ],
            "arguments": {
                "change": [
                    "str",
                    "dict"
                ]
            }
        },
        "Dict._before_delitem._after": {
            "name": "_after",
            "location": 3260,
            "return": [
                ""
            ],
            "arguments": {
                "returned": [
                    "str",
                    "Literal[True]",
                    "Literal[False]",
                    "bool"
                ],
                "notify": [
                    "str"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/polyvers/_vendor/traitlets/_version.py": {},
    "polyvers-master/pvcmd/polyvers/_vendor/traitlets/__init__.py": {},
    "polyvers-master/pvcmd/polyvers/_vendor/traitlets/config/application.py": {
        "catch_config_error": {
            "name": "catch_config_error",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "method": [
                    "typing.Callable[[], typing.Any]",
                    "Callable[[], Any]",
                    "typing.Type",
                    "dict[, ]",
                    "Callable",
                    "Type",
                    "dict",
                    "T",
                    "Type[T]"
                ]
            }
        },
        "boolean_flag": {
            "name": "boolean_flag",
            "location": 791,
            "return": [
                "str",
                "dict[str, tuple[typing.Union[dict[str, dict[str, bool]],typing.Text]]]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "Optional[bytes]"
                ],
                "configurable": [
                    "str"
                ],
                "set_help": [
                    "typing.Text",
                    "str",
                    "bool"
                ],
                "unset_help": [
                    "typing.Text",
                    "str",
                    "Tuple[Type]",
                    "bool",
                    "int"
                ]
            }
        },
        "get_config": {
            "name": "get_config",
            "location": 824,
            "return": [
                "Config",
                "Dict[str, Any]",
                "Optional[str]",
                "config.Config",
                "bool"
            ],
            "arguments": {}
        },
        "catch_config_error.inner": {
            "name": "inner",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "app": [
                    "str"
                ]
            }
        },
        "LevelFormatter.format": {
            "name": "format",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Application._classes_inc_parents": {
            "name": "_classes_inc_parents",
            "location": 157,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "classes": [
                    "None",
                    "Type[Any]",
                    "str",
                    "typing.Type",
                    "Optional[str]",
                    "type"
                ]
            }
        },
        "Application.__init__": {
            "name": "__init__",
            "location": 239,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application._config_changed": {
            "name": "_config_changed",
            "location": 253,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "change": [
                    "logging.Logger"
                ]
            }
        },
        "Application.initialize": {
            "name": "initialize",
            "location": 258,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "int",
                    "None",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Application.start": {
            "name": "start",
            "location": 268,
            "return": [
                "float",
                "Tuple[Tuple[int, Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application._dump_config": {
            "name": "_dump_config",
            "location": 276,
            "return": [
                "None",
                "Dict[str, Any]",
                "Union[tuple, list]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.print_alias_help": {
            "name": "print_alias_help",
            "location": 315,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.emit_alias_help": {
            "name": "emit_alias_help",
            "location": 319,
            "return": [
                "None",
                "Union[tuple, list]",
                "typing.Generator[]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.print_flag_help": {
            "name": "print_flag_help",
            "location": 358,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.emit_flag_help": {
            "name": "emit_flag_help",
            "location": 362,
            "return": [
                "list",
                "None",
                "typing.Generator[str]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.print_options": {
            "name": "print_options",
            "location": 387,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.emit_options_help": {
            "name": "emit_options_help",
            "location": 391,
            "return": [
                "None",
                "str",
                "typing.Generator[]",
                "DefaultDict",
                "typing.Generator[typing.Text]",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.print_subcommands": {
            "name": "print_subcommands",
            "location": 408,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.emit_subcommands_help": {
            "name": "emit_subcommands_help",
            "location": 412,
            "return": [
                "None",
                "Union[tuple, list]",
                "typing.Generator[]",
                "List[int]",
                "typing.Generator[typing.Text]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.emit_help_epilogue": {
            "name": "emit_help_epilogue",
            "location": 430,
            "return": [
                "",
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "self": [],
                "classes": [
                    "bool",
                    "Callable[..., T]",
                    "typing.Callable[..., T]",
                    "list",
                    "list[]"
                ]
            }
        },
        "Application.print_help": {
            "name": "print_help",
            "location": 439,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "classes": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Type[Any]"
                ]
            }
        },
        "Application.emit_help": {
            "name": "emit_help",
            "location": 446,
            "return": [
                "",
                "typing.Generator[]",
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "self": [],
                "classes": [
                    "bool",
                    "Type",
                    "Callable[[str], bool]",
                    "type"
                ]
            }
        },
        "Application.document_config_options": {
            "name": "document_config_options",
            "location": 476,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.print_description": {
            "name": "print_description",
            "location": 484,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.emit_description": {
            "name": "emit_description",
            "location": 488,
            "return": [
                "",
                "typing.Generator[]",
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.print_examples": {
            "name": "print_examples",
            "location": 494,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.emit_examples": {
            "name": "emit_examples",
            "location": 498,
            "return": [
                "",
                "typing.Generator[typing.Text]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.print_version": {
            "name": "print_version",
            "location": 511,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.initialize_subcommand": {
            "name": "initialize_subcommand",
            "location": 516,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "subc": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "argv": [
                    "int",
                    "None",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Application.flatten_flags": {
            "name": "flatten_flags",
            "location": 540,
            "return": [
                "tuple[typing.Union[dict[typing.Union[typing.Text,int,list[int],list[],list[str]], tuple[dict[, ]]],dict[typing.Union[int,list[int],typing.Text,dict[, ],list[list[int]]], str]]]",
                "Dict[str, Any]",
                "type",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application._create_loader": {
            "name": "_create_loader",
            "location": 599,
            "return": [
                "KVArgParseConfigLoader",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "bool",
                    "Mapping[str, Any]",
                    "str",
                    "typing.Mapping",
                    "List[deeplearning.clgen.clgen.Instance]",
                    "list[I]"
                ],
                "aliases": [
                    "bool",
                    "Mapping[str, Any]",
                    "str",
                    "typing.Mapping",
                    "List[deeplearning.clgen.clgen.Instance]",
                    "list[I]"
                ],
                "flags": [
                    "bool",
                    "Mapping[str, Any]",
                    "str",
                    "typing.Mapping",
                    "List[deeplearning.clgen.clgen.Instance]",
                    "list[I]"
                ],
                "classes": [
                    "bool",
                    "Mapping[str, Any]",
                    "str",
                    "typing.Mapping",
                    "List[deeplearning.clgen.clgen.Instance]",
                    "list[I]"
                ]
            }
        },
        "Application.parse_command_line": {
            "name": "parse_command_line",
            "location": 604,
            "return": [
                "str",
                "int",
                "List[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "bytes",
                    "None",
                    "List[str]",
                    "List[int]",
                    "str",
                    "list[str]",
                    "Sequence['cirq.Qid']",
                    "list[int]",
                    "Sequence[str]",
                    "typing.Sequence['cirq.Qid']",
                    "typing.Sequence[str]",
                    "list",
                    "list[]"
                ]
            }
        },
        "Application._load_config_files": {
            "name": "_load_config_files",
            "location": 648,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[Any]",
                    "typing.Any",
                    "Sequence[str]",
                    "None",
                    "typing.Sequence[str]"
                ],
                "basefilename": [
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "path": [
                    "float",
                    "bool",
                    "None"
                ],
                "log": [
                    "str",
                    "None",
                    "int",
                    "Optional[logging.Logger]",
                    "logging.Logger",
                    "bool"
                ],
                "raise_config_file_errors": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Application.load_config_file": {
            "name": "load_config_file",
            "location": 709,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "path": [
                    "str",
                    "None"
                ]
            }
        },
        "Application._classes_with_config_traits": {
            "name": "_classes_with_config_traits",
            "location": 722,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "classes": [
                    "bool",
                    "None",
                    "str",
                    "type",
                    "typing.Type"
                ]
            }
        },
        "Application.generate_config_file": {
            "name": "generate_config_file",
            "location": 760,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "classes": [
                    "Sequence[str]",
                    "None",
                    "str",
                    "List[Dict[str, Any]]",
                    "typing.Sequence[str]",
                    "list[dict[str, typing.Any]]",
                    "Union[str, List[str]]",
                    "List[str]",
                    "list[str]",
                    "Mapping[str, str]",
                    "typing.Mapping"
                ]
            }
        },
        "Application.exit": {
            "name": "exit",
            "location": 770,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "exit_status": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Application.launch_instance": {
            "name": "launch_instance",
            "location": 775,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "argv": [
                    "Callable",
                    "str",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Application._load_config_files.new_loader": {
            "name": "new_loader",
            "location": 654,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[int]"
                ],
                "path": [
                    "bool"
                ]
            }
        },
        "Application._classes_with_config_traits.is_any_parent_included": {
            "name": "is_any_parent_included",
            "location": 743,
            "return": [
                "bool",
                "str",
                "dict",
                "Callable[..., Awaitable]"
            ],
            "arguments": {
                "cls": [
                    "mypy.types.Instance"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/polyvers/_vendor/traitlets/config/configurable.py": {
        "Configurable.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Configurable.section_names": {
            "name": "section_names",
            "location": 116,
            "return": [
                "List[str]",
                "bool",
                "Iterable[str]",
                "str",
                "List[Tuple[str, Any]]",
                "Tuple[str]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "\"Project\""
                ]
            }
        },
        "Configurable._find_my_config": {
            "name": "_find_my_config",
            "location": 122,
            "return": [
                "Dict[str, Any]",
                "List[str]",
                "Optional[str]",
                "Dict[str, str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "boto3.resources.factory.ec2.Instance",
                    "dict",
                    "List[str]",
                    "Optional[List[dict]]"
                ]
            }
        },
        "Configurable._load_config": {
            "name": "_load_config",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "Callable",
                    "dict"
                ],
                "section_names": [
                    "str",
                    "Optional[str]",
                    "Union[None, List[str]]"
                ],
                "traits": [
                    "str"
                ]
            }
        },
        "Configurable._config_changed": {
            "name": "_config_changed",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "change": [
                    "str",
                    "T",
                    "Optional[str]"
                ]
            }
        },
        "Configurable.update_config": {
            "name": "update_config",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "str",
                    "sphinx.config.Config",
                    "Dict[str, str]",
                    "Config",
                    "Optional[dict]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "Configurable.class_get_help": {
            "name": "class_get_help",
            "location": 216,
            "return": [
                "str",
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type",
                    "Union[str, int]",
                    "dict",
                    "Optional[ChainMap[str, Any]]",
                    "List[str]",
                    "Optional[Set[str]]"
                ],
                "inst": [
                    "Optional[str]",
                    "Tuple[List[str], Optional[str]]",
                    "Type"
                ]
            }
        },
        "Configurable.class_get_trait_help": {
            "name": "class_get_trait_help",
            "location": 233,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Optional[List[Type]]",
                    "Optional[str]",
                    "Type",
                    "List[Optional[int]]"
                ],
                "trait": [
                    "dict",
                    "Union[Dict, List, str]"
                ],
                "inst": [
                    "Optional[List[Type]]",
                    "Dict[str, Any]",
                    "Optional[List[Any]]",
                    "Optional[Callable]",
                    "str"
                ],
                "helptext": [
                    "str",
                    "Union[None, str, List[str], Dict[str, str]]",
                    "Type[object]",
                    "Mapping[str, Any]",
                    "Match",
                    "float"
                ]
            }
        },
        "Configurable.class_print_help": {
            "name": "class_print_help",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "T",
                    "str",
                    "float"
                ],
                "inst": [
                    "Type",
                    "T",
                    "str",
                    "float"
                ]
            }
        },
        "Configurable._defining_class": {
            "name": "_defining_class",
            "location": 290,
            "return": [
                "Type[Any]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "T"
                ],
                "trait": [
                    "Optional[str]",
                    "Type"
                ],
                "classes": [
                    "Optional[str]",
                    "Type"
                ]
            }
        },
        "Configurable.class_config_section": {
            "name": "class_config_section",
            "location": 316,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "str",
                    "dict"
                ],
                "classes": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "Configurable.class_config_rst_doc": {
            "name": "class_config_rst_doc",
            "location": 378,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Dict[str, Any]",
                    "type",
                    "Optional[List[Any]]",
                    "Match"
                ]
            }
        },
        "LoggingConfigurable._log_default": {
            "name": "_log_default",
            "location": 430,
            "return": [
                "str",
                "Callable",
                "List[dict]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingletonConfigurable._walk_mro": {
            "name": "_walk_mro",
            "location": 446,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "complex",
                    "bytes",
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "SingletonConfigurable.clear_instance": {
            "name": "clear_instance",
            "location": 459,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "T",
                    "Exception",
                    "int",
                    "Iterable[T]",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "SingletonConfigurable.instance": {
            "name": "instance",
            "location": 471,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "Callable",
                    "str",
                    "T",
                    "Optional[Any]"
                ]
            }
        },
        "SingletonConfigurable.initialized": {
            "name": "initialized",
            "location": 516,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "type"
                ]
            }
        },
        "Configurable.__init__.notice_config_override": {
            "name": "notice_config_override",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "change": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "List[int]"
                ]
            }
        },
        "Configurable.class_config_section.c": {
            "name": "c",
            "location": 325,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/polyvers/_vendor/traitlets/config/loader.py": {
        "_is_section_key": {
            "name": "_is_section_key",
            "location": 158,
            "return": [
                "bool"
            ],
            "arguments": {
                "key": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Iterable[Hashable]"
                ]
            }
        },
        "_kv_opt": {
            "name": "_kv_opt",
            "location": 840,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "traitname": [
                    "str",
                    "bytes",
                    "Optional[\"Address\"]",
                    "List[str]"
                ],
                "opt_value": [
                    "dict",
                    "int",
                    "Union[Sequence, 'SweepFixedValues']",
                    "float"
                ]
            }
        },
        "load_pyconfig_files": {
            "name": "load_pyconfig_files",
            "location": 971,
            "return": [
                "str",
                "dict",
                "_vendor.traitlets.config.Config",
                "Optional[dict]"
            ],
            "arguments": {
                "config_files": [
                    "str",
                    "bool"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "ArgumentParser.print_help": {
            "name": "print_help",
            "location": 54,
            "return": [
                "str",
                "Callable",
                "Dict[str, Any]",
                "Callable[[str], None]"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "waterbutler.core.path.WaterButlerPath",
                    "Optional[str]"
                ]
            }
        },
        "LazyConfigValue.append": {
            "name": "append",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "LazyConfigValue.extend": {
            "name": "extend",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, float]"
                ]
            }
        },
        "LazyConfigValue.prepend": {
            "name": "prepend",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "LazyConfigValue.insert": {
            "name": "insert",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "index": [
                    "T",
                    "list",
                    "List[Tuple[int, ...]]",
                    "int",
                    "List[str]"
                ],
                "other": [
                    "List[List[Any]]",
                    "List[Union[int, float]]",
                    "type",
                    "List[Tuple[str, int]]",
                    "int",
                    "bytes",
                    "List[int]",
                    "T"
                ]
            }
        },
        "LazyConfigValue.update": {
            "name": "update",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict"
                ]
            }
        },
        "LazyConfigValue.add": {
            "name": "add",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "LazyConfigValue.get_value": {
            "name": "get_value",
            "location": 112,
            "return": [
                "str",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "initial": [
                    "int",
                    "Union[float, int]",
                    "List[float]",
                    "Optional[List[str]]",
                    "float"
                ]
            }
        },
        "LazyConfigValue.to_dict": {
            "name": "to_dict",
            "location": 135,
            "return": [
                "Dict[str, bool]",
                "dict",
                "int",
                "Exception",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyConfigValue.__repr__": {
            "name": "__repr__",
            "location": 151,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Config._ensure_subconfig": {
            "name": "_ensure_subconfig",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Config._merge": {
            "name": "_merge",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "Config.merge": {
            "name": "merge",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "Config.collisions": {
            "name": "collisions",
            "location": 206,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "Union[int, \"BitVec\"]",
                    "T"
                ]
            }
        },
        "Config.__contains__": {
            "name": "__contains__",
            "location": 226,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Config._has_section": {
            "name": "_has_section",
            "location": 239,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "Config.copy": {
            "name": "copy",
            "location": 242,
            "return": [
                "bool",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.__copy__": {
            "name": "__copy__",
            "location": 245,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 248,
            "return": [
                "str",
                "Callable[[Mapping], Awaitable]",
                "Callable[[], Awaitable[Mapping]]",
                "List[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "memo": [
                    "int",
                    "float",
                    "List[float]",
                    "str"
                ]
            }
        },
        "Config.__getitem__": {
            "name": "__getitem__",
            "location": 260,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "dict",
                "Dict[str, Set[str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "Config.__setitem__": {
            "name": "__setitem__",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict",
                    "Optional[bytes]"
                ],
                "value": [
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "Config.__getattr__": {
            "name": "__getattr__",
            "location": 283,
            "return": [
                "bytes",
                "dict",
                "str",
                "Optional[Dict[str, str]]",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "List[str]",
                    "Iterable[Hashable]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "Config.__setattr__": {
            "name": "__setattr__",
            "location": 291,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[bytes]"
                ],
                "value": [
                    "str",
                    "List[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Config.__delattr__": {
            "name": "__delattr__",
            "location": 299,
            "return": [
                "bytes",
                "dict",
                "int",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "ConfigLoader._log_default": {
            "name": "_log_default",
            "location": 328,
            "return": [
                "bool",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigLoader.__init__": {
            "name": "__init__",
            "location": 332,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log": [
                    "Dict[str, Any]",
                    "Union[int, str]",
                    "Exception",
                    "int"
                ]
            }
        },
        "ConfigLoader.clear": {
            "name": "clear",
            "location": 354,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigLoader.load_config": {
            "name": "load_config",
            "location": 357,
            "return": [
                "Optional[dict]",
                "bool",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileConfigLoader.__init__": {
            "name": "__init__",
            "location": 375,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "path": [
                    "str",
                    "int"
                ]
            }
        },
        "FileConfigLoader._find_file": {
            "name": "_find_file",
            "location": 391,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONFileConfigLoader.load_config": {
            "name": "load_config",
            "location": 407,
            "return": [
                "Optional[dict]",
                "bool",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONFileConfigLoader._read_file_as_dict": {
            "name": "_read_file_as_dict",
            "location": 418,
            "return": [
                "Callable[[Any], bool]",
                "str",
                "bool",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONFileConfigLoader._convert_to_config": {
            "name": "_convert_to_config",
            "location": 422,
            "return": [
                "Dict[str, Any]",
                "str",
                "Sequence",
                "Optional[dict]"
            ],
            "arguments": {
                "self": [],
                "dictionary": [
                    "bool",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "JSONFileConfigLoader.__enter__": {
            "name": "__enter__",
            "location": 433,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONFileConfigLoader.__exit__": {
            "name": "__exit__",
            "location": 437,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_value": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "traceback": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "PyFileConfigLoader.load_config": {
            "name": "load_config",
            "location": 458,
            "return": [
                "Optional[dict]",
                "bool",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyFileConfigLoader.load_subconfig": {
            "name": "load_subconfig",
            "location": 468,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str",
                    "list",
                    "List[Dict]"
                ],
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "PyFileConfigLoader._read_file_as_dict": {
            "name": "_read_file_as_dict",
            "location": 483,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandLineConfigLoader._parse_config_value": {
            "name": "_parse_config_value",
            "location": 511,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "str",
                    "bytes",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "CommandLineConfigLoader._exec_config_str": {
            "name": "_exec_config_str",
            "location": 524,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "str",
                    "bool",
                    "int"
                ],
                "rhs": [
                    "str",
                    "int",
                    "dict",
                    "float",
                    "Optional[Union[str, Any]]"
                ],
                "trait": [
                    "str",
                    "bool",
                    "List[Dict[str, Any]]",
                    "bytes"
                ]
            }
        },
        "CommandLineConfigLoader._load_flag": {
            "name": "_load_flag",
            "location": 567,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Dict[str, Any]",
                    "dict",
                    "Mapping",
                    "int",
                    "list"
                ]
            }
        },
        "KeyValueConfigLoader.__init__": {
            "name": "__init__",
            "location": 603,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "int",
                    "bool",
                    "List[Dict[str, Any]]",
                    "Any"
                ],
                "aliases": [
                    "float",
                    "Tuple[int, int]",
                    "Callable",
                    "int"
                ],
                "flags": [
                    "float",
                    "Tuple[int, int]",
                    "Callable",
                    "int"
                ]
            }
        },
        "KeyValueConfigLoader.clear": {
            "name": "clear",
            "location": 643,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyValueConfigLoader._decode_argv": {
            "name": "_decode_argv",
            "location": 648,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "enc": [
                    "Optional[int]",
                    "Optional[List[str]]"
                ]
            }
        },
        "KeyValueConfigLoader.load_config": {
            "name": "load_config",
            "location": 661,
            "return": [
                "Optional[dict]",
                "bool",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[Sequence[Any]]",
                    "bool",
                    "int",
                    "Optional[List[str]]"
                ],
                "aliases": [
                    "Union[List, Dict, None]",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Callable[..., Any]]",
                    "Optional[int]"
                ],
                "flags": [
                    "dict",
                    "Dict[str, Any]",
                    "List[Dict]",
                    "str",
                    "Dict[str, Set[str]]"
                ]
            }
        },
        "ArgParseConfigLoader.__init__": {
            "name": "__init__",
            "location": 746,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "str",
                    "bool",
                    "Sequence[str]"
                ],
                "aliases": [
                    "bool",
                    "int",
                    "str",
                    "Sequence[str]"
                ],
                "flags": [
                    "bool",
                    "int",
                    "str",
                    "Sequence[str]"
                ],
                "log": [
                    "Tuple[str]",
                    "Dict[str, int]",
                    "Optional[Dict]",
                    "int",
                    "str",
                    "Iterable[str]",
                    "Union[int, Dict[str, int]]"
                ],
                "classes": [
                    "bool",
                    "int",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "ArgParseConfigLoader.load_config": {
            "name": "load_config",
            "location": 789,
            "return": [
                "Optional[dict]",
                "bool",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "Optional[argparse._ActionsContainer]",
                    "bool",
                    "Optional[str]"
                ],
                "aliases": [
                    "str",
                    "int",
                    "list",
                    "Union[str, Pattern]",
                    "bool",
                    "float"
                ],
                "flags": [
                    "str",
                    "int",
                    "list",
                    "Union[str, Pattern]",
                    "bool",
                    "float"
                ],
                "classes": [
                    "str",
                    "int",
                    "list",
                    "Union[str, Pattern]",
                    "bool",
                    "float"
                ]
            }
        },
        "ArgParseConfigLoader.get_extra_args": {
            "name": "get_extra_args",
            "location": 807,
            "return": [
                "bool",
                "str",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArgParseConfigLoader._create_parser": {
            "name": "_create_parser",
            "location": 813,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "aliases": [
                    "str",
                    "argparse.ArgumentParser",
                    "Callable[[Optional, Optional, str], None]",
                    "Optional[Callable[[Dict], Any]]"
                ],
                "flags": [
                    "str",
                    "argparse.ArgumentParser",
                    "Callable[[Optional, Optional, str], None]",
                    "Optional[Callable[[Dict], Any]]"
                ],
                "classes": [
                    "str",
                    "argparse.ArgumentParser",
                    "Callable[[Optional, Optional, str], None]",
                    "Optional[Callable[[Dict], Any]]"
                ]
            }
        },
        "ArgParseConfigLoader._parse_config_traits": {
            "name": "_parse_config_traits",
            "location": 817,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ArgParseConfigLoader._add_arguments": {
            "name": "_add_arguments",
            "location": 822,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "aliases": [
                    "Literal",
                    "Exception",
                    "type"
                ],
                "flags": [
                    "Literal",
                    "Exception",
                    "type"
                ],
                "classes": [
                    "Literal",
                    "Exception",
                    "type"
                ]
            }
        },
        "ArgParseConfigLoader._parse_args": {
            "name": "_parse_args",
            "location": 825,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "ArgParseConfigLoader._convert_to_config": {
            "name": "_convert_to_config",
            "location": 832,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_FlagAction.__init__": {
            "name": "__init__",
            "location": 858,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_FlagAction.__call__": {
            "name": "__call__",
            "location": 866,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "argparse.ArgumentParser",
                    "Optional[str]",
                    "str"
                ],
                "namespace": [
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ],
                "values": [
                    "bool",
                    "int",
                    "argparse.Namespace"
                ],
                "option_string": [
                    "MutableMapping[str, str]",
                    "List[str]",
                    "Set[str]",
                    "Callable[[str], bool]",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "KVArgParseConfigLoader._add_arguments": {
            "name": "_add_arguments",
            "location": 880,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "aliases": [
                    "dict",
                    "Type[T]"
                ],
                "flags": [
                    "Union[List, Dict, None]",
                    "str",
                    "Optional[str]",
                    "type",
                    "Callable"
                ],
                "classes": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "KVArgParseConfigLoader._convert_to_config": {
            "name": "_convert_to_config",
            "location": 949,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PyFileConfigLoader._read_file_as_dict.get_config": {
            "name": "get_config",
            "location": 485,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "polyvers-master/pvcmd/polyvers/_vendor/traitlets/config/manager.py": {
        "recursive_update": {
            "name": "recursive_update",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "target": [
                    "bool",
                    "Union[int, float]",
                    "Callable[..., None]",
                    "int"
                ],
                "new": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "dict[str, dict[str, str]]",
                    "Dict[str, Any]",
                    "Tuple[bytes]",
                    "Sequence",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "BaseJSONConfigManager.ensure_config_dir_exists": {
            "name": "ensure_config_dir_exists",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseJSONConfigManager.file_name": {
            "name": "file_name",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "section_name": [
                    "str"
                ]
            }
        },
        "BaseJSONConfigManager.get": {
            "name": "get",
            "location": 54,
            "return": [
                "dict[, ]",
                "bytes",
                "str",
                "pymatgen.io.vasp.inputs.Poscar"
            ],
            "arguments": {
                "self": [],
                "section_name": [
                    "str"
                ]
            }
        },
        "BaseJSONConfigManager.set": {
            "name": "set",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "section_name": [
                    "str"
                ],
                "data": [
                    "dict",
                    "dict[, ]",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping",
                    "typing.Mapping"
                ]
            }
        },
        "BaseJSONConfigManager.update": {
            "name": "update",
            "location": 80,
            "return": [
                "dict",
                "dict[, ]",
                "str",
                "dict[tuple[typing.Union[str,str]], tuple[typing.Union[str,str]]]",
                "Callable",
                "OrderedDict[str, Any]",
                "dict[str, typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]]",
                "Optional[float]",
                "dict[str, None]",
                "dict[str, str]",
                "dict[str, typing.Union[int,str]]",
                "dict[str, bool]"
            ],
            "arguments": {
                "self": [],
                "section_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "new_data": [
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "bool",
                    "Dict[int, str]",
                    "dict[int, str]",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "str",
                    "List['Query']",
                    "None",
                    "Dict[str, Any]",
                    "list['Query']",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/polyvers/_vendor/traitlets/config/sphinxdoc.py": {
        "setup": {
            "name": "setup",
            "location": 40,
            "return": [
                "dict[typing.Text, bool]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "app": []
            }
        },
        "interesting_default_value": {
            "name": "interesting_default_value",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "dv": [
                    "int",
                    "Optional[int]",
                    "None",
                    "str",
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "Optional[str]",
                    "list[str]",
                    "bool",
                    "list",
                    "Optional[List[str]]"
                ]
            }
        },
        "format_aliases": {
            "name": "format_aliases",
            "location": 57,
            "return": [
                "str",
                "int",
                "List[List[str]]",
                "tuple"
            ],
            "arguments": {
                "aliases": [
                    "list[tuple[typing.Union[int,str]]]",
                    "bool",
                    "List[Tuple[int, str]]",
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "class_config_rst_doc": {
            "name": "class_config_rst_doc",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "type",
                    "typing.Type",
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "Match",
                    "None",
                    "typing.Match"
                ],
                "trait_aliases": [
                    "str",
                    "bytes",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "reverse_aliases": {
            "name": "reverse_aliases",
            "location": 114,
            "return": [
                "List[int]",
                "str",
                "Iterable[str]",
                "list[str]",
                "Iterable[T]",
                "list[]",
                "int",
                "tuple[]"
            ],
            "arguments": {
                "app": []
            }
        },
        "write_doc": {
            "name": "write_doc",
            "location": 134,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "title": [
                    "str",
                    "bytes"
                ],
                "app": [
                    "Callable",
                    "bool"
                ],
                "preamble": [
                    "None",
                    "str",
                    "Optional[IO[bytes]]",
                    "Optional[str]",
                    "Optional[TextIO]",
                    "int"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/polyvers/_vendor/traitlets/config/__init__.py": {},
    "polyvers-master/pvcmd/polyvers/_vendor/traitlets/utils/bunch.py": {
        "Bunch.__getattr__": {
            "name": "__getattr__",
            "location": 11,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Bunch.__setattr__": {
            "name": "__setattr__",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "Bunch.__delattr__": {
            "name": "__delattr__",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "KT"
                ]
            }
        },
        "Bunch.__dir__": {
            "name": "__dir__",
            "location": 26,
            "return": [
                "str",
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "polyvers-master/pvcmd/polyvers/_vendor/traitlets/utils/descriptions.py": {
        "describe": {
            "name": "describe",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "article": [
                    "str"
                ],
                "value": [
                    "float",
                    "Union[str, List]",
                    "Optional[bytes]",
                    "Mapping[str, str]",
                    "Type"
                ],
                "name": [
                    "Optional[str]",
                    "bool",
                    "Optional[Sequence[Any]]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[Any]"
                ],
                "verbose": [
                    "str",
                    "bool",
                    "Optional[float]",
                    "Optional[Callable]",
                    "Optional[str]"
                ],
                "capital": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "fklearn.types.UncurriedLearnerFnType"
                ]
            }
        },
        "class_of": {
            "name": "class_of",
            "location": 91,
            "return": [
                "Optional[mypy.types.Type]",
                "bool",
                "Callable[[str], mypy.types.Instance]",
                "Optional[Type]",
                "type"
            ],
            "arguments": {
                "value": [
                    "str",
                    "List[str]",
                    "Optional['ModelOrDc']"
                ]
            }
        },
        "add_article": {
            "name": "add_article",
            "location": 101,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "definite": [
                    "str"
                ],
                "capital": [
                    "str"
                ]
            }
        },
        "repr_type": {
            "name": "repr_type",
            "location": 128,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "Iterator",
                "int"
            ],
            "arguments": {
                "obj": [
                    "Callable[..., None]"
                ]
            }
        },
        "_articled": {
            "name": "_articled",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "article": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "value": [
                    "int",
                    "str",
                    "Callable",
                    "Callable[[object], Any]"
                ]
            }
        },
        "_indefinite": {
            "name": "_indefinite",
            "location": 150,
            "return": [
                "bool"
            ],
            "arguments": {
                "article": [
                    "str"
                ]
            }
        },
        "_name": {
            "name": "_name",
            "location": 165,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "value": [],
                "verbose": [
                    "Optional[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "_prefix": {
            "name": "_prefix",
            "location": 188,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "T"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/polyvers/_vendor/traitlets/utils/getargspec.py": {
        "getargspec": {
            "name": "getargspec",
            "location": 57,
            "return": [
                "int",
                "List[str]",
                "Dict[str, int]"
            ],
            "arguments": {
                "func": [
                    "str",
                    "int",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/polyvers/_vendor/traitlets/utils/importstring.py": {
        "import_item": {
            "name": "import_item",
            "location": 11,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/polyvers/_vendor/traitlets/utils/sentinel.py": {
        "Sentinel.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ],
                "module": [
                    "bool",
                    "typing.Sequence[]",
                    "str",
                    "int",
                    "Sequence",
                    "None",
                    "Optional[str]"
                ],
                "docstring": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "typing.Sequence[]",
                    "Sequence",
                    "Optional[str]"
                ]
            }
        },
        "Sentinel.__repr__": {
            "name": "__repr__",
            "location": 15,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "polyvers-master/pvcmd/polyvers/_vendor/traitlets/utils/__init__.py": {},
    "polyvers-master/pvcmd/tests/conftest.py": {
        "dict_eq": {
            "name": "dict_eq",
            "location": 17,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "d1": [
                    "dict[, ]",
                    "dict",
                    "Optional[SupportsFloat]",
                    "bool",
                    "Optional[Mapping]",
                    "Set[int]",
                    "Callable[..., T]",
                    "T"
                ],
                "d2": [
                    "dict[, ]",
                    "dict",
                    "Optional[SupportsFloat]",
                    "bool",
                    "Optional[Mapping]",
                    "Set[int]",
                    "Callable[..., T]",
                    "T"
                ]
            }
        },
        "touchpaths": {
            "name": "touchpaths",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tdir": [
                    "str"
                ],
                "paths_txt": [
                    "str"
                ]
            }
        },
        "_re_match": {
            "name": "_re_match",
            "location": 45,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "subtext": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "_check_text": {
            "name": "_check_text",
            "location": 57,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, ]]]",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "lines": [
                    "str",
                    "list[list[float]]",
                    "Pattern[str]",
                    "Pattern[bytes]",
                    "int",
                    "List[List[float]]"
                ],
                "require": [
                    "tuple[typing.Union[str,str,str,str,str,str,str,str,str,str,str,str,str,str,str]]",
                    "str",
                    "float",
                    "list[str]",
                    "Tuple[str, str]",
                    "Container[str]",
                    "int",
                    "List[str]"
                ],
                "forbid": [
                    "str",
                    "bool"
                ],
                "match_func": [
                    "str",
                    "int",
                    "Union[bytes, str]",
                    "bytes"
                ]
            }
        },
        "check_text": {
            "name": "check_text",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "text": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "require": [
                    "tuple[]",
                    "str",
                    "set",
                    "bytes"
                ],
                "forbid": [
                    "tuple[]",
                    "str",
                    "set",
                    "bytes"
                ],
                "is_regex": [
                    "bool",
                    "str",
                    "Union[str, List[Any]]",
                    "List[str]"
                ]
            }
        },
        "today": {
            "name": "today",
            "location": 120,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "f1_graft": {
            "name": "f1_graft",
            "location": 150,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "int",
                "trezor.utils.Writer"
            ],
            "arguments": {}
        },
        "f2_graft": {
            "name": "f2_graft",
            "location": 169,
            "return": [
                "dict[typing.Text, typing.Text]",
                "Optional[int]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "utils.Node",
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "orig_files": {
            "name": "orig_files",
            "location": 182,
            "return": [
                "dict[typing.Text, typing.Text]",
                "Tuple[str, str]",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "ok_files": {
            "name": "ok_files",
            "location": 195,
            "return": [
                "dict[typing.Text, typing.Text]",
                "Tuple[str, str]",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "_make_fileset": {
            "name": "_make_fileset",
            "location": 207,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tdir": [
                    "str"
                ],
                "files": [
                    "dict[str, str]",
                    "dict[int, dict[int, typing.Any]]",
                    "Dict[str, str]",
                    "Dict[int, Dict[int, Any]]",
                    "Dict[str, Any]",
                    "str",
                    "\"HexpySession\""
                ]
            }
        },
        "fileset": {
            "name": "fileset",
            "location": 216,
            "return": [
                "str"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "str",
                    "TextIO",
                    "bool",
                    "List[str]"
                ],
                "orig_files": [
                    "str",
                    "bool",
                    "TextIO",
                    "typing.TextIO",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "ok_repo": {
            "name": "ok_repo",
            "location": 226,
            "return": [
                "str",
                "path.Path"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "dict",
                    "List[str]"
                ]
            }
        },
        "vtags_repo": {
            "name": "vtags_repo",
            "location": 251,
            "return": [
                "str",
                "path.Path"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "dict",
                    "List[str]"
                ]
            }
        },
        "untagged_repo": {
            "name": "untagged_repo",
            "location": 274,
            "return": [
                "str",
                "path.Path"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "dict",
                    "List[str]"
                ]
            }
        },
        "empty_repo": {
            "name": "empty_repo",
            "location": 292,
            "return": [
                "str",
                "path.Path"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "dict",
                    "List[str]"
                ]
            }
        },
        "no_repo": {
            "name": "no_repo",
            "location": 309,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "clone_repo": {
            "name": "clone_repo",
            "location": 317,
            "return": [
                "str"
            ],
            "arguments": {
                "orig_repo": [
                    "str",
                    "Tuple[str, str]",
                    "List[str]"
                ],
                "clone_path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "mutable_repo": {
            "name": "mutable_repo",
            "location": 341,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "untagged_repo": [
                    "str"
                ],
                "tmpdir_factory": [
                    "str"
                ]
            }
        },
        "mutable_vtags_repo": {
            "name": "mutable_vtags_repo",
            "location": 347,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "vtags_repo": [
                    "str"
                ],
                "tmpdir_factory": [
                    "str"
                ]
            }
        },
        "mutable_pvtags_repo": {
            "name": "mutable_pvtags_repo",
            "location": 353,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "ok_repo": [
                    "str"
                ],
                "tmpdir_factory": [
                    "str"
                ]
            }
        },
        "_add_file_to_repo": {
            "name": "_add_file_to_repo",
            "location": 358,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fpath": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "make_setup_py_without_version": {
            "name": "make_setup_py_without_version",
            "location": 367,
            "return": [
                "str",
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "setup_dir": [
                    "str"
                ],
                "pname": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "make_setup_py": {
            "name": "make_setup_py",
            "location": 375,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "setup_dir": [
                    "str",
                    "Dict[str, Any]"
                ],
                "pname": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/tests/test_bumpcmd.py": {
        "set_homedir": {
            "name": "set_homedir",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "bool",
                    "float"
                ],
                "monkeypatch": [
                    "int",
                    "bytes",
                    "typing.Iterable[typing.Any]",
                    "Iterable[Any]",
                    "List[str]"
                ]
            }
        },
        "test_bump_cmd_bad": {
            "name": "test_bump_cmd_bad",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mutable_repo": [],
                "caplog": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "capsys": [
                    "int",
                    "str"
                ]
            }
        },
        "test_bump_cmd_mono_project": {
            "name": "test_bump_cmd_mono_project",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mutable_repo": [],
                "caplog": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "capsys": [
                    "int"
                ]
            }
        },
        "test_bump_cmd_monorepo": {
            "name": "test_bump_cmd_monorepo",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mutable_repo": [],
                "caplog": [
                    "str"
                ],
                "capsys": [
                    "int"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/tests/test_cli.py": {
        "test_all_cmds_help_smoketest": {
            "name": "test_all_cmds_help_smoketest",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cmd": [
                    "str"
                ]
            }
        },
        "test_all_cmds_help_version": {
            "name": "test_all_cmds_help_version",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cmd": [
                    "neuromation.cli.printer.StreamPrinter"
                ],
                "capsys": [
                    "int",
                    "BaseException"
                ]
            }
        },
        "test_config_cmd": {
            "name": "test_config_cmd",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "bool"
                ],
                "match": [
                    "Callable[[str], None]",
                    "str",
                    "typing.Callable[str, None]",
                    "Callable",
                    "list[]",
                    "Optional[List]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "illegal": [
                    "Callable[[str], None]",
                    "str",
                    "typing.Callable[str, None]",
                    "Callable",
                    "list[]",
                    "Optional[List]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_bootstrapp_projects_explicit": {
            "name": "test_bootstrapp_projects_explicit",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "no_repo": [],
                "empty_repo": [],
                "caplog": [
                    "bool",
                    "str",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "check_bootstrapp_projects_autodiscover": {
            "name": "check_bootstrapp_projects_autodiscover",
            "location": 174,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "myrepo": [
                    "bytes",
                    "int",
                    "bool"
                ],
                "caplog": [
                    "ContextManager"
                ],
                "vscheme": [
                    "Type",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "test_bootstrapp_projects_autodiscover_mono_project": {
            "name": "test_bootstrapp_projects_autodiscover_mono_project",
            "location": 231,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mutable_vtags_repo": [],
                "caplog": []
            }
        },
        "test_bootstrapp_projects_autodiscover_monorepo": {
            "name": "test_bootstrapp_projects_autodiscover_monorepo",
            "location": 239,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mutable_pvtags_repo": [],
                "caplog": []
            }
        },
        "test_init_cmd_mono_project": {
            "name": "test_init_cmd_mono_project",
            "location": 244,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mutable_vtags_repo": [
                    "str",
                    "slice"
                ],
                "caplog": [
                    "Type[Any]"
                ]
            }
        },
        "test_status_cmd_vtags": {
            "name": "test_status_cmd_vtags",
            "location": 324,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mutable_repo": [
                    "str"
                ],
                "caplog": [
                    "str"
                ],
                "capsys": [
                    "str",
                    "int",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "bool"
                ]
            }
        },
        "test_status_cmd_pvtags": {
            "name": "test_status_cmd_pvtags",
            "location": 399,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mutable_repo": [
                    "str"
                ],
                "caplog": [
                    "str"
                ],
                "capsys": [
                    "str",
                    "int",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "bool"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/tests/test_docs.py": {
        "test_README_as_PyPi_landing_page": {
            "name": "test_README_as_PyPi_landing_page",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/tests/test_engrave.py": {
        "posixize": {
            "name": "posixize",
            "location": 28,
            "return": [
                "list[]",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "paths": [
                    "dict[str, pathlib.Path]",
                    "str",
                    "tuple[typing.Union[str,...]]",
                    "pathlib.Path",
                    "Dict[str, pathlib.Path]",
                    "Optional[Tuple[str, ...]]"
                ]
            }
        },
        "test_prepare_glob_pairs": {
            "name": "test_prepare_glob_pairs",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "fileset_mutable": {
            "name": "fileset_mutable",
            "location": 64,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "pathlib.Path"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "bool",
                    "Dict[str, Any]",
                    "Set[str]",
                    "str"
                ],
                "fileset": [
                    "Optional[Union[int, Any]]",
                    "int",
                    "str",
                    "Optional[Union[str, Any]]",
                    "typing.Any",
                    "None"
                ],
                "orig_files": [
                    "bool",
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "test_glob": {
            "name": "test_glob",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "globs": [
                    "pathlib.Path",
                    "unittesmock.Mock"
                ],
                "fileset": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_glob_negatives": {
            "name": "test_glob_negatives",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "globs": [
                    "bytes",
                    "pathlib.Path",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "exp": [
                    "bytes",
                    "pathlib.Path",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "fileset": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_glob_mybase": {
            "name": "test_glob_mybase",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_glob_relative": {
            "name": "test_glob_relative",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fileset": [
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_glob_filter_out_other_bases": {
            "name": "test_glob_filter_out_other_bases",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fileset": [
                    "pathlib.Path",
                    "cli_ui.tests.MessageRecorder"
                ],
                "orig_files": [
                    "pathlib.Path",
                    "path.Path"
                ]
            }
        },
        "test_glob_otherbases": {
            "name": "test_glob_otherbases",
            "location": 120,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fileset": [
                    "cli_ui.tests.MessageRecorder"
                ],
                "orig_files": [
                    "pathlib.Path"
                ]
            }
        },
        "test_slices_to_ids": {
            "name": "test_slices_to_ids",
            "location": 144,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "slices": [],
                "listlen": [
                    "float",
                    "int"
                ],
                "exp": [
                    "int",
                    "list[]",
                    "float",
                    "list",
                    "str",
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "Tuple[float, float, float, float, float]",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_MatchSpec_slicing": {
            "name": "test_MatchSpec_slicing",
            "location": 153,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "slices": [
                    "int",
                    "float",
                    "Tuple[float, float, float, float, float]",
                    "str",
                    "tuple[typing.Union[float,float,float,float,float]]"
                ],
                "listlen": [
                    "float",
                    "str",
                    "int",
                    "typing.Iterable[int]",
                    "Iterable[int]",
                    "bool"
                ],
                "exp": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "pathlib.Path",
                    "tests.basilisp.helpers.CompileFn",
                    "Union[int, str]",
                    "Callable"
                ]
            }
        },
        "test_overlapped_matches": {
            "name": "test_overlapped_matches",
            "location": 163,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_scan": {
            "name": "test_scan",
            "location": 203,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fileset_mutable": [
                    "pathlib.Path",
                    "List[str]",
                    "str"
                ],
                "orig_files": [
                    "dict[, ]",
                    "mode.utils.Counter[faustypes.TP]",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[Dict]"
                ],
                "f1_graft": [
                    "Callable[[str], None]",
                    "int",
                    "typing.Callable[str, None]",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "f2_graft": [
                    "Callable[[str], None]",
                    "int",
                    "typing.Callable[str, None]",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "caplog": [
                    "bool",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "test_engrave": {
            "name": "test_engrave",
            "location": 225,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fileset_mutable": [
                    "pathlib.Path",
                    "List[str]",
                    "str"
                ],
                "ok_files": [
                    "dict[, ]",
                    "mode.utils.Counter[faustypes.TP]",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[Dict]"
                ],
                "f1_graft": [
                    "Callable[[str], None]",
                    "int",
                    "typing.Callable[str, None]",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "f2_graft": [
                    "Callable[[str], None]",
                    "int",
                    "typing.Callable[str, None]",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "caplog": [
                    "bool",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "test_engrave_duped_scans": {
            "name": "test_engrave_duped_scans",
            "location": 250,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fileset_mutable": [
                    "pathlib.Path",
                    "List[str]",
                    "str"
                ],
                "ok_files": [
                    "dict[, ]",
                    "mode.utils.Counter[faustypes.TP]",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[Dict]"
                ],
                "f1_graft": [
                    "bool"
                ],
                "f2_graft": [
                    "bool"
                ],
                "caplog": [
                    "bool",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "test_overlapped_matches.match": {
            "name": "match",
            "location": 166,
            "return": [
                "Mock",
                "str",
                "Optional[cmk.utils.type_defs.HostName]",
                "bool",
                "dict",
                "int"
            ],
            "arguments": {
                "span": [
                    "IO[str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/tests/test_logconfutils.py": {
        "test_notice_level": {
            "name": "test_notice_level",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "float"
                ]
            }
        },
        "test_count_multiflag_in_argv": {
            "name": "test_count_multiflag_in_argv",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "inp": [
                    "Sequence[Union[int, float]]",
                    "Iterable[Tuple[int, int]]"
                ],
                "exp_verbose": [],
                "exp_argv": [
                    "str"
                ]
            }
        },
        "test_log_level_from_argv_start_level": {
            "name": "test_log_level_from_argv_start_level",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_log_level_from_argv": {
            "name": "test_log_level_from_argv",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "inp": [],
                "exp_verbose": [],
                "_": []
            }
        },
        "test_log_level_from_argv.check": {
            "name": "check",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "start_level": [
                    "int"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/tests/test_polyvers.py": {
        "response": {
            "name": "response",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_content": {
            "name": "test_content",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "response": [
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/tests/test_pvtags.py": {
        "monorepocfg": {
            "name": "monorepocfg",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "project1": {
            "name": "project1",
            "location": 43,
            "return": [
                "Project",
                "dict",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "monorepocfg": [
                    "int",
                    "bool"
                ]
            }
        },
        "project2": {
            "name": "project2",
            "location": 48,
            "return": [
                "Project",
                "str",
                "bool",
                "int",
                "pricemonitor.config.Coin"
            ],
            "arguments": {}
        },
        "foo": {
            "name": "foo",
            "location": 61,
            "return": [
                "Project",
                "List[cmk.utils.type_defs.HostName]",
                "purplship.core.utils.xml.Element"
            ],
            "arguments": {
                "monorepocfg": [
                    "int",
                    "str",
                    "bool",
                    "tuple[str]",
                    "Tuple[str]"
                ]
            }
        },
        "test_Project_regex_check": {
            "name": "test_Project_regex_check",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_Project_version_from_pvtag": {
            "name": "test_Project_version_from_pvtag",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "foo": [
                    "int"
                ]
            }
        },
        "test_new_Project_raises_pvtags_unpopulated": {
            "name": "test_new_Project_raises_pvtags_unpopulated",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "project1": []
            }
        },
        "test_Project_defaults": {
            "name": "test_Project_defaults",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "monorepocfg": [
                    "backup.config.Config"
                ]
            }
        },
        "test_pvtag_Project_interpolations": {
            "name": "test_pvtag_Project_interpolations",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_vtag_Project_interpolations": {
            "name": "test_vtag_Project_interpolations",
            "location": 109,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_populate_pvtags_history_per_project": {
            "name": "test_populate_pvtags_history_per_project",
            "location": 121,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ok_repo": [],
                "project1": [
                    "str",
                    "int"
                ],
                "project2": [
                    "bob_emploi.frontend.api.project_pb2.Project"
                ],
                "foo": []
            }
        },
        "test_populate_pvtags_history_multi_projects": {
            "name": "test_populate_pvtags_history_multi_projects",
            "location": 146,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ok_repo": [],
                "project1": [],
                "project2": [],
                "foo": []
            }
        },
        "test_fetch_pvtags_history_no_tags": {
            "name": "test_fetch_pvtags_history_no_tags",
            "location": 156,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "untagged_repo": [
                    "Tuple[str, str]",
                    "str"
                ],
                "empty_repo": [
                    "Tuple[str, str]",
                    "str"
                ],
                "foo": [
                    "Tuple[str, str]",
                    "str",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "test_fetch_pvtags_history_BAD": {
            "name": "test_fetch_pvtags_history_BAD",
            "location": 168,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "no_repo": [],
                "foo": []
            }
        },
        "test_fetch_pvtags_history_git_not_in_path": {
            "name": "test_fetch_pvtags_history_git_not_in_path",
            "location": 177,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "foo": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "monkeypatch": [
                    "Callable"
                ]
            }
        },
        "test_project_matching_all_pvtags": {
            "name": "test_project_matching_all_pvtags",
            "location": 184,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ok_repo": [
                    "Callable"
                ],
                "project1": [
                    "str",
                    "Generator",
                    "typing.Generator[]"
                ]
            }
        },
        "test_simple_project": {
            "name": "test_simple_project",
            "location": 198,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mutable_pvtags_repo": [],
                "project2": [],
                "caplog": [
                    "str"
                ]
            }
        },
        "test_git_describe_ok": {
            "name": "test_git_describe_ok",
            "location": 229,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ok_repo": [],
                "project1": [
                    "models.Project",
                    "bytes"
                ],
                "project2": []
            }
        },
        "test_git_describe_bad": {
            "name": "test_git_describe_bad",
            "location": 245,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ok_repo": [],
                "no_repo": [],
                "foo": []
            }
        },
        "test_git_describe_mismatch_version": {
            "name": "test_git_describe_mismatch_version",
            "location": 257,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ok_repo": [],
                "project1": [
                    "models.Project"
                ]
            }
        },
        "test_git_describe_git_not_in_path": {
            "name": "test_git_describe_git_not_in_path",
            "location": 272,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "foo": [
                    "Callable"
                ],
                "monkeypatch": [
                    "Callable"
                ]
            }
        },
        "test_last_commit_tstamp_ok": {
            "name": "test_last_commit_tstamp_ok",
            "location": 283,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ok_repo": [],
                "today": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "project1": [
                    "cmk.utils.type_defs.ServiceName",
                    "mode.utils.types.trees.NodeT",
                    "Optional[List[Any]]",
                    "str",
                    "Optional[str]"
                ],
                "project2": [
                    "Iterable[Iterable[Any]]",
                    "typing.Iterable[typing.Iterable[typing.Any]]"
                ],
                "foo": [
                    "Iterable[Iterable[Any]]",
                    "typing.Iterable[typing.Iterable[typing.Any]]"
                ]
            }
        },
        "test_last_commit_tstamp_untagged": {
            "name": "test_last_commit_tstamp_untagged",
            "location": 293,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "untagged_repo": [],
                "today": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "foo": []
            }
        },
        "test_last_commit_tstamp_BAD": {
            "name": "test_last_commit_tstamp_BAD",
            "location": 300,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "empty_repo": [],
                "no_repo": [],
                "foo": []
            }
        },
        "test_last_commit_tstamp_BAD_no_git_cmd": {
            "name": "test_last_commit_tstamp_BAD_no_git_cmd",
            "location": 314,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "foo": [],
                "monkeypatch": []
            }
        },
        "test_git_restore_point": {
            "name": "test_git_restore_point",
            "location": 321,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mutable_repo": []
            }
        }
    },
    "polyvers-master/pvcmd/tests/test_vermath.py": {
        "_check_addition": {
            "name": "_check_addition",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "v1": [
                    "Dict[str, Any]",
                    "Iterable[bytes]"
                ],
                "v2": [
                    "Dict[str, Any]",
                    "Iterable[bytes]"
                ],
                "exp": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_errors": {
            "name": "test_errors",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "v1": [
                    "Callable",
                    "Sequence[Hashable]"
                ],
                "v2": [
                    "Callable",
                    "Sequence[Hashable]"
                ],
                "exp": [
                    "Callable",
                    "Sequence[Hashable]"
                ]
            }
        },
        "test_plus_versions": {
            "name": "test_plus_versions",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "v1": [
                    "int",
                    "Iterable"
                ],
                "v2": [
                    "int",
                    "Iterable"
                ],
                "exp": [
                    "int",
                    "Iterable"
                ]
            }
        },
        "test_caret_versions": {
            "name": "test_caret_versions",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "v1": [
                    "int",
                    "Iterable"
                ],
                "v2": [
                    "int",
                    "Iterable"
                ],
                "exp": [
                    "int",
                    "Iterable"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/tests/__init__.py": {},
    "polyvers-master/pvcmd/tests/cmdlet/test_autotrait.py": {
        "test_smoke": {
            "name": "test_smoke",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_simple_merge": {
            "name": "test_simple_merge",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cfg": [],
                "exp": [
                    "Optional[int]",
                    "int",
                    "Optional[List]",
                    "None",
                    "list[]"
                ]
            }
        },
        "test_recursive_merge": {
            "name": "test_recursive_merge",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_default_value": {
            "name": "test_default_value",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_dynamic_default": {
            "name": "test_dynamic_default",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_dynamic_default.A._get_i": {
            "name": "_get_i",
            "location": 121,
            "return": [
                "str",
                "dict",
                "Optional[Mapping[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "polyvers-master/pvcmd/tests/cmdlet/test_cfgcmd.py": {
        "test_infos_valid_yaml": {
            "name": "test_infos_valid_yaml",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_infos_smoketest": {
            "name": "test_infos_smoketest",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_show_smoketest": {
            "name": "test_show_smoketest",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "case": [],
                "nlines": [
                    "bool"
                ]
            }
        },
        "test_desc_smoketest": {
            "name": "test_desc_smoketest",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "case": [],
                "nlines": [
                    "bool"
                ]
            }
        },
        "test_all_cmds_help_smoketest": {
            "name": "test_all_cmds_help_smoketest",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cmd": [
                    "str"
                ]
            }
        },
        "test_all_cmds_help_version": {
            "name": "test_all_cmds_help_version",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cmd": []
            }
        }
    },
    "polyvers-master/pvcmd/tests/cmdlet/test_cmdlets.py": {
        "test_Replaceable": {
            "name": "test_Replaceable",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Replaceable_Configurable": {
            "name": "test_Replaceable_Configurable",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Printable_smoketest": {
            "name": "test_Printable_smoketest",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "check_select_traits": {
            "name": "check_select_traits",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "classprop": [
                    "int",
                    "float",
                    "bool"
                ],
                "C": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bool",
                    "str",
                    "List[int]"
                ],
                "D": [
                    "int",
                    "str",
                    "List[List[int]]"
                ],
                "c_ptraits": [
                    "Optional[float]",
                    "str",
                    "mode.utils.imports.SymbolArg[Type[mode.SupervisorStrategyT]]",
                    "Optional[str]",
                    "bool"
                ],
                "d_ptraits": [
                    "Optional[int]",
                    "bool",
                    "Optional[str]",
                    "Optional[List]",
                    "int",
                    "Optional[Callable]",
                    "Union[None, int]"
                ],
                "c_exp": [
                    "int",
                    "str",
                    "Optional[int]",
                    "bool",
                    "Optional[float]"
                ],
                "d_exp": [
                    "float",
                    "Optional[bool]",
                    "Optional[float]",
                    "Optional[\"ValidatorTypes\"]",
                    "Optional[str]",
                    "Optional[int]",
                    "bool"
                ],
                "append_tags": [
                    "int",
                    "bool",
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "test_TraitSelector_clsprop": {
            "name": "test_TraitSelector_clsprop",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "c_ptraits": [
                    "int",
                    "labm8.py.sqlutil.Database",
                    "bool",
                    "float"
                ],
                "d_ptraits": [
                    "int",
                    "labm8.py.sqlutil.Database",
                    "bool",
                    "float"
                ],
                "c_exp": [
                    "int",
                    "labm8.py.sqlutil.Database",
                    "bool",
                    "float"
                ],
                "d_exp": [
                    "int",
                    "labm8.py.sqlutil.Database",
                    "bool",
                    "float"
                ]
            }
        },
        "test_TraitSelector_clsprop_tags": {
            "name": "test_TraitSelector_clsprop_tags",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "c_ptraits": [
                    "int",
                    "bool",
                    "Tuple[int]",
                    "float",
                    "labm8.py.sqlutil.Database"
                ],
                "d_ptraits": [
                    "int",
                    "bool",
                    "Tuple[int]",
                    "float",
                    "labm8.py.sqlutil.Database"
                ],
                "c_exp": [
                    "int",
                    "bool",
                    "Tuple[int]",
                    "float",
                    "labm8.py.sqlutil.Database"
                ],
                "d_exp": [
                    "int",
                    "bool",
                    "Tuple[int]",
                    "float",
                    "labm8.py.sqlutil.Database"
                ]
            }
        },
        "test_TraitSelector_clsprop_tags_appended": {
            "name": "test_TraitSelector_clsprop_tags_appended",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "c_ptraits": [
                    "int",
                    "bool",
                    "float",
                    "labm8.py.sqlutil.Database",
                    "raiden.utils.Address"
                ],
                "d_ptraits": [
                    "int",
                    "bool",
                    "float",
                    "labm8.py.sqlutil.Database",
                    "raiden.utils.Address"
                ],
                "c_exp": [
                    "int",
                    "bool",
                    "float",
                    "labm8.py.sqlutil.Database",
                    "raiden.utils.Address"
                ],
                "d_exp": [
                    "int",
                    "bool",
                    "float",
                    "labm8.py.sqlutil.Database",
                    "raiden.utils.Address"
                ]
            }
        },
        "test_Forceable_is_forced": {
            "name": "test_Forceable_is_forced",
            "location": 281,
            "return": [
                ""
            ],
            "arguments": {
                "force": [
                    "int"
                ],
                "token": [
                    "str",
                    "bytes"
                ],
                "exp": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_errlog_thread_context": {
            "name": "test_errlog_thread_context",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "pathlib.Path",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.fixtures.cloud_uploader.Uploader"
                ]
            }
        },
        "test_CfgFilesRegistry_consolidate_posix_1": {
            "name": "test_CfgFilesRegistry_consolidate_posix_1",
            "location": 324,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_CfgFilesRegistry_consolidate_posix_2": {
            "name": "test_CfgFilesRegistry_consolidate_posix_2",
            "location": 345,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_CfgFilesRegistry_consolidate_win_1": {
            "name": "test_CfgFilesRegistry_consolidate_win_1",
            "location": 366,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_CfgFilesRegistry_consolidate_win_2": {
            "name": "test_CfgFilesRegistry_consolidate_win_2",
            "location": 387,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_CfgFilesRegistry": {
            "name": "test_CfgFilesRegistry",
            "location": 408,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "Callable"
                ]
            }
        },
        "test_no_default_config_paths": {
            "name": "test_no_default_config_paths",
            "location": 441,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "cli_ui.tests.MessageRecorder",
                    "Callable"
                ]
            }
        },
        "test_default_loaded_paths": {
            "name": "test_default_loaded_paths",
            "location": 454,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "Callable"
                ]
            }
        },
        "test_PathList_trait": {
            "name": "test_PathList_trait",
            "location": 471,
            "return": [
                ""
            ],
            "arguments": {
                "inp": [
                    "pathlib.Path"
                ],
                "exp": [
                    "int"
                ]
            }
        },
        "test_collect_static_fpaths": {
            "name": "test_collect_static_fpaths",
            "location": 522,
            "return": [
                ""
            ],
            "arguments": {
                "param": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "var": [
                    "str",
                    "bool"
                ],
                "exp": [
                    "pathlib.Path",
                    "Optional[str]",
                    "pathlib.PosixPath",
                    "pathlib2.Path"
                ],
                "tmpdir": []
            }
        },
        "test_help_smoketest": {
            "name": "test_help_smoketest",
            "location": 554,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_all_cmds_help_version": {
            "name": "test_all_cmds_help_version",
            "location": 571,
            "return": [
                ""
            ],
            "arguments": {
                "capsys": [
                    "int",
                    "Dict[scripts.node_integration_tests.playbooks.test_config_base.NodeId, pathlib.Path]",
                    "BaseException"
                ]
            }
        },
        "test_yaml_config": {
            "name": "test_yaml_config",
            "location": 591,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "tests.async_mock.Mock",
                    "cli_ui.tests.MessageRecorder",
                    "str"
                ]
            }
        },
        "test_Configurable_simple_yaml_generation": {
            "name": "test_Configurable_simple_yaml_generation",
            "location": 608,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Application_yaml_generation": {
            "name": "test_Application_yaml_generation",
            "location": 639,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Cmd_subcmd_configures_parents": {
            "name": "test_Cmd_subcmd_configures_parents",
            "location": 680,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "tests.basilisp.helpers.CompileFn",
                    "pathlib.Path"
                ]
            }
        },
        "check_select_traits.check": {
            "name": "check",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "type"
                ],
                "exp": [
                    "str"
                ]
            }
        },
        "test_errlog_thread_context.CountingErrLog.__enter__": {
            "name": "__enter__",
            "location": 297,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "polyvers-master/pvcmd/tests/cmdlet/test_errlog.py": {
        "forceable": {
            "name": "forceable",
            "location": 25,
            "return": [
                "Processor",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "logcollector": {
            "name": "logcollector",
            "location": 33,
            "return": [
                "Dict[str, Any]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {}
        },
        "test_ErrNode_str": {
            "name": "test_ErrNode_str",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fields": [
                    "str",
                    "type",
                    "typing.Type"
                ],
                "exp_str": [
                    "str"
                ],
                "exp_repr": [
                    "str"
                ]
            }
        },
        "test_ErrNode_tree_text": {
            "name": "test_ErrNode_tree_text",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fields": [
                    "int",
                    "str"
                ],
                "exp": [
                    "str",
                    "Container[int]",
                    "typing.Container"
                ]
            }
        },
        "test_ErrLog_str": {
            "name": "test_ErrLog_str",
            "location": 134,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "forceable": [
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_ErrLog_properties": {
            "name": "test_ErrLog_properties",
            "location": 160,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "forceable": [],
                "logcollector": [
                    "logging.Logger"
                ]
            }
        },
        "test_ErrLog_no_errors": {
            "name": "test_ErrLog_no_errors",
            "location": 199,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "caplog": [
                    "Iterable[Any]",
                    "str",
                    "Sequence[Any]",
                    "Callable"
                ],
                "forceable": [],
                "logcollector": [
                    "typing.Iterable[int]",
                    "Iterable[int]",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_ErrLog_root": {
            "name": "test_ErrLog_root",
            "location": 245,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "forceable": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "caplog": [
                    "str"
                ],
                "logcollector": [
                    "logging.Logger"
                ]
            }
        },
        "test_ErrLog_nested_all_captured_and_info": {
            "name": "test_ErrLog_nested_all_captured_and_info",
            "location": 272,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "caplog": [],
                "logcollector": [
                    "str",
                    "cli_ui.tests.MessageRecorder"
                ],
                "forceable": [
                    "str"
                ]
            }
        },
        "test_ErrLog_nested_reuse": {
            "name": "test_ErrLog_nested_reuse",
            "location": 307,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "caplog": [],
                "forceable": []
            }
        },
        "test_ErrLog_nested_warn_while_raising": {
            "name": "test_ErrLog_nested_warn_while_raising",
            "location": 321,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "caplog": [],
                "forceable": [
                    "str"
                ]
            }
        },
        "test_ErrLog_nested_forced": {
            "name": "test_ErrLog_nested_forced",
            "location": 342,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "forceable": [
                    "str",
                    "tests.e2e.Helper",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "caplog": [
                    "tests.basilisp.helpers.CompileFn",
                    "tests.setup.SetupTest"
                ]
            }
        },
        "test_ErrLog_decorator": {
            "name": "test_ErrLog_decorator",
            "location": 374,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "caplog": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "logcollector.log_collector": {
            "name": "log_collector",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "List[str]",
                    "int",
                    "Tuple[int, int]",
                    "Sequence[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_ErrLog_decorator.C.f_log": {
            "name": "f_log",
            "location": 377,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ErrLog_decorator.C.f_raise": {
            "name": "f_raise",
            "location": 382,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "polyvers-master/pvcmd/tests/cmdlet/test_interpctxt.py": {
        "test_dates_interpolation": {
            "name": "test_dates_interpolation",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_InterpolationContext": {
            "name": "test_InterpolationContext",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_interp_ikeys_key": {
            "name": "test_interp_ikeys_key",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_interp_temp_order": {
            "name": "test_interp_temp_order",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "maps": [
                    "int",
                    "Union[int, str]",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]"
                ],
                "kw": [
                    "Dict[str, Any]",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "exp": [
                    "str",
                    "float"
                ]
            }
        },
        "test_interp_temp_ikeys": {
            "name": "test_interp_temp_ikeys",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_interp_missing_ikeys": {
            "name": "test_interp_missing_ikeys",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_interp_on_objects": {
            "name": "test_interp_on_objects",
            "location": 135,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ikeys_key_on_objects": {
            "name": "test_ikeys_key_on_objects",
            "location": 166,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_dictize_object_pass_through_HasTraitObjectDict": {
            "name": "test_dictize_object_pass_through_HasTraitObjectDict",
            "location": 181,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_dictize_object_escape": {
            "name": "test_dictize_object_escape",
            "location": 194,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_interp_on_HasTraits_and_Spec": {
            "name": "test_interp_on_HasTraits_and_Spec",
            "location": 205,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ikeys_key_on_HasTraits": {
            "name": "test_ikeys_key_on_HasTraits",
            "location": 242,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_suppress_errors": {
            "name": "test_suppress_errors",
            "location": 276,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_interp_on_HasTraits_and_Spec.C._make_b": {
            "name": "_make_b",
            "location": 211,
            "return": [
                "int",
                "float",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "polyvers-master/pvcmd/tests/cmdlet/test_slicetrait.py": {
        "test_slice_parsing": {
            "name": "test_slice_parsing",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "inp": [],
                "exp": [
                    "str"
                ]
            }
        },
        "test_Slice_traitlet": {
            "name": "test_Slice_traitlet",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "inp": [
                    "bool",
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "exp": [
                    "str"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/tests/cmdlet/test_traitlets.py": {
        "recursed_trait": {
            "name": "recursed_trait",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "eventful_trait": {
            "name": "eventful_trait",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_recursed_traitlets_class_definition": {
            "name": "test_recursed_traitlets_class_definition",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "recursed_trait": [
                    "int"
                ]
            }
        },
        "test_recursed_traitlets_construct": {
            "name": "test_recursed_traitlets_construct",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "recursed_trait": [
                    "int",
                    "BaseException"
                ]
            }
        },
        "test_recursed_traitlets_assign": {
            "name": "test_recursed_traitlets_assign",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "recursed_trait": [
                    "int",
                    "BaseException"
                ]
            }
        },
        "test_recursed_traitlets_no_event": {
            "name": "test_recursed_traitlets_no_event",
            "location": 115,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "recursed_trait": [
                    "int"
                ]
            }
        },
        "test_recursed_traitlets_eventful": {
            "name": "test_recursed_traitlets_eventful",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "eventful_trait": [
                    "int",
                    "BaseException"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/tests/cmdlet/__init__.py": {},
    "polyvers-master/pvcmd/tests/utils/test_fileutil.py": {
        "test_ensure_ext": {
            "name": "test_ensure_ext",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "inp": [
                    "str",
                    "pathlib.Path"
                ],
                "exp": [
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "test_ensure_ext_regex": {
            "name": "test_ensure_ext_regex",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_git_repo": {
            "name": "test_git_repo",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ok_repo": [],
                "no_repo": []
            }
        },
        "test_is_base_or_same": {
            "name": "test_is_base_or_same",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fileset": [
                    "pathlib.Path",
                    "int",
                    "str"
                ],
                "basepath": [
                    "cmk.utils.type_defs.UserId",
                    "pathlib.Path"
                ],
                "longpath": [
                    "cmk.utils.type_defs.UserId",
                    "pathlib.Path"
                ],
                "exp": [
                    "str",
                    "cmk.utils.type_defs.UserId",
                    "pathlib.Path"
                ],
                "exp_strict": [
                    "cmk.utils.type_defs.UserId"
                ]
            }
        },
        "test_is_same_file": {
            "name": "test_is_same_file",
            "location": 115,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fileset": [
                    "bool",
                    "str",
                    "List[str]",
                    "Union[str, int]",
                    "int"
                ],
                "f1": [
                    "str",
                    "typing.Iterable[str]",
                    "typing.Callable[str, None]",
                    "pathlib.Path",
                    "pathlib.PosixPath",
                    "Iterable[str]",
                    "Callable[[str], None]"
                ],
                "f2": [
                    "str",
                    "typing.Iterable[str]",
                    "typing.Callable[str, None]",
                    "pathlib.Path",
                    "pathlib.PosixPath",
                    "Iterable[str]",
                    "Callable[[str], None]"
                ],
                "exp": [
                    "str",
                    "typing.Iterable[str]",
                    "typing.Callable[str, None]",
                    "pathlib.Path",
                    "pathlib.PosixPath",
                    "Iterable[str]",
                    "Callable[[str], None]"
                ]
            }
        }
    },
    "polyvers-master/pvcmd/tests/utils/test_oscmd.py": {
        "test_Cli_building": {
            "name": "test_Cli_building",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ok_repo": []
            }
        },
        "test_Cli_to_str": {
            "name": "test_Cli_to_str",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_Cmd_negate_single_letter": {
            "name": "test_Cmd_negate_single_letter",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_Cmd_no_stdout": {
            "name": "test_Cmd_no_stdout",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_cmd_exec": {
            "name": "test_cmd_exec",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ok_repo": []
            }
        }
    },
    "polyvers-master/pvcmd/tests/utils/test_yamlutil.py": {
        "test_yaml_dump": {
            "name": "test_yaml_dump",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "inp": [
                    "str",
                    "float"
                ],
                "exp": []
            }
        },
        "test_YAMLable": {
            "name": "test_YAMLable",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "polyvers-master/pvcmd/tests/utils/__init__.py": {},
    "polyvers-master/pvlib/setup.py": {
        "yield_rst_only_markup": {
            "name": "yield_rst_only_markup",
            "location": 15,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "lines": [
                    "list[typing.AnyStr]",
                    "str",
                    "List[AnyStr]",
                    "list[str]",
                    "List[str]",
                    "Iterable[str]",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "yield_rst_only_markup.clean_line": {
            "name": "clean_line",
            "location": 71,
            "return": [
                "Sequence[str]",
                "str",
                "Iterable[str]",
                "list",
                "Set[str]",
                "List[str]"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        }
    },
    "polyvers-master/pvlib/polyversion/setuplugin.py": {
        "_parse_kw_content": {
            "name": "_parse_kw_content",
            "location": 17,
            "return": [
                "int",
                "dict[typing.Any, list[str]]",
                "bool",
                "str",
                "dict[, ]",
                "dict[str, list[typing.Any]]",
                "Dict[str, int]",
                "dict[typing.Union[int,str,str,str,str,str,str,str,str,str,str,str,str,str,str], typing.Union[typing.Any,typing.Any]]"
            ],
            "arguments": {
                "attr": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[List[str]]",
                    "list[str]"
                ],
                "kw_value": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "_establish_setup_py_version": {
            "name": "_establish_setup_py_version",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "dist": [
                    "int",
                    "str",
                    "list",
                    "list[]"
                ],
                "basepath": [
                    "int",
                    "None",
                    "bytes",
                    "str",
                    "List[int]",
                    "List[str]",
                    "list[int]",
                    "list[str]"
                ]
            }
        },
        "init_plugin_kw": {
            "name": "init_plugin_kw",
            "location": 113,
            "return": [
                "None",
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "dist": [
                    "int",
                    "bool",
                    "typing.Callable[, ]",
                    "Callable",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "attr": [
                    "str",
                    "bool",
                    "Type[T]",
                    "typing.Type",
                    "List[object]",
                    "list[object]",
                    "Union[None, bool]",
                    "None"
                ],
                "kw_value": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "Union[None, bool]"
                ]
            }
        },
        "_monkeypathed_run_command": {
            "name": "_monkeypathed_run_command",
            "location": 170,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "dist": [
                    "str",
                    "List[str]",
                    "Hashable"
                ],
                "cmd": [
                    "str",
                    "Union[str, bytes]",
                    "bytes"
                ],
                "defver_envvar": [
                    "str",
                    "List[Exception]",
                    "list[Exception]",
                    "bool",
                    "Optional[List[Dict]]",
                    "list[dict[, ]]",
                    "None",
                    "Union[str, List]",
                    "Iterable[T]",
                    "list[]"
                ]
            }
        },
        "check_bdist_kw": {
            "name": "check_bdist_kw",
            "location": 229,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "dist": [
                    "bool",
                    "list[str]",
                    "None",
                    "Optional[List[str]]",
                    "int",
                    "Iterable[Any]",
                    "Iterable[float]",
                    "List[str]"
                ],
                "_attr": [
                    "str",
                    "bool",
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "None"
                ],
                "kw_value": [
                    "bool",
                    "list[str]",
                    "None",
                    "Optional[List[str]]",
                    "int",
                    "Iterable[Any]",
                    "Iterable[float]",
                    "List[str]"
                ]
            }
        },
        "_establish_setup_py_version.partialmethod.__get__": {
            "name": "__get__",
            "location": 99,
            "return": [
                "partialmethod",
                "str",
                "int",
                "bytes",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Callable",
                    "Optional[List[str]]",
                    "str",
                    "Optional[str]"
                ],
                "owner": [
                    "Type['Signature']",
                    "Type[Any]"
                ]
            }
        }
    },
    "polyvers-master/pvlib/polyversion/__init__.py": {
        "_clean_cmd_result": {
            "name": "_clean_cmd_result",
            "location": 81,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "res": [
                    "str",
                    "Callable[[None], bool]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "rfc2822_tstamp": {
            "name": "rfc2822_tstamp",
            "location": 91,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "nowdt": [
                    "None",
                    "Optional[List[str]]",
                    "bool",
                    "list[str]",
                    "float",
                    "Union[str, int]",
                    "str",
                    "Optional[datetime.tzinfo]",
                    "int"
                ]
            }
        },
        "_my_run": {
            "name": "_my_run",
            "location": 133,
            "return": [
                "dict",
                "Dict[str, float]",
                "Mapping[str, float]",
                "str",
                "Set[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "cwd": [
                    "typing.Text",
                    "str",
                    "Optional[Iterable[Any]]"
                ]
            }
        },
        "_parse_metadata": {
            "name": "_parse_metadata",
            "location": 156,
            "return": [
                "core_lib.core.parser.ParsingContext",
                "Tuple[Dict[str, str], List[str]]",
                "Parser",
                "list",
                "str"
            ],
            "arguments": {
                "fp": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "IO",
                    "typing.IO"
                ]
            }
        },
        "pkg_metadata_version": {
            "name": "pkg_metadata_version",
            "location": 163,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "Optional[bool]",
                "Optional[List[Any]]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "pname": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "basepath": [
                    "int",
                    "None",
                    "Optional[Union[float, str]]",
                    "str",
                    "Callable",
                    "float",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_caller_module_name": {
            "name": "_caller_module_name",
            "location": 225,
            "return": [
                "str"
            ],
            "arguments": {
                "nframes_back": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "Container[str]",
                    "bool"
                ]
            }
        },
        "_caller_basepath": {
            "name": "_caller_basepath",
            "location": 243,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "nframes_back": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "split_pvtag": {
            "name": "split_pvtag",
            "location": 260,
            "return": [
                "tuple[]",
                "dict",
                "bytes",
                "email.mime.multiparMIMEMultipart",
                "str"
            ],
            "arguments": {
                "pvtag": [
                    "str"
                ],
                "tag_regexes": [
                    "list",
                    "list[]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "_version_from_descid": {
            "name": "_version_from_descid",
            "location": 283,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "version": [
                    "float",
                    "int",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "descid": [
                    "float",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "_interp_fnmatch": {
            "name": "_interp_fnmatch",
            "location": 301,
            "return": [
                "str"
            ],
            "arguments": {
                "tag_format": [
                    "str",
                    "Optional[str]"
                ],
                "vprefix": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "pname": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_interp_regex": {
            "name": "_interp_regex",
            "location": 307,
            "return": [
                "str"
            ],
            "arguments": {
                "tag_regex": [
                    "str",
                    "Union[int, str]"
                ],
                "vprefix": [
                    "str",
                    "Union[int, str]",
                    "int"
                ],
                "pname": [
                    "str",
                    "Union[int, str]",
                    "int"
                ]
            }
        },
        "_git_version": {
            "name": "_git_version",
            "location": 312,
            "return": [
                "tuple[]",
                "bool",
                "int",
                "List[str]",
                "List['GridQubit']",
                "str"
            ],
            "arguments": {}
        },
        "_is_git_describe_accept_signle_pattern": {
            "name": "_is_git_describe_accept_signle_pattern",
            "location": 326,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "_git_describe": {
            "name": "_git_describe",
            "location": 331,
            "return": [
                "int",
                "str",
                "Callable",
                "list[typing.Union[typing.Any,typing.Any]]",
                "list[str]"
            ],
            "arguments": {
                "cmd": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "bool",
                    "Dict[str, str]"
                ],
                "tag_patterns": [
                    "str",
                    "bool"
                ],
                "basepath": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "_git_describe_parsed": {
            "name": "_git_describe_parsed",
            "location": 353,
            "return": [
                "int",
                "tuple[typing.Union[str,dict[, ],typing.Type,tuple[],list[str],list[],dict[str, str],dict[str, float],None,typing.Any,int]]"
            ],
            "arguments": {
                "pname": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "default_version": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[Any]",
                    "typing.Any",
                    "Optional[str]",
                    "None"
                ],
                "tag_format": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "tag_regex": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "vprefixes": [
                    "str",
                    "Union[str, int]",
                    "Optional[str]",
                    "Union[int, float]",
                    "bool"
                ],
                "basepath": [
                    "str",
                    "float",
                    "Iterable[str]",
                    "typing.Iterable[str]",
                    "Optional[str]",
                    "None"
                ],
                "git_options": [
                    "str"
                ]
            }
        },
        "decide_vprefixes": {
            "name": "decide_vprefixes",
            "location": 417,
            "return": [
                "tuple[typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "vprefixes": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[Any]",
                    "typing.Any",
                    "typing.Iterable[str]",
                    "Optional[Iterable[str]]",
                    "float",
                    "bool",
                    "List[List[Callable]]",
                    "subprocess.Popen",
                    "Optional[float]"
                ],
                "is_release": [
                    "bool",
                    "list[str]",
                    "List[str]",
                    "None",
                    "Optional[int]",
                    "str",
                    "Union[bool, Iterable[str]]",
                    "Optional[str]"
                ]
            }
        },
        "polyversion": {
            "name": "polyversion",
            "location": 432,
            "return": [
                "Optional[str]",
                "str",
                "tuple[typing.Union[None,tuple[typing.Union[typing.Literal,typing.Literal]],str]]",
                "tuple[typing.Union[typing.Literal,typing.Literal]]",
                "bool",
                "tuple[typing.Union[bytes,str,list[str],typing.Type,typing.Pattern,dict[str, int],set[str],tuple[typing.Union[typing.Literal,typing.Literal]],list[],int,dict[, ]]]"
            ],
            "arguments": {}
        },
        "polytime": {
            "name": "polytime",
            "location": 570,
            "return": [
                "int",
                "None",
                "Callable",
                "str",
                "list[]",
                "list[str]",
                "dict[str, typing.Any]"
            ],
            "arguments": {}
        },
        "_init_logging": {
            "name": "_init_logging",
            "location": 629,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 653,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MyCalledProcessError.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "returncode": [
                    "str",
                    "bool"
                ],
                "cmd": [
                    "str",
                    "bool"
                ],
                "output": [
                    "str",
                    "None",
                    "Callable",
                    "bool",
                    "io.TextIOBase",
                    "typing.Callable[, ]",
                    "Optional[float]",
                    "float"
                ],
                "stderr": [
                    "str",
                    "None",
                    "Optional[float]",
                    "hackathon.utils.utils.ResultsMessage",
                    "float"
                ],
                "cwd": [
                    "Iterable[float]",
                    "None",
                    "str",
                    "List[T]",
                    "int",
                    "typing.Iterable[float]"
                ]
            }
        },
        "MyCalledProcessError.__str__": {
            "name": "__str__",
            "location": 120,
            "return": [
                "str",
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "_git_version._int": {
            "name": "_int",
            "location": 313,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "polyvers-master/pvlib/polyversion/__main__.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "polyvers-master/pvlib/polyversion/tests/conftest.py": {
        "_exec_cmds": {
            "name": "_exec_cmds",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cmds": [
                    "str",
                    "bytes"
                ]
            }
        },
        "today": {
            "name": "today",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "ok_repo": {
            "name": "ok_repo",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "dict",
                    "List[str]"
                ]
            }
        },
        "vtags_repo": {
            "name": "vtags_repo",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "dict",
                    "List[str]"
                ]
            }
        },
        "rtagged_vtags_repo": {
            "name": "rtagged_vtags_repo",
            "location": 83,
            "return": [
                "bool",
                "str",
                "Callable",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "bool",
                    "str"
                ],
                "vtags_repo": [
                    "bool",
                    "str"
                ]
            }
        },
        "untagged_repo": {
            "name": "untagged_repo",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "dict",
                    "List[str]"
                ]
            }
        },
        "empty_repo": {
            "name": "empty_repo",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "dict",
                    "List[str]"
                ]
            }
        },
        "no_repo": {
            "name": "no_repo",
            "location": 124,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        }
    },
    "polyvers-master/pvlib/polyversion/tests/test_polyversion.py": {
        "test_split_pvtag_parsing": {
            "name": "test_split_pvtag_parsing",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "inp": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "exp": [
                    "str",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "test_fnmatch_format": {
            "name": "test_fnmatch_format",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "inp": [
                    "str",
                    "int",
                    "Dict[str, float]",
                    "dict[str, float]",
                    "list",
                    "list[]"
                ],
                "exp": [
                    "bool"
                ]
            }
        },
        "test_caller_fpath": {
            "name": "test_caller_fpath",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_caller_module": {
            "name": "test_caller_module",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_polyversion_p1": {
            "name": "test_polyversion_p1",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ok_repo": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "untagged_repo": [
                    "Optional[\"Game\"]",
                    "None",
                    "Optional[Callable]",
                    "typing.Callable[, ]"
                ],
                "no_repo": [
                    "Optional[\"Game\"]",
                    "None"
                ]
            }
        },
        "test_polyversion_p2": {
            "name": "test_polyversion_p2",
            "location": 106,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ok_repo": [
                    "str"
                ]
            }
        },
        "test_polyversion_vtags": {
            "name": "test_polyversion_vtags",
            "location": 119,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vtags_repo": [
                    "str"
                ]
            }
        },
        "test_polyversion_BAD_project": {
            "name": "test_polyversion_BAD_project",
            "location": 141,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ok_repo": [
                    "set",
                    "set[]"
                ]
            }
        },
        "test_polyversion_BAD_no_commits": {
            "name": "test_polyversion_BAD_no_commits",
            "location": 148,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "empty_repo": [
                    "set",
                    "str",
                    "set[]"
                ]
            }
        },
        "test_polyversion_BAD_env_var": {
            "name": "test_polyversion_BAD_env_var",
            "location": 155,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "no_repo": [
                    "Tuple[str, str]"
                ],
                "empty_repo": [
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]"
                ],
                "untagged_repo": [
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]"
                ],
                "monkeypatch": [
                    "Tuple[str, str]"
                ]
            }
        },
        "test_polyversion_BAD_custom_env_var": {
            "name": "test_polyversion_BAD_custom_env_var",
            "location": 170,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "no_repo": [],
                "empty_repo": [],
                "untagged_repo": [],
                "monkeypatch": []
            }
        },
        "test_polyversion_BAD_no_git_cmd": {
            "name": "test_polyversion_BAD_no_git_cmd",
            "location": 195,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ok_repo": [
                    "set",
                    "str",
                    "set[]"
                ],
                "monkeypatch": []
            }
        },
        "test_polytime_p1": {
            "name": "test_polytime_p1",
            "location": 204,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ok_repo": [],
                "untagged_repo": [],
                "no_repo": [
                    "str"
                ],
                "today": [
                    "str"
                ]
            }
        },
        "test_polytime_p2": {
            "name": "test_polytime_p2",
            "location": 227,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ok_repo": [
                    "str"
                ],
                "today": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "test_polytime_BAD_no_commits": {
            "name": "test_polytime_BAD_no_commits",
            "location": 232,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "empty_repo": []
            }
        },
        "test_polytime_BAD_no_git_cmd": {
            "name": "test_polytime_BAD_no_git_cmd",
            "location": 239,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ok_repo": [],
                "monkeypatch": [],
                "today": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "test_MAIN_polyversions": {
            "name": "test_MAIN_polyversions",
            "location": 252,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ok_repo": [],
                "untagged_repo": [],
                "no_repo": [],
                "capsys": [
                    "str",
                    "int",
                    "Callable[[str], bool]",
                    "Sequence[str]"
                ],
                "caplog": [
                    "str"
                ]
            }
        }
    },
    "polyvers-master/pvlib/polyversion/tests/test_setup_plugin.py": {
        "call_setup": {
            "name": "call_setup",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "pv": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "test_invalid_config": {
            "name": "test_invalid_config",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "kw": [],
                "exp": [
                    "str",
                    "bool",
                    "bytes",
                    "BinaryIO",
                    "typing.BinaryIO"
                ],
                "rtagged_vtags_repo": [],
                "monkeypatch": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_invalid_config_old_git": {
            "name": "test_invalid_config_old_git",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "kw": [],
                "rtagged_vtags_repo": [],
                "monkeypatch": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_build_on_release_check": {
            "name": "test_build_on_release_check",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cmd": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Iterable[int]",
                    "None",
                    "typing.Iterable[int]"
                ],
                "check_enabled": [
                    "bool",
                    "typing.Callable[, ]",
                    "int",
                    "Callable"
                ],
                "rtagged": [
                    "bool",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "ex": [
                    "str",
                    "int",
                    "bytes",
                    "Pattern[str]",
                    "typing.Pattern"
                ],
                "vtags_repo": [
                    "bool",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "rtagged_vtags_repo": [
                    "bool",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "monkeypatch": [
                    "bool",
                    "str",
                    "int"
                ],
                "capsys": [
                    "float",
                    "Optional[str]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "polyvers-master/pvlib/polyversion/tests/__init__.py": {}
}
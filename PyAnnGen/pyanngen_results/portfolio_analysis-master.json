{
    "portfolio_analysis-master/app/main.py": {
        "index": {
            "name": "index",
            "location": 24,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "accounts": {
            "name": "accounts",
            "location": 30,
            "return": [
                "dict",
                "flask.testing.FlaskClient",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "account": {
            "name": "account",
            "location": 35,
            "return": [
                "Mapping[str, Any]",
                "int",
                "Dict[str, str]",
                "Exception",
                "Optional[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "account_uuid": [
                    "List[Dict[str,Any]]",
                    "Dict",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "append_snapshot": {
            "name": "append_snapshot",
            "location": 41,
            "return": [
                "bool",
                "int",
                "dict",
                "Dict[str, Set[str]]",
                "bytes",
                "flask.Response"
            ],
            "arguments": {}
        },
        "update_frequency": {
            "name": "update_frequency",
            "location": 51,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "int",
                "Exception",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {}
        },
        "update_open_date": {
            "name": "update_open_date",
            "location": 60,
            "return": [
                "dict",
                "Dict[str, Tuple[Any, Any]]",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {}
        },
        "balance_sheet": {
            "name": "balance_sheet",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "balance_sheet_rows": {
            "name": "balance_sheet_rows",
            "location": 74,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "net_worth": {
            "name": "net_worth",
            "location": 78,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "net_worth_vs_time": {
            "name": "net_worth_vs_time",
            "location": 85,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {}
        }
    },
    "portfolio_analysis-master/app/__init__.py": {},
    "portfolio_analysis-master/form_formatter/append_snapshot_formatter.py": {
        "AppendSnapshotFormatter.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timestamp_generator": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "AppendSnapshotFormatter.format": {
            "name": "format",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "form_data": [
                    "Dict",
                    "str",
                    "Dict[str,str]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "List[List[str]]",
                    "None",
                    "List[list[str]]"
                ]
            }
        },
        "AppendSnapshotFormatter.__format_value": {
            "name": "__format_value",
            "location": 12,
            "return": [
                "dict",
                "str",
                "bool",
                "Optional[Dict[str, Any]]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "form_data": [
                    "Sequence",
                    "Dict[str, str]",
                    "str",
                    "T",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "AppendSnapshotFormatter.__format_timestamp": {
            "name": "__format_timestamp",
            "location": 19,
            "return": [
                "bytes",
                "Dict",
                "Optional[float]",
                "bool",
                "str",
                "IO[bytes]"
            ],
            "arguments": {
                "self": [],
                "form_data": [
                    "bytes",
                    "Dict",
                    "Optional[Exception]"
                ]
            }
        }
    },
    "portfolio_analysis-master/form_formatter/form_formatter.py": {
        "compose": {
            "name": "compose",
            "location": 6,
            "return": [
                "int",
                "str",
                "Dict[str, int]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "format_frequency": {
            "name": "format_frequency",
            "location": 10,
            "return": [
                "Optional[float]",
                "bool",
                "dict",
                "str",
                "IO[bytes]"
            ],
            "arguments": {
                "form_data": [
                    "str",
                    "List[Dict[str, Any]]",
                    "dict",
                    "List[int]",
                    "Tuple[int, str, bytearray]"
                ]
            }
        },
        "format_account_type": {
            "name": "format_account_type",
            "location": 15,
            "return": [
                "bool",
                "Mapping",
                "Dict[str, Any]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "form_data": [
                    "str",
                    "Exception",
                    "Type",
                    "dict"
                ]
            }
        }
    },
    "portfolio_analysis-master/form_formatter/update_frequency_formatter.py": {
        "UpdateFrequencyFormatter.format": {
            "name": "format",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "form_data": [
                    "Dict",
                    "str",
                    "Dict[str,str]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "List[List[str]]",
                    "None",
                    "List[list[str]]"
                ]
            }
        }
    },
    "portfolio_analysis-master/form_formatter/update_open_date_formatter.py": {
        "UpdateOpenDateFormatter.format": {
            "name": "format",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "form_data": [
                    "Dict[str,Any]",
                    "str",
                    "List",
                    "Dict[str,str]",
                    "Dict"
                ]
            }
        }
    },
    "portfolio_analysis-master/form_formatter/__init__.py": {},
    "portfolio_analysis-master/portfolio/account.py": {
        "Account.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "Dict",
                    "Dict[str,str]",
                    "Dict[str,dict[str,Any]]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,str]]",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "Account.name": {
            "name": "name",
            "location": 22,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.owner": {
            "name": "owner",
            "location": 25,
            "return": [
                "bytes",
                "str",
                "Sequence[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.investment": {
            "name": "investment",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.institution": {
            "name": "institution",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.account_type": {
            "name": "account_type",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.update_frequency": {
            "name": "update_frequency",
            "location": 37,
            "return": [
                "int",
                "str",
                "Optional[bool]",
                "Dict[str,Dict[str,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.asset_class": {
            "name": "asset_class",
            "location": 40,
            "return": [
                "bool",
                "bytes",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.term": {
            "name": "term",
            "location": 43,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.open_date": {
            "name": "open_date",
            "location": 46,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.uuid": {
            "name": "uuid",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.value": {
            "name": "value",
            "location": 52,
            "return": [
                "int",
                "Dict[str, Any]",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "query_time": [
                    "str",
                    "int",
                    "None",
                    "float"
                ]
            }
        },
        "Account.import_snapshot": {
            "name": "import_snapshot",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "str",
                    "T",
                    "float",
                    "List",
                    "int"
                ],
                "value": [
                    "str",
                    "T",
                    "float",
                    "List",
                    "int"
                ]
            }
        },
        "Account.last_updated": {
            "name": "last_updated",
            "location": 59,
            "return": [
                "bool",
                "int",
                "Dict[str, int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.is_identical_to": {
            "name": "is_identical_to",
            "location": 62,
            "return": [
                "bool",
                "Mapping[str,Any]",
                "Union[type,Tuple[type,...]]",
                "Optional[Match]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "portfolio_analysis-master/portfolio/account_builder.py": {
        "AccountBuilder.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountBuilder.build": {
            "name": "build",
            "location": 12,
            "return": [
                "portfolio.account.Account"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountBuilder.set_name": {
            "name": "set_name",
            "location": 24,
            "return": [
                "AccountBuilder"
            ],
            "arguments": {
                "self": [
                    "_TAccountBuilder@@AccountBuilder@@"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "AccountBuilder.set_owner": {
            "name": "set_owner",
            "location": 28,
            "return": [
                "AccountBuilder"
            ],
            "arguments": {
                "self": [
                    "_TAccountBuilder@@AccountBuilder@@"
                ],
                "owner": [
                    "str",
                    "int",
                    "float",
                    "Tuple[str,str,int,int]",
                    "Tuple[Union[str,str,int,int]]"
                ]
            }
        },
        "AccountBuilder.set_investment": {
            "name": "set_investment",
            "location": 32,
            "return": [
                "AccountBuilder"
            ],
            "arguments": {
                "self": [
                    "_TAccountBuilder@@AccountBuilder@@"
                ],
                "investment": [
                    "bool",
                    "float"
                ]
            }
        },
        "AccountBuilder.set_institution": {
            "name": "set_institution",
            "location": 36,
            "return": [
                "AccountBuilder"
            ],
            "arguments": {
                "self": [
                    "_TAccountBuilder@@AccountBuilder@@"
                ],
                "institution": [
                    "bool",
                    "float"
                ]
            }
        },
        "AccountBuilder.set_liability": {
            "name": "set_liability",
            "location": 40,
            "return": [
                "AccountBuilder"
            ],
            "arguments": {
                "self": [
                    "_TAccountBuilder@@AccountBuilder@@"
                ]
            }
        },
        "AccountBuilder.set_asset": {
            "name": "set_asset",
            "location": 45,
            "return": [
                "AccountBuilder"
            ],
            "arguments": {
                "self": [
                    "_TAccountBuilder@@AccountBuilder@@"
                ]
            }
        },
        "AccountBuilder.set_asset_class": {
            "name": "set_asset_class",
            "location": 49,
            "return": [
                "AccountBuilder"
            ],
            "arguments": {
                "self": [
                    "_TAccountBuilder@@AccountBuilder@@"
                ],
                "asset_class": [
                    "Type",
                    "Dict",
                    "Sequence",
                    "bool"
                ]
            }
        },
        "AccountBuilder.set_account_type": {
            "name": "set_account_type",
            "location": 53,
            "return": [
                "AccountBuilder"
            ],
            "arguments": {
                "self": [
                    "_TAccountBuilder@@AccountBuilder@@"
                ],
                "account_type": [
                    "str",
                    "bool"
                ]
            }
        },
        "AccountBuilder.set_update_frequency": {
            "name": "set_update_frequency",
            "location": 60,
            "return": [
                "AccountBuilder"
            ],
            "arguments": {
                "self": [
                    "_TAccountBuilder@@AccountBuilder@@"
                ],
                "update_frequency": [
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "Tuple"
                ]
            }
        },
        "AccountBuilder.set_open_date": {
            "name": "set_open_date",
            "location": 64,
            "return": [
                "AccountBuilder"
            ],
            "arguments": {
                "self": [
                    "_TAccountBuilder@@AccountBuilder@@"
                ],
                "open_date": [
                    "str"
                ]
            }
        },
        "AccountBuilder.set_term": {
            "name": "set_term",
            "location": 68,
            "return": [
                "AccountBuilder"
            ],
            "arguments": {
                "self": [
                    "_TAccountBuilder@@AccountBuilder@@"
                ],
                "term": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "portfolio_analysis-master/portfolio/invalid_account_exception.py": {},
    "portfolio_analysis-master/portfolio/portfolio.py": {
        "Portfolio.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Portfolio.assets": {
            "name": "assets",
            "location": 15,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Portfolio.outdated_assets": {
            "name": "outdated_assets",
            "location": 18,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Portfolio.liabilities": {
            "name": "liabilities",
            "location": 21,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Portfolio.outdated_liabilities": {
            "name": "outdated_liabilities",
            "location": 24,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Portfolio.import_data": {
            "name": "import_data",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "Dict[int,dict]",
                    "Optional[dict]",
                    "Dict[int,Dict]"
                ]
            }
        },
        "Portfolio.import_account": {
            "name": "import_account",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "Dict",
                    "bytes",
                    "int"
                ]
            }
        },
        "Portfolio.percentages": {
            "name": "percentages",
            "location": 47,
            "return": [
                "collections.defaultdict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Portfolio.asset_classes": {
            "name": "asset_classes",
            "location": 54,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Portfolio.total_value": {
            "name": "total_value",
            "location": 62,
            "return": [
                "int",
                "Union[str, int]"
            ],
            "arguments": {
                "self": [],
                "date": [
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "Portfolio.assets_value": {
            "name": "assets_value",
            "location": 65,
            "return": [
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "date": [
                    "List",
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "Portfolio.liabilities_value": {
            "name": "liabilities_value",
            "location": 68,
            "return": [
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "date": [
                    "List",
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "Portfolio.liabilities_without_mortgage": {
            "name": "liabilities_without_mortgage",
            "location": 71,
            "return": [
                "bool",
                "int",
                "Optional[List[int]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "date": [
                    "List",
                    "None",
                    "str",
                    "T"
                ]
            }
        },
        "Portfolio.institutions": {
            "name": "institutions",
            "location": 78,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Portfolio.__outdated_account": {
            "name": "__outdated_account",
            "location": 81,
            "return": [
                "List[Union[dict[str,Any],str]]",
                "str",
                "Dict[str,Any]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "accounts": [
                    "List[dict[str,Any]]",
                    "List[str]",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Counter"
                ]
            }
        },
        "Portfolio.__value_of": {
            "name": "__value_of",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "accounts": [
                    "str"
                ],
                "date": [
                    "str",
                    "None"
                ]
            }
        },
        "Portfolio.__normalize_output": {
            "name": "__normalize_output",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "T",
                    "Sequence[Dict[str, Any]]",
                    "bool",
                    "str",
                    "Optional[List[Any]]",
                    "bytes",
                    "MutableMapping[Any, Any]",
                    "Optional[List]"
                ]
            }
        },
        "Portfolio.__create_or_update": {
            "name": "__create_or_update",
            "location": 100,
            "return": [
                "None",
                "int",
                "str",
                "T"
            ],
            "arguments": {
                "self": [],
                "date": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "bool"
                ],
                "account": [
                    "Optional[Callable]",
                    "Callable",
                    "Dict[str,str]",
                    "Dict",
                    "str",
                    "None"
                ]
            }
        }
    },
    "portfolio_analysis-master/portfolio/snapshot.py": {
        "Snapshot.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "List[Tuple[int,float]]",
                    "int",
                    "List[tuple[Union[int,float]]]",
                    "float",
                    "str"
                ],
                "value": [
                    "float",
                    "str",
                    "int",
                    "Callable[[None],bool]",
                    "Callable[None,bool]"
                ]
            }
        }
    },
    "portfolio_analysis-master/portfolio/snapshot_history.py": {
        "SnapshotHistory.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnapshotHistory.import_snapshot": {
            "name": "import_snapshot",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "snapshot": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "SnapshotHistory.all": {
            "name": "all",
            "location": 12,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnapshotHistory.value": {
            "name": "value",
            "location": 15,
            "return": [
                "int",
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "query_time": [
                    "Optional[float]",
                    "None",
                    "str",
                    "Optional[int]",
                    "float",
                    "int"
                ]
            }
        },
        "SnapshotHistory.last_updated": {
            "name": "last_updated",
            "location": 22,
            "return": [
                "dict",
                "str",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnapshotHistory.__find_value": {
            "name": "__find_value",
            "location": 26,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "query_time": [
                    "str",
                    "bool",
                    "float",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "int"
                ]
            }
        }
    },
    "portfolio_analysis-master/portfolio/__init__.py": {},
    "portfolio_analysis-master/portfolio_analysis/portfolio_analyzer.py": {
        "PortfolioAnalyzer.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "portfolio": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "PortfolioAnalyzer.debt_to_equity": {
            "name": "debt_to_equity",
            "location": 9,
            "return": [
                "str",
                "float",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "date": [
                    "None"
                ]
            }
        }
    },
    "portfolio_analysis-master/portfolio_analysis/__init__.py": {},
    "portfolio_analysis-master/portfolio_creator/data_source.py": {
        "DataSource.get": {
            "name": "get",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio_analysis-master/portfolio_creator/portfolio_creator.py": {
        "PortfolioCreator.create": {
            "name": "create",
            "location": 7,
            "return": [
                "portfolio.portfolio.Portfolio"
            ],
            "arguments": {
                "self": [],
                "data_source": [
                    "Dict[str,Any]",
                    "str",
                    "bytes"
                ]
            }
        },
        "PortfolioCreator.__account_type": {
            "name": "__account_type",
            "location": 25,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "List[tuple[Union[str,str]]]",
                    "List[Tuple[str,str]]",
                    "Optional[Dict[str,Any]]",
                    "Callable",
                    "Dict[str,Tuple[str,str]]"
                ]
            }
        },
        "PortfolioCreator.__value": {
            "name": "__value",
            "location": 28,
            "return": [
                "float",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "List[str]",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "PortfolioCreator.__asset_class": {
            "name": "__asset_class",
            "location": 31,
            "return": [
                "str",
                "Optional[str]",
                "Set",
                "Tuple[List[str],Optional[str]]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "Dict",
                    "Dict[str,Union[str,Set]]",
                    "Dict[str,Union[str,set]]"
                ]
            }
        },
        "PortfolioCreator.__term": {
            "name": "__term",
            "location": 34,
            "return": [
                "Text",
                "str",
                "Optional[int]",
                "Optional[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "Dict",
                    "Dict[str,str]",
                    "bytes",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Callable]"
                ]
            }
        }
    },
    "portfolio_analysis-master/portfolio_creator/__init__.py": {},
    "portfolio_analysis-master/report/balance_sheet.py": {
        "BalanceSheet.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "portfolio": [
                    "Portfolio",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BalanceSheet.json": {
            "name": "json",
            "location": 11,
            "return": [
                "Dict[(str, List[Dict[(str, Any)]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BalanceSheet.create": {
            "name": "create",
            "location": 20,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BalanceSheet.row": {
            "name": "row",
            "location": 30,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "bool",
                    "int"
                ]
            }
        },
        "BalanceSheet.json_object": {
            "name": "json_object",
            "location": 34,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "portfolio_analysis-master/report/line_graph.py": {
        "LineGraph.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "portfolio": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "LineGraph.net_worth_vs_time": {
            "name": "net_worth_vs_time",
            "location": 11,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "start_date": [
                    "str",
                    "datetime.datetime",
                    "None",
                    "datetime.date",
                    "Optional[str]"
                ],
                "end_date": [
                    "str",
                    "datetime.datetime",
                    "None",
                    "datetime.date",
                    "Optional[str]"
                ]
            }
        }
    },
    "portfolio_analysis-master/report/__init__.py": {},
    "portfolio_analysis-master/scripts/calculate_percentages.py": {},
    "portfolio_analysis-master/scripts/plot_asset_classes.py": {},
    "portfolio_analysis-master/scripts/plot_asset_worth_vs_time.py": {},
    "portfolio_analysis-master/scripts/plot_debt_to_equity_vs_time.py": {},
    "portfolio_analysis-master/scripts/plot_debt_vs_time.py": {},
    "portfolio_analysis-master/scripts/plot_net_worth_vs_time.py": {},
    "portfolio_analysis-master/scripts/run_mypy.py": {
        "divider": {
            "name": "divider",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "file_needs_to_be_checked": {
            "name": "file_needs_to_be_checked",
            "location": 9,
            "return": [
                "bool",
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "file": [
                    "str"
                ]
            }
        },
        "mypy": {
            "name": "mypy",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        }
    },
    "portfolio_analysis-master/scripts/__init__.py": {},
    "portfolio_analysis-master/tests/__init__.py": {},
    "portfolio_analysis-master/tests/form_formatter/test_append_snapshot_formatter.py": {
        "MockTimestampCreator.epoch_to_date": {
            "name": "epoch_to_date",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormFormatterTestCase.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormFormatterTestCase.test_does_not_change_a_properly_formatted_input": {
            "name": "test_does_not_change_a_properly_formatted_input",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormFormatterTestCase.test_it_converts_the_value_to_an_int": {
            "name": "test_it_converts_the_value_to_an_int",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormFormatterTestCase.test_it_converts_a_floating_point_value_to_an_int": {
            "name": "test_it_converts_a_floating_point_value_to_an_int",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormFormatterTestCase.test_it_sets_an_asset_value_to_true": {
            "name": "test_it_sets_an_asset_value_to_true",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormFormatterTestCase.test_it_sets_an_asset_value_to_false": {
            "name": "test_it_sets_an_asset_value_to_false",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormFormatterTestCase.test_it_adds_a_timestamp_to_the_data_if_one_is_missing": {
            "name": "test_it_adds_a_timestamp_to_the_data_if_one_is_missing",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio_analysis-master/tests/form_formatter/test_form_formatter.py": {
        "f": {
            "name": "f",
            "location": 6,
            "return": [
                "float",
                "int",
                "str",
                "T"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "List[T]",
                    "Tuple[int]"
                ]
            }
        },
        "g": {
            "name": "g",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "y": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "h": {
            "name": "h",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "z": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "UpdateFrequencyFormatterTestCase.test_it_does_not_change_the_output_of_one_function": {
            "name": "test_it_does_not_change_the_output_of_one_function",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateFrequencyFormatterTestCase.test_it_composes_two_functions": {
            "name": "test_it_composes_two_functions",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateFrequencyFormatterTestCase.test_it_composes_three_functions": {
            "name": "test_it_composes_three_functions",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateFrequencyFormatterTestCase.test_it_does_not_change_a_frequency_that_is_an_integer": {
            "name": "test_it_does_not_change_a_frequency_that_is_an_integer",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateFrequencyFormatterTestCase.test_it_converts_the_frequency_from_a_string_to_an_integer": {
            "name": "test_it_converts_the_frequency_from_a_string_to_an_integer",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateFrequencyFormatterTestCase.test_it_converts_a_floating_point_value_to_an_int": {
            "name": "test_it_converts_a_floating_point_value_to_an_int",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateFrequencyFormatterTestCase.test_it_sets_asset_to_true": {
            "name": "test_it_sets_asset_to_true",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateFrequencyFormatterTestCase.test_it_sets_asset_to_false": {
            "name": "test_it_sets_asset_to_false",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateFrequencyFormatterTestCase.test_it_does_not_change_asset_if_it_is_already_a_boolean": {
            "name": "test_it_does_not_change_asset_if_it_is_already_a_boolean",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio_analysis-master/tests/form_formatter/test_update_frequency_formatter.py": {
        "UpdateFrequencyFormatterTestCase.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateFrequencyFormatterTestCase.test_does_not_change_a_properly_formatted_input": {
            "name": "test_does_not_change_a_properly_formatted_input",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateFrequencyFormatterTestCase.test_it_converts_the_frequency_to_an_int": {
            "name": "test_it_converts_the_frequency_to_an_int",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateFrequencyFormatterTestCase.test_it_converts_a_floating_point_value_to_an_int": {
            "name": "test_it_converts_a_floating_point_value_to_an_int",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateFrequencyFormatterTestCase.test_it_sets_an_asset_value_to_true": {
            "name": "test_it_sets_an_asset_value_to_true",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateFrequencyFormatterTestCase.test_it_sets_an_asset_value_to_false": {
            "name": "test_it_sets_an_asset_value_to_false",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio_analysis-master/tests/form_formatter/test_update_open_date_formatter.py": {
        "UpdateOpenDateFormatterTestCase.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateOpenDateFormatterTestCase.test_it_formats_an_input": {
            "name": "test_it_formats_an_input",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio_analysis-master/tests/form_formatter/__init__.py": {},
    "portfolio_analysis-master/tests/portfolio/test_account.py": {
        "AssetTestCase.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_has_a_name": {
            "name": "test_it_has_a_name",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_has_an_owner": {
            "name": "test_it_has_an_owner",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_has_a_investment": {
            "name": "test_it_has_a_investment",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_has_an_asset_class": {
            "name": "test_it_has_an_asset_class",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_has_a_suggested_frequency_of_updates_in_days": {
            "name": "test_it_has_a_suggested_frequency_of_updates_in_days",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_has_a_default_frequency_of_one_week": {
            "name": "test_it_has_a_default_frequency_of_one_week",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_throws_an_exception_if_a_random_string_is_passed_in_for_account_type": {
            "name": "test_it_throws_an_exception_if_a_random_string_is_passed_in_for_account_type",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_has_an_institution": {
            "name": "test_it_has_an_institution",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_has_an_account_type": {
            "name": "test_it_has_an_account_type",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_has_a_default_open_date_of_None": {
            "name": "test_it_has_a_default_open_date_of_None",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_has_an_open_date": {
            "name": "test_it_has_an_open_date",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_has_a_uuid": {
            "name": "test_it_has_a_uuid",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_creates_a_uuid_when_none_are_passed_in": {
            "name": "test_it_creates_a_uuid_when_none_are_passed_in",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_creates_a_unique_uuid": {
            "name": "test_it_creates_a_unique_uuid",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_the_uuid_is_a_string": {
            "name": "test_the_uuid_is_a_string",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_has_a_default_term": {
            "name": "test_it_has_a_default_term",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_can_have_a_term_of_short": {
            "name": "test_it_can_have_a_term_of_short",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_can_have_a_term_of_medium": {
            "name": "test_it_can_have_a_term_of_medium",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_can_have_a_term_of_long": {
            "name": "test_it_can_have_a_term_of_long",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_throws_an_exception_if_a_string_is_passed_in_for_an_account_type": {
            "name": "test_it_throws_an_exception_if_a_string_is_passed_in_for_an_account_type",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_has_a_value_of_zero_if_there_are_no_snapshots": {
            "name": "test_it_has_a_value_of_zero_if_there_are_no_snapshots",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_returns_an_value_of_zero_when_queried_before_a_snapshot": {
            "name": "test_it_returns_an_value_of_zero_when_queried_before_a_snapshot",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_returns_the_correct_value_when_queried_after_a_snapshot": {
            "name": "test_it_returns_the_correct_value_when_queried_after_a_snapshot",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_returns_the_correct_value_when_queried_in_between_two_snapshots": {
            "name": "test_it_returns_the_correct_value_when_queried_in_between_two_snapshots",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_the_value_of_the_account_changes_on_the_day_a_snapshot_is_recorded": {
            "name": "test_the_value_of_the_account_changes_on_the_day_a_snapshot_is_recorded",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_the_order_in_which_snapshots_are_imported_makes_no_difference": {
            "name": "test_the_order_in_which_snapshots_are_imported_makes_no_difference",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_defaults_to_the_current_time_if_no_argument_is_given": {
            "name": "test_it_defaults_to_the_current_time_if_no_argument_is_given",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_returns_the_latest_timestamp": {
            "name": "test_it_returns_the_latest_timestamp",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_an_account_is_identical_to_itself": {
            "name": "test_an_account_is_identical_to_itself",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_an_account_is_not_identical_to_one_with_a_different_name": {
            "name": "test_an_account_is_not_identical_to_one_with_a_different_name",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_an_account_is_not_identical_to_one_with_a_different_owner": {
            "name": "test_an_account_is_not_identical_to_one_with_a_different_owner",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_an_account_is_not_identical_to_one_with_a_different_investment": {
            "name": "test_an_account_is_not_identical_to_one_with_a_different_investment",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_an_account_is_not_identical_to_one_with_a_different_asset_class": {
            "name": "test_an_account_is_not_identical_to_one_with_a_different_asset_class",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_an_account_is_not_identical_to_one_with_a_different_institution": {
            "name": "test_an_account_is_not_identical_to_one_with_a_different_institution",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_an_account_is_not_identical_to_one_with_a_different_account_type": {
            "name": "test_an_account_is_not_identical_to_one_with_a_different_account_type",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_an_account_is_identical_to_one_with_a_different_update_frequency": {
            "name": "test_an_account_is_identical_to_one_with_a_different_update_frequency",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_an_account_is_not_identical_to_one_with_a_different_open_date": {
            "name": "test_an_account_is_not_identical_to_one_with_a_different_open_date",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_an_account_is_not_identical_to_one_with_a_different_term": {
            "name": "test_an_account_is_not_identical_to_one_with_a_different_term",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio_analysis-master/tests/portfolio/test_account_builder.py": {
        "AssetTestCase.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_builds_an_account_with_defaults": {
            "name": "test_it_builds_an_account_with_defaults",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_sets_an_account_as_a_liability_and_updates_the_asset_class": {
            "name": "test_it_sets_an_account_as_a_liability_and_updates_the_asset_class",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_sets_an_account_as_a_liability_by_passing_in_the_account_type": {
            "name": "test_it_sets_an_account_as_a_liability_by_passing_in_the_account_type",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_sets_an_account_as_an_asset": {
            "name": "test_it_sets_an_account_as_an_asset",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_sets_the_asset_class_of_an_account": {
            "name": "test_it_sets_the_asset_class_of_an_account",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_sets_the_update_frequency_of_an_account": {
            "name": "test_it_sets_the_update_frequency_of_an_account",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_sets_the_open_date": {
            "name": "test_it_sets_the_open_date",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_it_sets_the_term": {
            "name": "test_it_sets_the_term",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_the_account_name_is_required": {
            "name": "test_the_account_name_is_required",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_the_account_owner_is_required": {
            "name": "test_the_account_owner_is_required",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_the_account_investment_is_required": {
            "name": "test_the_account_investment_is_required",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetTestCase.test_the_account_institution_is_required": {
            "name": "test_the_account_institution_is_required",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio_analysis-master/tests/portfolio/test_portfolio.py": {
        "PortfolioTestCase.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_starts_off_with_no_assets_or_liabilities": {
            "name": "test_it_starts_off_with_no_assets_or_liabilities",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_starts_off_no_percentages": {
            "name": "test_it_starts_off_no_percentages",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_imports_asset_data_for_a_new_asset": {
            "name": "test_it_imports_asset_data_for_a_new_asset",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_imports_liability_data_for_a_new_liability": {
            "name": "test_it_imports_liability_data_for_a_new_liability",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_imports_data_for_two_new_assets": {
            "name": "test_it_imports_data_for_two_new_assets",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_imports_data_for_two_new_liabilities": {
            "name": "test_it_imports_data_for_two_new_liabilities",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_imports_asset_data_for_an_existing_asset": {
            "name": "test_it_imports_asset_data_for_an_existing_asset",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_imports_asset_data_for_existing_and_new_assets_with_the_same_owner": {
            "name": "test_it_imports_asset_data_for_existing_and_new_assets_with_the_same_owner",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_imports_asset_data_for_existing_and_new_assets_with_different_owners": {
            "name": "test_it_imports_asset_data_for_existing_and_new_assets_with_different_owners",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_does_not_ignore_a_single_zero_dollar_amount": {
            "name": "test_it_does_not_ignore_a_single_zero_dollar_amount",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_does_not_ignore_a_zero_dollar_amount_mixed_with_other_amounts": {
            "name": "test_it_does_not_ignore_a_zero_dollar_amount_mixed_with_other_amounts",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_gives_the_total_value_of_the_portfolio_at_the_current_time": {
            "name": "test_it_gives_the_total_value_of_the_portfolio_at_the_current_time",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_the_value_changes_on_the_day_it_is_recorded": {
            "name": "test_the_value_changes_on_the_day_it_is_recorded",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_gives_the_total_value_of_the_portfolio_at_a_previous_time": {
            "name": "test_it_gives_the_total_value_of_the_portfolio_at_a_previous_time",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_does_not_include_liabilities_in_percentages": {
            "name": "test_it_does_not_include_liabilities_in_percentages",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_combines_assets_with_the_same_investment_in_percentage_calculations": {
            "name": "test_it_combines_assets_with_the_same_investment_in_percentage_calculations",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_creates_different_assets_given_different_investments_with_the_same_name": {
            "name": "test_it_creates_different_assets_given_different_investments_with_the_same_name",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_returns_zero_for_each_asset_class_if_there_is_no_asset_data": {
            "name": "test_it_returns_zero_for_each_asset_class_if_there_is_no_asset_data",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_returns_asset_data_for_one_cash_equivalent": {
            "name": "test_it_returns_asset_data_for_one_cash_equivalent",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_returns_asset_data_for_one_equity": {
            "name": "test_it_returns_asset_data_for_one_equity",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_returns_asset_data_for_one_fixed_income_asset": {
            "name": "test_it_returns_asset_data_for_one_fixed_income_asset",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_returns_asset_data_for_one_real_estate_asset": {
            "name": "test_it_returns_asset_data_for_one_real_estate_asset",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_returns_asset_data_for_one_commodity": {
            "name": "test_it_returns_asset_data_for_one_commodity",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_returns_asset_data_for_one_annuity": {
            "name": "test_it_returns_asset_data_for_one_annuity",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_returns_asset_data_for_one_fixed_asset": {
            "name": "test_it_returns_asset_data_for_one_fixed_asset",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_returns_asset_data_for_two_asset_classes": {
            "name": "test_it_returns_asset_data_for_two_asset_classes",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_imports_an_account": {
            "name": "test_it_imports_an_account",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_imports_a_second_account_in_the_portfolio": {
            "name": "test_it_imports_a_second_account_in_the_portfolio",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_does_not_import_an_account_if_it_already_exists_in_the_portfolio": {
            "name": "test_it_does_not_import_an_account_if_it_already_exists_in_the_portfolio",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_returns_a_list_of_outdated_assets": {
            "name": "test_it_returns_a_list_of_outdated_assets",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_returns_a_list_of_outdated_liabilities": {
            "name": "test_it_returns_a_list_of_outdated_liabilities",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_returns_no_institutions_if_there_are_no_accounts_in_a_portfolio": {
            "name": "test_it_returns_no_institutions_if_there_are_no_accounts_in_a_portfolio",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_returns_one_institution": {
            "name": "test_it_returns_one_institution",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_returns_two_institutions": {
            "name": "test_it_returns_two_institutions",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTestCase.test_it_does_not_return_duplicate_institutions": {
            "name": "test_it_does_not_return_duplicate_institutions",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio_analysis-master/tests/portfolio/test_snapshot.py": {
        "SnapshotTestCase.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnapshotTestCase.test_it_has_a_timestamp": {
            "name": "test_it_has_a_timestamp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnapshotTestCase.test_it_has_a_value": {
            "name": "test_it_has_a_value",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio_analysis-master/tests/portfolio/test_snapshot_history.py": {
        "SnapshotHistoryTestCase.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnapshotHistoryTestCase.test_imports_a_snapshot": {
            "name": "test_imports_a_snapshot",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnapshotHistoryTestCase.test_imports_two_snapshots": {
            "name": "test_imports_two_snapshots",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnapshotHistoryTestCase.test_it_has_a_value_of_zero_if_there_are_no_snapshots": {
            "name": "test_it_has_a_value_of_zero_if_there_are_no_snapshots",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnapshotHistoryTestCase.test_it_returns_an_value_of_zero_when_queried_before_a_snapshot": {
            "name": "test_it_returns_an_value_of_zero_when_queried_before_a_snapshot",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnapshotHistoryTestCase.test_it_returns_the_correct_value_when_queried_after_a_snapshot": {
            "name": "test_it_returns_the_correct_value_when_queried_after_a_snapshot",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnapshotHistoryTestCase.test_it_returns_the_correct_value_when_queried_in_between_two_snapshots": {
            "name": "test_it_returns_the_correct_value_when_queried_in_between_two_snapshots",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnapshotHistoryTestCase.test_it_updates_the_value_at_the_time_the_snapshot_is_recorded": {
            "name": "test_it_updates_the_value_at_the_time_the_snapshot_is_recorded",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnapshotHistoryTestCase.test_the_order_in_which_snapshots_are_imported_makes_no_difference": {
            "name": "test_the_order_in_which_snapshots_are_imported_makes_no_difference",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnapshotHistoryTestCase.test_it_defaults_to_the_current_epoch_if_no_argument_is_given": {
            "name": "test_it_defaults_to_the_current_epoch_if_no_argument_is_given",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnapshotHistoryTestCase.test_it_returns_the_latest_timestamp_for_one_snapshot": {
            "name": "test_it_returns_the_latest_timestamp_for_one_snapshot",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnapshotHistoryTestCase.test_it_returns_the_latest_timestamp_for_two_snapshots": {
            "name": "test_it_returns_the_latest_timestamp_for_two_snapshots",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnapshotHistoryTestCase.test_it_returns_the_latest_timestamp_for_three_snapshots": {
            "name": "test_it_returns_the_latest_timestamp_for_three_snapshots",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio_analysis-master/tests/portfolio/__init__.py": {},
    "portfolio_analysis-master/tests/portfolio_analysis/test_portfolio_analyzer.py": {
        "PortfolioAnalyzerCase.test_it_returns_the_debt_to_equity_ratio_for_a_portfolio_with_no_liabilities": {
            "name": "test_it_returns_the_debt_to_equity_ratio_for_a_portfolio_with_no_liabilities",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioAnalyzerCase.test_it_returns_the_debt_to_equity_ratio_for_a_portfolio_with_only_liabilities": {
            "name": "test_it_returns_the_debt_to_equity_ratio_for_a_portfolio_with_only_liabilities",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioAnalyzerCase.test_it_returns_the_debt_to_equity_ratio_for_a_portfolio_with_a_mixture_of_accounts_in_equal_value": {
            "name": "test_it_returns_the_debt_to_equity_ratio_for_a_portfolio_with_a_mixture_of_accounts_in_equal_value",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioAnalyzerCase.test_it_returns_the_debt_to_equity_ratio_for_a_portfolio_with_a_mixture_of_accounts_in_nonequal_value": {
            "name": "test_it_returns_the_debt_to_equity_ratio_for_a_portfolio_with_a_mixture_of_accounts_in_nonequal_value",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioAnalyzerCase.test_it_returns_the_debt_to_equity_ratio_for_a_historical_time": {
            "name": "test_it_returns_the_debt_to_equity_ratio_for_a_historical_time",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio_analysis-master/tests/portfolio_analysis/__init__.py": {},
    "portfolio_analysis-master/tests/portfolio_creator/test_portfolio_creator.py": {
        "MockDataSource.get": {
            "name": "get",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioCreatorTestCase.setUp": {
            "name": "setUp",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioCreatorTestCase.test_it_creates_a_portfolio": {
            "name": "test_it_creates_a_portfolio",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioCreatorTestCase.test_it_assigns_the_correct_names_to_the_accounts": {
            "name": "test_it_assigns_the_correct_names_to_the_accounts",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioCreatorTestCase.test_it_assigns_the_correct_update_frequencies_to_the_accounts": {
            "name": "test_it_assigns_the_correct_update_frequencies_to_the_accounts",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioCreatorTestCase.test_it_assigns_the_correct_open_dates_to_the_accounts": {
            "name": "test_it_assigns_the_correct_open_dates_to_the_accounts",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioCreatorTestCase.test_it_assigns_the_correct_terms_to_the_accounts": {
            "name": "test_it_assigns_the_correct_terms_to_the_accounts",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio_analysis-master/tests/portfolio_creator/__init__.py": {},
    "portfolio_analysis-master/tests/report/test_balance_sheet.py": {
        "BalanceSheetTestCase.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BalanceSheetTestCase.test_it_returns_a_formatted_row_for_a_balance_sheet": {
            "name": "test_it_returns_a_formatted_row_for_a_balance_sheet",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BalanceSheetTestCase.test_it_returns_an_empty_balance_sheet_if_there_are_no_accounts_in_the_portfolio": {
            "name": "test_it_returns_an_empty_balance_sheet_if_there_are_no_accounts_in_the_portfolio",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BalanceSheetTestCase.test_it_returns_a_balance_sheet_with_one_asset": {
            "name": "test_it_returns_a_balance_sheet_with_one_asset",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BalanceSheetTestCase.test_it_returns_a_balance_sheet_with_one_liability": {
            "name": "test_it_returns_a_balance_sheet_with_one_liability",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BalanceSheetTestCase.test_it_returns_a_balance_sheet_with_an_asset_and_a_liability": {
            "name": "test_it_returns_a_balance_sheet_with_an_asset_and_a_liability",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BalanceSheetTestCase.test_it_returns_no_assets_or_liabilities": {
            "name": "test_it_returns_no_assets_or_liabilities",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BalanceSheetTestCase.test_it_returns_an_asset": {
            "name": "test_it_returns_an_asset",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BalanceSheetTestCase.test_it_returns_two_assets": {
            "name": "test_it_returns_two_assets",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BalanceSheetTestCase.test_it_returns_a_liability": {
            "name": "test_it_returns_a_liability",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BalanceSheetTestCase.test_it_returns_two_liabilities": {
            "name": "test_it_returns_two_liabilities",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio_analysis-master/tests/report/test_line_graph.py": {
        "LineGraphTestCase.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineGraphTestCase.test_it_returns_a_value_of_zero_on_a_single_day": {
            "name": "test_it_returns_a_value_of_zero_on_a_single_day",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineGraphTestCase.test_it_returns_two_values_of_zero": {
            "name": "test_it_returns_two_values_of_zero",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineGraphTestCase.test_it_returns_many_values_of_zero": {
            "name": "test_it_returns_many_values_of_zero",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineGraphTestCase.test_it_returns_the_value_of_a_single_account": {
            "name": "test_it_returns_the_value_of_a_single_account",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineGraphTestCase.test_it_returns_the_value_of_two_accounts": {
            "name": "test_it_returns_the_value_of_two_accounts",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio_analysis-master/tests/report/__init__.py": {},
    "portfolio_analysis-master/tests/utilities/test_epoch_date_converter.py": {
        "EpochTimestampConverterTestCase.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpochTimestampConverterTestCase.test_it_returns_the_current_epoch_given_no_date": {
            "name": "test_it_returns_the_current_epoch_given_no_date",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpochTimestampConverterTestCase.test_it_returns_the_current_epoch_given_a_date_of_None": {
            "name": "test_it_returns_the_current_epoch_given_a_date_of_None",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpochTimestampConverterTestCase.test_it_returns_the_current_date_given_no_epoch": {
            "name": "test_it_returns_the_current_date_given_no_epoch",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpochTimestampConverterTestCase.test_it_returns_the_current_date_given_an_epoch_of_None": {
            "name": "test_it_returns_the_current_date_given_an_epoch_of_None",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpochTimestampConverterTestCase.test_it_converts_a_date_to_an_epoch_and_back": {
            "name": "test_it_converts_a_date_to_an_epoch_and_back",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpochTimestampConverterTestCase.test_it_converts_another_date_to_an_epoch_and_back": {
            "name": "test_it_converts_another_date_to_an_epoch_and_back",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio_analysis-master/tests/utilities/test_presenter.py": {
        "PresenterTestCase.test_it_formats_a_date_with_slashes": {
            "name": "test_it_formats_a_date_with_slashes",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_it_does_nothing_to_a_correctly_formatted_date": {
            "name": "test_it_does_nothing_to_a_correctly_formatted_date",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_it_formats_a_positive_value_with_no_commas": {
            "name": "test_it_formats_a_positive_value_with_no_commas",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_it_formats_a_positive_value_with_one_comma": {
            "name": "test_it_formats_a_positive_value_with_one_comma",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_it_formats_a_positive_value_with_many_commas": {
            "name": "test_it_formats_a_positive_value_with_many_commas",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_it_formats_a_negative_value_with_no_commas": {
            "name": "test_it_formats_a_negative_value_with_no_commas",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_it_formats_a_negative_value_with_one_comma": {
            "name": "test_it_formats_a_negative_value_with_one_comma",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_it_formats_a_negative_value_with_many_commas": {
            "name": "test_it_formats_a_negative_value_with_many_commas",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_it_does_nothing_to_a_correctly_formatted_value": {
            "name": "test_it_does_nothing_to_a_correctly_formatted_value",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_it_formats_0_into_a_percentage": {
            "name": "test_it_formats_0_into_a_percentage",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_it_formats_one_half_into_a_percentage": {
            "name": "test_it_formats_one_half_into_a_percentage",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_it_formats_one_into_a_percentage": {
            "name": "test_it_formats_one_into_a_percentage",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_it_rounds_a_repeating_decimal_to_one_place": {
            "name": "test_it_rounds_a_repeating_decimal_to_one_place",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio_analysis-master/tests/utilities/__init__.py": {},
    "portfolio_analysis-master/utilities/constants.py": {},
    "portfolio_analysis-master/utilities/epoch_date_converter.py": {
        "EpochDateConverter.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpochDateConverter.date_to_epoch": {
            "name": "date_to_epoch",
            "location": 11,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "date": [
                    "None",
                    "str",
                    "datetime.date",
                    "datetime.datetime.datetime",
                    "Optional[datetime.datetime]"
                ]
            }
        },
        "EpochDateConverter.epoch_to_date": {
            "name": "epoch_to_date",
            "location": 17,
            "return": [
                "dict",
                "Optional[str]",
                "datetime.date"
            ],
            "arguments": {
                "self": [],
                "epoch": [
                    "None",
                    "int",
                    "Union[int,None]",
                    "str",
                    "Tuple[Union[datetime.datetime,datetime.datetime]]",
                    "datetime.datetime",
                    "Optional[datetime.date]",
                    "Tuple[datetime.datetime,datetime.datetime]"
                ]
            }
        },
        "EpochDateConverter.__calculate_epoch_from_date": {
            "name": "__calculate_epoch_from_date",
            "location": 23,
            "return": [
                "datetime.datetime",
                "datetime.date",
                "Optional[datetime.datetime]",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "date": [
                    "str",
                    "datetime.date",
                    "None",
                    "datetime.datetime.datetime",
                    "Optional[str]"
                ]
            }
        },
        "EpochDateConverter.__split_date": {
            "name": "__split_date",
            "location": 33,
            "return": [
                "Dict[Text,int]",
                "Dict[str,int]",
                "int",
                "Dict",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "date_string": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "portfolio_analysis-master/utilities/presenter.py": {
        "Presenter.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Presenter.date_slashes_as_dashes": {
            "name": "date_slashes_as_dashes",
            "location": 6,
            "return": [
                "str",
                "Optional[str]",
                "Tuple[str,str]",
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "date_str": [
                    "str"
                ]
            }
        },
        "Presenter.value_without_symbols": {
            "name": "value_without_symbols",
            "location": 14,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "value_str": [
                    "str"
                ]
            }
        },
        "Presenter.decimal_as_percentage": {
            "name": "decimal_as_percentage",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "percent_fraction": [
                    "Tuple",
                    "float",
                    "Tuple[str,str,str]",
                    "Tuple[Union[str,str,str]]"
                ]
            }
        }
    },
    "portfolio_analysis-master/utilities/__init__.py": {},
    "portfolio_analysis-master/valid_options/account_type.py": {},
    "portfolio_analysis-master/valid_options/asset_class.py": {},
    "portfolio_analysis-master/valid_options/snapshot_status.py": {},
    "portfolio_analysis-master/valid_options/term.py": {},
    "portfolio_analysis-master/valid_options/__init__.py": {}
}
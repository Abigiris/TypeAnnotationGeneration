{
    "preconvert-main/preconvert/converters.py": {
        "datetime_converter": {
            "name": "datetime_converter",
            "location": 36,
            "return": [
                "Dict[str, Dict[str, int]]",
                "float",
                "Dict[str, Any]",
                "bool",
                "mypy.types.Type"
            ],
            "arguments": {
                "item": [
                    "str",
                    "List[float]"
                ]
            }
        },
        "time_delta_converter": {
            "name": "time_delta_converter",
            "location": 41,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "item": [
                    "str",
                    "List[float]",
                    "bool"
                ]
            }
        },
        "use_value_attribute": {
            "name": "use_value_attribute",
            "location": 46,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "item": [
                    "str",
                    "T",
                    "Mapping",
                    "Mapping[str,Dict[str,Any]]"
                ]
            }
        },
        "convert_namedtuple": {
            "name": "convert_namedtuple",
            "location": 51,
            "return": [
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ]
            }
        },
        "byte_converter": {
            "name": "byte_converter",
            "location": 65,
            "return": [
                "str",
                "int",
                "list",
                "Tuple[float, float]"
            ],
            "arguments": {
                "item": [
                    "Callable[[int], float]",
                    "List[int]",
                    "IO[str]"
                ]
            }
        },
        "convert_data_class": {
            "name": "convert_data_class",
            "location": 22,
            "return": [
                "str",
                "Callable[..., T]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "Callable[...,T]",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "preconvert-main/preconvert/exceptions.py": {
        "ExistingConverter.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "str",
                    "Union[None,str,int]",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "existing": [
                    "str",
                    "Union[None,str,int]",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "new": [
                    "str",
                    "Union[None,str,int]",
                    "None",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Unconvertable.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Dict[str,Any]",
                    "T"
                ]
            }
        }
    },
    "preconvert-main/preconvert/register.py": {
        "converter": {
            "name": "converter",
            "location": 20,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {}
        },
        "converter.register_converter": {
            "name": "register_converter",
            "location": 33,
            "return": [
                "Sequence['cirq.Qid']",
                "list"
            ],
            "arguments": {
                "function": [
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "preconvert-main/preconvert/__init__.py": {},
    "preconvert-main/preconvert/output/bson.py": {
        "dumps": {
            "name": "dumps",
            "location": 8,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Optional[str]",
                "int",
                "List[Callable]"
            ],
            "arguments": {
                "content": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "dump": {
            "name": "dump",
            "location": 15,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Optional[str]",
                "int",
                "List[Callable]"
            ],
            "arguments": {
                "content": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "preconvert-main/preconvert/output/convert.py": {
        "default_serializer": {
            "name": "default_serializer",
            "location": 17,
            "return": [
                "bool",
                "int",
                "Set[str]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "item": [
                    "bool",
                    "str",
                    "list",
                    "Optional[str]",
                    "Tuple[str]",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "namespace": [
                    "str",
                    "Dict[str, Any]",
                    "Union[int, float]"
                ],
                "base_namespace": [
                    "str",
                    "tuple",
                    "Dict[str, dict]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "using": [
                    "bool",
                    "Dict[str, dict]",
                    "str",
                    "List[bool]"
                ],
                "store": [
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "Union[bytes, str]",
                    "defaultdict",
                    "bool"
                ]
            }
        }
    },
    "preconvert-main/preconvert/output/json.py": {
        "dumps": {
            "name": "dumps",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "content": [
                    "str",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "dump": {
            "name": "dump",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "content": [
                    "str",
                    "Type[T]",
                    "Type"
                ]
            }
        }
    },
    "preconvert-main/preconvert/output/msgpack.py": {
        "pack": {
            "name": "pack",
            "location": 8,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "content": [
                    "str",
                    "Type"
                ]
            }
        },
        "packb": {
            "name": "packb",
            "location": 15,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "content": [
                    "str",
                    "Type"
                ]
            }
        },
        "dump": {
            "name": "dump",
            "location": 22,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "content": [
                    "str"
                ]
            }
        },
        "dumps": {
            "name": "dumps",
            "location": 29,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "content": [
                    "str"
                ]
            }
        }
    },
    "preconvert-main/preconvert/output/simplejson.py": {},
    "preconvert-main/preconvert/output/__init__.py": {},
    "preconvert-main/tests/constants.py": {},
    "preconvert-main/tests/test_output.py": {
        "test_json": {
            "name": "test_json",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_json.convert": {
            "name": "convert",
            "location": 59,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "instance": []
            }
        }
    },
    "preconvert-main/tests/__init__.py": {}
}
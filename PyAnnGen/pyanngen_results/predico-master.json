{
    "predico-master/setup.py": {},
    "predico-master/doc/conf.py": {},
    "predico-master/predico/field_types.py": {
        "injected": {
            "name": "injected",
            "location": 28,
            "return": [
                "Dict[str, Any]",
                "Sequence[str]",
                "bool",
                "int",
                "Optional[Iterable[str]]",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "type_": [
                    "int",
                    "str",
                    "Dict[str, Type[Any]]",
                    "dict[str, typing.Type]",
                    "type",
                    "typing.Type"
                ]
            }
        },
        "InjectedArgumentException.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "predico-master/predico/injector.py": {
        "get_adapted_value": {
            "name": "get_adapted_value",
            "location": 27,
            "return": [
                "None",
                "Callable",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "bool",
                    "predico.services.requesbase_requesRequest",
                    "int"
                ],
                "field_type": [
                    "str",
                    "bool"
                ],
                "call_is_true": [
                    "bool",
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "get_injected_value": {
            "name": "get_injected_value",
            "location": 45,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "field_metadata": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[Iterable[str]]",
                    "Callable[[], str]"
                ],
                "source": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "inject": {
            "name": "inject",
            "location": 69,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "props": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "injectables": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "tuple",
                    "tuple[]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "target": [
                    "str",
                    "Dict[int, dict]",
                    "dict[int, dict[, ]]"
                ],
                "request": [
                    "int",
                    "None",
                    "str",
                    "excars.models.rides.Ride.Request"
                ]
            }
        }
    },
    "predico-master/predico/predicates.py": {
        "Predicate.__str__": {
            "name": "__str__",
            "location": 14,
            "return": [
                "typing.Text",
                "bool",
                "str",
                "float",
                "Dict[int, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Predicate.matches": {
            "name": "matches",
            "location": 20,
            "return": [
                "builtins.bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "requests.Request",
                    "starlette.requests.Request",
                    "aiohttp.web.Request",
                    "base.Request"
                ]
            }
        },
        "ForPredicate.matches": {
            "name": "matches",
            "location": 29,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "requests.Request",
                    "starlette.requests.Request",
                    "aiohttp.web.Request",
                    "base.Request"
                ]
            }
        },
        "ResourcePredicate.matches": {
            "name": "matches",
            "location": 40,
            "return": [
                "bool",
                "str",
                "type",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "fastapi.Request",
                    "predico.services.requesbase_requesRequest"
                ]
            }
        },
        "ResourceIdPredicate.matches": {
            "name": "matches",
            "location": 54,
            "return": [
                "bool",
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "fastapi.Request",
                    "predico.services.requesbase_requesRequest"
                ]
            }
        },
        "ParentIdPredicate.matches": {
            "name": "matches",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "fastapi.Request",
                    "predico.services.requesbase_requesRequest"
                ]
            }
        },
        "TemplateStringPredicate.__str__": {
            "name": "__str__",
            "location": 80,
            "return": [
                "typing.Text",
                "str",
                "List[Dict[str, Any]]",
                "List[str]",
                "Union[str, bytes]",
                "Optional[Dict[str, Any]]",
                "Literal",
                "T",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplateStringPredicate.matches": {
            "name": "matches",
            "location": 83,
            "return": [
                "builtins.bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "requests.Request",
                    "starlette.requests.Request",
                    "aiohttp.web.Request",
                    "base.Request"
                ]
            }
        },
        "RendererPredicate.__str__": {
            "name": "__str__",
            "location": 94,
            "return": [
                "typing.Text",
                "str",
                "List[Dict[str, Any]]",
                "List[str]",
                "Union[str, bytes]",
                "Optional[Dict[str, Any]]",
                "Literal",
                "T",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RendererPredicate.matches": {
            "name": "matches",
            "location": 97,
            "return": [
                "builtins.bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "requests.Request",
                    "starlette.requests.Request",
                    "aiohttp.web.Request",
                    "base.Request"
                ]
            }
        }
    },
    "predico-master/predico/predicate_action.py": {
        "reject_predicates": {
            "name": "reject_predicates",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "required": [
                    "dict[, ]",
                    "bool",
                    "int",
                    "T",
                    "dict"
                ],
                "optional": [
                    "dict[, ]",
                    "bool",
                    "int",
                    "T",
                    "dict"
                ]
            }
        },
        "predicates_match": {
            "name": "predicates_match",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [
                    "dict[, ]",
                    "requests.Request",
                    "dict"
                ],
                "predicate_values": [
                    "bool"
                ]
            }
        },
        "PredicateAction.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredicateAction.__str__": {
            "name": "__str__",
            "location": 126,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredicateAction.identifier": {
            "name": "identifier",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "plugins": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "PredicateAction.perform": {
            "name": "perform",
            "location": 132,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "plugins": [
                    "str",
                    "None",
                    "Optional[BaseException]",
                    "BaseException"
                ]
            }
        },
        "PredicateAction.sorted_actions": {
            "name": "sorted_actions",
            "location": 138,
            "return": [
                "list[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "type",
                    "typing.Type"
                ],
                "registry": [
                    "int"
                ]
            }
        },
        "PredicateAction.all_predicates_match": {
            "name": "all_predicates_match",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Union[dict, list]",
                    "dict[, ]",
                    "Callable[..., Awaitable[dict]]",
                    "list[]",
                    "typing.Callable[..., collections.abc.Awaitable[dict[, ]]]"
                ]
            }
        },
        "PredicateAction.__lt__": {
            "name": "__lt__",
            "location": 168,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "PredicateAction.__gt__": {
            "name": "__gt__",
            "location": 171,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "PredicateAction.__eq__": {
            "name": "__eq__",
            "location": 174,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "PredicateAction.__le__": {
            "name": "__le__",
            "location": 177,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "PredicateAction.__ge__": {
            "name": "__ge__",
            "location": 180,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        }
    },
    "predico-master/predico/registry.py": {},
    "predico-master/predico/__init__.py": {},
    "predico-master/predico/sample/__init__.py": {
        "setup": {
            "name": "setup",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "predico-master/predico/sample/tour/behind_the_scenes.py": {},
    "predico-master/predico/sample/tour/breadcrumbs.py": {
        "ArticleView.breadcrumb_titles": {
            "name": "breadcrumb_titles",
            "location": 25,
            "return": [
                "str",
                "tuple",
                "int",
                "Union[List[str], str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArticleView.breadcrumbs": {
            "name": "breadcrumbs",
            "location": 29,
            "return": [
                "list[int]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "predico-master/predico/sample/tour/current_request.py": {},
    "predico-master/predico/sample/tour/current_resource.py": {},
    "predico-master/predico/sample/tour/first_adapter.py": {
        "BreadcrumbsAdapter.__call__": {
            "name": "__call__",
            "location": 22,
            "return": [
                "Breadcrumbs",
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArticleView.breadcrumb_titles": {
            "name": "breadcrumb_titles",
            "location": 46,
            "return": [
                "str",
                "tuple",
                "int",
                "Union[List[str], str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "predico-master/predico/sample/tour/first_customization.py": {},
    "predico-master/predico/sample/tour/hello_world.py": {},
    "predico-master/predico/sample/tour/resource_title.py": {},
    "predico-master/predico/sample/tour/specific_adapter.py": {
        "BreadcrumbsAdapter.__call__": {
            "name": "__call__",
            "location": 25,
            "return": [
                "Breadcrumbs",
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SectionBreadcrumbsAdapter.__call__": {
            "name": "__call__",
            "location": 42,
            "return": [
                "Breadcrumbs",
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArticleView.breadcrumb_titles": {
            "name": "breadcrumb_titles",
            "location": 66,
            "return": [
                "str",
                "tuple",
                "int",
                "Union[List[str], str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "predico-master/predico/sample/tour/specific_article.py": {},
    "predico-master/predico/servicemanager/action.py": {
        "ServiceAction.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "ServiceAction.identifier": {
            "name": "identifier",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "services": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ServiceAction.perform": {
            "name": "perform",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "services": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "predico-master/predico/servicemanager/base_service.py": {
        "BaseService.get_injectables": {
            "name": "get_injectables",
            "location": 12,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "predico-master/predico/servicemanager/configuration.py": {},
    "predico-master/predico/servicemanager/manager.py": {
        "ServiceManager.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "registry": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "ServiceManager.initialize": {
            "name": "initialize",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceManager.add_injectable": {
            "name": "add_injectable",
            "location": 104,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "injectable": [
                    "Set[str]",
                    "set[str]",
                    "dict",
                    "dict[, ]",
                    "list",
                    "list[]",
                    "set",
                    "set[]"
                ]
            }
        },
        "ServiceManager.render": {
            "name": "render",
            "location": 109,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "resourceid": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "bool"
                ]
            }
        }
    },
    "predico-master/predico/servicemanager/__init__.py": {},
    "predico-master/predico/services/adapter/action.py": {},
    "predico-master/predico/services/adapter/base_adapter.py": {},
    "predico-master/predico/services/adapter/config.py": {},
    "predico-master/predico/services/adapter/service.py": {
        "AdapterService.get_adapter": {
            "name": "get_adapter",
            "location": 21,
            "return": [
                "None",
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "for_": [
                    "Type[Any]",
                    "typing.Type",
                    "dict",
                    "dict[, ]",
                    "MutableMapping[str, str]",
                    "typing.MutableMapping"
                ]
            }
        }
    },
    "predico-master/predico/services/adapter/__init__.py": {},
    "predico-master/predico/services/request/action.py": {},
    "predico-master/predico/services/request/base_request.py": {
        "Request.validate": {
            "name": "validate",
            "location": 13,
            "return": [
                "str",
                "int",
                "bool",
                "typing.Type",
                "Tuple[str]",
                "typing.Callable[, ]",
                "Iterable[str]",
                "typing.Iterable[T]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "typing.Type",
                    "Type['DataclassT']",
                    "typing.Callable[, ]",
                    "typing.Iterable[T]",
                    "Callable",
                    "T",
                    "bool",
                    "Iterable[T]"
                ],
                "v": [
                    "int",
                    "typing.Type",
                    "Type['DataclassT']",
                    "typing.Callable[, ]",
                    "typing.Iterable[T]",
                    "Callable",
                    "T",
                    "bool",
                    "Iterable[T]"
                ]
            }
        },
        "Request.get_validators": {
            "name": "get_validators",
            "location": 17,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "str",
                    "list[int]",
                    "Type['DataclassT']",
                    "typing.Type",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "predico-master/predico/services/request/common_request.py": {
        "CommonRequest.resource": {
            "name": "resource",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommonRequest.resources": {
            "name": "resources",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommonRequest.view": {
            "name": "view",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommonRequest.adapters": {
            "name": "adapters",
            "location": 47,
            "return": [
                "AdaptersGetter",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommonRequest.adapt_resource": {
            "name": "adapt_resource",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "for_": [
                    "int",
                    "dict[int, int]",
                    "Dict[int, int]",
                    "float",
                    "str",
                    "Union[str, 'Type']",
                    "typing.Sequence[typing.Hashable]",
                    "Sequence[Hashable]",
                    "Iterable[Any]"
                ],
                "resource": [
                    "int",
                    "dict[int, int]",
                    "Dict[int, int]",
                    "float",
                    "str",
                    "Union[str, 'Type']",
                    "typing.Sequence[typing.Hashable]",
                    "Sequence[Hashable]",
                    "Iterable[Any]"
                ]
            }
        },
        "CommonRequest.render": {
            "name": "render",
            "location": 81,
            "return": [
                "str",
                "int",
                "list[str]",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommonRequest.adapters.AdaptersGetter.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "adapterservice": [
                    "str",
                    "List[str]",
                    "int",
                    "float"
                ],
                "request": [
                    "str",
                    "List[str]",
                    "int",
                    "float"
                ]
            }
        },
        "CommonRequest.adapters.AdaptersGetter.__getitem__": {
            "name": "__getitem__",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "adapterclass": [
                    "int",
                    "dict",
                    "str",
                    "Dict[Hashable, Any]"
                ]
            }
        }
    },
    "predico-master/predico/services/request/config.py": {},
    "predico-master/predico/services/request/service.py": {
        "RequestService.make_request": {
            "name": "make_request",
            "location": 18,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "resourceid": [
                    "bool",
                    "str",
                    "Union[bool, str]"
                ]
            }
        }
    },
    "predico-master/predico/services/request/__init__.py": {},
    "predico-master/predico/services/resource/action.py": {
        "ResourceAction.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "ResourceAction.identifier": {
            "name": "identifier",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ResourceAction.perform": {
            "name": "perform",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "resources": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ResourceAction.get_callbacks": {
            "name": "get_callbacks",
            "location": 21,
            "return": [
                "list[]",
                "List[str]",
                "str",
                "Iterable[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Type[T]",
                    "typing.Type",
                    "List[str]",
                    "list[str]"
                ],
                "registry": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "predico-master/predico/services/resource/base_resource.py": {
        "Resource.validate": {
            "name": "validate",
            "location": 12,
            "return": [
                "str",
                "int",
                "bool",
                "typing.Type",
                "Tuple[str]",
                "typing.Callable[, ]",
                "Iterable[str]",
                "typing.Iterable[T]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "typing.Type",
                    "Type['DataclassT']",
                    "typing.Callable[, ]",
                    "typing.Iterable[T]",
                    "Callable",
                    "T",
                    "bool",
                    "Iterable[T]"
                ],
                "v": [
                    "int",
                    "typing.Type",
                    "Type['DataclassT']",
                    "typing.Callable[, ]",
                    "typing.Iterable[T]",
                    "Callable",
                    "T",
                    "bool",
                    "Iterable[T]"
                ]
            }
        },
        "Resource.get_validators": {
            "name": "get_validators",
            "location": 17,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "str",
                    "list[int]",
                    "Type['DataclassT']",
                    "typing.Type",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "predico-master/predico/services/resource/config.py": {},
    "predico-master/predico/services/resource/service.py": {
        "ResourceService.get_resourceclass": {
            "name": "get_resourceclass",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "rtype": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "ResourceService.get_resource": {
            "name": "get_resource",
            "location": 33,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": [],
                "resourceid": [
                    "str",
                    "bool",
                    "pricemonitor.config.Coin"
                ]
            }
        },
        "ResourceService.add_resource": {
            "name": "add_resource",
            "location": 38,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "predico-master/predico/services/resource/__init__.py": {},
    "predico-master/predico/services/view/action.py": {},
    "predico-master/predico/services/view/base_view.py": {},
    "predico-master/predico/services/view/config.py": {},
    "predico-master/predico/services/view/renderers.py": {
        "StringFormatRenderer.__call__": {
            "name": "__call__",
            "location": 18,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "predico-master/predico/services/view/service.py": {
        "ViewService.get_view": {
            "name": "get_view",
            "location": 22,
            "return": [
                "None",
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ViewService.get_viewaction": {
            "name": "get_viewaction",
            "location": 44,
            "return": [
                "None",
                "Optional[int]",
                "bool",
                "str",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Iterable[int]",
                    "typing.Iterable[int]"
                ]
            }
        }
    },
    "predico-master/predico/services/view/__init__.py": {},
    "predico-master/tests/conftest.py": {
        "viewservice_config": {
            "name": "viewservice_config",
            "location": 29,
            "return": [
                "ViewServiceConfig",
                "str",
                "dict",
                "Optional[dict]",
                "app.config.MQConfig",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "requestservice_config": {
            "name": "requestservice_config",
            "location": 37,
            "return": [
                "RequestServiceConfig",
                "str",
                "dict",
                "Optional[dict]",
                "app.config.MQConfig",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "resourceservice_config": {
            "name": "resourceservice_config",
            "location": 45,
            "return": [
                "ResourceServiceConfig",
                "str",
                "dict",
                "Optional[dict]",
                "app.config.MQConfig",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "adapterservice_config": {
            "name": "adapterservice_config",
            "location": 53,
            "return": [
                "AdapterServiceConfig",
                "str",
                "dict",
                "Optional[dict]",
                "app.config.MQConfig",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "sm_config": {
            "name": "sm_config",
            "location": 61,
            "return": [
                "ServiceManagerConfig",
                "str",
                "dict",
                "Optional[dict]",
                "app.config.MQConfig",
                "Dict[str, Any]"
            ],
            "arguments": {
                "adapterservice_config": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "sideeye.config.Configuration",
                    "cmk.base.config.HostConfig",
                    "pyramid.config.Configurator"
                ],
                "resourceservice_config": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "sideeye.config.Configuration",
                    "cmk.base.config.HostConfig",
                    "pyramid.config.Configurator"
                ],
                "requestservice_config": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "sideeye.config.Configuration",
                    "cmk.base.config.HostConfig",
                    "pyramid.config.Configurator"
                ],
                "viewservice_config": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "sideeye.config.Configuration",
                    "cmk.base.config.HostConfig",
                    "pyramid.config.Configurator"
                ]
            }
        },
        "test_registry": {
            "name": "test_registry",
            "location": 81,
            "return": [
                "TestServiceRegistry",
                "Mapping[str, Any]",
                "dict"
            ],
            "arguments": {}
        },
        "uninitialized_sm": {
            "name": "uninitialized_sm",
            "location": 91,
            "return": [
                "ServiceManager",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sm_config": [
                    "bool",
                    "List[str]",
                    "str",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "test_registry": [
                    "bool",
                    "List[str]",
                    "str",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "registrations": {
            "name": "registrations",
            "location": 107,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "initialized_sm": {
            "name": "initialized_sm",
            "location": 112,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "registrations": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "uninitialized_sm": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "predico-master/tests/integration/conftest.py": {
        "fake_breadcrumbs_resources": {
            "name": "fake_breadcrumbs_resources",
            "location": 175,
            "return": [
                "FakeBreadcrumbsResources",
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "registrations": {
            "name": "registrations",
            "location": 184,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "test_registry": [
                    "typing.Callable[, ]",
                    "timeview.gui.model.View",
                    "dict[, ]",
                    "Callable",
                    "list[str]",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "services": {
            "name": "services",
            "location": 231,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "initialized_sm": [
                    "str",
                    "bytes",
                    "dict",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "rs": {
            "name": "rs",
            "location": 237,
            "return": [
                "str",
                "dict",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "List[str]",
                "List[Match]",
                "bool"
            ],
            "arguments": {
                "services": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "bool",
                    "int"
                ]
            }
        },
        "test_resources": {
            "name": "test_resources",
            "location": 243,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "rs": []
            }
        },
        "TestArticle.parentids": {
            "name": "parentids",
            "location": 23,
            "return": [
                "list[]",
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSection.parentids": {
            "name": "parentids",
            "location": 33,
            "return": [
                "list[]",
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeBreadcrumbsResourcesAdapter.resource_title": {
            "name": "resource_title",
            "location": 81,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeArticleBreadcrumbsResourcesAdapter.resource_title": {
            "name": "resource_title",
            "location": 103,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeResourceIdBreadcrumbsResourcesAdapter.resource_title": {
            "name": "resource_title",
            "location": 135,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeParentIdBreadcrumbsResourcesAdapter.resource_title": {
            "name": "resource_title",
            "location": 147,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeNocallAdapter.__call__": {
            "name": "__call__",
            "location": 164,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "predico-master/tests/integration/adapter/test_adapters.py": {
        "test_default_breadcrumbs_adapter": {
            "name": "test_default_breadcrumbs_adapter",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "initialized_sm": [
                    "str"
                ],
                "test_resources": [],
                "fake_breadcrumbs_resources": [
                    "str",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "test_resourceclass_adapter": {
            "name": "test_resourceclass_adapter",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "initialized_sm": [],
                "test_resources": [],
                "fake_breadcrumbs_resources": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "test_resourceid_adapter": {
            "name": "test_resourceid_adapter",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "initialized_sm": [],
                "test_resources": [],
                "fake_breadcrumbs_resources": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "test_parentid_adapter": {
            "name": "test_parentid_adapter",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "initialized_sm": [],
                "test_resources": [],
                "fake_breadcrumbs_resources": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "test_defaultadapter_view": {
            "name": "test_defaultadapter_view",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "initialized_sm": [],
                "test_resources": [],
                "fake_breadcrumbs_resources": []
            }
        },
        "test_specificadapter_view": {
            "name": "test_specificadapter_view",
            "location": 120,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "initialized_sm": [],
                "test_resources": [],
                "fake_breadcrumbs_resources": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "test_injectedattr_adapter_view": {
            "name": "test_injectedattr_adapter_view",
            "location": 151,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "initialized_sm": [],
                "test_resources": [],
                "fake_breadcrumbs_resources": []
            }
        },
        "test_nocall_view": {
            "name": "test_nocall_view",
            "location": 176,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "initialized_sm": [],
                "test_resources": [],
                "fake_breadcrumbs_resources": []
            }
        }
    },
    "predico-master/tests/integration/pydantic/conftest.py": {
        "registrations": {
            "name": "registrations",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "test_registry": [
                    "str",
                    "bool",
                    "timeview.gui.model.View",
                    "None",
                    "Optional[str]",
                    "config.Config"
                ]
            }
        },
        "TestPydanticArticle.parentids": {
            "name": "parentids",
            "location": 17,
            "return": [
                "list[]",
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPydanticSection.parentids": {
            "name": "parentids",
            "location": 27,
            "return": [
                "list[]",
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakePydanticCallableAdapter.__call__": {
            "name": "__call__",
            "location": 40,
            "return": [
                "typing.Text",
                "Optional[Dict[str, str]]",
                "Dict[str, Any]",
                "Hashable"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakePydanticCallableAdapter.validate": {
            "name": "validate",
            "location": 44,
            "return": [
                "str",
                "int",
                "bool",
                "typing.Type",
                "Tuple[str]",
                "typing.Callable[, ]",
                "Iterable[str]",
                "typing.Iterable[T]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "typing.Type",
                    "Type['DataclassT']",
                    "typing.Callable[, ]",
                    "typing.Iterable[T]",
                    "Callable",
                    "T",
                    "bool",
                    "Iterable[T]"
                ],
                "v": [
                    "int",
                    "typing.Type",
                    "Type['DataclassT']",
                    "typing.Callable[, ]",
                    "typing.Iterable[T]",
                    "Callable",
                    "T",
                    "bool",
                    "Iterable[T]"
                ]
            }
        },
        "FakePydanticCallableAdapter.get_validators": {
            "name": "get_validators",
            "location": 48,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "str",
                    "list[int]",
                    "Type['DataclassT']",
                    "typing.Type",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "predico-master/tests/integration/pydantic/test_pydantic.py": {
        "test_pydantic_resourceid_view": {
            "name": "test_pydantic_resourceid_view",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "initialized_sm": [],
                "test_resources": []
            }
        }
    },
    "predico-master/tests/integration/resource/test_resource.py": {
        "test_resources_empty": {
            "name": "test_resources_empty",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "rs": [
                    "int"
                ]
            }
        },
        "test_add_get_resource": {
            "name": "test_add_get_resource",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "rs": [
                    "int"
                ]
            }
        },
        "test_request_resource": {
            "name": "test_request_resource",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "services": [
                    "str"
                ],
                "test_resources": [
                    "str",
                    "bool",
                    "Dict[str, object]",
                    "dict[str, object]"
                ]
            }
        },
        "test_resources_adapter": {
            "name": "test_resources_adapter",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "services": [
                    "str",
                    "Dict[str, Any]"
                ],
                "test_resources": [
                    "bool",
                    "str",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "int"
                ]
            }
        }
    },
    "predico-master/tests/integration/view/test_views.py": {
        "test_default_view": {
            "name": "test_default_view",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "initialized_sm": [
                    "str"
                ],
                "test_resources": []
            }
        },
        "test_resourceclass_view": {
            "name": "test_resourceclass_view",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "initialized_sm": [],
                "test_resources": []
            }
        },
        "test_resourceid_view": {
            "name": "test_resourceid_view",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "initialized_sm": [],
                "test_resources": []
            }
        },
        "test_parentid_view": {
            "name": "test_parentid_view",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "initialized_sm": [],
                "test_resources": []
            }
        }
    },
    "predico-master/tests/unit/field_types/test_field_type_injectedattr.py": {
        "test_invalid_both_attr_and_key": {
            "name": "test_invalid_both_attr_and_key",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_attr": {
            "name": "test_attr",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_key": {
            "name": "test_key",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_call": {
            "name": "test_call",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_default": {
            "name": "test_default",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_other_data": {
            "name": "test_other_data",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "predico-master/tests/unit/injector/test_get_injected_value.py": {
        "test_get_injected_value_attr": {
            "name": "test_get_injected_value_attr",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_get_injected_value_missing_attr": {
            "name": "test_get_injected_value_missing_attr",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_get_injected_value_key": {
            "name": "test_get_injected_value_key",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_get_injected_value_missing_key": {
            "name": "test_get_injected_value_missing_key",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_get_injected_value_callable": {
            "name": "test_get_injected_value_callable",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_get_injected_value_no_call": {
            "name": "test_get_injected_value_no_call",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_get_injected_value_noncallable": {
            "name": "test_get_injected_value_noncallable",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "CallableSource.__call__": {
            "name": "__call__",
            "location": 13,
            "return": [
                "typing.Text",
                "str",
                "Optional[Mapping[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "predico-master/tests/unit/injector/test_injector.py": {
        "test_injector_props": {
            "name": "test_injector_props",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_injector_injected": {
            "name": "test_injector_injected",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_injector_injected_double": {
            "name": "test_injector_injected_double",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_injector_injected_callable": {
            "name": "test_injector_injected_callable",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_injector_injectedattr_missing_class": {
            "name": "test_injector_injectedattr_missing_class",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_injector_fielddefault": {
            "name": "test_injector_fielddefault",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_injector_precedence": {
            "name": "test_injector_precedence",
            "location": 100,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_injector_defaultvalue": {
            "name": "test_injector_defaultvalue",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_injector_defaultfactory": {
            "name": "test_injector_defaultfactory",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_injector_failure": {
            "name": "test_injector_failure",
            "location": 142,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_injector_injected_callable.CallableShoe.__call__": {
            "name": "__call__",
            "location": 60,
            "return": [
                "tuple",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "predico-master/tests/unit/predicates/conftest.py": {},
    "predico-master/tests/unit/predicates/test_base_predicate.py": {
        "base_predicate_value_string": {
            "name": "base_predicate_value_string",
            "location": 12,
            "return": [
                "Predicate",
                "str",
                "int",
                "float",
                "Optional[int]",
                "Optional[Dict]"
            ],
            "arguments": {}
        },
        "base_predicate_value_class": {
            "name": "base_predicate_value_class",
            "location": 18,
            "return": [
                "Predicate",
                "float",
                "List[int]",
                "str",
                "Type[T]",
                "bool"
            ],
            "arguments": {}
        },
        "test_construction": {
            "name": "test_construction",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "base_predicate_value_string": [
                    "str"
                ]
            }
        },
        "test_value_str": {
            "name": "test_value_str",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "base_predicate_value_string": [
                    "str",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "None"
                ]
            }
        },
        "test_value_class": {
            "name": "test_value_class",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "base_predicate_value_class": [
                    "Callable",
                    "typing.Callable[, ]",
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_matches_not_implemented": {
            "name": "test_matches_not_implemented",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "base_predicate_value_string": [
                    "str"
                ]
            }
        }
    },
    "predico-master/tests/unit/predicates/test_for_predicate.py": {
        "test_request": {
            "name": "test_request",
            "location": 12,
            "return": [
                "str",
                "FakeRequest"
            ],
            "arguments": {}
        },
        "for_predicate": {
            "name": "for_predicate",
            "location": 22,
            "return": [
                "ForPredicate",
                "Callable[[Mapping], T]",
                "List[List[str]]",
                "int",
                "str",
                "tuple"
            ],
            "arguments": {}
        },
        "test_construction": {
            "name": "test_construction",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "for_predicate": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "test_str": {
            "name": "test_str",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "for_predicate": [
                    "bool",
                    "str",
                    "Union[str, int]",
                    "int"
                ]
            }
        },
        "test_matches": {
            "name": "test_matches",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "for_predicate": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ],
                "test_request": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_not_matches": {
            "name": "test_not_matches",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "for_predicate": [
                    "dict",
                    "dict[, ]"
                ],
                "test_request": [
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "predico-master/tests/unit/predicates/test_parentid_predicate.py": {
        "fake_resource": {
            "name": "fake_resource",
            "location": 26,
            "return": [
                "FakeResource",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "another_resource": {
            "name": "another_resource",
            "location": 36,
            "return": [
                "FakeResource",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_request": {
            "name": "test_request",
            "location": 46,
            "return": [
                "str",
                "FakeRequest"
            ],
            "arguments": {
                "fake_resource": []
            }
        },
        "parentid_predicate": {
            "name": "parentid_predicate",
            "location": 52,
            "return": [
                "ParentIdPredicate",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "another_parentid_predicate": {
            "name": "another_parentid_predicate",
            "location": 58,
            "return": [
                "ParentIdPredicate",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "notmatches_parentid_predicate": {
            "name": "notmatches_parentid_predicate",
            "location": 64,
            "return": [
                "ParentIdPredicate",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_construction": {
            "name": "test_construction",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "parentid_predicate": [
                    "Optional[Exception]",
                    "Exception",
                    "Tuple[int]",
                    "None",
                    "tuple[int]"
                ]
            }
        },
        "test_str": {
            "name": "test_str",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "parentid_predicate": [
                    "Dict[str, float]",
                    "str",
                    "dict[str, float]"
                ]
            }
        },
        "test_matches": {
            "name": "test_matches",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "parentid_predicate": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "test_request": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_not_matches": {
            "name": "test_not_matches",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "notmatches_parentid_predicate": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "test_request": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "test_matches_args": {
            "name": "test_matches_args",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "another_parentid_predicate": [
                    "dict",
                    "float",
                    "dict[, ]"
                ],
                "test_request": [
                    "dict",
                    "float",
                    "dict[, ]"
                ],
                "another_resource": [
                    "dict",
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "test_not_matches_args": {
            "name": "test_not_matches_args",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "parentid_predicate": [
                    "List[Tuple[bool, Any]]",
                    "str",
                    "list[tuple[typing.Union[bool,typing.Any]]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "test_request": [
                    "List[Tuple[bool, Any]]",
                    "str",
                    "list[tuple[typing.Union[bool,typing.Any]]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "another_resource": [
                    "List[Tuple[bool, Any]]",
                    "str",
                    "list[tuple[typing.Union[bool,typing.Any]]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "predico-master/tests/unit/predicates/test_renderer_predicate.py": {
        "renderer_predicate": {
            "name": "renderer_predicate",
            "location": 12,
            "return": [
                "RendererPredicate",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_construction": {
            "name": "test_construction",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "renderer_predicate": [
                    "str"
                ]
            }
        },
        "test_str": {
            "name": "test_str",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "renderer_predicate": [
                    "Dict[str, float]",
                    "str",
                    "dict[str, float]"
                ]
            }
        },
        "test_matches": {
            "name": "test_matches",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "renderer_predicate": [
                    "str"
                ]
            }
        }
    },
    "predico-master/tests/unit/predicates/test_resourceid_predicate.py": {
        "another_resource": {
            "name": "another_resource",
            "location": 21,
            "return": [
                "AnotherFakeResource",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_resource": {
            "name": "test_resource",
            "location": 32,
            "return": [
                "FakeResource",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "test_request": {
            "name": "test_request",
            "location": 38,
            "return": [
                "str",
                "FakeRequest"
            ],
            "arguments": {
                "test_resource": []
            }
        },
        "resourceid_predicate": {
            "name": "resourceid_predicate",
            "location": 44,
            "return": [
                "ResourceIdPredicate",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "another_resourceid_predicate": {
            "name": "another_resourceid_predicate",
            "location": 50,
            "return": [
                "ResourceIdPredicate",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "notmatches_resourceid_predicate": {
            "name": "notmatches_resourceid_predicate",
            "location": 56,
            "return": [
                "ResourceIdPredicate",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_construction": {
            "name": "test_construction",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "resourceid_predicate": [
                    "Optional[Exception]",
                    "Exception",
                    "Tuple[int]",
                    "None",
                    "tuple[int]"
                ]
            }
        },
        "test_str": {
            "name": "test_str",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "resourceid_predicate": [
                    "Dict[str, float]",
                    "str",
                    "dict[str, float]"
                ]
            }
        },
        "test_matches": {
            "name": "test_matches",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "resourceid_predicate": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "test_request": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_not_matches": {
            "name": "test_not_matches",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "notmatches_resourceid_predicate": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "test_request": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "test_matches_args": {
            "name": "test_matches_args",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "another_resourceid_predicate": [
                    "dict",
                    "float",
                    "dict[, ]"
                ],
                "test_request": [
                    "dict",
                    "float",
                    "dict[, ]"
                ],
                "another_resource": [
                    "dict",
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "test_not_matches_args": {
            "name": "test_not_matches_args",
            "location": 88,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "resourceid_predicate": [
                    "List[Tuple[bool, Any]]",
                    "str",
                    "list[tuple[typing.Union[bool,typing.Any]]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "test_request": [
                    "List[Tuple[bool, Any]]",
                    "str",
                    "list[tuple[typing.Union[bool,typing.Any]]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "another_resource": [
                    "List[Tuple[bool, Any]]",
                    "str",
                    "list[tuple[typing.Union[bool,typing.Any]]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "predico-master/tests/unit/predicates/test_resource_predicate.py": {
        "test_resource": {
            "name": "test_resource",
            "location": 20,
            "return": [
                "FakeResource",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "another_resource": {
            "name": "another_resource",
            "location": 31,
            "return": [
                "AnotherFakeResource",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_request": {
            "name": "test_request",
            "location": 38,
            "return": [
                "str",
                "FakeRequest"
            ],
            "arguments": {
                "test_resource": []
            }
        },
        "resource_predicate": {
            "name": "resource_predicate",
            "location": 44,
            "return": [
                "ResourcePredicate",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "another_resource_predicate": {
            "name": "another_resource_predicate",
            "location": 50,
            "return": [
                "ResourcePredicate",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "notmatches_resource_predicate": {
            "name": "notmatches_resource_predicate",
            "location": 56,
            "return": [
                "ResourcePredicate",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_construction": {
            "name": "test_construction",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "resource_predicate": [
                    "str"
                ]
            }
        },
        "test_str": {
            "name": "test_str",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "resource_predicate": [
                    "str"
                ]
            }
        },
        "test_matches": {
            "name": "test_matches",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "resource_predicate": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "test_request": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_not_matches": {
            "name": "test_not_matches",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "notmatches_resource_predicate": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "test_request": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "test_matches_args": {
            "name": "test_matches_args",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "another_resource_predicate": [
                    "dict",
                    "float",
                    "dict[, ]"
                ],
                "test_request": [
                    "dict",
                    "float",
                    "dict[, ]"
                ],
                "another_resource": [
                    "dict",
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "test_not_matches_args": {
            "name": "test_not_matches_args",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "resource_predicate": [
                    "List[Tuple[bool, Any]]",
                    "str",
                    "list[tuple[typing.Union[bool,typing.Any]]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "test_request": [
                    "List[Tuple[bool, Any]]",
                    "str",
                    "list[tuple[typing.Union[bool,typing.Any]]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "another_resource": [
                    "List[Tuple[bool, Any]]",
                    "str",
                    "list[tuple[typing.Union[bool,typing.Any]]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "predico-master/tests/unit/predicates/test_templatestring_predicate.py": {
        "templatestring_predicate": {
            "name": "templatestring_predicate",
            "location": 8,
            "return": [
                "TemplateStringPredicate",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "test_construction": {
            "name": "test_construction",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "templatestring_predicate": [
                    "str",
                    "int",
                    "typing.Iterable[typing.Any]",
                    "Iterable[Any]",
                    "bool"
                ]
            }
        },
        "test_str": {
            "name": "test_str",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "templatestring_predicate": [
                    "Dict[str, float]",
                    "str",
                    "dict[str, float]"
                ]
            }
        },
        "test_matches": {
            "name": "test_matches",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "templatestring_predicate": [
                    "str"
                ]
            }
        }
    },
    "predico-master/tests/unit/predicate_actions/test_all_predicates_match.py": {
        "fake_good_request": {
            "name": "fake_good_request",
            "location": 48,
            "return": [
                "FakeRequest",
                "bytes",
                "float",
                "Sequence[float]",
                "Tuple[int, int]"
            ],
            "arguments": {}
        },
        "fake_bad_request": {
            "name": "fake_bad_request",
            "location": 55,
            "return": [
                "FakeRequest",
                "bytes",
                "float",
                "Sequence[float]",
                "Tuple[int, int]"
            ],
            "arguments": {}
        },
        "good_for_predicate": {
            "name": "good_for_predicate",
            "location": 70,
            "return": [
                "ForPredicate",
                "int",
                "float"
            ],
            "arguments": {}
        },
        "bad_for_predicate": {
            "name": "bad_for_predicate",
            "location": 76,
            "return": [
                "ForPredicate",
                "int",
                "float"
            ],
            "arguments": {}
        },
        "good_resource_predicate": {
            "name": "good_resource_predicate",
            "location": 82,
            "return": [
                "ResourcePredicate",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "bad_resource_predicate": {
            "name": "bad_resource_predicate",
            "location": 88,
            "return": [
                "ResourcePredicate",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "good_resourceid_predicate": {
            "name": "good_resourceid_predicate",
            "location": 94,
            "return": [
                "ResourceIdPredicate",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "bad_resourceid_predicate": {
            "name": "bad_resourceid_predicate",
            "location": 100,
            "return": [
                "ResourceIdPredicate",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "good_parentid_predicate": {
            "name": "good_parentid_predicate",
            "location": 106,
            "return": [
                "ParentIdPredicate",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "bad_parentid_predicate": {
            "name": "bad_parentid_predicate",
            "location": 112,
            "return": [
                "ParentIdPredicate",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_match_empty_predicates_list": {
            "name": "test_match_empty_predicates_list",
            "location": 117,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_good_request": [
                    "str",
                    "Union[int, slice]",
                    "int",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "good_for_predicate": [
                    "List[List[int]]",
                    "int",
                    "list[list[int]]"
                ]
            }
        },
        "test_match_for": {
            "name": "test_match_for",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_good_request": [
                    "int"
                ],
                "good_for_predicate": []
            }
        },
        "test_nomatch_for": {
            "name": "test_nomatch_for",
            "location": 129,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_good_request": [
                    "int"
                ],
                "bad_for_predicate": []
            }
        },
        "test_match_resource": {
            "name": "test_match_resource",
            "location": 137,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_good_request": [],
                "good_resource_predicate": []
            }
        },
        "test_nomatch_resource": {
            "name": "test_nomatch_resource",
            "location": 144,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_good_request": [],
                "bad_resource_predicate": []
            }
        },
        "test_match_resourceid": {
            "name": "test_match_resourceid",
            "location": 152,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_good_request": [],
                "good_resourceid_predicate": []
            }
        },
        "test_nomatch_resourceid": {
            "name": "test_nomatch_resourceid",
            "location": 159,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_good_request": [],
                "bad_resourceid_predicate": []
            }
        },
        "test_match_parentid": {
            "name": "test_match_parentid",
            "location": 166,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_good_request": [],
                "good_parentid_predicate": []
            }
        },
        "test_nomatch_parentid": {
            "name": "test_nomatch_parentid",
            "location": 173,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_good_request": [],
                "bad_parentid_predicate": []
            }
        },
        "test_good_for_good_resource": {
            "name": "test_good_for_good_resource",
            "location": 182,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_good_request": [
                    "int"
                ],
                "good_for_predicate": [],
                "good_resource_predicate": []
            }
        },
        "test_good_for_bad_resource": {
            "name": "test_good_for_bad_resource",
            "location": 191,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_good_request": [
                    "int"
                ],
                "good_for_predicate": [],
                "bad_resource_predicate": []
            }
        }
    },
    "predico-master/tests/unit/predicate_actions/test_exceptions.py": {
        "test_unknown_argument": {
            "name": "test_unknown_argument",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_missing_argument": {
            "name": "test_missing_argument",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_lookup_missing_argument": {
            "name": "test_lookup_missing_argument",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_predicate_matches_lookup": {
            "name": "test_predicate_matches_lookup",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "predico-master/tests/unit/predicate_actions/test_predicate_action.py": {
        "good_for_fva": {
            "name": "good_for_fva",
            "location": 28,
            "return": [
                "FakeViewAction",
                "int",
                "float"
            ],
            "arguments": {}
        },
        "good_resource_fva": {
            "name": "good_resource_fva",
            "location": 34,
            "return": [
                "FakeViewAction",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_required": {
            "name": "test_required",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "good_for_fva": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_bad_required": {
            "name": "test_bad_required",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_missing_required": {
            "name": "test_missing_required",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_optional": {
            "name": "test_optional",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "good_resource_fva": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_bad_optional": {
            "name": "test_bad_optional",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_missing_required_with_optional": {
            "name": "test_missing_required_with_optional",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "predico-master/tests/unit/predicate_actions/test_reject_predicates.py": {
        "good_for_predicate": {
            "name": "good_for_predicate",
            "location": 26,
            "return": [
                "ForPredicate",
                "int",
                "float"
            ],
            "arguments": {}
        },
        "good_resource_predicate": {
            "name": "good_resource_predicate",
            "location": 32,
            "return": [
                "ResourcePredicate",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_good_none": {
            "name": "test_good_none",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_good_for": {
            "name": "test_good_for",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "good_for_predicate": [
                    "str"
                ]
            }
        },
        "test_unknown_lookup": {
            "name": "test_unknown_lookup",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_lookup_missing_required": {
            "name": "test_lookup_missing_required",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "good_for_predicate": [
                    "str",
                    "bool",
                    "float",
                    "Union[str, float]",
                    "list[int]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "test_unknown_lookup_with_optional": {
            "name": "test_unknown_lookup_with_optional",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "good_resource_predicate": [
                    "str",
                    "float"
                ]
            }
        },
        "test_lookup_missing_required_with_optional": {
            "name": "test_lookup_missing_required_with_optional",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "good_for_predicate": [
                    "str",
                    "bool",
                    "float",
                    "Union[str, float]",
                    "list[int]",
                    "int",
                    "List[int]"
                ],
                "good_resource_predicate": [
                    "str",
                    "bool",
                    "float",
                    "Union[str, float]",
                    "list[int]",
                    "int",
                    "List[int]"
                ]
            }
        }
    },
    "predico-master/tests/unit/predicate_actions/test_sorted_actions.py": {
        "uncommitted_registry": {
            "name": "uncommitted_registry",
            "location": 37,
            "return": [
                "str",
                "FakePredicateApp"
            ],
            "arguments": {}
        },
        "for_view": {
            "name": "for_view",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "uncommitted_registry": [
                    "int"
                ]
            }
        },
        "resource_view": {
            "name": "resource_view",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "uncommitted_registry": [
                    "int"
                ]
            }
        },
        "committed_registry": {
            "name": "committed_registry",
            "location": 56,
            "return": [
                "int",
                "bool",
                "str",
                "Callable",
                "float"
            ],
            "arguments": {
                "uncommitted_registry": [
                    "bool",
                    "str",
                    "float"
                ],
                "for_view": [
                    "bool",
                    "str",
                    "int",
                    "list[int]",
                    "List[int]"
                ],
                "resource_view": [
                    "bool",
                    "str",
                    "int",
                    "list[int]",
                    "List[int]"
                ]
            }
        },
        "actions": {
            "name": "actions",
            "location": 62,
            "return": [
                "list[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "committed_registry": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Iterable[str]",
                    "typing.Iterable[str]",
                    "Sequence[T]",
                    "typing.Sequence[T]"
                ]
            }
        },
        "sorted_actions": {
            "name": "sorted_actions",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str",
                "dict[, ]",
                "list[int]",
                "list[list[int]]"
            ],
            "arguments": {
                "committed_registry": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "forview_action": {
            "name": "forview_action",
            "location": 75,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "actions": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_sorted_both": {
            "name": "test_sorted_both",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sorted_actions": []
            }
        }
    },
    "predico-master/tests/unit/servicemanager/conftest.py": {
        "test_registry": {
            "name": "test_registry",
            "location": 12,
            "return": [
                "TestServiceRegistry",
                "Mapping[str, Any]",
                "dict"
            ],
            "arguments": {}
        },
        "uninitialized_sm": {
            "name": "uninitialized_sm",
            "location": 22,
            "return": [
                "ServiceManager",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sm_config": [
                    "bool",
                    "List[str]",
                    "str",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "test_registry": [
                    "bool",
                    "List[str]",
                    "str",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "initialized_sm": {
            "name": "initialized_sm",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "uninitialized_sm": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "invalid_injectable_type": {
            "name": "invalid_injectable_type",
            "location": 36,
            "return": [
                "InvalidService",
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "test_registry": [
                    "typing.Type",
                    "Type",
                    "list[dict[, ]]",
                    "List[dict]",
                    "T",
                    "Type[Exception]"
                ]
            }
        }
    },
    "predico-master/tests/unit/servicemanager/test_service_manager.py": {
        "test_unintialized": {
            "name": "test_unintialized",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "uninitialized_sm": []
            }
        },
        "test_register_services": {
            "name": "test_register_services",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "initialized_sm": [
                    "str",
                    "float"
                ]
            }
        },
        "test_valid_injected": {
            "name": "test_valid_injected",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "initialized_sm": []
            }
        },
        "test_valid_injectedattr": {
            "name": "test_valid_injectedattr",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "initialized_sm": []
            }
        },
        "test_add_good_injectable": {
            "name": "test_add_good_injectable",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "initialized_sm": []
            }
        },
        "test_invalid_injectable": {
            "name": "test_invalid_injectable",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "invalid_injectable_type": [
                    "typing.Type",
                    "str",
                    "Type",
                    "Type[Any]"
                ],
                "uninitialized_sm": [
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "predico-master/tests/unit/servicemanager/test_service_manager_config.py": {
        "test_construction": {
            "name": "test_construction",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sm_config": []
            }
        }
    },
    "predico-master/tests/unit/servicemanager/test_service_registry.py": {
        "test_construction": {
            "name": "test_construction",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "test_registry": [
                    "str"
                ]
            }
        }
    },
    "predico-master/tests/unit/services/adapter/conftest.py": {
        "fake_resource1": {
            "name": "fake_resource1",
            "location": 24,
            "return": [
                "FakeResource",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "fake_article1": {
            "name": "fake_article1",
            "location": 37,
            "return": [
                "FakeArticle",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "fake_article2": {
            "name": "fake_article2",
            "location": 49,
            "return": [
                "FakeArticle",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "fake_article3": {
            "name": "fake_article3",
            "location": 56,
            "return": [
                "FakeArticle",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "fake_blog1": {
            "name": "fake_blog1",
            "location": 70,
            "return": [
                "FakeBlog",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "fake_request_class": {
            "name": "fake_request_class",
            "location": 81,
            "return": [
                "Callable[[], None]",
                "FakeRequest"
            ],
            "arguments": {}
        },
        "sm_registry": {
            "name": "sm_registry",
            "location": 86,
            "return": [
                "FakeServiceRegistry",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "uninitialized_sm": {
            "name": "uninitialized_sm",
            "location": 97,
            "return": [
                "ServiceManager",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sm_config": [
                    "Optional[int]",
                    "int",
                    "dict",
                    "None",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "sm_registry": [
                    "Optional[int]",
                    "int",
                    "dict",
                    "None",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "register_service": {
            "name": "register_service",
            "location": 115,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sm_registry": [
                    "bool",
                    "str"
                ]
            }
        },
        "fake_breadcrumbs_resources": {
            "name": "fake_breadcrumbs_resources",
            "location": 151,
            "return": [
                "FakeBreadcrumbsResources",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "fake_reference_entry": {
            "name": "fake_reference_entry",
            "location": 157,
            "return": [
                "FakeReferenceEntry",
                "str",
                "Dict[str, Any]",
                "Dict[int, Tuple[int, int]]"
            ],
            "arguments": {}
        },
        "fakefor_adapter": {
            "name": "fakefor_adapter",
            "location": 163,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sm_registry": [
                    "str",
                    "bool",
                    "typing.Iterable[str]",
                    "bytes",
                    "Iterable[str]",
                    "Union[str, bytes]"
                ]
            }
        },
        "fakeresource_adapter": {
            "name": "fakeresource_adapter",
            "location": 174,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sm_registry": [
                    "str",
                    "bool",
                    "typing.Iterable[str]",
                    "bytes",
                    "Iterable[str]",
                    "Union[str, bytes]"
                ]
            }
        },
        "fakearticle_adapter": {
            "name": "fakearticle_adapter",
            "location": 189,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sm_registry": [
                    "str",
                    "bool",
                    "typing.Iterable[str]",
                    "bytes",
                    "Iterable[str]",
                    "Union[str, bytes]"
                ]
            }
        },
        "fakesubresource_adapter": {
            "name": "fakesubresource_adapter",
            "location": 196,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sm_registry": [
                    "bool",
                    "Sequence['cirq.Qid']",
                    "typing.Sequence['cirq.Qid']"
                ]
            }
        },
        "fakeresourceid_adapter": {
            "name": "fakeresourceid_adapter",
            "location": 209,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sm_registry": [
                    "int",
                    "Union[int, float]",
                    "List['cirq.Qid']",
                    "float",
                    "list['cirq.Qid']",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "fakeparentid_adapter": {
            "name": "fakeparentid_adapter",
            "location": 221,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sm_registry": [
                    "List['cirq.Qid']",
                    "list['cirq.Qid']",
                    "int",
                    "Union[int, float]",
                    "float"
                ]
            }
        },
        "registrations": {
            "name": "registrations",
            "location": 228,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "initialized_sm": {
            "name": "initialized_sm",
            "location": 233,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "uninitialized_sm": [
                    "int",
                    "Callable",
                    "str"
                ],
                "register_service": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "registrations": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "services": {
            "name": "services",
            "location": 240,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "initialized_sm": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "adapterservice": {
            "name": "adapterservice",
            "location": 245,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "services": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "FakeBreadcrumbsResourcesAdapter.__call__": {
            "name": "__call__",
            "location": 130,
            "return": [
                "str",
                "Exception",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeSubresourceAdapter.__call__": {
            "name": "__call__",
            "location": 146,
            "return": [
                "str",
                "Exception",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeArticleAdapter.__call__": {
            "name": "__call__",
            "location": 184,
            "return": [
                "str",
                "Exception",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeResourceIdAdapter.__call__": {
            "name": "__call__",
            "location": 204,
            "return": [
                "str",
                "Exception",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "predico-master/tests/unit/services/adapter/test_adapterservice.py": {
        "test_adapterservice": {
            "name": "test_adapterservice",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "adapterservice": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "predico-master/tests/unit/services/adapter/test_adapterservice_config.py": {
        "test_construction": {
            "name": "test_construction",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "adapterservice_config": [
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "predico-master/tests/unit/services/adapter/test_adapter_get_adapter.py": {
        "test_has_get_adapter": {
            "name": "test_has_get_adapter",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "adapterservice": [
                    "str"
                ]
            }
        },
        "test_get_adapter_for": {
            "name": "test_get_adapter_for",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fakefor_adapter": [
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "adapterservice": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "fake_resource1": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "fake_breadcrumbs_resources": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "fake_request_class": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "test_get_adapter_for_nomatch_resource": {
            "name": "test_get_adapter_for_nomatch_resource",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fakefor_adapter": [
                    "str",
                    "bool"
                ],
                "fakearticle_adapter": [
                    "str",
                    "bool"
                ],
                "adapterservice": [],
                "fake_resource1": [
                    "str"
                ],
                "fake_breadcrumbs_resources": [],
                "fake_request_class": [
                    "str"
                ]
            }
        },
        "test_get_adapter_for_match_resource": {
            "name": "test_get_adapter_for_match_resource",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fakefor_adapter": [
                    "str",
                    "bool"
                ],
                "fakearticle_adapter": [
                    "str",
                    "bool"
                ],
                "adapterservice": [],
                "fake_article1": [
                    "str"
                ],
                "fake_breadcrumbs_resources": [],
                "fake_request_class": [
                    "str"
                ]
            }
        },
        "test_get_adapter_for_nomatch_resourceid": {
            "name": "test_get_adapter_for_nomatch_resourceid",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fakefor_adapter": [
                    "str",
                    "bool"
                ],
                "fakeresourceid_adapter": [
                    "str",
                    "bool"
                ],
                "adapterservice": [],
                "fake_article1": [
                    "str"
                ],
                "fake_breadcrumbs_resources": [],
                "fake_request_class": [
                    "str"
                ]
            }
        },
        "test_get_adapter_for_match_resourceid": {
            "name": "test_get_adapter_for_match_resourceid",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fakefor_adapter": [
                    "str",
                    "bool"
                ],
                "fakeresourceid_adapter": [
                    "str",
                    "bool"
                ],
                "adapterservice": [],
                "fake_article2": [
                    "str"
                ],
                "fake_breadcrumbs_resources": [],
                "fake_request_class": [
                    "str"
                ]
            }
        },
        "test_get_adapter_for_nomatch_parentid": {
            "name": "test_get_adapter_for_nomatch_parentid",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fakefor_adapter": [
                    "str",
                    "bool"
                ],
                "fakeparentid_adapter": [
                    "str",
                    "bool"
                ],
                "adapterservice": [],
                "fake_blog1": [
                    "str"
                ],
                "fake_breadcrumbs_resources": [],
                "fake_request_class": [
                    "str"
                ]
            }
        },
        "test_get_adapter_for_match_parentid": {
            "name": "test_get_adapter_for_match_parentid",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fakefor_adapter": [
                    "str",
                    "bool"
                ],
                "fakeparentid_adapter": [
                    "str",
                    "bool"
                ],
                "adapterservice": [],
                "fake_article2": [
                    "str"
                ],
                "fake_breadcrumbs_resources": [],
                "fake_request_class": [
                    "str"
                ]
            }
        },
        "test_get_adapter_for_parentid_match_resourceid": {
            "name": "test_get_adapter_for_parentid_match_resourceid",
            "location": 150,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fakefor_adapter": [
                    "str"
                ],
                "fakeresourceid_adapter": [
                    "str"
                ],
                "fakeparentid_adapter": [
                    "str"
                ],
                "adapterservice": [],
                "fake_article2": [
                    "str"
                ],
                "fake_breadcrumbs_resources": [],
                "fake_request_class": [
                    "str"
                ]
            }
        },
        "test_get_adapter_for_resource_match_parentid": {
            "name": "test_get_adapter_for_resource_match_parentid",
            "location": 173,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fakefor_adapter": [
                    "str"
                ],
                "fakeresource_adapter": [
                    "str"
                ],
                "fakeparentid_adapter": [
                    "str"
                ],
                "adapterservice": [],
                "fake_article2": [
                    "str"
                ],
                "fake_breadcrumbs_resources": [],
                "fake_request_class": [
                    "str"
                ]
            }
        },
        "test_get_adapter_for_resource_parentid_match_resourceid": {
            "name": "test_get_adapter_for_resource_parentid_match_resourceid",
            "location": 196,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fakefor_adapter": [
                    "str",
                    "bool"
                ],
                "fakeresource_adapter": [
                    "str",
                    "bool"
                ],
                "fakeparentid_adapter": [
                    "str",
                    "bool"
                ],
                "fakeresourceid_adapter": [
                    "str",
                    "bool"
                ],
                "adapterservice": [],
                "fake_article2": [
                    "str"
                ],
                "fake_breadcrumbs_resources": [],
                "fake_request_class": [
                    "str"
                ]
            }
        },
        "test_get_adapter_for_passed_in_resource": {
            "name": "test_get_adapter_for_passed_in_resource",
            "location": 220,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fakefor_adapter": [
                    "str",
                    "bool"
                ],
                "fakesubresource_adapter": [
                    "str",
                    "bool"
                ],
                "adapterservice": [],
                "fake_article1": [
                    "str"
                ],
                "fake_article3": [],
                "fake_reference_entry": [],
                "fake_request_class": [
                    "str"
                ]
            }
        }
    },
    "predico-master/tests/unit/services/request/conftest.py": {
        "fake_article1": {
            "name": "fake_article1",
            "location": 30,
            "return": [
                "FakeArticle",
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "fake_article2": {
            "name": "fake_article2",
            "location": 36,
            "return": [
                "FakeArticle",
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "fake_breadcrumbs_resources": {
            "name": "fake_breadcrumbs_resources",
            "location": 68,
            "return": [
                "FakeBreadcrumbsResources",
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "sm_registry": {
            "name": "sm_registry",
            "location": 78,
            "return": [
                "FakeServiceRegistry",
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "uninitialized_sm": {
            "name": "uninitialized_sm",
            "location": 92,
            "return": [
                "ServiceManager",
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "sm_config": [
                    "Optional[int]",
                    "int",
                    "dict",
                    "None",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "sm_registry": [
                    "Optional[int]",
                    "int",
                    "dict",
                    "None",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "register_service": {
            "name": "register_service",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sm_registry": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "initialized_sm": {
            "name": "initialized_sm",
            "location": 109,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "uninitialized_sm": [
                    "int",
                    "sublime.View",
                    "Callable",
                    "str"
                ],
                "register_service": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "registrations": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "services": {
            "name": "services",
            "location": 116,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "initialized_sm": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "sublime.View",
                    "Callable"
                ]
            }
        },
        "requestservice": {
            "name": "requestservice",
            "location": 121,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "services": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "resourceservice": {
            "name": "resourceservice",
            "location": 126,
            "return": [
                "str",
                "int",
                "sublime.View",
                "Callable"
            ],
            "arguments": {
                "services": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "viewservice": {
            "name": "viewservice",
            "location": 131,
            "return": [
                "str",
                "int",
                "sublime.View",
                "Callable"
            ],
            "arguments": {
                "services": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "fakearticle_view": {
            "name": "fakearticle_view",
            "location": 136,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sm_registry": [
                    "int",
                    "defx.view.View"
                ]
            }
        },
        "fake_templatestring_view": {
            "name": "fake_templatestring_view",
            "location": 141,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sm_registry": [
                    "int",
                    "float",
                    "Any",
                    "typing.Any"
                ]
            }
        },
        "fakearticle_adapter": {
            "name": "fakearticle_adapter",
            "location": 148,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sm_registry": [
                    "str",
                    "bool",
                    "typing.Iterable[str]",
                    "bytes",
                    "Iterable[str]",
                    "Union[str, bytes]"
                ]
            }
        },
        "FakeBreadcrumbsResourcesAdapter.__call__": {
            "name": "__call__",
            "location": 63,
            "return": [
                "FakeBreadcrumbsResourcesAdapter",
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "predico-master/tests/unit/services/request/test_requestservice.py": {
        "test_requestservice": {
            "name": "test_requestservice",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "requestservice": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "predico-master/tests/unit/services/request/test_requestservice_config.py": {
        "test_construction": {
            "name": "test_construction",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "requestservice_config": []
            }
        }
    },
    "predico-master/tests/unit/services/request/test_requestservice_makecustomrequest.py": {
        "requestservice_config": {
            "name": "requestservice_config",
            "location": 19,
            "return": [
                "RequestServiceConfig",
                "str",
                "dict",
                "Optional[dict]",
                "app.config.MQConfig",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "test_custom_request_factory": {
            "name": "test_custom_request_factory",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "requestservice": [
                    "bool"
                ],
                "requestservice_config": []
            }
        },
        "test_make_custom_request": {
            "name": "test_make_custom_request",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "requestservice": []
            }
        },
        "test_make_custom_request_props": {
            "name": "test_make_custom_request_props",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "requestservice": []
            }
        }
    },
    "predico-master/tests/unit/services/request/test_requestservice_makerequest.py": {
        "test_has_make_request": {
            "name": "test_has_make_request",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "requestservice": []
            }
        },
        "test_make_request": {
            "name": "test_make_request",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "requestservice": [
                    "int"
                ]
            }
        },
        "test_get_request_resource": {
            "name": "test_get_request_resource",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "requestservice": [
                    "str"
                ],
                "resourceservice": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "None",
                    "Callable[[List, bool], None]",
                    "list[str]",
                    "typing.Callable[List,bool, None]"
                ],
                "fake_article1": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "None",
                    "Callable[[List, bool], None]",
                    "list[str]",
                    "typing.Callable[List,bool, None]"
                ]
            }
        },
        "test_get_request_view": {
            "name": "test_get_request_view",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fakearticle_view": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "requestservice": [
                    "str"
                ],
                "resourceservice": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "None",
                    "Callable[[List, bool], None]",
                    "list[str]",
                    "typing.Callable[List,bool, None]"
                ],
                "fake_article1": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "None",
                    "Callable[[List, bool], None]",
                    "list[str]",
                    "typing.Callable[List,bool, None]"
                ]
            }
        },
        "test_get_request_adapters": {
            "name": "test_get_request_adapters",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fakearticle_adapter": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "requestservice": [
                    "str"
                ],
                "resourceservice": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "None",
                    "Callable[[List, bool], None]",
                    "list[str]",
                    "typing.Callable[List,bool, None]"
                ],
                "fake_article1": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "None",
                    "Callable[[List, bool], None]",
                    "list[str]",
                    "typing.Callable[List,bool, None]"
                ],
                "fake_breadcrumbs_resources": [
                    "str",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "test_adapt_resource": {
            "name": "test_adapt_resource",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fakearticle_adapter": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "requestservice": [
                    "str",
                    "float"
                ],
                "resourceservice": [],
                "fake_article1": [],
                "fake_article2": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "fake_breadcrumbs_resources": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        }
    },
    "predico-master/tests/unit/services/request/test_request_render.py": {
        "test_get_templatestring_view": {
            "name": "test_get_templatestring_view",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_templatestring_view": [
                    "str",
                    "bool"
                ],
                "requestservice": [
                    "bool",
                    "str",
                    "Dict[str, float]"
                ],
                "resourceservice": [
                    "bool"
                ],
                "fake_article1": [
                    "bool"
                ]
            }
        }
    },
    "predico-master/tests/unit/services/resource/conftest.py": {
        "sm_registry": {
            "name": "sm_registry",
            "location": 13,
            "return": [
                "FakeServiceRegistry",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "register_service": {
            "name": "register_service",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sm_registry": [
                    "str"
                ]
            }
        },
        "registrations": {
            "name": "registrations",
            "location": 29,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "sm_registry": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "initialized_sm": {
            "name": "initialized_sm",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "uninitialized_sm": [
                    "int",
                    "Callable",
                    "str"
                ],
                "register_service": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "registrations": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "services": {
            "name": "services",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "initialized_sm": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "resourceservice": {
            "name": "resourceservice",
            "location": 46,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "services": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "fake_article": {
            "name": "fake_article",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "uninitialized_sm": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "fake_section": {
            "name": "fake_section",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "uninitialized_sm": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_resources": {
            "name": "test_resources",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "resourceservice": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestArticle.parentids": {
            "name": "parentids",
            "location": 58,
            "return": [
                "list[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSection.parentids": {
            "name": "parentids",
            "location": 80,
            "return": [
                "list[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "predico-master/tests/unit/services/resource/test_resources.py": {
        "fake_resources": {
            "name": "fake_resources",
            "location": 7,
            "return": [
                "Resources",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_construction": {
            "name": "test_construction",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_resources": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_dict_operations": {
            "name": "test_dict_operations",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_resources": [
                    "str"
                ]
            }
        }
    },
    "predico-master/tests/unit/services/resource/test_resourceservice.py": {
        "test_resourceservice": {
            "name": "test_resourceservice",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "resourceservice": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "predico-master/tests/unit/services/resource/test_resourceservice_config.py": {
        "test_construction": {
            "name": "test_construction",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "resourceservice_config": [
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "predico-master/tests/unit/services/resource/test_resourceservice_get.py": {
        "test_has_methods": {
            "name": "test_has_methods",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "resourceservice": []
            }
        },
        "test_add_get_resource": {
            "name": "test_add_get_resource",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_section": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "resourceservice": []
            }
        }
    },
    "predico-master/tests/unit/services/view/conftest.py": {
        "fake_resource1": {
            "name": "fake_resource1",
            "location": 24,
            "return": [
                "FakeResource",
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "fake_article1": {
            "name": "fake_article1",
            "location": 37,
            "return": [
                "FakeArticle",
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "fake_article2": {
            "name": "fake_article2",
            "location": 43,
            "return": [
                "FakeArticle",
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "fake_blog1": {
            "name": "fake_blog1",
            "location": 57,
            "return": [
                "FakeBlog",
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "fake_request_class": {
            "name": "fake_request_class",
            "location": 68,
            "return": [
                "Callable[[], None]",
                "FakeRequest"
            ],
            "arguments": {}
        },
        "sm_registry": {
            "name": "sm_registry",
            "location": 74,
            "return": [
                "FakeServiceRegistry",
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "uninitialized_sm": {
            "name": "uninitialized_sm",
            "location": 85,
            "return": [
                "ServiceManager",
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "sm_config": [
                    "Optional[int]",
                    "int",
                    "dict",
                    "None",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "sm_registry": [
                    "Optional[int]",
                    "int",
                    "dict",
                    "None",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "register_service": {
            "name": "register_service",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sm_registry": [
                    "bool",
                    "str"
                ]
            }
        },
        "fake_view": {
            "name": "fake_view",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sm_registry": [
                    "int",
                    "defx.view.View"
                ]
            }
        },
        "fakeresource_view": {
            "name": "fakeresource_view",
            "location": 123,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sm_registry": [
                    "int",
                    "defx.view.View"
                ]
            }
        },
        "fakearticle_view": {
            "name": "fakearticle_view",
            "location": 133,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sm_registry": [
                    "int",
                    "defx.view.View"
                ]
            }
        },
        "fakeresourceid_view": {
            "name": "fakeresourceid_view",
            "location": 143,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sm_registry": [
                    "str",
                    "int",
                    "googleapicliendiscovery.Resource"
                ]
            }
        },
        "fakeparentid_view": {
            "name": "fakeparentid_view",
            "location": 153,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sm_registry": [
                    "bool",
                    "int"
                ]
            }
        },
        "registrations": {
            "name": "registrations",
            "location": 158,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "initialized_sm": {
            "name": "initialized_sm",
            "location": 163,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "uninitialized_sm": [
                    "int",
                    "sublime.View",
                    "Callable",
                    "str"
                ],
                "register_service": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "registrations": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "services": {
            "name": "services",
            "location": 170,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "initialized_sm": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "sublime.View",
                    "Callable"
                ]
            }
        },
        "viewservice": {
            "name": "viewservice",
            "location": 175,
            "return": [
                "str",
                "int",
                "sublime.View",
                "Callable"
            ],
            "arguments": {
                "services": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "predico-master/tests/unit/services/view/test_viewservice.py": {
        "test_viewservice": {
            "name": "test_viewservice",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "viewservice": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "predico-master/tests/unit/services/view/test_viewservice_config.py": {
        "test_construction": {
            "name": "test_construction",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "viewservice_config": [
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "predico-master/tests/unit/services/view/test_view_get_view.py": {
        "test_has_get_view": {
            "name": "test_has_get_view",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "viewservice": [
                    "str"
                ]
            }
        },
        "test_get_view_for": {
            "name": "test_get_view_for",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_view": [],
                "viewservice": [
                    "str"
                ],
                "fake_resource1": [
                    "str",
                    "int"
                ],
                "fake_request_class": [
                    "str",
                    "int"
                ]
            }
        },
        "test_get_view_nomatch_resource": {
            "name": "test_get_view_nomatch_resource",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_view": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "fakearticle_view": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "viewservice": [
                    "str",
                    "int",
                    "AbstractSet",
                    "typing.AbstractSet"
                ],
                "fake_resource1": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "bool"
                ],
                "fake_request_class": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "test_get_view_match_resource": {
            "name": "test_get_view_match_resource",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_view": [
                    "str",
                    "bool"
                ],
                "fakearticle_view": [
                    "str",
                    "bool"
                ],
                "viewservice": [
                    "Sequence[str]",
                    "str",
                    "typing.Sequence[str]",
                    "int"
                ],
                "fake_article1": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]"
                ],
                "fake_request_class": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_get_view_nomatch_resourceid": {
            "name": "test_get_view_nomatch_resourceid",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_view": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "fakeresourceid_view": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "viewservice": [
                    "str",
                    "int",
                    "AbstractSet",
                    "typing.AbstractSet"
                ],
                "fake_article1": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "bool"
                ],
                "fake_request_class": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "test_get_view_match_resourceid": {
            "name": "test_get_view_match_resourceid",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_view": [
                    "str",
                    "bool"
                ],
                "fakeresourceid_view": [
                    "str",
                    "bool"
                ],
                "viewservice": [
                    "Sequence[str]",
                    "str",
                    "typing.Sequence[str]",
                    "int"
                ],
                "fake_article2": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]"
                ],
                "fake_request_class": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_get_view_nomatch_parentid": {
            "name": "test_get_view_nomatch_parentid",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_view": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "fakeparentid_view": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "viewservice": [
                    "str",
                    "int",
                    "AbstractSet",
                    "typing.AbstractSet"
                ],
                "fake_blog1": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "bool"
                ],
                "fake_request_class": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "test_get_view_match_parentid": {
            "name": "test_get_view_match_parentid",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_view": [
                    "str",
                    "bool"
                ],
                "fakeparentid_view": [
                    "str",
                    "bool"
                ],
                "viewservice": [
                    "Sequence[str]",
                    "str",
                    "typing.Sequence[str]",
                    "int"
                ],
                "fake_article2": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]"
                ],
                "fake_request_class": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_get_view_parentid_match_resourceid": {
            "name": "test_get_view_parentid_match_resourceid",
            "location": 131,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_view": [
                    "str",
                    "bool"
                ],
                "fakeresourceid_view": [
                    "str",
                    "bool"
                ],
                "fakeparentid_view": [
                    "str",
                    "bool"
                ],
                "viewservice": [],
                "fake_article2": [
                    "str"
                ],
                "fake_request_class": [
                    "str"
                ]
            }
        },
        "test_get_view_resource_match_parentid": {
            "name": "test_get_view_resource_match_parentid",
            "location": 151,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_view": [
                    "str",
                    "bool"
                ],
                "fakeresource_view": [
                    "str",
                    "bool"
                ],
                "fakeparentid_view": [
                    "str",
                    "bool"
                ],
                "viewservice": [],
                "fake_article2": [
                    "str"
                ],
                "fake_request_class": [
                    "str"
                ]
            }
        },
        "test_get_view_resource_parentid_match_resourceid": {
            "name": "test_get_view_resource_parentid_match_resourceid",
            "location": 171,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_view": [
                    "str",
                    "bool"
                ],
                "fakeresource_view": [
                    "str",
                    "bool"
                ],
                "fakeparentid_view": [
                    "str",
                    "bool"
                ],
                "fakeresourceid_view": [
                    "str",
                    "bool"
                ],
                "viewservice": [],
                "fake_article2": [
                    "str"
                ],
                "fake_request_class": [
                    "str"
                ]
            }
        }
    },
    "predico-master/tests/unit/services/view/test_view_renderers.py": {
        "string_format_renderer": {
            "name": "string_format_renderer",
            "location": 14,
            "return": [
                "StringFormatRenderer",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "test_construction": {
            "name": "test_construction",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "string_format_renderer": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_render": {
            "name": "test_render",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "string_format_renderer": [
                    "str"
                ]
            }
        }
    }
}
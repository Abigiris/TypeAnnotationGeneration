{
    "predictiveness-curve-master/setup.py": {},
    "predictiveness-curve-master/docs/source/conf.py": {},
    "predictiveness-curve-master/predictiveness_curve/base.py": {
        "_normalize": {
            "name": "_normalize",
            "location": 14,
            "return": [],
            "arguments": {
                "arr": []
            }
        },
        "_set_axes": {
            "name": "_set_axes",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [],
                "lim": [],
                "fontsize": [
                    "int"
                ]
            }
        },
        "plot_predictiveness_curve": {
            "name": "plot_predictiveness_curve",
            "location": 25,
            "return": [],
            "arguments": {
                "risks": [],
                "labels": [],
                "classes": [
                    "Sequence"
                ],
                "normalize": [
                    "bool"
                ],
                "points": [
                    "int"
                ],
                "figsize": [
                    "Sequence"
                ],
                "fontsize": [
                    "int"
                ],
                "kind": [
                    "str"
                ],
                "xlabel": [
                    "str"
                ],
                "top_ylabel": [
                    "str"
                ],
                "bottom_ylabel": [
                    "str"
                ]
            }
        },
        "calculate_enrichment_factor": {
            "name": "calculate_enrichment_factor",
            "location": 192,
            "return": [],
            "arguments": {
                "scores": [],
                "labels": [],
                "classes": [
                    "list[int]"
                ],
                "threshold": [
                    "float"
                ]
            }
        },
        "convert_label_to_zero_or_one": {
            "name": "convert_label_to_zero_or_one",
            "location": 276,
            "return": [],
            "arguments": {
                "labels": [],
                "classes": []
            }
        },
        "calculate_enrichment_factor.f": {
            "name": "f",
            "location": 224,
            "return": [
                "int"
            ],
            "arguments": {
                "threshold": []
            }
        },
        "plot_predictiveness_curve.f": {
            "name": "f",
            "location": 140,
            "return": [
                "int"
            ],
            "arguments": {
                "point": []
            }
        }
    },
    "predictiveness-curve-master/predictiveness_curve/__init__.py": {},
    "predictiveness-curve-master/tests/test_convert_label.py": {
        "test_zero_and_one_label": {
            "name": "test_zero_and_one_label",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "labels": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "test_a_anb_b_labels": {
            "name": "test_a_anb_b_labels",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "labels": [
                    "str",
                    "float"
                ]
            }
        },
        "test_b_anb_a_labels": {
            "name": "test_b_anb_a_labels",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "labels": [
                    "str",
                    "float"
                ]
            }
        },
        "test_classes_type": {
            "name": "test_classes_type",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "classes": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Type[T]",
                    "typing.Type",
                    "Iterator[Any]",
                    "typing.Iterator"
                ]
            }
        },
        "test_labels_and_classes_unmatch": {
            "name": "test_labels_and_classes_unmatch",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_more_than_two_labels": {
            "name": "test_more_than_two_labels",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "predictiveness-curve-master/tests/test_enrichment_factor.py": {
        "test_calculate_enrichiment_factor": {
            "name": "test_calculate_enrichiment_factor",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_input_type": {
            "name": "test_input_type",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "scores": [
                    "str",
                    "numpy.array",
                    "np.ndarray[np.ndarray[int]]"
                ],
                "labels": [
                    "str",
                    "numpy.array",
                    "np.ndarray[np.ndarray[int]]"
                ]
            }
        },
        "test_calculate_enrichiment_factor_for_probabilities_": {
            "name": "test_calculate_enrichiment_factor_for_probabilities_",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_int_threshold_error": {
            "name": "test_int_threshold_error",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "threshold": []
            }
        },
        "test_float_threshold_error": {
            "name": "test_float_threshold_error",
            "location": 117,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "threshold": []
            }
        },
        "test_int_threshold": {
            "name": "test_int_threshold",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_labels_and_classes_unmatch": {
            "name": "test_labels_and_classes_unmatch",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_warning": {
            "name": "test_warning",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_converting_label": {
            "name": "test_converting_label",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "predictiveness-curve-master/tests/test_init.py": {
        "test_version": {
            "name": "test_version",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "predictiveness-curve-master/tests/test_predictiveness_curve.py": {
        "test_normalize": {
            "name": "test_normalize",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "arr": [
                    "str",
                    "bool",
                    "typing.Mapping",
                    "Mapping[str, str]",
                    "list[]",
                    "list",
                    "int"
                ],
                "expect": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "test_set_axes": {
            "name": "test_set_axes",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "lim": [
                    "str"
                ],
                "fontsize": []
            }
        },
        "test_predictiveness_curve": {
            "name": "test_predictiveness_curve",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_display_arguments": {
            "name": "test_display_arguments",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_kind_error": {
            "name": "test_kind_error",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calculate_risk_percentiles_for_TPR": {
            "name": "test_calculate_risk_percentiles_for_TPR",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calculate_risk_percentiles_for_EF": {
            "name": "test_calculate_risk_percentiles_for_EF",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_labels_and_classes_unmatch": {
            "name": "test_labels_and_classes_unmatch",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_converting_label": {
            "name": "test_converting_label",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calculate_risk_percentiles_for_TPR.f": {
            "name": "f",
            "location": 312,
            "return": [
                "int"
            ],
            "arguments": {
                "point": []
            }
        },
        "test_calculate_risk_percentiles_for_EF.f": {
            "name": "f",
            "location": 333,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "point": [
                    "int",
                    "str"
                ]
            }
        }
    }
}
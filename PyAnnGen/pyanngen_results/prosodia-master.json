{
    "prosodia-master/setup.py": {},
    "prosodia-master/src/prosodia/__init__.py": {},
    "prosodia-master/src/prosodia/base/__init__.py": {},
    "prosodia-master/src/prosodia/base/augmentedbnf/_intermediate_parser.py": {
        "create_intermediate_language": {
            "name": "create_intermediate_language",
            "location": 9,
            "return": [
                "prosodia.core.grammar.Language"
            ],
            "arguments": {}
        },
        "create_intermediate_augmentedbnf": {
            "name": "create_intermediate_augmentedbnf",
            "location": 13,
            "return": [
                "prosodia.core.grammar.Grammar[prosodia.core.grammar.Language]"
            ],
            "arguments": {}
        }
    },
    "prosodia-master/src/prosodia/base/augmentedbnf/_intermediate_text.py": {},
    "prosodia-master/src/prosodia/base/augmentedbnf/_intermediate_transform.py": {
        "rule_reference_accum": {
            "name": "rule_reference_accum",
            "location": 11,
            "return": [
                "g.Term"
            ],
            "arguments": {
                "values": [
                    "Tuple[str]"
                ]
            }
        },
        "syntax_accum": {
            "name": "syntax_accum",
            "location": 15,
            "return": [
                "g.Language"
            ],
            "arguments": {
                "values": [
                    "Tuple[(Sequence[Union[(g.Rule, Tuple[(str, List[g.TermGroup])])]], None)]"
                ]
            }
        },
        "rule_accum": {
            "name": "rule_accum",
            "location": 35,
            "return": [
                "Union[(g.Rule, Tuple[(str, List[g.TermGroup])])]"
            ],
            "arguments": {
                "values": [
                    "Tuple[(None, str, None, str, None, List[g.TermGroup], Sequence[None])]"
                ]
            }
        },
        "expression_accum": {
            "name": "expression_accum",
            "location": 54,
            "return": [
                "List[g.TermGroup]"
            ],
            "arguments": {
                "values": [
                    "Tuple[(g.TermGroup, Sequence[g.TermGroup])]"
                ]
            }
        },
        "list_accum": {
            "name": "list_accum",
            "location": 64,
            "return": [
                "g.TermGroup"
            ],
            "arguments": {
                "values": [
                    "Tuple[(g.Term, Sequence[g.Term])]"
                ]
            }
        },
        "text_accum_1": {
            "name": "text_accum_1",
            "location": 70,
            "return": [
                "g.Literal"
            ],
            "arguments": {
                "values": [
                    "Tuple[str]"
                ]
            }
        },
        "text_accum_2": {
            "name": "text_accum_2",
            "location": 76,
            "return": [
                "g.Literal"
            ],
            "arguments": {
                "values": [
                    "Tuple[(str, g.Literal)]"
                ]
            }
        },
        "literal_range_accum1": {
            "name": "literal_range_accum1",
            "location": 82,
            "return": [
                "g.LiteralRange"
            ],
            "arguments": {
                "values": [
                    "Tuple[(str, str, str)]"
                ]
            }
        },
        "literal_range_accum2": {
            "name": "literal_range_accum2",
            "location": 89,
            "return": [
                "g.LiteralRange"
            ],
            "arguments": {
                "values": [
                    "Tuple[(str, str, str, str, str)]"
                ]
            }
        },
        "repeat_body_accum1": {
            "name": "repeat_body_accum1",
            "location": 97,
            "return": [
                "Tuple[(int, Optional[int])]"
            ],
            "arguments": {
                "values": [
                    "Tuple[(Sequence[str], str, Sequence[str])]"
                ]
            }
        },
        "repeat_body_accum2": {
            "name": "repeat_body_accum2",
            "location": 111,
            "return": [
                "Tuple[(int, Optional[int])]"
            ],
            "arguments": {
                "values": [
                    "Tuple[str]"
                ]
            }
        },
        "expression_end_accum": {
            "name": "expression_end_accum",
            "location": 118,
            "return": [
                "g.TermGroup"
            ],
            "arguments": {
                "values": [
                    "Tuple[(None, str, None, g.TermGroup)]"
                ]
            }
        },
        "list_end_accum": {
            "name": "list_end_accum",
            "location": 124,
            "return": [
                "g.Term"
            ],
            "arguments": {
                "values": [
                    "Tuple[(Sequence[str], g.Term)]"
                ]
            }
        },
        "number_accum": {
            "name": "number_accum",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "values": [
                    "Tuple[(str, Sequence[str])]"
                ]
            }
        },
        "rule_name_accum": {
            "name": "rule_name_accum",
            "location": 139,
            "return": [
                "str"
            ],
            "arguments": {
                "values": [
                    "Tuple[(str, Sequence[str])]"
                ]
            }
        },
        "text_accum": {
            "name": "text_accum",
            "location": 148,
            "return": [
                "g.Literal"
            ],
            "arguments": {
                "values": [
                    "Tuple[Sequence[str]]"
                ]
            }
        },
        "_repeat_term_accum1": {
            "name": "_repeat_term_accum1",
            "location": 158,
            "return": [
                "g.Term"
            ],
            "arguments": {
                "values": [
                    "Tuple[(Tuple[(int, Optional[int])], g.Term)]"
                ]
            }
        },
        "_repeat_term_accum2": {
            "name": "_repeat_term_accum2",
            "location": 165,
            "return": [
                "g.Term"
            ],
            "arguments": {
                "values": [
                    "Tuple[(str, g.Term, str)]"
                ]
            }
        },
        "_string_literal_accum1": {
            "name": "_string_literal_accum1",
            "location": 171,
            "return": [
                "g.Literal"
            ],
            "arguments": {
                "values": [
                    "Tuple[Sequence[str]]"
                ]
            }
        },
        "_string_literal_accum2": {
            "name": "_string_literal_accum2",
            "location": 177,
            "return": [
                "g.Literal"
            ],
            "arguments": {
                "values": [
                    "Tuple[(str, Sequence[str])]"
                ]
            }
        },
        "_group_term_accum": {
            "name": "_group_term_accum",
            "location": 190,
            "return": [
                "g.Term"
            ],
            "arguments": {
                "values": [
                    "Tuple[(str, None, List[g.TermGroup], None, str)]"
                ]
            }
        }
    },
    "prosodia-master/src/prosodia/base/augmentedbnf/_parser.py": {
        "create_language": {
            "name": "create_language",
            "location": 9,
            "return": [
                "bool",
                "str",
                "float",
                "int"
            ],
            "arguments": {}
        },
        "create_augmentedbnf": {
            "name": "create_augmentedbnf",
            "location": 15,
            "return": [
                "float",
                "Grammar"
            ],
            "arguments": {}
        }
    },
    "prosodia-master/src/prosodia/base/augmentedbnf/_text.py": {},
    "prosodia-master/src/prosodia/base/augmentedbnf/_transform.py": {
        "rule_reference_accum": {
            "name": "rule_reference_accum",
            "location": 14,
            "return": [
                "Dict[str, Any]",
                "Sequence[Any]",
                "bool"
            ],
            "arguments": {
                "values": [
                    "str",
                    "nj.core.MongoObject_T"
                ]
            }
        },
        "syntax_accum": {
            "name": "syntax_accum",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "values": [
                    "str",
                    "list[float]",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "rule_accum": {
            "name": "rule_accum",
            "location": 38,
            "return": [
                "tuple[str]",
                "float",
                "str",
                "Generator",
                "dict",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "values": [
                    "str",
                    "int",
                    "bool",
                    "Optional[Any]",
                    "T"
                ]
            }
        },
        "expression_accum": {
            "name": "expression_accum",
            "location": 57,
            "return": [
                "list[typing.Union[str,T]]",
                "bool",
                "str",
                "Iterable['cirq.Qid']",
                "Optional[str]"
            ],
            "arguments": {
                "values": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "list[T]",
                    "Sequence[Tuple[str, str]]",
                    "List[T]",
                    "T"
                ]
            }
        },
        "list_accum": {
            "name": "list_accum",
            "location": 67,
            "return": [
                "bool",
                "int",
                "str",
                "tuple"
            ],
            "arguments": {
                "values": [
                    "str",
                    "dict",
                    "T"
                ]
            }
        },
        "text_accum_1": {
            "name": "text_accum_1",
            "location": 73,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "values": [
                    "tuple[str]",
                    "str",
                    "Tuple[str]",
                    "float"
                ]
            }
        },
        "text_accum_2": {
            "name": "text_accum_2",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "values": [
                    "str",
                    "bool",
                    "Union[str, int, float]"
                ]
            }
        },
        "literal_range_accum1": {
            "name": "literal_range_accum1",
            "location": 85,
            "return": [
                "Iterable[int]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,str,str]]",
                    "str",
                    "Tuple[str, str, str]",
                    "Tuple[str]",
                    "Tuple[str, str]",
                    "int",
                    "Union[int, str]"
                ]
            }
        },
        "literal_range_accum2": {
            "name": "literal_range_accum2",
            "location": 92,
            "return": [
                "Iterable[int]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,str,str,str,str]]",
                    "Tuple[str, str, str, str, str]",
                    "int",
                    "Tuple[str, str, str]",
                    "Optional[bool]",
                    "Tuple[str]",
                    "Tuple[str, str]",
                    "bool"
                ]
            }
        },
        "repeat_body_accum1": {
            "name": "repeat_body_accum1",
            "location": 100,
            "return": [
                "tuple[typing.Optional[int]]",
                "str",
                "Optional[str]",
                "T"
            ],
            "arguments": {
                "values": [
                    "str",
                    "Optional[int]",
                    "Optional[float]",
                    "Dict[Tuple[Any, str], int]"
                ]
            }
        },
        "repeat_body_accum2": {
            "name": "repeat_body_accum2",
            "location": 114,
            "return": [
                "tuple[int]",
                "src.core.model.action_resulActionResult",
                "Tuple[Any, int]",
                "\"Position\""
            ],
            "arguments": {
                "values": [
                    "tuple[str]",
                    "str",
                    "Tuple[str]",
                    "list[str]",
                    "Tuple[str, str]",
                    "Tuple[str, str, str]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "expression_end_accum": {
            "name": "expression_end_accum",
            "location": 121,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,int]]",
                    "str",
                    "T",
                    "list[]",
                    "int",
                    "Tuple[str, int]",
                    "bool",
                    "list"
                ]
            }
        },
        "list_end_accum": {
            "name": "list_end_accum",
            "location": 127,
            "return": [
                "T",
                "str",
                "bytes",
                "bool",
                "int"
            ],
            "arguments": {
                "values": [
                    "tuple[T]",
                    "bytes",
                    "Tuple['T']",
                    "float",
                    "T"
                ]
            }
        },
        "number_accum": {
            "name": "number_accum",
            "location": 133,
            "return": [
                "str",
                "int",
                "float",
                "Callable"
            ],
            "arguments": {
                "values": [
                    "str",
                    "list[float]",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "rule_name_accum": {
            "name": "rule_name_accum",
            "location": 142,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "values": [
                    "str",
                    "Union[int, float]",
                    "float"
                ]
            }
        },
        "text_accum": {
            "name": "text_accum",
            "location": 151,
            "return": [
                "str",
                "List[str]",
                "Iterable[int]"
            ],
            "arguments": {
                "values": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "_repeat_term_accum1": {
            "name": "_repeat_term_accum1",
            "location": 161,
            "return": [
                "Tuple[Tuple[int, Any]]"
            ],
            "arguments": {
                "values": [
                    "float",
                    "int",
                    "T"
                ]
            }
        },
        "_repeat_term_accum2": {
            "name": "_repeat_term_accum2",
            "location": 168,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "values": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "_string_literal_accum": {
            "name": "_string_literal_accum",
            "location": 186,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "List[str]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "_string_literal_accum2": {
            "name": "_string_literal_accum2",
            "location": 204,
            "return": [
                "str",
                "Optional[type]",
                "type",
                "Type[Any]"
            ],
            "arguments": {
                "values": [
                    "str",
                    "bool",
                    "nj.core.MongoObject_T"
                ]
            }
        },
        "_group_term_accum": {
            "name": "_group_term_accum",
            "location": 217,
            "return": [
                "int",
                "str",
                "list",
                "List[T]",
                "List[float]"
            ],
            "arguments": {
                "values": [
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "_StringLiteralSwitch.case0": {
            "name": "case0",
            "location": 176,
            "return": [
                "bool"
            ],
            "arguments": {
                "val": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_StringLiteralSwitch.case1": {
            "name": "case1",
            "location": 181,
            "return": [
                "bool"
            ],
            "arguments": {
                "val": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "prosodia-master/src/prosodia/base/augmentedbnf/_transform_helpers.py": {
        "list_of": {
            "name": "list_of",
            "location": 10,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "values": [
                    "Tuple[T]"
                ]
            }
        },
        "push_list": {
            "name": "push_list",
            "location": 16,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "values": [
                    "Tuple[(T, List[T])]"
                ]
            }
        },
        "nothing": {
            "name": "nothing",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "Tuple[T]"
                ]
            }
        },
        "nothing2": {
            "name": "nothing2",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "Tuple[(T, T2)]"
                ]
            }
        },
        "nothing3": {
            "name": "nothing3",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "Tuple[(T, T2, T3)]"
                ]
            }
        },
        "identity": {
            "name": "identity",
            "location": 34,
            "return": [
                "T"
            ],
            "arguments": {
                "values": [
                    "Tuple[T]"
                ]
            }
        },
        "identity2": {
            "name": "identity2",
            "location": 38,
            "return": [
                "T2"
            ],
            "arguments": {
                "values": [
                    "Tuple[T]"
                ]
            }
        },
        "unescape": {
            "name": "unescape",
            "location": 42,
            "return": [
                "T"
            ],
            "arguments": {
                "values": [
                    "Tuple[(str, T, str)]"
                ]
            }
        },
        "add": {
            "name": "add",
            "location": 48,
            "return": [
                "Addable"
            ],
            "arguments": {
                "values": [
                    "Tuple[(Addable, Addable)]"
                ]
            }
        }
    },
    "prosodia-master/src/prosodia/base/augmentedbnf/_transform_terminals.py": {
        "_terminal_accum": {
            "name": "_terminal_accum",
            "location": 12,
            "return": [
                "g.Term"
            ],
            "arguments": {
                "values": [
                    "Tuple[(str, int, Sequence[Union[(int, Sequence[int])]])]"
                ]
            }
        },
        "_partial_str_to_int": {
            "name": "_partial_str_to_int",
            "location": 30,
            "return": [
                "Callable[([Tuple[Sequence[str]]], int)]"
            ],
            "arguments": {
                "base": [
                    "int"
                ]
            }
        },
        "_tail_range_accum": {
            "name": "_tail_range_accum",
            "location": 37,
            "return": [
                "Union[(int, Sequence[int])]"
            ],
            "arguments": {
                "values": [
                    "Tuple[(str, int)]"
                ]
            }
        },
        "_concat_unit_accum": {
            "name": "_concat_unit_accum",
            "location": 41,
            "return": [
                "int"
            ],
            "arguments": {
                "values": [
                    "Tuple[(str, int)]"
                ]
            }
        },
        "add_terminal_transforms": {
            "name": "add_terminal_transforms",
            "location": 45,
            "return": [
                "t.LanguageTransformation"
            ],
            "arguments": {
                "lt": [
                    "t.LanguageTransformation"
                ]
            }
        },
        "_partial_str_to_int.func": {
            "name": "func",
            "location": 31,
            "return": [
                "int"
            ],
            "arguments": {
                "values": []
            }
        }
    },
    "prosodia-master/src/prosodia/base/augmentedbnf/__init__.py": {},
    "prosodia-master/src/prosodia/base/augmentedbnf/_freebies/text.py": {},
    "prosodia-master/src/prosodia/base/augmentedbnf/_freebies/__init__.py": {
        "add_freebie_rules": {
            "name": "add_freebie_rules",
            "location": 14,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "lang": [
                    "int",
                    "prosodia.core.grammar.Language"
                ]
            }
        },
        "add_freebie_transforms": {
            "name": "add_freebie_transforms",
            "location": 22,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "lt": [
                    "int",
                    "dict",
                    "float",
                    "slice",
                    "str"
                ]
            }
        },
        "lwsp_accum": {
            "name": "lwsp_accum",
            "location": 44,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,int]]",
                    "int",
                    "list[]",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        }
    },
    "prosodia-master/src/prosodia/base/bnf/_grammar.py": {
        "create_bnf": {
            "name": "create_bnf",
            "location": 7,
            "return": [
                "Grammar",
                "int",
                "float",
                "str",
                "List[int]"
            ],
            "arguments": {}
        }
    },
    "prosodia-master/src/prosodia/base/bnf/_parser.py": {
        "create_language": {
            "name": "create_language",
            "location": 9,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        }
    },
    "prosodia-master/src/prosodia/base/bnf/_text.py": {},
    "prosodia-master/src/prosodia/base/bnf/_transform.py": {
        "syntax_accum": {
            "name": "syntax_accum",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "values": [
                    "str",
                    "list[float]",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "rule_accum": {
            "name": "rule_accum",
            "location": 43,
            "return": [
                "float",
                "Optional[int]",
                "str",
                "Generator",
                "int"
            ],
            "arguments": {
                "values": [
                    "str",
                    "int",
                    "float",
                    "bool",
                    "Collection[str]"
                ]
            }
        },
        "expression_accum": {
            "name": "expression_accum",
            "location": 59,
            "return": [
                "list[typing.Union[str,T]]",
                "bool",
                "str",
                "Iterable['cirq.Qid']",
                "Optional[str]"
            ],
            "arguments": {
                "values": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "list[T]",
                    "Sequence[Tuple[str, str]]",
                    "List[T]",
                    "T"
                ]
            }
        },
        "list_accum_1": {
            "name": "list_accum_1",
            "location": 71,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[bool]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "values": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "list",
                    "list[]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "list_accum_2": {
            "name": "list_accum_2",
            "location": 77,
            "return": [
                "bool",
                "int",
                "str",
                "tuple"
            ],
            "arguments": {
                "values": [
                    "list[]",
                    "bool",
                    "bytes",
                    "str",
                    "float",
                    "Optional[dict]",
                    "Iterable",
                    "Optional[List]",
                    "Union[bytes, str]"
                ]
            }
        },
        "text_accum_1": {
            "name": "text_accum_1",
            "location": 83,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "values": [
                    "tuple[str]",
                    "str",
                    "Tuple[str]",
                    "float"
                ]
            }
        },
        "text_accum_2": {
            "name": "text_accum_2",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "values": [
                    "str",
                    "bool",
                    "Union[str, int, float]"
                ]
            }
        },
        "term_accum_rule": {
            "name": "term_accum_rule",
            "location": 95,
            "return": [
                "str",
                "Iterable[int]",
                "List[str]",
                "core.LazyNS",
                "core.models.Recipe"
            ],
            "arguments": {
                "values": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "list_of": {
            "name": "list_of",
            "location": 101,
            "return": [
                "list[typing.Union['T',str]]",
                "str",
                "Type[T]",
                "int",
                "bool"
            ],
            "arguments": {
                "values": [
                    "tuple['T']",
                    "str",
                    "Tuple['T']",
                    "float",
                    "T",
                    "bool",
                    "Union[str, int]"
                ]
            }
        },
        "push_list": {
            "name": "push_list",
            "location": 107,
            "return": [
                "list[typing.Union[T,str]]",
                "bool",
                "str",
                "Iterable['cirq.Qid']",
                "Union[List[str], List[Any]]",
                "int"
            ],
            "arguments": {
                "values": [
                    "list[T]",
                    "str",
                    "List[T]",
                    "list[str]",
                    "T",
                    "List[str]",
                    "Sequence[Tuple[str, str]]"
                ]
            }
        },
        "nothing": {
            "name": "nothing",
            "location": 113,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "nothing2": {
            "name": "nothing2",
            "location": 117,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "identity": {
            "name": "identity",
            "location": 121,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,int]]",
                    "int",
                    "list[]",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "identity2": {
            "name": "identity2",
            "location": 125,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,int]]",
                    "int",
                    "list[]",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "unescape": {
            "name": "unescape",
            "location": 129,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,int]]",
                    "int",
                    "list[]",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "add": {
            "name": "add",
            "location": 135,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "values": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "prosodia-master/src/prosodia/base/bnf/__init__.py": {},
    "prosodia-master/src/prosodia/base/bnfrange/_grammar.py": {
        "create_bnfrange": {
            "name": "create_bnfrange",
            "location": 7,
            "return": [
                "Grammar",
                "int",
                "float",
                "str",
                "List[int]"
            ],
            "arguments": {}
        }
    },
    "prosodia-master/src/prosodia/base/bnfrange/_parser.py": {
        "create_language": {
            "name": "create_language",
            "location": 7,
            "return": [
                "str",
                "bool",
                "AsyncGenerator",
                "int"
            ],
            "arguments": {}
        }
    },
    "prosodia-master/src/prosodia/base/bnfrange/_text.py": {},
    "prosodia-master/src/prosodia/base/bnfrange/_transform.py": {
        "syntax_accum": {
            "name": "syntax_accum",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "values": [
                    "str",
                    "list[float]",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "rule_accum": {
            "name": "rule_accum",
            "location": 41,
            "return": [
                "float",
                "Optional[int]",
                "str",
                "Generator",
                "int"
            ],
            "arguments": {
                "values": [
                    "str",
                    "int",
                    "float",
                    "bool",
                    "Collection[str]"
                ]
            }
        },
        "expression_accum": {
            "name": "expression_accum",
            "location": 57,
            "return": [
                "list[typing.Union[str,T]]",
                "bool",
                "str",
                "Iterable['cirq.Qid']",
                "Optional[str]"
            ],
            "arguments": {
                "values": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "list[T]",
                    "Sequence[Tuple[str, str]]",
                    "List[T]",
                    "T"
                ]
            }
        },
        "list_accum_1": {
            "name": "list_accum_1",
            "location": 69,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[bool]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "values": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "list",
                    "list[]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "list_accum_2": {
            "name": "list_accum_2",
            "location": 75,
            "return": [
                "bool",
                "int",
                "str",
                "tuple"
            ],
            "arguments": {
                "values": [
                    "list[]",
                    "bool",
                    "bytes",
                    "str",
                    "float",
                    "Optional[dict]",
                    "Iterable",
                    "Optional[List]",
                    "Union[bytes, str]"
                ]
            }
        },
        "text_accum_1": {
            "name": "text_accum_1",
            "location": 81,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "values": [
                    "tuple[str]",
                    "str",
                    "Tuple[str]",
                    "float"
                ]
            }
        },
        "text_accum_2": {
            "name": "text_accum_2",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "values": [
                    "str",
                    "bool",
                    "Union[str, int, float]"
                ]
            }
        },
        "term_accum_rule": {
            "name": "term_accum_rule",
            "location": 93,
            "return": [
                "str",
                "Iterable[int]",
                "List[str]",
                "core.LazyNS",
                "core.models.Recipe"
            ],
            "arguments": {
                "values": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "literal_range_accum1": {
            "name": "literal_range_accum1",
            "location": 99,
            "return": [
                "Iterable[int]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,str,str]]",
                    "str",
                    "Tuple[str, str, str]",
                    "Tuple[str]",
                    "Tuple[str, str]",
                    "int",
                    "Union[int, str]"
                ]
            }
        },
        "literal_range_accum2": {
            "name": "literal_range_accum2",
            "location": 106,
            "return": [
                "Iterable[int]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,str,str,str,str]]",
                    "Tuple[str, str, str, str, str]",
                    "int",
                    "Tuple[str, str, str]",
                    "Optional[bool]",
                    "Tuple[str]",
                    "Tuple[str, str]",
                    "bool"
                ]
            }
        },
        "list_of": {
            "name": "list_of",
            "location": 114,
            "return": [
                "list[typing.Union['T',str]]",
                "str",
                "Type[T]",
                "int",
                "bool"
            ],
            "arguments": {
                "values": [
                    "tuple['T']",
                    "str",
                    "Tuple['T']",
                    "float",
                    "T",
                    "bool",
                    "Union[str, int]"
                ]
            }
        },
        "push_list": {
            "name": "push_list",
            "location": 120,
            "return": [
                "list[typing.Union[T,str]]",
                "bool",
                "str",
                "Iterable['cirq.Qid']",
                "Union[List[str], List[Any]]",
                "int"
            ],
            "arguments": {
                "values": [
                    "list[T]",
                    "str",
                    "List[T]",
                    "list[str]",
                    "T",
                    "List[str]",
                    "Sequence[Tuple[str, str]]"
                ]
            }
        },
        "nothing": {
            "name": "nothing",
            "location": 126,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "nothing2": {
            "name": "nothing2",
            "location": 130,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "identity": {
            "name": "identity",
            "location": 134,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,int]]",
                    "int",
                    "list[]",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "identity2": {
            "name": "identity2",
            "location": 138,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,int]]",
                    "int",
                    "list[]",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "unescape": {
            "name": "unescape",
            "location": 142,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,int]]",
                    "int",
                    "list[]",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "add": {
            "name": "add",
            "location": 148,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "values": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "prosodia-master/src/prosodia/base/bnfrange/__init__.py": {},
    "prosodia-master/src/prosodia/base/bnfrange/example/_grammar.py": {
        "create_example_bnfrange": {
            "name": "create_example_bnfrange",
            "location": 8,
            "return": [
                "str",
                "Grammar"
            ],
            "arguments": {}
        }
    },
    "prosodia-master/src/prosodia/base/bnfrange/example/_text.py": {},
    "prosodia-master/src/prosodia/base/bnfrange/example/_transform.py": {
        "syntax_accum": {
            "name": "syntax_accum",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "values": [
                    "str",
                    "list[float]",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "rule_accum": {
            "name": "rule_accum",
            "location": 40,
            "return": [
                "float",
                "Optional[int]",
                "str",
                "Generator",
                "int"
            ],
            "arguments": {
                "values": [
                    "str",
                    "int",
                    "float",
                    "bool",
                    "Collection[str]"
                ]
            }
        },
        "expression_accum": {
            "name": "expression_accum",
            "location": 56,
            "return": [
                "list[typing.Union[str,T]]",
                "bool",
                "str",
                "Iterable['cirq.Qid']",
                "Optional[str]"
            ],
            "arguments": {
                "values": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "list[T]",
                    "Sequence[Tuple[str, str]]",
                    "List[T]",
                    "T"
                ]
            }
        },
        "list_accum_1": {
            "name": "list_accum_1",
            "location": 68,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[bool]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "values": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "list",
                    "list[]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "list_accum_2": {
            "name": "list_accum_2",
            "location": 74,
            "return": [
                "bool",
                "int",
                "str",
                "tuple"
            ],
            "arguments": {
                "values": [
                    "list[]",
                    "bool",
                    "bytes",
                    "str",
                    "float",
                    "Optional[dict]",
                    "Iterable",
                    "Optional[List]",
                    "Union[bytes, str]"
                ]
            }
        },
        "text_accum_1": {
            "name": "text_accum_1",
            "location": 80,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "values": [
                    "tuple[str]",
                    "str",
                    "Tuple[str]",
                    "float"
                ]
            }
        },
        "text_accum_2": {
            "name": "text_accum_2",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "values": [
                    "str",
                    "bool",
                    "Union[str, int, float]"
                ]
            }
        },
        "term_accum_rule": {
            "name": "term_accum_rule",
            "location": 92,
            "return": [
                "str",
                "Iterable[int]",
                "List[str]",
                "core.LazyNS",
                "core.models.Recipe"
            ],
            "arguments": {
                "values": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "literal_range_accum1": {
            "name": "literal_range_accum1",
            "location": 98,
            "return": [
                "Iterable[int]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,str,str]]",
                    "str",
                    "Tuple[str, str, str]",
                    "Tuple[str]",
                    "Tuple[str, str]",
                    "int",
                    "Union[int, str]"
                ]
            }
        },
        "literal_range_accum2": {
            "name": "literal_range_accum2",
            "location": 105,
            "return": [
                "Iterable[int]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,str,str,str,str]]",
                    "Tuple[str, str, str, str, str]",
                    "int",
                    "Tuple[str, str, str]",
                    "Optional[bool]",
                    "Tuple[str]",
                    "Tuple[str, str]",
                    "bool"
                ]
            }
        },
        "list_of": {
            "name": "list_of",
            "location": 113,
            "return": [
                "list[typing.Union['T',str]]",
                "str",
                "Type[T]",
                "int",
                "bool"
            ],
            "arguments": {
                "values": [
                    "tuple['T']",
                    "str",
                    "Tuple['T']",
                    "float",
                    "T",
                    "bool",
                    "Union[str, int]"
                ]
            }
        },
        "push_list": {
            "name": "push_list",
            "location": 119,
            "return": [
                "list[typing.Union[T,str]]",
                "bool",
                "str",
                "Iterable['cirq.Qid']",
                "Union[List[str], List[Any]]",
                "int"
            ],
            "arguments": {
                "values": [
                    "list[T]",
                    "str",
                    "List[T]",
                    "list[str]",
                    "T",
                    "List[str]",
                    "Sequence[Tuple[str, str]]"
                ]
            }
        },
        "nothing": {
            "name": "nothing",
            "location": 125,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "nothing2": {
            "name": "nothing2",
            "location": 129,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "identity": {
            "name": "identity",
            "location": 133,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,int]]",
                    "int",
                    "list[]",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "identity2": {
            "name": "identity2",
            "location": 137,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,int]]",
                    "int",
                    "list[]",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "unescape": {
            "name": "unescape",
            "location": 141,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,int]]",
                    "int",
                    "list[]",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "add": {
            "name": "add",
            "location": 147,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "values": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "prosodia-master/src/prosodia/base/bnfrange/example/__init__.py": {},
    "prosodia-master/src/prosodia/base/bnfrepeat/_grammar.py": {
        "create_bnfrepeat": {
            "name": "create_bnfrepeat",
            "location": 7,
            "return": [
                "Grammar",
                "int",
                "float",
                "str",
                "List[int]"
            ],
            "arguments": {}
        }
    },
    "prosodia-master/src/prosodia/base/bnfrepeat/_parser.py": {
        "create_language": {
            "name": "create_language",
            "location": 6,
            "return": [
                "str",
                "bool",
                "AsyncGenerator",
                "int"
            ],
            "arguments": {}
        }
    },
    "prosodia-master/src/prosodia/base/bnfrepeat/_text.py": {},
    "prosodia-master/src/prosodia/base/bnfrepeat/_transform.py": {
        "syntax_accum": {
            "name": "syntax_accum",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "values": [
                    "str",
                    "list[float]",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "rule_accum": {
            "name": "rule_accum",
            "location": 43,
            "return": [
                "float",
                "Optional[int]",
                "str",
                "Generator",
                "int"
            ],
            "arguments": {
                "values": [
                    "str",
                    "int",
                    "float",
                    "bool",
                    "Collection[str]"
                ]
            }
        },
        "expression_accum": {
            "name": "expression_accum",
            "location": 59,
            "return": [
                "list[typing.Union[str,T]]",
                "bool",
                "str",
                "Iterable['cirq.Qid']",
                "Optional[str]"
            ],
            "arguments": {
                "values": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "list[T]",
                    "Sequence[Tuple[str, str]]",
                    "List[T]",
                    "T"
                ]
            }
        },
        "list_accum_1": {
            "name": "list_accum_1",
            "location": 71,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[bool]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "values": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "list",
                    "list[]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "list_accum_2": {
            "name": "list_accum_2",
            "location": 77,
            "return": [
                "bool",
                "int",
                "str",
                "tuple"
            ],
            "arguments": {
                "values": [
                    "list[]",
                    "bool",
                    "bytes",
                    "str",
                    "float",
                    "Optional[dict]",
                    "Iterable",
                    "Optional[List]",
                    "Union[bytes, str]"
                ]
            }
        },
        "text_accum_1": {
            "name": "text_accum_1",
            "location": 83,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "values": [
                    "tuple[str]",
                    "str",
                    "Tuple[str]",
                    "float"
                ]
            }
        },
        "text_accum_2": {
            "name": "text_accum_2",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "values": [
                    "str",
                    "bool",
                    "Union[str, int, float]"
                ]
            }
        },
        "base_term_accum_rule": {
            "name": "base_term_accum_rule",
            "location": 95,
            "return": [
                "str",
                "Iterable[int]",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "values": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "literal_range_accum1": {
            "name": "literal_range_accum1",
            "location": 101,
            "return": [
                "Iterable[int]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,str,str]]",
                    "str",
                    "Tuple[str, str, str]",
                    "Tuple[str]",
                    "Tuple[str, str]",
                    "int",
                    "Union[int, str]"
                ]
            }
        },
        "literal_range_accum2": {
            "name": "literal_range_accum2",
            "location": 108,
            "return": [
                "Iterable[int]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,str,str,str,str]]",
                    "Tuple[str, str, str, str, str]",
                    "int",
                    "Tuple[str, str, str]",
                    "Optional[bool]",
                    "Tuple[str]",
                    "Tuple[str, str]",
                    "bool"
                ]
            }
        },
        "repeat_term_accum": {
            "name": "repeat_term_accum",
            "location": 116,
            "return": [
                "src.core.model.action_resulActionResult",
                "Dict[str, int]",
                "Generator"
            ],
            "arguments": {
                "values": [
                    "int",
                    "bool"
                ]
            }
        },
        "repeat_body_accum1": {
            "name": "repeat_body_accum1",
            "location": 127,
            "return": [
                "tuple[int]",
                "src.core.model.action_resulActionResult",
                "Tuple[Any, int]",
                "\"Position\""
            ],
            "arguments": {
                "values": [
                    "tuple[str]",
                    "str",
                    "Tuple[str]",
                    "list[str]",
                    "Tuple[str, str]",
                    "Tuple[str, str, str]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "repeat_body_accum2": {
            "name": "repeat_body_accum2",
            "location": 134,
            "return": [
                "tuple[typing.Optional[int]]",
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "values": [
                    "tuple[str]",
                    "str",
                    "Tuple[str]",
                    "list[str]",
                    "Tuple[str, str]",
                    "Tuple[str, str, str]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "repeat_body_accum3": {
            "name": "repeat_body_accum3",
            "location": 141,
            "return": [
                "tuple[int]",
                "str",
                "int",
                "tuple",
                "bool"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,str,str]]",
                    "str",
                    "Tuple[str, str, str]",
                    "list[str]",
                    "int",
                    "Tuple[str]",
                    "Tuple[str, str]",
                    "Sequence",
                    "List[str]"
                ]
            }
        },
        "list_of": {
            "name": "list_of",
            "location": 147,
            "return": [
                "list[typing.Union['T',str]]",
                "str",
                "Type[T]",
                "int",
                "bool"
            ],
            "arguments": {
                "values": [
                    "tuple['T']",
                    "str",
                    "Tuple['T']",
                    "float",
                    "T",
                    "bool",
                    "Union[str, int]"
                ]
            }
        },
        "push_list": {
            "name": "push_list",
            "location": 153,
            "return": [
                "list[typing.Union[T,str]]",
                "bool",
                "str",
                "Iterable['cirq.Qid']",
                "Union[List[str], List[Any]]",
                "int"
            ],
            "arguments": {
                "values": [
                    "list[T]",
                    "str",
                    "List[T]",
                    "list[str]",
                    "T",
                    "List[str]",
                    "Sequence[Tuple[str, str]]"
                ]
            }
        },
        "nothing": {
            "name": "nothing",
            "location": 159,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "nothing2": {
            "name": "nothing2",
            "location": 163,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "identity": {
            "name": "identity",
            "location": 167,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,int]]",
                    "int",
                    "list[]",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "identity2": {
            "name": "identity2",
            "location": 171,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,int]]",
                    "int",
                    "list[]",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "unescape": {
            "name": "unescape",
            "location": 175,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,int]]",
                    "int",
                    "list[]",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "add": {
            "name": "add",
            "location": 181,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "values": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "prosodia-master/src/prosodia/base/bnfrepeat/__init__.py": {},
    "prosodia-master/src/prosodia/base/bnfrepeat/example/_grammar.py": {
        "create_example_bnfrepeat": {
            "name": "create_example_bnfrepeat",
            "location": 8,
            "return": [
                "str",
                "Grammar"
            ],
            "arguments": {}
        }
    },
    "prosodia-master/src/prosodia/base/bnfrepeat/example/_text.py": {},
    "prosodia-master/src/prosodia/base/bnfrepeat/example/_transform.py": {
        "syntax_accum": {
            "name": "syntax_accum",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "values": [
                    "str",
                    "list[float]",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "rule_accum": {
            "name": "rule_accum",
            "location": 40,
            "return": [
                "float",
                "Optional[int]",
                "str",
                "Generator",
                "int"
            ],
            "arguments": {
                "values": [
                    "str",
                    "int",
                    "float",
                    "bool",
                    "Collection[str]"
                ]
            }
        },
        "expression_accum": {
            "name": "expression_accum",
            "location": 56,
            "return": [
                "list[typing.Union[str,T]]",
                "bool",
                "str",
                "Iterable['cirq.Qid']",
                "Optional[str]"
            ],
            "arguments": {
                "values": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "list[T]",
                    "Sequence[Tuple[str, str]]",
                    "List[T]",
                    "T"
                ]
            }
        },
        "list_accum": {
            "name": "list_accum",
            "location": 65,
            "return": [
                "bool",
                "int",
                "str",
                "tuple"
            ],
            "arguments": {
                "values": [
                    "str",
                    "dict",
                    "T"
                ]
            }
        },
        "text_accum_1": {
            "name": "text_accum_1",
            "location": 71,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "values": [
                    "tuple[str]",
                    "str",
                    "Tuple[str]",
                    "float"
                ]
            }
        },
        "text_accum_2": {
            "name": "text_accum_2",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "values": [
                    "str",
                    "bool",
                    "Union[str, int, float]"
                ]
            }
        },
        "base_term_accum_rule": {
            "name": "base_term_accum_rule",
            "location": 83,
            "return": [
                "str",
                "Iterable[int]",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "values": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "literal_range_accum1": {
            "name": "literal_range_accum1",
            "location": 89,
            "return": [
                "Iterable[int]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,str,str]]",
                    "str",
                    "Tuple[str, str, str]",
                    "Tuple[str]",
                    "Tuple[str, str]",
                    "int",
                    "Union[int, str]"
                ]
            }
        },
        "literal_range_accum2": {
            "name": "literal_range_accum2",
            "location": 96,
            "return": [
                "Iterable[int]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,str,str,str,str]]",
                    "Tuple[str, str, str, str, str]",
                    "int",
                    "Tuple[str, str, str]",
                    "Optional[bool]",
                    "Tuple[str]",
                    "Tuple[str, str]",
                    "bool"
                ]
            }
        },
        "repeat_term_accum": {
            "name": "repeat_term_accum",
            "location": 104,
            "return": [
                "src.core.model.action_resulActionResult",
                "Dict[str, int]",
                "Generator"
            ],
            "arguments": {
                "values": [
                    "int",
                    "bool"
                ]
            }
        },
        "repeat_body_accum1": {
            "name": "repeat_body_accum1",
            "location": 115,
            "return": [
                "tuple[int]",
                "src.core.model.action_resulActionResult",
                "Tuple[Any, int]",
                "\"Position\""
            ],
            "arguments": {
                "values": [
                    "tuple[str]",
                    "str",
                    "Tuple[str]",
                    "list[str]",
                    "Tuple[str, str]",
                    "Tuple[str, str, str]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "repeat_body_accum2": {
            "name": "repeat_body_accum2",
            "location": 122,
            "return": [
                "tuple[typing.Optional[int]]",
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "values": [
                    "tuple[str]",
                    "str",
                    "Tuple[str]",
                    "list[str]",
                    "Tuple[str, str]",
                    "Tuple[str, str, str]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "repeat_body_accum3": {
            "name": "repeat_body_accum3",
            "location": 129,
            "return": [
                "tuple[int]",
                "str",
                "int",
                "tuple",
                "bool"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,str,str]]",
                    "str",
                    "Tuple[str, str, str]",
                    "list[str]",
                    "int",
                    "Tuple[str]",
                    "Tuple[str, str]",
                    "Sequence",
                    "List[str]"
                ]
            }
        },
        "expression_end_accum": {
            "name": "expression_end_accum",
            "location": 135,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,int]]",
                    "str",
                    "T",
                    "list[]",
                    "int",
                    "Tuple[str, int]",
                    "bool",
                    "list"
                ]
            }
        },
        "list_end_accum": {
            "name": "list_end_accum",
            "location": 141,
            "return": [
                "'T'",
                "str",
                "bytes",
                "bool",
                "int"
            ],
            "arguments": {
                "values": [
                    "tuple['T']",
                    "bytes",
                    "Tuple['T']",
                    "float",
                    "T"
                ]
            }
        },
        "number_accum": {
            "name": "number_accum",
            "location": 147,
            "return": [
                "str",
                "int",
                "float",
                "Callable"
            ],
            "arguments": {
                "values": [
                    "str",
                    "list[float]",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "rule_name_accum": {
            "name": "rule_name_accum",
            "location": 156,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "values": [
                    "str",
                    "Union[int, float]",
                    "float"
                ]
            }
        },
        "list_of": {
            "name": "list_of",
            "location": 165,
            "return": [
                "list[typing.Union['T',str]]",
                "str",
                "Type[T]",
                "int",
                "bool"
            ],
            "arguments": {
                "values": [
                    "tuple['T']",
                    "str",
                    "Tuple['T']",
                    "float",
                    "T",
                    "bool",
                    "Union[str, int]"
                ]
            }
        },
        "push_list": {
            "name": "push_list",
            "location": 171,
            "return": [
                "bool",
                "Sequence[str]",
                "int"
            ],
            "arguments": {
                "values": [
                    "str",
                    "float",
                    "list[]",
                    "list"
                ]
            }
        },
        "nothing": {
            "name": "nothing",
            "location": 177,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "nothing2": {
            "name": "nothing2",
            "location": 181,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "identity": {
            "name": "identity",
            "location": 185,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,int]]",
                    "int",
                    "list[]",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "identity2": {
            "name": "identity2",
            "location": 189,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,int]]",
                    "int",
                    "list[]",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "unescape": {
            "name": "unescape",
            "location": 193,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,int]]",
                    "int",
                    "list[]",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "add": {
            "name": "add",
            "location": 199,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "values": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "text_accum": {
            "name": "text_accum",
            "location": 209,
            "return": [
                "str",
                "List[str]",
                "Iterable[int]"
            ],
            "arguments": {
                "values": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        }
    },
    "prosodia-master/src/prosodia/base/bnfrepeat/example/__init__.py": {},
    "prosodia-master/src/prosodia/core/grammar.py": {
        "_group_match": {
            "name": "_group_match",
            "location": 835,
            "return": [
                "Iterable[Tuple[(_SmartText, Sequence[prosodia.core.tree.Node])]]"
            ],
            "arguments": {
                "children": [
                    "Sequence[Term]"
                ],
                "text": [
                    "_SmartText"
                ],
                "lang": [
                    "Language"
                ],
                "cache": [
                    "MutableMapping[(Tuple[(int, _SmartText, int)], Sequence[Tuple[(_SmartText, prosodia.core.tree.Node)]])]"
                ]
            }
        },
        "_group_match_impl": {
            "name": "_group_match_impl",
            "location": 855,
            "return": [
                "Union[(List[Callable[([], Any)]], Tuple[(_SmartText, Sequence[prosodia.core.tree.Node])])]"
            ],
            "arguments": {
                "children": [
                    "Sequence[Term]"
                ],
                "text": [
                    "_SmartText"
                ],
                "lang": [
                    "Language"
                ],
                "matched_terms": [
                    "Sequence[prosodia.core.tree.Node]"
                ],
                "cache": [
                    "MutableMapping[(Tuple[(int, _SmartText, int)], Sequence[Tuple[(_SmartText, prosodia.core.tree.Node)]])]"
                ]
            }
        },
        "Grammar.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "Language"
                ],
                "transform": [
                    "prosodia.core.transform.LanguageTransformation[T]"
                ],
                "allow_partial_matches": [
                    "bool"
                ]
            }
        },
        "Grammar.apply": {
            "name": "apply",
            "location": 32,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Grammar.validate": {
            "name": "validate",
            "location": 40,
            "return": [
                "prosodia.validation.validity.Validity"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SmartText.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_text": [
                    "str"
                ]
            }
        },
        "_SmartText.__len__": {
            "name": "__len__",
            "location": 58,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SmartText.log_front": {
            "name": "log_front",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ]
            }
        },
        "_SmartText.startswith": {
            "name": "startswith",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str"
                ],
                "case_sensitive": [
                    "bool"
                ]
            }
        },
        "_SmartText.__getitem__": {
            "name": "__getitem__",
            "location": 82,
            "return": [
                "SmartText"
            ],
            "arguments": {
                "self": [
                    "_T_SmartText"
                ],
                "index": [
                    "slice"
                ]
            }
        },
        "_SmartText._as_tuple": {
            "name": "_as_tuple",
            "location": 97,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SmartText.__hash__": {
            "name": "__hash__",
            "location": 100,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SmartText.__eq__": {
            "name": "__eq__",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TooManyMatches.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "matches": [
                    "Sequence[prosodia.core.tree.Node]"
                ]
            }
        },
        "Language.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "Dict[(str, Rule)]"
                ],
                "root_rule": [
                    "str"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "Language.create": {
            "name": "create",
            "location": 135,
            "return": [
                "Language"
            ],
            "arguments": {
                "cls": [
                    "Type[_TLanguage]"
                ],
                "root_rule": [
                    "str"
                ]
            }
        },
        "Language.log_match": {
            "name": "log_match",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "_SmartText"
                ]
            }
        },
        "Language.add_rule": {
            "name": "add_rule",
            "location": 142,
            "return": [
                "Language"
            ],
            "arguments": {
                "self": [
                    "_TLanguage"
                ],
                "rule": [
                    "Rule"
                ]
            }
        },
        "Language.get_rule": {
            "name": "get_rule",
            "location": 152,
            "return": [
                "Rule"
            ],
            "arguments": {
                "self": [],
                "rule_name": [
                    "str"
                ]
            }
        },
        "Language.add_to_rule": {
            "name": "add_to_rule",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rule_name": [
                    "str"
                ],
                "tgs": [
                    "Sequence[TermGroup]"
                ]
            }
        },
        "Language.parse": {
            "name": "parse",
            "location": 164,
            "return": [
                "prosodia.core.tree.Node"
            ],
            "arguments": {
                "self": [],
                "raw_text": [
                    "str"
                ],
                "allow_partial_matches": [
                    "bool"
                ]
            }
        },
        "Language._parse_all": {
            "name": "_parse_all",
            "location": 176,
            "return": [
                "Iterable[prosodia.core.tree.Node]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "_SmartText"
                ],
                "allow_partial_matches": [
                    "bool"
                ],
                "cache": [
                    "MutableMapping[(Tuple[(int, _SmartText, int)], Sequence[Tuple[(_SmartText, prosodia.core.tree.Node)]])]"
                ]
            }
        },
        "Language.equals": {
            "name": "equals",
            "location": 188,
            "return": [
                "prosodia.validation.validity.Validity"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Language"
                ]
            }
        },
        "Language.validate": {
            "name": "validate",
            "location": 206,
            "return": [
                "prosodia.validation.validity.Validity"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rule.__init__": {
            "name": "__init__",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "syntax": [
                    "Syntax"
                ]
            }
        },
        "Rule.match": {
            "name": "match",
            "location": 232,
            "return": [
                "Iterable[Tuple[(_SmartText, prosodia.core.tree.Node)]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "_SmartText"
                ],
                "lang": [
                    "Language"
                ],
                "cache": [
                    "MutableMapping[(Tuple[(int, _SmartText, int)], Sequence[Tuple[(_SmartText, prosodia.core.tree.Node)]])]"
                ]
            }
        },
        "Rule.equals": {
            "name": "equals",
            "location": 240,
            "return": [
                "prosodia.validation.validity.Validity"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Rule"
                ]
            }
        },
        "Rule.validate": {
            "name": "validate",
            "location": 250,
            "return": [
                "prosodia.validation.validity.Validity"
            ],
            "arguments": {
                "self": [],
                "lang": [
                    "Language"
                ]
            }
        },
        "Syntax.__init__": {
            "name": "__init__",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "term_groups": [
                    "Sequence[TermGroup]"
                ]
            }
        },
        "Syntax.create": {
            "name": "create",
            "location": 263,
            "return": [
                "Syntax"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSyntax]"
                ]
            }
        },
        "Syntax.match": {
            "name": "match",
            "location": 266,
            "return": [
                "Iterable[Tuple[(_SmartText, prosodia.core.tree.Node)]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "_SmartText"
                ],
                "rule_name": [
                    "str"
                ],
                "lang": [
                    "Language"
                ],
                "cache": [
                    "MutableMapping[(Tuple[(int, _SmartText, int)], Sequence[Tuple[(_SmartText, prosodia.core.tree.Node)]])]"
                ]
            }
        },
        "Syntax.equals": {
            "name": "equals",
            "location": 278,
            "return": [
                "prosodia.validation.validity.Validity"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Syntax"
                ]
            }
        },
        "Syntax.validate": {
            "name": "validate",
            "location": 297,
            "return": [
                "prosodia.validation.validity.Validity"
            ],
            "arguments": {
                "self": [],
                "rule_name": [
                    "str"
                ],
                "lang": [
                    "Language"
                ]
            }
        },
        "TermGroup.__init__": {
            "name": "__init__",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "terms": [
                    "Sequence[Term]"
                ]
            }
        },
        "TermGroup.create": {
            "name": "create",
            "location": 319,
            "return": [
                "ermGroup"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTermGroup]"
                ]
            }
        },
        "TermGroup._match_impl": {
            "name": "_match_impl",
            "location": 322,
            "return": [
                "Iterable[Tuple[(_SmartText, Sequence[prosodia.core.tree.Node])]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "_SmartText"
                ],
                "term_index": [
                    "int"
                ],
                "lang": [
                    "Language"
                ],
                "cache": [
                    "MutableMapping[(Tuple[(int, _SmartText, int)], Sequence[Tuple[(_SmartText, prosodia.core.tree.Node)]])]"
                ]
            }
        },
        "TermGroup.match": {
            "name": "match",
            "location": 344,
            "return": [
                "Iterable[Tuple[(_SmartText, Sequence[prosodia.core.tree.Node])]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "_SmartText"
                ],
                "lang": [
                    "Language"
                ],
                "cache": [
                    "MutableMapping[(Tuple[(int, _SmartText, int)], Sequence[Tuple[(_SmartText, prosodia.core.tree.Node)]])]"
                ]
            }
        },
        "TermGroup.equals": {
            "name": "equals",
            "location": 352,
            "return": [
                "prosodia.validation.validity.Validity"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "TermGroup"
                ]
            }
        },
        "TermGroup.validate": {
            "name": "validate",
            "location": 371,
            "return": [
                "prosodia.validation.validity.Validity"
            ],
            "arguments": {
                "self": [],
                "rule_name": [
                    "str"
                ],
                "lang": [
                    "Language"
                ]
            }
        },
        "Term.match": {
            "name": "match",
            "location": 398,
            "return": [
                "Iterable[Tuple[(_SmartText, prosodia.core.tree.Node)]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "_SmartText"
                ],
                "lang": [
                    "Language"
                ],
                "cache": [
                    "MutableMapping[(Tuple[(int, _SmartText, int)], Sequence[Tuple[(_SmartText, prosodia.core.tree.Node)]])]"
                ]
            }
        },
        "Term.validate": {
            "name": "validate",
            "location": 407,
            "return": [
                "prosodia.validation.validity.Validity"
            ],
            "arguments": {
                "self": [],
                "lang": [
                    "Language"
                ]
            }
        },
        "Term.equals": {
            "name": "equals",
            "location": 411,
            "return": [
                "prosodia.validation.validity.Validity"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Term"
                ]
            }
        },
        "Term.get_transform_type": {
            "name": "get_transform_type",
            "location": 415,
            "return": [
                "type"
            ],
            "arguments": {
                "self": [],
                "lt": [
                    "prosodia.core.transform.LanguageTransformation"
                ]
            }
        },
        "RuleReference.__init__": {
            "name": "__init__",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rule_name": [
                    "str"
                ]
            }
        },
        "RuleReference.match": {
            "name": "match",
            "location": 424,
            "return": [
                "Iterable[Tuple[(_SmartText, prosodia.core.tree.Node)]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "_SmartText"
                ],
                "lang": [
                    "Language"
                ],
                "cache": [
                    "MutableMapping[(Tuple[(int, _SmartText, int)], Sequence[Tuple[(_SmartText, prosodia.core.tree.Node)]])]"
                ]
            }
        },
        "RuleReference.equals": {
            "name": "equals",
            "location": 453,
            "return": [
                "prosodia.validation.validity.Validity"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Term"
                ]
            }
        },
        "RuleReference.__repr__": {
            "name": "__repr__",
            "location": 463,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuleReference.validate": {
            "name": "validate",
            "location": 466,
            "return": [
                "prosodia.validation.validity.Validity"
            ],
            "arguments": {
                "self": [],
                "lang": [
                    "Language"
                ]
            }
        },
        "RuleReference.get_transform_type": {
            "name": "get_transform_type",
            "location": 475,
            "return": [
                "type"
            ],
            "arguments": {
                "self": [],
                "lt": [
                    "prosodia.core.transform.LanguageTransformation"
                ]
            }
        },
        "Literal.__init__": {
            "name": "__init__",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "case_sensitive": [
                    "bool"
                ]
            }
        },
        "Literal.match": {
            "name": "match",
            "location": 488,
            "return": [
                "Iterable[Tuple[(_SmartText, prosodia.core.tree.Node)]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "_SmartText"
                ],
                "lang": [
                    "Language"
                ],
                "cache": [
                    "MutableMapping[(Tuple[(int, _SmartText, int)], Sequence[Tuple[(_SmartText, prosodia.core.tree.Node)]])]"
                ]
            }
        },
        "Literal.__repr__": {
            "name": "__repr__",
            "location": 498,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Literal.equals": {
            "name": "equals",
            "location": 501,
            "return": [
                "prosodia.validation.validity.Validity"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Term"
                ]
            }
        },
        "Literal.validate": {
            "name": "validate",
            "location": 509,
            "return": [
                "prosodia.validation.validity.Validity"
            ],
            "arguments": {
                "self": [],
                "lang": [
                    "Language"
                ]
            }
        },
        "Literal.get_transform_type": {
            "name": "get_transform_type",
            "location": 512,
            "return": [
                "type"
            ],
            "arguments": {
                "self": [],
                "lt": [
                    "prosodia.core.transform.LanguageTransformation"
                ]
            }
        },
        "LiteralRange.__init__": {
            "name": "__init__",
            "location": 517,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "min_value": [
                    "int"
                ],
                "max_value": [
                    "int"
                ]
            }
        },
        "LiteralRange.match": {
            "name": "match",
            "location": 521,
            "return": [
                "Iterable[Tuple[(_SmartText, prosodia.core.tree.Node)]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "_SmartText"
                ],
                "lang": [
                    "Language"
                ],
                "cache": [
                    "MutableMapping[(Tuple[(int, _SmartText, int)], Sequence[Tuple[(_SmartText, prosodia.core.tree.Node)]])]"
                ]
            }
        },
        "LiteralRange.__repr__": {
            "name": "__repr__",
            "location": 533,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiteralRange.equals": {
            "name": "equals",
            "location": 539,
            "return": [
                "prosodia.validation.validity.Validity"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Term"
                ]
            }
        },
        "LiteralRange.validate": {
            "name": "validate",
            "location": 552,
            "return": [
                "prosodia.validation.validity.Validity"
            ],
            "arguments": {
                "self": [],
                "lang": [
                    "Language"
                ]
            }
        },
        "LiteralRange.get_transform_type": {
            "name": "get_transform_type",
            "location": 562,
            "return": [
                "type"
            ],
            "arguments": {
                "self": [],
                "lt": [
                    "prosodia.core.transform.LanguageTransformation"
                ]
            }
        },
        "EOFTerm.match": {
            "name": "match",
            "location": 567,
            "return": [
                "Iterable[Tuple[(_SmartText, prosodia.core.tree.Node)]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "_SmartText"
                ],
                "lang": [
                    "Language"
                ],
                "cache": [
                    "MutableMapping[(Tuple[(int, _SmartText, int)], Sequence[Tuple[(_SmartText, prosodia.core.tree.Node)]])]"
                ]
            }
        },
        "EOFTerm.__repr__": {
            "name": "__repr__",
            "location": 577,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EOFTerm.equals": {
            "name": "equals",
            "location": 580,
            "return": [
                "prosodia.validation.validity.Validity"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Term"
                ]
            }
        },
        "EOFTerm.validate": {
            "name": "validate",
            "location": 586,
            "return": [
                "prosodia.validation.validity.Validity"
            ],
            "arguments": {
                "self": [],
                "lang": [
                    "Language"
                ]
            }
        },
        "EOFTerm.get_transform_type": {
            "name": "get_transform_type",
            "location": 589,
            "return": [
                "type"
            ],
            "arguments": {
                "self": [],
                "lt": [
                    "prosodia.core.transform.LanguageTransformation"
                ]
            }
        },
        "RepeatTerm.__init__": {
            "name": "__init__",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "Term"
                ],
                "min_count": [
                    "int"
                ],
                "max_count": [
                    "Optional[int]"
                ]
            }
        },
        "RepeatTerm.__repr__": {
            "name": "__repr__",
            "location": 604,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RepeatTerm.match": {
            "name": "match",
            "location": 611,
            "return": [
                "Iterable[Tuple[(_SmartText, prosodia.core.tree.Node)]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "_SmartText"
                ],
                "lang": [
                    "Language"
                ],
                "cache": [
                    "MutableMapping[(Tuple[(int, _SmartText, int)], Sequence[Tuple[(_SmartText, prosodia.core.tree.Node)]])]"
                ]
            }
        },
        "RepeatTerm._match_impl": {
            "name": "_match_impl",
            "location": 632,
            "return": [
                "Tuple[(Optional[Tuple[(_SmartText, prosodia.core.tree.MultiNode)]], Iterable[Callable[([], Any)]])]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "_SmartText"
                ],
                "lang": [
                    "Language"
                ],
                "matched_terms": [
                    "Sequence[prosodia.core.tree.Node]"
                ],
                "cache": [
                    "MutableMapping[(Tuple[(int, _SmartText, int)], Sequence[Tuple[(_SmartText, prosodia.core.tree.Node)]])]"
                ]
            }
        },
        "RepeatTerm.equals": {
            "name": "equals",
            "location": 662,
            "return": [
                "prosodia.validation.validity.Validity"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Term"
                ]
            }
        },
        "RepeatTerm.validate": {
            "name": "validate",
            "location": 680,
            "return": [
                "prosodia.validation.validity.Validity"
            ],
            "arguments": {
                "self": [],
                "lang": [
                    "Language"
                ]
            }
        },
        "RepeatTerm.get_transform_type": {
            "name": "get_transform_type",
            "location": 704,
            "return": [
                "type"
            ],
            "arguments": {
                "self": [],
                "lt": [
                    "prosodia.core.transform.LanguageTransformation"
                ]
            }
        },
        "GroupTerm.__init__": {
            "name": "__init__",
            "location": 709,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "children_groups": [
                    "Sequence[Sequence[Term]]"
                ]
            }
        },
        "GroupTerm.__repr__": {
            "name": "__repr__",
            "location": 715,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupTerm.equals": {
            "name": "equals",
            "location": 724,
            "return": [
                "prosodia.validation.validity.Validity"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "GroupTerm.match": {
            "name": "match",
            "location": 752,
            "return": [
                "Iterable[Tuple[(_SmartText, prosodia.core.tree.Node)]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "_SmartText"
                ],
                "lang": [
                    "Language"
                ],
                "cache": [
                    "MutableMapping[(Tuple[(int, _SmartText, int)], Sequence[Tuple[(_SmartText, prosodia.core.tree.Node)]])]"
                ]
            }
        },
        "GroupTerm.validate": {
            "name": "validate",
            "location": 762,
            "return": [
                "prosodia.validation.validity.Validity"
            ],
            "arguments": {
                "self": [],
                "lang": [
                    "Language"
                ]
            }
        },
        "GroupTerm.get_transform_type": {
            "name": "get_transform_type",
            "location": 788,
            "return": [
                "type"
            ],
            "arguments": {
                "self": [],
                "lt": [
                    "prosodia.core.transform.LanguageTransformation"
                ]
            }
        }
    },
    "prosodia-master/src/prosodia/core/resolvable.py": {
        "_identity": {
            "name": "_identity",
            "location": 35,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "x": [
                    "OutputType"
                ]
            }
        },
        "resolve": {
            "name": "resolve",
            "location": 39,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "result": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Union[\"PipeChain\", str]]",
                    "list[typing.Union[\"PipeChain\",str]]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "Callable[..., T]",
                    "typing.Callable[..., T]"
                ]
            }
        },
        "resolve_map": {
            "name": "resolve_map",
            "location": 48,
            "return": [
                "Resolvable[List[OutputType]]"
            ],
            "arguments": {
                "values": [
                    "Sequence[InputType]"
                ],
                "func": [
                    "Callable[([InputType], OutputType)]"
                ]
            }
        },
        "_resolve_map_impl": {
            "name": "_resolve_map_impl",
            "location": 55,
            "return": [
                "Resolvable[List[OutputType]]"
            ],
            "arguments": {
                "values": [
                    "Sequence[InputType]"
                ],
                "func": [
                    "Callable[([InputType], OutputType)]"
                ],
                "index": [
                    "int"
                ],
                "result": [
                    "List[OutputType]"
                ]
            }
        },
        "_update_result": {
            "name": "_update_result",
            "location": 79,
            "return": [
                "Resolvable[List[OutputType]]"
            ],
            "arguments": {
                "values": [
                    "Sequence[InputType]"
                ],
                "func": [
                    "Callable[([InputType], OutputType)]"
                ],
                "index": [
                    "int"
                ],
                "result": [
                    "List[OutputType]"
                ],
                "value": [
                    "OutputType"
                ]
            }
        },
        "Resolvable.resolve": {
            "name": "resolve",
            "location": 12,
            "return": [
                "Union[(Resolvable[OutputType], OutputType)]"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "collections.deque"
                ]
            }
        },
        "ResolvableFunc.resolve": {
            "name": "resolve",
            "location": 17,
            "return": [
                "Union[(Resolvable[OutputType], OutputType)]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "collections.deque"
                ]
            }
        },
        "ResolvablePair.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resolvable": [
                    "Resolvable[InputType]"
                ],
                "next_resolvable": [
                    "Callable[([InputType], Resolvable[OutputType])]"
                ]
            }
        },
        "ResolvablePair.resolve": {
            "name": "resolve",
            "location": 30,
            "return": [
                "Union[(Resolvable[OutputType], OutputType)]"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "collections.deque"
                ]
            }
        }
    },
    "prosodia-master/src/prosodia/core/transform.py": {
        "LanguageTransformation.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transformation_rules": [
                    "Dict[(str, RuleTransformation)]"
                ],
                "unused_root_rule": [
                    "RuleTransformation[T]"
                ]
            }
        },
        "LanguageTransformation.create": {
            "name": "create",
            "location": 33,
            "return": [
                "LanguageTransformation[T]"
            ],
            "arguments": {
                "cls": [
                    "Type[LanguageTransformation]"
                ],
                "rule_name": [
                    "str"
                ],
                "root_accums": [
                    "Sequence[Callable[(..., T)]]"
                ]
            }
        },
        "LanguageTransformation.add_rule_transformation": {
            "name": "add_rule_transformation",
            "location": 51,
            "return": [
                "LanguageTransformation"
            ],
            "arguments": {
                "self": [],
                "rt": [
                    "RuleTransformation"
                ]
            }
        },
        "LanguageTransformation.transform": {
            "name": "transform",
            "location": 58,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "prosodia.core.tree.Node"
                ]
            }
        },
        "LanguageTransformation.__ilshift__": {
            "name": "__ilshift__",
            "location": 61,
            "return": [
                "LanguageTransformation"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "Tuple[(str, Sequence[Callable])]"
                ]
            }
        },
        "LanguageTransformation.validate": {
            "name": "validate",
            "location": 80,
            "return": [
                "prosodia.validation.validity.Validity"
            ],
            "arguments": {
                "self": [],
                "lang": [
                    "g.Language"
                ]
            }
        },
        "RuleTransformation.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rule_name": [
                    "str"
                ],
                "tf_syntax": [
                    "SyntaxTransformation[OutputType]"
                ]
            }
        },
        "RuleTransformation.transform": {
            "name": "transform",
            "location": 108,
            "return": [
                "prosodia.core.resolvable.Resolvable[OutputType]"
            ],
            "arguments": {
                "self": [],
                "rule_node": [
                    "prosodia.core.tree.RuleNode"
                ],
                "lang": [
                    "LanguageTransformation"
                ]
            }
        },
        "RuleTransformation.validate": {
            "name": "validate",
            "location": 120,
            "return": [
                "prosodia.validation.validity.Validity"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "g.Rule"
                ],
                "lt": [
                    "LanguageTransformation"
                ]
            }
        },
        "SyntaxTransformation.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tf_term_groups": [
                    "Sequence[TermGroupTransformation[OutputType]]"
                ]
            }
        },
        "SyntaxTransformation.create": {
            "name": "create",
            "location": 148,
            "return": [
                "SyntaxTransformation"
            ],
            "arguments": {
                "cls": [
                    "Type[SyntaxTransformation]"
                ]
            }
        },
        "SyntaxTransformation.transform": {
            "name": "transform",
            "location": 154,
            "return": [
                "prosodia.core.resolvable.Resolvable[OutputType]"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "Sequence[prosodia.core.tree.Node]"
                ],
                "index": [
                    "int"
                ],
                "lang": [
                    "LanguageTransformation"
                ]
            }
        },
        "SyntaxTransformation.validate": {
            "name": "validate",
            "location": 166,
            "return": [
                "prosodia.validation.validity.Validity"
            ],
            "arguments": {
                "self": [],
                "syntax": [
                    "g.Syntax"
                ],
                "lt": [
                    "LanguageTransformation"
                ]
            }
        },
        "TermGroupTransformation.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "accumulator": [
                    "Callable[([Any], prosodia.core.resolvable.Resolvable[OutputType])]"
                ]
            }
        },
        "TermGroupTransformation.transform": {
            "name": "transform",
            "location": 202,
            "return": [
                "prosodia.core.resolvable.Resolvable[OutputType]"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "Sequence[prosodia.core.tree.Node]"
                ],
                "lang": [
                    "LanguageTransformation"
                ]
            }
        },
        "TermGroupTransformation.validate": {
            "name": "validate",
            "location": 215,
            "return": [
                "prosodia.validation.validity.Validity"
            ],
            "arguments": {
                "self": [],
                "term_group": [
                    "g.TermGroup"
                ],
                "lt": [
                    "LanguageTransformation"
                ]
            }
        },
        "LazySequenceTransform.__init__": {
            "name": "__init__",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_values": [
                    "Sequence[prosodia.core.tree.Node]"
                ],
                "lang": [
                    "LanguageTransformation"
                ],
                "cache": [
                    "Dict[(int, Any)]"
                ]
            }
        },
        "LazySequenceTransform.create": {
            "name": "create",
            "location": 247,
            "return": [
                "LazySequenceTransform"
            ],
            "arguments": {
                "cls": [
                    "Type[_TLazySequenceTransform]"
                ],
                "nodes": [
                    "Sequence[prosodia.core.tree.Node]"
                ],
                "lang": [
                    "LanguageTransformation"
                ]
            }
        },
        "LazySequenceTransform.__getitem__": {
            "name": "__getitem__",
            "location": 262,
            "return": [
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "Union[int, slice]"
                ]
            }
        },
        "LazySequenceTransform.__len__": {
            "name": "__len__",
            "location": 280,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazySequenceTransform.__iter__": {
            "name": "__iter__",
            "location": 283,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "prosodia-master/src/prosodia/core/tree.py": {
        "Node.transform": {
            "name": "transform",
            "location": 17,
            "return": [
                "typing.Any",
                "None"
            ],
            "arguments": {
                "self": [],
                "lang": [
                    "prosodia.core.transform.LanguageTransformation"
                ]
            }
        },
        "Node.draw": {
            "name": "draw",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuleNode.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "matched_rule": [
                    "str"
                ],
                "term_group_id": [
                    "int"
                ],
                "children": [
                    "Sequence[Node]"
                ]
            }
        },
        "RuleNode.__str__": {
            "name": "__str__",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuleNode.__repr__": {
            "name": "__repr__",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuleNode.transform": {
            "name": "transform",
            "location": 42,
            "return": [
                "float",
                "T"
            ],
            "arguments": {
                "self": [],
                "lang": [
                    "prosodia.core.transform.LanguageTransformation"
                ]
            }
        },
        "RuleNode.draw": {
            "name": "draw",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiteralNode.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "LiteralNode.__str__": {
            "name": "__str__",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiteralNode.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiteralNode.transform": {
            "name": "transform",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lang": [
                    "prosodia.core.transform.LanguageTransformation"
                ]
            }
        },
        "LiteralNode.draw": {
            "name": "draw",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiNode.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "Sequence[Node]"
                ],
                "group_info": [
                    "Optional[Tuple[(int, int)]]"
                ]
            }
        },
        "MultiNode.transform": {
            "name": "transform",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "lang": [
                    "prosodia.core.transform.LanguageTransformation"
                ]
            }
        },
        "MultiNode.__str__": {
            "name": "__str__",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiNode.__repr__": {
            "name": "__repr__",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiNode.draw": {
            "name": "draw",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiNode._make_group_result": {
            "name": "_make_group_result",
            "location": 122,
            "return": [
                "prosodia.core.resolvable.Resolvable"
            ],
            "arguments": {
                "self": [],
                "resolvable": [
                    "prosodia.core.resolvable.Resolvable"
                ]
            }
        },
        "MultiNode._make_group_result.func": {
            "name": "func",
            "location": 123,
            "return": [
                "int",
                "ResolvableFunc"
            ],
            "arguments": {
                "result": [
                    "Callable",
                    "bool",
                    "Union[Callable, Type]",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "MultiNode._make_group_result.func.nested": {
            "name": "nested",
            "location": 124,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "prosodia-master/src/prosodia/core/__init__.py": {},
    "prosodia-master/src/prosodia/validation/group_types.py": {},
    "prosodia-master/src/prosodia/validation/switches.py": {
        "Switch.case0": {
            "name": "case0",
            "location": 12,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T0"
                ]
            }
        },
        "Switch.__call__": {
            "name": "__call__",
            "location": 15,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "Tuple[T0]"
                ]
            }
        },
        "Switch2.case0": {
            "name": "case0",
            "location": 25,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T0"
                ]
            }
        },
        "Switch2.case1": {
            "name": "case1",
            "location": 29,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T1"
                ]
            }
        },
        "Switch2.__call__": {
            "name": "__call__",
            "location": 32,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "Tuple[(Union[(gt.NoValue, T0)], Union[(gt.NoValue, T1)])]"
                ]
            }
        },
        "Switch3.case0": {
            "name": "case0",
            "location": 47,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T0"
                ]
            }
        },
        "Switch3.case1": {
            "name": "case1",
            "location": 51,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T1"
                ]
            }
        },
        "Switch3.case2": {
            "name": "case2",
            "location": 55,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T2"
                ]
            }
        },
        "Switch3.__call__": {
            "name": "__call__",
            "location": 58,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "Tuple[(Union[(gt.NoValue, T0)], Union[(gt.NoValue, T1)], Union[(gt.NoValue, T2)])]"
                ]
            }
        },
        "Switch4.case0": {
            "name": "case0",
            "location": 75,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T0"
                ]
            }
        },
        "Switch4.case1": {
            "name": "case1",
            "location": 79,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T1"
                ]
            }
        },
        "Switch4.case2": {
            "name": "case2",
            "location": 83,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T2"
                ]
            }
        },
        "Switch4.case3": {
            "name": "case3",
            "location": 87,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T3"
                ]
            }
        },
        "Switch4.__call__": {
            "name": "__call__",
            "location": 90,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "Tuple[(Union[(gt.NoValue, T0)], Union[(gt.NoValue, T1)], Union[(gt.NoValue, T2)], Union[(gt.NoValue, T3)])]"
                ]
            }
        },
        "Switch5.case0": {
            "name": "case0",
            "location": 109,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T0"
                ]
            }
        },
        "Switch5.case1": {
            "name": "case1",
            "location": 113,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T1"
                ]
            }
        },
        "Switch5.case2": {
            "name": "case2",
            "location": 117,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T2"
                ]
            }
        },
        "Switch5.case3": {
            "name": "case3",
            "location": 121,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T3"
                ]
            }
        },
        "Switch5.case4": {
            "name": "case4",
            "location": 125,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T4"
                ]
            }
        },
        "Switch5.__call__": {
            "name": "__call__",
            "location": 128,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "Tuple[(Union[(gt.NoValue, T0)], Union[(gt.NoValue, T1)], Union[(gt.NoValue, T2)], Union[(gt.NoValue, T3)], Union[(gt.NoValue, T4)])]"
                ]
            }
        },
        "Switch6.case0": {
            "name": "case0",
            "location": 149,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T0"
                ]
            }
        },
        "Switch6.case1": {
            "name": "case1",
            "location": 153,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T1"
                ]
            }
        },
        "Switch6.case2": {
            "name": "case2",
            "location": 157,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T2"
                ]
            }
        },
        "Switch6.case3": {
            "name": "case3",
            "location": 161,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T3"
                ]
            }
        },
        "Switch6.case4": {
            "name": "case4",
            "location": 165,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T4"
                ]
            }
        },
        "Switch6.case5": {
            "name": "case5",
            "location": 169,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T5"
                ]
            }
        },
        "Switch6.__call__": {
            "name": "__call__",
            "location": 172,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "Tuple[(Union[(gt.NoValue, T0)], Union[(gt.NoValue, T1)], Union[(gt.NoValue, T2)], Union[(gt.NoValue, T3)], Union[(gt.NoValue, T4)], Union[(gt.NoValue, T5)])]"
                ]
            }
        },
        "Switch7.case0": {
            "name": "case0",
            "location": 195,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T0"
                ]
            }
        },
        "Switch7.case1": {
            "name": "case1",
            "location": 199,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T1"
                ]
            }
        },
        "Switch7.case2": {
            "name": "case2",
            "location": 203,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T2"
                ]
            }
        },
        "Switch7.case3": {
            "name": "case3",
            "location": 207,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T3"
                ]
            }
        },
        "Switch7.case4": {
            "name": "case4",
            "location": 211,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T4"
                ]
            }
        },
        "Switch7.case5": {
            "name": "case5",
            "location": 215,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T5"
                ]
            }
        },
        "Switch7.case6": {
            "name": "case6",
            "location": 219,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T6"
                ]
            }
        },
        "Switch7.__call__": {
            "name": "__call__",
            "location": 222,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "Tuple[(Union[(gt.NoValue, T0)], Union[(gt.NoValue, T1)], Union[(gt.NoValue, T2)], Union[(gt.NoValue, T3)], Union[(gt.NoValue, T4)], Union[(gt.NoValue, T5)], Union[(gt.NoValue, T6)])]"
                ]
            }
        },
        "Switch8.case0": {
            "name": "case0",
            "location": 247,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T0"
                ]
            }
        },
        "Switch8.case1": {
            "name": "case1",
            "location": 251,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T1"
                ]
            }
        },
        "Switch8.case2": {
            "name": "case2",
            "location": 255,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T2"
                ]
            }
        },
        "Switch8.case3": {
            "name": "case3",
            "location": 259,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T3"
                ]
            }
        },
        "Switch8.case4": {
            "name": "case4",
            "location": 263,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T4"
                ]
            }
        },
        "Switch8.case5": {
            "name": "case5",
            "location": 267,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T5"
                ]
            }
        },
        "Switch8.case6": {
            "name": "case6",
            "location": 271,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T6"
                ]
            }
        },
        "Switch8.case7": {
            "name": "case7",
            "location": 275,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T7"
                ]
            }
        },
        "Switch8.__call__": {
            "name": "__call__",
            "location": 278,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "Tuple[(Union[(gt.NoValue, T0)], Union[(gt.NoValue, T1)], Union[(gt.NoValue, T2)], Union[(gt.NoValue, T3)], Union[(gt.NoValue, T4)], Union[(gt.NoValue, T5)], Union[(gt.NoValue, T6)], Union[(gt.NoValue, T7)])]"
                ]
            }
        },
        "Switch9.case0": {
            "name": "case0",
            "location": 305,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T0"
                ]
            }
        },
        "Switch9.case1": {
            "name": "case1",
            "location": 309,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T1"
                ]
            }
        },
        "Switch9.case2": {
            "name": "case2",
            "location": 313,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T2"
                ]
            }
        },
        "Switch9.case3": {
            "name": "case3",
            "location": 317,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T3"
                ]
            }
        },
        "Switch9.case4": {
            "name": "case4",
            "location": 321,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T4"
                ]
            }
        },
        "Switch9.case5": {
            "name": "case5",
            "location": 325,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T5"
                ]
            }
        },
        "Switch9.case6": {
            "name": "case6",
            "location": 329,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T6"
                ]
            }
        },
        "Switch9.case7": {
            "name": "case7",
            "location": 333,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T7"
                ]
            }
        },
        "Switch9.case8": {
            "name": "case8",
            "location": 337,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T8"
                ]
            }
        },
        "Switch9.__call__": {
            "name": "__call__",
            "location": 340,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "Tuple[(Union[(gt.NoValue, T0)], Union[(gt.NoValue, T1)], Union[(gt.NoValue, T2)], Union[(gt.NoValue, T3)], Union[(gt.NoValue, T4)], Union[(gt.NoValue, T5)], Union[(gt.NoValue, T6)], Union[(gt.NoValue, T7)], Union[(gt.NoValue, T8)])]"
                ]
            }
        },
        "Switch10.case0": {
            "name": "case0",
            "location": 369,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T0"
                ]
            }
        },
        "Switch10.case1": {
            "name": "case1",
            "location": 373,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T1"
                ]
            }
        },
        "Switch10.case2": {
            "name": "case2",
            "location": 377,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T2"
                ]
            }
        },
        "Switch10.case3": {
            "name": "case3",
            "location": 381,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T3"
                ]
            }
        },
        "Switch10.case4": {
            "name": "case4",
            "location": 385,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T4"
                ]
            }
        },
        "Switch10.case5": {
            "name": "case5",
            "location": 389,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T5"
                ]
            }
        },
        "Switch10.case6": {
            "name": "case6",
            "location": 393,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T6"
                ]
            }
        },
        "Switch10.case7": {
            "name": "case7",
            "location": 397,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T7"
                ]
            }
        },
        "Switch10.case8": {
            "name": "case8",
            "location": 401,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T8"
                ]
            }
        },
        "Switch10.case9": {
            "name": "case9",
            "location": 405,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T9"
                ]
            }
        },
        "Switch10.__call__": {
            "name": "__call__",
            "location": 408,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "Tuple[(Union[(gt.NoValue, T0)], Union[(gt.NoValue, T1)], Union[(gt.NoValue, T2)], Union[(gt.NoValue, T3)], Union[(gt.NoValue, T4)], Union[(gt.NoValue, T5)], Union[(gt.NoValue, T6)], Union[(gt.NoValue, T7)], Union[(gt.NoValue, T8)], Union[(gt.NoValue, T9)])]"
                ]
            }
        },
        "Switch11.case0": {
            "name": "case0",
            "location": 439,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T0"
                ]
            }
        },
        "Switch11.case1": {
            "name": "case1",
            "location": 443,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T1"
                ]
            }
        },
        "Switch11.case2": {
            "name": "case2",
            "location": 447,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T2"
                ]
            }
        },
        "Switch11.case3": {
            "name": "case3",
            "location": 451,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T3"
                ]
            }
        },
        "Switch11.case4": {
            "name": "case4",
            "location": 455,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T4"
                ]
            }
        },
        "Switch11.case5": {
            "name": "case5",
            "location": 459,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T5"
                ]
            }
        },
        "Switch11.case6": {
            "name": "case6",
            "location": 463,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T6"
                ]
            }
        },
        "Switch11.case7": {
            "name": "case7",
            "location": 467,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T7"
                ]
            }
        },
        "Switch11.case8": {
            "name": "case8",
            "location": 471,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T8"
                ]
            }
        },
        "Switch11.case9": {
            "name": "case9",
            "location": 475,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T9"
                ]
            }
        },
        "Switch11.case10": {
            "name": "case10",
            "location": 479,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T10"
                ]
            }
        },
        "Switch11.__call__": {
            "name": "__call__",
            "location": 482,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "Tuple[(Union[(gt.NoValue, T0)], Union[(gt.NoValue, T1)], Union[(gt.NoValue, T2)], Union[(gt.NoValue, T3)], Union[(gt.NoValue, T4)], Union[(gt.NoValue, T5)], Union[(gt.NoValue, T6)], Union[(gt.NoValue, T7)], Union[(gt.NoValue, T8)], Union[(gt.NoValue, T9)], Union[(gt.NoValue, T10)])]"
                ]
            }
        },
        "Switch12.case0": {
            "name": "case0",
            "location": 515,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T0"
                ]
            }
        },
        "Switch12.case1": {
            "name": "case1",
            "location": 519,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T1"
                ]
            }
        },
        "Switch12.case2": {
            "name": "case2",
            "location": 523,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T2"
                ]
            }
        },
        "Switch12.case3": {
            "name": "case3",
            "location": 527,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T3"
                ]
            }
        },
        "Switch12.case4": {
            "name": "case4",
            "location": 531,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T4"
                ]
            }
        },
        "Switch12.case5": {
            "name": "case5",
            "location": 535,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T5"
                ]
            }
        },
        "Switch12.case6": {
            "name": "case6",
            "location": 539,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T6"
                ]
            }
        },
        "Switch12.case7": {
            "name": "case7",
            "location": 543,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T7"
                ]
            }
        },
        "Switch12.case8": {
            "name": "case8",
            "location": 547,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T8"
                ]
            }
        },
        "Switch12.case9": {
            "name": "case9",
            "location": 551,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T9"
                ]
            }
        },
        "Switch12.case10": {
            "name": "case10",
            "location": 555,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T10"
                ]
            }
        },
        "Switch12.case11": {
            "name": "case11",
            "location": 559,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T11"
                ]
            }
        },
        "Switch12.__call__": {
            "name": "__call__",
            "location": 562,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "Tuple[(Union[(gt.NoValue, T0)], Union[(gt.NoValue, T1)], Union[(gt.NoValue, T2)], Union[(gt.NoValue, T3)], Union[(gt.NoValue, T4)], Union[(gt.NoValue, T5)], Union[(gt.NoValue, T6)], Union[(gt.NoValue, T7)], Union[(gt.NoValue, T8)], Union[(gt.NoValue, T9)], Union[(gt.NoValue, T10)], Union[(gt.NoValue, T11)])]"
                ]
            }
        },
        "Switch13.case0": {
            "name": "case0",
            "location": 597,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T0"
                ]
            }
        },
        "Switch13.case1": {
            "name": "case1",
            "location": 601,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T1"
                ]
            }
        },
        "Switch13.case2": {
            "name": "case2",
            "location": 605,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T2"
                ]
            }
        },
        "Switch13.case3": {
            "name": "case3",
            "location": 609,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T3"
                ]
            }
        },
        "Switch13.case4": {
            "name": "case4",
            "location": 613,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T4"
                ]
            }
        },
        "Switch13.case5": {
            "name": "case5",
            "location": 617,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T5"
                ]
            }
        },
        "Switch13.case6": {
            "name": "case6",
            "location": 621,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T6"
                ]
            }
        },
        "Switch13.case7": {
            "name": "case7",
            "location": 625,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T7"
                ]
            }
        },
        "Switch13.case8": {
            "name": "case8",
            "location": 629,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T8"
                ]
            }
        },
        "Switch13.case9": {
            "name": "case9",
            "location": 633,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T9"
                ]
            }
        },
        "Switch13.case10": {
            "name": "case10",
            "location": 637,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T10"
                ]
            }
        },
        "Switch13.case11": {
            "name": "case11",
            "location": 641,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T11"
                ]
            }
        },
        "Switch13.case12": {
            "name": "case12",
            "location": 645,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T12"
                ]
            }
        },
        "Switch13.__call__": {
            "name": "__call__",
            "location": 648,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "Tuple[(Union[(gt.NoValue, T0)], Union[(gt.NoValue, T1)], Union[(gt.NoValue, T2)], Union[(gt.NoValue, T3)], Union[(gt.NoValue, T4)], Union[(gt.NoValue, T5)], Union[(gt.NoValue, T6)], Union[(gt.NoValue, T7)], Union[(gt.NoValue, T8)], Union[(gt.NoValue, T9)], Union[(gt.NoValue, T10)], Union[(gt.NoValue, T11)], Union[(gt.NoValue, T12)])]"
                ]
            }
        },
        "Switch14.case0": {
            "name": "case0",
            "location": 685,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T0"
                ]
            }
        },
        "Switch14.case1": {
            "name": "case1",
            "location": 689,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T1"
                ]
            }
        },
        "Switch14.case2": {
            "name": "case2",
            "location": 693,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T2"
                ]
            }
        },
        "Switch14.case3": {
            "name": "case3",
            "location": 697,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T3"
                ]
            }
        },
        "Switch14.case4": {
            "name": "case4",
            "location": 701,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T4"
                ]
            }
        },
        "Switch14.case5": {
            "name": "case5",
            "location": 705,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T5"
                ]
            }
        },
        "Switch14.case6": {
            "name": "case6",
            "location": 709,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T6"
                ]
            }
        },
        "Switch14.case7": {
            "name": "case7",
            "location": 713,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T7"
                ]
            }
        },
        "Switch14.case8": {
            "name": "case8",
            "location": 717,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T8"
                ]
            }
        },
        "Switch14.case9": {
            "name": "case9",
            "location": 721,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T9"
                ]
            }
        },
        "Switch14.case10": {
            "name": "case10",
            "location": 725,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T10"
                ]
            }
        },
        "Switch14.case11": {
            "name": "case11",
            "location": 729,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T11"
                ]
            }
        },
        "Switch14.case12": {
            "name": "case12",
            "location": 733,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T12"
                ]
            }
        },
        "Switch14.case13": {
            "name": "case13",
            "location": 737,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T13"
                ]
            }
        },
        "Switch14.__call__": {
            "name": "__call__",
            "location": 740,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "Tuple[(Union[(gt.NoValue, T0)], Union[(gt.NoValue, T1)], Union[(gt.NoValue, T2)], Union[(gt.NoValue, T3)], Union[(gt.NoValue, T4)], Union[(gt.NoValue, T5)], Union[(gt.NoValue, T6)], Union[(gt.NoValue, T7)], Union[(gt.NoValue, T8)], Union[(gt.NoValue, T9)], Union[(gt.NoValue, T10)], Union[(gt.NoValue, T11)], Union[(gt.NoValue, T12)], Union[(gt.NoValue, T13)])]"
                ]
            }
        },
        "Switch15.case0": {
            "name": "case0",
            "location": 779,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T0"
                ]
            }
        },
        "Switch15.case1": {
            "name": "case1",
            "location": 783,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T1"
                ]
            }
        },
        "Switch15.case2": {
            "name": "case2",
            "location": 787,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T2"
                ]
            }
        },
        "Switch15.case3": {
            "name": "case3",
            "location": 791,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T3"
                ]
            }
        },
        "Switch15.case4": {
            "name": "case4",
            "location": 795,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T4"
                ]
            }
        },
        "Switch15.case5": {
            "name": "case5",
            "location": 799,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T5"
                ]
            }
        },
        "Switch15.case6": {
            "name": "case6",
            "location": 803,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T6"
                ]
            }
        },
        "Switch15.case7": {
            "name": "case7",
            "location": 807,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T7"
                ]
            }
        },
        "Switch15.case8": {
            "name": "case8",
            "location": 811,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T8"
                ]
            }
        },
        "Switch15.case9": {
            "name": "case9",
            "location": 815,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T9"
                ]
            }
        },
        "Switch15.case10": {
            "name": "case10",
            "location": 819,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T10"
                ]
            }
        },
        "Switch15.case11": {
            "name": "case11",
            "location": 823,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T11"
                ]
            }
        },
        "Switch15.case12": {
            "name": "case12",
            "location": 827,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T12"
                ]
            }
        },
        "Switch15.case13": {
            "name": "case13",
            "location": 831,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T13"
                ]
            }
        },
        "Switch15.case14": {
            "name": "case14",
            "location": 835,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T14"
                ]
            }
        },
        "Switch15.__call__": {
            "name": "__call__",
            "location": 838,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "Tuple[(Union[(gt.NoValue, T0)], Union[(gt.NoValue, T1)], Union[(gt.NoValue, T2)], Union[(gt.NoValue, T3)], Union[(gt.NoValue, T4)], Union[(gt.NoValue, T5)], Union[(gt.NoValue, T6)], Union[(gt.NoValue, T7)], Union[(gt.NoValue, T8)], Union[(gt.NoValue, T9)], Union[(gt.NoValue, T10)], Union[(gt.NoValue, T11)], Union[(gt.NoValue, T12)], Union[(gt.NoValue, T13)], Union[(gt.NoValue, T14)])]"
                ]
            }
        },
        "Switch16.case0": {
            "name": "case0",
            "location": 879,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T0"
                ]
            }
        },
        "Switch16.case1": {
            "name": "case1",
            "location": 883,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T1"
                ]
            }
        },
        "Switch16.case2": {
            "name": "case2",
            "location": 887,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T2"
                ]
            }
        },
        "Switch16.case3": {
            "name": "case3",
            "location": 891,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T3"
                ]
            }
        },
        "Switch16.case4": {
            "name": "case4",
            "location": 895,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T4"
                ]
            }
        },
        "Switch16.case5": {
            "name": "case5",
            "location": 899,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T5"
                ]
            }
        },
        "Switch16.case6": {
            "name": "case6",
            "location": 903,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T6"
                ]
            }
        },
        "Switch16.case7": {
            "name": "case7",
            "location": 907,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T7"
                ]
            }
        },
        "Switch16.case8": {
            "name": "case8",
            "location": 911,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T8"
                ]
            }
        },
        "Switch16.case9": {
            "name": "case9",
            "location": 915,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T9"
                ]
            }
        },
        "Switch16.case10": {
            "name": "case10",
            "location": 919,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T10"
                ]
            }
        },
        "Switch16.case11": {
            "name": "case11",
            "location": 923,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T11"
                ]
            }
        },
        "Switch16.case12": {
            "name": "case12",
            "location": 927,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T12"
                ]
            }
        },
        "Switch16.case13": {
            "name": "case13",
            "location": 931,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T13"
                ]
            }
        },
        "Switch16.case14": {
            "name": "case14",
            "location": 935,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T14"
                ]
            }
        },
        "Switch16.case15": {
            "name": "case15",
            "location": 939,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "T15"
                ]
            }
        },
        "Switch16.__call__": {
            "name": "__call__",
            "location": 942,
            "return": [
                "OutputType"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "Tuple[(Union[(gt.NoValue, T0)], Union[(gt.NoValue, T1)], Union[(gt.NoValue, T2)], Union[(gt.NoValue, T3)], Union[(gt.NoValue, T4)], Union[(gt.NoValue, T5)], Union[(gt.NoValue, T6)], Union[(gt.NoValue, T7)], Union[(gt.NoValue, T8)], Union[(gt.NoValue, T9)], Union[(gt.NoValue, T10)], Union[(gt.NoValue, T11)], Union[(gt.NoValue, T12)], Union[(gt.NoValue, T13)], Union[(gt.NoValue, T14)], Union[(gt.NoValue, T15)])]"
                ]
            }
        }
    },
    "prosodia-master/src/prosodia/validation/transform_validation.py": {
        "annotate": {
            "name": "annotate",
            "location": 8,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "get_return_type": {
            "name": "get_return_type",
            "location": 25,
            "return": [
                "type"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "check_composability": {
            "name": "check_composability",
            "location": 33,
            "return": [
                "prosodia.validation.validity.Validity"
            ],
            "arguments": {
                "argument_types": [
                    "Iterable[type]"
                ],
                "target_func": [
                    "Callable"
                ]
            }
        },
        "check_isomorphic": {
            "name": "check_isomorphic",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "funcs": [
                    "Iterable[Callable]"
                ]
            }
        },
        "annotate.annotated": {
            "name": "annotated",
            "location": 19,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        }
    },
    "prosodia-master/src/prosodia/validation/validity.py": {
        "Validity.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "messages": [
                    "Sequence[str]"
                ]
            }
        },
        "Validity.valid": {
            "name": "valid",
            "location": 9,
            "return": [
                "Validity"
            ],
            "arguments": {
                "cls": [
                    "Type[_TValidity]"
                ]
            }
        },
        "Validity.invalid": {
            "name": "invalid",
            "location": 13,
            "return": [
                "Validity"
            ],
            "arguments": {
                "cls": [
                    "Type[_TValidity]"
                ],
                "msg": [
                    "str"
                ]
            }
        },
        "Validity.__str__": {
            "name": "__str__",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Validity.__bool__": {
            "name": "__bool__",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Validity.__add__": {
            "name": "__add__",
            "location": 25,
            "return": [
                "Validity"
            ],
            "arguments": {
                "self": [
                    "_TValidity"
                ],
                "other": [
                    "Dict[str, Any]",
                    "int",
                    "Container[str]",
                    "List[str]"
                ]
            }
        }
    },
    "prosodia-master/src/prosodia/validation/__init__.py": {},
    "prosodia-master/tests/test_augmentedbnf.py": {
        "TestAugmentedBNF.test_augmentedbnf_parser_works": {
            "name": "test_augmentedbnf_parser_works",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAugmentedBNF.test_intermediate_augmented_bnf": {
            "name": "test_intermediate_augmented_bnf",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "prosodia-master/tests/test_bnf.py": {
        "fake_tgt": {
            "name": "fake_tgt",
            "location": 12,
            "return": [
                "Callable"
            ],
            "arguments": {
                "stacks": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "fake_tgt.wrapped": {
            "name": "wrapped",
            "location": 15,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {}
        },
        "TestBNF.test_bnf_parser_works": {
            "name": "test_bnf_parser_works",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBNF.test_no_arbitrary_recursion": {
            "name": "test_no_arbitrary_recursion",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "prosodia-master/tests/test_bnfrange.py": {
        "TestBNFRange.test_bnf_range_parser_works": {
            "name": "test_bnf_range_parser_works",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBNFRange.test_bnf_range_example_parser_works": {
            "name": "test_bnf_range_example_parser_works",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "prosodia-master/tests/test_bnfrepeat.py": {
        "TestBNFRepeat.test_bnf_range_parser_works": {
            "name": "test_bnf_range_parser_works",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBNFRepeat.test_bnf_range_example_parser_works": {
            "name": "test_bnf_range_example_parser_works",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "prosodia-master/tests/test_lazy.py": {
        "TestLazySequenceTransform.test_lazy_get": {
            "name": "test_lazy_get",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLazySequenceTransform.test_lazy_iter": {
            "name": "test_lazy_iter",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "prosodia-master/tests/_helpers.py": {
        "validate": {
            "name": "validate",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "test_case": [
                    "str",
                    "int"
                ],
                "validity": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "validate_recursive_grammar": {
            "name": "validate_recursive_grammar",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "test_case": [
                    "str",
                    "bool",
                    "int"
                ],
                "grammar": [
                    "Dict[str, str]"
                ],
                "text": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[int]",
                    "int",
                    "bool",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "prosodia-master/tests/__init__.py": {}
}
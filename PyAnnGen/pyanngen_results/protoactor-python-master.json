{
    "protoactor-python-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "protoactor-python-master/docs/conf.py": {
        "get_version": {
            "name": "get_version",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "protoactor-python-master/examples/chat/client/client.py": {
        "span_setup": {
            "name": "span_setup",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "span": [
                    "str",
                    "IO[bytes]",
                    "PID",
                    "bytes",
                    "bool"
                ],
                "message": [
                    "Any",
                    "Optional[int]",
                    "str",
                    "int",
                    "Optional[Any]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "init_jaeger_tracer": {
            "name": "init_jaeger_tracer",
            "location": 64,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "service_name": [
                    "Text",
                    "str",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "str",
                    "List[int]",
                    "bool"
                ]
            }
        }
    },
    "protoactor-python-master/examples/chat/messages/chat_grpc.py": {},
    "protoactor-python-master/examples/chat/messages/chat_pb2.py": {},
    "protoactor-python-master/examples/chat/server/main.py": {
        "init_jaeger_tracer": {
            "name": "init_jaeger_tracer",
            "location": 47,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "service_name": [
                    "Text",
                    "str",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict"
                ]
            }
        },
        "span_setup": {
            "name": "span_setup",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "span": [
                    "str",
                    "IO[bytes]",
                    "bytes",
                    "bool"
                ],
                "message": [
                    "Any",
                    "Optional[int]",
                    "str",
                    "int",
                    "Optional[Any]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "protoactor-python-master/examples/cluster_grain_hello_world/messages/protos.py": {
        "AbstractHelloGrain.say_hello": {
            "name": "say_hello",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "HelloGrainClient.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grain_id": []
            }
        },
        "HelloGrainActor.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grains.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grains.hello_grain_factory": {
            "name": "hello_grain_factory",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "factory": []
            }
        },
        "Grains.hello_grain": {
            "name": "hello_grain",
            "location": 96,
            "return": [
                "HelloGrainClient"
            ],
            "arguments": {
                "self": [],
                "grain_id": []
            }
        }
    },
    "protoactor-python-master/examples/cluster_grain_hello_world/messages/protos_grpc.py": {
        "HelloGrainBase.__mapping__": {
            "name": "__mapping__",
            "location": 21,
            "return": [
                "Dict[Text,]",
                "str",
                "List[str]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "HelloGrainStub.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        }
    },
    "protoactor-python-master/examples/cluster_grain_hello_world/messages/protos_pb2.py": {},
    "protoactor-python-master/examples/cluster_grain_hello_world/node_1/node_1.py": {
        "main": {
            "name": "main",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": []
            }
        }
    },
    "protoactor-python-master/examples/cluster_grain_hello_world/node_2/node_2.py": {
        "main": {
            "name": "main",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": []
            }
        }
    },
    "protoactor-python-master/examples/cluster_hello_world/messages/protos_grpc.py": {},
    "protoactor-python-master/examples/cluster_hello_world/messages/protos_pb2.py": {},
    "protoactor-python-master/examples/cluster_hello_world/node_1/node_1.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 41,
            "return": [
                "Node1Config"
            ],
            "arguments": {
                "argv": []
            }
        },
        "main": {
            "name": "main",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": []
            }
        }
    },
    "protoactor-python-master/examples/cluster_hello_world/node_2/node_2.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 42,
            "return": [
                "Node2Config"
            ],
            "arguments": {
                "argv": []
            }
        },
        "main": {
            "name": "main",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": []
            }
        }
    },
    "protoactor-python-master/examples/context_decorators/context_decorators.py": {
        "LoggingRootDecorator.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "bool",
                    "None",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[A,bool]"
                ]
            }
        },
        "LoggingDecorator.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "protoactor.actor.actor_contexAbstractContext",
                    "float",
                    "Sequence[int]",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "logger_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "protoactor-python-master/examples/futures/futures.py": {
        "HelloMessage.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "bool",
                    "str",
                    "float",
                    "Sequence[dict[str,str]]",
                    "Sequence[Dict[str,str]]",
                    "int"
                ]
            }
        }
    },
    "protoactor-python-master/examples/hello_world/hello_world.py": {
        "HelloMessage.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "bool",
                    "str",
                    "float",
                    "Sequence[dict[str,str]]",
                    "Sequence[Dict[str,str]]",
                    "int"
                ]
            }
        }
    },
    "protoactor-python-master/examples/lifecycle_events/lifecycle_events.py": {
        "init_jaeger_tracer": {
            "name": "init_jaeger_tracer",
            "location": 60,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "service_name": [
                    "Text",
                    "str",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict"
                ]
            }
        },
        "Hello.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "who": [
                    "float",
                    "int"
                ]
            }
        }
    },
    "protoactor-python-master/examples/mailbox_benchmark/mailbox_benchmark.py": {},
    "protoactor-python-master/examples/middleware/middleware.py": {
        "main.get_middleware": {
            "name": "get_middleware",
            "location": 14,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "next_middleware": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "main.get_receive_middleware": {
            "name": "get_receive_middleware",
            "location": 42,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "next_middleware": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "main.get_sender_middleware": {
            "name": "get_sender_middleware",
            "location": 61,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "next_middleware": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        }
    },
    "protoactor-python-master/examples/patterns/saga/account.py": {
        "Account.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ],
                "service_uptime": [
                    "int",
                    "str",
                    "Sequence",
                    "None",
                    "bool",
                    "datetime.datetime",
                    "Optional[str]"
                ],
                "refusal_probability": [
                    "int",
                    "str",
                    "Sequence",
                    "None",
                    "bool",
                    "datetime.datetime",
                    "Optional[str]"
                ],
                "busy_probability": [
                    "int",
                    "str",
                    "Sequence",
                    "None",
                    "bool",
                    "datetime.datetime",
                    "Optional[str]"
                ]
            }
        },
        "Account.__busy": {
            "name": "__busy",
            "location": 73,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.__refuse_permanently": {
            "name": "__refuse_permanently",
            "location": 77,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.__determine_processing_behavior": {
            "name": "__determine_processing_behavior",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.__already_processed": {
            "name": "__already_processed",
            "location": 94,
            "return": [
                "bool",
                "str",
                "Mapping",
                "int",
                "Dict[str,str]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "reply_to": [
                    "str",
                    "Optional[Any]",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "protoactor-python-master/examples/patterns/saga/account_proxy.py": {
        "AccountProxy.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "List",
                    "int",
                    "Tuple[int,int]",
                    "List[int]",
                    "Tuple[Union[int,int]]"
                ],
                "create_message": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "protoactor-python-master/examples/patterns/saga/in_memory_provider.py": {
        "InMemoryProvider.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/examples/patterns/saga/messages.py": {
        "ChangeBalance.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "bool",
                    "str",
                    "float",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "List[cirq.Circuit]",
                    "List[C]",
                    "int",
                    "Optional[str]"
                ],
                "reply_to": [
                    "bool",
                    "str",
                    "float",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "List[cirq.Circuit]",
                    "List[C]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Credit.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "str",
                    "int",
                    "decimal",
                    "float",
                    "protoactor.actor.PID",
                    "Union[str,int]"
                ],
                "reply_to": [
                    "str",
                    "int",
                    "decimal",
                    "float",
                    "protoactor.actor.PID",
                    "Union[str,int]"
                ]
            }
        },
        "Debit.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "str",
                    "int",
                    "decimal",
                    "float",
                    "protoactor.actor.PID",
                    "Union[str,int]"
                ],
                "reply_to": [
                    "str",
                    "int",
                    "decimal",
                    "float",
                    "protoactor.actor.PID",
                    "Union[str,int]"
                ]
            }
        },
        "EscalateTransfer.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "EscalateTransfer.message": {
            "name": "message",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EscalateTransfer.__str__": {
            "name": "__str__",
            "location": 46,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Result.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "FailedAndInconsistent.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[A,bool]"
                ]
            }
        },
        "FailedButConsistentResult.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[A,bool]"
                ]
            }
        },
        "SuccessResult.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[A,bool]"
                ]
            }
        },
        "TransferCompleted.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "from_balance": [
                    "bool",
                    "List[str]",
                    "None",
                    "Callable",
                    "Optional[int]",
                    "int"
                ],
                "to": [
                    "int",
                    "Optional[int]",
                    "None",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "to_balance": [
                    "bool",
                    "List[str]",
                    "None",
                    "Callable",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "TransferCompleted.__str__": {
            "name": "__str__",
            "location": 105,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransferFailed.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TransferFailed.__str__": {
            "name": "__str__",
            "location": 114,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnknownResult.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[A,bool]"
                ]
            }
        }
    },
    "protoactor-python-master/examples/patterns/saga/runner.py": {
        "Runner.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number_of_iterations": [
                    "bool",
                    "str",
                    "float"
                ],
                "interval_between_console_updates": [
                    "bool",
                    "str",
                    "float"
                ],
                "uptime": [
                    "bool",
                    "str",
                    "float"
                ],
                "refusal_probability": [
                    "bool",
                    "str",
                    "float"
                ],
                "busy_probability": [
                    "bool",
                    "str",
                    "float"
                ],
                "retry_attempts": [
                    "bool",
                    "str",
                    "float"
                ],
                "verbose": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "Runner.__create_account": {
            "name": "__create_account",
            "location": 35,
            "return": [
                "str",
                "Union[str, int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "protoactor.actor.protos_pb2.PID"
                ]
            }
        },
        "Runner.__as_percentage": {
            "name": "__as_percentage",
            "location": 114,
            "return": [
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "number_of_iterations": [
                    "float",
                    "int"
                ],
                "results": [
                    "float",
                    "int"
                ]
            }
        },
        "Runner.receive.every_nth_action": {
            "name": "every_nth_action",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "i": [
                    "int",
                    "list",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Runner.receive.every_action": {
            "name": "every_action",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "i": [
                    "int",
                    "Optional[int]",
                    "Sequence[int]"
                ],
                "nth": [
                    "int"
                ]
            }
        }
    },
    "protoactor-python-master/examples/patterns/saga/saga.py": {},
    "protoactor-python-master/examples/patterns/saga/transfer_process.py": {
        "TransferProcess.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_id": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "to_id": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "amount": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[List[Any]]",
                    "List[Any]"
                ],
                "provider": [
                    "str",
                    "int",
                    "None",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "persistence_id": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "Optional[str]",
                    "Set[int]",
                    "Optional[Set[int]]"
                ],
                "availability": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[List[Any]]",
                    "List[Any]"
                ]
            }
        },
        "TransferProcess.__try_credit": {
            "name": "__try_credit",
            "location": 35,
            "return": [
                "str",
                "Counter",
                "float",
                "int"
            ],
            "arguments": {
                "target_actor": [
                    "float",
                    "protoactor.actor.PID",
                    "bool",
                    "str",
                    "Optional[Union[float,str]]",
                    "None"
                ],
                "amount": [
                    "float",
                    "protoactor.actor.PID",
                    "bool",
                    "str",
                    "Optional[Union[float,str]]",
                    "None"
                ]
            }
        },
        "TransferProcess.__try_debit": {
            "name": "__try_debit",
            "location": 39,
            "return": [
                "str",
                "Counter",
                "float",
                "int"
            ],
            "arguments": {
                "target_actor": [
                    "float",
                    "protoactor.actor.PID",
                    "bool",
                    "str",
                    "Optional[Union[float,str]]",
                    "None"
                ],
                "amount": [
                    "float",
                    "protoactor.actor.PID",
                    "bool",
                    "str",
                    "Optional[Union[float,str]]",
                    "None"
                ]
            }
        },
        "TransferProcess.__apply_event": {
            "name": "__apply_event",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict",
                    "str",
                    "homeassistancore.Event"
                ]
            }
        },
        "TransferProcess.__fail": {
            "name": "__fail",
            "location": 54,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/examples/patterns/saga/factories/transfer_factory.py": {
        "TransferFactory.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "float",
                    "bool"
                ],
                "provider": [
                    "int",
                    "float",
                    "bool"
                ],
                "availability": [
                    "int",
                    "float",
                    "bool"
                ],
                "retry_attempts": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TransferFactory.create_transfer": {
            "name": "create_transfer",
            "location": 16,
            "return": [
                "bool",
                "float",
                "Dict",
                "List[str]",
                "Set[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "actor_name": [
                    "str"
                ],
                "from_account": [
                    "str",
                    "int"
                ],
                "to_account": [
                    "str",
                    "int"
                ],
                "amount": [
                    "str",
                    "int"
                ],
                "persistence_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "protoactor-python-master/examples/patterns/saga/internal/for_with_progress.py": {
        "ForWithProgress.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "total": [
                    "bool",
                    "float",
                    "Optional[dict]",
                    "Dict",
                    "Optional[GraphLogger]",
                    "None"
                ],
                "every_nth": [
                    "bool",
                    "float",
                    "Optional[dict]",
                    "Dict",
                    "Optional[GraphLogger]",
                    "None"
                ],
                "run_both_on_every": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "float"
                ],
                "run_on_start": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "ForWithProgress.every_nth": {
            "name": "every_nth",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "every_nth_action": [
                    "Callable[[int],None]",
                    "Sequence[T]",
                    "Callable[int,None]",
                    "float",
                    "str"
                ],
                "every_action": [
                    "BaseException"
                ]
            }
        },
        "ForWithProgress.every_nth.must_run_nth": {
            "name": "must_run_nth",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "current": [
                    "str",
                    "list",
                    "Dict[str, List[str]]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "protoactor-python-master/examples/persistence/messages/protos_grpc.py": {},
    "protoactor-python-master/examples/persistence/messages/protos_pb2.py": {},
    "protoactor-python-master/examples/persistence/persistence/persistence.py": {
        "LoopActor.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoopActor.generate_pronounceable_name": {
            "name": "generate_pronounceable_name",
            "location": 42,
            "return": [
                "Text",
                "str",
                "List[str]"
            ],
            "arguments": {
                "length": [
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "Container[str]"
                ]
            }
        },
        "MyPersistenceActor.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "List[Tuple[int,bytes]]",
                    "List[tuple[Union[int,bytes]]]"
                ]
            }
        },
        "MyPersistenceActor.__apply_event": {
            "name": "__apply_event",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Mapping",
                    "raiden_libs.events.Event",
                    "relay.streams.Event",
                    "Mapping[str,Any]",
                    "relay.events.Event"
                ]
            }
        },
        "MyPersistenceActor.__apply_snapshot": {
            "name": "__apply_snapshot",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "snapshot": [
                    "float",
                    "int"
                ]
            }
        }
    },
    "protoactor-python-master/examples/receive_timeout/receive_timeout.py": {},
    "protoactor-python-master/examples/remote_benchmark/messages/protos_grpc.py": {},
    "protoactor-python-master/examples/remote_benchmark/messages/protos_pb2.py": {},
    "protoactor-python-master/examples/remote_benchmark/node_1/node_1.py": {
        "LocalClient.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int",
                    "float",
                    "bool"
                ],
                "message_count": [
                    "int"
                ],
                "wg": [
                    "int",
                    "float",
                    "bool"
                ],
                "loop": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "protoactor-python-master/examples/remote_benchmark/node_2/node_2.py": {
        "EchoActor.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/examples/router/router.py": {
        "Message.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "bool",
                    "str",
                    "float",
                    "Sequence[dict[str,str]]",
                    "Sequence[Dict[str,str]]",
                    "int"
                ]
            }
        },
        "Message.hash_by": {
            "name": "hash_by",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyTestActor.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/examples/schedulers/simple_scheduler.py": {
        "Greet.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "who": [
                    "float",
                    "int"
                ]
            }
        },
        "Greet.who": {
            "name": "who",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleMessage.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "IO",
                    "bool",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "SimpleMessage.msg": {
            "name": "msg",
            "location": 37,
            "return": [
                "str",
                "list",
                "List[List[str]]",
                "int",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScheduleGreetActor.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScheduleActor.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/examples/spawn_benchmark/spawn_benchmark.py": {
        "MyActor.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/examples/supervision/escalate_supervision.py": {},
    "protoactor-python-master/examples/supervision/supervision.py": {
        "Hello.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "who": [
                    "float",
                    "int"
                ]
            }
        },
        "Decider.decide": {
            "name": "decide",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pid": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "reason": [
                    "str",
                    "int"
                ]
            }
        },
        "ChildActor.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParentActor.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/protoactor/__init__.py": {},
    "protoactor-python-master/protoactor/actor/actor.py": {
        "EmptyActor.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "receive": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/actor/actor_context.py": {
        "AbstractSenderContext.headers": {
            "name": "headers",
            "location": 44,
            "return": [
                "protoactor.actor.message_header.MessageHeader",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractSenderContext.message": {
            "name": "message",
            "location": 49,
            "return": [
                "any",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractSpawnerContext.spawn": {
            "name": "spawn",
            "location": 76,
            "return": [
                "protoactor.actor.protos_pb2.PID",
                "None"
            ],
            "arguments": {
                "self": [],
                "props": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "AbstractSpawnerContext.spawn_prefix": {
            "name": "spawn_prefix",
            "location": 80,
            "return": [
                "protoactor.actor.protos_pb2.PID",
                "None"
            ],
            "arguments": {
                "self": [],
                "props": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "prefix": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "AbstractSpawnerContext.spawn_named": {
            "name": "spawn_named",
            "location": 84,
            "return": [
                "protoactor.actor.protos_pb2.PID",
                "None"
            ],
            "arguments": {
                "self": [],
                "props": [
                    "str",
                    "Iterable[str]",
                    "Props",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "Iterable[str]",
                    "Props",
                    "List[str]"
                ]
            }
        },
        "AbstractContext.parent": {
            "name": "parent",
            "location": 113,
            "return": [
                "protoactor.actor.protos_pb2.PID",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractContext.my_self": {
            "name": "my_self",
            "location": 123,
            "return": [
                "protoactor.actor.protos_pb2.PID",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "AbstractContext.sender": {
            "name": "sender",
            "location": 128,
            "return": [
                "protoactor.actor.protos_pb2.PID",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractContext.actor": {
            "name": "actor",
            "location": 133,
            "return": [
                "Actor",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractContext.receive_timeout": {
            "name": "receive_timeout",
            "location": 138,
            "return": [
                "datetime.timedelta",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractContext.children": {
            "name": "children",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractContext.stash": {
            "name": "stash",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractContext.set_receive_timeout": {
            "name": "set_receive_timeout",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "receive_timeout": [
                    "int",
                    "str",
                    "datetime.timedelta"
                ]
            }
        },
        "AbstractContext.cancel_receive_timeout": {
            "name": "cancel_receive_timeout",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractContext.reenter_after": {
            "name": "reenter_after",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "action": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "RootContext.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_header": [
                    "MessageHeader",
                    "str",
                    "int",
                    "float",
                    "bytes",
                    "List[str]",
                    "bool",
                    "datetime.datetime"
                ],
                "middleware": [
                    "Optional[str]",
                    "None",
                    "bool",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "str",
                    "Optional[Tuple]",
                    "Tuple"
                ]
            }
        },
        "RootContext.headers": {
            "name": "headers",
            "location": 192,
            "return": [
                "int",
                "dict",
                "Dict[str, Type]",
                "str",
                "Dict[str, float]",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootContext.sender_middleware": {
            "name": "sender_middleware",
            "location": 196,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootContext.message": {
            "name": "message",
            "location": 200,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootContext.spawn": {
            "name": "spawn",
            "location": 203,
            "return": [
                "AbstractSet[str]",
                "cmk.utils.type_defs.HostName",
                "str"
            ],
            "arguments": {
                "self": [],
                "props": [
                    "Optional[Union[str,Any,Any,Any]]",
                    "str",
                    "Any",
                    "None"
                ]
            }
        },
        "RootContext.spawn_named": {
            "name": "spawn_named",
            "location": 207,
            "return": [
                "Type[Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "props": [
                    "Optional[str]",
                    "str",
                    "Optional[Pattern]",
                    "Optional[Dict[str, Any]]",
                    "Props"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "RootContext.spawn_prefix": {
            "name": "spawn_prefix",
            "location": 214,
            "return": [
                "AbstractSet[str]",
                "cmk.utils.type_defs.HostName",
                "str"
            ],
            "arguments": {
                "self": [],
                "props": [
                    "Optional[Union[str,Any,Any,Any]]",
                    "str",
                    "Any",
                    "None"
                ],
                "prefix": [
                    "bytes",
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "RootContext.with_headers": {
            "name": "with_headers",
            "location": 218,
            "return": [
                "List[str]",
                "int",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "headers": []
            }
        },
        "RootContext.with_sender_middleware": {
            "name": "with_sender_middleware",
            "location": 221,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "middleware": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "RootContext.__copy_with": {
            "name": "__copy_with",
            "location": 285,
            "return": [
                "RootContext",
                "Optional[datetime.datetime]",
                "cmk.utils.type_defs.HostName",
                "str"
            ],
            "arguments": {
                "self": [],
                "new_params": [
                    "Dict",
                    "Dict[str,Any]",
                    "int",
                    "bytes",
                    "Tuple[cirq.Qid]",
                    "Union[Dict,None]",
                    "None"
                ]
            }
        },
        "ActorContextExtras.__init__": {
            "name": "__init__",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ActorContextExtras.children": {
            "name": "children",
            "location": 307,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContextExtras.receive_timeout_timer": {
            "name": "receive_timeout_timer",
            "location": 311,
            "return": [
                "int",
                "str",
                "raiden.utils.Tuple[int, int]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContextExtras.restart_statistics": {
            "name": "restart_statistics",
            "location": 315,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContextExtras.stash": {
            "name": "stash",
            "location": 319,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContextExtras.watchers": {
            "name": "watchers",
            "location": 323,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContextExtras.context": {
            "name": "context",
            "location": 327,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContextExtras.init_receive_timeout_timer": {
            "name": "init_receive_timeout_timer",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timer": [
                    "str",
                    "bytes",
                    "raiden.utils.Tuple[int,int]"
                ]
            }
        },
        "ActorContextExtras.reset_receive_timeout_timer": {
            "name": "reset_receive_timeout_timer",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContextExtras.stop_receive_timeout_timer": {
            "name": "stop_receive_timeout_timer",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContextExtras.kill_receive_timeout_timer": {
            "name": "kill_receive_timeout_timer",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContextExtras.add_child": {
            "name": "add_child",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pid": []
            }
        },
        "ActorContextExtras.remove_child": {
            "name": "remove_child",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ActorContextExtras.watch": {
            "name": "watch",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pid": []
            }
        },
        "ActorContextExtras.unwatch": {
            "name": "unwatch",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ActorContext.__init__": {
            "name": "__init__",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "props": [
                    "str",
                    "Callable",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "parent": [
                    "bool",
                    "str",
                    "Type",
                    "Callable"
                ]
            }
        },
        "ActorContext.parent": {
            "name": "parent",
            "location": 381,
            "return": [
                "Optional[int]",
                "T",
                "Optional[str]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContext.my_self": {
            "name": "my_self",
            "location": 389,
            "return": [
                "protoactor.actor.protos_pb2.PID",
                "int",
                "float",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "str",
                    "T",
                    "Callable",
                    "Union[int, str]",
                    "List[str]",
                    "type"
                ]
            }
        },
        "ActorContext.children": {
            "name": "children",
            "location": 393,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContext.actor": {
            "name": "actor",
            "location": 400,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContext.receive_timeout": {
            "name": "receive_timeout",
            "location": 404,
            "return": [
                "int",
                "str",
                "raiden.utils.Tuple[int, int]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContext.message": {
            "name": "message",
            "location": 408,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContext.sender": {
            "name": "sender",
            "location": 412,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContext.headers": {
            "name": "headers",
            "location": 416,
            "return": [
                "str",
                "IO[str]",
                "Dict[str, Any]",
                "dict",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContext.stash": {
            "name": "stash",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContext.spawn": {
            "name": "spawn",
            "location": 425,
            "return": [
                "str",
                "bool",
                "int",
                "Type"
            ],
            "arguments": {
                "self": [],
                "props": [
                    "int",
                    "Dict",
                    "Props"
                ]
            }
        },
        "ActorContext.spawn_prefix": {
            "name": "spawn_prefix",
            "location": 429,
            "return": [
                "str",
                "bool",
                "int",
                "Type"
            ],
            "arguments": {
                "self": [],
                "props": [
                    "int",
                    "Dict",
                    "Props"
                ],
                "prefix": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict[str,str]"
                ]
            }
        },
        "ActorContext.spawn_named": {
            "name": "spawn_named",
            "location": 433,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": [],
                "props": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "None",
                    "Props",
                    "Any",
                    "Iterable[Any]",
                    "Optional[Any]"
                ],
                "name": [
                    "float",
                    "str",
                    "int",
                    "Type"
                ]
            }
        },
        "ActorContext.set_receive_timeout": {
            "name": "set_receive_timeout",
            "location": 448,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "int",
                "Optional[int]",
                "bool",
                "Optional[datetime.datetime]",
                "Union[int,str]"
            ],
            "arguments": {
                "self": [],
                "duration": [
                    "str",
                    "list",
                    "Tuple[int, int, int]",
                    "asyncio.AbstractEventLoop",
                    "int"
                ]
            }
        },
        "ActorContext.cancel_receive_timeout": {
            "name": "cancel_receive_timeout",
            "location": 464,
            "return": [
                "None",
                "str",
                "Optional[bool]",
                "Dict",
                "Iterator[Tuple[str,str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContext.reenter_after": {
            "name": "reenter_after",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "action": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "ActorContext.__incarnate_actor": {
            "name": "__incarnate_actor",
            "location": 657,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContext.__dispose_actor_if_disposable": {
            "name": "__dispose_actor_if_disposable",
            "location": 750,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContext.__reset_receive_timeout": {
            "name": "__reset_receive_timeout",
            "location": 755,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContext.__stop_receive_timeout": {
            "name": "__stop_receive_timeout",
            "location": 760,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContext._ensure_extras": {
            "name": "_ensure_extras",
            "location": 772,
            "return": [
                "int",
                "str",
                "Callable",
                "Dict[int,str]",
                "Tuple",
                "Pattern",
                "Dict[str,int]",
                "ActorContextExtras"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/protoactor/actor/behavior.py": {
        "Behavior.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "receive": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "Behavior.become": {
            "name": "become",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "receive": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Behavior.become_stacked": {
            "name": "become_stacked",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "receive": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Behavior.unbecome_stacked": {
            "name": "unbecome_stacked",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Behavior.receive_async": {
            "name": "receive_async",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/actor/cancel_token.py": {
        "CancelToken.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ],
                "loop": [
                    "str",
                    "None",
                    "int",
                    "asyncio.StreamReader",
                    "Exception"
                ]
            }
        },
        "CancelToken.loop": {
            "name": "loop",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CancelToken.chain": {
            "name": "chain",
            "location": 21,
            "return": [
                "CancelToken",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "List",
                    "Dict",
                    "Collection[str]",
                    "Collection"
                ]
            }
        },
        "CancelToken.trigger": {
            "name": "trigger",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CancelToken.triggered_token": {
            "name": "triggered_token",
            "location": 33,
            "return": [
                "CancelToken",
                "None",
                "List[Callable]",
                "int",
                "bool",
                "Sequence[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CancelToken.triggered": {
            "name": "triggered",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CancelToken.raise_if_triggered": {
            "name": "raise_if_triggered",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CancelToken.__str__": {
            "name": "__str__",
            "location": 100,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CancelToken.__repr__": {
            "name": "__repr__",
            "location": 103,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "CancelToken.wait.cancel_not_done": {
            "name": "cancel_not_done",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "fut": [
                    "List[str]",
                    "bool",
                    "int",
                    "str"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/actor/context_decorator.py": {
        "RootContextDecorator.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "RootContextDecorator.headers": {
            "name": "headers",
            "location": 24,
            "return": [
                "int",
                "dict",
                "Dict[str, Union[str, int]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootContextDecorator.message": {
            "name": "message",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootContextDecorator.spawn": {
            "name": "spawn",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "props": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "RootContextDecorator.spawn_named": {
            "name": "spawn_named",
            "location": 34,
            "return": [
                "Dict[str, str]",
                "str",
                "NamedTuple"
            ],
            "arguments": {
                "self": [],
                "props": [
                    "str",
                    "Type",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "str",
                    "Type",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "RootContextDecorator.spawn_prefix": {
            "name": "spawn_prefix",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "props": [
                    "str",
                    "List"
                ],
                "prefix": [
                    "str",
                    "List"
                ]
            }
        },
        "ActorContextDecorator.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ActorContextDecorator.headers": {
            "name": "headers",
            "location": 68,
            "return": [
                "int",
                "dict",
                "Dict[str, Union[str, int]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContextDecorator.message": {
            "name": "message",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContextDecorator.parent": {
            "name": "parent",
            "location": 76,
            "return": [
                "type",
                "Optional[Iterable[Any]]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContextDecorator.my_self": {
            "name": "my_self",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContextDecorator.sender": {
            "name": "sender",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContextDecorator.actor": {
            "name": "actor",
            "location": 88,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContextDecorator.receive_timeout": {
            "name": "receive_timeout",
            "location": 92,
            "return": [
                "str",
                "int",
                "bytes",
                "type",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContextDecorator.children": {
            "name": "children",
            "location": 96,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContextDecorator.stash": {
            "name": "stash",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContextDecorator.spawn": {
            "name": "spawn",
            "location": 119,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "props": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ActorContextDecorator.spawn_named": {
            "name": "spawn_named",
            "location": 122,
            "return": [
                "Dict[str, str]",
                "str",
                "NamedTuple"
            ],
            "arguments": {
                "self": [],
                "props": [
                    "str",
                    "Type",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "str",
                    "Type",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ActorContextDecorator.spawn_prefix": {
            "name": "spawn_prefix",
            "location": 125,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "props": [
                    "str",
                    "List"
                ],
                "prefix": [
                    "str",
                    "List"
                ]
            }
        },
        "ActorContextDecorator.set_receive_timeout": {
            "name": "set_receive_timeout",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "receive_timeout": [
                    "int",
                    "str",
                    "float",
                    "Union[float,datetime.timedelta]"
                ]
            }
        },
        "ActorContextDecorator.cancel_receive_timeout": {
            "name": "cancel_receive_timeout",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContextDecorator.reenter_after": {
            "name": "reenter_after",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Tuple[int,int]",
                    "str",
                    "Tuple[Union[int,int]]",
                    "Callable[,object]",
                    "Pattern"
                ],
                "action": [
                    "Tuple[int,int]",
                    "str",
                    "Tuple[Union[int,int]]",
                    "Callable[,object]",
                    "Pattern"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/actor/event_stream.py": {
        "Subscription.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_stream": [
                    "str",
                    "float",
                    "int",
                    "Dict[str,str]"
                ],
                "action": [
                    "float",
                    "bool",
                    "Dict[str,Any]",
                    "Step",
                    "Tuple[Union[list,list]]",
                    "Tuple[List,List]"
                ],
                "dispatcher": [
                    "float",
                    "bool",
                    "Dict[str,Any]",
                    "Step",
                    "Tuple[Union[list,list]]",
                    "Tuple[List,List]"
                ]
            }
        },
        "Subscription.id": {
            "name": "id",
            "location": 19,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subscription.dispatcher": {
            "name": "dispatcher",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subscription.action": {
            "name": "action",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subscription.unsubscribe": {
            "name": "unsubscribe",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventStream.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventStream.subscribe": {
            "name": "subscribe",
            "location": 40,
            "return": [
                "Subscription",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "Callable",
                    "Type",
                    "bool",
                    "str"
                ],
                "msg_type": [
                    "Callable",
                    "None",
                    "Type",
                    "bool",
                    "str"
                ],
                "dispatcher": [
                    "bool"
                ]
            }
        },
        "EventStream.unsubscribe": {
            "name": "unsubscribe",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uniq_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/actor/exceptions.py": {
        "ProcessNameExistException.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float"
                ],
                "pid": [
                    "int",
                    "str",
                    "Sequence",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/actor/log.py": {
        "create_logger": {
            "name": "create_logger",
            "location": 4,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "level": [
                    "int"
                ],
                "prefix": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "Optional[dict]",
                    "Dict"
                ],
                "context": [
                    "Type",
                    "Dict",
                    "None",
                    "int"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/actor/messages.py": {
        "Restart.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Failure.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "who": [
                    "float",
                    "int"
                ],
                "reason": [
                    "int",
                    "float",
                    "bool"
                ],
                "crs": [
                    "int",
                    "float",
                    "bool"
                ],
                "message": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Failure.who": {
            "name": "who",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Failure.reason": {
            "name": "reason",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Failure.restart_statistics": {
            "name": "restart_statistics",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Failure.message": {
            "name": "message",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Continuation.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "int",
                    "float",
                    "bool"
                ],
                "message": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "DeadLetterEvent.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "int",
                    "float",
                    "bool"
                ],
                "message": [
                    "int",
                    "float",
                    "bool"
                ],
                "sender": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "DeadLetterEvent.pid": {
            "name": "pid",
            "location": 101,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeadLetterEvent.message": {
            "name": "message",
            "location": 105,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeadLetterEvent.sender": {
            "name": "sender",
            "location": 109,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/protoactor/actor/message_envelope.py": {
        "MessageEnvelope.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bytes",
                    "int",
                    "float",
                    "bool"
                ],
                "sender": [
                    "str",
                    "None",
                    "bytes",
                    "int",
                    "float",
                    "bool"
                ],
                "header": [
                    "str",
                    "bytes",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "MessageEnvelope.message": {
            "name": "message",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageEnvelope.sender": {
            "name": "sender",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageEnvelope.header": {
            "name": "header",
            "location": 25,
            "return": [
                "int",
                "dict",
                "Dict[str, Type]",
                "str",
                "Dict[str, float]",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageEnvelope.wrap": {
            "name": "wrap",
            "location": 29,
            "return": [
                "MessageEnvelope",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "message": [
                    "str",
                    "bool",
                    "Callable",
                    "int"
                ]
            }
        },
        "MessageEnvelope.with_sender": {
            "name": "with_sender",
            "location": 34,
            "return": [
                "MessageEnvelope",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "MessageEnvelope.with_message": {
            "name": "with_message",
            "location": 37,
            "return": [
                "MessageEnvelope",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "MessageEnvelope.with_header": {
            "name": "with_header",
            "location": 40,
            "return": [
                "str",
                "MessageEnvelope"
            ],
            "arguments": {
                "self": [],
                "header": [
                    "str",
                    "None",
                    "protoactor.actor.message_header.MessageHeader",
                    "Optional[dict]",
                    "Dict"
                ],
                "key": [
                    "List[str]",
                    "str",
                    "Optional[List[str]]",
                    "Optional[dict]",
                    "Optional[str]"
                ],
                "value": [
                    "List[str]",
                    "str",
                    "Optional[List[str]]",
                    "Optional[dict]",
                    "Optional[str]"
                ]
            }
        },
        "MessageEnvelope.with_headers": {
            "name": "with_headers",
            "location": 52,
            "return": [
                "str",
                "MessageEnvelope"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "List[int]",
                    "List",
                    "int",
                    "Dict",
                    "str"
                ]
            }
        },
        "MessageEnvelope.unwrap": {
            "name": "unwrap",
            "location": 60,
            "return": [
                "str",
                "Tuple",
                "Dict[str,int]",
                "Tuple[Union[int,MutableMapping,MessageEnvelope,None]]"
            ],
            "arguments": {
                "message": [
                    "int",
                    "MutableMapping[str,Any]",
                    "MutableMapping"
                ]
            }
        },
        "MessageEnvelope.unwrap_header": {
            "name": "unwrap_header",
            "location": 66,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]",
                "dict",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "message": [
                    "int"
                ]
            }
        },
        "MessageEnvelope.unwrap_message": {
            "name": "unwrap_message",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "message": [
                    "int"
                ]
            }
        },
        "MessageEnvelope.unwrap_sender": {
            "name": "unwrap_sender",
            "location": 79,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "Optional[List[Any]]",
                "List",
                "Optional[BaseException]"
            ],
            "arguments": {
                "message": [
                    "int"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/actor/message_header.py": {
        "MessageHeader.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[bytes]",
                    "None",
                    "str",
                    "Optional[bool]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "MessageHeader.__getitem__": {
            "name": "__getitem__",
            "location": 11,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "MessageHeader.__len__": {
            "name": "__len__",
            "location": 14,
            "return": [
                "int",
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageHeader.__iter__": {
            "name": "__iter__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageHeader.extend": {
            "name": "extend",
            "location": 20,
            "return": [
                "MessageHeader",
                "bytes",
                "Dict",
                "Dict[int,str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[Any]",
                    "None",
                    "str",
                    "Optional[Sequence[Any]]",
                    "Dict",
                    "Any",
                    "Sequence[Any]",
                    "Type[MutableMapping]",
                    "Type"
                ],
                "value": [
                    "Optional[Any]",
                    "None",
                    "str",
                    "Optional[Sequence[Any]]",
                    "Dict",
                    "Any",
                    "Sequence[Any]",
                    "Type[MutableMapping]",
                    "Type"
                ],
                "items": [
                    "Optional[Mapping]",
                    "None",
                    "Dict[str,Optional[str]]",
                    "Mapping",
                    "Optional[int]",
                    "Dict[str,Union[str,None]]",
                    "Optional[Dict[str,Any]]",
                    "int"
                ]
            }
        },
        "MessageHeader.empty": {
            "name": "empty",
            "location": 28,
            "return": [
                "MessageHeader",
                "Dict",
                "bytes",
                "int",
                "Dict[str,str]",
                "Dict[str,Any]",
                "Callable"
            ],
            "arguments": {}
        }
    },
    "protoactor-python-master/protoactor/actor/persistence.py": {
        "Persistent.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Persistent.name": {
            "name": "name",
            "location": 16,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Persistent.actor_id": {
            "name": "actor_id",
            "location": 20,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Snapshot.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ],
                "index": [
                    "str"
                ]
            }
        },
        "Snapshot.state": {
            "name": "state",
            "location": 60,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Snapshot.index": {
            "name": "index",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecoverSnapshot.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "int",
                    "Iterator[str]",
                    "Iterator"
                ],
                "index": [
                    "str",
                    "int",
                    "Iterator[str]",
                    "Iterator"
                ]
            }
        },
        "PersistedSnapshot.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "int",
                    "Iterator[str]",
                    "Iterator"
                ],
                "index": [
                    "str",
                    "int",
                    "Iterator[str]",
                    "Iterator"
                ]
            }
        },
        "Event.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str,Any]",
                    "bytes",
                    "Dict[str,str]",
                    "List",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "None"
                ],
                "index": [
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "Event.data": {
            "name": "data",
            "location": 84,
            "return": [
                "Dict[str, List[int]]",
                "str",
                "Optional[float]",
                "dict",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.index": {
            "name": "index",
            "location": 88,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecoverEvent.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "int",
                    "bytes"
                ],
                "index": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "PersistedEvent.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "int",
                    "bytes"
                ],
                "index": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "PersistentActor.persistence": {
            "name": "persistence",
            "location": 108,
            "return": [
                "Persistance",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Provider.get_state": {
            "name": "get_state",
            "location": 114,
            "return": [
                "ProviderState",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryProvider.get_state": {
            "name": "get_state",
            "location": 145,
            "return": [
                "InMemoryProviderState",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryProviderState.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryProviderState.get_snapshot_interval": {
            "name": "get_snapshot_interval",
            "location": 154,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Persistent.init.update_actor_state_with_event": {
            "name": "update_actor_state_with_event",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "e": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/actor/process.py": {
        "ActorProcess.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mailbox": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ActorProcess.mailbox": {
            "name": "mailbox",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorProcess.setis_dead": {
            "name": "setis_dead",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "float",
                    "T",
                    "bool",
                    "Union[bool,Any]",
                    "Any"
                ]
            }
        },
        "ActorProcess.getis_dead": {
            "name": "getis_dead",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FutureProcess.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cancellation_token": [
                    "Sequence",
                    "List[str]",
                    "None",
                    "str"
                ]
            }
        },
        "FutureProcess.pid": {
            "name": "pid",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FutureProcess.task": {
            "name": "task",
            "location": 76,
            "return": [
                "str",
                "int",
                "Generator",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GuardianProcess.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "GuardianProcess.escalate_failure": {
            "name": "escalate_failure",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "who": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "reason": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "GuardianProcess.children": {
            "name": "children",
            "location": 141,
            "return": [
                "List[PID]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessRegistry.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessRegistry.address": {
            "name": "address",
            "location": 159,
            "return": [
                "int",
                "str",
                "list[]",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProcessRegistry.register_host_resolver": {
            "name": "register_host_resolver",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resolver": [
                    "str",
                    "List",
                    "Tuple",
                    "Callable[,None]"
                ]
            }
        },
        "ProcessRegistry.get": {
            "name": "get",
            "location": 165,
            "return": [
                "str",
                "float",
                "List[Tuple[str,str]]",
                "None",
                "bool",
                "NamedTuple",
                "IO",
                "int",
                "OrderedDict",
                "Pattern",
                "Dict[str,str]",
                "DeadLettersProcess"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "raiden.utils.Address"
                ]
            }
        },
        "ProcessRegistry.try_add": {
            "name": "try_add",
            "location": 179,
            "return": [
                "bool",
                "Tuple[bool]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "float"
                ],
                "ref": [
                    "str",
                    "bool",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "ProcessRegistry.remove": {
            "name": "remove",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "MutableSequence[utils.CWLObjectType]",
                    "MutableSequence"
                ]
            }
        },
        "ProcessRegistry.next_id": {
            "name": "next_id",
            "location": 192,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Guardians.__init__": {
            "name": "__init__",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Guardians.get_guardian_pid": {
            "name": "get_guardian_pid",
            "location": 203,
            "return": [
                "str",
                "bool",
                "int",
                "Callable",
                "GuardianProcess"
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "int",
                    "Dict"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/actor/props.py": {
        "default_spawner": {
            "name": "default_spawner",
            "location": 19,
            "return": [
                "Dict[str,Any]",
                "Callable[[Mapping],T]",
                "int",
                "float"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ],
                "props": [
                    "Exception",
                    "int",
                    "str",
                    "type",
                    "Optional[Dict[str, Any]]"
                ],
                "parent": [
                    "Optional[Callable]",
                    "str",
                    "Callable",
                    "int",
                    "None"
                ]
            }
        },
        "default_context_decorator": {
            "name": "default_context_decorator",
            "location": 35,
            "return": [
                "Callable[[Mapping],T]",
                "str",
                "int",
                "bool",
                "float",
                "Any",
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "bool",
                    "Any",
                    "None",
                    "protoactor.actor.actor_contexAbstractContext",
                    "Optional[str]"
                ]
            }
        },
        "Props.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "producer": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ],
                "spawner": [
                    "int",
                    "bool",
                    "float"
                ],
                "mailbox_producer": [
                    "int",
                    "bool",
                    "float"
                ],
                "guardian_strategy": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ],
                "supervisor_strategy": [
                    "int",
                    "bool",
                    "float"
                ],
                "dispatcher": [
                    "int",
                    "bool",
                    "float"
                ],
                "receive_middleware": [
                    "List",
                    "int",
                    "bool",
                    "float"
                ],
                "sender_middleware": [
                    "List",
                    "int",
                    "bool",
                    "float"
                ],
                "receive_middleware_chain": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ],
                "sender_middleware_chain": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ],
                "context_decorator": [
                    "List",
                    "int",
                    "bool",
                    "float"
                ],
                "context_decorator_chain": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Props.producer": {
            "name": "producer",
            "location": 78,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Props.mailbox_producer": {
            "name": "mailbox_producer",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Props.guardian_strategy": {
            "name": "guardian_strategy",
            "location": 86,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Props.supervisor_strategy": {
            "name": "supervisor_strategy",
            "location": 90,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Props.dispatcher": {
            "name": "dispatcher",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Props.receive_middleware": {
            "name": "receive_middleware",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Props.sender_middleware": {
            "name": "sender_middleware",
            "location": 102,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Props.receive_middleware_chain": {
            "name": "receive_middleware_chain",
            "location": 106,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Props.sender_middleware_chain": {
            "name": "sender_middleware_chain",
            "location": 110,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Props.context_decorator": {
            "name": "context_decorator",
            "location": 114,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Props.context_decorator_chain": {
            "name": "context_decorator_chain",
            "location": 118,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Props.with_producer": {
            "name": "with_producer",
            "location": 121,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "producer": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Props.with_dispatcher": {
            "name": "with_dispatcher",
            "location": 124,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dispatcher": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Props.with_mailbox": {
            "name": "with_mailbox",
            "location": 127,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mailbox_producer": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Props.with_context_decorator": {
            "name": "with_context_decorator",
            "location": 130,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "context_decorator": [
                    "TextIO",
                    "List[List[int]]",
                    "List[list[int]]"
                ]
            }
        },
        "Props.with_guardian_supervisor_strategy": {
            "name": "with_guardian_supervisor_strategy",
            "location": 138,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "guardian_strategy": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Props.with_child_supervisor_strategy": {
            "name": "with_child_supervisor_strategy",
            "location": 141,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "supervisor_strategy": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Props.with_receive_middleware": {
            "name": "with_receive_middleware",
            "location": 144,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "middleware": [
                    "str",
                    "bool",
                    "asyncio.Transport",
                    "int"
                ]
            }
        },
        "Props.with_sender_middleware": {
            "name": "with_sender_middleware",
            "location": 151,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "middleware": [
                    "str",
                    "bool",
                    "asyncio.Transport",
                    "int"
                ]
            }
        },
        "Props.with_spawner": {
            "name": "with_spawner",
            "location": 158,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "spawner": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Props.spawn": {
            "name": "spawn",
            "location": 161,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ],
                "parent": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Props.__copy_with": {
            "name": "__copy_with",
            "location": 164,
            "return": [
                "Props",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "new_params": [
                    "Dict",
                    "Dict[str,Any]",
                    "int",
                    "bytes",
                    "Tuple[cirq.Qid]",
                    "Union[Dict,None]",
                    "None"
                ]
            }
        },
        "Props.__get_middleware": {
            "name": "__get_middleware",
            "location": 176,
            "return": [
                "List",
                "str",
                "List[Dict]",
                "List[int]",
                "List[List[Any]]",
                "List[str]"
            ],
            "arguments": {
                "existing_middleware": [
                    "Optional[str]",
                    "str",
                    "Optional[Callable[...,Any]]",
                    "None",
                    "Optional[Dict[str,str]]",
                    "Callable[...,Any]",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]"
                ],
                "new_middleware": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "Props.__get_decorator": {
            "name": "__get_decorator",
            "location": 184,
            "return": [
                "List",
                "str",
                "List[Dict]",
                "List[int]",
                "List[List[Any]]",
                "List[str]"
            ],
            "arguments": {
                "existing_decorator": [
                    "Optional[str]",
                    "str",
                    "Optional[Callable[...,Any]]",
                    "None",
                    "Optional[Dict[str,str]]",
                    "Callable[...,Any]",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]"
                ],
                "new_decorator": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "Props.from_producer": {
            "name": "from_producer",
            "location": 192,
            "return": [
                "Props",
                "str",
                "Callable",
                "Callable[[None,None],bool]"
            ],
            "arguments": {
                "producer": [
                    "str",
                    "Callable",
                    "Callable[[None,None],bool]"
                ]
            }
        },
        "Props.from_func": {
            "name": "from_func",
            "location": 196,
            "return": [
                "dict",
                "List[str]",
                "bytes",
                "int",
                "str"
            ],
            "arguments": {
                "receive": [
                    "bool",
                    "Dict[str,Any]",
                    "Sequence[float]",
                    "float",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/actor/protos_grpc.py": {},
    "protoactor-python-master/protoactor/actor/protos_pb2.py": {},
    "protoactor-python-master/protoactor/actor/restart_statistics.py": {
        "RestartStatistics.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "failure_count": [
                    "int",
                    "bool",
                    "List[int]",
                    "str",
                    "Optional[str]",
                    "Tuple[float,float]"
                ],
                "last_failure_time": [
                    "str",
                    "bool",
                    "datetime.datetime",
                    "int"
                ]
            }
        },
        "RestartStatistics.failure_count": {
            "name": "failure_count",
            "location": 13,
            "return": [
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestartStatistics.fail": {
            "name": "fail",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestartStatistics.reset": {
            "name": "reset",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestartStatistics.number_of_failures": {
            "name": "number_of_failures",
            "location": 22,
            "return": [
                "int",
                "bool",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "within": [
                    "str",
                    "datetime.timedelta",
                    "int",
                    "None",
                    "Type",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/actor/supervision.py": {
        "AbstractSupervisor.children": {
            "name": "children",
            "location": 42,
            "return": [
                "List[PID]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllForOneStrategy.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decider": [
                    "int",
                    "float",
                    "bool"
                ],
                "max_retries_number": [
                    "int",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "within_timedelta": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "AllForOneStrategy.should_stop": {
            "name": "should_stop",
            "location": 86,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rs": [
                    "str",
                    "int",
                    "Tuple[int, int]",
                    "float",
                    "bytes"
                ]
            }
        },
        "OneForOneStrategy.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decider": [
                    "int",
                    "float",
                    "bool"
                ],
                "max_retries_number": [
                    "int",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "within_timedelta": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "OneForOneStrategy.should_stop": {
            "name": "should_stop",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rs": [
                    "str",
                    "int",
                    "Tuple[int, int]",
                    "float",
                    "bytes"
                ]
            }
        },
        "AlwaysRestartStrategy.handle_failure": {
            "name": "handle_failure",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "supervisor": [
                    "protoactor.actor.protos_pb2.PID",
                    "Exception",
                    "str",
                    "int"
                ],
                "child": [
                    "Exception",
                    "protoactor.actor.protos_pb2.PID",
                    "str",
                    "int"
                ],
                "rs_stats": [
                    "Exception",
                    "int",
                    "restart_statistics.RestartStatistics",
                    "protoactor.actor.restart_statistics.RestartStatistics",
                    "protoactor.actor.protos_pb2.PID"
                ],
                "reason": [
                    "Exception",
                    "protoactor.actor.protos_pb2.PID",
                    "str",
                    "int"
                ],
                "message": [
                    "Exception",
                    "int",
                    "restart_statistics.RestartStatistics",
                    "protoactor.actor.restart_statistics.RestartStatistics",
                    "protoactor.actor.protos_pb2.PID"
                ]
            }
        },
        "Supervision.default_strategy": {
            "name": "default_strategy",
            "location": 161,
            "return": [
                "OneForOneStrategy",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Supervision.always_restart_strategy": {
            "name": "always_restart_strategy",
            "location": 165,
            "return": [
                "AlwaysRestartStrategy",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/protoactor/actor/utils.py": {
        "python_version": {
            "name": "python_version",
            "location": 27,
            "return": [
                "bool",
                "int",
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "Singleton.__call__": {
            "name": "__call__",
            "location": 13,
            "return": [],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "Singleton.clear": {
            "name": "clear",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float"
                ]
            }
        },
        "Stack.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Mapping[str,Any]",
                    "Dict",
                    "Mapping",
                    "Dict[str,Any]",
                    "float",
                    "List[List[Any]]",
                    "List[list[Any]]"
                ]
            }
        },
        "Stack.pop": {
            "name": "pop",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.peek": {
            "name": "peek",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.clear": {
            "name": "clear",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.is_empty": {
            "name": "is_empty",
            "location": 53,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.__len__": {
            "name": "__len__",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/protoactor/actor/__init__.py": {
        "__to_short_string": {
            "name": "__to_short_string",
            "location": 21,
            "return": [
                "Iterable[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/protoactor/cluster/grain_call_options.py": {
        "GrainCallOptions.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/protoactor/cluster/member_status.py": {
        "AbstractMemberStatusValue.is_same": {
            "name": "is_same",
            "location": 7,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str",
                    "int"
                ]
            }
        },
        "AbstractMemberStatusValueSerializer.to_value_bytes": {
            "name": "to_value_bytes",
            "location": 13,
            "return": [
                "bytes",
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "AbstractMemberStatusValueSerializer.from_value_bytes": {
            "name": "from_value_bytes",
            "location": 17,
            "return": [
                "AbstractMemberStatusValue",
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "Iterable[tuple[Union[str,Any]]]",
                    "Iterable[Tuple[str,Any]]",
                    "int"
                ]
            }
        },
        "MemberStatus.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "host": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[Any]",
                    "Any"
                ],
                "port": [
                    "str",
                    "int",
                    "Dict",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "kinds": [
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "None",
                    "Mapping",
                    "Optional[bool]",
                    "str",
                    "Optional[float]",
                    "float"
                ],
                "alive": [
                    "str",
                    "int",
                    "Dict",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "status_value": [
                    "int",
                    "str"
                ]
            }
        },
        "MemberStatus.address": {
            "name": "address",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberStatus.member_id": {
            "name": "member_id",
            "location": 40,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberStatus.host": {
            "name": "host",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberStatus.port": {
            "name": "port",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberStatus.kinds": {
            "name": "kinds",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberStatus.alive": {
            "name": "alive",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberStatus.status_value": {
            "name": "status_value",
            "location": 60,
            "return": [
                "bool",
                "type",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullMemberStatusValueSerializer.to_value_bytes": {
            "name": "to_value_bytes",
            "location": 65,
            "return": [
                "None",
                "Optional[str]",
                "Optional[float]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "NullMemberStatusValueSerializer.from_value_bytes": {
            "name": "from_value_bytes",
            "location": 68,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "Optional[Sequence[str]]",
                "Union[None,List[str]]"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "Iterable[tuple[Union[str,Any]]]",
                    "Iterable[Tuple[str,Any]]",
                    "int"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/cluster/member_status_events.py": {
        "ClusterTopologyEvent.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "statuses": [
                    "int",
                    "Optional[int]",
                    "str",
                    "Type",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "ClusterTopologyEvent.statuses": {
            "name": "statuses",
            "location": 14,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractMemberStatusEvent.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Iterable[str]",
                    "Optional[Iterable[str]]",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "port": [
                    "int",
                    "float",
                    "bool"
                ],
                "kinds": [
                    "Optional[float]",
                    "float",
                    "Optional[str]",
                    "None",
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "Callable",
                    "Hashable"
                ]
            }
        },
        "AbstractMemberStatusEvent.address": {
            "name": "address",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractMemberStatusEvent.host": {
            "name": "host",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractMemberStatusEvent.port": {
            "name": "port",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractMemberStatusEvent.kinds": {
            "name": "kinds",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberJoinedEvent.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "port": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "kinds": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "MemberRejoinedEvent.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "port": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "kinds": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "MemberLeftEvent.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "port": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "kinds": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/cluster/member_strategy.py": {
        "AbstractMemberStrategy.get_all_members": {
            "name": "get_all_members",
            "location": 11,
            "return": [
                "List[protoactor.cluster.member_status.MemberStatus]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractMemberStrategy.add_member": {
            "name": "add_member",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "AbstractMemberStrategy.update_member": {
            "name": "update_member",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "AbstractMemberStrategy.remove_member": {
            "name": "remove_member",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "AbstractMemberStrategy.get_partition": {
            "name": "get_partition",
            "location": 27,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "AbstractMemberStrategy.get_activator": {
            "name": "get_activator",
            "location": 31,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleMemberStrategy.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleMemberStrategy.get_all_members": {
            "name": "get_all_members",
            "location": 41,
            "return": [
                "str",
                "int",
                "Tuple[bytes]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleMemberStrategy.add_member": {
            "name": "add_member",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member": [
                    "float",
                    "int"
                ]
            }
        },
        "SimpleMemberStrategy.update_member": {
            "name": "update_member",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "SimpleMemberStrategy.remove_member": {
            "name": "remove_member",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member": [
                    "int",
                    "float",
                    "str",
                    "Optional[int]",
                    "None",
                    "Optional[List[int]]",
                    "List[int]"
                ]
            }
        },
        "SimpleMemberStrategy.get_partition": {
            "name": "get_partition",
            "location": 59,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "SimpleMemberStrategy.get_activator": {
            "name": "get_activator",
            "location": 62,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/protoactor/cluster/messages.py": {
        "WatchPidRequest.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/cluster/pid_cache.py": {
        "PidCache.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PidCache.process_member_status_event": {
            "name": "process_member_status_event",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "evn": [
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "PID",
                    "raiden.messages.LockExpired"
                ]
            }
        },
        "PidCache.get_cache": {
            "name": "get_cache",
            "location": 39,
            "return": [
                "bool",
                "Tuple[bool]",
                "Tuple[Optional[bool]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Type",
                    "Dict",
                    "Type[T]",
                    "Literal",
                    "Union[Literal,Literal]"
                ]
            }
        },
        "PidCache.remove_cache_by_pid": {
            "name": "remove_cache_by_pid",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "protoactor.actor.protos_pb2.PID",
                    "str"
                ]
            }
        },
        "PidCache.remove_cache_by_name": {
            "name": "remove_cache_by_name",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "PidCache.remove_cache_by_member_address": {
            "name": "remove_cache_by_member_address",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member_address": [
                    "str",
                    "List[int]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "PidCacheWatcher.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/protoactor/cluster/protos_grpc.py": {},
    "protoactor-python-master/protoactor/cluster/protos_pb2.py": {},
    "protoactor-python-master/protoactor/cluster/rendezvous.py": {
        "Rendezvous.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member_strategy": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Rendezvous.get_node": {
            "name": "get_node",
            "location": 15,
            "return": [
                "Text",
                "int",
                "Type[T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "Rendezvous.update_rdv": {
            "name": "update_rdv",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rendezvous._rdv_hash": {
            "name": "_rdv_hash",
            "location": 44,
            "return": [
                "int",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "bytes",
                    "Union[int,slice]",
                    "int"
                ],
                "key": [
                    "str",
                    "bytes",
                    "Union[int,slice]",
                    "int"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/cluster/round_robin.py": {
        "RoundRobin.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member_strategy": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "RoundRobin.get_node": {
            "name": "get_node",
            "location": 14,
            "return": [
                "Text",
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/protoactor/cluster/__init__.py": {},
    "protoactor-python-master/protoactor/cluster/\u0441luster.py": {
        "MemberList.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberList.setup": {
            "name": "setup",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberList.stop": {
            "name": "stop",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberList.get_members": {
            "name": "get_members",
            "location": 43,
            "return": [
                "List",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "int",
                    "Dict",
                    "Callable",
                    "Dict[str,bool]"
                ]
            }
        },
        "MemberList.get_partition": {
            "name": "get_partition",
            "location": 55,
            "return": [
                "Text",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "kind": [
                    "str",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "None"
                ]
            }
        },
        "MemberList.get_activator": {
            "name": "get_activator",
            "location": 62,
            "return": [
                "Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "int",
                    "Dict",
                    "Callable",
                    "Dict[str,bool]"
                ]
            }
        },
        "SpawningProcess.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spawning_address": [
                    "bool",
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "SpawningProcess.task": {
            "name": "task",
            "location": 141,
            "return": [
                "str",
                "int",
                "Generator",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpawningProcess.spawning_address": {
            "name": "spawning_address",
            "location": 145,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpawningProcess.set_result": {
            "name": "set_result",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "bool",
                    "Dict",
                    "str",
                    "Dict[str,Any]",
                    "Callable",
                    "List[int]"
                ]
            }
        },
        "Partition.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Partition.partition_for_kind": {
            "name": "partition_for_kind",
            "location": 178,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "address": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "asyncio.AbstractEventLoop"
                ],
                "kind": [
                    "str",
                    "asyncio.AbstractEventLoop",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "PartitionActor.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "PartitionActor._terminated": {
            "name": "_terminated",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "Optional[Dict[str,str]]",
                    "Set[str]",
                    "Dict[str,str]",
                    "bytes",
                    "None"
                ]
            }
        },
        "PartitionActor._member_rejoined": {
            "name": "_member_rejoined",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "Dict",
                    "Tuple[float]",
                    "int",
                    "Set"
                ]
            }
        },
        "ClusterConfig.__init__": {
            "name": "__init__",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Dict[str,str]",
                    "None",
                    "Optional[Hashable]",
                    "Hashable"
                ],
                "address": [
                    "bool",
                    "Optional[bool]",
                    "Callable",
                    "None",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "str",
                    "List[Any]",
                    "Optional[Any]",
                    "Any",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "port": [
                    "int",
                    "str",
                    "Sequence",
                    "None",
                    "bool",
                    "datetime.datetime",
                    "Optional[str]"
                ],
                "cluster_provider": [
                    "bool",
                    "Callable",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[bool]",
                    "Any",
                    "Optional[Any]",
                    "protoactor.cluster.providers.abstract_cluster_provider.AbstractClusterProvider"
                ]
            }
        },
        "ClusterConfig.name": {
            "name": "name",
            "location": 380,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterConfig.address": {
            "name": "address",
            "location": 384,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterConfig.port": {
            "name": "port",
            "location": 388,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterConfig.cluster_provider": {
            "name": "cluster_provider",
            "location": 392,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterConfig.remote_config": {
            "name": "remote_config",
            "location": 396,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterConfig.timeout_timespan": {
            "name": "timeout_timespan",
            "location": 400,
            "return": [
                "int",
                "bool",
                "type",
                "List[dict]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterConfig.initial_member_status_value": {
            "name": "initial_member_status_value",
            "location": 404,
            "return": [
                "Dict[str, Any]",
                "int",
                "Sequence[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterConfig.member_status_value_serializer": {
            "name": "member_status_value_serializer",
            "location": 408,
            "return": [
                "bool",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterConfig.member_strategy_builder": {
            "name": "member_strategy_builder",
            "location": 412,
            "return": [
                "str",
                "Callable",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterConfig.with_remote_config": {
            "name": "with_remote_config",
            "location": 415,
            "return": [
                "ClusterConfig",
                "str",
                "Optional[int]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "remote_config": [
                    "Dict",
                    "asyncio.AbstractEventLoop",
                    "Callable",
                    "str"
                ]
            }
        },
        "ClusterConfig.with_timeout_seconds": {
            "name": "with_timeout_seconds",
            "location": 419,
            "return": [
                "ClusterConfig",
                "int",
                "List[int]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "timeout_seconds": [
                    "str",
                    "float",
                    "bool",
                    "None",
                    "Optional[float]",
                    "int",
                    "protoactor.actor.PID"
                ]
            }
        },
        "ClusterConfig.with_initial_member_status_value": {
            "name": "with_initial_member_status_value",
            "location": 423,
            "return": [
                "ClusterConfig",
                "int",
                "str",
                "Union[int,float]",
                "float"
            ],
            "arguments": {
                "self": [],
                "status_value": [
                    "int",
                    "str",
                    "float",
                    "Dict"
                ]
            }
        },
        "ClusterConfig.with_member_status_value_serializer": {
            "name": "with_member_status_value_serializer",
            "location": 427,
            "return": [
                "ClusterConfig",
                "str",
                "datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ClusterConfig.with_member_strategy_builder": {
            "name": "with_member_strategy_builder",
            "location": 431,
            "return": [
                "ClusterConfig",
                "int",
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "builder": [
                    "Type",
                    "Callable[[str],bool]",
                    "Callable[str,bool]"
                ]
            }
        },
        "Cluster.__init__": {
            "name": "__init__",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.config": {
            "name": "config",
            "location": 442,
            "return": [
                "str",
                "Optional[dict]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.__parse_address": {
            "name": "__parse_address",
            "location": 513,
            "return": [
                "Tuple[Union[str,int]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "address": [
                    "str",
                    "Callable[[T],List[T]]",
                    "bool"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/cluster/hash_algorithms/fnv1a32.py": {
        "FNV1A32.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FNV1A32.compute_hash": {
            "name": "compute_hash",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "int",
                    "List[str]",
                    "Optional[int]",
                    "str",
                    "List[Callable]",
                    "Optional[str]",
                    "T",
                    "Optional[List[Callable]]"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/cluster/providers/abstract_cluster_provider.py": {},
    "protoactor-python-master/protoactor/cluster/providers/consul/consul_client.py": {
        "ConsulClientConfiguration.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "float",
                    "bool"
                ],
                "datacenter": [
                    "Text",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ServiceEntry.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "str",
                    "bool",
                    "List[list[str]]",
                    "List[List[str]]"
                ],
                "port": [
                    "int",
                    "str",
                    "bool",
                    "List[list[str]]",
                    "List[List[str]]"
                ],
                "tags": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "bytes",
                    "Optional[Callable]",
                    "Callable"
                ]
            }
        },
        "QueryResult.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "last_index": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "response": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "DateTimeEncoder.default": {
            "name": "default",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "float",
                    "datetime.timedelta",
                    "int",
                    "Dict[str,str]",
                    "datetime.datetime"
                ]
            }
        },
        "ServiceEndpoint.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "int",
                    "float",
                    "bytes",
                    "bool"
                ],
                "url": [
                    "str",
                    "bytes",
                    "int",
                    "Dict",
                    "aiohttp.ClientSession"
                ]
            }
        },
        "KeyValueEndpoint.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "int",
                    "float",
                    "bytes",
                    "bool"
                ],
                "url": [
                    "str",
                    "bytes",
                    "int",
                    "Dict",
                    "aiohttp.ClientSession"
                ]
            }
        },
        "HealthEndpoint.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "int",
                    "float",
                    "bytes",
                    "bool"
                ],
                "url": [
                    "str",
                    "bytes",
                    "int",
                    "Dict",
                    "aiohttp.ClientSession"
                ]
            }
        },
        "HealthEndpoint.__convert_time": {
            "name": "__convert_time",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "datetime.timedelta",
                    "int",
                    "float"
                ]
            }
        },
        "ConsulClient.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsulClient.service": {
            "name": "service",
            "location": 146,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsulClient.key_value_storage": {
            "name": "key_value_storage",
            "location": 150,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[str]]",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsulClient.health": {
            "name": "health",
            "location": 154,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/protoactor/cluster/providers/consul/consul_provider.py": {
        "ConsulProviderOptions.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsulProvider.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consul_config": [
                    "Dict",
                    "Step"
                ],
                "options": [
                    "Dict",
                    "ConsulProviderOptions"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/cluster/providers/single_remote_instance/protos_grpc.py": {},
    "protoactor-python-master/protoactor/cluster/providers/single_remote_instance/protos_pb2.py": {},
    "protoactor-python-master/protoactor/cluster/providers/single_remote_instance/single_remote_instance_provider.py": {
        "SingleRemoteInstanceProvider.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_host": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Union[str,int]",
                    "bool"
                ],
                "server_port": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Union[str,int]",
                    "bool"
                ]
            }
        },
        "SingleRemoteInstanceProvider.monitor_member_status_changes": {
            "name": "monitor_member_status_changes",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleRemoteInstanceProvider.shutdown": {
            "name": "shutdown",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/protoactor/mailbox/dispatcher.py": {
        "AbstractMessageInvoker.invoke_system_message": {
            "name": "invoke_system_message",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bytes",
                    "Dict",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "AbstractMessageInvoker.invoke_user_message": {
            "name": "invoke_user_message",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "Dict",
                    "str",
                    "protoactor.actor.PID"
                ]
            }
        },
        "AbstractMessageInvoker.escalate_failure": {
            "name": "escalate_failure",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str"
                ],
                "msg": [
                    "str"
                ]
            }
        },
        "AbstractDispatcher.throughput": {
            "name": "throughput",
            "location": 27,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDispatcher.schedule": {
            "name": "schedule",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Dispatchers.default_dispatcher": {
            "name": "default_dispatcher",
            "location": 37,
            "return": [
                "ThreadDispatcher",
                "Callable[[Mapping],T]",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dispatchers.synchronous_dispatcher": {
            "name": "synchronous_dispatcher",
            "location": 41,
            "return": [
                "SynchronousDispatcher",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadDispatcher.throughput": {
            "name": "throughput",
            "location": 71,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadDispatcher.schedule": {
            "name": "schedule",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [
                    "str",
                    "int",
                    "Dict[str,Callable]",
                    "Callable"
                ]
            }
        },
        "ThreadDispatcher.__start_background_loop": {
            "name": "__start_background_loop",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "SynchronousDispatcher.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "async_loop": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "SynchronousDispatcher.throughput": {
            "name": "throughput",
            "location": 87,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SynchronousDispatcher.schedule": {
            "name": "schedule",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [
                    "str",
                    "IO",
                    "List[str]",
                    "Optional[Outcome]",
                    "None"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/mailbox/mailbox.py": {
        "AbstractMailbox.post_user_message": {
            "name": "post_user_message",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "AbstractMailbox.post_system_message": {
            "name": "post_system_message",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "Dict",
                    "bool"
                ]
            }
        },
        "AbstractMailbox.register_handlers": {
            "name": "register_handlers",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "invoker": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "dispatcher": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "AbstractMailbox.start": {
            "name": "start",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultMailbox.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "system_messages_queue": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "int",
                    "Optional[List[str]]"
                ],
                "user_messages_queue": [
                    "bool",
                    "str",
                    "Optional[dict]",
                    "Dict",
                    "None",
                    "int"
                ],
                "statistics": [
                    "bool",
                    "str",
                    "Dict[str,str]",
                    "int"
                ]
            }
        },
        "DefaultMailbox.post_user_message": {
            "name": "post_user_message",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Dict",
                    "int"
                ]
            }
        },
        "DefaultMailbox.post_system_message": {
            "name": "post_system_message",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Dict",
                    "protoactor.actor.actor_contexAbstractContext",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "DefaultMailbox.register_handlers": {
            "name": "register_handlers",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "invoker": [
                    "int",
                    "Callable",
                    "str"
                ],
                "dispatcher": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DefaultMailbox.start": {
            "name": "start",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultMailbox.initialize": {
            "name": "initialize",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultMailbox.__schedule": {
            "name": "__schedule",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxFactory.create_bounded_mailbox": {
            "name": "create_bounded_mailbox",
            "location": 228,
            "return": [
                "AbstractMailbox",
                "None"
            ],
            "arguments": {
                "size": [
                    "int",
                    "Callable[Any,int]",
                    "Callable[[Any],int]",
                    "None",
                    "Tuple[Union[int,int]]",
                    "Optional[Callable]",
                    "bool",
                    "Optional[int]",
                    "Union[int,Tuple[int,int]]"
                ]
            }
        },
        "MailboxFactory.create_unbounded_mailbox": {
            "name": "create_unbounded_mailbox",
            "location": 233,
            "return": [
                "DefaultMailbox",
                "str",
                "List",
                "Dict[str,Dict[str,int]]",
                "bool"
            ],
            "arguments": {}
        }
    },
    "protoactor-python-master/protoactor/mailbox/mailbox_statistics.py": {
        "AbstractMailBoxStatistics.mailbox_stated": {
            "name": "mailbox_stated",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractMailBoxStatistics.message_posted": {
            "name": "message_posted",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Dict",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "AbstractMailBoxStatistics.message_received": {
            "name": "message_received",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "AbstractMailBoxStatistics.mailbox_empty": {
            "name": "mailbox_empty",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailBoxStatistics.mailbox_stated": {
            "name": "mailbox_stated",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailBoxStatistics.message_posted": {
            "name": "message_posted",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Dict",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "MailBoxStatistics.message_received": {
            "name": "message_received",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "MailBoxStatistics.mailbox_empty": {
            "name": "mailbox_empty",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/protoactor/mailbox/queue.py": {
        "AbstractQueue.has_messages": {
            "name": "has_messages",
            "location": 8,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractQueue.push": {
            "name": "push",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "AbstractQueue.pop": {
            "name": "pop",
            "location": 16,
            "return": [
                "Optional[object]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnboundedMailboxQueue.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnboundedMailboxQueue.pop": {
            "name": "pop",
            "location": 24,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnboundedMailboxQueue.push": {
            "name": "push",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "UnboundedMailboxQueue.has_messages": {
            "name": "has_messages",
            "location": 33,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/protoactor/mailbox/__init__.py": {},
    "protoactor-python-master/protoactor/persistence/messages.py": {
        "Snapshot.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ],
                "index": [
                    "str"
                ]
            }
        },
        "RecoverSnapshot.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Any",
                    "int",
                    "Dict"
                ],
                "index": [
                    "Any",
                    "int",
                    "Dict"
                ]
            }
        },
        "PersistedSnapshot.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Any",
                    "int",
                    "Dict"
                ],
                "index": [
                    "Any",
                    "int",
                    "Dict"
                ]
            }
        },
        "Event.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str,Any]",
                    "bytes",
                    "Dict[str,str]",
                    "List",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "None"
                ],
                "index": [
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "RecoverEvent.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Any",
                    "int",
                    "Dict"
                ],
                "index": [
                    "Any",
                    "int",
                    "Dict"
                ]
            }
        },
        "ReplayEvent.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Any",
                    "int",
                    "Dict"
                ],
                "index": [
                    "Any",
                    "int",
                    "Dict"
                ]
            }
        },
        "PersistedEvent.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Any",
                    "int",
                    "Dict"
                ],
                "index": [
                    "Any",
                    "int",
                    "Dict"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/persistence/persistence.py": {
        "NoSnapshots.should_take_snapshot": {
            "name": "should_take_snapshot",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "persisted_event": [
                    "str",
                    "int",
                    "List[dict[str,Any]]",
                    "events.Event",
                    "protoactor.persistence.messages.PersistedEvent",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "Persistence.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_store": [
                    "str",
                    "List[str]",
                    "Optional[bool]",
                    "bool",
                    "None"
                ],
                "snapshot_store": [
                    "bool",
                    "str",
                    "int"
                ],
                "actor_id": [
                    "str",
                    "int"
                ],
                "apply_event": [
                    "Union[str,Iterable[str]]",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "Dict[type,Any]",
                    "Iterable[str]"
                ],
                "apply_snapshot": [
                    "int",
                    "None",
                    "Dict",
                    "bool",
                    "str"
                ],
                "snapshot_strategy": [
                    "bool",
                    "None",
                    "Optional[Union[str,Any]]",
                    "str",
                    "Any",
                    "Optional[int]",
                    "Optional[bool]",
                    "int",
                    "Optional[str]"
                ],
                "get_state": [
                    "str",
                    "None",
                    "Dict",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ]
            }
        },
        "Persistence.index": {
            "name": "index",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Persistence._using_snapshotting": {
            "name": "_using_snapshotting",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Persistence._using_event_sourcing": {
            "name": "_using_event_sourcing",
            "location": 67,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Persistence.with_event_sourcing": {
            "name": "with_event_sourcing",
            "location": 71,
            "return": [
                "Persistence"
            ],
            "arguments": {
                "event_store": [
                    "str",
                    "protoactor.persistence.providers.abstract_provider.AbstractEventStore",
                    "None",
                    "Callable[protoactor.persistence.messages.Event,None]",
                    "Optional[str]",
                    "Callable[[protoactor.persistence.messages.Event],None]",
                    "protoactor.persistence.providers.abstract_provider.AbstractSnapshotStore",
                    "Callable[[protoactor.persistence.messages.Snapshot],None]"
                ],
                "actor_id": [
                    "str",
                    "int"
                ],
                "apply_event": [
                    "Callable[protoactor.persistence.messages.Event,None]",
                    "Callable[[protoactor.persistence.messages.Event],None]",
                    "Dict[str,str]",
                    "protoactor.persistence.providers.abstract_provider.AbstractEventStore",
                    "None",
                    "Dict",
                    "protoactor.persistence.providers.abstract_provider.AbstractSnapshotStore",
                    "Callable[[protoactor.persistence.messages.Snapshot],None]",
                    "Optional[Dict[str,str]]",
                    "Optional[dict]"
                ]
            }
        },
        "Persistence.with_snapshotting": {
            "name": "with_snapshotting",
            "location": 82,
            "return": [
                "Persistence",
                "str",
                "Dict[str,str]",
                "bool"
            ],
            "arguments": {
                "snapshot_store": [
                    "protoactor.persistence.providers.abstract_provider.AbstractSnapshotStore",
                    "Callable[protoactor.persistence.messages.Snapshot,None]",
                    "Callable[[protoactor.persistence.messages.Snapshot],None]",
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "str"
                ],
                "actor_id": [
                    "str",
                    "int",
                    "List[str]",
                    "Union[str,List[str]]",
                    "None",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "apply_snapshot": [
                    "protoactor.persistence.providers.abstract_provider.AbstractSnapshotStore",
                    "Callable[protoactor.persistence.messages.Snapshot,None]",
                    "Callable[[protoactor.persistence.messages.Snapshot],None]",
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Persistence.with_event_sourcing_and_snapshotting": {
            "name": "with_event_sourcing_and_snapshotting",
            "location": 93,
            "return": [
                "Awaitable",
                "Persistence"
            ],
            "arguments": {
                "event_store": [
                    "Callable[protoactor.persistence.messages.Snapshot,None]",
                    "protoactor.persistence.providers.abstract_provider.AbstractEventStore",
                    "str",
                    "protoactor.persistence.providers.abstract_provider.AbstractSnapshotStore",
                    "Dict[str,Any]",
                    "None",
                    "Callable[[protoactor.persistence.messages.Snapshot],None]",
                    "Callable[[protoactor.persistence.messages.Event],None]",
                    "Optional[Dict[str,Any]]"
                ],
                "snapshot_store": [
                    "Callable[protoactor.persistence.messages.Snapshot,None]",
                    "protoactor.persistence.providers.abstract_provider.AbstractEventStore",
                    "str",
                    "protoactor.persistence.providers.abstract_provider.AbstractSnapshotStore",
                    "Dict[str,Any]",
                    "None",
                    "Callable[[protoactor.persistence.messages.Snapshot],None]",
                    "Callable[[protoactor.persistence.messages.Event],None]",
                    "Optional[Dict[str,Any]]"
                ],
                "actor_id": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "apply_event": [
                    "Callable[protoactor.persistence.messages.Event,None]",
                    "Dict",
                    "Callable[[protoactor.persistence.messages.Event],None]",
                    "str",
                    "protoactor.persistence.providers.abstract_provider.AbstractEventStore",
                    "protoactor.persistence.providers.abstract_provider.AbstractSnapshotStore",
                    "Callable[[protoactor.persistence.messages.Snapshot],None]"
                ],
                "apply_snapshot": [
                    "Callable[protoactor.persistence.messages.Snapshot,None]",
                    "protoactor.persistence.providers.abstract_provider.AbstractEventStore",
                    "str",
                    "protoactor.persistence.providers.abstract_provider.AbstractSnapshotStore",
                    "Dict[str,Any]",
                    "None",
                    "Callable[[protoactor.persistence.messages.Snapshot],None]",
                    "Callable[[protoactor.persistence.messages.Event],None]",
                    "Optional[Dict[str,Any]]"
                ],
                "snapshot_strategy": [
                    "Callable[,Any]",
                    "None",
                    "Callable[[protoactor.persistence.messages.Event],None]",
                    "str",
                    "protoactor.persistence.providers.abstract_provider.AbstractEventStore",
                    "Optional[str]"
                ],
                "get_state": [
                    "Callable[,Any]",
                    "None",
                    "Callable[[protoactor.persistence.messages.Event],None]",
                    "str",
                    "protoactor.persistence.providers.abstract_provider.AbstractEventStore",
                    "Optional[str]"
                ]
            }
        },
        "Persistence.recover_state.apply_events": {
            "name": "apply_events",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "Persistence.replay_events.apply_events": {
            "name": "apply_events",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "List[dict]"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/persistence/__init__.py": {},
    "protoactor-python-master/protoactor/persistence/providers/abstract_provider.py": {},
    "protoactor-python-master/protoactor/persistence/providers/in_memory_provider.py": {
        "InMemoryProvider.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryProvider.get_snapshots": {
            "name": "get_snapshots",
            "location": 14,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "actor_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/persistence/providers/__init__.py": {},
    "protoactor-python-master/protoactor/persistence/snapshot_strategies/abstract_snapshot_strategy.py": {
        "AbstractSnapshotStrategy.should_take_snapshot": {
            "name": "should_take_snapshot",
            "location": 8,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "persisted_event": [
                    "str",
                    "int",
                    "List[dict[str,Any]]",
                    "protoactor.persistence.messages.PersistedEvent",
                    "List[Dict[str,Any]]"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/persistence/snapshot_strategies/event_type_strategy.py": {
        "EventTypeStrategy.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,dict[str,str]]",
                    "Type[BaseException]",
                    "bool",
                    "Type",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "EventTypeStrategy.should_take_snapshot": {
            "name": "should_take_snapshot",
            "location": 9,
            "return": [
                "bool",
                "Optional[Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "persisted_event": [
                    "Dict[str,Any]",
                    "Dict",
                    "str"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/persistence/snapshot_strategies/interval_strategy.py": {
        "IntervalStrategy.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "events_per_snapshot": [
                    "str",
                    "Dict",
                    "Callable"
                ]
            }
        },
        "IntervalStrategy.should_take_snapshot": {
            "name": "should_take_snapshot",
            "location": 9,
            "return": [
                "bool",
                "str",
                "int",
                "protoactor.actor.actor_contexAbstractContext"
            ],
            "arguments": {
                "self": [],
                "persisted_event": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/persistence/snapshot_strategies/time_strategy.py": {
        "TimeStrategy.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interval": [
                    "bool",
                    "str",
                    "List[str]",
                    "int",
                    "float",
                    "None",
                    "Optional[str]"
                ],
                "get_now": [
                    "Optional[str]",
                    "bool",
                    "None",
                    "str",
                    "Optional[Match]",
                    "Match"
                ]
            }
        },
        "TimeStrategy.should_take_snapshot": {
            "name": "should_take_snapshot",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "persisted_event": [
                    "str",
                    "int",
                    "List[dict[str,Any]]",
                    "protoactor.persistence.messages.PersistedEvent",
                    "List[Dict[str,Any]]"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/remote/exceptions.py": {
        "ActivatorException.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int",
                    "List[int]",
                    "Dict[str,LabwareDefinition]",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ],
                "do_not_throw": [
                    "bool",
                    "str",
                    "int",
                    "List[int]",
                    "Tuple[float,float]",
                    "Dict[str,LabwareDefinition]"
                ]
            }
        },
        "ActivatorUnavailableException.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/protoactor/remote/messages.py": {
        "Endpoint.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watcher": [
                    "int",
                    "float",
                    "bool"
                ],
                "writer": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "EndpointConnectedEvent.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "EndpointTerminatedEvent.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "RemoteTerminate.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watcher": [
                    "int",
                    "float",
                    "bool"
                ],
                "watchee": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "RemoteWatch.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watcher": [
                    "int",
                    "float",
                    "bool"
                ],
                "watchee": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "RemoteUnwatch.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watcher": [
                    "int",
                    "float",
                    "bool"
                ],
                "watchee": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "RemoteDeliver.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "header": [
                    "Dict[str,str]",
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ],
                "message": [
                    "bool",
                    "Tuple",
                    "str",
                    "int",
                    "bytes",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "Optional[Sequence[str]]",
                    "Sequence[str]"
                ],
                "target": [
                    "bool",
                    "Tuple",
                    "str",
                    "int",
                    "bytes",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "Optional[Sequence[str]]",
                    "Sequence[str]"
                ],
                "sender": [
                    "bool",
                    "Tuple",
                    "str",
                    "int",
                    "bytes",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "Optional[Sequence[str]]",
                    "Sequence[str]"
                ],
                "serializer_id": [
                    "str",
                    "MutableMapping",
                    "int"
                ]
            }
        },
        "JsonMessage.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "json": [
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "None",
                    "Optional[Sequence[str]]",
                    "bool",
                    "Optional[int]",
                    "Sequence[str]"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/remote/protos_remote_grpc.py": {
        "RemotingBase.__mapping__": {
            "name": "__mapping__",
            "location": 26,
            "return": [
                "Dict[Text,]",
                "str",
                "List[str]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemotingStub.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str",
                    "Union[str,int,float]",
                    "int",
                    "float"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/remote/protos_remote_pb2.py": {},
    "protoactor-python-master/protoactor/remote/remote.py": {
        "RemoteConfig.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Remote.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Remote.remote_config": {
            "name": "remote_config",
            "location": 59,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Remote.get_known_kinds": {
            "name": "get_known_kinds",
            "location": 62,
            "return": [
                "List[str]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Remote.register_known_kind": {
            "name": "register_known_kind",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "int",
                    "Callable",
                    "str"
                ],
                "props": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Remote.get_known_kind": {
            "name": "get_known_kind",
            "location": 68,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "int",
                    "Dict[str, bool]",
                    "str"
                ]
            }
        },
        "Remote.start": {
            "name": "start",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hostname": [
                    "bool",
                    "Dict[str, Any]",
                    "cmk.utils.type_defs.HostName",
                    "raiden.messages.Processed",
                    "raiden.messages.Delivered",
                    "str"
                ],
                "port": [
                    "bool",
                    "Dict[str, Any]",
                    "cmk.utils.type_defs.HostName",
                    "raiden.messages.Processed",
                    "raiden.messages.Delivered",
                    "str"
                ],
                "config": [
                    "Callable",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "Remote.shutdown": {
            "name": "shutdown",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "gracefull": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Remote.activator_for_address": {
            "name": "activator_for_address",
            "location": 101,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "bool",
                    "torch.utils.data.DataLoader",
                    "int"
                ]
            }
        },
        "Remote.spawn_async": {
            "name": "spawn_async",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "bool",
                    "float"
                ],
                "kind": [
                    "int",
                    "bool",
                    "float"
                ],
                "timeout": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Remote.__spawn_activator": {
            "name": "__spawn_activator",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Remote.__stop_activator": {
            "name": "__stop_activator",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RemoteProcess.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "pid": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "EndpointManager.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EndpointManager.start": {
            "name": "start",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EndpointManager.stop": {
            "name": "stop",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EndpointReader.__init__": {
            "name": "__init__",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EndpointReader.suspend": {
            "name": "suspend",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "suspended": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "EndpointWatcher.__init__": {
            "name": "__init__",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "EndpointWatcher.__process_stopped_message_in_connected_state": {
            "name": "__process_stopped_message_in_connected_state",
            "location": 328,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EndpointWatcher.__process_endpoint_connected_event_message_in_terminated_state": {
            "name": "__process_endpoint_connected_event_message_in_terminated_state",
            "location": 334,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EndpointWriter.__init__": {
            "name": "__init__",
            "location": 340,
            "return": [],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "bool",
                    "raiden.utils.ChannelID",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.Locksroot"
                ],
                "channel_options": [
                    "int",
                    "Optional[int]",
                    "Dict[str, str]"
                ],
                "call_options": [
                    "dict",
                    "str",
                    "bool"
                ],
                "channel_credentials": [
                    "int"
                ]
            }
        },
        "EndpointWriterMailbox.__init__": {
            "name": "__init__",
            "location": 444,
            "return": [],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int",
                    "bool"
                ]
            }
        },
        "EndpointWriterMailbox.post_user_message": {
            "name": "post_user_message",
            "location": 456,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [
                    "dict",
                    "str",
                    "float"
                ]
            }
        },
        "EndpointWriterMailbox.post_system_message": {
            "name": "post_system_message",
            "location": 460,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [
                    "Optional[Type]",
                    "dict"
                ]
            }
        },
        "EndpointWriterMailbox.register_handlers": {
            "name": "register_handlers",
            "location": 464,
            "return": [],
            "arguments": {
                "self": [],
                "invoker": [
                    "int",
                    "Callable",
                    "str"
                ],
                "dispatcher": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "EndpointWriterMailbox.start": {
            "name": "start",
            "location": 470,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EndpointWriterMailbox.__initialize": {
            "name": "__initialize",
            "location": 473,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EndpointWriterMailbox.__schedule": {
            "name": "__schedule",
            "location": 516,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EndpointSupervisor.__spawn_watcher": {
            "name": "__spawn_watcher",
            "location": 533,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "Callable",
                    "str"
                ],
                "context": [
                    "protoactor.actor.actor_contexAbstractContext",
                    "Iterable[Any]"
                ]
            }
        },
        "EndpointSupervisor.__spawn_writer": {
            "name": "__spawn_writer",
            "location": 538,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "raiden.utils.Any"
                ],
                "context": [
                    "protoactor.actor.actor_contexAbstractContext",
                    "Iterable[Any]"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/remote/response.py": {},
    "protoactor-python-master/protoactor/remote/serialization.py": {
        "AbstractSerializer.serialize": {
            "name": "serialize",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "AbstractSerializer.deserialize": {
            "name": "deserialize",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bytes_str": [
                    "str"
                ],
                "type_name": [
                    "str"
                ]
            }
        },
        "AbstractSerializer.get_type_name": {
            "name": "get_type_name",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "str",
                    "Exception",
                    "int",
                    "Iterable[tuple[Union[int,Any]]]",
                    "Iterable[Tuple[int,Any]]",
                    "List[Tuple[Any,Any]]"
                ]
            }
        },
        "ProtobufSerializer.serialize": {
            "name": "serialize",
            "location": 27,
            "return": [
                "str",
                "Dict[str, Any]",
                "message.header.Message",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "dict",
                    "str",
                    "bytes",
                    "Callable[[bytes], bytes]",
                    "discord.Message"
                ]
            }
        },
        "ProtobufSerializer.deserialize": {
            "name": "deserialize",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "bytes_str": [
                    "str",
                    "Tuple[str]",
                    "Union[str,List[str]]",
                    "Dict[str,Any]",
                    "List[str]"
                ],
                "type_name": [
                    "Type",
                    "bool"
                ]
            }
        },
        "ProtobufSerializer.get_type_name": {
            "name": "get_type_name",
            "location": 38,
            "return": [
                "str",
                "Dict[str, str]",
                "type",
                "Optional[str]",
                "NamedTuple"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Dict",
                    "Union[dict,list]",
                    "Dict[str,str]",
                    "List",
                    "List[Dict]",
                    "List[dict]"
                ]
            }
        },
        "JsonSerializer.serialize": {
            "name": "serialize",
            "location": 45,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str"
                ]
            }
        },
        "JsonSerializer.deserialize": {
            "name": "deserialize",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "bytes_str": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ],
                "type_name": [
                    "Type",
                    "bool"
                ]
            }
        },
        "JsonSerializer.get_type_name": {
            "name": "get_type_name",
            "location": 56,
            "return": [
                "NamedTuple",
                "BaseException",
                "Exception",
                "Type[BaseException]",
                "type"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "Serialization.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serialization.default_serializer_id": {
            "name": "default_serializer_id",
            "location": 81,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "Serialization.register_serializer": {
            "name": "register_serializer",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "List[str]",
                    "Callable[,T]"
                ],
                "make_default": [
                    "bool",
                    "Set",
                    "List[Tuple[int,str]]",
                    "int",
                    "Optional[int]",
                    "List",
                    "str",
                    "Type",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "Serialization.register_file_descriptor": {
            "name": "register_file_descriptor",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "descriptor": [
                    "str",
                    "Final",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "Serialization.serialize": {
            "name": "serialize",
            "location": 95,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "Dict[str,Any]"
                ],
                "serializer_id": [
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "Serialization.get_type_name": {
            "name": "get_type_name",
            "location": 98,
            "return": [
                "Callable",
                "dict",
                "str",
                "rflx.model.Message",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int"
                ],
                "serializer_id": [
                    "str",
                    "int"
                ]
            }
        },
        "Serialization.deserialize": {
            "name": "deserialize",
            "location": 101,
            "return": [
                "str",
                "dict",
                "Type"
            ],
            "arguments": {
                "self": [],
                "type_name": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "int",
                    "None",
                    "Dict[str,LabwareDefinition]",
                    "Dict[str,str]",
                    "Dict"
                ],
                "data": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "int",
                    "None",
                    "Dict[str,LabwareDefinition]",
                    "Dict[str,str]",
                    "Dict"
                ],
                "serializer_id": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "int",
                    "None",
                    "Dict[str,LabwareDefinition]",
                    "Dict[str,str]",
                    "Dict"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/remote/__init__.py": {},
    "protoactor-python-master/protoactor/router/broadcast_router.py": {
        "BroadcastGroupRouterConfig.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "routees": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "BroadcastGroupRouterConfig.create_router_state": {
            "name": "create_router_state",
            "location": 15,
            "return": [
                "BroadcastRouterState"
            ],
            "arguments": {
                "self": []
            }
        },
        "BroadcastPoolRouterConfig.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pool_size": [
                    "int",
                    "None",
                    "protoactor.actor.props.Props",
                    "Optional[int]"
                ],
                "routee_props": [
                    "int",
                    "None",
                    "protoactor.actor.props.Props",
                    "Optional[int]"
                ]
            }
        },
        "BroadcastPoolRouterConfig.create_router_state": {
            "name": "create_router_state",
            "location": 23,
            "return": [
                "BroadcastRouterState"
            ],
            "arguments": {
                "self": []
            }
        },
        "BroadcastRouterState.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BroadcastRouterState.get_routees": {
            "name": "get_routees",
            "location": 31,
            "return": [
                "List",
                "str",
                "List[Dict]",
                "List[int]",
                "List[List[Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BroadcastRouterState.set_routees": {
            "name": "set_routees",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "routees": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/router/consistent_hash_group_router.py": {
        "ConsistentHashGroupRouterConfig.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hash_func": [
                    "List",
                    "List[tuple[Union[float,Any]]]",
                    "T",
                    "List[Tuple[float,Any]]",
                    "List[Tuple[float,float]]"
                ],
                "replica_count": [
                    "int",
                    "Dict",
                    "str"
                ],
                "routees": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "int",
                    "None"
                ]
            }
        },
        "ConsistentHashGroupRouterConfig.create_router_state": {
            "name": "create_router_state",
            "location": 23,
            "return": [
                "ConsistentHashRouterState",
                "bool",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsistentHashPoolRouterConfig.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pool_size": [
                    "int",
                    "Dict[str,str]",
                    "protoactor.actor.props.Props",
                    "bool"
                ],
                "routee_props": [
                    "int",
                    "Dict[str,str]",
                    "protoactor.actor.props.Props",
                    "bool"
                ],
                "hash_func": [
                    "int",
                    "List[str]",
                    "Callable[[str,str],float]",
                    "Callable[str,str,float]",
                    "Tuple",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "replica_count": [
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "ConsistentHashPoolRouterConfig.create_router_state": {
            "name": "create_router_state",
            "location": 36,
            "return": [
                "ConsistentHashRouterState",
                "bool",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsistentHashRouterState.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hash_func": [
                    "List",
                    "List[tuple[Union[float,Any]]]",
                    "T",
                    "List[Tuple[float,Any]]",
                    "List[Tuple[float,float]]"
                ],
                "replica_count": [
                    "int",
                    "Dict",
                    "str"
                ]
            }
        },
        "ConsistentHashRouterState.get_routees": {
            "name": "get_routees",
            "location": 47,
            "return": [
                "List",
                "List[str]",
                "str",
                "List[Dict]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsistentHashRouterState.set_routees": {
            "name": "set_routees",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "routees": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/router/hash.py": {
        "MD5Hasher.hash": {
            "name": "hash",
            "location": 8,
            "return": [
                "int",
                "Optional[int]",
                "bool",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "hash_key": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "HashRing.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "List[str]",
                    "Tuple[Union[Any,...]]",
                    "bool",
                    "Optional[bool]",
                    "Union[Type[Exception],Tuple[Any,...]]",
                    "int"
                ],
                "hash_func": [
                    "str",
                    "Dict",
                    "Dict[str,str]",
                    "Callable",
                    "bytes"
                ],
                "replica_count": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "HashRing.get_node": {
            "name": "get_node",
            "location": 26,
            "return": [
                "Union[Sequence, 'SweepFixedValues']",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable",
                    "Callable[[T],T]",
                    "Callable[T,T]",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/router/messages.py": {
        "Routees.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pids": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "AddRoutee.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "RemoveRoutee.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "BroadcastMessage.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "GetRoutees.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractHashable.hash_by": {
            "name": "hash_by",
            "location": 35,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/protoactor/router/random_router.py": {
        "RandomGroupRouterConfig.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "routees": [
                    "int",
                    "float",
                    "bool"
                ],
                "seed": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "RandomGroupRouterConfig.create_router_state": {
            "name": "create_router_state",
            "location": 17,
            "return": [
                "RandomRouterState"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomPoolRouterConfig.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pool_size": [
                    "int",
                    "None",
                    "protoactor.actor.props.Props",
                    "Optional[int]"
                ],
                "routee_props": [
                    "int",
                    "None",
                    "protoactor.actor.props.Props",
                    "Optional[int]"
                ],
                "seed": [
                    "int",
                    "str",
                    "None",
                    "float"
                ]
            }
        },
        "RandomPoolRouterConfig.create_router_state": {
            "name": "create_router_state",
            "location": 26,
            "return": [
                "RandomRouterState"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomRouterState.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "int",
                    "None",
                    "Optional[float]",
                    "float",
                    "Optional[int]",
                    "Callable",
                    "Optional[Callable]",
                    "Hashable",
                    "Optional[Hashable]",
                    "str",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "RandomRouterState.get_routees": {
            "name": "get_routees",
            "location": 36,
            "return": [
                "List",
                "str",
                "List[Dict]",
                "List[int]",
                "List[List[Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomRouterState.set_routees": {
            "name": "set_routees",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "routees": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/router/round_robin_router.py": {
        "RoundRobinGroupRouterConfig.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "routees": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "RoundRobinGroupRouterConfig.create_router_state": {
            "name": "create_router_state",
            "location": 15,
            "return": [
                "RoundRobinState"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundRobinPoolRouterConfig.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pool_size": [
                    "int",
                    "None",
                    "protoactor.actor.props.Props",
                    "Optional[int]"
                ],
                "routee_props": [
                    "int",
                    "None",
                    "protoactor.actor.props.Props",
                    "Optional[int]"
                ]
            }
        },
        "RoundRobinPoolRouterConfig.create_router_state": {
            "name": "create_router_state",
            "location": 23,
            "return": [
                "RoundRobinState"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundRobinState.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundRobinState.get_routees": {
            "name": "get_routees",
            "location": 32,
            "return": [
                "List",
                "str",
                "List[Dict]",
                "List[int]",
                "List[List[Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundRobinState.set_routees": {
            "name": "set_routees",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "routees": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/router/router.py": {
        "Router.new_broadcast_group": {
            "name": "new_broadcast_group",
            "location": 15,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "routees": [
                    "List[protoactor.actor.PID]",
                    "int",
                    "Callable[...,None]",
                    "str",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "Router.new_consistent_hash_group": {
            "name": "new_consistent_hash_group",
            "location": 19,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "routees": [
                    "List[protoactor.actor.PID]",
                    "Dict[str,Any]",
                    "Dict",
                    "bool",
                    "MutableMapping"
                ],
                "hash_func": [
                    "int",
                    "None",
                    "Callable[[str],int]",
                    "slice",
                    "Callable[str,int]",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "float"
                ],
                "replica_count": [
                    "int",
                    "None",
                    "Callable[[str],int]",
                    "slice",
                    "Callable[str,int]",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "Router.new_random_group": {
            "name": "new_random_group",
            "location": 28,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "routees": [
                    "List[protoactor.actor.PID]",
                    "int",
                    "Callable[...,None]",
                    "str",
                    "Optional[bool]",
                    "None"
                ],
                "seed": [
                    "List[protoactor.actor.PID]",
                    "None",
                    "int",
                    "Callable[...,None]",
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "Router.new_round_robin_group": {
            "name": "new_round_robin_group",
            "location": 32,
            "return": [
                "List[str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "routees": [
                    "List[protoactor.actor.PID]",
                    "int",
                    "str"
                ]
            }
        },
        "Router.new_broadcast_pool": {
            "name": "new_broadcast_pool",
            "location": 36,
            "return": [
                "bool",
                "bytes",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "props": [
                    "int",
                    "List[float]",
                    "float",
                    "protoactor.actor.props.Props"
                ],
                "pool_size": [
                    "int",
                    "List[float]",
                    "float",
                    "protoactor.actor.props.Props"
                ]
            }
        },
        "Router.new_consistent_hash_pool": {
            "name": "new_consistent_hash_pool",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "props": [
                    "int",
                    "float",
                    "protoactor.actor.props.Props",
                    "Tuple[Union[float,float]]",
                    "Tuple[float,float]"
                ],
                "pool_size": [
                    "int",
                    "float",
                    "protoactor.actor.props.Props",
                    "Tuple[Union[float,float]]",
                    "Tuple[float,float]"
                ],
                "hash_func": [
                    "Callable[[str],int]",
                    "None",
                    "int",
                    "Callable[str,int]",
                    "Union[int,None]",
                    "Optional[float]",
                    "float"
                ],
                "replica_count": [
                    "int",
                    "protoactor.actor.props.Props",
                    "float",
                    "Tuple[float,float]"
                ]
            }
        },
        "Router.new_random_pool": {
            "name": "new_random_pool",
            "location": 50,
            "return": [
                "bool",
                "bytes",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "props": [
                    "int",
                    "List[float]",
                    "float",
                    "protoactor.actor.props.Props"
                ],
                "pool_size": [
                    "int",
                    "List[float]",
                    "float",
                    "protoactor.actor.props.Props"
                ],
                "seed": [
                    "int",
                    "None",
                    "List[float]",
                    "protoactor.actor.props.Props",
                    "float"
                ]
            }
        },
        "Router.new_round_robin_pool": {
            "name": "new_round_robin_pool",
            "location": 54,
            "return": [
                "Optional[int]",
                "bytes",
                "str",
                "Callable"
            ],
            "arguments": {
                "props": [
                    "int",
                    "List[str]",
                    "protoactor.actor.props.Props"
                ],
                "pool_size": [
                    "int",
                    "List[str]",
                    "protoactor.actor.props.Props"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/router/router_actor.py": {
        "RouterActor.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict"
                ],
                "router_state": [],
                "wg": [
                    "str",
                    "int",
                    "float",
                    "threading.Event"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/router/router_config.py": {
        "RouterConfig.create_router_state": {
            "name": "create_router_state",
            "location": 20,
            "return": [
                "protoactor.router.router_state.RouterState",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouterConfig.props": {
            "name": "props",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupRouterConfig.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PoolRouterConfig.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pool_size": [
                    "int",
                    "bool"
                ],
                "routee_props": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "RouterConfig.props.spawn_router_process": {
            "name": "spawn_router_process",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ],
                "props": [
                    "Optional[bool]",
                    "bool",
                    "str",
                    "float"
                ],
                "parent": [
                    "bool",
                    "int",
                    "str",
                    "Optional[Any]",
                    "Union[int, List]"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/router/router_process.py": {
        "RouterProcess.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ],
                "mailbox": [
                    "Dict",
                    "bool",
                    "protoactor.mailbox.mailbox.AbstractMailbox"
                ],
                "wg": [
                    "str"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/router/router_state.py": {
        "RouterState.get_routees": {
            "name": "get_routees",
            "location": 9,
            "return": [
                "List[protoactor.actor.PID]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouterState.set_routees": {
            "name": "set_routees",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "routees": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/router/__init__.py": {},
    "protoactor-python-master/protoactor/schedulers/simple_scheduler.py": {
        "SimpleScheduler.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "RootContext",
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/schedulers/__init__.py": {},
    "protoactor-python-master/protoactor/tracing/__init__.py": {},
    "protoactor-python-master/protoactor/tracing/opentracing/open_tracing_decorator.py": {
        "OpenTracingRootContextDecorator.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "bool",
                    "None",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[A,bool]"
                ],
                "send_span_setup": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Union[str,int]",
                    "bool"
                ],
                "tracer": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "OpenTracingActorContextDecorator.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "bool",
                    "None",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[A,bool]"
                ],
                "send_span_setup": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Union[str,int]",
                    "bool"
                ],
                "receive_span_setup": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Union[str,int]",
                    "bool"
                ],
                "tracer": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "OpenTracingRootContextDecorator.__init__.__send_span_setup": {
            "name": "__send_span_setup",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "span": [
                    "str",
                    "List[str]",
                    "Union[str, Iterable[str]]",
                    "Optional[str]"
                ],
                "message": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "OpenTracingActorContextDecorator.__init__.__send_span_setup": {
            "name": "__send_span_setup",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "span": [],
                "message": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "OpenTracingActorContextDecorator.__init__.__receive_span_setup": {
            "name": "__receive_span_setup",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "span": [],
                "message": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/tracing/opentracing/open_tracing_factory.py": {
        "OpenTracingFactory.get_props_with_open_tracing": {
            "name": "get_props_with_open_tracing",
            "location": 16,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "props": [
                    "protoactor.actor.props.Props",
                    "str",
                    "bool"
                ],
                "send_span_setup": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "T"
                ],
                "receive_span_setup": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "T"
                ],
                "tracer": [
                    "Optional[bool]",
                    "None",
                    "List[int]",
                    "Optional[int]",
                    "str",
                    "bool"
                ]
            }
        },
        "OpenTracingFactory.get_props_with_open_tracing_sender": {
            "name": "get_props_with_open_tracing_sender",
            "location": 26,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "props": [
                    "protoactor.actor.props.Props",
                    "str",
                    "bool"
                ],
                "tracer": [
                    "str",
                    "bool",
                    "protoactor.actor.props.Props"
                ]
            }
        },
        "OpenTracingFactory.get_context_with_open_tracing": {
            "name": "get_context_with_open_tracing",
            "location": 30,
            "return": [
                "OpenTracingActorContextDecorator",
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "context": [
                    "List[protoactor.actor.PID]",
                    "str",
                    "protoactor.actor.actor_contexAbstractContext"
                ],
                "send_span_setup": [
                    "Optional[int]",
                    "Dict[str,Any]",
                    "None",
                    "int"
                ],
                "receive_span_setup": [
                    "Optional[int]",
                    "Dict[str,Any]",
                    "None",
                    "int"
                ],
                "tracer": [
                    "Optional[int]",
                    "None",
                    "Optional[float]",
                    "int",
                    "Optional[str]",
                    "float",
                    "str"
                ]
            }
        },
        "OpenTracingFactory.get_root_context_with_open_tracing": {
            "name": "get_root_context_with_open_tracing",
            "location": 45,
            "return": [
                "str",
                "OpenTracingRootContextDecorator"
            ],
            "arguments": {
                "context": [
                    "Dict",
                    "protoactor.actor.actor_contexAbstractRootContext"
                ],
                "send_span_setup": [
                    "Optional[bool]",
                    "None",
                    "Optional[Dict]",
                    "bool",
                    "Dict"
                ],
                "tracer": [
                    "None",
                    "Optional[Any]",
                    "Any",
                    "Optional[NetworkManager]",
                    "Optional[Page]"
                ]
            }
        },
        "OpenTracingFactory.get_props_with_open_tracing.fn": {
            "name": "fn",
            "location": 19,
            "return": [
                "str",
                "int",
                "bool",
                "IO[str]"
            ],
            "arguments": {
                "ctx": [
                    "str"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/tracing/opentracing/open_tracing_helper.py": {
        "OpenTracingHelper.build_started_scope": {
            "name": "build_started_scope",
            "location": 11,
            "return": [
                "int"
            ],
            "arguments": {
                "tracer": [
                    "int",
                    "bool",
                    "str"
                ],
                "parent_span": [
                    "int",
                    "str",
                    "bool"
                ],
                "verb": [
                    "int",
                    "str",
                    "bool"
                ],
                "message": [
                    "Any",
                    "str"
                ],
                "span_setup": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Dict",
                    "Optional[Dict]",
                    "None",
                    "Optional[Sequence[Any]]",
                    "Optional[Exception]",
                    "Sequence[Any]",
                    "Exception"
                ]
            }
        },
        "OpenTracingHelper.setup_span": {
            "name": "setup_span",
            "location": 23,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "exception": [
                    "Exception",
                    "str"
                ],
                "span": [
                    "float",
                    "Tuple[str,float]",
                    "Tuple[Union[str,float]]"
                ]
            }
        },
        "OpenTracingHelper.get_parent_span": {
            "name": "get_parent_span",
            "location": 35,
            "return": [
                "None",
                "bool",
                "str",
                "Dict[str,Dict]",
                "Dict[str,Any]",
                "Dict"
            ],
            "arguments": {
                "tracer": [
                    "str",
                    "Optional[str]",
                    "None",
                    "int",
                    "Optional[float]",
                    "float",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "OpenTracingHelper.default_setup_span": {
            "name": "default_setup_span",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "span": [
                    "str",
                    "bool",
                    "Any",
                    "Optional[str]",
                    "None"
                ],
                "message": [
                    "str",
                    "bool",
                    "Any",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/tracing/opentracing/open_tracing_middleware.py": {
        "open_tracing_sender_middleware": {
            "name": "open_tracing_sender_middleware",
            "location": 10,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "tracer": [
                    "str",
                    "None",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "open_tracing_sender_middleware.level_0": {
            "name": "level_0",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "next": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/utils/async_timer.py": {
        "AsyncTimer.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interval": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "function": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "args": [
                    "None"
                ],
                "kwargs": [
                    "None"
                ]
            }
        },
        "AsyncTimer.run": {
            "name": "run",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncTimer.cancel": {
            "name": "cancel",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/protoactor/utils/__init__.py": {},
    "protoactor-python-master/protoactor/\u0441luster/grain_call_options.py": {
        "GrainCallOptions.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/protoactor/\u0441luster/member_status.py": {
        "AbstractMemberStatusValue.is_same": {
            "name": "is_same",
            "location": 7,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str",
                    "int"
                ]
            }
        },
        "AbstractMemberStatusValueSerializer.to_value_bytes": {
            "name": "to_value_bytes",
            "location": 13,
            "return": [
                "bytes",
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "AbstractMemberStatusValueSerializer.from_value_bytes": {
            "name": "from_value_bytes",
            "location": 17,
            "return": [
                "AbstractMemberStatusValue",
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "Iterable[tuple[Union[str,Any]]]",
                    "Iterable[Tuple[str,Any]]",
                    "int"
                ]
            }
        },
        "MemberStatus.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "host": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[Any]",
                    "Any"
                ],
                "port": [
                    "str",
                    "int",
                    "Dict",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "kinds": [
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "None",
                    "Mapping",
                    "Optional[bool]",
                    "str",
                    "Optional[float]",
                    "float"
                ],
                "alive": [
                    "str",
                    "int",
                    "Dict",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "status_value": [
                    "int",
                    "str"
                ]
            }
        },
        "MemberStatus.address": {
            "name": "address",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberStatus.member_id": {
            "name": "member_id",
            "location": 40,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberStatus.host": {
            "name": "host",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberStatus.port": {
            "name": "port",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberStatus.kinds": {
            "name": "kinds",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberStatus.alive": {
            "name": "alive",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberStatus.status_value": {
            "name": "status_value",
            "location": 60,
            "return": [
                "bool",
                "type",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullMemberStatusValueSerializer.to_value_bytes": {
            "name": "to_value_bytes",
            "location": 65,
            "return": [
                "None",
                "Optional[str]",
                "Optional[float]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "NullMemberStatusValueSerializer.from_value_bytes": {
            "name": "from_value_bytes",
            "location": 68,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "Optional[Sequence[str]]",
                "Union[None,List[str]]"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "Iterable[tuple[Union[str,Any]]]",
                    "Iterable[Tuple[str,Any]]",
                    "int"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/\u0441luster/member_status_events.py": {
        "ClusterTopologyEvent.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "statuses": []
            }
        },
        "ClusterTopologyEvent.statuses": {
            "name": "statuses",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractMemberStatusEvent.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [],
                "port": [],
                "kinds": []
            }
        },
        "AbstractMemberStatusEvent.address": {
            "name": "address",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractMemberStatusEvent.host": {
            "name": "host",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractMemberStatusEvent.port": {
            "name": "port",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractMemberStatusEvent.kinds": {
            "name": "kinds",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MemberJoinedEvent.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [],
                "port": [],
                "kinds": []
            }
        },
        "MemberRejoinedEvent.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [],
                "port": [],
                "kinds": []
            }
        },
        "MemberLeftEvent.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [],
                "port": [],
                "kinds": []
            }
        }
    },
    "protoactor-python-master/protoactor/\u0441luster/member_strategy.py": {
        "AbstractMemberStrategy.get_all_members": {
            "name": "get_all_members",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractMemberStrategy.add_member": {
            "name": "add_member",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member": []
            }
        },
        "AbstractMemberStrategy.update_member": {
            "name": "update_member",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member": []
            }
        },
        "AbstractMemberStrategy.remove_member": {
            "name": "remove_member",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member": []
            }
        },
        "AbstractMemberStrategy.get_partition": {
            "name": "get_partition",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "AbstractMemberStrategy.get_activator": {
            "name": "get_activator",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleMemberStrategy.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleMemberStrategy.get_all_members": {
            "name": "get_all_members",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleMemberStrategy.add_member": {
            "name": "add_member",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member": []
            }
        },
        "SimpleMemberStrategy.update_member": {
            "name": "update_member",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member": []
            }
        },
        "SimpleMemberStrategy.remove_member": {
            "name": "remove_member",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member": []
            }
        },
        "SimpleMemberStrategy.get_partition": {
            "name": "get_partition",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "SimpleMemberStrategy.get_activator": {
            "name": "get_activator",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/protoactor/\u0441luster/messages.py": {
        "WatchPidRequest.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/\u0441luster/pid_cache.py": {
        "PidCache.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PidCache.process_member_status_event": {
            "name": "process_member_status_event",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "evn": []
            }
        },
        "PidCache.get_cache": {
            "name": "get_cache",
            "location": 37,
            "return": [
                "tuple[bool]",
                "tuple[typing.Optional[bool]]"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "PidCache.remove_cache_by_pid": {
            "name": "remove_cache_by_pid",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pid": []
            }
        },
        "PidCache.remove_cache_by_name": {
            "name": "remove_cache_by_name",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "PidCache.remove_cache_by_member_address": {
            "name": "remove_cache_by_member_address",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member_address": []
            }
        },
        "PidCacheWatcher.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/protoactor/\u0441luster/protos_grpc.py": {},
    "protoactor-python-master/protoactor/\u0441luster/protos_pb2.py": {},
    "protoactor-python-master/protoactor/\u0441luster/rendezvous.py": {
        "Rendezvous.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member_strategy": []
            }
        },
        "Rendezvous.get_node": {
            "name": "get_node",
            "location": 15,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Rendezvous.update_rdv": {
            "name": "update_rdv",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rendezvous._rdv_hash": {
            "name": "_rdv_hash",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "key": []
            }
        }
    },
    "protoactor-python-master/protoactor/\u0441luster/round_robin.py": {
        "RoundRobin.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member_strategy": []
            }
        },
        "RoundRobin.get_node": {
            "name": "get_node",
            "location": 14,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/protoactor/\u0441luster/__init__.py": {},
    "protoactor-python-master/protoactor/\u0441luster/\u0441luster.py": {
        "MemberList.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberList.setup": {
            "name": "setup",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberList.stop": {
            "name": "stop",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberList.get_members": {
            "name": "get_members",
            "location": 44,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "kind": []
            }
        },
        "MemberList.get_partition": {
            "name": "get_partition",
            "location": 56,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "kind": []
            }
        },
        "MemberList.get_activator": {
            "name": "get_activator",
            "location": 63,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "kind": []
            }
        },
        "SpawningProcess.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spawning_address": []
            }
        },
        "SpawningProcess.task": {
            "name": "task",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpawningProcess.spawning_address": {
            "name": "spawning_address",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpawningProcess.set_result": {
            "name": "set_result",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Partition.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Partition.partition_for_kind": {
            "name": "partition_for_kind",
            "location": 179,
            "return": [],
            "arguments": {
                "address": [],
                "kind": []
            }
        },
        "PartitionActor.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kind": []
            }
        },
        "PartitionActor._terminated": {
            "name": "_terminated",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "PartitionActor._member_rejoined": {
            "name": "_member_rejoined",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "ClusterConfig.__init__": {
            "name": "__init__",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "address": [],
                "port": [],
                "cluster_provider": []
            }
        },
        "ClusterConfig.name": {
            "name": "name",
            "location": 385,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClusterConfig.address": {
            "name": "address",
            "location": 389,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClusterConfig.port": {
            "name": "port",
            "location": 393,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClusterConfig.cluster_provider": {
            "name": "cluster_provider",
            "location": 397,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClusterConfig.remote_config": {
            "name": "remote_config",
            "location": 401,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClusterConfig.timeout_timespan": {
            "name": "timeout_timespan",
            "location": 405,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClusterConfig.initial_member_status_value": {
            "name": "initial_member_status_value",
            "location": 409,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClusterConfig.member_status_value_serializer": {
            "name": "member_status_value_serializer",
            "location": 413,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClusterConfig.member_strategy_builder": {
            "name": "member_strategy_builder",
            "location": 417,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClusterConfig.with_remote_config": {
            "name": "with_remote_config",
            "location": 420,
            "return": [
                "ClusterConfig"
            ],
            "arguments": {
                "self": [],
                "remote_config": []
            }
        },
        "ClusterConfig.with_timeout_seconds": {
            "name": "with_timeout_seconds",
            "location": 424,
            "return": [
                "ClusterConfig"
            ],
            "arguments": {
                "self": [],
                "timeout_seconds": []
            }
        },
        "ClusterConfig.with_initial_member_status_value": {
            "name": "with_initial_member_status_value",
            "location": 428,
            "return": [
                "ClusterConfig"
            ],
            "arguments": {
                "self": [],
                "status_value": []
            }
        },
        "ClusterConfig.with_member_status_value_serializer": {
            "name": "with_member_status_value_serializer",
            "location": 432,
            "return": [
                "ClusterConfig"
            ],
            "arguments": {
                "self": [],
                "serializer": []
            }
        },
        "ClusterConfig.with_member_strategy_builder": {
            "name": "with_member_strategy_builder",
            "location": 436,
            "return": [
                "ClusterConfig"
            ],
            "arguments": {
                "self": [],
                "builder": []
            }
        },
        "Cluster.__init__": {
            "name": "__init__",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.config": {
            "name": "config",
            "location": 447,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cluster.__parse_address": {
            "name": "__parse_address",
            "location": 518,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "address": []
            }
        }
    },
    "protoactor-python-master/protoactor/\u0441luster/hash_algorithms/fnv1a32.py": {
        "FNV1A32.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FNV1A32.compute_hash": {
            "name": "compute_hash",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "int",
                    "List[str]",
                    "Optional[int]",
                    "str",
                    "List[Callable]",
                    "Optional[str]",
                    "T",
                    "Optional[List[Callable]]"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/\u0441luster/providers/abstract_cluster_provider.py": {},
    "protoactor-python-master/protoactor/\u0441luster/providers/consul/consul_client.py": {
        "ConsulClientConfiguration.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "float",
                    "bool"
                ],
                "datacenter": [
                    "Text",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ServiceEntry.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "str",
                    "bool",
                    "List[list[str]]",
                    "List[List[str]]"
                ],
                "port": [
                    "int",
                    "str",
                    "bool",
                    "List[list[str]]",
                    "List[List[str]]"
                ],
                "tags": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "bytes",
                    "Optional[Callable]",
                    "Callable"
                ]
            }
        },
        "QueryResult.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "last_index": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "response": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "DateTimeEncoder.default": {
            "name": "default",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "float",
                    "datetime.timedelta",
                    "int",
                    "Dict[str,str]",
                    "datetime.datetime"
                ]
            }
        },
        "ServiceEndpoint.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "int",
                    "float",
                    "bytes",
                    "bool"
                ],
                "url": [
                    "str",
                    "bytes",
                    "int",
                    "Dict",
                    "aiohttp.ClientSession"
                ]
            }
        },
        "KeyValueEndpoint.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "int",
                    "float",
                    "bytes",
                    "bool"
                ],
                "url": [
                    "str",
                    "bytes",
                    "int",
                    "Dict",
                    "aiohttp.ClientSession"
                ]
            }
        },
        "HealthEndpoint.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "int",
                    "float",
                    "bytes",
                    "bool"
                ],
                "url": [
                    "str",
                    "bytes",
                    "int",
                    "Dict",
                    "aiohttp.ClientSession"
                ]
            }
        },
        "HealthEndpoint.__convert_time": {
            "name": "__convert_time",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "datetime.timedelta",
                    "int",
                    "float"
                ]
            }
        },
        "ConsulClient.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsulClient.service": {
            "name": "service",
            "location": 146,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsulClient.key_value_storage": {
            "name": "key_value_storage",
            "location": 150,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[str]]",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsulClient.health": {
            "name": "health",
            "location": 154,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/protoactor/\u0441luster/providers/consul/consul_provider.py": {
        "ConsulProviderOptions.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsulProvider.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consul_config": [],
                "options": [
                    "ConsulProviderOptions"
                ]
            }
        }
    },
    "protoactor-python-master/protoactor/\u0441luster/providers/single_remote_instance/protos_grpc.py": {},
    "protoactor-python-master/protoactor/\u0441luster/providers/single_remote_instance/protos_pb2.py": {},
    "protoactor-python-master/protoactor/\u0441luster/providers/single_remote_instance/single_remote_instance_provider.py": {
        "SingleRemoteInstanceProvider.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_host": [],
                "server_port": []
            }
        },
        "SingleRemoteInstanceProvider.monitor_member_status_changes": {
            "name": "monitor_member_status_changes",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleRemoteInstanceProvider.shutdown": {
            "name": "shutdown",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/protobuf/__init__.py": {},
    "protoactor-python-master/protobuf/proto_grain_generator/grain_gen.py": {
        "GrainGen.generate": {
            "name": "generate",
            "location": 11,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "GrainGen.__get_proto_file": {
            "name": "__get_proto_file",
            "location": 19,
            "return": [
                "ProtoFile",
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "GrainGen.__convert_to_snake_case": {
            "name": "__convert_to_snake_case",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        }
    },
    "protoactor-python-master/protobuf/proto_grain_generator/proto.py": {
        "ProtoMessage.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "ProtoMessage.name": {
            "name": "name",
            "location": 9,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProtoMethod.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Sequence[Dict[str,str]]",
                    "Sequence[dict[str,str]]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "input_name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "output_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ProtoMethod.index": {
            "name": "index",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProtoMethod.name": {
            "name": "name",
            "location": 25,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProtoMethod.input_name": {
            "name": "input_name",
            "location": 29,
            "return": [
                "str",
                "List[Tuple[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProtoMethod.output_name": {
            "name": "output_name",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProtoService.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]",
                    "None"
                ],
                "methods": [
                    "bool",
                    "None",
                    "Callable",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[bytes]",
                    "bytes"
                ]
            }
        },
        "ProtoService.name": {
            "name": "name",
            "location": 45,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProtoService.methods": {
            "name": "methods",
            "location": 49,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProtoFile.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "messages": [
                    "Optional[int]",
                    "None",
                    "List[str]",
                    "int",
                    "Optional[str]",
                    "Optional[Callable]",
                    "str",
                    "Optional[Hashable]",
                    "Callable",
                    "Optional[Iterable[str]]",
                    "Hashable"
                ],
                "services": [
                    "int",
                    "None",
                    "Optional[float]",
                    "Optional[str]",
                    "float",
                    "Optional[Callable]",
                    "str",
                    "Optional[Hashable]",
                    "Callable",
                    "Hashable"
                ]
            }
        },
        "ProtoFile.messages": {
            "name": "messages",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProtoFile.services": {
            "name": "services",
            "location": 67,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/protobuf/proto_grain_generator/proto_grain_generator.py": {
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "str"
                ]
            }
        },
        "get_input_file_path": {
            "name": "get_input_file_path",
            "location": 23,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "argv": [
                    "str",
                    "os.PathLike"
                ]
            }
        },
        "get_output_file_path": {
            "name": "get_output_file_path",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "argv": [
                    "str"
                ]
            }
        }
    },
    "protoactor-python-master/tests/__init__.py": {},
    "protoactor-python-master/tests/actor/test_actor.py": {},
    "protoactor-python-master/tests/actor/test_behavior.py": {
        "LightBulb.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/tests/actor/test_cancel_token.py": {
        "test_token_single": {
            "name": "test_token_single",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_token_chain_event_loop_mismatch": {
            "name": "test_token_chain_event_loop_mismatch",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_token_chain_trigger_chain": {
            "name": "test_token_chain_trigger_chain",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_token_chain_trigger_first": {
            "name": "test_token_chain_trigger_first",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_token_chain_trigger_middle": {
            "name": "test_token_chain_trigger_middle",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_token_chain_trigger_last": {
            "name": "test_token_chain_trigger_last",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "protoactor-python-master/tests/actor/test_deps.py": {
        "test_circular_dependencies": {
            "name": "test_circular_dependencies",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "protoactor-python-master/tests/actor/test_event_stream.py": {},
    "protoactor-python-master/tests/actor/test_local_context.py": {},
    "protoactor-python-master/tests/actor/test_message_envelope.py": {
        "message_envelope": {
            "name": "message_envelope",
            "location": 9,
            "return": [
                "MessageEnvelope",
                "str",
                "Dict"
            ],
            "arguments": {}
        },
        "test_wrap": {
            "name": "test_wrap",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "message_envelope": []
            }
        },
        "test_create_new_message_envelope_with_sender": {
            "name": "test_create_new_message_envelope_with_sender",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "message_envelope": [
                    "str"
                ]
            }
        },
        "test_create_new_message_envelope_with_message": {
            "name": "test_create_new_message_envelope_with_message",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "message_envelope": []
            }
        },
        "test_create_new_message_envelope_with_header_based_on_key_value_pair_collection": {
            "name": "test_create_new_message_envelope_with_header_based_on_key_value_pair_collection",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "message_envelope": []
            }
        },
        "test_create_new_message_envelope_with_header_based_on_message_header": {
            "name": "test_create_new_message_envelope_with_header_based_on_message_header",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "message_envelope": []
            }
        },
        "test_create_new_message_envelope_with_header_based_on_key_value_pair": {
            "name": "test_create_new_message_envelope_with_header_based_on_key_value_pair",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "message_envelope": []
            }
        },
        "test_unwrap": {
            "name": "test_unwrap",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "message_envelope": [
                    "Dict"
                ]
            }
        },
        "test_unwrap_header": {
            "name": "test_unwrap_header",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "message_envelope": [
                    "str"
                ]
            }
        },
        "test_unwrap_message": {
            "name": "test_unwrap_message",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "message_envelope": [
                    "str",
                    "int"
                ]
            }
        },
        "test_unwrap_sender": {
            "name": "test_unwrap_sender",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "message_envelope": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "protoactor-python-master/tests/actor/test_persistance.py": {
        "test_InMemoryProviderState_get_snapshot": {
            "name": "test_InMemoryProviderState_get_snapshot",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_InMemoryProviderState_get_events": {
            "name": "test_InMemoryProviderState_get_events",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_InMemoryProviderState_persist_event": {
            "name": "test_InMemoryProviderState_persist_event",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "protoactor-python-master/tests/actor/test_pid.py": {},
    "protoactor-python-master/tests/actor/test_process.py": {
        "process_data": {
            "name": "process_data",
            "location": 10,
            "return": [
                "Dict[Text,Union[DefaultMailbox,ActorProcess]]",
                "str",
                "int",
                "Generator",
                "bool"
            ],
            "arguments": {}
        },
        "test_get_mailbox_property": {
            "name": "test_get_mailbox_property",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "process_data": [
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "protoactor-python-master/tests/actor/test_process_registry.py": {
        "nohost": {
            "name": "nohost",
            "location": 12,
            "return": [
                "ProcessRegistry",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "mock_process": {
            "name": "mock_process",
            "location": 19,
            "return": [
                "List[str]",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {}
        },
        "test_nonhost_address": {
            "name": "test_nonhost_address",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "nohost": [
                    "str",
                    "float"
                ]
            }
        },
        "test_set_address": {
            "name": "test_set_address",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "nohost": [
                    "protoactor.actor.process.ProcessRegistry",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ]
            }
        },
        "test_next_id": {
            "name": "test_next_id",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "nohost": [
                    "str",
                    "protoactor.actor.process.ProcessRegistry"
                ]
            }
        },
        "test_add": {
            "name": "test_add",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "nohost": [
                    "protoactor.actor.process.ProcessRegistry"
                ],
                "mock_process": []
            }
        },
        "test_remove": {
            "name": "test_remove",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "nohost": [
                    "protoactor.actor.process.ProcessRegistry"
                ],
                "mock_process": []
            }
        },
        "test_get_deadletter": {
            "name": "test_get_deadletter",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_nonhost": {
            "name": "test_get_nonhost",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "nohost": [
                    "List[T]",
                    "protoactor.actor.process.ProcessRegistry",
                    "Generator[Union[None,Any,None]]",
                    "Generator[None,Any,None]",
                    "mock.Mock"
                ],
                "mock_process": []
            }
        }
    },
    "protoactor-python-master/tests/actor/test_props.py": {
        "test_props_default_init": {
            "name": "test_props_default_init",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_props_with": {
            "name": "test_props_with",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "field": [
                    "str",
                    "List[str]",
                    "int",
                    "Iterable[str]",
                    "bool"
                ],
                "method": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "value": [
                    "Iterable[Any]",
                    "Type",
                    "bool",
                    "Type[object]",
                    "Set",
                    "Dict[str,Iterable[Any]]",
                    "Dict[int,str]",
                    "Dict"
                ]
            }
        }
    },
    "protoactor-python-master/tests/actor/test_restart_statistics.py": {
        "test_number_of_failures": {
            "name": "test_number_of_failures",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_number_of_failures_greater_then_zero": {
            "name": "test_number_of_failures_greater_then_zero",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "protoactor-python-master/tests/actor/test_supervision.py": {
        "supervisor_data": {
            "name": "supervisor_data",
            "location": 17,
            "return": [
                "Dict[Text,Union[AsyncMock,DefaultMailbox,ActorProcess,RestartStatistics]]",
                "str",
                "int",
                "Generator",
                "bool"
            ],
            "arguments": {}
        }
    },
    "protoactor-python-master/tests/actor/test_utils.py": {
        "stack": {
            "name": "stack",
            "location": 10,
            "return": [
                "Stack",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_singleton": {
            "name": "test_singleton",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_singleton_for_different_classes": {
            "name": "test_singleton_for_different_classes",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stack_push_pop": {
            "name": "test_stack_push_pop",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "stack": [
                    "str",
                    "float"
                ]
            }
        },
        "test_stack_push_peek_len": {
            "name": "test_stack_push_peek_len",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "stack": [
                    "str",
                    "int"
                ]
            }
        },
        "test_stack_push_is_empty": {
            "name": "test_stack_push_is_empty",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "stack": []
            }
        },
        "test_singleton.TestSingleton.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_singleton_for_different_classes.A.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_singleton_for_different_classes.B.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/tests/actor/__init__.py": {},
    "protoactor-python-master/tests/cluster/__init__.py": {},
    "protoactor-python-master/tests/cluster/hash_algorithms/test_fnv1a32.py": {
        "test_hash_function": {
            "name": "test_hash_function",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "protoactor-python-master/tests/mailbox/test_mailbox.py": {
        "test_create_abstract_mailbox": {
            "name": "test_create_abstract_mailbox",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "protoactor-python-master/tests/mailbox/test_mailbox_queue.py": {
        "unbounded_queue": {
            "name": "unbounded_queue",
            "location": 9,
            "return": [
                "UnboundedMailboxQueue",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_unbounded_mailbox_queue_push_pop": {
            "name": "test_unbounded_mailbox_queue_push_pop",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "unbounded_queue": []
            }
        },
        "test_unbounded_mailbox_queue_pop_empty": {
            "name": "test_unbounded_mailbox_queue_pop_empty",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "unbounded_queue": [
                    "Tuple[int,int]",
                    "str",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "test_unbounded_mailbox_queue_has_message": {
            "name": "test_unbounded_mailbox_queue_has_message",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "unbounded_queue": []
            }
        },
        "test_unbounded_mailbox_queue_has_message_empty": {
            "name": "test_unbounded_mailbox_queue_has_message_empty",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "unbounded_queue": [
                    "Dict",
                    "bool"
                ]
            }
        },
        "test_create_abstract_queue": {
            "name": "test_create_abstract_queue",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "protoactor-python-master/tests/mailbox/__init__.py": {},
    "protoactor-python-master/tests/persistence/test_example_persistent_actor.py": {
        "create_test_actor": {
            "name": "create_test_actor",
            "location": 412,
            "return": [
                "Tuple[Union[dict[Text,],int,str,list[str],InMemoryProvider]]",
                "bool",
                "List[str]",
                "Dict[str,Tuple[str,str]]",
                "Dict[str,Union[str,int]]"
            ],
            "arguments": {}
        },
        "test_events_are_saved_to_persistence.callback": {
            "name": "callback",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "o": [
                    "protoactor.actor.protos_pb2.PID",
                    "list"
                ]
            }
        },
        "Multiply.__init__": {
            "name": "__init__",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "bytes"
                ]
            }
        },
        "Multiplied.__init__": {
            "name": "__init__",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "bytes"
                ]
            }
        },
        "State.__init__": {
            "name": "__init__",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "datetime.timedelta",
                    "T"
                ]
            }
        },
        "ExamplePersistentActor.__init__": {
            "name": "__init__",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "events": [
                    "str",
                    "Dict",
                    "int",
                    "float"
                ],
                "event_store": [
                    "str",
                    "int",
                    "uuid.UUID"
                ],
                "snapshot_store": [
                    "str",
                    "int",
                    "uuid.UUID"
                ],
                "persistence_id": [
                    "str",
                    "int",
                    "uuid.UUID"
                ]
            }
        },
        "ExamplePersistentActor.apply_event": {
            "name": "apply_event",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "ExamplePersistentActor.apply_snapshot": {
            "name": "apply_snapshot",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "snapshot": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "protoactor-python-master/tests/persistence/test_persistence_with_snapshot_strategies.py": {
        "create_test_actor": {
            "name": "create_test_actor",
            "location": 65,
            "return": [
                "Tuple[Union[dict[Text,],int,str,list[str],InMemoryProvider]]",
                "bool",
                "List[str]",
                "Dict[str,Tuple[str,str]]",
                "Dict[str,Union[str,int]]"
            ],
            "arguments": {
                "strategy": [
                    "int",
                    "Dict[int,dict]"
                ]
            }
        },
        "ExamplePersistentActor.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "events": [
                    "str",
                    "Dict",
                    "int",
                    "float"
                ],
                "event_store": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "None"
                ],
                "snapshot_store": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "None"
                ],
                "persistence_id": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "None"
                ],
                "strategy": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "ExamplePersistentActor.process_event": {
            "name": "process_event",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str,Any]"
                ]
            }
        },
        "ExamplePersistentActor.process_snapshot": {
            "name": "process_snapshot",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "snapshot": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "protoactor-python-master/tests/persistence/__init__.py": {},
    "protoactor-python-master/tests/persistence/snapshot_strategies/test_event_type_strategy.py": {
        "test_event_type_strategy_should_snapshot_according_to_the_event_type": {
            "name": "test_event_type_strategy_should_snapshot_according_to_the_event_type",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "protoactor-python-master/tests/persistence/snapshot_strategies/test_interval_strategy.py": {
        "test_interval_strategy_should_snapshot_according_to_the_interval": {
            "name": "test_interval_strategy_should_snapshot_according_to_the_interval",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "interval": [
                    "str",
                    "Dict[str,Any]"
                ],
                "expected": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "protoactor-python-master/tests/persistence/snapshot_strategies/test_time_strategy.py": {
        "test_time_strategy_should_snapshot_according_to_the_interval": {
            "name": "test_time_strategy_should_snapshot_according_to_the_interval",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "protoactor-python-master/tests/protobuf/proto_grain_generator/test_proto_grain_generator.py": {},
    "protoactor-python-master/tests/protobuf/proto_grain_generator/messages/protos.py": {
        "AbstractHelloGrain.say_hello": {
            "name": "say_hello",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "HelloGrainClient.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grain_id": []
            }
        },
        "HelloGrainActor.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grains.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grains.hello_grain_factory": {
            "name": "hello_grain_factory",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "factory": []
            }
        },
        "Grains.hello_grain_client": {
            "name": "hello_grain_client",
            "location": 93,
            "return": [
                "HelloGrainClient"
            ],
            "arguments": {
                "self": [],
                "grain_id": []
            }
        }
    },
    "protoactor-python-master/tests/protobuf/proto_grain_generator/messages/protos_grpc.py": {
        "HelloGrainBase.__mapping__": {
            "name": "__mapping__",
            "location": 21,
            "return": [
                "Dict[Text,]",
                "str",
                "List[str]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "HelloGrainStub.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "bool"
                ]
            }
        }
    },
    "protoactor-python-master/tests/protobuf/proto_grain_generator/messages/protos_pb2.py": {},
    "protoactor-python-master/tests/remote/remote_manager.py": {
        "RemoteManager.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteManager.default_node_address": {
            "name": "default_node_address",
            "location": 19,
            "return": [
                "int",
                "list",
                "Dict[str, int]",
                "List[Dict[str, Any]]",
                "Union[int, float, complex]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteManager.nodes": {
            "name": "nodes",
            "location": 23,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteManager.provision_node": {
            "name": "provision_node",
            "location": 26,
            "return": [
                "Tuple[Text]",
                "str",
                "int",
                "float",
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "Text",
                    "str",
                    "int"
                ],
                "port": [
                    "int",
                    "str"
                ]
            }
        },
        "RemoteManager.dispose": {
            "name": "dispose",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/tests/remote/test_remote.py": {
        "remote_manager": {
            "name": "remote_manager",
            "location": 20,
            "return": [
                "RemoteManager",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "cleanup": {
            "name": "cleanup",
            "location": 167,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "remote_manager": [
                    "int",
                    "Callable[[], None]"
                ]
            }
        },
        "TerminatedMessageReceived.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "Dict[str,str]",
                    "bool"
                ],
                "actor_id": [
                    "str",
                    "Set[int]",
                    "int",
                    "None",
                    "Optional[int]",
                    "uuid.UUID"
                ]
            }
        },
        "SendMessageToRemoteActor.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "actor": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "LocalActor.__init__": {
            "name": "__init__",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "remote_actors": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "protoactor-python-master/tests/remote/test_serialization.py": {
        "register_file_descriptor": {
            "name": "register_file_descriptor",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_serialize_and_deserialize_json_pid": {
            "name": "test_can_serialize_and_deserialize_json_pid",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_serialize_and_deserialize_json": {
            "name": "test_can_serialize_and_deserialize_json",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_serialize_and_deserialize_protobuf": {
            "name": "test_can_serialize_and_deserialize_protobuf",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "protoactor-python-master/tests/remote/__init__.py": {},
    "protoactor-python-master/tests/remote/messages/protos_pb2.py": {},
    "protoactor-python-master/tests/remote/messages/__init__.py": {},
    "protoactor-python-master/tests/remote/node/node.py": {
        "main": {
            "name": "main",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "str",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "EchoActor.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "float",
                    "bool"
                ],
                "port": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "protoactor-python-master/tests/remote/node/__init__.py": {},
    "protoactor-python-master/tests/router/test_broadcast_group.py": {
        "create_broadcast_group_router_with3_routees": {
            "name": "create_broadcast_group_router_with3_routees",
            "location": 115,
            "return": [
                "Tuple",
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "MyTestActor.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/tests/router/test_consistent_hash_group.py": {
        "create_broadcast_group_router_with3_routees": {
            "name": "create_broadcast_group_router_with3_routees",
            "location": 115,
            "return": [
                "Tuple",
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "Message.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "datetime.timedelta",
                    "T"
                ]
            }
        },
        "Message.hash_by": {
            "name": "hash_by",
            "location": 129,
            "return": [
                "str",
                "Type",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__str__": {
            "name": "__str__",
            "location": 132,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuperIntelligentDeterministicHash.hash": {
            "name": "hash",
            "location": 138,
            "return": [
                "int",
                "Callable",
                "bytes",
                "T",
                "IO"
            ],
            "arguments": {
                "hash_key": [
                    "str"
                ]
            }
        },
        "MyTestActor.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/tests/router/test_random_group.py": {
        "create_router_with3_routees": {
            "name": "create_router_with3_routees",
            "location": 97,
            "return": [
                "Tuple",
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "MyTestActor.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/tests/router/test_round_robin_group.py": {
        "create_router_with3_routees": {
            "name": "create_router_with3_routees",
            "location": 98,
            "return": [
                "Tuple",
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "MyTestActor.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "protoactor-python-master/tests/router/__init__.py": {},
    "protoactor-python-master/tests/test_fixtures/mock_mailbox.py": {
        "MockMailbox.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMailbox.post_user_message": {
            "name": "post_user_message",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "List[str]",
                    "Callable[[list],None]",
                    "Callable[list,None]"
                ]
            }
        },
        "MockMailbox.post_system_message": {
            "name": "post_system_message",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "protoactor-python-master/tests/test_fixtures/test_mailbox.py": {
        "MockMailbox.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMailbox.post_user_message": {
            "name": "post_user_message",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "List[str]",
                    "Callable[[list],None]",
                    "Callable[list,None]"
                ]
            }
        },
        "MockMailbox.post_system_message": {
            "name": "post_system_message",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "protoactor-python-master/tests/test_utils/async_mock.py": {}
}
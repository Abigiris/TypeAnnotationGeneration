{
    "pte-manager-master/manage.py": {
        "cli": {
            "name": "cli",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "bool"
                ]
            }
        },
        "list_scrapers": {
            "name": "list_scrapers",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "scrape": {
            "name": "scrape",
            "location": 27,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[Exception]",
                "BaseException"
            ],
            "arguments": {
                "scraper_names": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Iterable[float]",
                    "Any",
                    "Optional[Callable]",
                    "int"
                ]
            }
        },
        "status": {
            "name": "status",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "sync_github": {
            "name": "sync_github",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "sync_gcal": {
            "name": "sync_gcal",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "shell": {
            "name": "shell",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pte-manager-master/pte/events.py": {
        "GenericEvent.get_description": {
            "name": "get_description",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericEvent.get_dict": {
            "name": "get_dict",
            "location": 34,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericEvent.save": {
            "name": "save",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericEvent.get_filename": {
            "name": "get_filename",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericEvent.get_by_id": {
            "name": "get_by_id",
            "location": 55,
            "return": [
                "Optional[GenericEvent]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "event_id": [
                    "str"
                ]
            }
        },
        "GenericEvent.get_all": {
            "name": "get_all",
            "location": 62,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Dict]",
                    "Callable"
                ]
            }
        },
        "GenericEvent.get_model_root": {
            "name": "get_model_root",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[Callable]",
                    "int",
                    "Callable",
                    "Match[str]",
                    "None",
                    "Match"
                ]
            }
        },
        "GenericEvent._read_from_file": {
            "name": "_read_from_file",
            "location": 75,
            "return": [
                "GenericEvent"
            ],
            "arguments": {
                "cls": [
                    "Type[_TGenericEvent]"
                ],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "pte-manager-master/pte/model_storage.py": {
        "commit": {
            "name": "commit",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "Text",
                    "Dict",
                    "str",
                    "bytes",
                    "Callable[[bytes],bytes]"
                ]
            }
        },
        "push": {
            "name": "push",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "status": {
            "name": "status",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pte-manager-master/pte/settings.py": {},
    "pte-manager-master/pte/utils.py": {
        "get_date": {
            "name": "get_date",
            "location": 6,
            "return": [
                "datetime.date"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "configure_logging": {
            "name": "configure_logging",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "log_level": [
                    "Text",
                    "bytes",
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "pte-manager-master/pte/__init__.py": {},
    "pte-manager-master/pte/gcal/access.py": {
        "get_access_token": {
            "name": "get_access_token",
            "location": 5,
            "return": [
                "str",
                "Optional[str]",
                "List[dict]",
                "dict"
            ],
            "arguments": {}
        },
        "get_refresh_token": {
            "name": "get_refresh_token",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "set_refresh_token": {
            "name": "set_refresh_token",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "token": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "pte-manager-master/pte/gcal/sync.py": {
        "sync": {
            "name": "sync",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "process_http_response": {
            "name": "process_http_response",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "resp": [
                    "str",
                    "requests.Response",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "GenericGCalSynchronizer.clear": {
            "name": "clear",
            "location": 24,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericGCalSynchronizer.sync": {
            "name": "sync",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericGCalSynchronizer.get_local_events": {
            "name": "get_local_events",
            "location": 66,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericGCalSynchronizer.get_remote_events": {
            "name": "get_remote_events",
            "location": 74,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericGCalSynchronizer.event_to_gcal": {
            "name": "event_to_gcal",
            "location": 83,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str,Any]",
                    "str",
                    "watchdog.events.FileSystemEvent"
                ]
            }
        },
        "GenericGCalSynchronizer.get_gcal_id": {
            "name": "get_gcal_id",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ev": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "pte-manager-master/pte/gcal/webserver.py": {
        "index": {
            "name": "index",
            "location": 16,
            "return": [
                "str",
                "dict",
                "List[str]",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "redirect": {
            "name": "redirect",
            "location": 35,
            "return": [
                "Tuple[Text]",
                "Dict[str,int]",
                "Text",
                "int",
                "Dict"
            ],
            "arguments": {}
        },
        "open_browser": {
            "name": "open_browser",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "open_browser._target": {
            "name": "_target",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pte-manager-master/pte/gcal/__init__.py": {},
    "pte-manager-master/pte/scrapers/core.py": {
        "register": {
            "name": "register",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "scraper": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "run_all": {
            "name": "run_all",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_scraper": {
            "name": "run_scraper",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "Union[int,str]",
                    "int"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "target": [
                    "str",
                    "Set[str]",
                    "Optional[str]",
                    "Type",
                    "None",
                    "Sequence[type]",
                    "Sequence[Type]"
                ],
                "source": [
                    "str",
                    "Sequence[str]",
                    "Union[dict,list]",
                    "Dict",
                    "Optional[Dict[str,str]]",
                    "List",
                    "Callable[[KT,VT],bool]",
                    "Dict[str,str]",
                    "None",
                    "Callable[KT,VT,bool]"
                ]
            }
        }
    },
    "pte-manager-master/pte/scrapers/eventbrite.py": {
        "scrape": {
            "name": "scrape",
            "location": 16,
            "return": [
                "Generator[(pte.events.Event, Any, None)]"
            ],
            "arguments": {}
        },
        "eventbrite_to_event": {
            "name": "eventbrite_to_event",
            "location": 33,
            "return": [
                "pte.events.Event"
            ],
            "arguments": {
                "ev_dict": [
                    "dict",
                    "Dict[str, Any]",
                    "datetime.datetime"
                ]
            }
        }
    },
    "pte-manager-master/pte/scrapers/facebook.py": {
        "EventsCatcher.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "int",
                    "str",
                    "bool"
                ],
                "page_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "semaphore": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "EventsCatcher.get_page_url": {
            "name": "get_page_url",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventsCatcher.on_response": {
            "name": "on_response",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "dict",
                    "Dict[str, Any]",
                    "requests.Response",
                    "bytes",
                    "requests.models.Response"
                ]
            }
        },
        "EventsCatcher.dict_to_event": {
            "name": "dict_to_event",
            "location": 97,
            "return": [
                "pte.events.Event"
            ],
            "arguments": {
                "self": [],
                "ev_dict": [
                    "Dict[str, Any]",
                    "dict",
                    "homeassistancore.Event",
                    "Type['Declared']",
                    "edp.journal.Event"
                ]
            }
        }
    },
    "pte-manager-master/pte/scrapers/ical.py": {
        "scrape": {
            "name": "scrape",
            "location": 11,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {}
        },
        "scrape_feed": {
            "name": "scrape_feed",
            "location": 16,
            "return": [
                "Generator[(pte.events.Event, Any, None)]"
            ],
            "arguments": {
                "feed_name": [
                    "str"
                ],
                "feed_url": [
                    "str",
                    "bytes",
                    "Dict"
                ]
            }
        }
    },
    "pte-manager-master/pte/scrapers/meetup.py": {
        "scrape": {
            "name": "scrape",
            "location": 12,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {}
        },
        "scrape_community": {
            "name": "scrape_community",
            "location": 17,
            "return": [
                "Generator[(pte.events.Event, Any, None)]"
            ],
            "arguments": {
                "community": [
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[cmk.utils.diagnostics.DiagnosticsOptionalParameters]",
                    "int",
                    "None"
                ]
            }
        }
    },
    "pte-manager-master/pte/scrapers/sapo.py": {
        "FootballSpider.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FootballSpider.scrape": {
            "name": "scrape",
            "location": 35,
            "return": [
                "Generator[(pte.events.MiscEvent, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FootballSpider.scrape_page": {
            "name": "scrape_page",
            "location": 48,
            "return": [
                "Generator[(pte.events.MiscEvent, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "page": []
            }
        }
    },
    "pte-manager-master/pte/scrapers/timeanddate.py": {
        "scrape": {
            "name": "scrape",
            "location": 12,
            "return": [
                "Generator[(pte.events.MiscEvent, Any, None)]"
            ],
            "arguments": {}
        }
    },
    "pte-manager-master/pte/scrapers/__init__.py": {}
}
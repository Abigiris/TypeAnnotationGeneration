{
    "puzzle-master/art_generation/art_generation.py": {
        "compute_content_cost": {
            "name": "compute_content_cost",
            "location": 9,
            "return": [],
            "arguments": {
                "a_C": [],
                "a_G": []
            }
        },
        "gram_matrix": {
            "name": "gram_matrix",
            "location": 34,
            "return": [],
            "arguments": {
                "A": []
            }
        },
        "compute_layer_style_cost": {
            "name": "compute_layer_style_cost",
            "location": 46,
            "return": [
                "int"
            ],
            "arguments": {
                "a_S": [],
                "a_G": []
            }
        },
        "test_compute_content_cost": {
            "name": "test_compute_content_cost",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gram_matrix": {
            "name": "test_gram_matrix",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "puzzle-master/cat_classifier/cat_classifier.py": {
        "load_dataset": {
            "name": "load_dataset",
            "location": 9,
            "return": [
                "Tuple[(np.ndarray, Any, np.ndarray, Any, np.ndarray)]"
            ],
            "arguments": {}
        },
        "test_propagate": {
            "name": "test_propagate",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "sigmoid": {
            "name": "sigmoid",
            "location": 39,
            "return": [
                "int"
            ],
            "arguments": {
                "z": []
            }
        },
        "initialize_with_zeros": {
            "name": "initialize_with_zeros",
            "location": 53,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "dimention": []
            }
        },
        "propagate": {
            "name": "propagate",
            "location": 70,
            "return": [
                "Tuple[(Dict[(str, Any)], Any)]"
            ],
            "arguments": {
                "w": [],
                "b": [],
                "X": [],
                "Y": []
            }
        },
        "optimize": {
            "name": "optimize",
            "location": 110,
            "return": [
                "Tuple[(Dict[(str, Any)], Dict[(str, Any)], list)]"
            ],
            "arguments": {
                "w": [],
                "b": [],
                "X": [],
                "Y": [],
                "num_iterations": [],
                "learning_rate": [],
                "print_cost": [
                    "bool"
                ]
            }
        },
        "predict": {
            "name": "predict",
            "location": 161,
            "return": [],
            "arguments": {
                "w": [],
                "b": [],
                "X": []
            }
        },
        "model": {
            "name": "model",
            "location": 191,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "X_train": [],
                "Y_train": [],
                "X_test": [],
                "Y_test": [],
                "num_iterations": [
                    "int"
                ],
                "learning_rate": [
                    "float"
                ],
                "print_cost": [
                    "bool"
                ]
            }
        }
    },
    "puzzle-master/dinosaurus/dinosaurus.py": {
        "sample": {
            "name": "sample",
            "location": 10,
            "return": [
                "list"
            ],
            "arguments": {
                "parameters": [],
                "char_to_ix": [],
                "seed": []
            }
        },
        "clip": {
            "name": "clip",
            "location": 54,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "gradients": [],
                "maxValue": []
            }
        },
        "optimize": {
            "name": "optimize",
            "location": 79,
            "return": [
                "Tuple[(Any, Dict[(str, Any)], Any)]"
            ],
            "arguments": {
                "X": [],
                "Y": [],
                "a_prev": [],
                "parameters": [],
                "learning_rate": [
                    "float"
                ]
            }
        },
        "model": {
            "name": "model",
            "location": 125,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "data": [],
                "ix_to_char": [],
                "char_to_ix": [],
                "num_iterations": [
                    "int"
                ],
                "n_a": [
                    "int"
                ],
                "dino_names": [
                    "int"
                ],
                "vocab_size": [
                    "int"
                ]
            }
        },
        "test_sample": {
            "name": "test_sample",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_optimise": {
            "name": "test_optimise",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "puzzle-master/dinosaurus/utils.py": {
        "softmax": {
            "name": "softmax",
            "location": 4,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "Union[pandas.Series, numpy.ndarray]"
                ]
            }
        },
        "smooth": {
            "name": "smooth",
            "location": 9,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "loss": [
                    "List[int]",
                    "list",
                    "List[List[int]]"
                ],
                "cur_loss": [
                    "List[int]",
                    "list",
                    "List[List[int]]"
                ]
            }
        },
        "print_sample": {
            "name": "print_sample",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_ix": [
                    "list[str]",
                    "list[tuple[typing.Union[int,int]]]",
                    "List[str]",
                    "str",
                    "List[Tuple[int, int]]",
                    "Union[str, List[str]]",
                    "int"
                ],
                "ix_to_char": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "list[tuple[typing.Union[int,int]]]",
                    "List[Tuple[int, int]]",
                    "Union[str, List[str]]",
                    "int"
                ]
            }
        },
        "get_initial_loss": {
            "name": "get_initial_loss",
            "location": 19,
            "return": [
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "vocab_size": [
                    "int"
                ],
                "seq_length": [
                    "int"
                ]
            }
        },
        "initialize_parameters": {
            "name": "initialize_parameters",
            "location": 23,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "n_a": [
                    "int",
                    "str",
                    "float",
                    "Union[float, int]",
                    "tuple[typing.Union[float,float]]",
                    "bool",
                    "Tuple[float, float]"
                ],
                "n_x": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Union[float, int]",
                    "float"
                ],
                "n_y": [
                    "int",
                    "List[int]",
                    "list[int]",
                    "list",
                    "list[]"
                ]
            }
        },
        "rnn_step_forward": {
            "name": "rnn_step_forward",
            "location": 47,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "parameters": [
                    "bool",
                    "slice",
                    "float",
                    "int"
                ],
                "a_prev": [
                    "Tuple[float, float]",
                    "float",
                    "tuple[typing.Union[float,float]]"
                ],
                "x": [
                    "Tuple[float, float]",
                    "float",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "rnn_step_backward": {
            "name": "rnn_step_backward",
            "location": 64,
            "return": [
                "_T1"
            ],
            "arguments": {
                "dy": [
                    "dict[str, typing.Any]",
                    "numpy.ndarray",
                    "Dict[str, Any]"
                ],
                "gradients": [
                    "_T1"
                ],
                "parameters": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Union[int, float]"
                ],
                "x": [
                    "int",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "numpy.array",
                    "Tuple[float, float]",
                    "bool"
                ],
                "a": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "Callable[[str], float]"
                ],
                "a_prev": [
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "update_parameters": {
            "name": "update_parameters",
            "location": 77,
            "return": [
                "_T0"
            ],
            "arguments": {
                "parameters": [
                    "_T0"
                ],
                "gradients": [],
                "lr": []
            }
        },
        "rnn_forward": {
            "name": "rnn_forward",
            "location": 87,
            "return": [
                "Tuple[(Any, Tuple[(Dict[(int, Any)], Dict[(int, Any)], Dict[(int, Any)])])]"
            ],
            "arguments": {
                "X": [
                    "int",
                    "Optional[int]",
                    "numpy.ndarray",
                    "tuple",
                    "str"
                ],
                "Y": [
                    "int",
                    "bytes",
                    "str",
                    "float"
                ],
                "a0": [
                    "str",
                    "int",
                    "float",
                    "Optional[List[int]]",
                    "list[int]",
                    "Iterable[T]",
                    "None"
                ],
                "parameters": [
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "vocab_size": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "rnn_backward": {
            "name": "rnn_backward",
            "location": 116,
            "return": [
                "Tuple[(Dict[(str, Any)], Any)]"
            ],
            "arguments": {
                "X": [
                    "int",
                    "str",
                    "numpy.ndarray",
                    "list",
                    "bool"
                ],
                "Y": [
                    "int",
                    "numpy.ndarray",
                    "T",
                    "bool",
                    "numpy.array"
                ],
                "parameters": [
                    "int",
                    "bool",
                    "float",
                    "slice"
                ],
                "cache": [
                    "float",
                    "int",
                    "Mapping[str, float]",
                    "typing.Mapping"
                ]
            }
        }
    },
    "puzzle-master/energy_consumption/process_time_series.py": {
        "valid_date": {
            "name": "valid_date",
            "location": 12,
            "return": [
                "datetime.datetime",
                "pandas.DataFrame"
            ],
            "arguments": {
                "date": [
                    "str"
                ]
            }
        },
        "argument_parser": {
            "name": "argument_parser",
            "location": 23,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "None",
                    "Optional[List[str]]",
                    "list[str]"
                ]
            }
        }
    },
    "puzzle-master/energy_consumption/resampling.py": {
        "argument_parser": {
            "name": "argument_parser",
            "location": 8,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "None",
                    "Optional[List[str]]",
                    "list[str]"
                ]
            }
        }
    },
    "puzzle-master/energy_consumption/split_plot.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "puzzle-master/page_rank/page_rank.py": {
        "test_page_rank_fast": {
            "name": "test_page_rank_fast",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "damping": []
            }
        },
        "page_rank_fast": {
            "name": "page_rank_fast",
            "location": 38,
            "return": [],
            "arguments": {
                "link_matrix": [],
                "damping": [
                    "float"
                ]
            }
        },
        "page_rank": {
            "name": "page_rank",
            "location": 57,
            "return": [],
            "arguments": {
                "link_matrix": [],
                "damping": [
                    "float"
                ]
            }
        }
    },
    "puzzle-master/possible_path/possible_path.py": {
        "test_possible_path": {
            "name": "test_possible_path",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "m": [
                    "str"
                ],
                "n": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "possible_path": {
            "name": "possible_path",
            "location": 43,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "m": [
                    "int",
                    "Set[int]",
                    "str",
                    "bytes"
                ],
                "n": [
                    "int",
                    "Set[int]",
                    "str",
                    "bytes"
                ]
            }
        },
        "possible_path_memorized": {
            "name": "possible_path_memorized",
            "location": 49,
            "return": [
                "int",
                "dict[, ]",
                "str",
                "dict[str, typing.Any]",
                "Union[Dict[str, Any], List[Any]]",
                "List[str]"
            ],
            "arguments": {
                "m": [
                    "int",
                    "float",
                    "str",
                    "List[bytes]",
                    "bytes",
                    "Union[str, int]"
                ],
                "n": [
                    "int",
                    "float",
                    "str",
                    "List[bytes]",
                    "bytes",
                    "Union[str, int]"
                ],
                "solutions": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_possible_path_without_full_access": {
            "name": "test_possible_path_without_full_access",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "m": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "possible_path_without_full_access": {
            "name": "possible_path_without_full_access",
            "location": 79,
            "return": [
                "int",
                "str",
                "dict",
                "Callable"
            ],
            "arguments": {
                "m": [
                    "List[List[int]]"
                ]
            }
        },
        "possible_path_without_full_access_memorized": {
            "name": "possible_path_without_full_access_memorized",
            "location": 94,
            "return": [
                "int",
                "str",
                "bool",
                "List[bytes]",
                "Callable",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "m": [
                    "List[List[int]]"
                ],
                "solutions": [
                    "Optional[dict]"
                ]
            }
        }
    }
}
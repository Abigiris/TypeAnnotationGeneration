{
    "py-geode-master/samples.py": {},
    "py-geode-master/sample_dmatrix.py": {},
    "py-geode-master/sample_geocode.py": {
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "py-geode-master/sample_geocode2.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "py-geode-master/sample_large_matrix.py": {
        "main": {
            "name": "main",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "py-geode-master/sample_pairs.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "py-geode-master/setup.py": {},
    "py-geode-master/sync_samples.py": {
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "py-geode-master/geode/cache.py": {
        "CREATE_DISTANCE_TABLE": {
            "name": "CREATE_DISTANCE_TABLE",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "provider": [
                    "str",
                    "Type[T]",
                    "typing.Type"
                ]
            }
        },
        "CREATE_DISTANCE_TABLE_TEMP": {
            "name": "CREATE_DISTANCE_TABLE_TEMP",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "provider": [
                    "bool",
                    "str",
                    "int",
                    "list[tuple[typing.Union[str,str,str,str]]]",
                    "List[Tuple[str, str, str, str]]"
                ]
            }
        },
        "MERGE_DISTANCES": {
            "name": "MERGE_DISTANCES",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "provider": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "GET_DISTANCES": {
            "name": "GET_DISTANCES",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "provider": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "origins": [
                    "str",
                    "Optional[str]"
                ],
                "destinations": [
                    "str",
                    "Optional[str]"
                ],
                "pair": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        }
    },
    "py-geode-master/geode/config.py": {
        "path_constructor": {
            "name": "path_constructor",
            "location": 8,
            "return": [
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "Optional[bool]",
                "int"
            ],
            "arguments": {
                "loader": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "node": [
                    "typing.Sequence[typing.Any]",
                    "yaml.nodes.Node",
                    "Sequence[Any]"
                ]
            }
        }
    },
    "py-geode-master/geode/dispatcher.py": {
        "AsyncDispatcher.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "sphinx.config.Config",
                    "pyramid.config.Configurator"
                ]
            }
        },
        "Dispatcher.__init__": {
            "name": "__init__",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "None",
                    "raiden.utils.Callable",
                    "typing.Mapping",
                    "cmk.base.config.HostConfig",
                    "Mapping[str, Any]"
                ],
                "threaded": [
                    "bool",
                    "Dict[str, Any]",
                    "config.Config",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Dispatcher.run": {
            "name": "run",
            "location": 286,
            "return": [
                "str",
                "List[str]",
                "list",
                "int"
            ],
            "arguments": {
                "self": [],
                "coro": [
                    "str",
                    "int",
                    "pandas.DataFrame"
                ]
            }
        },
        "Dispatcher.distance_matrix": {
            "name": "distance_matrix",
            "location": 310,
            "return": [
                "int",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "origins": [
                    "int",
                    "raiden.utils.Signature",
                    "bool",
                    "raiden.utils.Nonce",
                    "raiden.utils.AdditionalHash",
                    "raiden.utils.BlockSpecification",
                    "raiden.utils.BalanceHash"
                ],
                "destinations": [
                    "int",
                    "raiden.utils.Signature",
                    "bool",
                    "raiden.utils.Nonce",
                    "raiden.utils.AdditionalHash",
                    "raiden.utils.BlockSpecification",
                    "raiden.utils.BalanceHash"
                ],
                "max_meters": [
                    "int",
                    "raiden.utils.Signature",
                    "bool",
                    "raiden.utils.Nonce",
                    "raiden.utils.AdditionalHash",
                    "raiden.utils.BlockSpecification",
                    "raiden.utils.BalanceHash"
                ],
                "provider": [
                    "None",
                    "int",
                    "raiden.utils.Signature",
                    "bool",
                    "raiden.utils.Nonce",
                    "raiden.utils.AdditionalHash",
                    "raiden.utils.BlockSpecification",
                    "raiden.utils.BalanceHash"
                ],
                "return_inverse": [
                    "bool",
                    "int",
                    "raiden.utils.Signature",
                    "raiden.utils.Nonce",
                    "raiden.utils.AdditionalHash",
                    "raiden.utils.BlockSpecification",
                    "raiden.utils.BalanceHash"
                ]
            }
        },
        "Dispatcher.distance_pairs": {
            "name": "distance_pairs",
            "location": 323,
            "return": [
                "int",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "origins": [
                    "int",
                    "raiden.utils.Signature",
                    "bool",
                    "raiden.utils.Nonce",
                    "raiden.utils.AdditionalHash",
                    "raiden.utils.BlockSpecification",
                    "raiden.utils.BalanceHash"
                ],
                "destinations": [
                    "int",
                    "raiden.utils.Signature",
                    "bool",
                    "raiden.utils.Nonce",
                    "raiden.utils.AdditionalHash",
                    "raiden.utils.BlockSpecification",
                    "raiden.utils.BalanceHash"
                ],
                "max_meters": [
                    "int",
                    "raiden.utils.Signature",
                    "bool",
                    "raiden.utils.Nonce",
                    "raiden.utils.AdditionalHash",
                    "raiden.utils.BlockSpecification",
                    "raiden.utils.BalanceHash"
                ],
                "provider": [
                    "None",
                    "int",
                    "raiden.utils.Signature",
                    "bool",
                    "raiden.utils.Nonce",
                    "raiden.utils.AdditionalHash",
                    "raiden.utils.BlockSpecification",
                    "raiden.utils.BalanceHash"
                ],
                "return_inverse": [
                    "bool",
                    "int",
                    "raiden.utils.Signature",
                    "raiden.utils.Nonce",
                    "raiden.utils.AdditionalHash",
                    "raiden.utils.BlockSpecification",
                    "raiden.utils.BalanceHash"
                ]
            }
        },
        "Dispatcher.batch_geocode": {
            "name": "batch_geocode",
            "location": 328,
            "return": [
                "int",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "addresses": [
                    "int",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ],
                "provider": [
                    "int",
                    "None",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "Dispatcher.geocode": {
            "name": "geocode",
            "location": 333,
            "return": [
                "float",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "str",
                    "pandas._ArrayLike",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]"
                ],
                "provider": [
                    "int",
                    "None",
                    "str",
                    "pandas._ArrayLike",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "py-geode-master/geode/dist_metrics.py": {
        "haversine": {
            "name": "haversine",
            "location": 7,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "u": [
                    "int",
                    "numpy.ndarray"
                ],
                "v": [
                    "typing.Callable[T,T, T]",
                    "Callable[[T, T], T]",
                    "T"
                ],
                "r": [
                    "int",
                    "str",
                    "list",
                    "float"
                ]
            }
        },
        "gc_manhattan": {
            "name": "gc_manhattan",
            "location": 18,
            "return": [
                "str",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "u": [
                    "int"
                ],
                "v": [
                    "int"
                ],
                "r": [
                    "int",
                    "bool",
                    "list"
                ]
            }
        }
    },
    "py-geode-master/geode/utils.py": {
        "point_to_str": {
            "name": "point_to_str",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "point": [
                    "np.ndarray"
                ],
                "precision": [
                    "int",
                    "str",
                    "Union[int, float]",
                    "List[int]"
                ]
            }
        },
        "create_dist_index": {
            "name": "create_dist_index",
            "location": 21,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "origins": [
                    "bool",
                    "pandas.DataFrame"
                ],
                "destinations": [
                    "bool",
                    "pandas.DataFrame"
                ]
            }
        },
        "grouper": {
            "name": "grouper",
            "location": 31,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "dict[, ]",
                    "dict",
                    "bool"
                ],
                "n": [
                    "int",
                    "dict",
                    "bool"
                ],
                "fillvalue": [
                    "int",
                    "None",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "marshall_to": {
            "name": "marshall_to",
            "location": 45,
            "return": [
                "bool",
                "None",
                "str",
                "list[]",
                "int",
                "dict[, ]",
                "dict",
                "bytearray",
                "Dict[str, numpy.ndarray]"
            ],
            "arguments": {
                "cls": [
                    "list[dict[, ]]",
                    "List[dict]",
                    "bytearray",
                    "str",
                    "dict"
                ],
                "data": [
                    "Optional[Any]",
                    "typing.Any",
                    "dataclasses.Field",
                    "None",
                    "bool",
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "addresses_to_df": {
            "name": "addresses_to_df",
            "location": 81,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "addresses": [
                    "bytes",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "first_or_none": {
            "name": "first_or_none",
            "location": 90,
            "return": [],
            "arguments": {
                "arr": [
                    "AsyncGenerator",
                    "bool",
                    "collections.abc.AsyncGenerator",
                    "str",
                    "list",
                    "list[]",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "UnionParseException.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wrapped": [
                    "Exception"
                ]
            }
        }
    },
    "py-geode-master/geode/__init__.py": {},
    "py-geode-master/geode/google/client.py": {
        "is_over_query_limit": {
            "name": "is_over_query_limit",
            "location": 15,
            "return": [
                "bool",
                "int",
                "fastapi.openapi.models.OAuthFlows",
                "Optional[str]",
                "str",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Exception",
                    "audiopyle.lib.models.resulFeatureMeta",
                    "dict[, ]",
                    "deeplearning.ml4pl.models.classifier_base.ClassifierBase",
                    "dict"
                ]
            }
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "typing.Text",
                    "bool",
                    "int",
                    "str"
                ],
                "base_url": [
                    "typing.Text",
                    "str",
                    "Container[str]"
                ],
                "key": [
                    "typing.Text",
                    "annofabapi.models.JobType",
                    "str",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]"
                ],
                "area_max": [
                    "int",
                    "bool",
                    "str"
                ],
                "factor_max": [
                    "int",
                    "bool",
                    "str"
                ],
                "geocode_retry": [
                    "bool",
                    "int",
                    "str"
                ],
                "matrix_retry": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        }
    },
    "py-geode-master/geode/google/distance_matrix.py": {
        "map_from_elm": {
            "name": "map_from_elm",
            "location": 9,
            "return": [
                "Optional[Tuple[(int, int)]]"
            ],
            "arguments": {
                "elm": [
                    "geode.google.models.GoogleDistanceElement"
                ]
            }
        },
        "map_from_distance_matrix_response": {
            "name": "map_from_distance_matrix_response",
            "location": 18,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "response": [
                    "geode.google.models.GoogleDistanceMatrixResponse"
                ]
            }
        }
    },
    "py-geode-master/geode/google/geocoding.py": {
        "map_from_address_components": {
            "name": "map_from_address_components",
            "location": 7,
            "return": [
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "components": [
                    "List[geode.google.models.GoogleAddressComponent]"
                ]
            }
        },
        "latlng_to_point": {
            "name": "latlng_to_point",
            "location": 33,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "latlng": [
                    "geode.google.models.GooglePoint"
                ]
            }
        },
        "map_from_address": {
            "name": "map_from_address",
            "location": 37,
            "return": [
                "typing.Pattern",
                "str",
                "Callable",
                "Tuple[Sequence]",
                "Dict[str, Any]",
                "Tuple[int, List[int]]"
            ],
            "arguments": {
                "address": [
                    "geode.google.models.GoogleAddress"
                ]
            }
        }
    },
    "py-geode-master/geode/google/models.py": {},
    "py-geode-master/geode/google/__init__.py": {},
    "py-geode-master/geode/models/common.py": {},
    "py-geode-master/geode/models/distance_matrix.py": {
        "partition": {
            "name": "partition",
            "location": 66,
            "return": [
                "Partition"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "partition_matrix": {
            "name": "partition_matrix",
            "location": 77,
            "return": [
                "Iterator[MatrixIterBlock]"
            ],
            "arguments": {
                "xlen": [
                    "int"
                ],
                "ylen": [
                    "int"
                ],
                "area_max": [
                    "int"
                ],
                "factor_max": [
                    "int"
                ]
            }
        },
        "Partition.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Partition.__get__": {
            "name": "__get__",
            "location": 29,
            "return": [
                "functools.partial"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "int",
                    "str",
                    "float",
                    "bytes",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "owner": [
                    "typing.Type",
                    "Type['Signature']",
                    "Type[Any]"
                ]
            }
        }
    },
    "py-geode-master/geode/models/distance_matrix_test.py": {
        "show_matrix": {
            "name": "show_matrix",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "y": [
                    "int",
                    "float",
                    "bool",
                    "Union[int, float]"
                ],
                "x": [
                    "int",
                    "float",
                    "bool",
                    "Union[int, float]"
                ],
                "blocks": [
                    "dict[str, typing.Any]",
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_partition_matrix_area_full": {
            "name": "test_partition_matrix_area_full",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_partition_matrix_area_full_row": {
            "name": "test_partition_matrix_area_full_row",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_partition_matrix_area_incomplete_row": {
            "name": "test_partition_matrix_area_incomplete_row",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_partition_matrix_area_col": {
            "name": "test_partition_matrix_area_col",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "py-geode-master/geode/models/geocoding.py": {},
    "py-geode-master/geode/models/__init__.py": {},
    "py-geode-master/geode/smarty/client.py": {},
    "py-geode-master/geode/smarty/geocoding.py": {
        "from_address_components": {
            "name": "from_address_components",
            "location": 5,
            "return": [
                "List[str]",
                "int",
                "str"
            ],
            "arguments": {
                "c": [
                    "geode.smarty.models.SmartyComponents"
                ]
            }
        },
        "from_response": {
            "name": "from_response",
            "location": 16,
            "return": [
                "typing.Pattern",
                "bool",
                "str",
                "Callable[[Any], bool]",
                "Optional[zerver.models.Realm]",
                "List[int]"
            ],
            "arguments": {
                "resp": [
                    "geode.smarty.models.SmartyGeocodingResponse"
                ]
            }
        }
    },
    "py-geode-master/geode/smarty/models.py": {},
    "py-geode-master/geode/smarty/__init__.py": {},
    "py-geode-master/tests/conftest.py": {
        "mock_server": {
            "name": "mock_server",
            "location": 29,
            "return": [
                "",
                "typing.Generator[MockServer]"
            ],
            "arguments": {}
        },
        "test_client_config": {
            "name": "test_client_config",
            "location": 36,
            "return": [
                "dict[typing.Text, dict[typing.Text, dict[typing.Text, typing.Text]]]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "MockServer.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockServer.reset": {
            "name": "reset",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockServer.step": {
            "name": "step",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "str",
                    "int",
                    "Union[int, str]",
                    "Tuple[()]",
                    "tuple[()]",
                    "typing.Callable[..., None]",
                    "bool",
                    "Callable[..., None]"
                ]
            }
        },
        "MockServer.__del__": {
            "name": "__del__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-geode-master/tests/test_distance_matrix.py": {
        "test_main": {
            "name": "test_main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_server": [
                    "str"
                ],
                "test_client_config": []
            }
        },
        "test_pairs": {
            "name": "test_pairs",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_server": [],
                "test_client_config": []
            }
        }
    },
    "py-geode-master/tests/test_distance_rows.py": {},
    "py-geode-master/tests/test_partition.py": {
        "test_main": {
            "name": "test_main",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_server": [
                    "str"
                ],
                "test_client_config": []
            }
        },
        "test_square": {
            "name": "test_square",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_server": []
            }
        }
    },
    "py-geode-master/tests/test_simple_matrix.py": {
        "test_main": {
            "name": "test_main",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_server": [
                    "str"
                ],
                "test_client_config": []
            }
        }
    },
    "py-geode-master/tests/__init__.py": {}
}
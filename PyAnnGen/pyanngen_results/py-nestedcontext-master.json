{
    "py-nestedcontext-master/setup.py": {},
    "py-nestedcontext-master/src/nestedcontext/context.py": {
        "ContextScope.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextScope.lookup": {
            "name": "lookup",
            "location": 9,
            "return": [
                "Tuple[(bool, Any)]"
            ],
            "arguments": {
                "self": [],
                "variablename": [
                    "str"
                ]
            }
        },
        "ContextStack.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextStack.get_contextstack": {
            "name": "get_contextstack",
            "location": 23,
            "return": [
                "ContextStack"
            ],
            "arguments": {
                "stackname": [
                    "Optional[str]"
                ]
            }
        },
        "ContextStack.enter": {
            "name": "enter",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contextscope": [
                    "ContextScope"
                ]
            }
        },
        "ContextStack.exit": {
            "name": "exit",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contextscope": [
                    "ContextScope"
                ]
            }
        },
        "ContextStack.lookup": {
            "name": "lookup",
            "location": 32,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "variablename": [
                    "str"
                ]
            }
        }
    },
    "py-nestedcontext-master/src/nestedcontext/__init__.py": {
        "bind": {
            "name": "bind",
            "location": 8,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "stackname": [
                    "str",
                    "int",
                    "None"
                ],
                "raise_on_conflicts": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ],
                "skip_on_conflicts": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "inject": {
            "name": "inject",
            "location": 48,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "variablename": [
                    "int",
                    "str",
                    "Sequence[T]",
                    "typing.Sequence[T]",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "stackname": [
                    "bool",
                    "str",
                    "None",
                    "bytes"
                ],
                "default": [
                    "int",
                    "str",
                    "Sequence[T]",
                    "List[List[int]]"
                ]
            }
        }
    },
    "py-nestedcontext-master/tests/test_nestedscope.py": {
        "TestNestedScope.test_simplecontext": {
            "name": "test_simplecontext",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNestedScope.test_context_names": {
            "name": "test_context_names",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNestedScope.test_nestedcontext": {
            "name": "test_nestedcontext",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNestedScope.test_nestedcontext_raise_on_conflicts": {
            "name": "test_nestedcontext_raise_on_conflicts",
            "location": 47,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNestedScope.test_nestedcontext_skip_on_conflicts": {
            "name": "test_nestedcontext_skip_on_conflicts",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-nestedcontext-master/tests/__init__.py": {}
}
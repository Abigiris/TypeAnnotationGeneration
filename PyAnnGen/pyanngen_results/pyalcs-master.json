{
    "pyalcs-master/setup.py": {},
    "pyalcs-master/docs/source/conf.py": {},
    "pyalcs-master/lcs/metrics.py": {
        "basic_metrics": {
            "name": "basic_metrics",
            "location": 1,
            "return": [
                "Dict[(str, Union[(float, int)])]"
            ],
            "arguments": {
                "trial": [
                    "int"
                ],
                "steps": [
                    "int"
                ],
                "reward": [
                    "int"
                ],
                "time": [
                    "float"
                ]
            }
        },
        "population_metrics": {
            "name": "population_metrics",
            "location": 10,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "population": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "environment": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "pyalcs-master/lcs/Perception.py": {
        "Perception.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "observation": [
                    "list[str]",
                    "Sequence[Sequence[str]]",
                    "List[str]"
                ],
                "oktypes": [
                    "tuple[str]",
                    "str",
                    "BaseException",
                    "Type[Any]",
                    "Exception"
                ]
            }
        },
        "Perception.empty": {
            "name": "empty",
            "location": 17,
            "return": [
                "Perception"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPerception]"
                ]
            }
        },
        "Perception.__hash__": {
            "name": "__hash__",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Perception.__getitem__": {
            "name": "__getitem__",
            "location": 23,
            "return": [
                "str",
                "int",
                "Union[str, Pattern]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "Iterator",
                    "typing.Iterator"
                ]
            }
        },
        "Perception.__len__": {
            "name": "__len__",
            "location": 26,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Perception.__repr__": {
            "name": "__repr__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Perception.__eq__": {
            "name": "__eq__",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[int, int, int]",
                    "tuple[typing.Union[int,int,int]]",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        }
    },
    "pyalcs-master/lcs/TypedList.py": {
        "TypedList.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypedList.insert": {
            "name": "insert",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ],
                "o": [
                    "T"
                ]
            }
        },
        "TypedList.safe_remove": {
            "name": "safe_remove",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "T"
                ]
            }
        },
        "TypedList.sort": {
            "name": "sort",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypedList.__iter__": {
            "name": "__iter__",
            "location": 34,
            "return": [
                "Iterator[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypedList.__repr__": {
            "name": "__repr__",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypedList.__setitem__": {
            "name": "__setitem__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ],
                "o": [
                    "T"
                ]
            }
        },
        "TypedList.__delitem__": {
            "name": "__delitem__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "Iterator",
                    "typing.Iterator"
                ]
            }
        },
        "TypedList.__getitem__": {
            "name": "__getitem__",
            "location": 47,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "Iterator",
                    "typing.Iterator"
                ]
            }
        },
        "TypedList.__len__": {
            "name": "__len__",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypedList.__hash__": {
            "name": "__hash__",
            "location": 53,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypedList.__eq__": {
            "name": "__eq__",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "str",
                    "BaseException"
                ]
            }
        }
    },
    "pyalcs-master/lcs/utils.py": {
        "check_types": {
            "name": "check_types",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {
                "oktypes": [
                    "str",
                    "int"
                ],
                "o": [
                    "str"
                ]
            }
        }
    },
    "pyalcs-master/lcs/__init__.py": {},
    "pyalcs-master/lcs/agents/Agent.py": {
        "Agent._run_trial_explore": {
            "name": "_run_trial_explore",
            "location": 21,
            "return": [
                "TrialMetrics"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "trials": [],
                "current_trial": []
            }
        },
        "Agent._run_trial_exploit": {
            "name": "_run_trial_exploit",
            "location": 24,
            "return": [
                "TrialMetrics"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "trials": [],
                "current_trial": []
            }
        },
        "Agent.get_population": {
            "name": "get_population",
            "location": 27,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.get_cfg": {
            "name": "get_cfg",
            "location": 30,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.explore": {
            "name": "explore",
            "location": 33,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "None"
                ],
                "trials": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "None"
                ],
                "decay": [
                    "bool"
                ]
            }
        },
        "Agent.exploit": {
            "name": "exploit",
            "location": 53,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "None"
                ],
                "trials": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "Agent.explore_exploit": {
            "name": "explore_exploit",
            "location": 72,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "type",
                    "typing.Type"
                ],
                "trials": [
                    "str",
                    "type",
                    "typing.Type"
                ]
            }
        },
        "Agent._evaluate": {
            "name": "_evaluate",
            "location": 97,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool",
                    "list[str]",
                    "str",
                    "int",
                    "numpy.ndarray",
                    "List[str]"
                ],
                "n_trials": [
                    "int"
                ],
                "func": [
                    "Callable"
                ],
                "decay": [
                    "bool"
                ]
            }
        },
        "Agent.explore_exploit.switch_phases": {
            "name": "switch_phases",
            "location": 89,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "env": [
                    "Dict[str, str]",
                    "str"
                ],
                "steps": [
                    "str",
                    "type"
                ],
                "current_trial": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/EnvironmentAdapter.py": {
        "EnvironmentAdapter.to_lcs_action": {
            "name": "to_lcs_action",
            "location": 19,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "env_action": [
                    "_T0"
                ]
            }
        },
        "EnvironmentAdapter.to_genotype": {
            "name": "to_genotype",
            "location": 26,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "phenotype": [
                    "_T0"
                ]
            }
        },
        "EnvironmentAdapter.to_env_action": {
            "name": "to_env_action",
            "location": 33,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "lcs_action": [
                    "_T0"
                ]
            }
        },
        "EnvironmentAdapter.to_phenotype": {
            "name": "to_phenotype",
            "location": 40,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "genotype": [
                    "_T0"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/ImmutableSequence.py": {
        "ImmutableSequence.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "observation": [
                    "str",
                    "Optional[Iterable[str]]",
                    "List[Dict]",
                    "int",
                    "Union[List[str], str]",
                    "Sequence['cirq.Qid']"
                ]
            }
        },
        "ImmutableSequence.empty": {
            "name": "empty",
            "location": 18,
            "return": [
                "ImmutableSequence"
            ],
            "arguments": {
                "cls": [
                    "Type[_TImmutableSequence]"
                ],
                "length": [
                    "int"
                ]
            }
        },
        "ImmutableSequence.subsumes": {
            "name": "subsumes",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "list[str]",
                    "List[str]",
                    "int",
                    "Union[int, float]",
                    "float",
                    "AbstractSet[T]",
                    "typing.AbstractSet"
                ]
            }
        },
        "ImmutableSequence.__iter__": {
            "name": "__iter__",
            "location": 38,
            "return": [
                "tupleiterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableSequence.__len__": {
            "name": "__len__",
            "location": 41,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableSequence.__getitem__": {
            "name": "__getitem__",
            "location": 44,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ImmutableSequence.__setitem__": {
            "name": "__setitem__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "list",
                    "float",
                    "List[str]"
                ],
                "value": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional['ModelOrDc']",
                    "None",
                    "int",
                    "list",
                    "list[]",
                    "Optional[Sequence[T]]",
                    "typing.Sequence[T]"
                ]
            }
        },
        "ImmutableSequence.__eq__": {
            "name": "__eq__",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Hashable",
                    "typing.Hashable",
                    "Union[int, float]",
                    "int",
                    "float"
                ]
            }
        },
        "ImmutableSequence.__hash__": {
            "name": "__hash__",
            "location": 57,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableSequence.__repr__": {
            "name": "__repr__",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/lcs/agents/PerceptionString.py": {
        "PerceptionString.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "observation": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[A, bool]"
                ],
                "wildcard": [
                    "typing.Text",
                    "int",
                    "bool",
                    "float"
                ],
                "oktypes": [
                    "tuple[str]",
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "PerceptionString.empty": {
            "name": "empty",
            "location": 17,
            "return": [
                "PerceptionString"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPerceptionString]"
                ],
                "length": [
                    "int"
                ],
                "wildcard": [
                    "typing.Text",
                    "int",
                    "List[int]",
                    "Tuple[float, float]"
                ],
                "oktypes": [
                    "Tuple[Any]"
                ]
            }
        },
        "PerceptionString.subsumes": {
            "name": "subsumes",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "list[str]",
                    "List[str]",
                    "int",
                    "Union[int, float]",
                    "float",
                    "AbstractSet[T]",
                    "typing.AbstractSet"
                ]
            }
        },
        "PerceptionString.__eq__": {
            "name": "__eq__",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Hashable",
                    "typing.Hashable",
                    "Union[int, float]",
                    "int",
                    "float"
                ]
            }
        },
        "PerceptionString.__repr__": {
            "name": "__repr__",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/lcs/agents/__init__.py": {},
    "pyalcs-master/lcs/agents/aacs2/AACS2.py": {
        "AACS2.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int",
                    "float",
                    "bool"
                ],
                "estimated_average_reward": [
                    "float"
                ],
                "population": [
                    "lcs.agents.acs2.ClassifiersList.ClassifiersList"
                ]
            }
        },
        "AACS2.get_population": {
            "name": "get_population",
            "location": 26,
            "return": [
                "lcs.agents.acs2.ClassifiersList.ClassifiersList"
            ],
            "arguments": {
                "self": []
            }
        },
        "AACS2.get_cfg": {
            "name": "get_cfg",
            "location": 29,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AACS2._run_trial_explore": {
            "name": "_run_trial_explore",
            "location": 32,
            "return": [
                "Agent.TrialMetrics"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Iterable[str]"
                ],
                "time": [
                    "list",
                    "bool",
                    "list[]"
                ],
                "current_trial": [
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "AACS2._run_trial_exploit": {
            "name": "_run_trial_exploit",
            "location": 129,
            "return": [
                "Agent.TrialMetrics"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "time": [
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "current_trial": [
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "AACS2.apply_reinforcement_learning": {
            "name": "apply_reinforcement_learning",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action_set": [
                    "lcs.agents.acs2.ClassifiersList.ClassifiersList"
                ],
                "reward": [
                    "int"
                ],
                "p0": [
                    "float"
                ],
                "p1": [
                    "float"
                ],
                "was_greedy": [
                    "bool"
                ]
            }
        },
        "AACS2._epsilon_greedy": {
            "name": "_epsilon_greedy",
            "location": 193,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "self": [],
                "match_set": [
                    "lcs.agents.acs2.ClassifiersList.ClassifiersList"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/aacs2/Configuration.py": {
        "Configuration.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.__str__": {
            "name": "__str__",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/lcs/agents/aacs2/__init__.py": {},
    "pyalcs-master/lcs/agents/acs/ACS.py": {
        "ACS.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int",
                    "float",
                    "bool"
                ],
                "population": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "ACS.get_population": {
            "name": "get_population",
            "location": 22,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ACS.get_cfg": {
            "name": "get_cfg",
            "location": 25,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ACS._run_trial_explore": {
            "name": "_run_trial_explore",
            "location": 28,
            "return": [
                "Agent.TrialMetrics"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "dict"
                ],
                "trials": [],
                "current_trial": []
            }
        },
        "ACS._run_trial_exploit": {
            "name": "_run_trial_exploit",
            "location": 85,
            "return": [
                "Agent.TrialMetrics"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "dict"
                ],
                "trials": [],
                "current_trial": []
            }
        },
        "ACS._initial_population": {
            "name": "_initial_population",
            "location": 111,
            "return": [
                "ClassifiersList",
                "str",
                "List[Dict]",
                "List[int]",
                "List[List[Any]]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ACS._best_cl": {
            "name": "_best_cl",
            "location": 118,
            "return": [
                "str",
                "bool",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "match_set": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]",
                    "MutableMapping",
                    "typing.MutableMapping",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/acs/alp.py": {
        "apply": {
            "name": "apply",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "p1": [
                    "lcs.Perception.Perception"
                ],
                "cl": [
                    "lcs.agents.acs.ClassifiersList",
                    "bool",
                    "Optional[Dict[str, str]]"
                ],
                "population": [
                    "float",
                    "str",
                    "Callable",
                    "Dict[str, Dict[str, int]]"
                ]
            }
        },
        "handle_useless_case": {
            "name": "handle_useless_case",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "cl": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "handle_expected_case": {
            "name": "handle_expected_case",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "cl": [
                    "lcs.agents.acs.Classifier",
                    "int"
                ]
            }
        },
        "handle_correctable_case": {
            "name": "handle_correctable_case",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "p1": [
                    "lcs.Perception.Perception"
                ],
                "cl": [
                    "str",
                    "float",
                    "lcs.Perception",
                    "typing.Mapping",
                    "list[]",
                    "lcs.agents.acs.Classifier",
                    "Mapping",
                    "list"
                ],
                "population": [
                    "list[int]",
                    "int",
                    "List[int]",
                    "float"
                ]
            }
        },
        "handle_not_correctable_case": {
            "name": "handle_not_correctable_case",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "cl": [
                    "lcs.agents.acs.Classifier",
                    "str",
                    "Type[T]",
                    "Callable",
                    "Type",
                    "int"
                ],
                "p0": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "_perception_changed": {
            "name": "_perception_changed",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "p1": [
                    "lcs.Perception.Perception"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/acs/Classifier.py": {
        "Classifier.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "List[str]",
                    "bool",
                    "None",
                    "str",
                    "list[str]"
                ],
                "action": [
                    "Optional[int]"
                ],
                "effect": [
                    "List[str]",
                    "bool",
                    "None",
                    "str",
                    "list[str]"
                ],
                "quality": [
                    "float"
                ],
                "reward": [
                    "float"
                ],
                "talp": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ],
                "tav": [
                    "float"
                ],
                "cfg": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "Classifier.__eq__": {
            "name": "__eq__",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "float",
                    "frozenset",
                    "FrozenSet[Any]",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "bool"
                ]
            }
        },
        "Classifier.__hash__": {
            "name": "__hash__",
            "location": 62,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.__repr__": {
            "name": "__repr__",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.general": {
            "name": "general",
            "location": 73,
            "return": [
                "Classifier"
            ],
            "arguments": {
                "cls": [
                    "Type[_TClassifier]"
                ],
                "action": [
                    "int"
                ],
                "cfg": [
                    "int",
                    "None",
                    "bool",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "Classifier.build_corrected": {
            "name": "build_corrected",
            "location": 77,
            "return": [
                "Classifier"
            ],
            "arguments": {
                "cls": [
                    "Type[_TClassifier]"
                ],
                "old": [
                    "Classifier"
                ],
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "p1": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Classifier.fitness": {
            "name": "fitness",
            "location": 125,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.specified_unchanging_attributes": {
            "name": "specified_unchanging_attributes",
            "location": 132,
            "return": [
                "list[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.specificity": {
            "name": "specificity",
            "location": 153,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.is_general": {
            "name": "is_general",
            "location": 156,
            "return": [
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.does_anticipate_change": {
            "name": "does_anticipate_change",
            "location": 162,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.can_be_corrected": {
            "name": "can_be_corrected",
            "location": 173,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "p1": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Classifier.is_reliable": {
            "name": "is_reliable",
            "location": 201,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.is_inadequate": {
            "name": "is_inadequate",
            "location": 204,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.decrease_quality": {
            "name": "decrease_quality",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.increase_quality": {
            "name": "increase_quality",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.specialize": {
            "name": "specialize",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "p1": [
                    "lcs.Perception.Perception"
                ],
                "leave_specialized": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "Classifier.predicts_successfully": {
            "name": "predicts_successfully",
            "location": 243,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "action": [
                    "int"
                ],
                "p1": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Classifier.does_anticipate_correctly": {
            "name": "does_anticipate_correctly",
            "location": 272,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "p1": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Classifier.set_mark": {
            "name": "set_mark",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "perception": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Classifier.is_more_general": {
            "name": "is_more_general",
            "location": 314,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Classifier"
                ]
            }
        },
        "Classifier.is_marked": {
            "name": "is_marked",
            "location": 331,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.does_match": {
            "name": "does_match",
            "location": 334,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "situation": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Classifier.__init__.build_perception_string": {
            "name": "build_perception_string",
            "location": 31,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "bool"
                ],
                "initial": [
                    "str",
                    "list"
                ],
                "length": [
                    "int",
                    "Dict[str, int]",
                    "List[str]",
                    "Optional[int]"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/acs/ClassifiersList.py": {
        "ClassifiersList.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifiersList.form_match_set": {
            "name": "form_match_set",
            "location": 17,
            "return": [
                "ClassifiersList"
            ],
            "arguments": {
                "self": [
                    "_TClassifiersList"
                ],
                "situation": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "ClassifiersList.get_maximum_fitness": {
            "name": "get_maximum_fitness",
            "location": 21,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifiersList.get_best_classifier": {
            "name": "get_best_classifier",
            "location": 40,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifiersList.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/lcs/agents/acs/Condition.py": {
        "Condition.specificity": {
            "name": "specificity",
            "location": 17,
            "return": [
                "int",
                "Set[int]",
                "str",
                "list",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Condition.specialize_with_condition": {
            "name": "specialize_with_condition",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Condition"
                ]
            }
        },
        "Condition.generalize": {
            "name": "generalize",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "int",
                    "None",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Condition.generalize_specific_attribute_randomly": {
            "name": "generalize_specific_attribute_randomly",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable"
                ]
            }
        },
        "Condition.does_match": {
            "name": "does_match",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "str",
                    "int",
                    "tuple[int]",
                    "Tuple[int]",
                    "dict[str, str]",
                    "Iterable[Iterable[T]]",
                    "Dict[str, str]"
                ]
            }
        },
        "Condition.subsumes": {
            "name": "subsumes",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Condition"
                ]
            }
        },
        "Condition.get_backwards_anticipation": {
            "name": "get_backwards_anticipation",
            "location": 79,
            "return": [
                "Perception",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "perception": [
                    "set[typing.Union[str,str,str,str,str,str,str]]",
                    "str",
                    "bool",
                    "set"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/acs/Configuration.py": {
        "Configuration.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.__str__": {
            "name": "__str__",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/lcs/agents/acs/Effect.py": {
        "Effect.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "observation": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[Any,Any, bool]"
                ]
            }
        },
        "Effect.subsumes": {
            "name": "subsumes",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "list[str]",
                    "str",
                    "int"
                ]
            }
        },
        "Effect.specify_change": {
            "name": "specify_change",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Effect.item_anticipate_change": {
            "name": "item_anticipate_change",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "item": [
                    "int",
                    "tuple[int]",
                    "T",
                    "Tuple[int]"
                ],
                "p0_item": [
                    "float",
                    "int",
                    "str",
                    "None",
                    "bool",
                    "Optional[float]"
                ],
                "p1_item": [
                    "float",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Effect.is_specializable": {
            "name": "is_specializable",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "p0": [
                    "str",
                    "int",
                    "lcs.Perception"
                ],
                "p1": [
                    "str",
                    "int",
                    "lcs.Perception"
                ]
            }
        },
        "Effect.does_match": {
            "name": "does_match",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "perception": [
                    "int",
                    "set[str]",
                    "bool",
                    "Set[str]"
                ],
                "other_perception": [
                    "int",
                    "set[str]",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "Effect.anticipates_correctly": {
            "name": "anticipates_correctly",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "p0": [
                    "str",
                    "bool",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "p1": [
                    "str",
                    "bool",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "Effect.__str__": {
            "name": "__str__",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/lcs/agents/acs/PMark.py": {
        "PMark.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int",
                    "list",
                    "list[]"
                ]
            }
        },
        "PMark.is_marked": {
            "name": "is_marked",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PMark.complement_marks": {
            "name": "complement_marks",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "perception": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "PMark.set_mark_using_condition": {
            "name": "set_mark_using_condition",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[int]"
                ],
                "perception": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "PMark.get_differences": {
            "name": "get_differences",
            "location": 56,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "p0": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "PMark.__repr__": {
            "name": "__repr__",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PMark.__repr__.compact_set_str": {
            "name": "compact_set_str",
            "location": 88,
            "return": [
                "typing.Text",
                "int",
                "str",
                "tuple",
                "bool"
            ],
            "arguments": {
                "s": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/acs/__init__.py": {},
    "pyalcs-master/lcs/agents/acs2/ACS2.py": {
        "ACS2.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int",
                    "float",
                    "bool"
                ],
                "population": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "ACS2.get_population": {
            "name": "get_population",
            "location": 23,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ACS2.get_cfg": {
            "name": "get_cfg",
            "location": 26,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ACS2._run_trial_explore": {
            "name": "_run_trial_explore",
            "location": 29,
            "return": [
                "Agent.TrialMetrics"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict[str, str]",
                    "bool",
                    "str"
                ],
                "time": [
                    "dict",
                    "NamedTuple"
                ],
                "current_trial": [
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ACS2._run_trial_exploit": {
            "name": "_run_trial_exploit",
            "location": 134,
            "return": [
                "Agent.TrialMetrics"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "time": [
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "current_trial": [
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ACS2._run_action_planning": {
            "name": "_run_action_planning",
            "location": 172,
            "return": [
                "Tuple[(int, lcs.Perception.Perception, lcs.Perception.Perception, Any, int, int)]"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "float",
                    "int",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "time": [
                    "int"
                ],
                "state": [
                    "lcs.Perception.Perception"
                ],
                "prev_state": [
                    "lcs.Perception.Perception"
                ],
                "action_set": [
                    "Optional[str]",
                    "str",
                    "list",
                    "int",
                    "None",
                    "Optional[List[str]]",
                    "list[]",
                    "list[str]",
                    "Optional[Set[str]]",
                    "set[str]"
                ],
                "action": [
                    "int"
                ],
                "last_reward": [
                    "int"
                ]
            }
        },
        "ACS2._time_for_action_planning": {
            "name": "_time_for_action_planning",
            "location": 291,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/acs2/alp.py": {
        "cover": {
            "name": "cover",
            "location": 8,
            "return": [
                "Classifier",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "action": [
                    "int"
                ],
                "p1": [
                    "lcs.Perception.Perception"
                ],
                "time": [
                    "int"
                ],
                "cfg": [
                    "bool",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "None",
                    "Optional[\"CustomerReference\"]",
                    "typing.Sequence[str]",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "expected_case": {
            "name": "expected_case",
            "location": 48,
            "return": [
                "None",
                "Optional[str]",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "cl": [
                    "str"
                ],
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "time": [
                    "int"
                ]
            }
        },
        "unexpected_case": {
            "name": "unexpected_case",
            "location": 104,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "cl": [
                    "int",
                    "str",
                    "Callable"
                ],
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "p1": [
                    "lcs.Perception.Perception"
                ],
                "time": [
                    "int"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/acs2/Classifier.py": {
        "Classifier.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "Optional[Union[(str, acs.Condition.Condition)]]"
                ],
                "action": [
                    "Optional[int]"
                ],
                "effect": [
                    "List[str]",
                    "bool",
                    "None",
                    "str",
                    "list[str]"
                ],
                "quality": [
                    "float"
                ],
                "reward": [
                    "float"
                ],
                "immediate_reward": [
                    "float"
                ],
                "numerosity": [
                    "int"
                ],
                "experience": [
                    "int"
                ],
                "talp": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ],
                "tga": [
                    "int"
                ],
                "tav": [
                    "float"
                ],
                "cfg": [
                    "int",
                    "None"
                ]
            }
        },
        "Classifier.__repr__": {
            "name": "__repr__",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.copy_from": {
            "name": "copy_from",
            "location": 74,
            "return": [
                "Classifier"
            ],
            "arguments": {
                "cls": [
                    "Type[_TClassifier]"
                ],
                "old_cls": [
                    "Classifier"
                ],
                "time": [
                    "int"
                ]
            }
        },
        "Classifier.specified_unchanging_attributes": {
            "name": "specified_unchanging_attributes",
            "location": 108,
            "return": [
                "list[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.is_enhanceable": {
            "name": "is_enhanceable",
            "location": 133,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.increase_quality": {
            "name": "increase_quality",
            "location": 136,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.decrease_quality": {
            "name": "decrease_quality",
            "location": 140,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.increase_experience": {
            "name": "increase_experience",
            "location": 144,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.specialize": {
            "name": "specialize",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "p1": [
                    "lcs.Perception.Perception"
                ],
                "leave_specialized": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "Classifier.merge_with": {
            "name": "merge_with",
            "location": 182,
            "return": [
                "Classifier"
            ],
            "arguments": {
                "self": [
                    "_TClassifier"
                ],
                "other_classifier": [
                    "bool",
                    "List[int]",
                    "list[int]",
                    "Optional[int]",
                    "None",
                    "Mapping[Any, Any]",
                    "typing.Mapping"
                ],
                "perception": [
                    "int",
                    "float",
                    "Counter",
                    "typing.Counter"
                ],
                "time": [
                    "list[dict[str, typing.Any]]",
                    "bool",
                    "List[Dict[str, Any]]",
                    "float",
                    "Iterable[\"Entity\"]",
                    "None",
                    "Optional[float]",
                    "dict[, ]",
                    "Optional[int]",
                    "dict"
                ]
            }
        },
        "Classifier.reverse_increase_quality": {
            "name": "reverse_increase_quality",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.set_mark": {
            "name": "set_mark",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "perception": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Classifier.update_application_average": {
            "name": "update_application_average",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "int"
                ]
            }
        },
        "Classifier.generalize_unchanging_condition_attribute": {
            "name": "generalize_unchanging_condition_attribute",
            "location": 257,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "randomfunc": [
                    "Callable"
                ]
            }
        },
        "Classifier.is_marked": {
            "name": "is_marked",
            "location": 280,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.does_match": {
            "name": "does_match",
            "location": 283,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "situation": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Classifier.does_match_backwards": {
            "name": "does_match_backwards",
            "location": 291,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "situation": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Classifier.get_best_anticipation": {
            "name": "get_best_anticipation",
            "location": 304,
            "return": [
                "lcs.Perception.Perception"
            ],
            "arguments": {
                "self": [],
                "perception": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Classifier.get_backwards_anticipation": {
            "name": "get_backwards_anticipation",
            "location": 315,
            "return": [
                "Optional[lcs.Perception.Perception]"
            ],
            "arguments": {
                "self": [],
                "perception": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Classifier.__init__.build_perception_string": {
            "name": "build_perception_string",
            "location": 38,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "bool"
                ],
                "initial": [
                    "str",
                    "list"
                ],
                "length": [
                    "int",
                    "Dict[str, int]",
                    "List[str]",
                    "Optional[int]"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/acs2/ClassifiersList.py": {
        "ClassifiersList.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifiersList.form_match_set": {
            "name": "form_match_set",
            "location": 23,
            "return": [
                "ClassifiersList"
            ],
            "arguments": {
                "self": [
                    "_TClassifiersList"
                ],
                "situation": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "ClassifiersList.form_action_set": {
            "name": "form_action_set",
            "location": 27,
            "return": [
                "ClassifiersList"
            ],
            "arguments": {
                "self": [
                    "_TClassifiersList"
                ],
                "action": [
                    "int"
                ]
            }
        },
        "ClassifiersList.form_match_set_backwards": {
            "name": "form_match_set_backwards",
            "location": 31,
            "return": [
                "ClassifiersList"
            ],
            "arguments": {
                "self": [
                    "_TClassifiersList"
                ],
                "situation": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "ClassifiersList.expand": {
            "name": "expand",
            "location": 37,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifiersList.apply_enhanced_effect_part_check": {
            "name": "apply_enhanced_effect_part_check",
            "location": 50,
            "return": [
                "Optional[ClassifiersList]"
            ],
            "arguments": {
                "action_set": [
                    "ClassifiersList"
                ],
                "new_list": [
                    "ClassifiersList"
                ],
                "previous_situation": [
                    "lcs.Perception.Perception"
                ],
                "time": [
                    "int"
                ],
                "cfg": [
                    "list[typing.Type]",
                    "bool",
                    "List[Type]",
                    "list[]",
                    "list",
                    "int"
                ]
            }
        },
        "ClassifiersList.apply_alp": {
            "name": "apply_alp",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "population": [
                    "ClassifiersList"
                ],
                "match_set": [
                    "ClassifiersList"
                ],
                "action_set": [
                    "ClassifiersList"
                ],
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "action": [
                    "int"
                ],
                "p1": [
                    "lcs.Perception.Perception"
                ],
                "time": [
                    "int"
                ],
                "theta_exp": [
                    "int"
                ],
                "cfg": [
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "ClassifiersList.apply_ga": {
            "name": "apply_ga",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "time": [
                    "int"
                ],
                "population": [
                    "ClassifiersList"
                ],
                "match_set": [
                    "ClassifiersList"
                ],
                "action_set": [
                    "ClassifiersList"
                ],
                "p": [
                    "lcs.Perception.Perception"
                ],
                "theta_ga": [
                    "int"
                ],
                "mu": [
                    "float"
                ],
                "chi": [
                    "float"
                ],
                "theta_as": [
                    "int"
                ],
                "do_subsumption": [
                    "bool"
                ],
                "theta_exp": [
                    "int"
                ]
            }
        },
        "ClassifiersList.apply_reinforcement_learning": {
            "name": "apply_reinforcement_learning",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "action_set": [
                    "ClassifiersList"
                ],
                "reward": [
                    "int"
                ],
                "p": [
                    "float"
                ],
                "beta": [
                    "float"
                ],
                "gamma": [
                    "float"
                ]
            }
        },
        "ClassifiersList.get_best_classifier": {
            "name": "get_best_classifier",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/lcs/agents/acs2/Configuration.py": {
        "Configuration.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.__str__": {
            "name": "__str__",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/lcs/agents/acs2/Effect.py": {
        "Effect.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "observation": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Effect.specify_change": {
            "name": "specify_change",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Effect.enhanced_effect": {
            "name": "enhanced_effect",
            "location": 42,
            "return": [
                "Effect"
            ],
            "arguments": {
                "cls": [
                    "Type[_TEffect]"
                ],
                "effect1": [
                    "str"
                ],
                "effect2": [
                    "Type",
                    "float",
                    "type"
                ],
                "q1": [
                    "float"
                ],
                "q2": [
                    "float"
                ],
                "perception": [
                    "Callable",
                    "None",
                    "dict",
                    "typing.Callable[, ]",
                    "str",
                    "Type",
                    "dict[, ]",
                    "typing.Type",
                    "type"
                ]
            }
        },
        "Effect.item_anticipate_change": {
            "name": "item_anticipate_change",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "item": [
                    "Dict[str, Set[str]]",
                    "dict",
                    "str"
                ],
                "p0_item": [
                    "float",
                    "int",
                    "str",
                    "None",
                    "bool",
                    "Optional[float]"
                ],
                "p1_item": [
                    "bool",
                    "list[str]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Effect.is_specializable": {
            "name": "is_specializable",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "p1": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Effect.get_best_anticipation": {
            "name": "get_best_anticipation",
            "location": 107,
            "return": [
                "lcs.Perception.Perception"
            ],
            "arguments": {
                "self": [],
                "perception": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Effect.does_specify_only_changes_backwards": {
            "name": "does_specify_only_changes_backwards",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "back_anticipation": [
                    "lcs.Perception.Perception"
                ],
                "situation": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Effect.is_enhanced": {
            "name": "is_enhanced",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Effect.reduced_to_non_enhanced": {
            "name": "reduced_to_non_enhanced",
            "location": 159,
            "return": [
                "Effect"
            ],
            "arguments": {
                "self": [
                    "_TEffect"
                ]
            }
        },
        "Effect.update_enhanced_effect_probs": {
            "name": "update_enhanced_effect_probs",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "perception": [
                    "lcs.Perception.Perception"
                ],
                "update_rate": [
                    "float"
                ]
            }
        },
        "Effect.__str__": {
            "name": "__str__",
            "location": 180,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/lcs/agents/acs2/ProbabilityEnhancedAttribute.py": {
        "ProbabilityEnhancedAttribute.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "Optional[str]",
                    "str",
                    "Dict[int, str]",
                    "None",
                    "bool",
                    "dict",
                    "dict[int, str]",
                    "dict[, ]",
                    "List[dict]",
                    "int",
                    "list[dict[, ]]"
                ]
            }
        },
        "ProbabilityEnhancedAttribute.merged_attributes": {
            "name": "merged_attributes",
            "location": 19,
            "return": [
                "list[typing.Union[bool,float]]",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "attr1": [
                    "dict[, ]",
                    "dict",
                    "bool",
                    "typing.Type",
                    "type",
                    "T"
                ],
                "attr2": [
                    "bool",
                    "Optional[Union[str, Any]]",
                    "float"
                ],
                "q1": [
                    "float"
                ],
                "q2": [
                    "float"
                ]
            }
        },
        "ProbabilityEnhancedAttribute.sum_of_probabilities": {
            "name": "sum_of_probabilities",
            "location": 35,
            "return": [
                "bool",
                "Optional[Any]",
                "int",
                "Optional[str]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProbabilityEnhancedAttribute.adjust_probabilities": {
            "name": "adjust_probabilities",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prev_sum": [
                    "float",
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "ProbabilityEnhancedAttribute.increase_probability": {
            "name": "increase_probability",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "effect_symbol": [
                    "str",
                    "list",
                    "list[]",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "update_rate": [
                    "int",
                    "str",
                    "bool",
                    "dict",
                    "List[List[int]]"
                ]
            }
        },
        "ProbabilityEnhancedAttribute.get_best_symbol": {
            "name": "get_best_symbol",
            "location": 57,
            "return": [
                "dict",
                "str",
                "Dict[int, str]",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProbabilityEnhancedAttribute.does_contain": {
            "name": "does_contain",
            "location": 63,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "Callable[[dict], None]",
                    "None",
                    "List[str]",
                    "typing.Callable[dict[, ], None]"
                ]
            }
        },
        "ProbabilityEnhancedAttribute.is_enhanced": {
            "name": "is_enhanced",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProbabilityEnhancedAttribute.the_only_symbol": {
            "name": "the_only_symbol",
            "location": 76,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProbabilityEnhancedAttribute.symbols_specified": {
            "name": "symbols_specified",
            "location": 81,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProbabilityEnhancedAttribute.is_similar": {
            "name": "is_similar",
            "location": 84,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[Iterable[Any]]",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ProbabilityEnhancedAttribute.is_compact": {
            "name": "is_compact",
            "location": 94,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProbabilityEnhancedAttribute.make_compact": {
            "name": "make_compact",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProbabilityEnhancedAttribute.insert_symbol": {
            "name": "insert_symbol",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str"
                ],
                "q1": [
                    "float",
                    "Callable[..., T]",
                    "list",
                    "str",
                    "bool"
                ],
                "q2": [
                    "int",
                    "None",
                    "str",
                    "Set[str]",
                    "List[Tuple[str, Any]]",
                    "set[str]",
                    "list",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "list[]"
                ]
            }
        },
        "ProbabilityEnhancedAttribute.insert_attribute": {
            "name": "insert_attribute",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "dict"
                ],
                "q1": [
                    "dict",
                    "dict[, ]",
                    "int",
                    "Dict[str, bool]",
                    "str",
                    "dict[str, bool]"
                ],
                "q2": [
                    "dict",
                    "dict[, ]",
                    "int",
                    "Dict[str, bool]",
                    "str",
                    "dict[str, bool]"
                ]
            }
        },
        "ProbabilityEnhancedAttribute.insert": {
            "name": "insert",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbol_or_attr": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "q1": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "q2": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "None",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "ProbabilityEnhancedAttribute.remove_symbol": {
            "name": "remove_symbol",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str"
                ]
            }
        },
        "ProbabilityEnhancedAttribute.copy": {
            "name": "copy",
            "location": 137,
            "return": [
                "ProbabilityEnhancedAttribute"
            ],
            "arguments": {
                "self": [
                    "_TProbabilityEnhancedAttribute"
                ]
            }
        },
        "ProbabilityEnhancedAttribute.sorted_items": {
            "name": "sorted_items",
            "location": 140,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProbabilityEnhancedAttribute.__eq__": {
            "name": "__eq__",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "dict",
                    "typing.AbstractSet",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "ProbabilityEnhancedAttribute.__str__": {
            "name": "__str__",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/lcs/agents/acs2/__init__.py": {},
    "pyalcs-master/lcs/agents/acs2er/ACS2ER.py": {
        "ACS2ER.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int"
                ],
                "population": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "ACS2ER.get_population": {
            "name": "get_population",
            "location": 24,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ACS2ER.get_cfg": {
            "name": "get_cfg",
            "location": 27,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ACS2ER._run_trial_explore": {
            "name": "_run_trial_explore",
            "location": 30,
            "return": [
                "lcs.agents.Agent.TrialMetrics"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "int"
                ],
                "time": [
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ],
                "current_trial": [
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ACS2ER._run_trial_exploit": {
            "name": "_run_trial_exploit",
            "location": 107,
            "return": [
                "lcs.agents.Agent.TrialMetrics"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "time": [
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "current_trial": [
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/acs2er/Configuration.py": {
        "Configuration.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/lcs/agents/acs2er/ReplayMemory.py": {
        "ReplayMemory.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReplayMemory.update": {
            "name": "update",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample": [
                    "lcs.agents.acs2er.ReplayMemorySample.ReplayMemorySample"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/acs2er/ReplayMemorySample.py": {},
    "pyalcs-master/lcs/agents/acs2er/__init__.py": {},
    "pyalcs-master/lcs/agents/macs/macs.py": {
        "Condition.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "observation": [
                    "List[int]",
                    "int",
                    "str",
                    "List[Tuple]",
                    "float",
                    "list"
                ]
            }
        },
        "Condition.__lt__": {
            "name": "__lt__",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Condition"
                ]
            }
        },
        "Condition.general": {
            "name": "general",
            "location": 31,
            "return": [
                "Condition"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCondition]"
                ],
                "length": [
                    "int"
                ]
            }
        },
        "Condition.is_general": {
            "name": "is_general",
            "location": 35,
            "return": [
                "bool",
                "Set[str]",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Condition.generality": {
            "name": "generality",
            "location": 39,
            "return": [
                "int",
                "str",
                "Dict[int, int]",
                "Dict[str, float]",
                "Dict[str, Tuple[float, float]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Condition.specificity": {
            "name": "specificity",
            "location": 43,
            "return": [
                "int",
                "str",
                "Dict[int, int]",
                "Dict[str, float]",
                "Dict[str, Tuple[float, float]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Condition.does_match": {
            "name": "does_match",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "Union[(Condition, lcs.Perception.Perception)]"
                ]
            }
        },
        "Condition.non_matching": {
            "name": "non_matching",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "Condition"
                ]
            }
        },
        "Condition.generate_matching": {
            "name": "generate_matching",
            "location": 68,
            "return": [
                "Generator[(Condition, Any, Any)]"
            ],
            "arguments": {
                "p": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Condition.increase_eis": {
            "name": "increase_eis",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]",
                    "set",
                    "set[]",
                    "IO[str]",
                    "typing.IO"
                ],
                "beta": [
                    "int",
                    "str",
                    "dict",
                    "set",
                    "IO[str]"
                ]
            }
        },
        "Condition.decrease_eis": {
            "name": "decrease_eis",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "float",
                    "str",
                    "bytearray",
                    "list",
                    "list[]"
                ],
                "beta": [
                    "int",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Condition.increase_ig": {
            "name": "increase_ig",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]",
                    "set",
                    "set[]",
                    "IO[str]",
                    "typing.IO"
                ],
                "beta": [
                    "int",
                    "str",
                    "dict",
                    "set",
                    "IO[str]"
                ]
            }
        },
        "Condition.decrease_ig": {
            "name": "decrease_ig",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "float",
                    "str",
                    "bytearray",
                    "list",
                    "list[]"
                ],
                "beta": [
                    "int",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Condition.is_more_general": {
            "name": "is_more_general",
            "location": 103,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Condition"
                ]
            }
        },
        "Condition.feature_to_specialize": {
            "name": "feature_to_specialize",
            "location": 124,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "estimate_expected_improvements": [
                    "bool"
                ]
            }
        },
        "Condition.feature_to_generalize": {
            "name": "feature_to_generalize",
            "location": 145,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Condition.exhaustive_generalization": {
            "name": "exhaustive_generalization",
            "location": 154,
            "return": [
                "Generator[(Tuple[(Condition, int)], Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Condition.subsumes": {
            "name": "subsumes",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "list[str]",
                    "List[str]",
                    "int",
                    "Union[int, float]",
                    "float",
                    "AbstractSet[T]",
                    "typing.AbstractSet"
                ]
            }
        },
        "Condition.is_compatible": {
            "name": "is_compatible",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Condition"
                ],
                "ps": [
                    "List[lcs.Perception.Perception]"
                ]
            }
        },
        "Effect.generate": {
            "name": "generate",
            "location": 180,
            "return": [
                "Generator[(Effect, Any, Any)]"
            ],
            "arguments": {
                "p": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Effect.__lt__": {
            "name": "__lt__",
            "location": 187,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Effect"
                ]
            }
        },
        "Effect.conflicts": {
            "name": "conflicts",
            "location": 190,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Effect"
                ]
            }
        },
        "Effect.does_match": {
            "name": "does_match",
            "location": 198,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Effect.subsumes": {
            "name": "subsumes",
            "location": 201,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "list[str]",
                    "List[str]",
                    "int",
                    "Union[int, float]",
                    "float",
                    "AbstractSet[T]",
                    "typing.AbstractSet"
                ]
            }
        },
        "Configuration.__init__": {
            "name": "__init__",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "classifier_length": [
                    "int"
                ],
                "number_of_possible_actions": [
                    "int"
                ],
                "feature_possible_values": [
                    "list"
                ],
                "specified_effect_attributes": [
                    "int"
                ],
                "estimate_expected_improvements": [
                    "bool"
                ],
                "learning_rate": [
                    "float"
                ],
                "inaccuracy_threshold": [
                    "int"
                ],
                "accuracy_threshold": [
                    "int"
                ],
                "oscillation_threshold": [
                    "int"
                ],
                "metrics_trial_frequency": [
                    "int"
                ],
                "user_metrics_collector_fcn": [
                    "Callable"
                ]
            }
        },
        "Classifier.__init__": {
            "name": "__init__",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "Optional[Union[(Condition, str)]]"
                ],
                "action": [
                    "Optional[int]"
                ],
                "effect": [
                    "Optional[Union[(Effect, str)]]"
                ],
                "debug": [
                    "dict"
                ],
                "cfg": [
                    "Optional[Configuration]"
                ]
            }
        },
        "Classifier.__key": {
            "name": "__key",
            "location": 274,
            "return": [
                "str",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.__eq__": {
            "name": "__eq__",
            "location": 277,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Classifier.__hash__": {
            "name": "__hash__",
            "location": 280,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.__repr__": {
            "name": "__repr__",
            "location": 283,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.is_accurate": {
            "name": "is_accurate",
            "location": 287,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.is_inaccurate": {
            "name": "is_inaccurate",
            "location": 291,
            "return": [
                "bool",
                "str",
                "bytes",
                "bytearray",
                "Union[str, bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.is_oscillating": {
            "name": "is_oscillating",
            "location": 295,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.does_match": {
            "name": "does_match",
            "location": 298,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "situation": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Classifier.anticipates": {
            "name": "anticipates",
            "location": 301,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "situation": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Classifier.conflicts": {
            "name": "conflicts",
            "location": 304,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Classifier"
                ]
            }
        },
        "ClassifiersList.__init__": {
            "name": "__init__",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifiersList.form_match_set": {
            "name": "form_match_set",
            "location": 316,
            "return": [
                "ClassifiersList"
            ],
            "arguments": {
                "self": [
                    "_TClassifiersList"
                ],
                "situation": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "ClassifiersList.form_action_set": {
            "name": "form_action_set",
            "location": 320,
            "return": [
                "ClassifiersList"
            ],
            "arguments": {
                "self": [
                    "_TClassifiersList"
                ],
                "action": [
                    "int"
                ]
            }
        },
        "LatentLearning.__init__": {
            "name": "__init__",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Configuration"
                ]
            }
        },
        "LatentLearning.evaluate_classifiers": {
            "name": "evaluate_classifiers",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "ClassifiersList"
                ],
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "action": [
                    "int"
                ],
                "p1": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "LatentLearning.select_accurate": {
            "name": "select_accurate",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pop": [
                    "ClassifiersList"
                ]
            }
        },
        "LatentLearning.specialize_conditions": {
            "name": "specialize_conditions",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pop": [
                    "ClassifiersList"
                ],
                "situations_seen": [
                    "Set[lcs.Perception.Perception]"
                ]
            }
        },
        "LatentLearning.mutspec": {
            "name": "mutspec",
            "location": 396,
            "return": [
                "Generator[(Classifier, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "cl": [
                    "Classifier"
                ],
                "feature_idx": [
                    "int"
                ]
            }
        },
        "LatentLearning.generalize_conditions": {
            "name": "generalize_conditions",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "ClassifiersList"
                ],
                "situations_seen": [
                    "Set[lcs.Perception.Perception]"
                ],
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "a0": [
                    "int"
                ],
                "p1": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "LatentLearning.process_set_b": {
            "name": "process_set_b",
            "location": 453,
            "return": [
                "Set[ChildClassifier]"
            ],
            "arguments": {
                "self": [],
                "set_b": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "LatentLearning.set_c_conflicts": {
            "name": "set_c_conflicts",
            "location": 481,
            "return": [
                "Set[Classifier]"
            ],
            "arguments": {
                "self": [],
                "set_c": [
                    "Set[ChildClassifier]"
                ],
                "population": [
                    "Hashable",
                    "bool"
                ],
                "situations_seen": [
                    "Set[lcs.Perception.Perception]"
                ],
                "a0": [
                    "int"
                ]
            }
        },
        "LatentLearning.set_d_generalization": {
            "name": "set_d_generalization",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "set_d": [
                    "Set[Classifier]"
                ]
            }
        },
        "LatentLearning.cover_transitions": {
            "name": "cover_transitions",
            "location": 534,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "ClassifiersList"
                ],
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "a0": [
                    "int"
                ],
                "p1": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "LatentLearning._update_igs": {
            "name": "_update_igs",
            "location": 603,
            "return": [
                "Set[Classifier]"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "ClassifiersList"
                ],
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "a0": [
                    "int"
                ],
                "p1": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "MACS.__init__": {
            "name": "__init__",
            "location": 634,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Configuration"
                ],
                "population": [
                    "ClassifiersList"
                ],
                "desirability_values": [
                    "Dict[(lcs.Perception.Perception, float)]"
                ]
            }
        },
        "MACS.get_population": {
            "name": "get_population",
            "location": 643,
            "return": [
                "ClassifiersList"
            ],
            "arguments": {
                "self": []
            }
        },
        "MACS.get_cfg": {
            "name": "get_cfg",
            "location": 646,
            "return": [
                "Configuration"
            ],
            "arguments": {
                "self": []
            }
        },
        "MACS.remember_situation": {
            "name": "remember_situation",
            "location": 649,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "MACS.get_anticipations": {
            "name": "get_anticipations",
            "location": 663,
            "return": [
                "Generator[(lcs.Perception.Perception, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "a": [
                    "int"
                ]
            }
        },
        "MACS.get_seen_situations": {
            "name": "get_seen_situations",
            "location": 682,
            "return": [
                "Set[lcs.Perception.Perception]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MACS._run_trial_explore": {
            "name": "_run_trial_explore",
            "location": 685,
            "return": [
                "Agent.TrialMetrics"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Union",
                    "dict"
                ],
                "trials": [],
                "current_trial": []
            }
        },
        "Classifier.__init__.build_perception_string": {
            "name": "build_perception_string",
            "location": 251,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "bool"
                ],
                "initial": [
                    "str",
                    "list"
                ],
                "length": [
                    "int",
                    "Dict[str, int]",
                    "List[str]",
                    "Optional[int]"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/macs/__init__.py": {},
    "pyalcs-master/lcs/agents/racs/action_selection.py": {
        "choose_action": {
            "name": "choose_action",
            "location": 10,
            "return": [
                "int"
            ],
            "arguments": {
                "cll": [
                    "float",
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "all_actions": [
                    "int"
                ],
                "epsilon": [
                    "float"
                ],
                "biased_exploration_prob": [
                    "float"
                ]
            }
        },
        "explore": {
            "name": "explore",
            "location": 41,
            "return": [
                "int"
            ],
            "arguments": {
                "cll": [
                    "int",
                    "typing.Iterable[T]",
                    "Iterable[T]",
                    "typing.Callable[T, typing.Any]",
                    "None",
                    "Callable[[T], Any]",
                    "Optional[T]",
                    "Optional[int]",
                    "Callable"
                ],
                "all_actions": [
                    "int"
                ],
                "pb": [
                    "float"
                ]
            }
        },
        "exploit": {
            "name": "exploit",
            "location": 69,
            "return": [
                "int"
            ],
            "arguments": {
                "cll": [
                    "Type",
                    "bool",
                    "int"
                ],
                "all_actions": [
                    "int"
                ]
            }
        },
        "choose_latest_action": {
            "name": "choose_latest_action",
            "location": 107,
            "return": [
                "int"
            ],
            "arguments": {
                "cll": [
                    "Dict[str, Any]",
                    "str",
                    "Callable"
                ],
                "all_actions": [
                    "int"
                ]
            }
        },
        "choose_action_from_knowledge_array": {
            "name": "choose_action_from_knowledge_array",
            "location": 147,
            "return": [
                "int"
            ],
            "arguments": {
                "cll": [
                    "Dict[str, Any]",
                    "Type",
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, str]"
                ],
                "all_actions": [
                    "int"
                ]
            }
        },
        "choose_random_action": {
            "name": "choose_random_action",
            "location": 183,
            "return": [
                "int"
            ],
            "arguments": {
                "all_actions": [
                    "int"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/racs/Classifier.py": {
        "Classifier.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "List[str]",
                    "None",
                    "str",
                    "int",
                    "list[str]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "action": [
                    "Optional[int]"
                ],
                "effect": [
                    "List[str]",
                    "None",
                    "str",
                    "int",
                    "list[str]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "quality": [
                    "float"
                ],
                "reward": [
                    "float"
                ],
                "immediate_reward": [
                    "float"
                ],
                "numerosity": [
                    "int"
                ],
                "experience": [
                    "int"
                ],
                "talp": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ],
                "tga": [
                    "int"
                ],
                "tav": [
                    "float"
                ],
                "cfg": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "Classifier.__eq__": {
            "name": "__eq__",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "float",
                    "frozenset",
                    "FrozenSet[Any]",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "bool"
                ]
            }
        },
        "Classifier.__hash__": {
            "name": "__hash__",
            "location": 75,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.__repr__": {
            "name": "__repr__",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.copy_from": {
            "name": "copy_from",
            "location": 83,
            "return": [
                "Classifier"
            ],
            "arguments": {
                "cls": [
                    "Type[_TClassifier]"
                ],
                "old_cls": [
                    "Classifier"
                ],
                "time": [
                    "int"
                ]
            }
        },
        "Classifier.fitness": {
            "name": "fitness",
            "location": 117,
            "return": [
                "bool",
                "List[int]",
                "List[Tuple[str, str]]",
                "int",
                "List[str]",
                "List[\"Node\"]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.specified_unchanging_attributes": {
            "name": "specified_unchanging_attributes",
            "location": 121,
            "return": [
                "list[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.specialize": {
            "name": "specialize",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "p1": [
                    "lcs.Perception.Perception"
                ],
                "leave_specialized": [
                    "bool"
                ]
            }
        },
        "Classifier.is_reliable": {
            "name": "is_reliable",
            "location": 183,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.is_inadequate": {
            "name": "is_inadequate",
            "location": 186,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.increase_experience": {
            "name": "increase_experience",
            "location": 189,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.increase_quality": {
            "name": "increase_quality",
            "location": 193,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.decrease_quality": {
            "name": "decrease_quality",
            "location": 197,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.does_anticipate_change": {
            "name": "does_anticipate_change",
            "location": 201,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.does_anticipate_correctly": {
            "name": "does_anticipate_correctly",
            "location": 212,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "previous_situation": [
                    "lcs.Perception.Perception"
                ],
                "situation": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Classifier.set_mark": {
            "name": "set_mark",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "perception": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Classifier.set_alp_timestamp": {
            "name": "set_alp_timestamp",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "int"
                ]
            }
        },
        "Classifier.is_more_general": {
            "name": "is_more_general",
            "location": 280,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Classifier"
                ]
            }
        },
        "Classifier.is_marked": {
            "name": "is_marked",
            "location": 300,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.get_interval_proportions": {
            "name": "get_interval_proportions",
            "location": 303,
            "return": [
                "Dict[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.generalize_unchanging_condition_attribute": {
            "name": "generalize_unchanging_condition_attribute",
            "location": 335,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "randomfunc": [
                    "Callable"
                ]
            }
        },
        "Classifier.__init__.build_condition": {
            "name": "build_condition",
            "location": 36,
            "return": [
                "bool",
                "Condition"
            ],
            "arguments": {
                "initial": [
                    "bool"
                ]
            }
        },
        "Classifier.__init__.build_effect": {
            "name": "build_effect",
            "location": 42,
            "return": [
                "bool",
                "Effect"
            ],
            "arguments": {
                "initial": [
                    "bool"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/racs/ClassifierList.py": {
        "ClassifierList.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifierList.form_match_set": {
            "name": "form_match_set",
            "location": 22,
            "return": [
                "ClassifierList"
            ],
            "arguments": {
                "self": [
                    "_TClassifierList"
                ],
                "situation": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "ClassifierList.form_action_set": {
            "name": "form_action_set",
            "location": 26,
            "return": [
                "ClassifierList"
            ],
            "arguments": {
                "self": [
                    "_TClassifierList"
                ],
                "action": [
                    "int"
                ]
            }
        },
        "ClassifierList.expand": {
            "name": "expand",
            "location": 30,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifierList.get_maximum_fitness": {
            "name": "get_maximum_fitness",
            "location": 42,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifierList.apply_alp": {
            "name": "apply_alp",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "population": [
                    "ClassifierList"
                ],
                "match_set": [
                    "ClassifierList"
                ],
                "action_set": [
                    "ClassifierList"
                ],
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "action": [
                    "int"
                ],
                "p1": [
                    "lcs.Perception.Perception"
                ],
                "time": [
                    "int"
                ],
                "theta_exp": [
                    "int"
                ],
                "cfg": [
                    "int",
                    "float",
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        },
        "ClassifierList.apply_reinforcement_learning": {
            "name": "apply_reinforcement_learning",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "action_set": [
                    "ClassifierList"
                ],
                "reward": [
                    "int"
                ],
                "p": [
                    "float"
                ],
                "beta": [
                    "float"
                ],
                "gamma": [
                    "float"
                ]
            }
        },
        "ClassifierList.apply_ga": {
            "name": "apply_ga",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "time": [
                    "int"
                ],
                "population": [
                    "ClassifierList"
                ],
                "match_set": [
                    "ClassifierList"
                ],
                "action_set": [
                    "ClassifierList"
                ],
                "p": [
                    "lcs.Perception.Perception"
                ],
                "theta_ga": [
                    "int"
                ],
                "mu": [
                    "float"
                ],
                "chi": [
                    "float"
                ],
                "theta_as": [
                    "int"
                ],
                "do_subsumption": [
                    "bool"
                ],
                "theta_exp": [
                    "int"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/racs/Condition.py": {
        "Condition.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lst": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[Any,Any, bool]"
                ],
                "cfg": [
                    "str",
                    "bool",
                    "Union[str, List[str], Tuple[str, ...]]",
                    "list[str]",
                    "tuple[typing.Union[str,...]]"
                ]
            }
        },
        "Condition.generic": {
            "name": "generic",
            "location": 21,
            "return": [
                "Condition"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCondition]"
                ],
                "cfg": [
                    "int",
                    "str",
                    "Deque[int]",
                    "typing.Deque",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "Condition.specificity": {
            "name": "specificity",
            "location": 27,
            "return": [
                "int",
                "str",
                "Dict[int, int]",
                "Dict[str, float]",
                "Dict[str, Tuple[float, float]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Condition.cover_ratio": {
            "name": "cover_ratio",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Condition.specialize_with_condition": {
            "name": "specialize_with_condition",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Condition"
                ]
            }
        },
        "Condition.generalize": {
            "name": "generalize",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int"
                ]
            }
        },
        "Condition.generalize_specific_attribute_randomly": {
            "name": "generalize_specific_attribute_randomly",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable"
                ]
            }
        },
        "Condition.does_match": {
            "name": "does_match",
            "location": 95,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "perception": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Condition.subsumes": {
            "name": "subsumes",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Condition"
                ]
            }
        },
        "Condition.__repr__": {
            "name": "__repr__",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/lcs/agents/racs/Configuration.py": {
        "Configuration.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/lcs/agents/racs/Effect.py": {
        "Effect.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lst": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[Any,Any, bool]"
                ],
                "cfg": [
                    "str",
                    "bool",
                    "Union[str, List[str], Tuple[str, ...]]",
                    "list[str]",
                    "tuple[typing.Union[str,...]]"
                ]
            }
        },
        "Effect.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Effect.specify_change": {
            "name": "specify_change",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Effect.pass_through": {
            "name": "pass_through",
            "location": 40,
            "return": [
                "Effect"
            ],
            "arguments": {
                "cls": [
                    "Type[_TEffect]"
                ],
                "cfg": [
                    "int",
                    "str",
                    "Deque[int]",
                    "typing.Deque",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "Effect.is_specializable": {
            "name": "is_specializable",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "p1": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Effect.subsumes": {
            "name": "subsumes",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Effect"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/racs/Mark.py": {
        "Mark.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int",
                    "list",
                    "list[]"
                ]
            }
        },
        "Mark.is_marked": {
            "name": "is_marked",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mark.complement_marks": {
            "name": "complement_marks",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "perception": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Mark.set_mark_using_condition": {
            "name": "set_mark_using_condition",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[int]"
                ],
                "perception": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Mark.get_differences": {
            "name": "get_differences",
            "location": 87,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "p0": [
                    "lcs.Perception.Perception"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/racs/metrics.py": {
        "count_averaged_regions": {
            "name": "count_averaged_regions",
            "location": 4,
            "return": [
                "Dict[(int, float)]"
            ],
            "arguments": {
                "population": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/racs/RACS.py": {
        "RACS.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int",
                    "float",
                    "bool"
                ],
                "population": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "RACS.get_population": {
            "name": "get_population",
            "location": 21,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RACS.get_cfg": {
            "name": "get_cfg",
            "location": 24,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RACS._run_trial_explore": {
            "name": "_run_trial_explore",
            "location": 27,
            "return": [
                "Agent.TrialMetrics"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "time": [
                    "list",
                    "bool",
                    "list[]"
                ],
                "current_trial": [
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "RACS._run_trial_exploit": {
            "name": "_run_trial_exploit",
            "location": 136,
            "return": [
                "Agent.TrialMetrics"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "dict",
                    "Union[int, float]"
                ],
                "time": [
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "current_trial": [
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/racs/__init__.py": {},
    "pyalcs-master/lcs/agents/racs/components/alp.py": {
        "cover": {
            "name": "cover",
            "location": 8,
            "return": [
                "Classifier",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "action": [
                    "int"
                ],
                "p1": [
                    "lcs.Perception.Perception"
                ],
                "time": [
                    "int"
                ],
                "cfg": [
                    "bool",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "None",
                    "Optional[\"CustomerReference\"]",
                    "typing.Sequence[str]",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "expected_case": {
            "name": "expected_case",
            "location": 48,
            "return": [
                "None",
                "Optional[str]",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "cl": [
                    "Dict[str, Any]",
                    "str"
                ],
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "time": [
                    "int"
                ]
            }
        },
        "unexpected_case": {
            "name": "unexpected_case",
            "location": 88,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "cl": [
                    "int",
                    "str",
                    "Callable"
                ],
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "p1": [
                    "lcs.Perception.Perception"
                ],
                "time": [
                    "int"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/racs/components/genetic_algorithm.py": {
        "mutate": {
            "name": "mutate",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "cl": [
                    "dict[str, typing.Any]",
                    "bool",
                    "lcs.agents.racs.Classifier",
                    "Dict[str, Any]",
                    "lcs.Perception",
                    "lcs.agents.acs.Classifier"
                ],
                "mu": [
                    "float"
                ]
            }
        },
        "crossover": {
            "name": "crossover",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "parent": [
                    "int",
                    "list",
                    "list[]"
                ],
                "donor": [
                    "str",
                    "int"
                ]
            }
        },
        "_widen_attribute": {
            "name": "_widen_attribute",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "ubr": [
                    "int",
                    "numpy.ma.MaskedArray"
                ],
                "encoder": [
                    "lcs.representations.RealValueEncoder.RealValueEncoder"
                ],
                "noise_max": [
                    "float"
                ],
                "mu": [
                    "float"
                ]
            }
        },
        "_flatten": {
            "name": "_flatten",
            "location": 87,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "ps": [
                    "int",
                    "numpy.ndarray",
                    "numpy.array"
                ]
            }
        },
        "_unflatten": {
            "name": "_unflatten",
            "location": 100,
            "return": [
                "list"
            ],
            "arguments": {
                "flatten": [
                    "List[int]"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/racs/components/__init__.py": {},
    "pyalcs-master/lcs/agents/xcs/Classifier.py": {
        "Classifier.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Optional[str]",
                    "None",
                    "bool",
                    "str"
                ],
                "condition": [
                    "str",
                    "None",
                    "int",
                    "Optional[Tuple[int, int]]",
                    "bool",
                    "tuple[typing.Union[int,int]]"
                ],
                "action": [
                    "Optional[int]"
                ],
                "time_stamp": [
                    "int"
                ]
            }
        },
        "Classifier.does_match": {
            "name": "does_match",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "situation": [
                    "list",
                    "List[int]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Classifier.does_subsume": {
            "name": "does_subsume",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[[Any], T]",
                    "Callable[[], str]"
                ]
            }
        },
        "Classifier.could_subsume": {
            "name": "could_subsume",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.is_more_general": {
            "name": "is_more_general",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type",
                    "typing.Type",
                    "Generic",
                    "typing.Generic"
                ]
            }
        },
        "Classifier.wildcard_number": {
            "name": "wildcard_number",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.__len__": {
            "name": "__len__",
            "location": 58,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.__str__": {
            "name": "__str__",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.__eq__": {
            "name": "__eq__",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/xcs/ClassifiersList.py": {
        "ClassifiersList.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ClassifiersList.insert_in_population": {
            "name": "insert_in_population",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cl": [
                    "str",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "ClassifiersList.generate_covering_classifier": {
            "name": "generate_covering_classifier",
            "location": 29,
            "return": [
                "Classifier",
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "situation": [
                    "List[str]",
                    "List[int]",
                    "str",
                    "List[float]"
                ],
                "action": [
                    "bool",
                    "float",
                    "typing.Callable[numpy.ndarray, numpy.ndarray]",
                    "Callable[[numpy.ndarray], numpy.ndarray]",
                    "list[tuple[typing.Union[typing.Any,typing.Any,typing.Any]]]",
                    "int",
                    "list[dict[, ]]",
                    "List[Tuple[Any, Any, Any]]",
                    "List[dict]"
                ],
                "time_stamp": [
                    "bool",
                    "float",
                    "typing.Callable[numpy.ndarray, numpy.ndarray]",
                    "Callable[[numpy.ndarray], numpy.ndarray]",
                    "list[tuple[typing.Union[typing.Any,typing.Any,typing.Any]]]",
                    "int",
                    "list[dict[, ]]",
                    "List[Tuple[Any, Any, Any]]",
                    "List[dict]"
                ]
            }
        },
        "ClassifiersList._generate_covering_and_insert": {
            "name": "_generate_covering_and_insert",
            "location": 44,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "situation": [
                    "str",
                    "float",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "action": [
                    "str",
                    "float",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "time_stamp": [
                    "str",
                    "float",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "ClassifiersList.delete_from_population": {
            "name": "delete_from_population",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifiersList._deletion_vote": {
            "name": "_deletion_vote",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "cl": [
                    "IO[bytes]",
                    "typing.IO"
                ],
                "average_fitness": [
                    "typing.Callable[, ]",
                    "Callable",
                    "lcs.Perception",
                    "lcs.agents.acs.Classifier"
                ]
            }
        },
        "ClassifiersList._remove_based_on_votes": {
            "name": "_remove_based_on_votes",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deletion_votes": [
                    "str",
                    "int",
                    "float"
                ],
                "selector": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "ClassifiersList.generate_match_set": {
            "name": "generate_match_set",
            "location": 79,
            "return": [
                "ClassifiersList"
            ],
            "arguments": {
                "self": [
                    "_TClassifiersList"
                ],
                "situation": [
                    "lcs.Perception.Perception"
                ],
                "time_stamp": [
                    "str",
                    "bool"
                ]
            }
        },
        "ClassifiersList._find_not_present_action": {
            "name": "_find_not_present_action",
            "location": 87,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "matching_set": [
                    "str",
                    "dict[, ]",
                    "bytes",
                    "Type[object]",
                    "type",
                    "int",
                    "dict",
                    "Optional[Dict]"
                ]
            }
        },
        "ClassifiersList.generate_action_set": {
            "name": "generate_action_set",
            "location": 92,
            "return": [
                "ClassifiersList"
            ],
            "arguments": {
                "self": [
                    "_TClassifiersList"
                ],
                "action": [
                    "BaseException",
                    "str",
                    "typing.Callable[..., None]",
                    "bool",
                    "Callable[..., None]",
                    "Callable[[KT], VT]"
                ]
            }
        },
        "ClassifiersList.numerosity": {
            "name": "numerosity",
            "location": 97,
            "return": [
                "bool",
                "str",
                "List[str]",
                "Tuple[float]",
                "int",
                "List['GridQubit']"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifiersList.best_prediction": {
            "name": "best_prediction",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifiersList.prediction_array": {
            "name": "prediction_array",
            "location": 105,
            "return": [
                "list[typing.Union[int,float]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifiersList.update_set": {
            "name": "update_set",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "str",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "ClassifiersList.get_best_classifier": {
            "name": "get_best_classifier",
            "location": 133,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifiersList._update_fitness": {
            "name": "_update_fitness",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/lcs/agents/xcs/Condition.py": {
        "Condition.subsumes": {
            "name": "subsumes",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "dict",
                    "typing.AbstractSet",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "Condition.wildcard_number": {
            "name": "wildcard_number",
            "location": 15,
            "return": [
                "int",
                "str",
                "Dict[int, int]",
                "Dict[str, float]",
                "Dict[str, Tuple[float, float]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Condition.is_more_general": {
            "name": "is_more_general",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Condition"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/xcs/Configuration.py": {
        "Configuration.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number_of_actions": [
                    "int"
                ],
                "classifier_wildcard": [
                    "str"
                ],
                "max_population": [
                    "int"
                ],
                "learning_rate": [
                    "float"
                ],
                "alpha": [
                    "float"
                ],
                "epsilon_0": [
                    "float"
                ],
                "v": [
                    "int"
                ],
                "gamma": [
                    "float"
                ],
                "ga_threshold": [
                    "int"
                ],
                "chi": [
                    "float"
                ],
                "mutation_chance": [
                    "float"
                ],
                "deletion_threshold": [
                    "int"
                ],
                "delta": [
                    "float"
                ],
                "subsumption_threshold": [
                    "int"
                ],
                "covering_wildcard_chance": [
                    "float"
                ],
                "initial_prediction": [
                    "float"
                ],
                "initial_error": [
                    "float"
                ],
                "initial_fitness": [
                    "float"
                ],
                "epsilon": [
                    "float"
                ],
                "do_ga_subsumption": [
                    "bool"
                ],
                "do_action_set_subsumption": [
                    "bool"
                ],
                "metrics_trial_frequency": [
                    "int"
                ],
                "user_metrics_collector_fcn": [
                    "Callable"
                ],
                "use_mlflow": [
                    "bool"
                ],
                "model_checkpoint_freq": [
                    "int"
                ]
            }
        },
        "Configuration.__str__": {
            "name": "__str__",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/lcs/agents/xcs/GeneticAlgorithm.py": {
        "run_ga": {
            "name": "run_ga",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "population": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "action_set": [
                    "str",
                    "dict[str, str]",
                    "Optional[str]",
                    "typing.Any",
                    "typing.Type",
                    "T",
                    "set[str]",
                    "Dict[str, str]",
                    "Optional[Any]",
                    "Type[T]",
                    "Set[str]"
                ],
                "situation": [
                    "str",
                    "numpy.ndarray"
                ],
                "time_stamp": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Callable]",
                    "Union[str, List[str]]"
                ],
                "cfg": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "Union[str, List[str]]",
                    "list[str]"
                ]
            }
        },
        "_perform_insertion_or_subsumption": {
            "name": "_perform_insertion_or_subsumption",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "cfg": [
                    "str"
                ],
                "population": [
                    "str"
                ],
                "child1": [],
                "child2": [],
                "parent1": [
                    "int",
                    "None",
                    "numpy.ndarray",
                    "Optional[int]",
                    "Union[numpy.ndarray, numpy.void]"
                ],
                "parent2": [
                    "int",
                    "None",
                    "numpy.ndarray",
                    "Optional[int]",
                    "Union[numpy.ndarray, numpy.void]"
                ]
            }
        },
        "_make_children": {
            "name": "_make_children",
            "location": 69,
            "return": [
                "Tuple[(_T0, _T1)]"
            ],
            "arguments": {
                "parent1": [
                    "_T0"
                ],
                "parent2": [
                    "_T1"
                ]
            }
        },
        "_select_offspring": {
            "name": "_select_offspring",
            "location": 79,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "action_set": [
                    "int",
                    "List[FrozenSet[str]]",
                    "List[float]",
                    "Sequence[T]",
                    "List[str]",
                    "List[Dict]",
                    "bytes"
                ]
            }
        },
        "_apply_crossover": {
            "name": "_apply_crossover",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "child1": [
                    "str",
                    "bytes",
                    "int",
                    "List[str]",
                    "list[str]",
                    "Set[T]",
                    "set[T]"
                ],
                "child2": [
                    "bytes",
                    "str",
                    "list[str]",
                    "List[str]",
                    "list[tuple[typing.Union[float,float]]]",
                    "numpy.ndarray",
                    "List[Tuple[float, float]]"
                ],
                "parent1": [
                    "str",
                    "None",
                    "T",
                    "Optional[\"TreeNode\"]",
                    "Optional[\"Node\"]"
                ],
                "parent2": [
                    "str",
                    "None",
                    "T",
                    "Optional[\"TreeNode\"]",
                    "Optional[\"Node\"]"
                ]
            }
        },
        "_apply_crossover_in_area": {
            "name": "_apply_crossover_in_area",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "child1": [
                    "float",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "child2": [
                    "list[int]",
                    "List[int]",
                    "list[bytes]",
                    "int",
                    "numpy.ndarray",
                    "typing.Sequence[T]",
                    "List[bytes]",
                    "Sequence[T]"
                ],
                "x": [
                    "int",
                    "str",
                    "list",
                    "numpy.ndarray"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "_apply_mutation": {
            "name": "_apply_mutation",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "child": [
                    "str",
                    "list[int]",
                    "List[int]",
                    "int",
                    "list[float]",
                    "List[float]",
                    "list[]",
                    "list",
                    "numpy.ndarray"
                ],
                "cfg": [
                    "int",
                    "float",
                    "str"
                ],
                "situation": [
                    "numpy.ndarray",
                    "Dict[str, numpy.ndarray]"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/xcs/XCS.py": {
        "XCS.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int",
                    "list[]",
                    "list",
                    "list[int]",
                    "List[int]",
                    "bool"
                ],
                "population": [
                    "Optional[int]",
                    "None",
                    "Dict[str, str]",
                    "int",
                    "Optional[List[str]]",
                    "dict[str, str]",
                    "Optional[\"Environment\"]",
                    "list[str]",
                    "Optional[Tuple[int, int]]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "XCS.get_population": {
            "name": "get_population",
            "location": 33,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "XCS.get_cfg": {
            "name": "get_cfg",
            "location": 36,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "XCS._run_trial_exploit": {
            "name": "_run_trial_exploit",
            "location": 39,
            "return": [
                "Agent.TrialMetrics"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "trials": [],
                "current_trial": []
            }
        },
        "XCS._run_trial_explore": {
            "name": "_run_trial_explore",
            "location": 47,
            "return": [
                "Agent.TrialMetrics"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "dict",
                    "Callable"
                ],
                "trials": [],
                "current_trial": []
            }
        },
        "XCS._distribute_and_update": {
            "name": "_distribute_and_update",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action_set": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ],
                "situation": [
                    "str"
                ],
                "p": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Dict[int, List[int]]",
                    "dict[int, list[int]]",
                    "Set[str]",
                    "set[str]",
                    "Dict[str, int]",
                    "dict[str, int]",
                    "Iterator[str]",
                    "typing.Iterator"
                ]
            }
        },
        "XCS.select_action": {
            "name": "select_action",
            "location": 109,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "prediction_array": [
                    "list[str]",
                    "int",
                    "List[str]"
                ],
                "match_set": [
                    "int",
                    "str",
                    "Iterable",
                    "list",
                    "bool"
                ]
            }
        },
        "XCS.do_action_set_subsumption": {
            "name": "do_action_set_subsumption",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action_set": [
                    "Mapping",
                    "str",
                    "Sequence[str]",
                    "Tuple[int, str]",
                    "Iterator[object]"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/xcs/__init__.py": {},
    "pyalcs-master/lcs/agents/xncs/Backpropagation.py": {
        "Backpropagation.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Backpropagation.insert_into_bp": {
            "name": "insert_into_bp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "classifier": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "list",
                    "list[]",
                    "tuple",
                    "tuple[]"
                ],
                "update_vector": [
                    "list[list[str]]",
                    "List[List[str]]",
                    "list[list[]]",
                    "bool",
                    "List[List]",
                    "list[dict[, ]]",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "Backpropagation.update_bp": {
            "name": "update_bp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backpropagation.check_and_update": {
            "name": "check_and_update",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/lcs/agents/xncs/Classifier.py": {
        "Classifier.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "bool",
                    "None",
                    "str",
                    "Optional[Dict]",
                    "List[str]",
                    "dict[, ]",
                    "int",
                    "list[str]"
                ],
                "condition": [
                    "Optional[Union[(str, xcs.Condition.Condition)]]"
                ],
                "action": [
                    "Optional[int]"
                ],
                "time_stamp": [
                    "int"
                ],
                "effect": [
                    "str",
                    "None",
                    "int",
                    "List[List[str]]",
                    "list[list[str]]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Classifier.__eq__": {
            "name": "__eq__",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[float]",
                    "float",
                    "Optional[\"Cell\"]",
                    "None"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/xncs/ClassifiersList.py": {
        "ClassifiersList.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ClassifiersList.generate_covering_classifier": {
            "name": "generate_covering_classifier",
            "location": 19,
            "return": [
                "Classifier",
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "situation": [
                    "List[str]",
                    "List[int]",
                    "str",
                    "List[float]"
                ],
                "action": [
                    "bool",
                    "float",
                    "typing.Callable[numpy.ndarray, numpy.ndarray]",
                    "Callable[[numpy.ndarray], numpy.ndarray]",
                    "list[tuple[typing.Union[typing.Any,typing.Any,typing.Any]]]",
                    "int",
                    "list[dict[, ]]",
                    "List[Tuple[Any, Any, Any]]",
                    "List[dict]"
                ],
                "time_stamp": [
                    "bool",
                    "float",
                    "typing.Callable[numpy.ndarray, numpy.ndarray]",
                    "Callable[[numpy.ndarray], numpy.ndarray]",
                    "list[tuple[typing.Union[typing.Any,typing.Any,typing.Any]]]",
                    "int",
                    "list[dict[, ]]",
                    "List[Tuple[Any, Any, Any]]",
                    "List[dict]"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/xncs/Configuration.py": {
        "Configuration.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number_of_actions": [
                    "int"
                ],
                "lmc": [
                    "int"
                ],
                "lem": [
                    "float"
                ],
                "classifier_wildcard": [
                    "str"
                ],
                "max_population": [
                    "int"
                ],
                "learning_rate": [
                    "float"
                ],
                "alpha": [
                    "float"
                ],
                "epsilon_0": [
                    "float"
                ],
                "v": [
                    "int"
                ],
                "gamma": [
                    "float"
                ],
                "ga_threshold": [
                    "int"
                ],
                "chi": [
                    "float"
                ],
                "mutation_chance": [
                    "float"
                ],
                "deletion_threshold": [
                    "int"
                ],
                "delta": [
                    "float"
                ],
                "subsumption_threshold": [
                    "int"
                ],
                "covering_wildcard_chance": [
                    "float"
                ],
                "initial_prediction": [
                    "float"
                ],
                "initial_error": [
                    "float"
                ],
                "initial_fitness": [
                    "float"
                ],
                "epsilon": [
                    "float"
                ],
                "do_ga_subsumption": [
                    "bool"
                ],
                "do_action_set_subsumption": [
                    "bool"
                ],
                "metrics_trial_frequency": [
                    "int"
                ],
                "user_metrics_collector_fcn": [
                    "Callable"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/xncs/Effect.py": {
        "Effect.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "observation": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[Any,Any, bool]"
                ]
            }
        },
        "Effect.subsumes": {
            "name": "subsumes",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "dict",
                    "typing.AbstractSet",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/xncs/XNCS.py": {
        "XNCS.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int",
                    "str"
                ],
                "population": [
                    "Optional[lcs.agents.xncs.ClassifiersList.ClassifiersList]"
                ]
            }
        },
        "XNCS._run_trial_explore": {
            "name": "_run_trial_explore",
            "location": 31,
            "return": [
                "lcs.agents.Agent.TrialMetrics"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "dict",
                    "Callable"
                ],
                "trials": [],
                "current_trial": []
            }
        },
        "XNCS._distribute_and_update": {
            "name": "_distribute_and_update",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action_set": [
                    "dict",
                    "dict[, ]",
                    "Tuple[Any, Any]",
                    "str",
                    "tuple[typing.Union[typing.Any,typing.Any]]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "situation": [
                    "dict",
                    "dict[, ]",
                    "Tuple[Any, Any]",
                    "str",
                    "tuple[typing.Union[typing.Any,typing.Any]]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "p": [
                    "str"
                ]
            }
        },
        "XNCS._compare_effect": {
            "name": "_compare_effect",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action_set": [
                    "str"
                ],
                "situation": [
                    "Union[float, int]",
                    "float",
                    "Collection[int]",
                    "Dict[int, Dict[str, str]]",
                    "int",
                    "Optional[Union[bool, Any]]",
                    "typing.Collection",
                    "dict[int, dict[str, str]]",
                    "typing.Any",
                    "None"
                ]
            }
        }
    },
    "pyalcs-master/lcs/agents/xncs/__init__.py": {},
    "pyalcs-master/lcs/agents/yacs/yacs.py": {
        "DontCare.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Condition.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "observation": [
                    "str",
                    "bool"
                ]
            }
        },
        "Condition.random_matching": {
            "name": "random_matching",
            "location": 82,
            "return": [
                "Generator[(Condition, Any, Any)]"
            ],
            "arguments": {
                "p0": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Condition.expected_improvements": {
            "name": "expected_improvements",
            "location": 92,
            "return": [
                "str",
                "list[None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Condition.generality": {
            "name": "generality",
            "location": 96,
            "return": [
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Condition.is_more_specialized": {
            "name": "is_more_specialized",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Condition"
                ]
            }
        },
        "Condition.is_more_general": {
            "name": "is_more_general",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Condition"
                ]
            }
        },
        "Condition.specificity": {
            "name": "specificity",
            "location": 144,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Condition.does_match": {
            "name": "does_match",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Condition.increase_eis": {
            "name": "increase_eis",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "int",
                    "bool"
                ],
                "beta": [
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Condition.decrease_eis": {
            "name": "decrease_eis",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "int",
                    "bool"
                ],
                "beta": [
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Condition.subsumes": {
            "name": "subsumes",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "list[str]",
                    "List[str]",
                    "int",
                    "Union[int, float]",
                    "float",
                    "AbstractSet[T]",
                    "typing.AbstractSet"
                ]
            }
        },
        "Effect.diff": {
            "name": "diff",
            "location": 170,
            "return": [
                "Effect"
            ],
            "arguments": {
                "p0": [
                    "Optional[lcs.Perception.Perception]"
                ],
                "p1": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Effect.passthrough": {
            "name": "passthrough",
            "location": 179,
            "return": [
                "lcs.Perception.Perception"
            ],
            "arguments": {
                "self": [],
                "obs": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Effect.subsumes": {
            "name": "subsumes",
            "location": 185,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "list[str]",
                    "List[str]",
                    "int",
                    "Union[int, float]",
                    "float",
                    "AbstractSet[T]",
                    "typing.AbstractSet"
                ]
            }
        },
        "Classifier.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "Optional[Union[(Condition, str)]]"
                ],
                "action": [
                    "Optional[int]"
                ],
                "effect": [
                    "Optional[Union[(Effect, str)]]"
                ],
                "reward": [
                    "float"
                ],
                "debug": [
                    "dict"
                ],
                "cfg": [
                    "Optional[Configuration]"
                ]
            }
        },
        "Classifier.__repr__": {
            "name": "__repr__",
            "location": 221,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.trace_full": {
            "name": "trace_full",
            "location": 225,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.oscillating": {
            "name": "oscillating",
            "location": 229,
            "return": [
                "bool",
                "float",
                "List[Dict[str, str]]",
                "Iterable[str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.is_reliable": {
            "name": "is_reliable",
            "location": 233,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.anticipation": {
            "name": "anticipation",
            "location": 236,
            "return": [
                "lcs.Perception.Perception"
            ],
            "arguments": {
                "self": [],
                "obs": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Classifier.does_match": {
            "name": "does_match",
            "location": 239,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "situation": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "Classifier.add_to_trace": {
            "name": "add_to_trace",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mark": [
                    "ClassifierTrace"
                ]
            }
        },
        "Classifier.is_specializable": {
            "name": "is_specializable",
            "location": 245,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.update_reward": {
            "name": "update_reward",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env_reward": [
                    "int",
                    "float",
                    "bool",
                    "dict[, ]",
                    "dict"
                ]
            }
        },
        "Classifier.predicts_successfully": {
            "name": "predicts_successfully",
            "location": 251,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "action": [
                    "int"
                ],
                "p1": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "ClassifiersList.__init__": {
            "name": "__init__",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifiersList.form_match_set": {
            "name": "form_match_set",
            "location": 267,
            "return": [
                "ClassifiersList"
            ],
            "arguments": {
                "self": [
                    "_TClassifiersList"
                ],
                "situation": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "ClassifiersList.form_action_set": {
            "name": "form_action_set",
            "location": 271,
            "return": [
                "ClassifiersList"
            ],
            "arguments": {
                "self": [
                    "_TClassifiersList"
                ],
                "action": [
                    "int"
                ]
            }
        },
        "LatentLearning.__init__": {
            "name": "__init__",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Configuration"
                ]
            }
        },
        "LatentLearning.cover_classifier": {
            "name": "cover_classifier",
            "location": 285,
            "return": [
                "Optional[Classifier]"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "ClassifiersList"
                ],
                "action": [
                    "int"
                ],
                "p0": [
                    "Optional[lcs.Perception.Perception]"
                ],
                "p1": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "LatentLearning.effect_covering": {
            "name": "effect_covering",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "ClassifiersList"
                ],
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "p1": [
                    "lcs.Perception.Perception"
                ],
                "prev_action": [
                    "int"
                ]
            }
        },
        "LatentLearning.specialize": {
            "name": "specialize",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pop": [
                    "ClassifiersList"
                ]
            }
        },
        "LatentLearning.select_accurate_classifiers": {
            "name": "select_accurate_classifiers",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "population": [
                    "ClassifiersList"
                ]
            }
        },
        "LatentLearning.specialize_condition": {
            "name": "specialize_condition",
            "location": 417,
            "return": [
                "Generator[(Classifier, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "pop": [
                    "Union[(ClassifiersList, list)]"
                ]
            }
        },
        "LatentLearning.mutspec": {
            "name": "mutspec",
            "location": 439,
            "return": [
                "Generator[(Classifier, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "cl": [
                    "Classifier"
                ],
                "feature_idx": [
                    "int"
                ]
            }
        },
        "PolicyLearning.__init__": {
            "name": "__init__",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Configuration"
                ]
            }
        },
        "PolicyLearning.update_optimal_policy": {
            "name": "update_optimal_policy",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pop": [
                    "ClassifiersList"
                ],
                "desirability_values": [
                    "Dict[(lcs.Perception.Perception, float)]"
                ],
                "obs": [
                    "lcs.Perception.Perception"
                ],
                "action": [
                    "int"
                ],
                "env_reward": [
                    "int"
                ]
            }
        },
        "PolicyLearning.select_action": {
            "name": "select_action",
            "location": 488,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "match_set": [
                    "ClassifiersList"
                ],
                "desirability_values": [
                    "Dict[(lcs.Perception.Perception, float)]"
                ],
                "obs": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "YACS.__init__": {
            "name": "__init__",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Configuration"
                ],
                "population": [
                    "ClassifiersList"
                ],
                "desirability_values": [
                    "Dict[(lcs.Perception.Perception, float)]"
                ]
            }
        },
        "YACS.get_population": {
            "name": "get_population",
            "location": 519,
            "return": [
                "ClassifiersList"
            ],
            "arguments": {
                "self": []
            }
        },
        "YACS.get_cfg": {
            "name": "get_cfg",
            "location": 522,
            "return": [
                "Configuration"
            ],
            "arguments": {
                "self": []
            }
        },
        "YACS.remember_situation": {
            "name": "remember_situation",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "YACS._run_trial_explore": {
            "name": "_run_trial_explore",
            "location": 535,
            "return": [
                "Agent.TrialMetrics"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Union",
                    "dict"
                ],
                "trials": [],
                "current_trial": []
            }
        },
        "YACS._run_trial_exploit": {
            "name": "_run_trial_exploit",
            "location": 586,
            "return": [
                "Agent.TrialMetrics"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Union",
                    "dict"
                ],
                "trials": [],
                "current_trial": []
            }
        },
        "Condition.is_more_specialized.is_less_general": {
            "name": "is_less_general",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]"
                ],
                "o": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Condition.is_more_specialized.is_different": {
            "name": "is_different",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [],
                "o": []
            }
        },
        "Condition.is_more_general.is_more_general": {
            "name": "is_more_general",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [],
                "o": []
            }
        },
        "Condition.is_more_general.is_different": {
            "name": "is_different",
            "location": 130,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Set[int]",
                    "FrozenSet[int]"
                ],
                "o": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Set[int]",
                    "FrozenSet[int]"
                ]
            }
        },
        "Classifier.__init__.build_perception_string": {
            "name": "build_perception_string",
            "location": 203,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "bool"
                ],
                "initial": [
                    "str",
                    "list"
                ],
                "length": [
                    "int",
                    "Dict[str, int]",
                    "List[str]",
                    "Optional[int]"
                ]
            }
        },
        "LatentLearning.cover_classifier._neither_more_general_nor_more_specialized": {
            "name": "_neither_more_general_nor_more_specialized",
            "location": 291,
            "return": [
                "bool"
            ],
            "arguments": {
                "cond": [],
                "pop": []
            }
        },
        "LatentLearning.specialize.keyfunc": {
            "name": "keyfunc",
            "location": 393,
            "return": [
                "tuple[str]"
            ],
            "arguments": {
                "cl": []
            }
        },
        "PolicyLearning.select_action.quality": {
            "name": "quality",
            "location": 493,
            "return": [],
            "arguments": {
                "cl": []
            }
        }
    },
    "pyalcs-master/lcs/agents/yacs/__init__.py": {},
    "pyalcs-master/lcs/representations/RealValueEncoder.py": {
        "RealValueEncoder.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resolution_bits": [
                    "int"
                ]
            }
        },
        "RealValueEncoder.range": {
            "name": "range",
            "location": 25,
            "return": [
                "tuple[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RealValueEncoder.encode": {
            "name": "encode",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "float"
                ],
                "noise": [
                    "float"
                ]
            }
        },
        "RealValueEncoder.decode": {
            "name": "decode",
            "location": 79,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "encoded_val": [
                    "int"
                ]
            }
        }
    },
    "pyalcs-master/lcs/representations/UBR.py": {
        "UBR.lower_bound": {
            "name": "lower_bound",
            "location": 18,
            "return": [
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UBR.upper_bound": {
            "name": "upper_bound",
            "location": 22,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UBR.bound_span": {
            "name": "bound_span",
            "location": 26,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UBR.incorporates": {
            "name": "incorporates",
            "location": 29,
            "return": [
                "bool",
                "int",
                "Dict[str, int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str"
                ]
            }
        },
        "UBR.__contains__": {
            "name": "__contains__",
            "location": 46,
            "return": [
                "bool",
                "str",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "UBR.__hash__": {
            "name": "__hash__",
            "location": 49,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UBR.__eq__": {
            "name": "__eq__",
            "location": 52,
            "return": [
                "bool",
                "str",
                "Iterable[int]",
                "int",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "int",
                    "T"
                ]
            }
        }
    },
    "pyalcs-master/lcs/representations/visualization.py": {
        "_scale": {
            "name": "_scale",
            "location": 5,
            "return": [
                "int"
            ],
            "arguments": {
                "val": [
                    "int"
                ],
                "max_range": [
                    "int"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "visualize": {
            "name": "visualize",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "interval": [
                    "Tuple[(int, int)]"
                ],
                "val_range": [
                    "Tuple[(int, int)]"
                ],
                "buckets": [
                    "int"
                ]
            }
        },
        "visualize.select_value": {
            "name": "select_value",
            "location": 13,
            "return": [
                "typing.Text",
                "int",
                "str",
                "Tuple[int, int]",
                "Tuple[str, int]",
                "T",
                "float"
            ],
            "arguments": {
                "current": [
                    "Tuple[float, float]",
                    "str"
                ],
                "interval": [
                    "int",
                    "str",
                    "Tuple[int, int]",
                    "Tuple[str, int]",
                    "T",
                    "float"
                ],
                "mapped": [
                    "list"
                ]
            }
        }
    },
    "pyalcs-master/lcs/representations/__init__.py": {},
    "pyalcs-master/lcs/strategies/anticipatory_learning_process.py": {
        "add_classifier": {
            "name": "add_classifier",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "child": [
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "population": [
                    "bytes",
                    "bool",
                    "Exception",
                    "Callable[..., bool]",
                    "str",
                    "Optional[str]"
                ],
                "new_list": [
                    "list[bytes]",
                    "int",
                    "list[]",
                    "List[bytes]",
                    "list[typing.Union[\"PipeChain\",str]]",
                    "list[list[typing.Any]]",
                    "str",
                    "list",
                    "List[Union[\"PipeChain\", str]]",
                    "List[List[Any]]"
                ],
                "theta_exp": [
                    "int"
                ]
            }
        }
    },
    "pyalcs-master/lcs/strategies/genetic_algorithms.py": {
        "should_apply": {
            "name": "should_apply",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "action_set": [],
                "time": [
                    "int"
                ],
                "theta_ga": [
                    "int"
                ]
            }
        },
        "set_timestamps": {
            "name": "set_timestamps",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "action_set": [],
                "epoch": [
                    "int"
                ]
            }
        },
        "roulette_wheel_selection": {
            "name": "roulette_wheel_selection",
            "location": 65,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "population": [],
                "fitnessfunc": [
                    "Callable"
                ]
            }
        },
        "generalizing_mutation": {
            "name": "generalizing_mutation",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "cl": [],
                "mu": [
                    "float"
                ]
            }
        },
        "two_point_crossover": {
            "name": "two_point_crossover",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "parent": [],
                "donor": []
            }
        },
        "add_classifier": {
            "name": "add_classifier",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "cl": [],
                "p": [],
                "population": [],
                "match_set": [],
                "action_set": [],
                "do_subsumption": [
                    "bool"
                ],
                "theta_exp": [
                    "int"
                ]
            }
        },
        "delete_classifiers": {
            "name": "delete_classifiers",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "population": [],
                "match_set": [],
                "action_set": [],
                "insize": [
                    "int"
                ],
                "theta_as": [
                    "int"
                ]
            }
        },
        "_is_preferred_to_delete": {
            "name": "_is_preferred_to_delete",
            "location": 203,
            "return": [
                "bool"
            ],
            "arguments": {
                "cl_del": [],
                "cl": []
            }
        },
        "_find_old_classifier": {
            "name": "_find_old_classifier",
            "location": 231,
            "return": [],
            "arguments": {
                "population": [],
                "cl": [],
                "use_subsumption": [
                    "bool"
                ],
                "theta_exp": [
                    "int"
                ]
            }
        },
        "_find_similar": {
            "name": "_find_similar",
            "location": 254,
            "return": [],
            "arguments": {
                "other_cl": [],
                "population": []
            }
        },
        "_weighted_random_choice": {
            "name": "_weighted_random_choice",
            "location": 273,
            "return": [],
            "arguments": {
                "choices": [
                    "dict"
                ]
            }
        }
    },
    "pyalcs-master/lcs/strategies/reinforcement_learning.py": {
        "bucket_brigade_update": {
            "name": "bucket_brigade_update",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "cl": [
                    "int",
                    "str"
                ],
                "prev_cl": [
                    "bool"
                ],
                "reward": [
                    "int"
                ],
                "bid_ratio": [
                    "float"
                ]
            }
        },
        "bucket_brigade_update_final": {
            "name": "bucket_brigade_update_final",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "cl": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ],
                "reward": [
                    "int"
                ],
                "bid_ratio": [
                    "float"
                ]
            }
        },
        "update_classifier": {
            "name": "update_classifier",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "cl": [
                    "typing.Type",
                    "bool",
                    "Type",
                    "float",
                    "None",
                    "Optional[int]",
                    "Type[T]"
                ],
                "step_reward": [
                    "int"
                ],
                "max_fitness": [
                    "float"
                ],
                "beta": [
                    "float"
                ],
                "gamma": [
                    "float"
                ]
            }
        },
        "simple_q_learning": {
            "name": "simple_q_learning",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "prev_reward": [
                    "int",
                    "Callable",
                    "str"
                ],
                "reward": [
                    "int",
                    "Callable",
                    "str"
                ],
                "beta": [
                    "int",
                    "Callable",
                    "str"
                ],
                "gamma": [
                    "int",
                    "Callable",
                    "str"
                ],
                "best_prediction": [
                    "int",
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "pyalcs-master/lcs/strategies/subsumption.py": {
        "find_subsumers": {
            "name": "find_subsumers",
            "location": 4,
            "return": [
                "list"
            ],
            "arguments": {
                "cl": [
                    "str",
                    "int",
                    "Dict[str, Iterable[Any]]",
                    "dict[str, typing.Iterable[typing.Any]]",
                    "dict",
                    "dict[, ]"
                ],
                "population": [
                    "str",
                    "int"
                ],
                "theta_exp": [
                    "int"
                ]
            }
        },
        "does_subsume": {
            "name": "does_subsume",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "cl": [
                    "int",
                    "str"
                ],
                "other_cl": [
                    "int",
                    "str"
                ],
                "theta_exp": [
                    "int"
                ]
            }
        },
        "is_subsumer": {
            "name": "is_subsumer",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "cl": [
                    "Type",
                    "bool",
                    "type",
                    "Type[T]"
                ],
                "theta_exp": [
                    "int"
                ]
            }
        }
    },
    "pyalcs-master/lcs/strategies/__init__.py": {},
    "pyalcs-master/lcs/strategies/action_planning/action_planning.py": {
        "suitable_cl_exists": {
            "name": "suitable_cl_exists",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "classifiers": [
                    "dict[, ]",
                    "dict",
                    "Type",
                    "Type[T]",
                    "int",
                    "Callable[[T], bool]"
                ],
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "action": [
                    "int"
                ],
                "p1": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "search_goal_sequence": {
            "name": "search_goal_sequence",
            "location": 41,
            "return": [
                "list"
            ],
            "arguments": {
                "classifiers": [
                    "Optional[str]",
                    "int",
                    "Sequence[str]",
                    "float",
                    "str"
                ],
                "p0": [
                    "lcs.Perception.Perception"
                ],
                "p1": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "suitable_cl_exists._ok": {
            "name": "_ok",
            "location": 32,
            "return": [
                "bool",
                "str",
                "int",
                "Union[int, float, complex]",
                "Dict[str, Any]",
                "Type"
            ],
            "arguments": {
                "cl": [
                    "Callable",
                    "AsyncGenerator",
                    "Type",
                    "Optional[Callable[..., Any]]"
                ]
            }
        }
    },
    "pyalcs-master/lcs/strategies/action_planning/goal_sequence_searcher.py": {
        "GoalSequenceSearcher.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoalSequenceSearcher.search_goal_sequence": {
            "name": "search_goal_sequence",
            "location": 16,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "reliable_classifiers": [
                    "lcs.agents.acs2.ClassifiersList.ClassifiersList"
                ],
                "start": [
                    "lcs.Perception.Perception"
                ],
                "goal": [
                    "lcs.Perception.Perception"
                ]
            }
        },
        "GoalSequenceSearcher._search_one_forward_step": {
            "name": "_search_one_forward_step",
            "location": 78,
            "return": [
                "Tuple[(Optional[list], int)]"
            ],
            "arguments": {
                "self": [],
                "reliable_classifiers": [
                    "lcs.agents.acs2.ClassifiersList.ClassifiersList"
                ],
                "forward_size": [
                    "int"
                ],
                "forward_point": [
                    "int"
                ]
            }
        },
        "GoalSequenceSearcher._search_one_backward_step": {
            "name": "_search_one_backward_step",
            "location": 124,
            "return": [
                "Tuple[(Optional[list], int)]"
            ],
            "arguments": {
                "self": [],
                "reliable_classifiers": [
                    "lcs.agents.acs2.ClassifiersList.ClassifiersList"
                ],
                "backward_size": [
                    "int"
                ],
                "backward_point": [
                    "int"
                ]
            }
        },
        "GoalSequenceSearcher._form_new_classifiers": {
            "name": "_form_new_classifiers",
            "location": 170,
            "return": [
                "lcs.agents.acs2.ClassifiersList.ClassifiersList"
            ],
            "arguments": {
                "classifiers_lists": [
                    "List[lcs.agents.acs2.ClassifiersList.ClassifiersList]"
                ],
                "i": [
                    "int"
                ],
                "match_set_el": [
                    "list[]",
                    "lcs.agents.acs2.Classifier",
                    "list[list[int]]",
                    "list",
                    "List[List[int]]"
                ]
            }
        },
        "GoalSequenceSearcher._form_sequence_forwards": {
            "name": "_form_sequence_forwards",
            "location": 188,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ],
                "backward_sequence_idx": [
                    "int"
                ],
                "match_set_el": [
                    "bool",
                    "lcs.agents.acs2.Classifier"
                ]
            }
        },
        "GoalSequenceSearcher._form_sequence_backwards": {
            "name": "_form_sequence_backwards",
            "location": 224,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ],
                "forward_sequence_idx": [
                    "int"
                ],
                "match_set_el": [
                    "bool",
                    "lcs.agents.acs2.Classifier"
                ]
            }
        },
        "GoalSequenceSearcher.get_state_idx": {
            "name": "get_state_idx",
            "location": 260,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "perceptions": [
                    "List[lcs.Perception.Perception]"
                ],
                "state": [
                    "lcs.Perception.Perception"
                ]
            }
        }
    },
    "pyalcs-master/lcs/strategies/action_planning/__init__.py": {},
    "pyalcs-master/lcs/strategies/action_selection/ActionDelay.py": {
        "ActionDelay.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "all_actions": [
                    "int"
                ]
            }
        },
        "ActionDelay.__call__": {
            "name": "__call__",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "bool"
                ]
            }
        },
        "ActionDelay._handle_latest_action_for_acs2": {
            "name": "_handle_latest_action_for_acs2",
            "location": 39,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "pyalcs-master/lcs/strategies/action_selection/BestAction.py": {
        "BestAction.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "all_actions": [
                    "int"
                ]
            }
        },
        "BestAction.__call__": {
            "name": "__call__",
            "location": 9,
            "return": [
                "str",
                "Callable",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "List[List[int]]",
                    "int"
                ]
            }
        }
    },
    "pyalcs-master/lcs/strategies/action_selection/EpsilonGreedy.py": {
        "EpsilonGreedy.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "all_actions": [
                    "int"
                ]
            }
        },
        "EpsilonGreedy.__call__": {
            "name": "__call__",
            "location": 14,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "bool",
                    "tuple",
                    "tuple[]"
                ]
            }
        }
    },
    "pyalcs-master/lcs/strategies/action_selection/KnowledgeArray.py": {
        "KnowledgeArray.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "all_actions": [
                    "int"
                ]
            }
        },
        "KnowledgeArray.__call__": {
            "name": "__call__",
            "location": 26,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "bool"
                ]
            }
        },
        "KnowledgeArray._handle_knowledge_array_for_acs2": {
            "name": "_handle_knowledge_array_for_acs2",
            "location": 42,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "Optional[Dict[str, str]]",
                    "Set[str]",
                    "dict"
                ]
            }
        }
    },
    "pyalcs-master/lcs/strategies/action_selection/RandomAction.py": {
        "RandomAction.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "all_actions": [
                    "int"
                ]
            }
        },
        "RandomAction.__call__": {
            "name": "__call__",
            "location": 9,
            "return": [
                "Tuple[float, float]",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "pyalcs-master/lcs/strategies/action_selection/__init__.py": {},
    "pyalcs-master/tests/randommock.py": {
        "RandomMock.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "RandomMock.__call__": {
            "name": "__call__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SampleMock.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampleMock.__call__": {
            "name": "__call__",
            "location": 29,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/tests/test_randommock.py": {
        "TestRandomTest.test_randommock_returns_values_in_a_given_sequence": {
            "name": "test_randommock_returns_values_in_a_given_sequence",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRandomTest.test_samplemock_returns_list_elements_in_a_given_sequence_1": {
            "name": "test_samplemock_returns_list_elements_in_a_given_sequence_1",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRandomTest.test_samplemock_returns_list_elements_in_a_given_sequence_2": {
            "name": "test_samplemock_returns_list_elements_in_a_given_sequence_2",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRandomTest.test_samplemock_returns_list_elements_in_a_given_sequence_3": {
            "name": "test_samplemock_returns_list_elements_in_a_given_sequence_3",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRandomTest.test_testsample4": {
            "name": "test_testsample4",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/tests/__init__.py": {},
    "pyalcs-master/tests/lcs/test_Perception.py": {
        "TestPerception.test_should_handle_str_state": {
            "name": "test_should_handle_str_state",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPerception.test_should_handle_list_state": {
            "name": "test_should_handle_list_state",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPerception.test_should_list_float_state": {
            "name": "test_should_list_float_state",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPerception.test_should_fail_on_invalid_type": {
            "name": "test_should_fail_on_invalid_type",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPerception.test_should_create_empty_perception": {
            "name": "test_should_create_empty_perception",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPerception.test_should_compare_equal_hashes": {
            "name": "test_should_compare_equal_hashes",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPerception.test_should_detect_equal_perceptions": {
            "name": "test_should_detect_equal_perceptions",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_p1": [
                    "str",
                    "Dict[str, float]",
                    "dict[str, float]",
                    "Type",
                    "typing.Type"
                ],
                "_p2": [
                    "str",
                    "Dict[str, float]",
                    "dict[str, float]",
                    "Type",
                    "typing.Type"
                ],
                "_res": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/test_TypedList.py": {
        "TestTypedList.test_should_initialize_empty_int_list": {
            "name": "test_should_initialize_empty_int_list",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypedList.test_should_prepopulate_list": {
            "name": "test_should_prepopulate_list",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypedList.test_should_fail_when_prepopulating_list": {
            "name": "test_should_fail_when_prepopulating_list",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypedList.test_should_getitem": {
            "name": "test_should_getitem",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypedList.test_should_insert_items": {
            "name": "test_should_insert_items",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypedList.test_should_fail_when_inserting_items": {
            "name": "test_should_fail_when_inserting_items",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypedList.test_should_append_items": {
            "name": "test_should_append_items",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypedList.test_should_fail_when_appending": {
            "name": "test_should_fail_when_appending",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypedList.test_should_delete_item": {
            "name": "test_should_delete_item",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypedList.test_should_extend_list": {
            "name": "test_should_extend_list",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypedList.test_should_safe_remove_items": {
            "name": "test_should_safe_remove_items",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_type": [
                    "bool",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "_init": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "None"
                ],
                "_del": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Type",
                    "typing.Type"
                ],
                "_result": [
                    "list[]",
                    "list",
                    "str",
                    "list[str]",
                    "List[str]",
                    "Iterable[str]",
                    "Union[str, List[Any]]"
                ]
            }
        },
        "TestTypedList.test_should_sort_list": {
            "name": "test_should_sort_list",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/tests/lcs/test_utils.py": {
        "TestUtils.test_allow_good_types_without_exception": {
            "name": "test_allow_good_types_without_exception",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_deny_mismatched_types": {
            "name": "test_deny_mismatched_types",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/tests/lcs/__init__.py": {},
    "pyalcs-master/tests/lcs/agents/test_ImmutableSequence.py": {
        "TestImmutableSequence.test_should_hash": {
            "name": "test_should_hash",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/test_PerceptionString.py": {
        "TestPerceptionString.test_should_initialize_with_defaults": {
            "name": "test_should_initialize_with_defaults",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPerceptionString.test_should_create_empty_with_defaults": {
            "name": "test_should_create_empty_with_defaults",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPerceptionString.test_should_create_empty_for_ubr": {
            "name": "test_should_create_empty_for_ubr",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPerceptionString.test_should_safely_modify_single_attribute": {
            "name": "test_should_safely_modify_single_attribute",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/__init__.py": {},
    "pyalcs-master/tests/lcs/agents/acs/test_ACS.py": {
        "TestACS.cfg": {
            "name": "cfg",
            "location": 10,
            "return": [
                "Configuration",
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestACS.test_should_build_initial_population": {
            "name": "test_should_build_initial_population",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "bool",
                    "str",
                    "Dict[str, float]",
                    "dict[str, float]"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/acs/test_Classifier.py": {
        "TestClassifier.cfg": {
            "name": "cfg",
            "location": 10,
            "return": [
                "Configuration",
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClassifier.test_should_create_general_classifier": {
            "name": "test_should_create_general_classifier",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "set",
                    "set[]",
                    "Dict[str, Sequence[str]]",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "TestClassifier.test_distinguish_general_classifier": {
            "name": "test_distinguish_general_classifier",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_c": [
                    "Mapping[str, int]",
                    "int",
                    "typing.Mapping",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "_e": [
                    "Mapping[str, int]",
                    "int",
                    "typing.Mapping",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "_result": [
                    "str",
                    "typing.Callable[, ]",
                    "T",
                    "Callable"
                ],
                "cfg": [
                    "Mapping[str, int]",
                    "int",
                    "typing.Mapping",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestClassifier.test_should_decrease_quality": {
            "name": "test_should_decrease_quality",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestClassifier.test_should_increase_quality": {
            "name": "test_should_increase_quality",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestClassifier.test_should_detect_correctable_classifier": {
            "name": "test_should_detect_correctable_classifier",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_c": [
                    "int",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "_e": [
                    "int",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "_p0": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "_p1": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "_result": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "cfg": [
                    "int",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestClassifier.test_should_construct_correct_classifier": {
            "name": "test_should_construct_correct_classifier",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/acs/test_Condition.py": {
        "TestCondition.test_should_get_initialized_with_str": {
            "name": "test_should_get_initialized_with_str",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCondition.test_equal": {
            "name": "test_equal",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCondition.test_should_generalize": {
            "name": "test_should_generalize",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCondition.test_should_generalize_specific_attributes_randomly": {
            "name": "test_should_generalize_specific_attributes_randomly",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_condition": [
                    "str",
                    "float"
                ],
                "_spec_before": [
                    "str",
                    "float"
                ],
                "_spec_after": [
                    "str",
                    "float"
                ]
            }
        },
        "TestCondition.test_generalize_decrements_specificity": {
            "name": "test_generalize_decrements_specificity",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCondition.test_should_only_accept_strings": {
            "name": "test_should_only_accept_strings",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCondition.test_should_initialize_two_times_the_same_way": {
            "name": "test_should_initialize_two_times_the_same_way",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCondition.test_should_return_number_of_specified_elements": {
            "name": "test_should_return_number_of_specified_elements",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCondition.test_should_specialize_with_condition": {
            "name": "test_should_specialize_with_condition",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_condition": [
                    "str"
                ],
                "_diff": [
                    "str"
                ],
                "_result": [
                    "str"
                ]
            }
        },
        "TestCondition.test_should_match_perception": {
            "name": "test_should_match_perception",
            "location": 117,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_c": [],
                "_p": [],
                "_result": [
                    "int"
                ]
            }
        },
        "TestCondition.test_should_match_condition": {
            "name": "test_should_match_condition",
            "location": 131,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_c": [],
                "_other": [],
                "_result": [
                    "Callable",
                    "bytes",
                    "typing.Callable[, ]",
                    "bool",
                    "List[Dict[str, str]]",
                    "list[dict[str, str]]"
                ]
            }
        },
        "TestCondition.test_get_backwards_anticipation": {
            "name": "test_get_backwards_anticipation",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCondition.test_get_backwards_anticipation_2": {
            "name": "test_get_backwards_anticipation_2",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/acs/test_PMark.py": {
        "TestPMark.cfg": {
            "name": "cfg",
            "location": 10,
            "return": [
                "Configuration",
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPMark.test_should_initialize_mark": {
            "name": "test_should_initialize_mark",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int"
                ]
            }
        },
        "TestPMark.test_should_detect_if_marked": {
            "name": "test_should_detect_if_marked",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int"
                ]
            }
        },
        "TestPMark.test_should_set_single_mark": {
            "name": "test_should_set_single_mark",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int"
                ]
            }
        },
        "TestPMark.test_should_complement_mark_from_perception": {
            "name": "test_should_complement_mark_from_perception",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "TestPMark.test_should_get_differences_1": {
            "name": "test_should_get_differences_1",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_p0": [
                    "str"
                ],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestPMark.test_should_get_differences_2": {
            "name": "test_should_get_differences_2",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int"
                ]
            }
        },
        "TestPMark.test_should_get_differences_3": {
            "name": "test_should_get_differences_3",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int"
                ]
            }
        },
        "TestPMark.test_should_get_differences_4": {
            "name": "test_should_get_differences_4",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int"
                ]
            }
        },
        "TestPMark.test_should_get_differences_5": {
            "name": "test_should_get_differences_5",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/acs/__init__.py": {},
    "pyalcs-master/tests/lcs/agents/acs2/test_alp.py": {
        "TestALP.cfg": {
            "name": "cfg",
            "location": 16,
            "return": [
                "Configuration",
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestALP.test_should_handle_expected_case_1": {
            "name": "test_should_handle_expected_case_1",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "TestALP.test_should_handle_expected_case_2": {
            "name": "test_should_handle_expected_case_2",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "TestALP.test_should_handle_expected_case_3": {
            "name": "test_should_handle_expected_case_3",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Dict[str, Sequence[str]]",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "TestALP.test_should_handle_expected_case_4": {
            "name": "test_should_handle_expected_case_4",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "set",
                    "set[]",
                    "Dict[str, Sequence[str]]",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "TestALP.test_should_handle_unexpected_case_1": {
            "name": "test_should_handle_unexpected_case_1",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Container",
                    "typing.Container"
                ]
            }
        },
        "TestALP.test_should_handle_unexpected_case_2": {
            "name": "test_should_handle_unexpected_case_2",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "set",
                    "set[]"
                ]
            }
        },
        "TestALP.test_should_handle_unexpected_case_3": {
            "name": "test_should_handle_unexpected_case_3",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestALP.test_should_handle_unexpected_case_5": {
            "name": "test_should_handle_unexpected_case_5",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "set",
                    "set[]"
                ]
            }
        },
        "TestALP.test_should_handle_unexpected_case_6": {
            "name": "test_should_handle_unexpected_case_6",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "set",
                    "set[]"
                ]
            }
        },
        "TestALP.test_should_create_new_classifier_using_covering": {
            "name": "test_should_create_new_classifier_using_covering",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/acs2/test_Classifier.py": {
        "TestClassifier.cfg": {
            "name": "cfg",
            "location": 11,
            "return": [
                "Configuration",
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClassifier.test_equality": {
            "name": "test_equality",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_c1": [
                    "int",
                    "float",
                    "List[int]",
                    "list[int]"
                ],
                "_a1": [
                    "int",
                    "float",
                    "List[int]",
                    "list[int]"
                ],
                "_e1": [
                    "int",
                    "float",
                    "List[int]",
                    "list[int]"
                ],
                "_c2": [
                    "int",
                    "float",
                    "List[int]",
                    "list[int]"
                ],
                "_a2": [
                    "int",
                    "float",
                    "List[int]",
                    "list[int]"
                ],
                "_e2": [
                    "int",
                    "float",
                    "List[int]",
                    "list[int]"
                ],
                "_result": [],
                "cfg": [
                    "Callable",
                    "typing.Callable[, ]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "TestClassifier.test_should_calculate_fitness": {
            "name": "test_should_calculate_fitness",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestClassifier.test_should_anticipate_change": {
            "name": "test_should_anticipate_change",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestClassifier.test_should_anticipate_correctly": {
            "name": "test_should_anticipate_correctly",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestClassifier.test_should_calculate_specificity": {
            "name": "test_should_calculate_specificity",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_condition": [
                    "str",
                    "float"
                ],
                "_specificity": [
                    "str",
                    "float"
                ],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestClassifier.test_should_be_considered_as_reliable_1": {
            "name": "test_should_be_considered_as_reliable_1",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestClassifier.test_should_be_considered_as_reliable_2": {
            "name": "test_should_be_considered_as_reliable_2",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestClassifier.test_should_be_considered_as_inadequate_1": {
            "name": "test_should_be_considered_as_inadequate_1",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestClassifier.test_should_be_considered_as_inadequate_2": {
            "name": "test_should_be_considered_as_inadequate_2",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestClassifier.test_should_increase_experience": {
            "name": "test_should_increase_experience",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestClassifier.test_should_increase_quality": {
            "name": "test_should_increase_quality",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestClassifier.test_should_decrease_quality": {
            "name": "test_should_decrease_quality",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestClassifier.test_should_detect_correct_anticipation_1": {
            "name": "test_should_detect_correct_anticipation_1",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestClassifier.test_should_detect_correct_anticipation_2": {
            "name": "test_should_detect_correct_anticipation_2",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestClassifier.test_should_detect_correct_anticipation_3": {
            "name": "test_should_detect_correct_anticipation_3",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestClassifier.test_should_detect_correct_anticipation_4": {
            "name": "test_should_detect_correct_anticipation_4",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestClassifier.test_should_detect_correct_anticipation_5": {
            "name": "test_should_detect_correct_anticipation_5",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestClassifier.test_should_detect_correct_anticipation_6": {
            "name": "test_should_detect_correct_anticipation_6",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestClassifier.test_should_handle_pass_through_symbol": {
            "name": "test_should_handle_pass_through_symbol",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "TestClassifier.test_should_specialize": {
            "name": "test_should_specialize",
            "location": 237,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_p0": [
                    "str",
                    "bool",
                    "list[int]",
                    "int",
                    "List[int]"
                ],
                "_p1": [
                    "str",
                    "bool",
                    "list[int]",
                    "int",
                    "List[int]"
                ],
                "_init_cond": [
                    "str",
                    "bool",
                    "list[int]",
                    "int",
                    "List[int]"
                ],
                "_init_effect": [
                    "str",
                    "bool",
                    "list[int]",
                    "int",
                    "List[int]"
                ],
                "_res_cond": [
                    "str",
                    "bool",
                    "list[int]",
                    "int",
                    "List[int]"
                ],
                "_res_effect": [
                    "str",
                    "bool",
                    "list[int]",
                    "int",
                    "List[int]"
                ],
                "cfg": [
                    "str",
                    "bool",
                    "list[int]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "TestClassifier.test_should_specialize_wrt_wildcards": {
            "name": "test_should_specialize_wrt_wildcards",
            "location": 266,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_p0": [
                    "str",
                    "bool",
                    "list[int]",
                    "int",
                    "List[int]"
                ],
                "_p1": [
                    "str",
                    "bool",
                    "list[int]",
                    "int",
                    "List[int]"
                ],
                "_init_cond": [
                    "str",
                    "bool",
                    "list[int]",
                    "int",
                    "List[int]"
                ],
                "_init_effect": [
                    "str",
                    "bool",
                    "list[int]",
                    "int",
                    "List[int]"
                ],
                "_res_cond": [
                    "str",
                    "bool",
                    "list[int]",
                    "int",
                    "List[int]"
                ],
                "_res_effect": [
                    "str",
                    "bool",
                    "list[int]",
                    "int",
                    "List[int]"
                ],
                "cfg": [
                    "str",
                    "bool",
                    "list[int]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "TestClassifier.test_should_count_specified_unchanging_attributes": {
            "name": "test_should_count_specified_unchanging_attributes",
            "location": 292,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_condition": [
                    "str",
                    "float"
                ],
                "_effect": [
                    "str",
                    "float"
                ],
                "_sua": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestClassifier.test_copy_from_and_change_does_not_influence_another_effect": {
            "name": "test_copy_from_and_change_does_not_influence_another_effect",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "TestClassifier.test_should_copy_classifier": {
            "name": "test_should_copy_classifier",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "set",
                    "str",
                    "set[]"
                ]
            }
        },
        "TestClassifier.test_should_detect_similar_classifiers_1": {
            "name": "test_should_detect_similar_classifiers_1",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "set",
                    "set[]"
                ]
            }
        },
        "TestClassifier.test_similar_returns_true_if_differs_by_numbers": {
            "name": "test_similar_returns_true_if_differs_by_numbers",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "TestClassifier.test_should_detect_similar_classifiers_2": {
            "name": "test_should_detect_similar_classifiers_2",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "set",
                    "set[]"
                ]
            }
        },
        "TestClassifier.test_should_detect_more_general_classifier": {
            "name": "test_should_detect_more_general_classifier",
            "location": 558,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_c1_condition": [
                    "str",
                    "int",
                    "float"
                ],
                "_c2_condition": [
                    "str",
                    "int",
                    "float"
                ],
                "_result": [
                    "Dict[str, str]",
                    "float",
                    "dict[str, str]"
                ],
                "cfg": [
                    "int",
                    "list[int]",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "TestClassifier.test_should_set_mark_from_condition_1": {
            "name": "test_should_set_mark_from_condition_1",
            "location": 568,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "TestClassifier.test_should_set_mark_from_condition_2": {
            "name": "test_should_set_mark_from_condition_2",
            "location": 592,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "TestClassifier.test_should_set_mark_from_condition_3": {
            "name": "test_should_set_mark_from_condition_3",
            "location": 613,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "TestClassifier.test_should_set_mark_from_condition_4": {
            "name": "test_should_set_mark_from_condition_4",
            "location": 631,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "TestClassifier.test_should_predict_successfully_1": {
            "name": "test_should_predict_successfully_1",
            "location": 658,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestClassifier.test_should_not_generalize_unchanging_attribute": {
            "name": "test_should_not_generalize_unchanging_attribute",
            "location": 679,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_condition": [
                    "str",
                    "float"
                ],
                "_effect": [
                    "str",
                    "float"
                ],
                "_sua_before": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "_sua_after": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestClassifier.test_should_generalize_second_unchanging_attribute": {
            "name": "test_should_generalize_second_unchanging_attribute",
            "location": 692,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestClassifier.test_does_match_backwards": {
            "name": "test_does_match_backwards",
            "location": 715,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "_e": [
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "_result": [
                    "Callable[..., Awaitable]",
                    "bool",
                    "typing.Callable[..., collections.abc.Awaitable[]]",
                    "str"
                ]
            }
        },
        "TestClassifier.test_get_backwards_anticipation": {
            "name": "test_get_backwards_anticipation",
            "location": 731,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "_c": [
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "_e": [
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "_result": [
                    "Tuple[str, Any]",
                    "tuple[typing.Union[str,typing.Any]]"
                ]
            }
        },
        "TestClassifier.test_get_best_anticipation": {
            "name": "test_get_best_anticipation",
            "location": 748,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [],
                "_p0": [],
                "_result": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]",
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "typing.Iterable[tuple[typing.Union[int,int]]]"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/acs2/test_ClassifierList.py": {
        "TestClassifierList.cfg": {
            "name": "cfg",
            "location": 11,
            "return": [
                "Configuration",
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClassifierList.test_should_deny_insertion_illegal_types": {
            "name": "test_should_deny_insertion_illegal_types",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "TestClassifierList.test_should_insert_classifier": {
            "name": "test_should_insert_classifier",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestClassifierList.test_should_form_match_set": {
            "name": "test_should_form_match_set",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestClassifierList.test_should_form_action_set": {
            "name": "test_should_form_action_set",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestClassifierList.test_should_expand": {
            "name": "test_should_expand",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "set",
                    "set[]"
                ]
            }
        },
        "TestClassifierList.test_should_calculate_maximum_fitness": {
            "name": "test_should_calculate_maximum_fitness",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str"
                ]
            }
        },
        "TestClassifierList.test_should_apply_reinforcement_learning": {
            "name": "test_should_apply_reinforcement_learning",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestClassifierList.test_should_form_match_set_backwards": {
            "name": "test_should_form_match_set_backwards",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/acs2/test_Effect.py": {
        "TestEffect.test_should_initialize_correctly": {
            "name": "test_should_initialize_correctly",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEffect.test_should_get_initialized_with_string": {
            "name": "test_should_get_initialized_with_string",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEffect.test_should_set_effect_with_non_string_char": {
            "name": "test_should_set_effect_with_non_string_char",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEffect.test_should_detect_change": {
            "name": "test_should_detect_change",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_e": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "_result": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestEffect.test_should_check_if_specializable_1": {
            "name": "test_should_check_if_specializable_1",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEffect.test_should_check_if_specializable_2": {
            "name": "test_should_check_if_specializable_2",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEffect.test_should_check_if_specializable_3": {
            "name": "test_should_check_if_specializable_3",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEffect.test_should_check_if_specializable_4": {
            "name": "test_should_check_if_specializable_4",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEffect.test_should_check_if_specializable_5": {
            "name": "test_should_check_if_specializable_5",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEffect.test_should_check_if_specializable_6": {
            "name": "test_should_check_if_specializable_6",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEffect.test_should_check_if_specializable_7": {
            "name": "test_should_check_if_specializable_7",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEffect.test_eq": {
            "name": "test_eq",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEffect.test_does_match": {
            "name": "test_does_match",
            "location": 148,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_p0": [],
                "_p1": [],
                "_e": [],
                "_result": [
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestEffect.test_get_best_anticipation": {
            "name": "test_get_best_anticipation",
            "location": 166,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_p0": [
                    "str",
                    "bool"
                ],
                "_result": [
                    "str",
                    "int",
                    "list[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "TestEffect.test_does_specify_only_changes_backwards": {
            "name": "test_does_specify_only_changes_backwards",
            "location": 191,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_p0": [],
                "_p1": [],
                "_e": [],
                "_result": [
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestEffect.test_str": {
            "name": "test_str",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEffect.test_reduced_to_non_enhanced": {
            "name": "test_reduced_to_non_enhanced",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEffect.test_not_enhanced": {
            "name": "test_not_enhanced",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEffect.test_enhanced": {
            "name": "test_enhanced",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEffect.test_update_equivalence": {
            "name": "test_update_equivalence",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/acs2/test_ProbabilityEnhancedAttribute.py": {
        "TestProbabilityEnhancedAttribute.test_should_initialize_correctly_str": {
            "name": "test_should_initialize_correctly_str",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProbabilityEnhancedAttribute.test_should_initialize_correctly_dict": {
            "name": "test_should_initialize_correctly_dict",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProbabilityEnhancedAttribute.test_is_similar_0": {
            "name": "test_is_similar_0",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProbabilityEnhancedAttribute.test_is_similar_1": {
            "name": "test_is_similar_1",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProbabilityEnhancedAttribute.test_is_similar_2": {
            "name": "test_is_similar_2",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProbabilityEnhancedAttribute.test_is_similar_3": {
            "name": "test_is_similar_3",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProbabilityEnhancedAttribute.test_is_compact": {
            "name": "test_is_compact",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProbabilityEnhancedAttribute.test_make_compact": {
            "name": "test_make_compact",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProbabilityEnhancedAttribute.test_get_best_symbol": {
            "name": "test_get_best_symbol",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProbabilityEnhancedAttribute.test_insert_symbol": {
            "name": "test_insert_symbol",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProbabilityEnhancedAttribute.test_remove_symbol": {
            "name": "test_remove_symbol",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProbabilityEnhancedAttribute.test_remove_last_symbol": {
            "name": "test_remove_last_symbol",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/acs2/__init__.py": {},
    "pyalcs-master/tests/lcs/agents/acs2er/test_ACS2ER.py": {
        "TestACS2ER.cfg": {
            "name": "cfg",
            "location": 8,
            "return": [
                "Configuration",
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestACS2ER.test_explore_10_trials_singlestep_20_min_samples_learning_not_begins": {
            "name": "test_explore_10_trials_singlestep_20_min_samples_learning_not_begins",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestACS2ER.test_explore_50_trials_threestepspertrial_20_min_samples_learning_begins": {
            "name": "test_explore_50_trials_threestepspertrial_20_min_samples_learning_begins",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "EnvMock.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "steps": [
                    "int",
                    "float",
                    "bool"
                ],
                "trial_length": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "EnvMock.reset": {
            "name": "reset",
            "location": 49,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnvMock.step": {
            "name": "step",
            "location": 52,
            "return": [
                "Tuple[(List[str], int, bool, None)]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "ActionSpaceMock.sample": {
            "name": "sample",
            "location": 63,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/acs2er/test_ReplayMemory.py": {
        "TestReplayMemory.test_update_should_add_sample_properly": {
            "name": "test_update_should_add_sample_properly",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReplayMemory.test_update_should_drop_oldest_experience_if_size_exceeded": {
            "name": "test_update_should_drop_oldest_experience_if_size_exceeded",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/acs2er/__init__.py": {},
    "pyalcs-master/tests/lcs/agents/macs/test_Classifier.py": {
        "TestClassifier.cfg": {
            "name": "cfg",
            "location": 9,
            "return": [
                "Configuration",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClassifier.test_should_detect_inaccurate": {
            "name": "test_should_detect_inaccurate",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_g": [
                    "int",
                    "float",
                    "bytes",
                    "str",
                    "bool"
                ],
                "_b": [
                    "float",
                    "bool",
                    "str"
                ],
                "_er": [
                    "int",
                    "float",
                    "bytes",
                    "str",
                    "bool"
                ],
                "_res": [
                    "List[int]",
                    "str",
                    "list[int]",
                    "bytes"
                ],
                "cfg": [
                    "int",
                    "float",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "TestClassifier.test_should_detect_oscillating": {
            "name": "test_should_detect_oscillating",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_g": [
                    "int",
                    "float",
                    "bytes",
                    "str",
                    "bool"
                ],
                "_b": [
                    "float",
                    "bool",
                    "str"
                ],
                "_eo": [
                    "int",
                    "float",
                    "bytes",
                    "str",
                    "bool"
                ],
                "_res": [
                    "List[int]",
                    "str",
                    "list[int]",
                    "bytes"
                ],
                "cfg": [
                    "int",
                    "float",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/macs/test_ClassifiersList.py": {
        "TestClassifiersList.cfg": {
            "name": "cfg",
            "location": 9,
            "return": [
                "Configuration",
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClassifiersList.test_should_initialize": {
            "name": "test_should_initialize",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Iterable[Tuple[int, int]]",
                    "typing.Iterable[tuple[typing.Union[int,int]]]"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/macs/test_Condition.py": {
        "TestCondition.test_should_get_initialized": {
            "name": "test_should_get_initialized",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCondition.test_should_calculate_generality": {
            "name": "test_should_calculate_generality",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_c": [
                    "int",
                    "list[str]",
                    "bool",
                    "List[str]"
                ],
                "_res": [
                    "int",
                    "list[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "TestCondition.test_should_get_expected_improvements_property": {
            "name": "test_should_get_expected_improvements_property",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_c": [
                    "int"
                ],
                "_res": [
                    "int"
                ]
            }
        },
        "TestCondition.test_should_create_general_condition": {
            "name": "test_should_create_general_condition",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCondition.test_should_match_perception": {
            "name": "test_should_match_perception",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_c": [
                    "int",
                    "str"
                ],
                "_p": [
                    "int",
                    "str"
                ],
                "_res": [
                    "int",
                    "str"
                ]
            }
        },
        "TestCondition.test_should_match_perception_with_eis": {
            "name": "test_should_match_perception_with_eis",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCondition.test_should_detect_non_matching": {
            "name": "test_should_detect_non_matching",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_cond": [
                    "float",
                    "List[str]",
                    "list[str]"
                ],
                "_other": [
                    "float",
                    "List[str]",
                    "list[str]"
                ],
                "_res": [
                    "float",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TestCondition.test_should_generate_all_matching_conditions": {
            "name": "test_should_generate_all_matching_conditions",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_p": [
                    "str",
                    "int"
                ],
                "_res": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "TestCondition.test_should_return_index_to_specialize": {
            "name": "test_should_return_index_to_specialize",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_c": [
                    "List[int]",
                    "str",
                    "list[int]"
                ],
                "_eis": [
                    "List[int]",
                    "str",
                    "list[int]"
                ],
                "_res": [
                    "int",
                    "float"
                ]
            }
        },
        "TestCondition.test_should_return_index_to_generalized": {
            "name": "test_should_return_index_to_generalized",
            "location": 106,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_c": [
                    "List[int]",
                    "str",
                    "list[int]"
                ],
                "_ig": [
                    "List[int]",
                    "str",
                    "list[int]"
                ],
                "_res": [
                    "int",
                    "typing.Sequence[int]",
                    "Sequence[int]",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "list[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "TestCondition.test_should_generate_generalized_conditions": {
            "name": "test_should_generate_generalized_conditions",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCondition.test_should_generate_proper_number_of_new_conditions": {
            "name": "test_should_generate_proper_number_of_new_conditions",
            "location": 132,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_cond": [
                    "str"
                ],
                "_res": [
                    "str"
                ]
            }
        },
        "TestCondition.test_should_determine_more_general": {
            "name": "test_should_determine_more_general",
            "location": 145,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_self": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "_other": [
                    "bool",
                    "str",
                    "int"
                ],
                "_res": [
                    "float",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TestCondition.test_should_increase_by_widrow_hoff": {
            "name": "test_should_increase_by_widrow_hoff",
            "location": 168,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_init": [
                    "str"
                ],
                "_res": [
                    "int",
                    "str",
                    "typing.Sequence[int]",
                    "Sequence[int]",
                    "bool"
                ],
                "_idx": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "_param": [
                    "List[int]",
                    "str",
                    "list[int]",
                    "bool"
                ],
                "beta": [
                    "float",
                    "str",
                    "Tuple[str, str]",
                    "Callable"
                ]
            }
        },
        "TestCondition.test_should_decrease_by_widrow_hoff": {
            "name": "test_should_decrease_by_widrow_hoff",
            "location": 190,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_init": [
                    "str"
                ],
                "_res": [
                    "int",
                    "str",
                    "typing.Sequence[int]",
                    "Sequence[int]",
                    "bool"
                ],
                "_idx": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "_param": [
                    "List[int]",
                    "str",
                    "list[int]",
                    "bool"
                ],
                "beta": [
                    "float",
                    "str",
                    "Tuple[str, str]",
                    "Callable"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/macs/test_Effect.py": {
        "TestEffect.test_should_initialize": {
            "name": "test_should_initialize",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEffect.test_should_build_empty": {
            "name": "test_should_build_empty",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEffect.test_should_match": {
            "name": "test_should_match",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_e": [
                    "int",
                    "Optional[List[str]]",
                    "str",
                    "list[str]",
                    "Callable",
                    "None",
                    "typing.Callable[, ]"
                ],
                "_p": [
                    "int",
                    "Optional[List[str]]",
                    "str",
                    "list[str]",
                    "Callable",
                    "None",
                    "typing.Callable[, ]"
                ],
                "_res": [
                    "int",
                    "Optional[List[str]]",
                    "str",
                    "list[str]",
                    "Callable",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestEffect.test_should_detect_conflicts": {
            "name": "test_should_detect_conflicts",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_e1": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "_e2": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "_res": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestEffect.test_should_generate": {
            "name": "test_should_generate",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_p1": [
                    "str"
                ],
                "_res": [
                    "str",
                    "int"
                ]
            }
        },
        "TestEffect.test_should_sort": {
            "name": "test_should_sort",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/macs/test_LatentLearning.py": {
        "TestLatentLearning.cfg": {
            "name": "cfg",
            "location": 17,
            "return": [
                "Configuration",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLatentLearning.ll": {
            "name": "ll",
            "location": 21,
            "return": [
                "LatentLearning",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestLatentLearning.population": {
            "name": "population",
            "location": 25,
            "return": [
                "ClassifiersList",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "bytes",
                    "float",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestLatentLearning.test_should_evaluate_classifiers": {
            "name": "test_should_evaluate_classifiers",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "ll": [
                    "int"
                ],
                "cfg": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "TestLatentLearning.test_should_suppress_inaccurate_classifier": {
            "name": "test_should_suppress_inaccurate_classifier",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "Tuple[int]",
                    "str",
                    "tuple[int]",
                    "int"
                ],
                "ll": [
                    "int",
                    "BaseException"
                ],
                "cfg": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "TestLatentLearning.test_should_generate_using_mutspec": {
            "name": "test_should_generate_using_mutspec",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ll": [
                    "int",
                    "Tuple[int]"
                ],
                "cfg": [
                    "set",
                    "set[]",
                    "Dict[str, Sequence[str]]",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "TestLatentLearning.test_should_specialize_conditions": {
            "name": "test_should_specialize_conditions",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "Tuple[int]",
                    "tuple[int]"
                ],
                "ll": [
                    "int",
                    "BaseException"
                ],
                "cfg": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "TestLatentLearning.test_should_update_ig_estimates": {
            "name": "test_should_update_ig_estimates",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "ll": [
                    "str"
                ],
                "cfg": []
            }
        },
        "TestLatentLearning.test_should_generalize_conditions": {
            "name": "test_should_generalize_conditions",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ll": [
                    "Union[int, float]",
                    "int",
                    "str"
                ],
                "cfg": [
                    "str"
                ],
                "mocker": []
            }
        },
        "TestLatentLearning.test_should_cover_initial_transitions": {
            "name": "test_should_cover_initial_transitions",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ll": [
                    "int"
                ],
                "cfg": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "TestLatentLearning.test_should_cover_transitions": {
            "name": "test_should_cover_transitions",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "int"
                ],
                "ll": [
                    "int"
                ],
                "cfg": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "TestLatentLearning._assert_gb_metrics": {
            "name": "_assert_gb_metrics",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "cl": [
                    "lcs.agents.macs.macs.Classifier"
                ],
                "ga": [
                    "typing.Type",
                    "float",
                    "Type",
                    "type"
                ],
                "ba": [
                    "int",
                    "bytes",
                    "str",
                    "dict[, ]",
                    "float",
                    "dict",
                    "list[str]",
                    "List[str]",
                    "T",
                    "\"CategoricalDtype\""
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/macs/test_MACS.py": {
        "TestMACS.cfg": {
            "name": "cfg",
            "location": 12,
            "return": [
                "Configuration",
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMACS.cfg2": {
            "name": "cfg2",
            "location": 17,
            "return": [
                "Configuration",
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMACS.agent": {
            "name": "agent",
            "location": 22,
            "return": [
                "MACS",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestMACS.test_should_validate_if_perception_is_in_range": {
            "name": "test_should_validate_if_perception_is_in_range",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "dict"
                ]
            }
        },
        "TestMACS.test_should_remember_perception": {
            "name": "test_should_remember_perception",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "str"
                ]
            }
        },
        "TestMACS.test_should_get_anticipations": {
            "name": "test_should_get_anticipations",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg2": [
                    "Iterable[Tuple[int, int]]",
                    "typing.Iterable[tuple[typing.Union[int,int]]]",
                    "Iterable[int]",
                    "typing.Iterable[int]"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/macs/__init__.py": {},
    "pyalcs-master/tests/lcs/agents/racs/test_action_selection.py": {
        "TestActionSelection.cfg": {
            "name": "cfg",
            "location": 14,
            "return": [
                "Configuration",
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestActionSelection.test_should_return_all_possible_actions": {
            "name": "test_should_return_all_possible_actions",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "TestActionSelection.test_should_exploit_when_no_effect_specified": {
            "name": "test_should_exploit_when_no_effect_specified",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "set",
                    "set[]"
                ]
            }
        },
        "TestActionSelection.test_should_exploit_with_single_classifier": {
            "name": "test_should_exploit_with_single_classifier",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "TestActionSelection.test_should_exploit_using_majority_voting": {
            "name": "test_should_exploit_using_majority_voting",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Container",
                    "typing.Container"
                ]
            }
        },
        "TestActionSelection.test_should_return_random_action": {
            "name": "test_should_return_random_action",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int",
                    "float",
                    "Tuple[float, float, float, float, float]",
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestActionSelection.test_should_return_latest_action": {
            "name": "test_should_return_latest_action",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str"
                ]
            }
        },
        "TestActionSelection.test_should_return_worst_quality_action": {
            "name": "test_should_return_worst_quality_action",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/racs/test_Classifier.py": {
        "TestClassifier.cfg": {
            "name": "cfg",
            "location": 15,
            "return": [
                "Configuration",
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClassifier.test_should_initialize_without_arguments": {
            "name": "test_should_initialize_without_arguments",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str"
                ]
            }
        },
        "TestClassifier.test_should_detect_identical_classifier": {
            "name": "test_should_detect_identical_classifier",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "TestClassifier.test_should_find_similar": {
            "name": "test_should_find_similar",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClassifier.test_should_calculate_fitness": {
            "name": "test_should_calculate_fitness",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_q": [],
                "_r": [],
                "_fitness": [],
                "cfg": []
            }
        },
        "TestClassifier.test_should_anticipate_change": {
            "name": "test_should_anticipate_change",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_effect": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "_p0": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "_p1": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "_result": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "cfg": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TestClassifier.test_should_detect_reliable": {
            "name": "test_should_detect_reliable",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_q": [
                    "str",
                    "float"
                ],
                "_reliable": [
                    "str",
                    "float"
                ],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestClassifier.test_should_detect_inadequate": {
            "name": "test_should_detect_inadequate",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_q": [
                    "str",
                    "float"
                ],
                "_inadequate": [
                    "str",
                    "float"
                ],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestClassifier.test_should_increase_quality": {
            "name": "test_should_increase_quality",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestClassifier.test_should_decrease_quality": {
            "name": "test_should_decrease_quality",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestClassifier.test_should_count_specified_unchanging_attributes": {
            "name": "test_should_count_specified_unchanging_attributes",
            "location": 146,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_condition": [
                    "str",
                    "float"
                ],
                "_effect": [
                    "str",
                    "float"
                ],
                "_sua": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestClassifier.test_should_create_copy": {
            "name": "test_should_create_copy",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "float"
                ]
            }
        },
        "TestClassifier.test_should_specialize": {
            "name": "test_should_specialize",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "bool",
                    "int"
                ]
            }
        },
        "TestClassifier.test_should_generalize_randomly_unchanging_condition_attribute": {
            "name": "test_should_generalize_randomly_unchanging_condition_attribute",
            "location": 208,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_condition": [
                    "str",
                    "float"
                ],
                "_effect": [
                    "str",
                    "float"
                ],
                "_soa_before": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "_soa_after": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "cfg": []
            }
        },
        "TestClassifier.test_should_find_more_general": {
            "name": "test_should_find_more_general",
            "location": 229,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_c1": [
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "_c2": [
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "_result": [
                    "str"
                ],
                "cfg": [
                    "str"
                ]
            }
        },
        "TestClassifier.test_count_regions": {
            "name": "test_count_regions",
            "location": 244,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_cond": [
                    "str"
                ],
                "_res": [
                    "int",
                    "str"
                ],
                "cfg": [
                    "str"
                ]
            }
        },
        "TestClassifier._random_ubr": {
            "name": "_random_ubr",
            "location": 252,
            "return": [
                "UBR",
                "Callable",
                "str",
                "Tuple[numpy.ndarray]"
            ],
            "arguments": {
                "lower": [
                    "int",
                    "List[str]",
                    "dict",
                    "bool"
                ],
                "upper": [
                    "int",
                    "List[str]",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/racs/test_ClassifierList.py": {
        "TestClassifierList.cfg": {
            "name": "cfg",
            "location": 13,
            "return": [
                "Configuration",
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClassifierList.test_should_initialize_classifier_list": {
            "name": "test_should_initialize_classifier_list",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestClassifierList.test_should_form_match_set": {
            "name": "test_should_form_match_set",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "TestClassifierList.test_should_form_action_set": {
            "name": "test_should_form_action_set",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestClassifierList.test_should_expand": {
            "name": "test_should_expand",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "int"
                ]
            }
        },
        "TestClassifierList.test_should_get_maximum_fitness": {
            "name": "test_should_get_maximum_fitness",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "TestClassifierList.test_should_return_zero_max_fitness": {
            "name": "test_should_return_zero_max_fitness",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "TestClassifierList.test_should_apply_reinforcement_learning": {
            "name": "test_should_apply_reinforcement_learning",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/racs/test_Condition.py": {
        "TestCondition.cfg": {
            "name": "cfg",
            "location": 12,
            "return": [
                "Configuration",
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCondition.test_should_create_generic_condition": {
            "name": "test_should_create_generic_condition",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "TestCondition.test_should_specialize_with_condition": {
            "name": "test_should_specialize_with_condition",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_init_cond": [
                    "str",
                    "Union[str, float]",
                    "int",
                    "float",
                    "bool",
                    "list[int]",
                    "List[int]"
                ],
                "_other_cond": [
                    "str",
                    "highlevel.roboentity.configuration.Configuration"
                ],
                "_result_cond": [
                    "str",
                    "Union[str, float]",
                    "int",
                    "float",
                    "bool",
                    "list[int]",
                    "List[int]"
                ],
                "cfg": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "TestCondition.test_generalize": {
            "name": "test_generalize",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_condition": [
                    "str"
                ],
                "_idx": [
                    "str"
                ],
                "_generalized": [
                    "str"
                ],
                "cfg": [
                    "str"
                ]
            }
        },
        "TestCondition.test_should_generalize_specific_attributes_randomly": {
            "name": "test_should_generalize_specific_attributes_randomly",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_condition": [
                    "str",
                    "float"
                ],
                "_spec_before": [
                    "str",
                    "float"
                ],
                "_spec_after": [
                    "str",
                    "float"
                ],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestCondition.test_should_count_specificity": {
            "name": "test_should_count_specificity",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_condition": [
                    "str",
                    "float"
                ],
                "_specificity": [
                    "str",
                    "float"
                ],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestCondition.test_should_calculate_cover_ratio": {
            "name": "test_should_calculate_cover_ratio",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_condition": [
                    "str",
                    "float"
                ],
                "_covered_pct": [
                    "str",
                    "float"
                ],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestCondition.test_should_match_perception": {
            "name": "test_should_match_perception",
            "location": 104,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_condition": [
                    "str",
                    "int"
                ],
                "_perception": [
                    "str",
                    "int"
                ],
                "_result": [
                    "int",
                    "str"
                ],
                "cfg": [
                    "str",
                    "int"
                ]
            }
        },
        "TestCondition.test_should_subsume_condition": {
            "name": "test_should_subsume_condition",
            "location": 120,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_cond1": [
                    "str"
                ],
                "_cond2": [
                    "str"
                ],
                "_result": [
                    "str"
                ],
                "cfg": [
                    "str"
                ]
            }
        },
        "TestCondition.test_should_visualize": {
            "name": "test_should_visualize",
            "location": 131,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_cond": [
                    "str"
                ],
                "_result": [
                    "str"
                ],
                "cfg": [
                    "str"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/racs/test_Effect.py": {
        "TestEffect.cfg": {
            "name": "cfg",
            "location": 12,
            "return": [
                "Configuration",
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEffect.test_should_detect_change": {
            "name": "test_should_detect_change",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_e": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "_result": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "cfg": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestEffect.test_should_create_pass_through_effect": {
            "name": "test_should_create_pass_through_effect",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "TestEffect.test_should_specialize": {
            "name": "test_should_specialize",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_p0": [
                    "bool",
                    "str",
                    "List[int]",
                    "list[int]",
                    "Optional[str]",
                    "None"
                ],
                "_p1": [
                    "bool",
                    "str",
                    "List[int]",
                    "list[int]",
                    "Optional[str]",
                    "None"
                ],
                "_effect": [
                    "bool",
                    "str",
                    "List[int]",
                    "list[int]",
                    "Optional[str]",
                    "None"
                ],
                "is_specializable": [
                    "bool",
                    "str",
                    "List[int]",
                    "list[int]",
                    "Optional[str]",
                    "None"
                ],
                "cfg": [
                    "bool",
                    "str",
                    "List[int]",
                    "list[int]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TestEffect.test_should_subsume_effect": {
            "name": "test_should_subsume_effect",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_effect1": [
                    "str"
                ],
                "_effect2": [
                    "str"
                ],
                "_result": [
                    "str"
                ],
                "cfg": [
                    "str"
                ]
            }
        },
        "TestEffect.test_should_visualize": {
            "name": "test_should_visualize",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_effect": [
                    "str"
                ],
                "_result": [
                    "str"
                ],
                "cfg": [
                    "str"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/racs/test_Mark.py": {
        "TestMark.cfg": {
            "name": "cfg",
            "location": 12,
            "return": [
                "Configuration",
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMark.test_should_initialize_empty_mark": {
            "name": "test_should_initialize_empty_mark",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestMark.test_should_detect_if_not_marked": {
            "name": "test_should_detect_if_not_marked",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestMark.test_should_detect_if_marked": {
            "name": "test_should_detect_if_marked",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestMark.test_should_complement_mark": {
            "name": "test_should_complement_mark",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "initmark": [
                    "str",
                    "float"
                ],
                "perception": [
                    "str",
                    "float"
                ],
                "changed": [
                    "str",
                    "float"
                ],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestMark.test_should_set_mark_using_condition": {
            "name": "test_should_set_mark_using_condition",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "initmark": [],
                "_p0": [],
                "initcond": [],
                "marked_count": [],
                "cfg": []
            }
        },
        "TestMark.test_should_get_no_differences": {
            "name": "test_should_get_no_differences",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "int"
                ]
            }
        },
        "TestMark.test_should_handle_unique_differences": {
            "name": "test_should_handle_unique_differences",
            "location": 100,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_m": [],
                "_p0": [],
                "_specif": [],
                "cfg": []
            }
        },
        "TestMark.test_should_handle_fuzzy_differences": {
            "name": "test_should_handle_fuzzy_differences",
            "location": 123,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_m": [],
                "_p0": [
                    "str",
                    "float"
                ],
                "_specificity": [
                    "str",
                    "float"
                ],
                "cfg": []
            }
        },
        "TestMark._init_mark": {
            "name": "_init_mark",
            "location": 135,
            "return": [
                "Mark",
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "vals": [
                    "int",
                    "bool",
                    "float"
                ],
                "cfg": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TestMark._init_condition": {
            "name": "_init_condition",
            "location": 144,
            "return": [
                "Condition",
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "vals": [
                    "int",
                    "bool",
                    "float"
                ],
                "cfg": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TestMark._count_marked_attributes": {
            "name": "_count_marked_attributes",
            "location": 151,
            "return": [
                "int"
            ],
            "arguments": {
                "mark": [
                    "list[int]",
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/racs/test_metrics.py": {
        "TestMetrics.cfg": {
            "name": "cfg",
            "location": 13,
            "return": [
                "Configuration",
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetrics.test_regions_averaging": {
            "name": "test_regions_averaging",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/racs/__init__.py": {},
    "pyalcs-master/tests/lcs/agents/racs/components/test_alp.py": {
        "TestALP.cfg": {
            "name": "cfg",
            "location": 16,
            "return": [
                "Configuration",
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestALP.test_should_handle_expected_case_1": {
            "name": "test_should_handle_expected_case_1",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "TestALP.test_should_handle_expected_case_2": {
            "name": "test_should_handle_expected_case_2",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "TestALP.test_should_handle_expected_case_3": {
            "name": "test_should_handle_expected_case_3",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "TestALP.test_should_handle_unexpected_case_1": {
            "name": "test_should_handle_unexpected_case_1",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestALP.test_should_handle_unexpected_case_2": {
            "name": "test_should_handle_unexpected_case_2",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestALP.test_should_handle_unexpected_case_3": {
            "name": "test_should_handle_unexpected_case_3",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestALP.test_should_create_new_classifier_with_covering": {
            "name": "test_should_create_new_classifier_with_covering",
            "location": 141,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_p0": [],
                "_p1": [],
                "_child_cond": [],
                "_child_effect": [],
                "cfg": [
                    "int"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/racs/components/test_genetic_algorithm.py": {
        "TestGeneticAlgorithm.cfg": {
            "name": "cfg",
            "location": 16,
            "return": [
                "Configuration",
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGeneticAlgorithm.test_aggressive_mutation": {
            "name": "test_aggressive_mutation",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_cond": [
                    "str",
                    "float"
                ],
                "_effect": [
                    "str",
                    "float"
                ],
                "cfg": []
            }
        },
        "TestGeneticAlgorithm.test_disabled_mutation": {
            "name": "test_disabled_mutation",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_cond": [
                    "str",
                    "float"
                ],
                "_effect": [
                    "str",
                    "float"
                ],
                "cfg": []
            }
        },
        "TestGeneticAlgorithm.test_crossover": {
            "name": "test_crossover",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestGeneticAlgorithm.test_should_flatten_condition": {
            "name": "test_should_flatten_condition",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_cond": [
                    "str"
                ],
                "_result": [
                    "str"
                ],
                "cfg": [
                    "str"
                ]
            }
        },
        "TestGeneticAlgorithm.test_should_flatten_effect": {
            "name": "test_should_flatten_effect",
            "location": 119,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_effect": [
                    "str"
                ],
                "_result": [
                    "str"
                ],
                "cfg": [
                    "str"
                ]
            }
        },
        "TestGeneticAlgorithm.test_should_unflatten": {
            "name": "test_should_unflatten",
            "location": 126,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_flat": [
                    "str"
                ],
                "_result": [
                    "str"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/racs/components/__init__.py": {},
    "pyalcs-master/tests/lcs/agents/xcs/test_Classifier.py": {
        "TestClassifier.cfg": {
            "name": "cfg",
            "location": 11,
            "return": [
                "Configuration",
                "str",
                "DefaultDict[int, List[Any]]",
                "Optional[str]",
                "bytes",
                "List[str]",
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClassifier.test_classifier_default": {
            "name": "test_classifier_default",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "TestClassifier.test_subsumes": {
            "name": "test_subsumes",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "TestClassifier.test_does_match": {
            "name": "test_does_match",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int",
                    "str"
                ]
            }
        },
        "TestClassifier.test_could_subsume": {
            "name": "test_could_subsume",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestClassifier.test_is_more_general": {
            "name": "test_is_more_general",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int",
                    "str",
                    "Union[str, float]",
                    "float"
                ],
                "cond1": [
                    "int",
                    "str",
                    "Union[str, float]",
                    "float"
                ],
                "cond2": [
                    "int",
                    "str",
                    "Union[str, float]",
                    "float"
                ],
                "result": [
                    "int",
                    "str",
                    "Union[str, float]",
                    "float"
                ]
            }
        },
        "TestClassifier.test_does_subsume": {
            "name": "test_does_subsume",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestClassifier.test_equals": {
            "name": "test_equals",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int"
                ],
                "cond1": [
                    "int"
                ],
                "cond2": [
                    "int"
                ],
                "act1": [
                    "int"
                ],
                "act2": [
                    "int"
                ],
                "result": [
                    "int"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/xcs/test_ClassifierList.py": {
        "TestClassifiersList.cfg": {
            "name": "cfg",
            "location": 11,
            "return": [
                "Configuration",
                "str",
                "DefaultDict[int, List[Any]]",
                "Optional[str]",
                "bytes",
                "List[str]",
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClassifiersList.situation": {
            "name": "situation",
            "location": 15,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClassifiersList.classifiers_list_diff_actions": {
            "name": "classifiers_list_diff_actions",
            "location": 19,
            "return": [
                "ClassifiersList",
                "str",
                "List[Dict]",
                "List[int]",
                "List[List[Any]]",
                "list"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "situation": [
                    "str",
                    "bytes",
                    "Tuple[FrozenSet[int]]",
                    "tuple[frozenset]"
                ]
            }
        },
        "TestClassifiersList.test_init": {
            "name": "test_init",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "float",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestClassifiersList.test_insert_population": {
            "name": "test_insert_population",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "classifiers_list_diff_actions": [
                    "bool",
                    "List[List[int]]",
                    "str",
                    "int",
                    "list"
                ],
                "cfg": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "dict",
                    "int"
                ],
                "cond": [
                    "bool",
                    "List[str]",
                    "list[str]",
                    "str",
                    "Sequence[Sequence[str]]",
                    "typing.Sequence[typing.Sequence[str]]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "act": [
                    "bool",
                    "List[str]",
                    "list[str]",
                    "str",
                    "Sequence[Sequence[str]]",
                    "typing.Sequence[typing.Sequence[str]]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "TestClassifiersList.test_insert_population_new_condition": {
            "name": "test_insert_population_new_condition",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "classifiers_list_diff_actions": [
                    "List[str]",
                    "List[int]",
                    "list",
                    "List[Tuple[str, str]]",
                    "List[Tuple[int, int, Any]]",
                    "List[Tuple[int, str]]"
                ],
                "cfg": [
                    "str",
                    "int",
                    "Iterable[T]",
                    "typing.Iterable[T]"
                ],
                "cond": [
                    "str",
                    "Sequence[Sequence[str]]",
                    "typing.Sequence[typing.Sequence[str]]",
                    "int",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Dict[str, object]",
                    "dict[str, object]"
                ],
                "act": [
                    "str",
                    "Sequence[Sequence[str]]",
                    "typing.Sequence[typing.Sequence[str]]",
                    "int",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Dict[str, object]",
                    "dict[str, object]"
                ]
            }
        },
        "TestClassifiersList.test_covering": {
            "name": "test_covering",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Iterable[int]",
                    "bool",
                    "typing.Iterable[int]"
                ]
            }
        },
        "TestClassifiersList.test_deletion": {
            "name": "test_deletion",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Callable",
                    "float",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestClassifiersList.test_removes_correct_one": {
            "name": "test_removes_correct_one",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Iterable[int]",
                    "typing.Iterable[int]"
                ]
            }
        },
        "TestClassifiersList.test_match_set": {
            "name": "test_match_set",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "classifiers_list_diff_actions": [
                    "bool",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "TestClassifiersList.test_action_set": {
            "name": "test_action_set",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "bool"
                ],
                "classifiers_list_diff_actions": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "TestClassifiersList.test_find_not_present_action": {
            "name": "test_find_not_present_action",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Iterable[int]",
                    "int",
                    "typing.Iterable[int]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestClassifiersList.test_prediction_array": {
            "name": "test_prediction_array",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Optional[str]",
                    "str",
                    "bytes",
                    "None",
                    "List[str]",
                    "List[int]",
                    "list[str]",
                    "list[int]"
                ],
                "classifiers_list_diff_actions": [
                    "list",
                    "list[]",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TestClassifiersList.test_update_fitness": {
            "name": "test_update_fitness",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str"
                ],
                "classifiers_list_diff_actions": [
                    "List[Tuple[str, str]]",
                    "list",
                    "List[str]",
                    "Optional[str]",
                    "Union[int, str]",
                    "int",
                    "Union[str, List[Any]]"
                ]
            }
        },
        "TestClassifiersList.test_update_set": {
            "name": "test_update_set",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "typing.Callable[List,bool, None]",
                    "bool",
                    "Callable[[List, bool], None]",
                    "str",
                    "\"Step\""
                ],
                "classifiers_list_diff_actions": [
                    "dict",
                    "int",
                    "str"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/xcs/test_Condition.py": {
        "TestCondition.test_should_get_initialized_with_str": {
            "name": "test_should_get_initialized_with_str",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCondition.test_equal": {
            "name": "test_equal",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "cond1": [],
                "cond2": [],
                "result": []
            }
        },
        "TestCondition.test_should_hash": {
            "name": "test_should_hash",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCondition.test_subsumes": {
            "name": "test_subsumes",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "cond1": [],
                "cond2": [],
                "result": []
            }
        },
        "TestCondition.test_number_of_wildcards": {
            "name": "test_number_of_wildcards",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "cond": [
                    "str"
                ],
                "num": [
                    "str"
                ]
            }
        },
        "TestCondition.test_is_more_general": {
            "name": "test_is_more_general",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "cond1": [
                    "str",
                    "bool"
                ],
                "cond2": [
                    "str",
                    "bool"
                ],
                "result": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/xcs/test_XCS.py": {
        "TestXCS.number_of_actions": {
            "name": "number_of_actions",
            "location": 11,
            "return": [
                "int",
                "Iterable[T]",
                "str",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestXCS.cfg": {
            "name": "cfg",
            "location": 15,
            "return": [
                "Configuration",
                "Tuple[float, float, float]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "number_of_actions": [
                    "float",
                    "int",
                    "str",
                    "list[str]",
                    "List[str]",
                    "bool",
                    "list[]",
                    "list"
                ]
            }
        },
        "TestXCS.situation": {
            "name": "situation",
            "location": 19,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestXCS.classifiers_list_diff_actions": {
            "name": "classifiers_list_diff_actions",
            "location": 23,
            "return": [
                "ClassifiersList",
                "str",
                "List[Dict]",
                "List[int]",
                "List[List[Any]]",
                "list"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "situation": [
                    "str",
                    "bytes",
                    "Tuple[FrozenSet[int]]",
                    "tuple[frozenset]"
                ]
            }
        },
        "TestXCS.xcs": {
            "name": "xcs",
            "location": 32,
            "return": [
                "XCS",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Tuple[int]",
                    "tuple[int]",
                    "Union[int, str]",
                    "int",
                    "str"
                ],
                "classifiers_list_diff_actions": [
                    "Tuple[int]",
                    "tuple[int]",
                    "Union[int, str]",
                    "int",
                    "str"
                ]
            }
        },
        "TestXCS.test_select_action": {
            "name": "test_select_action",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xcs": [
                    "Dict[str, Any]",
                    "Optional[dict]"
                ],
                "classifiers_list_diff_actions": [
                    "bool"
                ]
            }
        },
        "TestXCS.test_do_action_set_subsumption": {
            "name": "test_do_action_set_subsumption",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xcs": [
                    "Set[int]"
                ]
            }
        },
        "TestXCS.test_distribute_and_update": {
            "name": "test_distribute_and_update",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [],
                "situation": [
                    "bool",
                    "Optional[Type[Exception]]",
                    "typing.Type",
                    "Optional[List[str]]",
                    "None",
                    "list[str]"
                ],
                "classifiers_list_diff_actions": [
                    "int",
                    "typing.Iterable[tuple[typing.Union[str,dict[, ]]]]",
                    "Iterable[Tuple[str, dict]]",
                    "List[int]"
                ]
            }
        },
        "TestXCS.test_mutation": {
            "name": "test_mutation",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str"
                ]
            }
        },
        "TestXCS.test_crossover_area": {
            "name": "test_crossover_area",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int",
                    "str"
                ],
                "cond1": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "cond2": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "x": [
                    "int",
                    "str"
                ],
                "y": [
                    "int",
                    "str"
                ],
                "end_cond1": [
                    "int",
                    "float",
                    "None",
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "end_cond2": [
                    "int",
                    "float",
                    "None",
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "TestXCS.test_crossover_values": {
            "name": "test_crossover_values",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "int"
                ],
                "situation": [
                    "str",
                    "int"
                ],
                "classifiers_list_diff_actions": [
                    "str",
                    "int",
                    "type"
                ]
            }
        },
        "TestXCS.test_run_ga": {
            "name": "test_run_ga",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "bool",
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "None"
                ],
                "classifiers_list_diff_actions": [
                    "Optional[str]",
                    "str",
                    "Callable",
                    "None",
                    "typing.Callable[, ]"
                ],
                "chi": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestXCS.test_simple_q_learning": {
            "name": "test_simple_q_learning",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Dict[str, Any]",
                    "bool",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "classifiers_list_diff_actions": [
                    "List[str]",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "TestXCS.test_make_children": {
            "name": "test_make_children",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "List[str]",
                    "bool",
                    "list[str]"
                ],
                "classifiers_list_diff_actions": []
            }
        },
        "TestXCS.test_do_ga_subsumption_does_subsume_true": {
            "name": "test_do_ga_subsumption_does_subsume_true",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [],
                "classifiers_list_diff_actions": [
                    "str",
                    "bool"
                ],
                "situation": [
                    "Dict[str, Any]",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestXCS.test_do_ga_subsumption_does_subsume_false": {
            "name": "test_do_ga_subsumption_does_subsume_false",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [],
                "classifiers_list_diff_actions": [
                    "Dict[str, Any]",
                    "bool"
                ],
                "situation": [
                    "bool"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/xcs/__init__.py": {},
    "pyalcs-master/tests/lcs/agents/xncs/test_backpropagation.py": {
        "TestBackpropagation.cfg": {
            "name": "cfg",
            "location": 11,
            "return": [
                "Configuration",
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBackpropagation.test_init": {
            "name": "test_init",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Optional[int]",
                    "int",
                    "Callable[..., None]",
                    "None",
                    "typing.Callable[..., None]"
                ]
            }
        },
        "TestBackpropagation.test_insert": {
            "name": "test_insert",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "TestBackpropagation.test_update": {
            "name": "test_update",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/xncs/test_Classifier.py": {
        "TestClassifier.cfg": {
            "name": "cfg",
            "location": 10,
            "return": [
                "Configuration",
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClassifier.test_init": {
            "name": "test_init",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestClassifier.test_equals": {
            "name": "test_equals",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "bool"
                ],
                "cond1": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "cond2": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "act1": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "act2": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "result": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "ef1": [
                    "str"
                ],
                "ef2": [
                    "str"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/xncs/test_ClassifiersList.py": {
        "TestClassifiersList.cfg": {
            "name": "cfg",
            "location": 12,
            "return": [
                "Configuration",
                "str",
                "DefaultDict[int, List[Any]]",
                "Optional[str]",
                "bytes",
                "List[str]",
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClassifiersList.situation": {
            "name": "situation",
            "location": 16,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClassifiersList.classifiers_list_diff_actions": {
            "name": "classifiers_list_diff_actions",
            "location": 20,
            "return": [
                "ClassifiersList",
                "str",
                "List[Dict]",
                "List[int]",
                "List[List[Any]]",
                "list"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "situation": [
                    "str",
                    "bytes",
                    "Tuple[FrozenSet[int]]",
                    "tuple[frozenset]"
                ]
            }
        },
        "TestClassifiersList.test_init": {
            "name": "test_init",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "float",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestClassifiersList.test_covering": {
            "name": "test_covering",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Iterable[int]",
                    "bool",
                    "typing.Iterable[int]"
                ]
            }
        },
        "TestClassifiersList.test_match_set": {
            "name": "test_match_set",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "classifiers_list_diff_actions": [
                    "bool",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "TestClassifiersList.test_action_set": {
            "name": "test_action_set",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "bool"
                ],
                "classifiers_list_diff_actions": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/xncs/test_Configuration.py": {
        "TestEffect.test_init": {
            "name": "test_init",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/xncs/test_Effect.py": {
        "TestEffect.test_init": {
            "name": "test_init",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEffect.test_subsumes": {
            "name": "test_subsumes",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "cond1": [],
                "cond2": [],
                "result": []
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/xncs/test_XNCS.py": {
        "TestXNCS.cfg": {
            "name": "cfg",
            "location": 12,
            "return": [
                "Configuration",
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestXNCS.situation": {
            "name": "situation",
            "location": 16,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestXNCS.classifiers_list_diff_actions": {
            "name": "classifiers_list_diff_actions",
            "location": 20,
            "return": [
                "ClassifiersList",
                "str",
                "List[Dict]",
                "List[int]",
                "List[List[Any]]",
                "list"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "situation": [
                    "str",
                    "bytes",
                    "Tuple[FrozenSet[int]]",
                    "tuple[frozenset]"
                ]
            }
        },
        "TestXNCS.test_init": {
            "name": "test_init",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int",
                    "bool"
                ],
                "classifiers_list_diff_actions": [
                    "Optional[str]",
                    "str",
                    "Callable",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestXNCS.test_distribute_and_update": {
            "name": "test_distribute_and_update",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "bool",
                    "int"
                ],
                "classifiers_list_diff_actions": [
                    "bytes",
                    "int",
                    "List[Dict[str, str]]",
                    "list[dict[str, str]]"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/xncs/__init__.py": {},
    "pyalcs-master/tests/lcs/agents/yacs/test_Classifier.py": {
        "TestClassifier.cfg": {
            "name": "cfg",
            "location": 9,
            "return": [
                "Configuration",
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClassifier.test_should_add_to_trace": {
            "name": "test_should_add_to_trace",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int"
                ]
            }
        },
        "TestClassifier.test_should_determine_specializable_classifier": {
            "name": "test_should_determine_specializable_classifier",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestClassifier.test_should_update_reward": {
            "name": "test_should_update_reward",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/yacs/test_Condition.py": {
        "TestCondition.test_should_get_initialized": {
            "name": "test_should_get_initialized",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCondition.test_should_generate_condition": {
            "name": "test_should_generate_condition",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCondition.test_should_determine_more_specialized": {
            "name": "test_should_determine_more_specialized",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_self": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "_other": [
                    "bool",
                    "str",
                    "int"
                ],
                "_res": [
                    "float",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TestCondition.test_should_determine_more_general": {
            "name": "test_should_determine_more_general",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_self": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "_other": [
                    "bool",
                    "str",
                    "int"
                ],
                "_res": [
                    "float",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TestCondition.test_should_match_perception": {
            "name": "test_should_match_perception",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_c": [
                    "int",
                    "str"
                ],
                "_p": [
                    "int",
                    "str"
                ],
                "_res": [
                    "int",
                    "str"
                ]
            }
        },
        "TestCondition.test_should_match_perception_with_eis": {
            "name": "test_should_match_perception_with_eis",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCondition.test_should_get_expected_improvements_property": {
            "name": "test_should_get_expected_improvements_property",
            "location": 106,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_c": [
                    "str",
                    "Tuple[int, str]",
                    "tuple[typing.Union[int,str]]",
                    "Set[str]",
                    "set[str]"
                ],
                "_res": [
                    "str",
                    "Tuple[int, str]",
                    "tuple[typing.Union[int,str]]",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "TestCondition.test_should_calculate_generality_specificity": {
            "name": "test_should_calculate_generality_specificity",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_c": [],
                "_gen": [],
                "_spec": []
            }
        },
        "TestCondition.test_should_increase_eis": {
            "name": "test_should_increase_eis",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_init_eis": [
                    "str"
                ],
                "_res": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ],
                "idx": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "beta": [
                    "str",
                    "float"
                ]
            }
        },
        "TestCondition.test_should_decrease_eis": {
            "name": "test_should_decrease_eis",
            "location": 141,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_init_eis": [
                    "str"
                ],
                "_res": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ],
                "idx": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "beta": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/yacs/test_Effect.py": {
        "TestEffect.test_should_get_initialized_with_str": {
            "name": "test_should_get_initialized_with_str",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEffect.test_should_calculate_desired_effect": {
            "name": "test_should_calculate_desired_effect",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_p0": [],
                "_p1": [],
                "_res": []
            }
        },
        "TestEffect.test_should_calculate_desired_effect_with_empty_perception": {
            "name": "test_should_calculate_desired_effect_with_empty_perception",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEffect.test_should_anticipate_next_state": {
            "name": "test_should_anticipate_next_state",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_e": [
                    "typing.Callable[, ]",
                    "Callable",
                    "int",
                    "list[\"LoadableRelation\"]",
                    "List[\"LoadableRelation\"]",
                    "T"
                ],
                "_p0": [
                    "typing.Callable[, ]",
                    "Callable",
                    "int",
                    "list[\"LoadableRelation\"]",
                    "List[\"LoadableRelation\"]",
                    "T"
                ],
                "_p1": [
                    "typing.Callable[, ]",
                    "Callable",
                    "int",
                    "list[\"LoadableRelation\"]",
                    "List[\"LoadableRelation\"]",
                    "T"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/yacs/test_LatentLearning.py": {
        "TestLatentLearning.cfg": {
            "name": "cfg",
            "location": 16,
            "return": [
                "Configuration",
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLatentLearning.ll": {
            "name": "ll",
            "location": 23,
            "return": [
                "LatentLearning",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestLatentLearning.test_effect_covering_should_add_traces": {
            "name": "test_effect_covering_should_add_traces",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "ll": [
                    "int"
                ]
            }
        },
        "TestLatentLearning.test_effect_covering_should_add_new_classifier": {
            "name": "test_effect_covering_should_add_new_classifier",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "ll": [
                    "int"
                ]
            }
        },
        "TestLatentLearning.test_select_accurate_classifiers": {
            "name": "test_select_accurate_classifiers",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "dict",
                    "dict[, ]"
                ],
                "ll": [
                    "int",
                    "BaseException"
                ]
            }
        },
        "TestLatentLearning.test_mutspec": {
            "name": "test_mutspec",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "set",
                    "set[]"
                ],
                "ll": [
                    "int",
                    "Tuple[int]"
                ]
            }
        },
        "TestLatentLearning.test_mutspec_with_effect_change": {
            "name": "test_mutspec_with_effect_change",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "set",
                    "set[]"
                ],
                "ll": [
                    "int",
                    "Tuple[int]"
                ]
            }
        },
        "TestLatentLearning.test_should_specialize_conditions": {
            "name": "test_should_specialize_conditions",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str"
                ],
                "ll": [
                    "str"
                ]
            }
        },
        "TestLatentLearning.test_should_specialize": {
            "name": "test_should_specialize",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "set",
                    "set[]"
                ],
                "ll": [
                    "int",
                    "BaseException"
                ]
            }
        },
        "TestLatentLearning.test_should_cover_new_classifier_in_first_step": {
            "name": "test_should_cover_new_classifier_in_first_step",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [],
                "ll": [
                    "str"
                ]
            }
        },
        "TestLatentLearning.test_should_cover_new_classifier_with_empty_action_set": {
            "name": "test_should_cover_new_classifier_with_empty_action_set",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str"
                ],
                "ll": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestLatentLearning.test_should_cover_classifier_with_action_set": {
            "name": "test_should_cover_classifier_with_action_set",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str"
                ],
                "ll": [
                    "str"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/yacs/test_PolicyLearning.py": {
        "TestPolicyLearning.cfg": {
            "name": "cfg",
            "location": 11,
            "return": [
                "Configuration",
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPolicyLearning.pl": {
            "name": "pl",
            "location": 18,
            "return": [
                "PolicyLearning",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestPolicyLearning.test_should_select_action": {
            "name": "test_should_select_action",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pl": [
                    "Dict[str, Sequence[Any]]"
                ],
                "cfg": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestPolicyLearning.test_should_return_random_action_with_empty_match_set": {
            "name": "test_should_return_random_action_with_empty_match_set",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pl": [
                    "int",
                    "Dict[str, Sequence[Any]]"
                ],
                "cfg": [
                    "int",
                    "str",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/yacs/test_YACS.py": {
        "TestYACS.cfg": {
            "name": "cfg",
            "location": 10,
            "return": [
                "Configuration",
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestYACS.agent": {
            "name": "agent",
            "location": 17,
            "return": [
                "YACS",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestYACS.test_should_validate_if_perception_is_in_range": {
            "name": "test_should_validate_if_perception_is_in_range",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "dict"
                ]
            }
        },
        "TestYACS.test_should_remember_perception": {
            "name": "test_should_remember_perception",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "str"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/agents/yacs/__init__.py": {},
    "pyalcs-master/tests/lcs/representations/test_realvalueencoder.py": {
        "TestRealValueEncoder.test_should_deny_encoding_illegal_values": {
            "name": "test_should_deny_encoding_illegal_values",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRealValueEncoder.test_should_deny_decoding_illegal_values": {
            "name": "test_should_deny_decoding_illegal_values",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRealValueEncoder.test_should_encode": {
            "name": "test_should_encode",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_bits": [
                    "int"
                ],
                "_val": [
                    "int"
                ],
                "_encoded": [
                    "int"
                ]
            }
        },
        "TestRealValueEncoder.test_should_decode_values": {
            "name": "test_should_decode_values",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRealValueEncoder.test_should_encode_and_decode_approximately": {
            "name": "test_should_encode_and_decode_approximately",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRealValueEncoder.test_should_return_min_max_range": {
            "name": "test_should_return_min_max_range",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_bits": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]",
                    "float",
                    "dict",
                    "dict[, ]"
                ],
                "_min_range": [
                    "int",
                    "list[numpy.array]",
                    "str",
                    "List[numpy.array]",
                    "list[int]",
                    "List[int]",
                    "bool"
                ],
                "_max_range": [
                    "int",
                    "bool",
                    "tuple[typing.Union[int,...]]",
                    "Optional[Tuple[int, ...]]",
                    "float",
                    "None",
                    "Optional[Set[str]]",
                    "set[str]",
                    "List[Dict[str, str]]",
                    "list[dict[str, str]]"
                ]
            }
        },
        "TestRealValueEncoder.test_encode_should_return_integer": {
            "name": "test_encode_should_return_integer",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_p": [
                    "str"
                ]
            }
        },
        "TestRealValueEncoder.test_should_encode_with_noise_added": {
            "name": "test_should_encode_with_noise_added",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRealValueEncoder.test_should_encode_with_noise_subtracted": {
            "name": "test_should_encode_with_noise_subtracted",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/tests/lcs/representations/test_UBR.py": {
        "TestUBR.test_should_compare_without_ordering": {
            "name": "test_should_compare_without_ordering",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUBR.test_should_not_allow_duplicates": {
            "name": "test_should_not_allow_duplicates",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "expected_length": [
                    "str",
                    "int"
                ]
            }
        },
        "TestUBR.test_should_calculate_bound_span": {
            "name": "test_should_calculate_bound_span",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_ubr": [],
                "_span": []
            }
        },
        "TestUBR.test_should_detect_incorporation": {
            "name": "test_should_detect_incorporation",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "ubr1": [
                    "str"
                ],
                "ubr2": [
                    "str"
                ],
                "_result": [
                    "str"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/representations/test_visualization.py": {
        "test_visualize": {
            "name": "test_visualize",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_interval": [
                    "int",
                    "Tuple[int]",
                    "tuple[int]"
                ],
                "_range": [
                    "int",
                    "Tuple[int]",
                    "tuple[int]"
                ],
                "n": [
                    "int",
                    "bool"
                ],
                "_visualization": [
                    "int",
                    "Tuple[int]",
                    "tuple[int]"
                ]
            }
        },
        "test_scale": {
            "name": "test_scale",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_val": [
                    "int",
                    "str",
                    "list",
                    "list[]"
                ],
                "_init_n": [
                    "int",
                    "str",
                    "list",
                    "list[]"
                ],
                "_n": [
                    "int",
                    "str",
                    "list",
                    "list[]"
                ],
                "_result": [
                    "int",
                    "str",
                    "list",
                    "list[]"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/representations/__init__.py": {},
    "pyalcs-master/tests/lcs/strategies/test_anticipatory_learning_process.py": {
        "TestAnticipatoryLearningProcess.test_should_insert_alp_offspring_1": {
            "name": "test_should_insert_alp_offspring_1",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnticipatoryLearningProcess.test_should_insert_alp_offspring_2": {
            "name": "test_should_insert_alp_offspring_2",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/tests/lcs/strategies/test_genetic_algorithms.py": {
        "SimpleClassifier.is_marked": {
            "name": "is_marked",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGeneticAlgorithms.test_roulette_wheel_selection": {
            "name": "test_roulette_wheel_selection",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGeneticAlgorithms.test_generalizing_mutation": {
            "name": "test_generalizing_mutation",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_mu": [],
                "_cond1": [
                    "str",
                    "float"
                ],
                "_cond2": [
                    "str",
                    "float"
                ]
            }
        },
        "TestGeneticAlgorithms.test_two_point_crossover": {
            "name": "test_two_point_crossover",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_seed": [
                    "int",
                    "float"
                ],
                "_c1": [
                    "str",
                    "BinaryIO",
                    "typing.BinaryIO",
                    "Optional[str]",
                    "None"
                ],
                "_c2": [
                    "str",
                    "BinaryIO",
                    "typing.BinaryIO",
                    "Optional[str]",
                    "None"
                ],
                "_rc1": [
                    "int",
                    "numpy.ndarray",
                    "typing.Type",
                    "Optional[Type]",
                    "None"
                ],
                "_rc2": [
                    "int",
                    "numpy.ndarray",
                    "typing.Type",
                    "Optional[Type]",
                    "None"
                ]
            }
        },
        "TestGeneticAlgorithms.test_should_select_preferred_to_delete": {
            "name": "test_should_select_preferred_to_delete",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_cl_q": [
                    "int"
                ],
                "_cl_marked": [
                    "int"
                ],
                "_cl_tav": [
                    "int"
                ],
                "_cl_del_q": [
                    "int"
                ],
                "_cl_del_marked": [
                    "int"
                ],
                "_cl_del_tav": [
                    "int"
                ],
                "_cl_selected": [
                    "str",
                    "bool",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "TestGeneticAlgorithms.test_should_delete_ga_classifier": {
            "name": "test_should_delete_ga_classifier",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGeneticAlgorithms.test_should_not_find_old_classifier": {
            "name": "test_should_not_find_old_classifier",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGeneticAlgorithms.test_should_find_old_classifier_only_subsumer": {
            "name": "test_should_find_old_classifier_only_subsumer",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGeneticAlgorithms.test_find_old_classifier_only_similar": {
            "name": "test_find_old_classifier_only_similar",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGeneticAlgorithms.test_find_old_classifier_similar_and_subsumer_subsumer_returned": {
            "name": "test_find_old_classifier_similar_and_subsumer_subsumer_returned",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGeneticAlgorithms.test_should_add_classifier": {
            "name": "test_should_add_classifier",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGeneticAlgorithms.test_add_ga_classifier_increase_numerosity": {
            "name": "test_add_ga_classifier_increase_numerosity",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGeneticAlgorithms.test_roulette_wheel_selection.fitnessfcn": {
            "name": "fitnessfcn",
            "location": 38,
            "return": [
                "str",
                "Pattern",
                "int",
                "OrderedDict"
            ],
            "arguments": {
                "cl": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "Type",
                    "complex",
                    "bytes"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/strategies/test_reinforcement_learning.py": {
        "TestReinforcementLearning.test_should_perform_bucket_brigade_update": {
            "name": "test_should_perform_bucket_brigade_update",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_r0": [
                    "int",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ],
                "reward": [],
                "_r1": [
                    "Sequence[str]",
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "TestReinforcementLearning.test_should_perform_bucket_brigade_update_when_first_step": {
            "name": "test_should_perform_bucket_brigade_update_when_first_step",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReinforcementLearning.test_should_update_classifier": {
            "name": "test_should_update_classifier",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_r0": [
                    "int",
                    "str",
                    "List[Dict]",
                    "list[dict[, ]]",
                    "list",
                    "list[]",
                    "set",
                    "set[]"
                ],
                "_r1": [
                    "int",
                    "typing.Sequence[int]",
                    "str",
                    "Sequence[int]",
                    "list[str]",
                    "List[str]",
                    "bool"
                ],
                "_ir0": [
                    "int",
                    "str",
                    "List[Dict]",
                    "list[dict[, ]]",
                    "list",
                    "list[]",
                    "set",
                    "set[]"
                ],
                "_ir1": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/strategies/test_subsumption.py": {
        "SimpleRACSClassifier.is_reliable": {
            "name": "is_reliable",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleRACSClassifier.is_marked": {
            "name": "is_marked",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleRACSClassifier.is_more_general": {
            "name": "is_more_general",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubsumption.acs2_cfg": {
            "name": "acs2_cfg",
            "location": 34,
            "return": [
                "str",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubsumption.racs_cfg": {
            "name": "racs_cfg",
            "location": 40,
            "return": [
                "str",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubsumption.test_should_find_subsumer": {
            "name": "test_should_find_subsumer",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "acs2_cfg": []
            }
        },
        "TestSubsumption.test_should_find_subsumer_among_nonsubsumers": {
            "name": "test_should_find_subsumer_among_nonsubsumers",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "acs2_cfg": []
            }
        },
        "TestSubsumption.test_should_sort_more_general_subsumer_1": {
            "name": "test_should_sort_more_general_subsumer_1",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "acs2_cfg": [
                    "set",
                    "set[]"
                ]
            }
        },
        "TestSubsumption.test_should_sort_more_general_subsumer_2": {
            "name": "test_should_sort_more_general_subsumer_2",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "acs2_cfg": [
                    "set",
                    "set[]"
                ]
            }
        },
        "TestSubsumption.test_should_find_most_general_subsumer": {
            "name": "test_should_find_most_general_subsumer",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "acs2_cfg": []
            }
        },
        "TestSubsumption.test_should_randomly_select_one_of_equally_general_subsumers": {
            "name": "test_should_randomly_select_one_of_equally_general_subsumers",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "acs2_cfg": [
                    "set",
                    "set[]"
                ]
            }
        },
        "TestSubsumption.test_should_distinguish_classifier_as_subsumer": {
            "name": "test_should_distinguish_classifier_as_subsumer",
            "location": 286,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_exp": [
                    "bool",
                    "str",
                    "List[int]",
                    "list[int]"
                ],
                "_q": [
                    "bool",
                    "str",
                    "List[int]",
                    "list[int]"
                ],
                "_is_subsumer": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "acs2_cfg": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestSubsumption.test_should_not_distinguish_marked_classifier_as_subsumer": {
            "name": "test_should_not_distinguish_marked_classifier_as_subsumer",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "acs2_cfg": []
            }
        },
        "TestSubsumption.test_should_subsume_another_classifier": {
            "name": "test_should_subsume_another_classifier",
            "location": 320,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_cl1c": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[Callable]",
                    "None"
                ],
                "_cl1a": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[Callable]",
                    "None"
                ],
                "_cl1e": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[Callable]",
                    "None"
                ],
                "_cl1q": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[Callable]",
                    "None"
                ],
                "_cl1r": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[Callable]",
                    "None"
                ],
                "_cl1exp": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[Callable]",
                    "None"
                ],
                "_cl2c": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]"
                ],
                "_cl2a": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]"
                ],
                "_cl2e": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]"
                ],
                "_cl2q": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]"
                ],
                "_cl2r": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]"
                ],
                "_cl2exp": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]"
                ],
                "_result": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "acs2_cfg": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[Callable]",
                    "None"
                ]
            }
        },
        "TestSubsumption.test_should_detect_subsumption": {
            "name": "test_should_detect_subsumption",
            "location": 354,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_e1": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "_e2": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "_exp1": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "_marked": [
                    "bool",
                    "dict[, ]",
                    "dict",
                    "int"
                ],
                "_reliable": [
                    "bool",
                    "dict[, ]",
                    "dict",
                    "int"
                ],
                "_more_general": [
                    "bool",
                    "dict[, ]",
                    "dict",
                    "int"
                ],
                "_condition_matching": [
                    "int"
                ],
                "_result": [
                    "bool",
                    "Optional[List[str]]",
                    "list[str]",
                    "Iterable[\"Entity\"]",
                    "None"
                ],
                "mocker": [
                    "Optional[Union[float, str]]",
                    "Callable",
                    "float",
                    "str",
                    "None",
                    "typing.Callable[, ]"
                ],
                "racs_cfg": [
                    "bool"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/strategies/__init__.py": {},
    "pyalcs-master/tests/lcs/strategies/action_planning/test_action_planning.py": {
        "TestActionPlanning.cfg": {
            "name": "cfg",
            "location": 12,
            "return": [
                "Configuration",
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestActionPlanning.test_should_find_suitable_classifier": {
            "name": "test_should_find_suitable_classifier",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "TestActionPlanning.test_search_goal_sequence_1": {
            "name": "test_search_goal_sequence_1",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Iterable[Tuple[int, int]]",
                    "typing.Iterable[tuple[typing.Union[int,int]]]",
                    "Iterable[int]",
                    "typing.Iterable[int]"
                ]
            }
        },
        "TestActionPlanning.test_search_goal_sequence_2": {
            "name": "test_search_goal_sequence_2",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Iterable[Tuple[int, int]]",
                    "typing.Iterable[tuple[typing.Union[int,int]]]",
                    "Iterable[int]",
                    "typing.Iterable[int]"
                ]
            }
        },
        "TestActionPlanning.test_search_goal_sequence_3": {
            "name": "test_search_goal_sequence_3",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Iterable[Tuple[int, int]]",
                    "typing.Iterable[tuple[typing.Union[int,int]]]",
                    "Iterable[int]",
                    "typing.Iterable[int]"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/strategies/action_planning/test_goal_sequence_searcher.py": {
        "TestGoalSequenceSearcher.cfg": {
            "name": "cfg",
            "location": 12,
            "return": [
                "Configuration",
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoalSequenceSearcher.test_get_state_idx": {
            "name": "test_get_state_idx",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoalSequenceSearcher.test_form_new_classifiers_1": {
            "name": "test_form_new_classifiers_1",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "set",
                    "set[]",
                    "Dict[str, Sequence[str]]",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "TestGoalSequenceSearcher.test_form_new_classifiers_2": {
            "name": "test_form_new_classifiers_2",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Dict[str, Sequence[str]]",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "TestGoalSequenceSearcher.test_form_sequence_forwards_1": {
            "name": "test_form_sequence_forwards_1",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "set",
                    "set[]"
                ]
            }
        },
        "TestGoalSequenceSearcher.test_form_sequence_forwards_2": {
            "name": "test_form_sequence_forwards_2",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str"
                ]
            }
        },
        "TestGoalSequenceSearcher.test_form_sequence_forwards_3": {
            "name": "test_form_sequence_forwards_3",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str"
                ]
            }
        },
        "TestGoalSequenceSearcher.test_form_sequence_forwards_4": {
            "name": "test_form_sequence_forwards_4",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "set",
                    "set[]"
                ]
            }
        },
        "TestGoalSequenceSearcher.test_form_sequence_forwards_5": {
            "name": "test_form_sequence_forwards_5",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "set",
                    "set[]"
                ]
            }
        },
        "TestGoalSequenceSearcher.test_form_sequence_backwards_1": {
            "name": "test_form_sequence_backwards_1",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "set",
                    "set[]"
                ]
            }
        },
        "TestGoalSequenceSearcher.test_form_sequence_backwards_2": {
            "name": "test_form_sequence_backwards_2",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str"
                ]
            }
        },
        "TestGoalSequenceSearcher.test_form_sequence_backwards_3": {
            "name": "test_form_sequence_backwards_3",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str"
                ]
            }
        },
        "TestGoalSequenceSearcher.test_form_sequence_backwards_4": {
            "name": "test_form_sequence_backwards_4",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "set",
                    "set[]"
                ]
            }
        },
        "TestGoalSequenceSearcher.test_form_sequence_backwards_5": {
            "name": "test_form_sequence_backwards_5",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "set",
                    "set[]"
                ]
            }
        },
        "TestGoalSequenceSearcher.test_search_one_forward_step_1": {
            "name": "test_search_one_forward_step_1",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Iterable[Tuple[int, int]]",
                    "typing.Iterable[tuple[typing.Union[int,int]]]",
                    "Iterable[int]",
                    "typing.Iterable[int]"
                ]
            }
        },
        "TestGoalSequenceSearcher.test_search_one_forward_step_2": {
            "name": "test_search_one_forward_step_2",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Iterable[Tuple[int, int]]",
                    "typing.Iterable[tuple[typing.Union[int,int]]]",
                    "Iterable[int]",
                    "typing.Iterable[int]"
                ]
            }
        },
        "TestGoalSequenceSearcher.test_search_one_forward_step_3": {
            "name": "test_search_one_forward_step_3",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Iterable[Tuple[int, int]]",
                    "typing.Iterable[tuple[typing.Union[int,int]]]",
                    "Iterable[int]",
                    "typing.Iterable[int]"
                ]
            }
        },
        "TestGoalSequenceSearcher.test_search_one_backward_step_1": {
            "name": "test_search_one_backward_step_1",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Iterable[Tuple[int, int]]",
                    "typing.Iterable[tuple[typing.Union[int,int]]]",
                    "Iterable[int]",
                    "typing.Iterable[int]"
                ]
            }
        },
        "TestGoalSequenceSearcher.test_search_one_backward_step_2": {
            "name": "test_search_one_backward_step_2",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Iterable[Tuple[int, int]]",
                    "typing.Iterable[tuple[typing.Union[int,int]]]",
                    "Iterable[int]",
                    "typing.Iterable[int]"
                ]
            }
        },
        "TestGoalSequenceSearcher.test_search_one_backward_step_3": {
            "name": "test_search_one_backward_step_3",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Iterable[Tuple[int, int]]",
                    "typing.Iterable[tuple[typing.Union[int,int]]]",
                    "Iterable[int]",
                    "typing.Iterable[int]"
                ]
            }
        },
        "TestGoalSequenceSearcher.test_search_goal_sequence_1": {
            "name": "test_search_goal_sequence_1",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoalSequenceSearcher.test_search_goal_sequence_2": {
            "name": "test_search_goal_sequence_2",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Iterable[Tuple[int, int]]",
                    "typing.Iterable[tuple[typing.Union[int,int]]]",
                    "Iterable[int]",
                    "typing.Iterable[int]"
                ]
            }
        },
        "TestGoalSequenceSearcher.test_search_goal_sequence_3": {
            "name": "test_search_goal_sequence_3",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Iterable[Tuple[int, int]]",
                    "typing.Iterable[tuple[typing.Union[int,int]]]",
                    "Iterable[int]",
                    "typing.Iterable[int]"
                ]
            }
        },
        "TestGoalSequenceSearcher.test_search_goal_sequence_4": {
            "name": "test_search_goal_sequence_4",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Iterable[Tuple[int, int]]",
                    "typing.Iterable[tuple[typing.Union[int,int]]]",
                    "Iterable[int]",
                    "typing.Iterable[int]"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/strategies/action_planning/__init__.py": {},
    "pyalcs-master/tests/lcs/strategies/action_selection/test_EpsilonGreedy.py": {
        "TestEpsilonGreedy.acs_cfg": {
            "name": "acs_cfg",
            "location": 11,
            "return": [
                "str",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEpsilonGreedy.acs2_cfg": {
            "name": "acs2_cfg",
            "location": 18,
            "return": [
                "str",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEpsilonGreedy.test_should_raise_error_when_epsilon_is_missing": {
            "name": "test_should_raise_error_when_epsilon_is_missing",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEpsilonGreedy.test_should_assign_custom_epsilon": {
            "name": "test_should_assign_custom_epsilon",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEpsilonGreedy.test_should_work_with_acs": {
            "name": "test_should_work_with_acs",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "acs_cfg": [
                    "float"
                ]
            }
        },
        "TestEpsilonGreedy.test_should_work_with_acs2": {
            "name": "test_should_work_with_acs2",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "acs2_cfg": [
                    "float"
                ]
            }
        }
    },
    "pyalcs-master/tests/lcs/strategies/action_selection/test_RandomAction.py": {
        "TestRandomAction.test_random_action_selection": {
            "name": "test_random_action_selection",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyalcs-master/tests/lcs/strategies/action_selection/__init__.py": {}
}
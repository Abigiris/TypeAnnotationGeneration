{
    "pyborg-1up-master/tasks.py": {
        "deploy": {
            "name": "deploy",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "c": [
                    "int",
                    "str",
                    "Counter",
                    "Iterable[Tuple[int, int]]"
                ],
                "git": [
                    "bool",
                    "str",
                    "Tuple[str]"
                ],
                "restart": [
                    "bool",
                    "str",
                    "Tuple[str]"
                ],
                "sync": [
                    "bool",
                    "str",
                    "Tuple[str]"
                ],
                "target_machine": [
                    "Text",
                    "str",
                    "int",
                    "List[str]",
                    "List"
                ]
            }
        },
        "release": {
            "name": "release",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "c": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[str]"
                ],
                "clean": [
                    "bool",
                    "Optional[Callable]"
                ],
                "docker": [
                    "bool",
                    "Optional[Callable]"
                ]
            }
        },
        "bandit": {
            "name": "bandit",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "c": [
                    "List[str]",
                    "tuple",
                    "Dict[str, Any]",
                    "pathlib.Path"
                ]
            }
        },
        "docs": {
            "name": "docs",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "c": [
                    "str",
                    "List[str]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "docker_gauntlet": {
            "name": "docker_gauntlet",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "c": [
                    "str",
                    "pathlib.Path",
                    "bytes"
                ]
            }
        },
        "systemd_tests": {
            "name": "systemd_tests",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "c": [
                    "tuple",
                    "Union[int, float]",
                    "List[str]",
                    "List[bytes]",
                    "Dict[str, Any]",
                    "bool",
                    "int"
                ]
            }
        },
        "outdated": {
            "name": "outdated",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "c": [
                    "int",
                    "str",
                    "Counter",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "lint": {
            "name": "lint",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "c": [
                    "List[str]",
                    "Dict[str, Any]",
                    "bool",
                    "list"
                ],
                "mypy": [
                    "bool",
                    "str",
                    "Tuple[str]"
                ],
                "pylint": [
                    "bool",
                    "str",
                    "Tuple[str]"
                ]
            }
        }
    },
    "pyborg-1up-master/docs/source/conf.py": {},
    "pyborg-1up-master/misc/pyborg-telnet.py": {},
    "pyborg-1up-master/misc/pyborg_config_slurp.py": {},
    "pyborg-1up-master/misc/historical_brain_converters/convert.py": {},
    "pyborg-1up-master/misc/historical_brain_converters/convert2.py": {},
    "pyborg-1up-master/misc/old_experimental_scripts/pyborg-cc.py": {},
    "pyborg-1up-master/misc/old_experimental_scripts/pyborg-msnp.py": {},
    "pyborg-1up-master/misc/old_experimental_scripts/reddit-backup.py": {},
    "pyborg-1up-master/pyborg/pyborg_entrypoint.py": {
        "resolve_brain": {
            "name": "resolve_brain",
            "location": 54,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "target_brain": [
                    "_T0@@"
                ]
            }
        },
        "cli_base": {
            "name": "cli_base",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "verbose": [],
                "debug": [],
                "my_version": []
            }
        },
        "local_help": {
            "name": "local_help",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "folder_info": {
            "name": "folder_info",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "utils": {
            "name": "utils",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "dump_httpd_info": {
            "name": "dump_httpd_info",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "yeet_systemd": {
            "name": "yeet_systemd",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "discord_mgr": {
            "name": "discord_mgr",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_eris": {
            "name": "_eris",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [],
                "debug": [
                    "bool"
                ]
            }
        },
        "list_discord_servers": {
            "name": "list_discord_servers",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "leave_discord_server": {
            "name": "leave_discord_server",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "server_id_partial": []
            }
        },
        "interactive_leave_discord_server": {
            "name": "interactive_leave_discord_server",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "info_discord_server": {
            "name": "info_discord_server",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "server_id_partial": []
            }
        },
        "brain": {
            "name": "brain",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ls_brains": {
            "name": "ls_brains",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "list_brains": {
            "name": "list_brains",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "backup": {
            "name": "backup",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "target_brain": [],
                "output": []
            }
        },
        "stats": {
            "name": "stats",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "target_brain": []
            }
        },
        "graph": {
            "name": "graph",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "target_brain": []
            }
        },
        "convert": {
            "name": "convert",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "target_brain": [],
                "tag": []
            }
        },
        "upgrade_to_json": {
            "name": "upgrade_to_json",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "target_brain": []
            }
        },
        "doctor": {
            "name": "doctor",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "target_brain": [],
                "one_two": []
            }
        },
        "check_server": {
            "name": "check_server",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [],
                "port": [
                    "int"
                ]
            }
        },
        "run_mastodon": {
            "name": "run_mastodon",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "conf_file": [],
                "secret_folder": []
            }
        },
        "yeet_config": {
            "name": "yeet_config",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "mastodon": {
            "name": "mastodon",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "base_url": [],
                "conf_file": [],
                "secret_folder": []
            }
        },
        "mastodon_register": {
            "name": "mastodon_register",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "cred_file": [],
                "bot_name": []
            }
        },
        "mastodon_login": {
            "name": "mastodon_login",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "cred_file": [],
                "username": [],
                "password": []
            }
        },
        "irc": {
            "name": "irc",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "conf_file": []
            }
        },
        "tumblr": {
            "name": "tumblr",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "conf_file": []
            }
        },
        "http": {
            "name": "http",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "reloader": [],
                "port": [],
                "host": [],
                "brain_name": []
            }
        },
        "set_logging_level": {
            "name": "set_logging_level",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "log_level": []
            }
        },
        "twitter": {
            "name": "twitter",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {
                "conf_file": []
            }
        },
        "get_api": {
            "name": "get_api",
            "location": 549,
            "return": [
                "Any"
            ],
            "arguments": {
                "conf_file": []
            }
        },
        "follow_twitter_user": {
            "name": "follow_twitter_user",
            "location": 564,
            "return": [
                "None"
            ],
            "arguments": {
                "conf_file": [],
                "target_user": []
            }
        },
        "filein": {
            "name": "filein",
            "location": 581,
            "return": [
                "None"
            ],
            "arguments": {
                "multiplex": [],
                "input_file": []
            }
        },
        "discord": {
            "name": "discord",
            "location": 590,
            "return": [
                "None"
            ],
            "arguments": {
                "conf_file": []
            }
        },
        "reddit": {
            "name": "reddit",
            "location": 605,
            "return": [
                "None"
            ],
            "arguments": {
                "conf_file": []
            }
        },
        "linein": {
            "name": "linein",
            "location": 620,
            "return": [
                "None"
            ],
            "arguments": {
                "multiplex": []
            }
        },
        "version": {
            "name": "version",
            "location": 632,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "subtitles": {
            "name": "subtitles",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {
                "conf_file": [],
                "subtitle_file": []
            }
        }
    },
    "pyborg-1up-master/pyborg/pyborg/commands.py": {
        "info": {
            "name": "info",
            "location": 13,
            "return": [
                "str",
                "int",
                "bytes",
                "bool"
            ],
            "arguments": {}
        },
        "words": {
            "name": "words",
            "location": 19,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "multiplex": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "multi_server": [
                    "str",
                    "Dict",
                    "Dict[str,str]",
                    "Dict[str,bool]"
                ]
            }
        },
        "known": {
            "name": "known",
            "location": 39,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "multiplex": [
                    "bool",
                    "str",
                    "int"
                ],
                "multi_server": [
                    "str"
                ],
                "msg": [
                    "str",
                    "Text"
                ]
            }
        },
        "blap": {
            "name": "blap",
            "location": 49,
            "return": [
                "Text",
                "str",
                "Dict",
                "Dict[str,int]"
            ],
            "arguments": {}
        },
        "spray": {
            "name": "spray",
            "location": 54,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "pyborg-1up-master/pyborg/pyborg/pyborg.py": {
        "filter_message": {
            "name": "filter_message",
            "location": 62,
            "return": [
                "str",
                "float",
                "logging.LogRecord",
                "Callable[[None],bool]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "message": [
                    "bytes",
                    "bool",
                    "float"
                ],
                "bot": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "None",
                    "bool",
                    "MutableMapping[str,Any]",
                    "Dict[str,Any]",
                    "MutableMapping"
                ]
            }
        },
        "checkdict": {
            "name": "checkdict",
            "location": 158,
            "return": [
                "str"
            ],
            "arguments": {
                "pyb": [
                    "int",
                    "datetime.datetime"
                ]
            }
        },
        "known_command": {
            "name": "known_command",
            "location": 190,
            "return": [
                "str"
            ],
            "arguments": {
                "pyb": [
                    "List",
                    "Sequence[str]",
                    "str"
                ],
                "word": [
                    "List[List[Any]]",
                    "List[list[Any]]"
                ]
            }
        },
        "known2": {
            "name": "known2",
            "location": 199,
            "return": [
                "str"
            ],
            "arguments": {
                "pyb": [
                    "Sequence[str]",
                    "Callable"
                ],
                "words": [
                    "Sequence[str]",
                    "Callable"
                ]
            }
        },
        "_internal_commands_generate": {
            "name": "_internal_commands_generate",
            "location": 210,
            "return": [
                "Dict[(str, InternalCommand)]"
            ],
            "arguments": {}
        },
        "_create_new_database": {
            "name": "_create_new_database",
            "location": 214,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "PyborgBridge": {
            "name": "PyborgBridge",
            "location": 224,
            "return": [
                "PyborgExperimental"
            ],
            "arguments": {
                "brain": []
            }
        },
        "FakeCfg2.save": {
            "name": "save",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeAns.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InternalCommand.get_help": {
            "name": "get_help",
            "location": 151,
            "return": [
                "str",
                "Iterable[str]",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyborgExperimental.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyborgExperimental.__repr__": {
            "name": "__repr__",
            "location": 259,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyborgExperimental.__str__": {
            "name": "__str__",
            "location": 262,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyborgExperimental.from_brain": {
            "name": "from_brain",
            "location": 266,
            "return": [
                "PyborgExperimental"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPyborgExperimental]"
                ],
                "brain": [
                    "str",
                    "bool",
                    "bytes",
                    "pathlib.Path",
                    "int"
                ]
            }
        },
        "PyborgExperimental.make_reply": {
            "name": "make_reply",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str",
                    "bool",
                    "bytes",
                    "Mapping",
                    "Mapping[str,str]",
                    "int"
                ]
            }
        },
        "PyborgExperimental.learn": {
            "name": "learn",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str",
                    "bool",
                    "bytes",
                    "Mapping",
                    "Mapping[str,str]",
                    "int"
                ]
            }
        },
        "PyborgExperimental.save": {
            "name": "save",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "pyborg.load_brain_2": {
            "name": "load_brain_2",
            "location": 332,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "brain_path": [
                    "str",
                    "BinaryIO",
                    "pathlib.Path"
                ]
            }
        },
        "pyborg.load_brain_json": {
            "name": "load_brain_json",
            "location": 363,
            "return": [
                "Tuple[(Any, Dict[(int, Any)])]"
            ],
            "arguments": {
                "brain_path": [
                    "str",
                    "Union[pathlib.Path,str]",
                    "pathlib.Path",
                    "int"
                ]
            }
        },
        "pyborg.save_brain": {
            "name": "save_brain",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "pyborg.save_all": {
            "name": "save_all",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "pyborg.load_settings": {
            "name": "load_settings",
            "location": 420,
            "return": [
                "FakeCfg2"
            ],
            "arguments": {
                "self": []
            }
        },
        "pyborg.__repr__": {
            "name": "__repr__",
            "location": 434,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "pyborg.__init__": {
            "name": "__init__",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "brain": [
                    "None",
                    "str",
                    "Optional[str]",
                    "List[dict[str,Any]]",
                    "int",
                    "Optional[pathlib.Path]",
                    "Any",
                    "Union[str,pathlib.Path,None]",
                    "List[Dict[str,Any]]",
                    "Optional[int]",
                    "Optional[Any]"
                ]
            }
        },
        "pyborg.save_all_2": {
            "name": "save_all_2",
            "location": 511,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "pyborg.process_msg": {
            "name": "process_msg",
            "location": 573,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "io_module": [
                    "bool",
                    "float",
                    "Callable[...,None]",
                    "int"
                ],
                "body": [
                    "str",
                    "Tuple",
                    "Optional[str]",
                    "Dict",
                    "Dict[str,str]"
                ],
                "replyrate": [
                    "int",
                    "float",
                    "datetime.timedelta",
                    "bool"
                ],
                "learn": [
                    "int",
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None"
                ],
                "args": [],
                "owner": [
                    "str",
                    "int"
                ]
            }
        },
        "pyborg.do_commands": {
            "name": "do_commands",
            "location": 628,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "io_module": [
                    "str",
                    "List",
                    "int",
                    "Match[str]",
                    "Match"
                ],
                "body": [
                    "bytes",
                    "str",
                    "Dict",
                    "MutableMapping"
                ],
                "args": [],
                "owner": [
                    "int",
                    "str",
                    "uuid.UUID",
                    "bool"
                ]
            }
        },
        "pyborg.replace": {
            "name": "replace",
            "location": 878,
            "return": [
                "str",
                "Text",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "old": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "Dict[str,Any]",
                    "bytes",
                    "pathlib.Path"
                ],
                "new": [
                    "List[Dict[str,Any]]",
                    "str",
                    "List[dict[str,Any]]",
                    "Callable"
                ]
            }
        },
        "pyborg.purge": {
            "name": "purge",
            "location": 913,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "max_contexts": [
                    "int",
                    "float",
                    "Union[float,int]"
                ],
                "io_module": [
                    "Dict[str, Dict[str, Any]]",
                    "List[Dict]",
                    "list",
                    "bool",
                    "int"
                ]
            }
        },
        "pyborg.unlearn": {
            "name": "unlearn",
            "location": 946,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "int",
                    "Dict[str,Any]",
                    "bytes"
                ]
            }
        },
        "pyborg._is_censored": {
            "name": "_is_censored",
            "location": 988,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str"
                ]
            }
        },
        "pyborg.reply": {
            "name": "reply",
            "location": 996,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "bytes",
                    "str",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "pyborg.learn": {
            "name": "learn",
            "location": 1260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str"
                ],
                "num_context": [
                    "int",
                    "str",
                    "datetime.datetime",
                    "Optional[datetime.time]",
                    "uuid.UUID"
                ]
            }
        },
        "pyborg.reply.weight": {
            "name": "weight",
            "location": 1055,
            "return": [
                "int",
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "pos": [
                    "Pattern",
                    "str",
                    "int"
                ]
            }
        },
        "pyborg.reply._mappable_nick_clean": {
            "name": "_mappable_nick_clean",
            "location": 1065,
            "return": [
                "Tuple[int]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pair": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "pyborg.learn.learn_line": {
            "name": "learn_line",
            "location": 1266,
            "return": [
                "None",
                "Set",
                "int"
            ],
            "arguments": {
                "body": [
                    "str"
                ],
                "num_context": [
                    "str",
                    "int",
                    "float"
                ]
            }
        }
    },
    "pyborg-1up-master/pyborg/pyborg/__init__.py": {},
    "pyborg-1up-master/pyborg/pyborg/mod/mod_discord.py": {
        "PyborgDiscord.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyborgDiscord.our_start": {
            "name": "our_start",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyborgDiscord.clean_msg": {
            "name": "clean_msg",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Callable",
                    "discord.Message"
                ]
            }
        },
        "PyborgDiscord._extract_emoji": {
            "name": "_extract_emoji",
            "location": 92,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "List[int]",
                    "Optional[str]"
                ],
                "server_emojis": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "PyborgDiscord._plaintext_name": {
            "name": "_plaintext_name",
            "location": 200,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Dict[str,Any]",
                    "discord.Message",
                    "Type",
                    "apistar.types.Handler"
                ]
            }
        },
        "PyborgDiscord.scan": {
            "name": "scan",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "FancyCallable.__call__": {
            "name": "__call__",
            "location": 256,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "multiplex": [
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "multi_server": [
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "msg": [
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "Registry.__init__": {
            "name": "__init__",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mod": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "Registry.__str__": {
            "name": "__str__",
            "location": 265,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Registry.add": {
            "name": "add",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "ob": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "internals": [
                    "bool",
                    "str"
                ],
                "pass_msg": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "Container",
                    "Container[Taxon]",
                    "Optional[int]"
                ]
            }
        }
    },
    "pyborg-1up-master/pyborg/pyborg/mod/mod_filein.py": {
        "ModFileIn.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModFileIn.run": {
            "name": "run",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f_name": [
                    "str",
                    "int"
                ]
            }
        },
        "ModFileIn.learn": {
            "name": "learn",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bool"
                ]
            }
        },
        "ModFileIn.save": {
            "name": "save",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyborg-1up-master/pyborg/pyborg/mod/mod_http.py": {
        "index": {
            "name": "index",
            "location": 24,
            "return": [
                "Text",
                "str",
                "Dict"
            ],
            "arguments": {
                "pyborg": [
                    "Callable",
                    "Dict[str,Any]",
                    "float"
                ]
            }
        },
        "learn": {
            "name": "learn",
            "location": 36,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pyborg": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "reply": {
            "name": "reply",
            "location": 43,
            "return": [
                "Union[str, List[str]]",
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "pyborg": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "save": {
            "name": "save",
            "location": 50,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "pyborg": [
                    "pathlib.Path",
                    "bool",
                    "Iterable[T]",
                    "str",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "info": {
            "name": "info",
            "location": 57,
            "return": [
                "str",
                "Tuple"
            ],
            "arguments": {
                "pyborg": [
                    "str",
                    "IO",
                    "List[str]"
                ]
            }
        },
        "info2": {
            "name": "info2",
            "location": 62,
            "return": [
                "Dict[Text,]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "pyborg": [
                    "str",
                    "IO",
                    "List[str]"
                ]
            }
        },
        "stats": {
            "name": "stats",
            "location": 67,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pyborg": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "process": {
            "name": "process",
            "location": 90,
            "return": [
                "Text",
                "str",
                "bytes"
            ],
            "arguments": {
                "pyborg": [
                    "Sequence[int]",
                    "bytes",
                    "str"
                ]
            }
        },
        "known": {
            "name": "known",
            "location": 107,
            "return": [
                "Text",
                "str",
                "int"
            ],
            "arguments": {
                "pyborg": [
                    "Sequence[T]",
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "List[int]",
                    "List"
                ]
            }
        },
        "words_json": {
            "name": "words_json",
            "location": 117,
            "return": [
                "BaseException",
                "Dict[Text,int]"
            ],
            "arguments": {
                "pyborg": [
                    "str",
                    "bytes",
                    "Set[str]",
                    "int"
                ]
            }
        },
        "commands_json": {
            "name": "commands_json",
            "location": 124,
            "return": [
                "list",
                "Callable[[Mapping], T]",
                "int",
                "Tuple[str, str]",
                "str"
            ],
            "arguments": {
                "pyborg": [
                    "List",
                    "int",
                    "Callable[[Mapping],T]",
                    "Callable[Mapping,T]",
                    "str",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "save_lock_status": {
            "name": "save_lock_status",
            "location": 129,
            "return": [
                "Dict[Text,]",
                "int",
                "Dict[str,str]",
                "Exception"
            ],
            "arguments": {
                "pyborg": [
                    "bool",
                    "Sequence[int]"
                ]
            }
        },
        "set_log_level": {
            "name": "set_log_level",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DumbyIOMod.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DumbyIOMod.output": {
            "name": "output",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "IO[bytes]",
                    "bool",
                    "IO",
                    "Dict",
                    "Dict[str,int]",
                    "Optional[Dict]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "pyborg-1up-master/pyborg/pyborg/mod/mod_irc.py": {
        "Registry.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mod_irc": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Registry.add": {
            "name": "add",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "ob": [
                    "str",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "internals": [
                    "bool",
                    "str"
                ],
                "pass_msg": [
                    "bool",
                    "str"
                ]
            }
        },
        "ModIRC.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "my_pyborg": [
                    "int",
                    "Tuple",
                    "bool",
                    "None",
                    "Optional[int]"
                ],
                "settings": [
                    "bytes",
                    "bytearray",
                    "Dict[str,int]",
                    "List[Any]",
                    "int",
                    "Union[Dict[str,Any],List[Any]]"
                ],
                "channel": [
                    "bool",
                    "None",
                    "List[int]",
                    "str",
                    "Dict[str,Any]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "nickname": [
                    "int",
                    "List[int]",
                    "None",
                    "str"
                ],
                "server": [
                    "int",
                    "None"
                ],
                "port": [
                    "str",
                    "int",
                    "None",
                    "Callable[,Iterable[float]]"
                ]
            }
        },
        "ModIRC.scan": {
            "name": "scan",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "ModIRC.on_welcome": {
            "name": "on_welcome",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "str",
                    "Iterable",
                    "List[str]",
                    "T"
                ],
                "e": [
                    "bool",
                    "irc.clienServerConnection",
                    "irc.clienEvent",
                    "int"
                ]
            }
        },
        "ModIRC.on_nicknameinuse": {
            "name": "on_nicknameinuse",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "irc.clienServerConnection",
                    "T",
                    "float",
                    "Callable"
                ],
                "e": [
                    "bool",
                    "irc.clienServerConnection",
                    "irc.clienEvent",
                    "int"
                ]
            }
        },
        "ModIRC.strip_nicks": {
            "name": "strip_nicks",
            "location": 73,
            "return": [
                "str",
                "Dict[str,str]",
                "MutableMapping[str,Any]",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str"
                ],
                "e": [
                    "str",
                    "int",
                    "float",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "ModIRC.replace_nicks": {
            "name": "replace_nicks",
            "location": 81,
            "return": [
                "str",
                "Dict[str,str]",
                "MutableMapping[str,Any]",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str"
                ],
                "e": [
                    "int",
                    "str",
                    "List[str]",
                    "float"
                ]
            }
        },
        "ModIRC.learn": {
            "name": "learn",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "Dict",
                    "str",
                    "Union[Dict,List]",
                    "List",
                    "Tuple[int,float]",
                    "Tuple[Union[int,float]]",
                    "Dict[int,Dict]",
                    "Dict[int,dict]"
                ]
            }
        },
        "ModIRC.reply": {
            "name": "reply",
            "location": 100,
            "return": [
                "Union[tuple,list]",
                "None",
                "str",
                "List[int]",
                "int",
                "Dict[str,Any]",
                "Dict[str,int]",
                "List"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str",
                    "Dict",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "None",
                    "Dict[int,Dict]",
                    "Dict[int,dict]"
                ]
            }
        },
        "ModIRC.on_pubmsg": {
            "name": "on_pubmsg",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "Callable"
                ],
                "e": [
                    "str",
                    "Dict[str,Any]",
                    "Tuple",
                    "Sequence[str]",
                    "Union[Dict,List]",
                    "Dict",
                    "List"
                ]
            }
        },
        "ModIRC.teardown": {
            "name": "teardown",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyborg-1up-master/pyborg/pyborg/mod/mod_linein.py": {
        "ModLineIn.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "my_pyborg": [
                    "int",
                    "float",
                    "bool"
                ],
                "multiplexed": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ModLineIn.start": {
            "name": "start",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModLineIn.save": {
            "name": "save",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModLineIn.output": {
            "name": "output",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool"
                ],
                "args": []
            }
        }
    },
    "pyborg-1up-master/pyborg/pyborg/mod/mod_mastodon.py": {
        "PyborgMastodon.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyborgMastodon.teardown": {
            "name": "teardown",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyborgMastodon.learn": {
            "name": "learn",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str"
                ]
            }
        },
        "PyborgMastodon.reply": {
            "name": "reply",
            "location": 71,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str"
                ]
            }
        },
        "PyborgMastodon.should_reply_direct": {
            "name": "should_reply_direct",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "usern": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PyborgMastodon.is_reply_to_me": {
            "name": "is_reply_to_me",
            "location": 97,
            "return": [
                "bool",
                "Dict",
                "Dict[str,str]",
                "Dict[str,Any]",
                "Optional[Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List[T]",
                    "List",
                    "int",
                    "T",
                    "Optional[Any]"
                ]
            }
        },
        "PyborgMastodon.toot_has_cw": {
            "name": "toot_has_cw",
            "location": 109,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "toot": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "PyborgMastodon.user_has_nobot": {
            "name": "user_has_nobot",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "toot": [
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "PyborgMastodon.handle_toots": {
            "name": "handle_toots",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "toots": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "PyborgMastodon.start": {
            "name": "start",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "Text",
                    "str",
                    "int"
                ]
            }
        }
    },
    "pyborg-1up-master/pyborg/pyborg/mod/mod_reddit.py": {
        "PyborgReddit.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "toml_file": [
                    "str"
                ]
            }
        },
        "PyborgReddit.load_praw_comments": {
            "name": "load_praw_comments",
            "location": 76,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyborgReddit.handle_post": {
            "name": "handle_post",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "post": [
                    "bool",
                    "Dict",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "PyborgReddit.post_is_clean": {
            "name": "post_is_clean",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "post": [
                    "bool",
                    "List[str]",
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "PyborgReddit.start": {
            "name": "start",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyborgReddit.teardown": {
            "name": "teardown",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyborg-1up-master/pyborg/pyborg/mod/mod_subtitle.py": {
        "PyborgSubtitles.start": {
            "name": "start",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyborgSubtitles.clean": {
            "name": "clean",
            "location": 41,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "subtitle": [
                    "str",
                    "float",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "PyborgSubtitles.run": {
            "name": "run",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyborgSubtitles.pre_process": {
            "name": "pre_process",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyborgSubtitles.reply": {
            "name": "reply",
            "location": 70,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str"
                ]
            }
        },
        "PyborgSubtitles.teardown": {
            "name": "teardown",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyborg-1up-master/pyborg/pyborg/mod/mod_tumblr.py": {
        "PyborgTumblr.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "toml_file": [
                    "str",
                    "bool"
                ]
            }
        },
        "PyborgTumblr.load_new_from_tag": {
            "name": "load_new_from_tag",
            "location": 30,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "List[str]",
                    "None",
                    "Optional[List[str]]",
                    "Optional[str]"
                ]
            }
        },
        "PyborgTumblr.handle_post": {
            "name": "handle_post",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "post": [
                    "Callable"
                ]
            }
        },
        "PyborgTumblr.start": {
            "name": "start",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyborgTumblr.teardown": {
            "name": "teardown",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyborg-1up-master/pyborg/pyborg/mod/mod_twitter.py": {
        "NoBlankLogFilter.filter": {
            "name": "filter",
            "location": 16,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "List[str]",
                    "Sequence[str]",
                    "Set[str]",
                    "Callable",
                    "Tuple",
                    "str",
                    "bool"
                ]
            }
        },
        "PyborgTwitter.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conf_file": [
                    "str",
                    "Dict",
                    "List[str]"
                ]
            }
        },
        "PyborgTwitter.learn": {
            "name": "learn",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str",
                    "int"
                ]
            }
        },
        "PyborgTwitter.reply": {
            "name": "reply",
            "location": 58,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str",
                    "int"
                ]
            }
        },
        "PyborgTwitter.get_tweets": {
            "name": "get_tweets",
            "location": 78,
            "return": [
                "str",
                "bool",
                "Dict",
                "float",
                "Dict[str,int]",
                "int",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyborgTwitter.is_reply_to_me": {
            "name": "is_reply_to_me",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tweet": [
                    "Type",
                    "str",
                    "tweepy.Status"
                ]
            }
        },
        "PyborgTwitter._bail_if_only_images": {
            "name": "_bail_if_only_images",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tweet": [
                    "List[int]",
                    "Dict[str,Any]",
                    "List",
                    "List[float]",
                    "Union[List[float],List[int]]",
                    "Iterable[Tuple[str,str]]"
                ]
            }
        },
        "PyborgTwitter.handle_tweet": {
            "name": "handle_tweet",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tweet": [
                    "str"
                ]
            }
        },
        "PyborgTwitter.teardown": {
            "name": "teardown",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyborgTwitter.start": {
            "name": "start",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyborg-1up-master/pyborg/pyborg/mod/__init__.py": {},
    "pyborg-1up-master/pyborg/pyborg/util/awoo.py": {
        "normalize_awoos": {
            "name": "normalize_awoos",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "inp": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "pyborg-1up-master/pyborg/pyborg/util/bottle_plugin.py": {
        "BottledPyborg.setup": {
            "name": "setup",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "BottledPyborg.close": {
            "name": "close",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BottledPyborg.apply": {
            "name": "apply",
            "location": 31,
            "return": [
                "Union[(Callable, _T0)]"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "route": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "BottledPyborg.apply.wrapper": {
            "name": "wrapper",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "pyborg-1up-master/pyborg/pyborg/util/censored_defaults.py": {},
    "pyborg-1up-master/pyborg/pyborg/util/commands.py": {
        "command": {
            "name": "command",
            "location": 11,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "internals": [
                    "bool",
                    "Optional[str]",
                    "List[str]",
                    "int"
                ],
                "pass_msg": [
                    "bool",
                    "Optional[str]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "load_simple_commands": {
            "name": "load_simple_commands",
            "location": 24,
            "return": [
                "Dict",
                "str",
                "Union[str,pathlib.Path]",
                "Sequence[str]",
                "Dict[str,Any]",
                "OrderedDict"
            ],
            "arguments": {
                "directory": [
                    "Union[io.TextIO, pathlib.Path]",
                    "str",
                    "pathlib.Path",
                    "List[str]",
                    "list"
                ]
            }
        },
        "command.decorator": {
            "name": "decorator",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "wrapped": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "command.decorator.callback": {
            "name": "callback",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "scanner": [
                    "str",
                    "Callable",
                    "venusian.Scanner",
                    "Union[Set[int], List[int], Dict[int, Any]]",
                    "Dict[int, List[int]]",
                    "Set[str]"
                ],
                "name": [
                    "str",
                    "Callable",
                    "venusian.Scanner",
                    "Union[Set[int], List[int], Dict[int, Any]]",
                    "Dict[int, List[int]]",
                    "Set[str]"
                ],
                "ob": [
                    "str",
                    "Callable",
                    "venusian.Scanner",
                    "Union[Set[int], List[int], Dict[int, Any]]",
                    "Dict[int, List[int]]",
                    "Set[str]"
                ]
            }
        }
    },
    "pyborg-1up-master/pyborg/pyborg/util/config_defaults.py": {},
    "pyborg-1up-master/pyborg/pyborg/util/hate_filter.py": {},
    "pyborg-1up-master/pyborg/pyborg/util/keybase_chat.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "pyborg-1up-master/pyborg/pyborg/util/stats.py": {
        "send_stats": {
            "name": "send_stats",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "pyb": [
                    "int",
                    "memoryview",
                    "Iterable[T]",
                    "bool"
                ]
            }
        }
    },
    "pyborg-1up-master/pyborg/pyborg/util/utils_testing.py": {},
    "pyborg-1up-master/pyborg/pyborg/util/util_cli.py": {
        "mk_folder": {
            "name": "mk_folder",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "networkx_demo": {
            "name": "networkx_demo",
            "location": 25,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "pyb": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ],
                "graphics": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ],
                "export": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "init_systemd": {
            "name": "init_systemd",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Service.yeet": {
            "name": "yeet",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "working_directory": [
                    "bool",
                    "None"
                ],
                "user": [
                    "bool",
                    "float",
                    "Set[str]"
                ]
            }
        }
    },
    "pyborg-1up-master/pyborg/pyborg/util/__init__.py": {},
    "pyborg-1up-master/pyborg/test/test_awoo.py": {
        "TestAwooNormalize.test_1_awoo": {
            "name": "test_1_awoo",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAwooNormalize.test_2_awoo": {
            "name": "test_2_awoo",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAwooNormalize.test_real_world": {
            "name": "test_real_world",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAwooNormalize.test_uppercase_awoo": {
            "name": "test_uppercase_awoo",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAwooNormalize.test_mixed_awoo": {
            "name": "test_mixed_awoo",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyborg-1up-master/pyborg/test/test_discord.py": {
        "TestOnMessage.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOnMessage.test_no_reply": {
            "name": "test_no_reply",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_reply": [],
                "patched_learn": [],
                "patched_user": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestOnMessage.test_reply": {
            "name": "test_reply",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_reply": [],
                "patched_learn": [],
                "patched_user": [
                    "asyncio.AbstractEventLoop"
                ],
                "patched_normalize": [
                    "mock.Mock"
                ]
            }
        },
        "TestOnMessage.test_nick_replace": {
            "name": "test_nick_replace",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_reply": [],
                "patched_learn": [],
                "patched_user": [
                    "asyncio.AbstractEventLoop"
                ],
                "patched_normalize": [
                    "mock.Mock"
                ]
            }
        },
        "TestPlaintexPing.setUp": {
            "name": "setUp",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlaintexPing.tearDown": {
            "name": "tearDown",
            "location": 93,
            "return": [
                "Coroutine[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlaintexPing.test_nick_substitution": {
            "name": "test_nick_substitution",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_reply": [],
                "patched_learn": [],
                "patched_user": [
                    "asyncio.AbstractEventLoop"
                ],
                "patched_plaintext": [
                    "mock.MagicMock"
                ],
                "patched_normalize": [
                    "mock.Mock"
                ]
            }
        },
        "TestPlaintextPingRedact.setUp": {
            "name": "setUp",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlaintextPingRedact.tearDown": {
            "name": "tearDown",
            "location": 116,
            "return": [
                "Coroutine[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlaintextPingRedact.test_nick_purged": {
            "name": "test_nick_purged",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_reply": [],
                "patched_learn": [],
                "patched_user": [
                    "asyncio.AbstractEventLoop"
                ],
                "patched_plaintext": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestCustomEmojis.setUp": {
            "name": "setUp",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomEmojis.tearDown": {
            "name": "tearDown",
            "location": 137,
            "return": [
                "Coroutine[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomEmojis.test_learn_custom_emojis": {
            "name": "test_learn_custom_emojis",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_reply": [],
                "patched_learn": [],
                "patched_user": [],
                "patched_normalize": []
            }
        },
        "TestCustomEmojis.test_learn_custom_emojis_simple": {
            "name": "test_learn_custom_emojis_simple",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_reply": [],
                "patched_learn": [],
                "patched_user": [],
                "patched_normalize": []
            }
        },
        "TestCustomEmojis.test_extract_emoji": {
            "name": "test_extract_emoji",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyborg-1up-master/pyborg/test/test_irc2.py": {
        "TestReplys.test_learn_on_message": {
            "name": "test_learn_on_message",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "float"
                ],
                "learn": [
                    "RuntimeError"
                ],
                "reply": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "bool",
                    "List[bool]",
                    "List[List[Any]]",
                    "List[list[Any]]"
                ],
                "stripnicks": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "bool",
                    "List[bool]",
                    "List[List[Any]]",
                    "List[list[Any]]"
                ]
            }
        },
        "TestReplys.test_nick_reply": {
            "name": "test_nick_reply",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "float"
                ],
                "learn": [
                    "str",
                    "Callable",
                    "Set",
                    "Dict[str,Any]"
                ],
                "reply": [],
                "stripnicks": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "bool",
                    "List[bool]",
                    "List[List[Any]]",
                    "List[list[Any]]"
                ]
            }
        },
        "TestReplys.test_ignore_reply": {
            "name": "test_ignore_reply",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "float"
                ],
                "learn": [],
                "reply": [],
                "stripnicks": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "bool",
                    "List[bool]",
                    "List[List[Any]]",
                    "List[list[Any]]"
                ]
            }
        },
        "TestReplys.test_nick_replace": {
            "name": "test_nick_replace",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_choice": []
            }
        },
        "TestReplys.test_nick_strip": {
            "name": "test_nick_strip",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLaunch.test_launch": {
            "name": "test_launch",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_pyb_irc": [
                    "Iterable[tuple[Union[int,int]]]",
                    "Iterable[Tuple[int,int]]",
                    "List[str]"
                ],
                "patched_pyb": [],
                "patched_load": [],
                "patched_check": [
                    "bool",
                    "int"
                ]
            }
        },
        "TestLaunch.test_ctrl_c": {
            "name": "test_ctrl_c",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_pyb_irc": [
                    "bool",
                    "str",
                    "int",
                    "Type",
                    "Type[Any]"
                ],
                "patched_load": [],
                "patched_check": []
            }
        },
        "TestLaunch.test_handle_exception": {
            "name": "test_handle_exception",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_pyb_irc": [
                    "List[str]",
                    "str"
                ],
                "patched_load": [],
                "patched_check": []
            }
        }
    },
    "pyborg-1up-master/pyborg/test/test_mastodon.py": {
        "TestTimezoneCrap.test_time_compare": {
            "name": "test_time_compare",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_post": [
                    "str"
                ],
                "patched_reply": [
                    "str"
                ],
                "patched_learn": [
                    "str"
                ],
                "patched_should": [
                    "mock.MagicMock"
                ]
            }
        }
    },
    "pyborg-1up-master/pyborg/test/test_pyborg.py": {
        "TestPyborgInit.test_load_settings": {
            "name": "test_load_settings",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_toml": [],
                "patched_init": []
            }
        },
        "TestPyborgInit.test_load_brain_json_retuns_dicts": {
            "name": "test_load_brain_json_retuns_dicts",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyborgInit.test_load_brain_json_loads_small": {
            "name": "test_load_brain_json_loads_small",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyborgClobbersave.setUp": {
            "name": "setUp",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyborgClobbersave.test_no_clobber": {
            "name": "test_no_clobber",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_load_brain": [
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ],
                "patched_toml": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestPyborgSave.test_save_db": {
            "name": "test_save_db",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_toml": [],
                "patched_json": []
            }
        },
        "TestPyborgLearning.test_functional_learn": {
            "name": "test_functional_learn",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_toml": [],
                "patched_json": []
            }
        },
        "TestPyborgParsesQuestions.test_parse_question": {
            "name": "test_parse_question",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_toml": []
            }
        },
        "TestPyborgUnlearnWord.test_unlearn_unknown_small": {
            "name": "test_unlearn_unknown_small",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_toml": []
            }
        },
        "TestPyborgUnlearnWord.test_unlearn_known_linked_small": {
            "name": "test_unlearn_known_linked_small",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_toml": []
            }
        },
        "TestPyborgUnlearnWord.test_unlearn_known_leaf_small": {
            "name": "test_unlearn_known_leaf_small",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_toml": []
            }
        },
        "TestPyborgPurgeWord.test_purge_word_command": {
            "name": "test_purge_word_command",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_toml": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "TestPyborgFilterWord.test_censored_reply": {
            "name": "test_censored_reply",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_toml": []
            }
        },
        "TestPyborgFilterWord.test_censored_reply_regex": {
            "name": "test_censored_reply_regex",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_toml": []
            }
        },
        "TestPyborgIsFiltered.test_is_filter_regex": {
            "name": "test_is_filter_regex",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyborgReply.test_no_reply": {
            "name": "test_no_reply",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_toml": []
            }
        },
        "TestPyborgReply.test_bs_reply": {
            "name": "test_bs_reply",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_toml": []
            }
        },
        "TestPyborgReply.test_unicode_reply": {
            "name": "test_unicode_reply",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_toml": []
            }
        }
    },
    "pyborg-1up-master/pyborg/test/test_reddit.py": {
        "TestLaunch.test_launch": {
            "name": "test_launch",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_pyb_reddit": []
            }
        },
        "TestLaunch.test_ctrl_c": {
            "name": "test_ctrl_c",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_pyb_reddit": [
                    "Optional[Exception]",
                    "Exception",
                    "None"
                ],
                "patched_exit": []
            }
        },
        "TestLaunch.test_handle_exception": {
            "name": "test_handle_exception",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_pyb_reddit": [
                    "Optional[Exception]",
                    "Exception",
                    "None"
                ]
            }
        }
    },
    "pyborg-1up-master/pyborg/test/test_tumblr.py": {
        "TestBot.test_handle_post": {
            "name": "test_handle_post",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_load": [
                    "str"
                ],
                "patched_pyborg": [
                    "str"
                ],
                "patched_info": [
                    "str",
                    "bytes",
                    "pathlib.Path"
                ],
                "pybpybpyb": [
                    "bool",
                    "str",
                    "Set[str]",
                    "Iterable[List[Any]]"
                ]
            }
        },
        "TestBot.test_load_new": {
            "name": "test_load_new",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_load": [
                    "Dict[str,Any]",
                    "List[str]"
                ],
                "pybpybpyb": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "patched_tagged": [
                    "str",
                    "Optional[Dict[str, bytes]]",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "TestBot.test_start": {
            "name": "test_start",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_load": [
                    "str",
                    "bool"
                ],
                "pybpybpyb": [
                    "bool",
                    "str",
                    "List[int]",
                    "Container",
                    "T",
                    "Container[T]",
                    "int"
                ],
                "patched_new": [
                    "bool",
                    "str",
                    "List[int]",
                    "Container",
                    "T",
                    "Container[T]",
                    "int"
                ],
                "patched_sleep": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestBot.test_teardown": {
            "name": "test_teardown",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_load": [
                    "str",
                    "bool"
                ],
                "pybpybpyb": [
                    "str"
                ],
                "patched_open": [
                    "int",
                    "Iterable",
                    "Dict[str, Any]"
                ],
                "patched_dump": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        }
    },
    "pyborg-1up-master/pyborg/test/test_twitter.py": {
        "TestIgnoreImageTweets.test_ignore_blank_description": {
            "name": "test_ignore_blank_description",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyborg-1up-master/pyborg/test/test_upgrade.py": {
        "TestUpgrade1_4.setUpClass": {
            "name": "setUpClass",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "List[Union[str,SqlFile]]",
                    "List[str]",
                    "bool",
                    "Callable[...,None]",
                    "Callable"
                ]
            }
        },
        "TestUpgrade1_4.test_upgrade_to_json": {
            "name": "test_upgrade_to_json",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_load": [
                    "str",
                    "int",
                    "Sequence[Dict[str,str]]",
                    "Sequence[dict[str,str]]"
                ],
                "patched_dump": [
                    "str",
                    "Dict[str,object]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "pyborg-1up-master/pyborg/test/__init__.py": {}
}
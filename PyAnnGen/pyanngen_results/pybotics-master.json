{
    "pybotics-master/docs/conf.py": {},
    "pybotics-master/examples/basic_usage.py": {
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pybotics-master/pybotics/errors.py": {
        "PyboticsError.__str__": {
            "name": "__str__",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pybotics-master/pybotics/geometry.py": {
        "vector_2_matrix": {
            "name": "vector_2_matrix",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "vector": [
                    "Sequence[float]"
                ],
                "convention": [
                    "Union[(OrientationConvention, str)]"
                ]
            }
        },
        "position_from_matrix": {
            "name": "position_from_matrix",
            "location": 76,
            "return": [
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "matrix": [
                    "numpy.ndarray"
                ]
            }
        },
        "matrix_2_vector": {
            "name": "matrix_2_vector",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "matrix": [
                    "str",
                    "numpy.ndarray",
                    "list[str]",
                    "List[str]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "typing.Callable[, ]",
                    "Optional[Callable]",
                    "None"
                ],
                "convention": [
                    "OrientationConvention"
                ]
            }
        },
        "_matrix_2_euler_zyx": {
            "name": "_matrix_2_euler_zyx",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "matrix": [
                    "str",
                    "float",
                    "Iterable[str]"
                ]
            }
        },
        "wrap_2_pi": {
            "name": "wrap_2_pi",
            "location": 127,
            "return": [
                "float"
            ],
            "arguments": {
                "angle": [
                    "float"
                ]
            }
        },
        "rotation_matrix_x": {
            "name": "rotation_matrix_x",
            "location": 139,
            "return": [
                "int",
                "tuple[typing.Sequence[typing.Any]]",
                "str",
                "tuple[list[typing.Any]]",
                "numpy.ndarray",
                "list[str]"
            ],
            "arguments": {
                "angle": [
                    "float"
                ]
            }
        },
        "rotation_matrix_y": {
            "name": "rotation_matrix_y",
            "location": 149,
            "return": [
                "int",
                "tuple[typing.Sequence[typing.Any]]",
                "Callable",
                "tuple[list[typing.Any]]",
                "str",
                "list[str]"
            ],
            "arguments": {
                "angle": [
                    "float"
                ]
            }
        },
        "rotation_matrix_z": {
            "name": "rotation_matrix_z",
            "location": 159,
            "return": [
                "int",
                "tuple[typing.Sequence[typing.Any]]",
                "Callable",
                "tuple[list[typing.Any]]",
                "str",
                "list[str]"
            ],
            "arguments": {
                "angle": [
                    "float"
                ]
            }
        },
        "translation_matrix": {
            "name": "translation_matrix",
            "location": 169,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "xyz": [
                    "Sequence[float]"
                ]
            }
        }
    },
    "pybotics-master/pybotics/json_encoder.py": {
        "JSONEncoder.default": {
            "name": "default",
            "location": 11,
            "return": [
                "str",
                "None",
                "bool",
                "Callable",
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "Sequence[Tuple[float, float]]",
                    "typing.Sequence[tuple[typing.Union[float,float]]]"
                ]
            }
        }
    },
    "pybotics-master/pybotics/kinematic_chain.py": {
        "_validate_links": {
            "name": "_validate_links",
            "location": 101,
            "return": [
                "Sequence[pybotics.link.MDHLink]"
            ],
            "arguments": {
                "value": [
                    "float",
                    "list[]",
                    "bool",
                    "T",
                    "typing.Sequence[float]",
                    "list",
                    "Iterable[T]",
                    "Sequence[float]"
                ]
            }
        },
        "KinematicChain.to_json": {
            "name": "to_json",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KinematicChain.matrix": {
            "name": "matrix",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "KinematicChain.links": {
            "name": "links",
            "location": 55,
            "return": [
                "typing.Sequence[pybotics.link.Link]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KinematicChain.ndof": {
            "name": "ndof",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KinematicChain.num_parameters": {
            "name": "num_parameters",
            "location": 69,
            "return": [
                "builtins.int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KinematicChain.transforms": {
            "name": "transforms",
            "location": 75,
            "return": [
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "q": [
                    "Optional[Sequence[float]]"
                ]
            }
        },
        "KinematicChain.vector": {
            "name": "vector",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "MDHKinematicChain.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MDHKinematicChain.from_parameters": {
            "name": "from_parameters",
            "location": 125,
            "return": [
                "Type",
                "int",
                "Optional[str]",
                "list[str]",
                "str",
                "dict[, ]",
                "float",
                "tuple[typing.Union[typing.Type,typing.Type]]"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "Type",
                    "type",
                    "Type[T]"
                ],
                "parameters": [
                    "Sequence[float]"
                ]
            }
        },
        "MDHKinematicChain.matrix": {
            "name": "matrix",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "numpy.ndarray",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "MDHKinematicChain.links": {
            "name": "links",
            "location": 158,
            "return": [
                "None",
                "int",
                "str",
                "list[str]",
                "set[]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "list",
                    "List[Tuple[int, int]]",
                    "bool"
                ]
            }
        },
        "MDHKinematicChain.__len__": {
            "name": "__len__",
            "location": 162,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MDHKinematicChain.num_parameters": {
            "name": "num_parameters",
            "location": 167,
            "return": [
                "int",
                "dict",
                "str",
                "List[str]",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "MDHKinematicChain.transforms": {
            "name": "transforms",
            "location": 172,
            "return": [
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "q": [
                    "Optional[Sequence[float]]"
                ]
            }
        },
        "MDHKinematicChain.vector": {
            "name": "vector",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "numpy.ndarray",
                    "List[str]",
                    "List[T]",
                    "float",
                    "Sequence[float]"
                ]
            }
        }
    },
    "pybotics-master/pybotics/link.py": {
        "Link.to_json": {
            "name": "to_json",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Link.__len__": {
            "name": "__len__",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Link.displace": {
            "name": "displace",
            "location": 26,
            "return": [
                "typing.Union[typing.Sequence[builtins.float], numpy.ndarray]",
                "None"
            ],
            "arguments": {
                "self": [],
                "q": [
                    "float"
                ]
            }
        },
        "Link.transform": {
            "name": "transform",
            "location": 37,
            "return": [
                "numpy.ndarray",
                "None"
            ],
            "arguments": {
                "self": [],
                "q": [
                    "float"
                ]
            }
        },
        "Link.vector": {
            "name": "vector",
            "location": 49,
            "return": [
                "numpy.ndarray",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Link.size": {
            "name": "size",
            "location": 59,
            "return": [
                "builtins.int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MDHLink.size": {
            "name": "size",
            "location": 79,
            "return": [
                "Sequence[int]",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MDHLink.transform": {
            "name": "transform",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "q": [
                    "float"
                ]
            }
        },
        "MDHLink.vector": {
            "name": "vector",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T",
                    "int",
                    "bool",
                    "float",
                    "Sequence",
                    "Sequence[float]"
                ]
            }
        },
        "RevoluteMDHLink.displace": {
            "name": "displace",
            "location": 142,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "q": [
                    "float"
                ]
            }
        },
        "PrismaticMDHLink.displace": {
            "name": "displace",
            "location": 163,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "q": [
                    "float"
                ]
            }
        }
    },
    "pybotics-master/pybotics/optimization.py": {
        "_validate_transform_mask": {
            "name": "_validate_transform_mask",
            "location": 17,
            "return": [
                "Sequence[bool]"
            ],
            "arguments": {
                "mask": [
                    "Union[(bool, Sequence[bool])]"
                ],
                "name": [
                    "str"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "optimize_accuracy": {
            "name": "optimize_accuracy",
            "location": 93,
            "return": [
                "str",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "optimization_vector": [
                    "str",
                    "OrderedDict",
                    "typing.OrderedDict",
                    "DefaultDict[int, List[Any]]",
                    "typing.DefaultDict"
                ],
                "handler": [
                    "OptimizationHandler"
                ],
                "qs": [
                    "Sequence[Sequence[float]]"
                ],
                "positions": [
                    "Sequence[Sequence[float]]"
                ]
            }
        },
        "compute_absolute_error": {
            "name": "compute_absolute_error",
            "location": 105,
            "return": [
                "float"
            ],
            "arguments": {
                "q": [
                    "str",
                    "Iterable[T]",
                    "typing.Iterable[T]"
                ],
                "position": [
                    "str",
                    "Iterable[T]",
                    "typing.Iterable[T]"
                ],
                "robot": [
                    "pybotics.robot.Robot"
                ]
            }
        },
        "compute_absolute_errors": {
            "name": "compute_absolute_errors",
            "location": 113,
            "return": [
                "list[]",
                "bool",
                "Tuple[str]",
                "Optional[Iterable[str]]",
                "Union[int, slice]",
                "set"
            ],
            "arguments": {
                "qs": [
                    "str",
                    "int",
                    "Type",
                    "typing.Type"
                ],
                "positions": [
                    "str",
                    "int",
                    "Type",
                    "typing.Type"
                ],
                "robot": [
                    "pybotics.robot.Robot"
                ]
            }
        },
        "compute_relative_error": {
            "name": "compute_relative_error",
            "location": 126,
            "return": [
                "float"
            ],
            "arguments": {
                "q_a": [
                    "str"
                ],
                "q_b": [
                    "int",
                    "float",
                    "str",
                    "list[int]",
                    "numpy.array",
                    "List[int]"
                ],
                "distance": [
                    "float"
                ],
                "robot": [
                    "pybotics.robot.Robot"
                ]
            }
        },
        "compute_relative_errors": {
            "name": "compute_relative_errors",
            "location": 144,
            "return": [
                "list[]",
                "Iterable[str]",
                "Set[int]"
            ],
            "arguments": {
                "qs_a": [
                    "float",
                    "bool",
                    "list[int]",
                    "int",
                    "list[float]",
                    "List[int]",
                    "List[float]"
                ],
                "qs_b": [
                    "float",
                    "bool",
                    "list[int]",
                    "int",
                    "list[float]",
                    "List[int]",
                    "List[float]"
                ],
                "distances": [
                    "float",
                    "bool",
                    "list[int]",
                    "int",
                    "list[float]",
                    "List[int]",
                    "List[float]"
                ],
                "robot": [
                    "pybotics.robot.Robot"
                ]
            }
        },
        "OptimizationHandler.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptimizationHandler.apply_optimization_vector": {
            "name": "apply_optimization_vector",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vector": [
                    "bool",
                    "list[int]",
                    "List[int]",
                    "list[list[int]]",
                    "List[List[int]]",
                    "int"
                ]
            }
        },
        "OptimizationHandler.generate_optimization_vector": {
            "name": "generate_optimization_vector",
            "location": 81,
            "return": [
                "str",
                "Iterable[T]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pybotics-master/pybotics/predefined_models.py": {
        "kuka_lbr_iiwa_7": {
            "name": "kuka_lbr_iiwa_7",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "mecademic_meca500": {
            "name": "mecademic_meca500",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "puma560": {
            "name": "puma560",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "ur10": {
            "name": "ur10",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "abb_irb120": {
            "name": "abb_irb120",
            "location": 66,
            "return": [],
            "arguments": {}
        }
    },
    "pybotics-master/pybotics/robot.py": {
        "_ndof_zeros_factory": {
            "name": "_ndof_zeros_factory",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "robot": [
                    "list[int]",
                    "List[int]",
                    "bool",
                    "list[]",
                    "list",
                    "str",
                    "list[float]",
                    "List[float]",
                    "int"
                ]
            }
        },
        "_joint_limits_factory": {
            "name": "_joint_limits_factory",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "robot": [
                    "str",
                    "int",
                    "numpy.array"
                ]
            }
        },
        "_ik_cost_function": {
            "name": "_ik_cost_function",
            "location": 254,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "q": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "pose": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "robot": [
                    "Robot"
                ]
            }
        },
        "Robot.__len__": {
            "name": "__len__",
            "location": 46,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Robot.to_json": {
            "name": "to_json",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Robot.fk": {
            "name": "fk",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "q": [
                    "Optional[Sequence[float]]"
                ]
            }
        },
        "Robot.ik": {
            "name": "ik",
            "location": 84,
            "return": [
                "None",
                "type",
                "Union[int, None]",
                "Optional[bool]",
                "Optional[str]",
                "Union[numpy.ndarray, None]",
                "Optional[BaseException]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "pose": [
                    "FrozenSet[int]",
                    "int",
                    "frozenset"
                ],
                "q": [
                    "Optional[Sequence[float]]"
                ]
            }
        },
        "Robot.ndof": {
            "name": "ndof",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Robot.joints": {
            "name": "joints",
            "location": 118,
            "return": [
                "None",
                "int",
                "str",
                "set[str]",
                "dict[str, list[str]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "Robot.joint_limits": {
            "name": "joint_limits",
            "location": 134,
            "return": [
                "None",
                "str",
                "dict[, ]",
                "bytes",
                "float",
                "tuple[typing.Union[str,str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "List[str]",
                    "Sequence[Any]",
                    "Set[str]",
                    "str"
                ]
            }
        },
        "Robot.jacobian_world": {
            "name": "jacobian_world",
            "location": 140,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "q": [
                    "Optional[Sequence[float]]"
                ]
            }
        },
        "Robot.jacobian_flange": {
            "name": "jacobian_flange",
            "location": 153,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "q": [
                    "Optional[Sequence[float]]"
                ]
            }
        },
        "Robot.compute_joint_torques": {
            "name": "compute_joint_torques",
            "location": 183,
            "return": [
                "str",
                "List[Dict]",
                "list",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "wrench": [
                    "Sequence[float]"
                ],
                "q": [
                    "Optional[Sequence[float]]"
                ]
            }
        },
        "Robot.clamp_joints": {
            "name": "clamp_joints",
            "location": 230,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "q": [
                    "Sequence[float]"
                ]
            }
        },
        "Robot.random_joints": {
            "name": "random_joints",
            "location": 234,
            "return": [
                "None",
                "Optional[str]",
                "int",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "in_place": [
                    "bool"
                ]
            }
        },
        "Robot.from_parameters": {
            "name": "from_parameters",
            "location": 247,
            "return": [
                "Sized"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "int"
                ],
                "parameters": [
                    "Sequence[float]"
                ]
            }
        }
    },
    "pybotics-master/pybotics/tool.py": {
        "Tool.position": {
            "name": "position",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "numpy.ndarray",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "Tool.vector": {
            "name": "vector",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        }
    },
    "pybotics-master/pybotics/__init__.py": {},
    "pybotics-master/scripts/update_dev_dependencies.py": {},
    "pybotics-master/tests/conftest.py": {
        "planar_robot": {
            "name": "planar_robot",
            "location": 12,
            "return": [
                "Robot",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "resources_path": {
            "name": "resources_path",
            "location": 20,
            "return": [
                "pathlib.Path",
                "Dict[str, cerulean.Path]"
            ],
            "arguments": {}
        },
        "vector_transforms": {
            "name": "vector_transforms",
            "location": 26,
            "return": [
                "list[dict[typing.Text, ]]",
                "str",
                "Tuple[str, int]"
            ],
            "arguments": {
                "resources_path": [
                    "str",
                    "pathlib.Path",
                    "Optional[Pattern[str]]",
                    "Optional[str]",
                    "Union[str, pathlib.Path]"
                ]
            }
        }
    },
    "pybotics-master/tests/test_errors.py": {
        "test_errors": {
            "name": "test_errors",
            "location": 8,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "pybotics-master/tests/test_geometry.py": {
        "test_wrap_2_pi": {
            "name": "test_wrap_2_pi",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "angle": []
            }
        },
        "test_rotation_matrix_xyz": {
            "name": "test_rotation_matrix_xyz",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "angle": [],
                "resources_path": [
                    "pathlib.Path"
                ]
            }
        },
        "test_translation_matrix": {
            "name": "test_translation_matrix",
            "location": 104,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "xyz": [
                    "bool"
                ]
            }
        },
        "test_vector_2_matrix": {
            "name": "test_vector_2_matrix",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "vector_transforms": [
                    "Sequence[dict]"
                ]
            }
        },
        "test_matrix_2_vector": {
            "name": "test_matrix_2_vector",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "vector_transforms": [
                    "Sequence[dict]"
                ]
            }
        },
        "test_orientation": {
            "name": "test_orientation",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pybotics-master/tests/test_kinematic_chain.py": {
        "test_init": {
            "name": "test_init",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_num_parameters": {
            "name": "test_num_parameters",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_vector": {
            "name": "test_vector",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_json": {
            "name": "test_to_json",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_links_setter": {
            "name": "test_links_setter",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ndof": {
            "name": "test_ndof",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pybotics-master/tests/test_link.py": {
        "test_len": {
            "name": "test_len",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_displace": {
            "name": "test_displace",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_json": {
            "name": "test_json",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pybotics-master/tests/test_optimization.py": {
        "test_compute_absolute_errors": {
            "name": "test_compute_absolute_errors",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "q": []
            }
        },
        "test_compute_relative_errors": {
            "name": "test_compute_relative_errors",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "q_a": [
                    "int"
                ],
                "q_b": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_optimization": {
            "name": "test_optimization",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_handler_validate_transform_mask": {
            "name": "test_handler_validate_transform_mask",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pybotics-master/tests/test_robot.py": {
        "test_fk": {
            "name": "test_fk",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "resources_path": [
                    "pathlib.Path"
                ]
            }
        },
        "test_home_position": {
            "name": "test_home_position",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_joint_limits": {
            "name": "test_joint_limits",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compute_joint_torques": {
            "name": "test_compute_joint_torques",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "planar_robot": [
                    "pybotics.robot.Robot"
                ]
            }
        },
        "test_jacobian_world": {
            "name": "test_jacobian_world",
            "location": 118,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "q": [
                    "Union[int, float]",
                    "float",
                    "str"
                ],
                "planar_robot": [
                    "bool",
                    "float",
                    "str",
                    "Union[int, float]"
                ]
            }
        },
        "test_jacobian_flange": {
            "name": "test_jacobian_flange",
            "location": 151,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "q": [
                    "str"
                ],
                "planar_robot": [
                    "bool",
                    "float",
                    "str",
                    "Union[int, float]"
                ]
            }
        },
        "test_ik": {
            "name": "test_ik",
            "location": 195,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "q": [
                    "str",
                    "float"
                ],
                "q_offset": [
                    "str",
                    "float"
                ]
            }
        },
        "test_random_joints": {
            "name": "test_random_joints",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_json": {
            "name": "test_to_json",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pybotics-master/tests/test_tool.py": {
        "test_tool": {
            "name": "test_tool",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
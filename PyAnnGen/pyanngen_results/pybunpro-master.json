{
    "pybunpro-master/release.py": {},
    "pybunpro-master/setup.py": {
        "read": {
            "name": "read",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        }
    },
    "pybunpro-master/docs/source/conf.py": {},
    "pybunpro-master/pybunpro/__init__.py": {
        "SchemaError.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "List[str]",
                    "float",
                    "bool",
                    "None",
                    "Optional[List[str]]"
                ],
                "error": [
                    "int",
                    "List[str]",
                    "float",
                    "bool",
                    "None",
                    "Optional[List[str]]"
                ]
            }
        },
        "BunproAPIError.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "bool",
                    "float",
                    "Callable",
                    "int"
                ]
            }
        },
        "BunproAPIError.status_code": {
            "name": "status_code",
            "location": 74,
            "return": [
                "int",
                "Dict[str, Tuple[Any, Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BunproAPIError.errors": {
            "name": "errors",
            "location": 81,
            "return": [
                "List",
                "Dict[str,Any]",
                "str",
                "Iterator[pytesmark.structures.ParameterSet[CaseInfo]]",
                "Dict[str,List[Any]]",
                "Dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timestamp._serialize": {
            "name": "_serialize",
            "location": 95,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Tuple[Union[list[float],list[int]]]",
                    "datetime.datetime",
                    "int",
                    "Dict[str,str]",
                    "BooleanArray",
                    "Type",
                    "Tuple[List[float],List[int]]",
                    "Type[object]"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "Timestamp._deserialize": {
            "name": "_deserialize",
            "location": 105,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "T"
                ],
                "attr": [
                    "Dict",
                    "str"
                ],
                "data": [
                    "Dict",
                    "str"
                ]
            }
        },
        "UserInformationSchema.make_user_information": {
            "name": "make_user_information",
            "location": 126,
            "return": [
                "bool",
                "UserInformation"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "StudyQueueSchema.make_study_queue": {
            "name": "make_study_queue",
            "location": 145,
            "return": [
                "StudyQueue",
                "int",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "bytes",
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[Dict]",
                    "Union[str,bytes,None]"
                ]
            }
        },
        "GrammarPointSchema.make_grammar_point": {
            "name": "make_grammar_point",
            "location": 163,
            "return": [
                "GrammarPoint",
                "int",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "BunproClient.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_key": [
                    "str",
                    "None",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "BunproClient._get_base_url": {
            "name": "_get_base_url",
            "location": 192,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": [],
                "api_key": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "BunproClient.study_queue": {
            "name": "study_queue",
            "location": 209,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "api_key": [
                    "str",
                    "None",
                    "bytes",
                    "Dict",
                    "bool"
                ]
            }
        },
        "BunproClient.recent_items": {
            "name": "recent_items",
            "location": 252,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "int",
                    "str",
                    "List[str]",
                    "bytes",
                    "Dict"
                ],
                "api_key": [
                    "str",
                    "None",
                    "bytes",
                    "Union[bytes,str]"
                ]
            }
        }
    },
    "pybunpro-master/pybunpro/__main__.py": {
        "cli": {
            "name": "cli",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "click.core.Context",
                    "Union[click.core.Option,click.core.Parameter]",
                    "click.Context"
                ]
            }
        },
        "study_queue": {
            "name": "study_queue",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "app_context": [
                    "Dict"
                ]
            }
        },
        "recent_items": {
            "name": "recent_items",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "app_context": [],
                "limit": [
                    "Dict",
                    "Callable"
                ]
            }
        }
    },
    "pybunpro-master/tests/conftest.py": {
        "username": {
            "name": "username",
            "location": 11,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "grammar_point_count": {
            "name": "grammar_point_count",
            "location": 16,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "ghost_review_count": {
            "name": "ghost_review_count",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "creation_date": {
            "name": "creation_date",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "creation_date_ts": {
            "name": "creation_date_ts",
            "location": 31,
            "return": [],
            "arguments": {
                "creation_date": []
            }
        },
        "user_information": {
            "name": "user_information",
            "location": 36,
            "return": [
                "UserInformation"
            ],
            "arguments": {
                "username": [],
                "grammar_point_count": [],
                "ghost_review_count": [],
                "creation_date": []
            }
        },
        "user_information_dict": {
            "name": "user_information_dict",
            "location": 43,
            "return": [],
            "arguments": {
                "username": [],
                "grammar_point_count": [],
                "ghost_review_count": [],
                "creation_date_ts": []
            }
        },
        "reviews_available": {
            "name": "reviews_available",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "next_review_date_ts": {
            "name": "next_review_date_ts",
            "location": 56,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "next_review_date": {
            "name": "next_review_date",
            "location": 61,
            "return": [],
            "arguments": {
                "next_review_date_ts": []
            }
        },
        "reviews_available_next_hour": {
            "name": "reviews_available_next_hour",
            "location": 66,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "reviews_available_next_day": {
            "name": "reviews_available_next_day",
            "location": 71,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "study_queue": {
            "name": "study_queue",
            "location": 76,
            "return": [
                "StudyQueue"
            ],
            "arguments": {
                "reviews_available": [],
                "next_review_date": [],
                "reviews_available_next_hour": [],
                "reviews_available_next_day": []
            }
        },
        "study_queue_dict": {
            "name": "study_queue_dict",
            "location": 84,
            "return": [],
            "arguments": {
                "reviews_available": [],
                "next_review_date_ts": [],
                "reviews_available_next_hour": [],
                "reviews_available_next_day": []
            }
        },
        "grammar_point_item": {
            "name": "grammar_point_item",
            "location": 93,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "created_at_date": {
            "name": "created_at_date",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "created_at_date_ts": {
            "name": "created_at_date_ts",
            "location": 103,
            "return": [],
            "arguments": {
                "created_at_date": []
            }
        },
        "updated_at_date": {
            "name": "updated_at_date",
            "location": 108,
            "return": [],
            "arguments": {}
        },
        "updated_at_date_ts": {
            "name": "updated_at_date_ts",
            "location": 113,
            "return": [],
            "arguments": {
                "updated_at_date": []
            }
        },
        "grammar_point": {
            "name": "grammar_point",
            "location": 118,
            "return": [
                "GrammarPoint"
            ],
            "arguments": {
                "grammar_point_item": [],
                "created_at_date": [],
                "updated_at_date": []
            }
        },
        "grammar_point_dict": {
            "name": "grammar_point_dict",
            "location": 125,
            "return": [],
            "arguments": {
                "grammar_point_item": [],
                "created_at_date_ts": [],
                "updated_at_date_ts": []
            }
        },
        "api_key": {
            "name": "api_key",
            "location": 133,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "mock_study_queue_response": {
            "name": "mock_study_queue_response",
            "location": 138,
            "return": [],
            "arguments": {
                "user_information_dict": [],
                "study_queue_information_dict": []
            }
        },
        "study_queue_information_dict": {
            "name": "study_queue_information_dict",
            "location": 145,
            "return": [],
            "arguments": {
                "reviews_available": [],
                "next_review_date_ts": [],
                "reviews_available_next_hour": [],
                "reviews_available_next_day": []
            }
        },
        "mock_recent_items_response": {
            "name": "mock_recent_items_response",
            "location": 156,
            "return": [],
            "arguments": {
                "user_information_dict": [],
                "grammar_point_dict": []
            }
        },
        "error_response": {
            "name": "error_response",
            "location": 163,
            "return": [],
            "arguments": {}
        }
    },
    "pybunpro-master/tests/test_bunpro_client.py": {
        "TestBunproClient.mock_bad_user_info_response": {
            "name": "mock_bad_user_info_response",
            "location": 9,
            "return": [
                "Dict[str, Dict[str, Any]]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "study_queue_information_dict": [
                    "str",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "TestBunproClient.mock_bad_requested_info_response": {
            "name": "mock_bad_requested_info_response",
            "location": 14,
            "return": [
                "dict",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Dict[int, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "user_information_dict": [
                    "Dict[str,Dict[str,Any]]",
                    "Set",
                    "Dict[str,dict[str,Any]]"
                ]
            }
        },
        "TestBunproClient.test_constructor": {
            "name": "test_constructor",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_key": [
                    "str"
                ]
            }
        },
        "TestBunproClient.test_constructor_none_api_key": {
            "name": "test_constructor_none_api_key",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBunproClient.test_study_queue": {
            "name": "test_study_queue",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requests_mock": [
                    "str",
                    "bool"
                ],
                "api_key": [
                    "str"
                ],
                "mock_study_queue_response": [
                    "str",
                    "bool"
                ],
                "user_information": [
                    "str",
                    "Dict[str,Any]"
                ],
                "study_queue": [
                    "str",
                    "bool",
                    "Dict"
                ]
            }
        },
        "TestBunproClient.test_study_queue_user_info_parse_error": {
            "name": "test_study_queue_user_info_parse_error",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requests_mock": [
                    "str",
                    "bool"
                ],
                "api_key": [
                    "str",
                    "bool"
                ],
                "mock_bad_user_info_response": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestBunproClient.test_study_queue_requested_info_parse_error": {
            "name": "test_study_queue_requested_info_parse_error",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requests_mock": [
                    "str",
                    "bool"
                ],
                "api_key": [
                    "str",
                    "bool"
                ],
                "mock_bad_requested_info_response": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestBunproClient.test_study_queue_http_error": {
            "name": "test_study_queue_http_error",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requests_mock": [
                    "Dict",
                    "bool"
                ],
                "api_key": [
                    "bool",
                    "Dict"
                ],
                "error_response": [
                    "bool",
                    "Dict"
                ]
            }
        },
        "TestBunproClient.test_recent_items": {
            "name": "test_recent_items",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requests_mock": [
                    "str",
                    "bool"
                ],
                "api_key": [
                    "str",
                    "bool"
                ],
                "mock_recent_items_response": [
                    "str",
                    "bool"
                ],
                "user_information": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "grammar_point": [
                    "str",
                    "List",
                    "int",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "TestBunproClient.test_recent_items_valid_limit": {
            "name": "test_recent_items_valid_limit",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requests_mock": [
                    "str",
                    "bool"
                ],
                "api_key": [
                    "str",
                    "bool"
                ],
                "mock_recent_items_response": [
                    "str",
                    "bool"
                ],
                "user_information": [
                    "str"
                ],
                "grammar_point": [
                    "str",
                    "List",
                    "int",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "TestBunproClient.test_recent_items_negative_limit": {
            "name": "test_recent_items_negative_limit",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_key": [
                    "str",
                    "int"
                ]
            }
        },
        "TestBunproClient.test_recent_items_large_limit": {
            "name": "test_recent_items_large_limit",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_key": [
                    "str",
                    "int"
                ]
            }
        },
        "TestBunproClient.test_recent_items_user_info_parse_error": {
            "name": "test_recent_items_user_info_parse_error",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requests_mock": [
                    "str",
                    "int"
                ],
                "api_key": [
                    "str",
                    "bool"
                ],
                "mock_bad_user_info_response": [
                    "str",
                    "int"
                ]
            }
        },
        "TestBunproClient.test_recent_items_requested_info_parse_error": {
            "name": "test_recent_items_requested_info_parse_error",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requests_mock": [
                    "str",
                    "bool"
                ],
                "api_key": [
                    "str",
                    "bool"
                ],
                "mock_bad_requested_info_response": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestBunproClient.test_recent_items_http_error": {
            "name": "test_recent_items_http_error",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requests_mock": [
                    "Dict",
                    "bool"
                ],
                "api_key": [
                    "bool",
                    "Dict"
                ],
                "error_response": [
                    "bool",
                    "Dict"
                ]
            }
        },
        "TestBunproClient.test_get_base_url_default_key": {
            "name": "test_get_base_url_default_key",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_key": [
                    "str"
                ]
            }
        },
        "TestBunproClient.test_get_base_url_no_default_key_raises": {
            "name": "test_get_base_url_no_default_key_raises",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBunproClient.test_get_base_url_override_key": {
            "name": "test_get_base_url_override_key",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_key": [
                    "str",
                    "bool",
                    "Tuple[str,str,str]",
                    "Tuple[Union[str,str,str]]"
                ]
            }
        }
    },
    "pybunpro-master/tests/test_grammar_point.py": {
        "TestGrammarPoint.test_constructor": {
            "name": "test_constructor",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grammar_point_item": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "created_at_date": [],
                "updated_at_date": []
            }
        }
    },
    "pybunpro-master/tests/test_grammar_point_schema.py": {
        "TestGrammarPointSchema.test_dump": {
            "name": "test_dump",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grammar_point": [
                    "Dict",
                    "str"
                ],
                "grammar_point_dict": [
                    "str",
                    "int",
                    "Union[int,slice]",
                    "bool"
                ]
            }
        },
        "TestGrammarPointSchema.test_load": {
            "name": "test_load",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grammar_point": [
                    "bool",
                    "Callable",
                    "str"
                ],
                "grammar_point_dict": [
                    "str"
                ]
            }
        }
    },
    "pybunpro-master/tests/test_pybunpro.py": {
        "TestPyBunpro.runner": {
            "name": "runner",
            "location": 11,
            "return": [
                "CliRunner",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyBunpro.test_study_queue": {
            "name": "test_study_queue",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requests_mock": [
                    "str"
                ],
                "api_key": [
                    "bool"
                ],
                "runner": [
                    "str"
                ],
                "mock_study_queue_response": [
                    "str"
                ],
                "user_information": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "study_queue": [
                    "str"
                ]
            }
        },
        "TestPyBunpro.test_study_queue_error": {
            "name": "test_study_queue_error",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requests_mock": [
                    "Dict",
                    "bool"
                ],
                "api_key": [
                    "Dict",
                    "bool"
                ],
                "runner": [
                    "str"
                ],
                "error_response": [
                    "bool",
                    "Dict"
                ]
            }
        },
        "TestPyBunpro.test_recent_items": {
            "name": "test_recent_items",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requests_mock": [
                    "str",
                    "bool"
                ],
                "api_key": [
                    "str"
                ],
                "runner": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "mock_recent_items_response": [
                    "str",
                    "bool"
                ],
                "user_information": [
                    "bool",
                    "str"
                ],
                "grammar_point": [
                    "str",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "TestPyBunpro.test_recent_items_error": {
            "name": "test_recent_items_error",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requests_mock": [
                    "Dict",
                    "bool"
                ],
                "api_key": [
                    "Dict",
                    "bool"
                ],
                "runner": [
                    "str"
                ],
                "error_response": [
                    "bool",
                    "Dict"
                ]
            }
        },
        "TestPyBunpro.test_debug_mode": {
            "name": "test_debug_mode",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requests_mock": [
                    "str"
                ],
                "api_key": [
                    "str"
                ],
                "runner": [
                    "str",
                    "List[str]"
                ],
                "mock_recent_items_response": [
                    "str"
                ],
                "user_information": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "grammar_point": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "caplog": [
                    "str"
                ]
            }
        }
    },
    "pybunpro-master/tests/test_study_queue.py": {
        "TestStudyQueue.test_constructor": {
            "name": "test_constructor",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reviews_available": [
                    "Tuple"
                ],
                "next_review_date": [
                    "Tuple"
                ],
                "reviews_available_next_hour": [
                    "Tuple"
                ],
                "reviews_available_next_day": [
                    "Tuple"
                ]
            }
        }
    },
    "pybunpro-master/tests/test_study_queue_schema.py": {
        "TestStudyQueueSchema.test_dump": {
            "name": "test_dump",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "study_queue": [
                    "Dict",
                    "str"
                ],
                "study_queue_dict": [
                    "str",
                    "int",
                    "Union[int,slice]",
                    "bool"
                ]
            }
        },
        "TestStudyQueueSchema.test_load": {
            "name": "test_load",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "study_queue": [
                    "bool",
                    "Callable",
                    "str"
                ],
                "study_queue_dict": [
                    "str"
                ]
            }
        }
    },
    "pybunpro-master/tests/test_user_information.py": {
        "TestUserInformation.test_constructor": {
            "name": "test_constructor",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Dict[int,dict]"
                ],
                "grammar_point_count": [
                    "Sequence",
                    "Dict[int,dict]",
                    "int"
                ],
                "ghost_review_count": [
                    "Sequence",
                    "Dict[int,dict]",
                    "int"
                ],
                "creation_date": [
                    "Dict[int,dict]",
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        }
    },
    "pybunpro-master/tests/test_user_information_schema.py": {
        "TestUserInformationSchema.test_dump": {
            "name": "test_dump",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_information": [
                    "str"
                ],
                "user_information_dict": [
                    "str"
                ]
            }
        },
        "TestUserInformationSchema.test_load": {
            "name": "test_load",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_information": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "user_information_dict": [
                    "str"
                ]
            }
        }
    },
    "pybunpro-master/tests/__init__.py": {}
}
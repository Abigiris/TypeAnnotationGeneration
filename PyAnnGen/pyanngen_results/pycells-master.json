{
    "pycells-master/setup.py": {},
    "pycells-master/simulate.py": {},
    "pycells-master/pycells/cli.py": {
        "cli": {
            "name": "cli",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "dimensions": [
                    "bytes",
                    "int",
                    "List",
                    "Sequence[Mapping[str,Any]]"
                ],
                "method": [
                    "bool",
                    "Dict[str,int]",
                    "str",
                    "Dict",
                    "int"
                ],
                "rule": [
                    "int",
                    "bool"
                ],
                "iterations": [
                    "int",
                    "bool"
                ],
                "neighborhood_radius": [
                    "int",
                    "bool"
                ],
                "initial_state": [
                    "int",
                    "bool"
                ],
                "parallelize": [
                    "int",
                    "bool"
                ],
                "skip_initial_state": [
                    "int",
                    "bool"
                ],
                "scaling": [
                    "int",
                    "Callable",
                    "List[dict]"
                ],
                "out": [
                    "int",
                    "Callable",
                    "List[dict]"
                ],
                "format": [
                    "int",
                    "None",
                    "float",
                    "Union[str,os.PathLike,None]",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "CustomCommand.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomCommand.invoke": {
            "name": "invoke",
            "location": 57,
            "return": [
                "float"
            ],
            "arguments": {
                "sefl": [
                    "CustomCommand"
                ],
                "ctx": [
                    "click.Context"
                ]
            }
        }
    },
    "pycells-master/pycells/render.py": {
        "gif": {
            "name": "gif",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "iterations": [
                    "int",
                    "str",
                    "bool",
                    "Iterator",
                    "List[list[str]]",
                    "Iterator[int]",
                    "List[List[str]]"
                ],
                "dimensions": [
                    "int",
                    "Dict[Tuple[int,int],int]",
                    "Dict[tuple[Union[int,int]],int]"
                ],
                "scaling": [
                    "float",
                    "int"
                ],
                "path": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "simulation": [
                    "str",
                    "List[list[str]]",
                    "int",
                    "bool",
                    "Iterator[int]",
                    "List[List[str]]"
                ],
                "tpf": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "loop": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "png": {
            "name": "png",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "iterations": [
                    "int",
                    "bool"
                ],
                "dimensions": [
                    "List[float]",
                    "int",
                    "Iterator[int]",
                    "Tuple[int]",
                    "Iterator",
                    "str"
                ],
                "scaling": [
                    "str",
                    "int"
                ],
                "path": [
                    "str",
                    "int"
                ],
                "simulation": [
                    "List[float]",
                    "Tuple[int]",
                    "str",
                    "Iterator[int]",
                    "int"
                ]
            }
        },
        "state_to_array": {
            "name": "state_to_array",
            "location": 74,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "dimensions": [
                    "int",
                    "numpy.ndarray"
                ],
                "state": [
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "npy": {
            "name": "npy",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "iterations": [
                    "int",
                    "str",
                    "bytes"
                ],
                "dimensions": [
                    "int",
                    "BinaryIO",
                    "str",
                    "bool"
                ],
                "scaling": [
                    "int",
                    "str",
                    "bool",
                    "Iterator",
                    "List[list[str]]",
                    "Iterator[int]",
                    "List[List[str]]"
                ],
                "path": [
                    "str",
                    "Optional[str]"
                ],
                "simulation": [
                    "List[float]",
                    "Tuple[int]",
                    "str",
                    "Iterator[int]",
                    "int"
                ]
            }
        },
        "txt": {
            "name": "txt",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "iterations": [
                    "int",
                    "str",
                    "bool",
                    "Iterator",
                    "List[list[str]]",
                    "Iterator[int]",
                    "List[List[str]]"
                ],
                "dimensions": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "scaling": [
                    "int",
                    "str",
                    "bool",
                    "Iterator",
                    "List[list[str]]",
                    "Iterator[int]",
                    "List[List[str]]"
                ],
                "path": [
                    "str",
                    "Optional[str]"
                ],
                "simulation": [
                    "str",
                    "List[list[str]]",
                    "int",
                    "bool",
                    "Iterator[int]",
                    "List[List[str]]"
                ]
            }
        }
    },
    "pycells-master/pycells/simulations.py": {
        "_get_pool": {
            "name": "_get_pool",
            "location": 12,
            "return": [
                "cls",
                "str",
                "int"
            ],
            "arguments": {
                "workers": [
                    "str",
                    "bool"
                ]
            }
        },
        "product": {
            "name": "product",
            "location": 40,
            "return": [
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "make_simulation": {
            "name": "make_simulation",
            "location": 53,
            "return": [
                "Callable"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "setup_func": [
                    "bool",
                    "str",
                    "int",
                    "Type",
                    "Optional[Type[Warning]]",
                    "None"
                ],
                "worker_func": [
                    "bool",
                    "str",
                    "int",
                    "Type",
                    "Optional[Type[Warning]]",
                    "None"
                ]
            }
        },
        "count_setup": {
            "name": "count_setup",
            "location": 143,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "dimensions": [
                    "int",
                    "str",
                    "list",
                    "List[int]"
                ],
                "rule": [
                    "int",
                    "float",
                    "Dict",
                    "List",
                    "List[Dict[str,Any]]"
                ],
                "neighborhood_radius": [
                    "int",
                    "str",
                    "List",
                    "List[int]"
                ]
            }
        },
        "count_worker": {
            "name": "count_worker",
            "location": 151,
            "return": [
                "int",
                "str",
                "Union[bytes,bytearray]",
                "bytes"
            ],
            "arguments": {
                "dimensions": [
                    "int"
                ],
                "slice_sizes": [
                    "int"
                ],
                "neighborhood_radius": [
                    "int"
                ],
                "b": [
                    "int"
                ],
                "s": [
                    "int"
                ],
                "state": [
                    "int"
                ],
                "i": [
                    "int"
                ]
            }
        },
        "pattern_setup": {
            "name": "pattern_setup",
            "location": 205,
            "return": [
                "Tuple[Dict[(int, Any)]]"
            ],
            "arguments": {
                "dimensions": [
                    "int",
                    "List[int]",
                    "Sequence"
                ],
                "rule": [
                    "int",
                    "List[int]",
                    "Sequence"
                ],
                "neighborhood_radius": [
                    "int",
                    "List[int]",
                    "Sequence"
                ]
            }
        },
        "pattern_worker": {
            "name": "pattern_worker",
            "location": 212,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "dimensions": [
                    "Tuple[Union[int,int,int,int]]",
                    "int",
                    "bool",
                    "Tuple[int,int,int,int]"
                ],
                "slice_sizes": [
                    "int",
                    "Tuple[Union[int,int,int,int]]",
                    "bool",
                    "Tuple[int,int,int,int]"
                ],
                "neighborhood_radius": [
                    "int",
                    "bool",
                    "Tuple[int,int,int,int]"
                ],
                "patterns": [
                    "Tuple[Union[int,int,int,int]]",
                    "int",
                    "bool",
                    "Tuple[int,int,int,int]"
                ],
                "state": [
                    "int",
                    "bool",
                    "Tuple[int,int,int,int]"
                ],
                "i": [
                    "int",
                    "bool",
                    "Tuple[int,int,int,int]"
                ]
            }
        },
        "make_simulation.simulation": {
            "name": "simulation",
            "location": 77,
            "return": [
                "typing.Generator[int]",
                "typing.Generator[bool]"
            ],
            "arguments": {
                "dimensions": [
                    "int",
                    "float",
                    "list"
                ],
                "rule": [
                    "bool",
                    "Union[str, List[str]]"
                ],
                "neighborhood_radius": [
                    "int",
                    "bool",
                    "float"
                ],
                "initial_state": [
                    "int",
                    "List[float]"
                ],
                "iterations": [
                    "int",
                    "Dict[str,Any]",
                    "Exception"
                ],
                "parallel": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "Optional[int]"
                ],
                "skip_initial_state": [
                    "bool",
                    "str",
                    "List[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "_get_pool.cls.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_get_pool.cls.imap_unordered": {
            "name": "imap_unordered",
            "location": 20,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable",
                    "Callable[..., None]"
                ],
                "iterable": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "_get_pool.cls.__enter__": {
            "name": "__enter__",
            "location": 23,
            "return": [
                "cls",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_get_pool.cls.__exit__": {
            "name": "__exit__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[BaseException]",
                    "Type[BaseException]",
                    "Optional[Type[BaseException]]",
                    "Optional[str]"
                ],
                "exc_value": [
                    "Optional[BaseException]",
                    "Type[BaseException]",
                    "Optional[Type[BaseException]]",
                    "Optional[str]"
                ],
                "traceback": [
                    "Optional[BaseException]",
                    "Type[BaseException]",
                    "Optional[Type[BaseException]]",
                    "Optional[str]"
                ]
            }
        }
    },
    "pycells-master/pycells/yaml.py": {
        "sbin_to_int": {
            "name": "sbin_to_int",
            "location": 7,
            "return": [
                "int"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "binary_loader": {
            "name": "binary_loader",
            "location": 11,
            "return": [
                "int"
            ],
            "arguments": {
                "loader": [
                    "str",
                    "dict",
                    "yaml.Loader",
                    "Optional[\"Node\"]"
                ],
                "node": [
                    "str",
                    "Dict",
                    "None",
                    "yaml.Loader",
                    "Optional[Node]"
                ]
            }
        },
        "rev_binary_loader": {
            "name": "rev_binary_loader",
            "location": 19,
            "return": [
                "int"
            ],
            "arguments": {
                "loader": [
                    "str",
                    "dict",
                    "yaml.Loader",
                    "Optional[\"Node\"]"
                ],
                "node": [
                    "str",
                    "Dict",
                    "None",
                    "yaml.Loader",
                    "Optional[Node]"
                ]
            }
        },
        "load_yaml": {
            "name": "load_yaml",
            "location": 27,
            "return": [
                "Union[str, IO]",
                "Dict[str, Any]",
                "Callable[[str], T]",
                "Callable",
                "dict",
                "IO[str]"
            ],
            "arguments": {
                "fp": [
                    "float",
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "pycells-master/pycells/__init__.py": {}
}
{
    "pydsdl-master/noxfile.py": {
        "clean": {
            "name": "clean",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "int"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Mapping"
                ]
            }
        },
        "lint": {
            "name": "lint",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str"
                ]
            }
        },
        "docs": {
            "name": "docs",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str"
                ]
            }
        },
        "is_latest_python": {
            "name": "is_latest_python",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "str",
                    "nox.sessions.Session"
                ]
            }
        }
    },
    "pydsdl-master/setup.py": {},
    "pydsdl-master/docs/conf.py": {},
    "pydsdl-master/docs/descendant_autodoc.py": {
        "children": {
            "name": "children",
            "location": 12,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "ty": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "pydsdl-master/docs/descendant_diagram.py": {
        "children": {
            "name": "children",
            "location": 11,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "ty": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "pydsdl-master/docs/ref_fixer_hack.py": {
        "missing_reference": {
            "name": "missing_reference",
            "location": 33,
            "return": [
                "None",
                "Optional[str]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "app": [],
                "_env": [
                    "bool",
                    "str"
                ],
                "node": [
                    "str"
                ],
                "contnode": [
                    "MutableMapping[str,str]",
                    "Type",
                    "MutableMapping"
                ]
            }
        },
        "doctree_resolved": {
            "name": "doctree_resolved",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "_app": [],
                "doctree": [
                    "str"
                ],
                "_docname": []
            }
        },
        "setup": {
            "name": "setup",
            "location": 81,
            "return": [
                "Dict[(str, bool)]"
            ],
            "arguments": {
                "app": []
            }
        },
        "doctree_resolved.predicate": {
            "name": "predicate",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "doctree_resolved.substitute_once": {
            "name": "substitute_once",
            "location": 69,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "pydsdl-master/pydsdl/_data_schema_builder.py": {
        "SerializationMode.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "DelimitedSerializationMode.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extent": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "DelimitedSerializationMode.__str__": {
            "name": "__str__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SealedSerializationMode.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSchemaBuilder.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSchemaBuilder.fields": {
            "name": "fields",
            "location": 45,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSchemaBuilder.constants": {
            "name": "constants",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSchemaBuilder.attributes": {
            "name": "attributes",
            "location": 55,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSchemaBuilder.doc": {
            "name": "doc",
            "location": 62,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSchemaBuilder.serialization_mode": {
            "name": "serialization_mode",
            "location": 66,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSchemaBuilder.union": {
            "name": "union",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSchemaBuilder.offset": {
            "name": "offset",
            "location": 74,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSchemaBuilder.set_comment": {
            "name": "set_comment",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comment": [
                    "bool",
                    "float"
                ]
            }
        },
        "DataSchemaBuilder.add_field": {
            "name": "add_field",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "DataSchemaBuilder.add_constant": {
            "name": "add_constant",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "constant": [
                    "Sequence[cirq.Qid]"
                ]
            }
        },
        "DataSchemaBuilder.set_serialization_mode": {
            "name": "set_serialization_mode",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "DataSchemaBuilder.make_union": {
            "name": "make_union",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pydsdl-master/pydsdl/_data_type_builder.py": {
        "DataTypeBuilder.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "definition": [
                    "Iterator",
                    "float",
                    "Iterator[int]",
                    "bool",
                    "Tuple[int]",
                    "str",
                    "int"
                ],
                "lookup_definitions": [
                    "str",
                    "Sequence[int]",
                    "bool"
                ],
                "print_output_handler": [
                    "bool",
                    "bytes",
                    "str",
                    "memoryview",
                    "int"
                ],
                "allow_unregulated_fixed_port_id": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "DataTypeBuilder.finalize": {
            "name": "finalize",
            "location": 66,
            "return": [
                "Union[(_serializable._composite.DelimitedType, _serializable._composite.ServiceType, _serializable._composite.StructureType, _serializable._composite.UnionType)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataTypeBuilder.on_attribute_comment": {
            "name": "on_attribute_comment",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comment": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DataTypeBuilder.on_header_comment": {
            "name": "on_header_comment",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comment": [
                    "bool",
                    "str",
                    "List[str]",
                    "Union[str,List[str]]",
                    "pathlib.Path",
                    "int",
                    "Union[pathlib.Path,str]"
                ]
            }
        },
        "DataTypeBuilder.on_constant": {
            "name": "on_constant",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "constant_type": [
                    "Dict",
                    "BaseException",
                    "Exception",
                    "Type",
                    "Type[BaseException]"
                ],
                "name": [
                    "Dict",
                    "BaseException",
                    "Exception",
                    "Type",
                    "Type[BaseException]"
                ],
                "value": [
                    "Dict",
                    "BaseException",
                    "Exception",
                    "Type",
                    "Type[BaseException]"
                ]
            }
        },
        "DataTypeBuilder.on_field": {
            "name": "on_field",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field_type": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "DataTypeBuilder.on_padding_field": {
            "name": "on_padding_field",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "padding_field_type": [
                    "str",
                    "Callable",
                    "Type"
                ]
            }
        },
        "DataTypeBuilder.on_directive": {
            "name": "on_directive",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line_number": [
                    "None",
                    "int",
                    "Optional[_expression.Any]",
                    "str",
                    "bytes",
                    "List[str]",
                    "bool"
                ],
                "directive_name": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "Tuple"
                ],
                "associated_expression_value": [
                    "None",
                    "int",
                    "Optional[_expression.Any]",
                    "str",
                    "bytes",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "DataTypeBuilder.on_service_response_marker": {
            "name": "on_service_response_marker",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataTypeBuilder.resolve_top_level_identifier": {
            "name": "resolve_top_level_identifier",
            "location": 175,
            "return": [
                "Set",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "DataTypeBuilder.resolve_versioned_data_type": {
            "name": "resolve_versioned_data_type",
            "location": 189,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[BaseException]",
                    "BaseException",
                    "Optional[Type[BaseException]]",
                    "None",
                    "Type"
                ],
                "version": [
                    "str",
                    "List[str]",
                    "int",
                    "None",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "DataTypeBuilder._queue_attribute": {
            "name": "_queue_attribute",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element_callback": [
                    "Callable",
                    "Dict",
                    "List",
                    "Dict[str,Any]",
                    "Container",
                    "T",
                    "Container[T]"
                ]
            }
        },
        "DataTypeBuilder._flush_attribute": {
            "name": "_flush_attribute",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comment": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DataTypeBuilder._on_attribute": {
            "name": "_on_attribute",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataTypeBuilder._on_print_directive": {
            "name": "_on_print_directive",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line_number": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "DataTypeBuilder._on_assert_directive": {
            "name": "_on_assert_directive",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line_number": [
                    "str",
                    "BinaryIO",
                    "bytes",
                    "None",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "value": [
                    "Optional[_expression.Any]",
                    "str",
                    "None",
                    "List[str]",
                    "Optional[bytes]",
                    "bytes"
                ]
            }
        },
        "DataTypeBuilder._on_extent_directive": {
            "name": "_on_extent_directive",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line_number": [
                    "str",
                    "pathlib.Path"
                ],
                "value": [
                    "str",
                    "Set[str]",
                    "bytes",
                    "None",
                    "Optional[_expression.Any]",
                    "bool",
                    "Optional[bool]",
                    "Optional[str]",
                    "Union[int,None]",
                    "Union[str,None]"
                ]
            }
        },
        "DataTypeBuilder._on_sealed_directive": {
            "name": "_on_sealed_directive",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_ln": [
                    "Optional[BaseException]",
                    "BaseException",
                    "Iterable[float]",
                    "Callable[[str,object],None]",
                    "bool",
                    "None",
                    "Callable[_,None]"
                ],
                "value": [
                    "None",
                    "Optional[_expression.Any]",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[T]",
                    "Optional[bool]",
                    "T"
                ]
            }
        },
        "DataTypeBuilder._on_union_directive": {
            "name": "_on_union_directive",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_ln": [
                    "Optional[BaseException]",
                    "BaseException",
                    "Iterable[float]",
                    "Callable[[str,object],None]",
                    "bool",
                    "None",
                    "Callable[_,None]"
                ],
                "value": [
                    "None",
                    "Optional[_expression.Any]",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[T]",
                    "Optional[bool]",
                    "T"
                ]
            }
        },
        "DataTypeBuilder._on_deprecated_directive": {
            "name": "_on_deprecated_directive",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_ln": [
                    "Optional[BaseException]",
                    "BaseException",
                    "Iterable[float]",
                    "Callable[[str,object],None]",
                    "bool",
                    "None",
                    "Callable[_,None]"
                ],
                "value": [
                    "None",
                    "Optional[_expression.Any]",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[T]",
                    "Optional[bool]",
                    "T"
                ]
            }
        },
        "DataTypeBuilder._make_composite": {
            "name": "_make_composite",
            "location": 320,
            "return": [
                "Union[(_serializable._composite.DelimitedType, _serializable._composite.StructureType, _serializable._composite.UnionType)]"
            ],
            "arguments": {
                "builder": [
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]",
                    "bool",
                    "Callable[[T],Any]",
                    "str",
                    "None",
                    "Callable[T,Any]"
                ],
                "name": [
                    "List[str]",
                    "str",
                    "int",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "version": [
                    "List[str]",
                    "str",
                    "int",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "deprecated": [
                    "List[str]",
                    "str",
                    "int",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "fixed_port_id": [
                    "List[str]",
                    "str",
                    "int",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "source_file_path": [
                    "List[str]",
                    "str",
                    "int",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "has_parent_service": [
                    "List[str]",
                    "str",
                    "int",
                    "float",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "DataTypeBuilder._suggest_extent_in_bytes": {
            "name": "_suggest_extent_in_bytes",
            "location": 359,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "model": [
                    "str",
                    "int",
                    "Type[T]",
                    "Type"
                ]
            }
        }
    },
    "pydsdl-master/pydsdl/_dsdl_definition.py": {
        "FileNameFormatError.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "path": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "DSDLDefinition.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "bool",
                    "str",
                    "bytes",
                    "pathlib.PurePath",
                    "Union[str,pathlib.Path]",
                    "pathlib.Path",
                    "path.Path"
                ],
                "root_namespace_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "DSDLDefinition.read": {
            "name": "read",
            "location": 98,
            "return": [
                "str",
                "Type",
                "Set[str]",
                "Tuple[Union[Type,Any]]"
            ],
            "arguments": {
                "self": [],
                "lookup_definitions": [
                    "int",
                    "List[int]",
                    "Sized",
                    "str",
                    "bool",
                    "List"
                ],
                "print_output_handler": [
                    "float",
                    "Vector3",
                    "XY"
                ],
                "allow_unregulated_fixed_port_id": [
                    "float",
                    "Vector3",
                    "XY"
                ]
            }
        },
        "DSDLDefinition.full_name": {
            "name": "full_name",
            "location": 164,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSDLDefinition.name_components": {
            "name": "name_components",
            "location": 169,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSDLDefinition.short_name": {
            "name": "short_name",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSDLDefinition.full_namespace": {
            "name": "full_namespace",
            "location": 179,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSDLDefinition.root_namespace": {
            "name": "root_namespace",
            "location": 184,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSDLDefinition.text": {
            "name": "text",
            "location": 189,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSDLDefinition.version": {
            "name": "version",
            "location": 194,
            "return": [
                "str",
                "Callable[[], bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSDLDefinition.fixed_port_id": {
            "name": "fixed_port_id",
            "location": 198,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSDLDefinition.has_fixed_port_id": {
            "name": "has_fixed_port_id",
            "location": 203,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSDLDefinition.file_path": {
            "name": "file_path",
            "location": 207,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSDLDefinition.root_namespace_path": {
            "name": "root_namespace_path",
            "location": 211,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSDLDefinition.__eq__": {
            "name": "__eq__",
            "location": 214,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "float"
                ]
            }
        },
        "DSDLDefinition.__str__": {
            "name": "__str__",
            "location": 223,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pydsdl-master/pydsdl/_error.py": {
        "_unittest_error": {
            "name": "_unittest_error",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_unittest_internal_error_github_reporting": {
            "name": "_unittest_internal_error_github_reporting",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FrontendError.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ],
                "path": [
                    "int",
                    "None",
                    "str",
                    "bool"
                ],
                "line": [
                    "List[str]",
                    "None",
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "FrontendError.set_error_location_if_unknown": {
            "name": "set_error_location_if_unknown",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "None",
                    "pathlib.Path",
                    "str",
                    "Union[str,pathlib.Path]",
                    "Union[pathlib.Path,str]",
                    "pathlib2.Path"
                ],
                "line": [
                    "str",
                    "None",
                    "Generator[str,None,None]",
                    "Generator[Union[str,None,None]]"
                ]
            }
        },
        "FrontendError.path": {
            "name": "path",
            "location": 39,
            "return": [
                "str",
                "pathlib.Path",
                "List[int]",
                "paradigm.catalog.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrontendError.line": {
            "name": "line",
            "location": 44,
            "return": [
                "str",
                "Sequence[str]",
                "Set[str]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrontendError.text": {
            "name": "text",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrontendError.__str__": {
            "name": "__str__",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrontendError.__repr__": {
            "name": "__repr__",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InternalError.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "path": [
                    "str",
                    "None",
                    "bool",
                    "int",
                    "List[tuple[Union[int,int]]]",
                    "List[Tuple[int,int]]",
                    "Optional[str]"
                ],
                "line": [
                    "str",
                    "None",
                    "bool",
                    "int",
                    "List[tuple[Union[int,int]]]",
                    "List[Tuple[int,int]]",
                    "Optional[str]"
                ],
                "culprit": [
                    "str",
                    "None",
                    "Optional[str]",
                    "pathlib.Path"
                ]
            }
        }
    },
    "pydsdl-master/pydsdl/_namespace.py": {
        "read_namespace": {
            "name": "read_namespace",
            "location": 82,
            "return": [
                "list"
            ],
            "arguments": {
                "root_namespace_directory": [
                    "List[str]",
                    "List[pathlib.Path]",
                    "List[dict]"
                ],
                "lookup_directories": [
                    "bool",
                    "None",
                    "str",
                    "List",
                    "Optional[int]",
                    "Union[str,os.PathLike,None]"
                ],
                "print_output_handler": [
                    "str",
                    "None",
                    "Dict[str,str]",
                    "bool",
                    "Optional[str]",
                    "Callable[str,str]",
                    "Callable[[str],str]",
                    "int"
                ],
                "allow_unregulated_fixed_port_id": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Dict[str,str]",
                    "Callable[[str],str]",
                    "int"
                ]
            }
        },
        "_read_namespace_definitions": {
            "name": "_read_namespace_definitions",
            "location": 205,
            "return": [
                "list"
            ],
            "arguments": {
                "target_definitions": [
                    "List[D]",
                    "List[_dsdl_definition.DSDLDefinition]",
                    "bool",
                    "int",
                    "float"
                ],
                "lookup_definitions": [
                    "bool",
                    "float",
                    "List[D]",
                    "List[_dsdl_definition.DSDLDefinition]",
                    "Tuple[Union[dict,int]]",
                    "int",
                    "Tuple[dict,int]"
                ],
                "print_output_handler": [
                    "List[_dsdl_definition.DSDLDefinition]",
                    "None",
                    "bool",
                    "float",
                    "List[D]",
                    "int"
                ],
                "allow_unregulated_fixed_port_id": [
                    "bool",
                    "List[_dsdl_definition.DSDLDefinition]",
                    "float",
                    "int",
                    "Tuple[dict,int]"
                ]
            }
        },
        "_ensure_no_name_collisions": {
            "name": "_ensure_no_name_collisions",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "target_definitions": [
                    "List[D]",
                    "str",
                    "List[_dsdl_definition.DSDLDefinition]",
                    "List[tuple[Union[Any,Any]]]",
                    "bool",
                    "int",
                    "Collection[str]",
                    "List[Tuple[Any,Any]]",
                    "Iterable[Tuple[int,Any]]"
                ],
                "lookup_definitions": [
                    "List[D]",
                    "str",
                    "List[_dsdl_definition.DSDLDefinition]",
                    "List[tuple[Union[Any,Any]]]",
                    "bool",
                    "int",
                    "Collection[str]",
                    "List[Tuple[Any,Any]]",
                    "Iterable[Tuple[int,Any]]"
                ]
            }
        },
        "_ensure_no_fixed_port_id_collisions": {
            "name": "_ensure_no_fixed_port_id_collisions",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "types": [
                    "List[_serializable.CompositeType]",
                    "str",
                    "List[C]"
                ]
            }
        },
        "_ensure_minor_version_compatibility": {
            "name": "_ensure_minor_version_compatibility",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "types": [
                    "List[C]",
                    "str",
                    "List[_serializable.CompositeType]",
                    "bool"
                ]
            }
        },
        "_ensure_minor_version_compatibility_pairwise": {
            "name": "_ensure_minor_version_compatibility_pairwise",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "str",
                    "bool",
                    "Sequence[Any]"
                ],
                "b": [
                    "str",
                    "bool",
                    "Sequence[Any]"
                ]
            }
        },
        "_ensure_no_common_usage_errors": {
            "name": "_ensure_no_common_usage_errors",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "root_namespace_directory": [
                    "str",
                    "int",
                    "Set[str]",
                    "bytearray"
                ],
                "lookup_directories": [
                    "str",
                    "bytearray",
                    "Set[Union[str,bytearray,bytearray,bytearray,bytearray,bytearray,bytearray,bytearray,bytearray,bytearray,bytearray,bytearray]]",
                    "int",
                    "Set[str]"
                ],
                "reporter": [
                    "Sized",
                    "pathlib.Path"
                ]
            }
        },
        "_ensure_no_nested_root_namespaces": {
            "name": "_ensure_no_nested_root_namespaces",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "directories": [
                    "List[Union[str,bytes,bytes,bytes,bytes,bytes,bytes,bytes]]",
                    "bytes",
                    "List[str]",
                    "List[dict[str,str]]",
                    "List[Dict[str,str]]",
                    "Callable",
                    "pathlib.Path"
                ]
            }
        },
        "_ensure_no_namespace_name_collisions": {
            "name": "_ensure_no_namespace_name_collisions",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "directories": [
                    "List[Union[int,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str]]",
                    "List[int]",
                    "str",
                    "Optional[Union[str,Any]]",
                    "List[float]",
                    "int",
                    "Union[List[float],List[int]]"
                ]
            }
        },
        "_construct_dsdl_definitions_from_namespace": {
            "name": "_construct_dsdl_definitions_from_namespace",
            "location": 425,
            "return": [
                "List[_dsdl_definition.DSDLDefinition]"
            ],
            "arguments": {
                "root_namespace_path": [
                    "str",
                    "BinaryIO",
                    "Iterable[str]",
                    "pathlib.Path"
                ]
            }
        },
        "_unittest_dsdl_definition_constructor": {
            "name": "_unittest_dsdl_definition_constructor",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_unittest_common_usage_errors": {
            "name": "_unittest_common_usage_errors",
            "location": 576,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_unittest_nested_roots": {
            "name": "_unittest_nested_roots",
            "location": 608,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_unittest_issue_71": {
            "name": "_unittest_issue_71",
            "location": 620,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_read_namespace_definitions.make_print_handler": {
            "name": "make_print_handler",
            "location": 219,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "definition": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_ensure_no_common_usage_errors.base": {
            "name": "base",
            "location": 377,
            "return": [
                "str",
                "bool",
                "Dict"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_ensure_no_common_usage_errors.is_valid_name": {
            "name": "is_valid_name",
            "location": 380,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]",
                    "AnyStr"
                ]
            }
        },
        "_construct_dsdl_definitions_from_namespace.on_walk_error": {
            "name": "on_walk_error",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "os_ex": [
                    "Exception"
                ]
            }
        },
        "_unittest_dsdl_definition_constructor.touchy": {
            "name": "touchy",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "relative_path": [
                    "str"
                ]
            }
        },
        "_unittest_dsdl_definition_constructor.discard": {
            "name": "discard",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {
                "relative_path": [
                    "str"
                ]
            }
        },
        "_read_namespace_definitions.make_print_handler.handler": {
            "name": "handler",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "line_number": [
                    "int",
                    "str"
                ],
                "text": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "pydsdl-master/pydsdl/_parser.py": {
        "parse": {
            "name": "parse",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [],
                "statement_stream_processor": []
            }
        },
        "_get_grammar": {
            "name": "_get_grammar",
            "location": 91,
            "return": [
                "Grammar"
            ],
            "arguments": {}
        },
        "_make_typesafe_child_lifter": {
            "name": "_make_typesafe_child_lifter",
            "location": 104,
            "return": [
                "Callable[([Any, Any, Any], Any)]"
            ],
            "arguments": {
                "expected_type": []
            }
        },
        "_make_binary_operator_handler": {
            "name": "_make_binary_operator_handler",
            "location": 117,
            "return": [
                "Callable[([Any, Any, Any], Any)]"
            ],
            "arguments": {
                "operator": []
            }
        },
        "_unwrap_array_capacity": {
            "name": "_unwrap_array_capacity",
            "location": 431,
            "return": [
                "Any"
            ],
            "arguments": {
                "ex": []
            }
        },
        "_parse_string_literal": {
            "name": "_parse_string_literal",
            "location": 440,
            "return": [
                "_expression._primitive.String"
            ],
            "arguments": {
                "literal": []
            }
        },
        "_unittest_parse_string_literal": {
            "name": "_unittest_parse_string_literal",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "StatementStreamProcessor.on_header_comment": {
            "name": "on_header_comment",
            "location": 57,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "comment": []
            }
        },
        "StatementStreamProcessor.on_attribute_comment": {
            "name": "on_attribute_comment",
            "location": 60,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "comment": []
            }
        },
        "StatementStreamProcessor.on_constant": {
            "name": "on_constant",
            "location": 63,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "constant_type": [],
                "name": [],
                "value": []
            }
        },
        "StatementStreamProcessor.on_field": {
            "name": "on_field",
            "location": 66,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "field_type": [],
                "name": []
            }
        },
        "StatementStreamProcessor.on_padding_field": {
            "name": "on_padding_field",
            "location": 69,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "padding_field_type": []
            }
        },
        "StatementStreamProcessor.on_directive": {
            "name": "on_directive",
            "location": 72,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "line_number": [],
                "directive_name": [],
                "associated_expression_value": []
            }
        },
        "StatementStreamProcessor.on_service_response_marker": {
            "name": "on_service_response_marker",
            "location": 77,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatementStreamProcessor.resolve_top_level_identifier": {
            "name": "resolve_top_level_identifier",
            "location": 81,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "StatementStreamProcessor.resolve_versioned_data_type": {
            "name": "resolve_versioned_data_type",
            "location": 85,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "version": []
            }
        },
        "_make_typesafe_child_lifter.visitor_handler": {
            "name": "visitor_handler",
            "location": 105,
            "return": [],
            "arguments": {
                "_self": [],
                "_n": [],
                "children": []
            }
        },
        "_ParseTreeProcessor.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "statement_stream_processor": []
            }
        },
        "_ParseTreeProcessor.current_line_number": {
            "name": "current_line_number",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ParseTreeProcessor._flush_comment": {
            "name": "_flush_comment",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ParseTreeProcessor.generic_visit": {
            "name": "generic_visit",
            "location": 159,
            "return": [
                "Union[(tuple, _T0)]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "_T0@@"
                ],
                "visited_children": []
            }
        },
        "_ParseTreeProcessor.visit_line": {
            "name": "visit_line",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "children": []
            }
        },
        "_ParseTreeProcessor.visit_end_of_line": {
            "name": "visit_end_of_line",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "_c": []
            }
        },
        "_ParseTreeProcessor.visit_comment": {
            "name": "visit_comment",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "children": []
            }
        },
        "_ParseTreeProcessor.visit_statement_constant": {
            "name": "visit_statement_constant",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "children": []
            }
        },
        "_ParseTreeProcessor.visit_statement_field": {
            "name": "visit_statement_field",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "children": []
            }
        },
        "_ParseTreeProcessor.visit_statement_padding_field": {
            "name": "visit_statement_padding_field",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "children": []
            }
        },
        "_ParseTreeProcessor.visit_statement_service_response_marker": {
            "name": "visit_statement_service_response_marker",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "_c": []
            }
        },
        "_ParseTreeProcessor.visit_statement_directive_with_expression": {
            "name": "visit_statement_directive_with_expression",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "children": []
            }
        },
        "_ParseTreeProcessor.visit_statement_directive_without_expression": {
            "name": "visit_statement_directive_without_expression",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "children": []
            }
        },
        "_ParseTreeProcessor.visit_identifier": {
            "name": "visit_identifier",
            "location": 222,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "_c": []
            }
        },
        "_ParseTreeProcessor.visit_type_array_variable_inclusive": {
            "name": "visit_type_array_variable_inclusive",
            "location": 236,
            "return": [
                "_serializable._array.VariableLengthArrayType"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "children": []
            }
        },
        "_ParseTreeProcessor.visit_type_array_variable_exclusive": {
            "name": "visit_type_array_variable_exclusive",
            "location": 242,
            "return": [
                "_serializable._array.VariableLengthArrayType"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "children": []
            }
        },
        "_ParseTreeProcessor.visit_type_array_fixed": {
            "name": "visit_type_array_fixed",
            "location": 248,
            "return": [
                "_serializable._array.FixedLengthArrayType"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "children": []
            }
        },
        "_ParseTreeProcessor.visit_type_versioned": {
            "name": "visit_type_versioned",
            "location": 252,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "children": []
            }
        },
        "_ParseTreeProcessor.visit_type_version_specifier": {
            "name": "visit_type_version_specifier",
            "location": 261,
            "return": [
                "_serializable._composite.Version"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "children": []
            }
        },
        "_ParseTreeProcessor.visit_type_primitive_truncated": {
            "name": "visit_type_primitive_truncated",
            "location": 266,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "children": []
            }
        },
        "_ParseTreeProcessor.visit_type_primitive_saturated": {
            "name": "visit_type_primitive_saturated",
            "location": 270,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "children": []
            }
        },
        "_ParseTreeProcessor.visit_type_primitive_name_boolean": {
            "name": "visit_type_primitive_name_boolean",
            "location": 274,
            "return": [
                "Callable[([_serializable._primitive.PrimitiveType.CastMode], _serializable._primitive.PrimitiveType)]"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "_c": []
            }
        },
        "_ParseTreeProcessor.visit_type_primitive_name_unsigned_integer": {
            "name": "visit_type_primitive_name_unsigned_integer",
            "location": 277,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "children": []
            }
        },
        "_ParseTreeProcessor.visit_type_primitive_name_signed_integer": {
            "name": "visit_type_primitive_name_signed_integer",
            "location": 280,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "children": []
            }
        },
        "_ParseTreeProcessor.visit_type_primitive_name_floating_point": {
            "name": "visit_type_primitive_name_floating_point",
            "location": 283,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "children": []
            }
        },
        "_ParseTreeProcessor.visit_type_void": {
            "name": "visit_type_void",
            "location": 286,
            "return": [
                "_serializable._void.VoidType"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "children": []
            }
        },
        "_ParseTreeProcessor.visit_type_bit_length_suffix": {
            "name": "visit_type_bit_length_suffix",
            "location": 291,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "_c": []
            }
        },
        "_ParseTreeProcessor.visit_expression_list": {
            "name": "visit_expression_list",
            "location": 305,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "children": []
            }
        },
        "_ParseTreeProcessor.visit_expression_parenthesized": {
            "name": "visit_expression_parenthesized",
            "location": 317,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "children": []
            }
        },
        "_ParseTreeProcessor.visit_expression_atom": {
            "name": "visit_expression_atom",
            "location": 322,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "children": []
            }
        },
        "_ParseTreeProcessor._visit_binary_operator_chain": {
            "name": "_visit_binary_operator_chain",
            "location": 336,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "children": []
            }
        },
        "_ParseTreeProcessor.visit_op1_form_log_not": {
            "name": "visit_op1_form_log_not",
            "location": 359,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "children": []
            }
        },
        "_ParseTreeProcessor.visit_op1_form_inv_pos": {
            "name": "visit_op1_form_inv_pos",
            "location": 364,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "children": []
            }
        },
        "_ParseTreeProcessor.visit_op1_form_inv_neg": {
            "name": "visit_op1_form_inv_neg",
            "location": 369,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "children": []
            }
        },
        "_ParseTreeProcessor.visit_op2_attrib": {
            "name": "visit_op2_attrib",
            "location": 392,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "_c": []
            }
        },
        "_ParseTreeProcessor.visit_literal_set": {
            "name": "visit_literal_set",
            "location": 401,
            "return": [
                "_expression._container.Set"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "children": []
            }
        },
        "_ParseTreeProcessor.visit_literal_real": {
            "name": "visit_literal_real",
            "location": 406,
            "return": [
                "_expression._primitive.Rational"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "_c": []
            }
        },
        "_ParseTreeProcessor.visit_literal_integer": {
            "name": "visit_literal_integer",
            "location": 409,
            "return": [
                "_expression._primitive.Rational"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "_c": []
            }
        },
        "_ParseTreeProcessor.visit_literal_integer_decimal": {
            "name": "visit_literal_integer_decimal",
            "location": 412,
            "return": [
                "_expression._primitive.Rational"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "_c": []
            }
        },
        "_ParseTreeProcessor.visit_literal_boolean_true": {
            "name": "visit_literal_boolean_true",
            "location": 415,
            "return": [
                "_expression._primitive.Boolean"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "_c": []
            }
        },
        "_ParseTreeProcessor.visit_literal_boolean_false": {
            "name": "visit_literal_boolean_false",
            "location": 418,
            "return": [
                "_expression._primitive.Boolean"
            ],
            "arguments": {
                "self": [],
                "_n": [],
                "_c": []
            }
        },
        "_ParseTreeProcessor.visit_literal_string_single_quoted": {
            "name": "visit_literal_string_single_quoted",
            "location": 421,
            "return": [
                "_expression._primitive.String"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "_c": []
            }
        },
        "_ParseTreeProcessor.visit_literal_string_double_quoted": {
            "name": "visit_literal_string_double_quoted",
            "location": 424,
            "return": [
                "_expression._primitive.String"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "_c": []
            }
        },
        "_parse_string_literal._next_symbol": {
            "name": "_next_symbol",
            "location": 448,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {}
        },
        "_unittest_parse_string_literal.once": {
            "name": "once",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {
                "literal": [],
                "value": []
            }
        },
        "_unittest_parse_string_literal.auto_repr": {
            "name": "auto_repr",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "text": []
            }
        }
    },
    "pydsdl-master/pydsdl/_port_id_ranges.py": {
        "is_valid_regulated_subject_id": {
            "name": "is_valid_regulated_subject_id",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "regulated_id": [
                    "int",
                    "str"
                ],
                "root_namespace": [
                    "str",
                    "bytes"
                ]
            }
        },
        "is_valid_regulated_service_id": {
            "name": "is_valid_regulated_service_id",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "regulated_id": [
                    "int",
                    "str"
                ],
                "root_namespace": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_unittest_pid_ranges": {
            "name": "_unittest_pid_ranges",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pydsdl-master/pydsdl/_test.py": {
        "_parse_definition": {
            "name": "_parse_definition",
            "location": 29,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "definition": [
                    "str",
                    "int",
                    "Iterable[str]"
                ],
                "lookup_definitions": [
                    "str",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "_define": {
            "name": "_define",
            "location": 39,
            "return": [
                "_dsdl_definition.DSDLDefinition"
            ],
            "arguments": {
                "rel_path": [
                    "str",
                    "List[str]",
                    "Dict[str,pathlib.Path]",
                    "Dict"
                ],
                "text": [
                    "str",
                    "int",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "_in_n_out": {
            "name": "_in_n_out",
            "location": 53,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "test": [
                    "Callable[,None]",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "_unittest_define": {
            "name": "_unittest_define",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_unittest_simple": {
            "name": "_unittest_simple",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_unittest_comments": {
            "name": "_unittest_comments",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_unittest_error": {
            "name": "_unittest_error",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_unittest_print": {
            "name": "_unittest_print",
            "location": 739,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "_unittest_assert": {
            "name": "_unittest_assert",
            "location": 770,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_unittest_parse_namespace": {
            "name": "_unittest_parse_namespace",
            "location": 978,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "_unittest_parse_namespace_versioning": {
            "name": "_unittest_parse_namespace_versioning",
            "location": 1129,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_unittest_parse_namespace_faults": {
            "name": "_unittest_parse_namespace_faults",
            "location": 1589,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_unittest_inconsistent_deprecation": {
            "name": "_unittest_inconsistent_deprecation",
            "location": 1612,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_unittest_repeated_directives": {
            "name": "_unittest_repeated_directives",
            "location": 1661,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_unittest_dsdl_parser_basics": {
            "name": "_unittest_dsdl_parser_basics",
            "location": 1785,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_unittest_dsdl_parser_expressions": {
            "name": "_unittest_dsdl_parser_expressions",
            "location": 1820,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_unittest_pickle": {
            "name": "_unittest_pickle",
            "location": 1918,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_collect_descendants": {
            "name": "_collect_descendants",
            "location": 1951,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "_unittest_collect_descendants": {
            "name": "_unittest_collect_descendants",
            "location": 1958,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_unittest_public_api": {
            "name": "_unittest_public_api",
            "location": 1976,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_in_n_out.decorator": {
            "name": "decorator",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_unittest_error.standalone": {
            "name": "standalone",
            "location": 418,
            "return": [
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "rel_path": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[IO[bytes]]",
                    "pathlib.Path",
                    "Optional[pathlib.Path]",
                    "int"
                ],
                "definition": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[IO[bytes]]",
                    "pathlib.Path",
                    "Optional[pathlib.Path]",
                    "int"
                ],
                "allow_unregulated": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[IO[bytes]]",
                    "pathlib.Path",
                    "Optional[pathlib.Path]",
                    "int"
                ]
            }
        },
        "_unittest_print.print_handler": {
            "name": "print_handler",
            "location": 742,
            "return": [
                "None"
            ],
            "arguments": {
                "line_number": [],
                "text": []
            }
        },
        "_unittest_parse_namespace.print_handler": {
            "name": "print_handler",
            "location": 985,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [
                    "str",
                    "Optional[int]"
                ],
                "line": [
                    "str",
                    "Optional[int]"
                ],
                "text": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "_unittest_parse_namespace._define": {
            "name": "_define",
            "location": 990,
            "return": [
                "_dsdl_definition.DSDLDefinition"
            ],
            "arguments": {
                "rel_path": [
                    "str",
                    "dict[str, pathlib.Path]",
                    "dict[, ]"
                ],
                "text": [
                    "str",
                    "int",
                    "typing.IO"
                ]
            }
        },
        "_unittest_parse_namespace_versioning._define": {
            "name": "_define",
            "location": 1136,
            "return": [
                "_dsdl_definition.DSDLDefinition"
            ],
            "arguments": {
                "rel_path": [
                    "str",
                    "List[str]",
                    "Dict[str,pathlib.Path]",
                    "Dict"
                ],
                "text": [
                    "str",
                    "int",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "_unittest_parse_namespace_versioning._undefine_glob": {
            "name": "_undefine_glob",
            "location": 1142,
            "return": [
                "None"
            ],
            "arguments": {
                "rel_path_glob": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "_unittest_dsdl_parser_expressions.throws": {
            "name": "throws",
            "location": 1823,
            "return": [
                "None"
            ],
            "arguments": {
                "definition": [
                    "int",
                    "Callable",
                    "str"
                ],
                "exc": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "pydsdl-master/pydsdl/__init__.py": {},
    "pydsdl-master/pydsdl/third_party/six.py": {
        "_add_doc": {
            "name": "_add_doc",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[[T], bool]",
                    "float"
                ],
                "doc": [
                    "Callable",
                    "Callable[[T], bool]",
                    "float"
                ]
            }
        },
        "_import_module": {
            "name": "_import_module",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "Type[T]",
                    "Sequence[utils.types.A]"
                ]
            }
        },
        "add_move": {
            "name": "add_move",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {
                "move": [
                    "str",
                    "dss.util.types.JSON",
                    "Callable",
                    "Set[str]"
                ]
            }
        },
        "remove_move": {
            "name": "remove_move",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "assertCountEqual": {
            "name": "assertCountEqual",
            "location": 694,
            "return": [
                "Callable",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "assertRaisesRegex": {
            "name": "assertRaisesRegex",
            "location": 698,
            "return": [
                "Callable",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "assertRegex": {
            "name": "assertRegex",
            "location": 702,
            "return": [
                "float",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "assertNotRegex": {
            "name": "assertNotRegex",
            "location": 706,
            "return": [
                "Callable",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "with_metaclass": {
            "name": "with_metaclass",
            "location": 856,
            "return": [
                "type"
            ],
            "arguments": {
                "meta": [
                    "bool",
                    "str",
                    "int",
                    "Iterable[int]"
                ]
            }
        },
        "add_metaclass": {
            "name": "add_metaclass",
            "location": 880,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "metaclass": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "ensure_binary": {
            "name": "ensure_binary",
            "location": 898,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "int",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "str"
                ],
                "encoding": [
                    "str"
                ],
                "errors": [
                    "str"
                ]
            }
        },
        "ensure_str": {
            "name": "ensure_str",
            "location": 916,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]",
                    "Tuple[int, int]"
                ],
                "encoding": [
                    "str"
                ],
                "errors": [
                    "str"
                ]
            }
        },
        "ensure_text": {
            "name": "ensure_text",
            "location": 939,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "List[Union[str, Any]]"
                ],
                "encoding": [
                    "str"
                ],
                "errors": [
                    "str"
                ]
            }
        },
        "python_2_unicode_compatible": {
            "name": "python_2_unicode_compatible",
            "location": 958,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "klass": [
                    "str",
                    "dict",
                    "denite.util.UserContext"
                ]
            }
        },
        "_LazyDescr.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "_LazyDescr.__get__": {
            "name": "__get__",
            "location": 96,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "dict",
                    "Dict[str, List[str]]",
                    "Dict[str, Any]"
                ],
                "tp": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "MovedModule.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[Dict]",
                    "Dict[str, Any]",
                    "bool",
                    "float"
                ],
                "old": [
                    "Optional[List[str]]",
                    "bool",
                    "int"
                ],
                "new": [
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[\"ValidatorTypes\"]",
                    "str",
                    "Optional[\"Node\"]",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "MovedModule._resolve": {
            "name": "_resolve",
            "location": 119,
            "return": [
                "module"
            ],
            "arguments": {
                "self": []
            }
        },
        "MovedModule.__getattr__": {
            "name": "__getattr__",
            "location": 122,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "Type[T]",
                    "type"
                ]
            }
        },
        "_LazyModule.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "_LazyModule.__dir__": {
            "name": "__dir__",
            "location": 135,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MovedAttribute.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "old_mod": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "Iterable[str]"
                ],
                "new_mod": [
                    "Optional[str]",
                    "Union[int, str]",
                    "Optional[Sequence[str]]",
                    "Optional[int]",
                    "str"
                ],
                "old_attr": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "bool"
                ],
                "new_attr": [
                    "Optional[str]",
                    "Optional[Match]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict]",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "Optional[List[dict]]",
                    "Optional[dict]"
                ]
            }
        },
        "MovedAttribute._resolve": {
            "name": "_resolve",
            "location": 164,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SixMetaPathImporter.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "six_module_name": [
                    "str",
                    "Container[str]",
                    "types.ModuleType",
                    "bool"
                ]
            }
        },
        "_SixMetaPathImporter._add_module": {
            "name": "_add_module",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mod": [
                    "bytes",
                    "dict"
                ]
            }
        },
        "_SixMetaPathImporter._get_module": {
            "name": "_get_module",
            "location": 186,
            "return": [
                "Optional[str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "dict",
                    "bytes"
                ]
            }
        },
        "_SixMetaPathImporter.find_module": {
            "name": "find_module",
            "location": 189,
            "return": [
                "Optional[_SixMetaPathImporter]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "int",
                    "bool",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "str"
                ],
                "path": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "List[str]",
                    "Optional[str]",
                    "types.ModuleType"
                ]
            }
        },
        "_SixMetaPathImporter.find_spec": {
            "name": "find_spec",
            "location": 194,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str",
                    "List[str]"
                ],
                "path": [
                    "List[str]",
                    "Optional[str]",
                    "types.ModuleType",
                    "str",
                    "Tuple[str]",
                    "list"
                ],
                "target": [
                    "List[str]",
                    "Optional[str]",
                    "types.ModuleType",
                    "str",
                    "Tuple[str]",
                    "list"
                ]
            }
        },
        "_SixMetaPathImporter.__get_module": {
            "name": "__get_module",
            "location": 199,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ]
            }
        },
        "_SixMetaPathImporter.load_module": {
            "name": "load_module",
            "location": 205,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str",
                    "bool"
                ]
            }
        },
        "_SixMetaPathImporter.is_package": {
            "name": "is_package",
            "location": 219,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "int",
                    "List[Callable]"
                ]
            }
        },
        "_SixMetaPathImporter.get_code": {
            "name": "get_code",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "Union[str, IO]",
                    "str",
                    "IO[str]",
                    "List[str]"
                ]
            }
        },
        "_SixMetaPathImporter.create_module": {
            "name": "create_module",
            "location": 236,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "Optional[str]",
                    "int",
                    "str"
                ]
            }
        },
        "_SixMetaPathImporter.exec_module": {
            "name": "exec_module",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "types.ModuleType",
                    "str"
                ]
            }
        },
        "Module_six_moves_urllib.__dir__": {
            "name": "__dir__",
            "location": 503,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "get_unbound_function": {
            "name": "get_unbound_function",
            "location": 570,
            "return": [
                "str"
            ],
            "arguments": {
                "unbound": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "create_unbound_method": {
            "name": "create_unbound_method",
            "location": 576,
            "return": [
                "mypy.types.Type",
                "Optional[Callable[[], mypy.types.Instance]]"
            ],
            "arguments": {
                "func": [
                    "dict",
                    "denite.util.UserContext",
                    "Dict[str, Any]"
                ],
                "cls": [
                    "dict",
                    "denite.util.UserContext",
                    "Dict[str, Any]"
                ]
            }
        },
        "create_bound_method": {
            "name": "create_bound_method",
            "location": 573,
            "return": [
                "mypy.types.Type",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "func": [
                    "dict",
                    "bytearray",
                    "Type"
                ],
                "obj": [
                    "dict",
                    "bytearray",
                    "Type"
                ]
            }
        },
        "iterkeys": {
            "name": "iterkeys",
            "location": 616,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "d": [
                    "str"
                ]
            }
        },
        "itervalues": {
            "name": "itervalues",
            "location": 619,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "d": [
                    "str"
                ]
            }
        },
        "iteritems": {
            "name": "iteritems",
            "location": 622,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "d": [
                    "str"
                ]
            }
        },
        "iterlists": {
            "name": "iterlists",
            "location": 625,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "d": [
                    "str"
                ]
            }
        },
        "b": {
            "name": "b",
            "location": 669,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bool"
                ]
            }
        },
        "u": {
            "name": "u",
            "location": 673,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "byte2int": {
            "name": "byte2int",
            "location": 678,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "bs": [
                    "Optional[str]",
                    "float",
                    "str",
                    "bytes"
                ]
            }
        },
        "indexbytes": {
            "name": "indexbytes",
            "location": 681,
            "return": [
                "List[str]",
                "str",
                "Iterable[T]",
                "float",
                "int",
                "List[\"DictDataLoader\"]",
                "type"
            ],
            "arguments": {
                "buf": [
                    "bytes",
                    "int",
                    "List[str]",
                    "Mapping[str, Any]",
                    "Iterable[int]"
                ],
                "i": [
                    "bytes",
                    "int",
                    "List[str]",
                    "Mapping[str, Any]",
                    "Iterable[int]"
                ]
            }
        },
        "reraise": {
            "name": "reraise",
            "location": 713,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "tp": [
                    "str",
                    "int",
                    "T",
                    "bytes"
                ],
                "value": [
                    "float",
                    "Optional[str]",
                    "Iterable",
                    "T",
                    "str",
                    "bool"
                ],
                "tb": [
                    "str",
                    "bool"
                ]
            }
        },
        "exec_": {
            "name": "exec_",
            "location": 725,
            "return": [],
            "arguments": {
                "_code_": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "_globs_": [
                    "str",
                    "Optional[str]"
                ],
                "_locs_": [
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[float]"
                ]
            }
        },
        "raise_from": {
            "name": "raise_from",
            "location": 753,
            "return": [],
            "arguments": {
                "value": [
                    "Optional[str]",
                    "Dict[str, int]",
                    "Dict[str, object]"
                ],
                "from_value": [
                    "Optional[str]",
                    "Dict[str, int]",
                    "Dict[str, object]"
                ]
            }
        },
        "print_": {
            "name": "print_",
            "location": 815,
            "return": [],
            "arguments": {}
        },
        "_update_wrapper": {
            "name": "_update_wrapper",
            "location": 830,
            "return": [
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "wrapper": [
                    "str",
                    "Optional[str]"
                ],
                "wrapped": [
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "Optional[str]",
                    "bool"
                ],
                "assigned": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Iterable[str]"
                ],
                "updated": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "wraps": {
            "name": "wraps",
            "location": 846,
            "return": [
                "Callable[([_T], _T)]"
            ],
            "arguments": {
                "wrapped": [
                    "Callable"
                ],
                "assigned": [
                    "Sequence[str]"
                ],
                "updated": [
                    "Sequence[str]"
                ]
            }
        },
        "add_metaclass.wrapper": {
            "name": "wrapper",
            "location": 882,
            "return": [
                "str",
                "authorityspoke.io.schemas.RawFactor",
                "Type",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "Type[types.C]",
                    "types.StrucInput",
                    "str",
                    "type",
                    "Type"
                ]
            }
        },
        "advance_iterator": {
            "name": "advance_iterator",
            "location": 547,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "it": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "callable": {
            "name": "callable",
            "location": 555,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "mypy.types.Instance",
                    "int",
                    "str"
                ]
            }
        },
        "Iterator.next": {
            "name": "next",
            "location": 581,
            "return": [
                "Union[(_T, _T2)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "print_.write": {
            "name": "write",
            "location": 765,
            "return": [],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "with_metaclass.metaclass.__new__": {
            "name": "__new__",
            "location": 863,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "int",
                    "str",
                    "Sequence[str]",
                    "Optional[Any]"
                ],
                "name": [
                    "str",
                    "bool"
                ],
                "this_bases": [
                    "bool",
                    "int",
                    "str",
                    "Sequence[str]",
                    "Optional[Any]"
                ],
                "d": [
                    "str",
                    "int",
                    "TextIO"
                ]
            }
        },
        "with_metaclass.metaclass.__prepare__": {
            "name": "__prepare__",
            "location": 875,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "int",
                    "Optional[Any]"
                ],
                "name": [
                    "str",
                    "bool"
                ],
                "this_bases": [
                    "bool",
                    "str",
                    "int",
                    "Optional[Any]"
                ]
            }
        },
        "X.__len__": {
            "name": "__len__",
            "location": 62,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pydsdl-master/pydsdl/third_party/parsimonious/exceptions.py": {
        "ParseError.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "int",
                    "str",
                    "Iterable[str]"
                ],
                "pos": [
                    "int",
                    "str",
                    "Iterable[str]"
                ],
                "expr": [
                    "int",
                    "str",
                    "None",
                    "Iterable[str]"
                ]
            }
        },
        "ParseError.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseError.line": {
            "name": "line",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseError.column": {
            "name": "column",
            "location": 37,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IncompleteParseError.__str__": {
            "name": "__str__",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VisitationError.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "Type",
                    "IO",
                    "bool"
                ],
                "exc_class": [
                    "int",
                    "str"
                ],
                "node": [
                    "Type",
                    "IO",
                    "bool"
                ]
            }
        },
        "UndefinedLabel.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "bool",
                    "List[List[Any]]",
                    "List[list[Any]]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "UndefinedLabel.__str__": {
            "name": "__str__",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pydsdl-master/pydsdl/third_party/parsimonious/expressions.py": {
        "expression": {
            "name": "expression",
            "location": 22,
            "return": [
                "bool",
                "AdHocExpression"
            ],
            "arguments": {
                "callable": [
                    "bool",
                    "str",
                    "List[Union[int,Any]]",
                    "Optional[str]",
                    "None"
                ],
                "rule_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "grammar": [
                    "bool",
                    "str",
                    "List[Union[int,Any]]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Expression.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Text",
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "Callable[[str],bool]",
                    "Union[str,List[str]]"
                ]
            }
        },
        "Expression.__hash__": {
            "name": "__hash__",
            "location": 103,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expression.__eq__": {
            "name": "__eq__",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[int,int,int]",
                    "Any",
                    "Tuple[Union[int,int,int]]"
                ]
            }
        },
        "Expression.__ne__": {
            "name": "__ne__",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Expression.parse": {
            "name": "parse",
            "location": 112,
            "return": [
                "int",
                "blib2to3.pytree.Node",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "pos": [
                    "str",
                    "int"
                ]
            }
        },
        "Expression.match": {
            "name": "match",
            "location": 125,
            "return": [
                "int",
                "blib2to3.pytree.Node",
                "Dict",
                "Tuple[Union[Any,Any]]",
                "List",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "pos": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "Expression.match_core": {
            "name": "match_core",
            "location": 140,
            "return": [
                "int",
                "Dict",
                "blib2to3.pytree.Node",
                "List[list[Any]]",
                "List"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "yaml.nodes.Node",
                    "int",
                    "Exception"
                ],
                "pos": [
                    "Type",
                    "None",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "Sequence[object]",
                    "raiden.utils.BlockNumber"
                ],
                "cache": [
                    "Dict",
                    "Type",
                    "Optional[Dict]",
                    "None",
                    "Optional[cmk.utils.type_defs.HostAddress]"
                ],
                "error": [
                    "Dict[str,mypy.nodes.MypyFile]",
                    "bool",
                    "float",
                    "str",
                    "None",
                    "Optional[gfg.trees.binary_tree_node.Node]",
                    "mypy.nodes.CallExpr"
                ]
            }
        },
        "Expression.__str__": {
            "name": "__str__",
            "location": 192,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expression.as_rule": {
            "name": "as_rule",
            "location": 197,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expression._unicode_members": {
            "name": "_unicode_members",
            "location": 209,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expression._as_rhs": {
            "name": "_as_rhs",
            "location": 215,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Literal.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "literal": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Dict",
                    "None"
                ],
                "name": [
                    "Text",
                    "str",
                    "bool"
                ]
            }
        },
        "Literal._uncached_match": {
            "name": "_uncached_match",
            "location": 237,
            "return": [
                "typing.Optional[parsimonious.nodes.Node]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "pos": [
                    "str"
                ],
                "cache": [
                    "Tuple[str]",
                    "Callable",
                    "None",
                    "List",
                    "Optional[Node]",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "error": [
                    "Tuple[str]",
                    "Callable",
                    "None",
                    "List",
                    "Optional[Node]",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]"
                ]
            }
        },
        "Literal._as_rhs": {
            "name": "_as_rhs",
            "location": 241,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenMatcher._uncached_match": {
            "name": "_uncached_match",
            "location": 252,
            "return": [
                "typing.Optional[parsimonious.nodes.Node]"
            ],
            "arguments": {
                "self": [],
                "token_list": [
                    "List[Any]",
                    "Dict[str,mypy.nodes.MypyFile]",
                    "Optional[List[Any]]",
                    "Callable"
                ],
                "pos": [
                    "Dict[str, mypy.nodes.MypyFile]",
                    "Optional[List[Any]]",
                    "Callable"
                ],
                "cache": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "Union[bool,Iterable[str]]",
                    "Iterator[Tuple[int,Any]]"
                ],
                "error": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "Union[bool,Iterable[str]]",
                    "Iterator[Tuple[int,Any]]"
                ]
            }
        },
        "Regex.__init__": {
            "name": "__init__",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str",
                    "bytes",
                    "qutebrowser.utils.urlmatch.UrlPattern"
                ],
                "name": [
                    "Text",
                    "str",
                    "Callable"
                ],
                "ignore_case": [
                    "bool",
                    "str",
                    "bytes",
                    "qutebrowser.utils.urlmatch.UrlPattern"
                ],
                "locale": [
                    "bool",
                    "str",
                    "bytes",
                    "qutebrowser.utils.urlmatch.UrlPattern"
                ],
                "multiline": [
                    "bool",
                    "str",
                    "bytes",
                    "qutebrowser.utils.urlmatch.UrlPattern"
                ],
                "dot_all": [
                    "bool",
                    "str",
                    "bytes",
                    "qutebrowser.utils.urlmatch.UrlPattern"
                ],
                "unicode": [
                    "bool",
                    "str",
                    "bytes",
                    "qutebrowser.utils.urlmatch.UrlPattern"
                ],
                "verbose": [
                    "bool",
                    "str",
                    "bytes",
                    "qutebrowser.utils.urlmatch.UrlPattern"
                ]
            }
        },
        "Regex._uncached_match": {
            "name": "_uncached_match",
            "location": 277,
            "return": [
                "parsimonious.nodes.RegexNode"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "pos": [
                    "str"
                ],
                "cache": [
                    "Tuple[str]",
                    "Callable",
                    "None",
                    "List",
                    "Optional[Node]",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "error": [
                    "Tuple[str]",
                    "Callable",
                    "None",
                    "List",
                    "Optional[Node]",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]"
                ]
            }
        },
        "Regex._regex_flags_from_bits": {
            "name": "_regex_flags_from_bits",
            "location": 286,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "bits": [
                    "List[int]",
                    "List[float]",
                    "str",
                    "List",
                    "bytearray"
                ]
            }
        },
        "Regex._as_rhs": {
            "name": "_as_rhs",
            "location": 291,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Compound.__init__": {
            "name": "__init__",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Compound.__hash__": {
            "name": "__hash__",
            "location": 307,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Compound.__eq__": {
            "name": "__eq__",
            "location": 313,
            "return": [
                "bool",
                "str",
                "mypy.nodes.FuncBase",
                "Type"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Sequence._uncached_match": {
            "name": "_uncached_match",
            "location": 328,
            "return": [
                "typing.Optional[parsimonious.nodes.Node]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Type",
                    "Optional[str]",
                    "None"
                ],
                "pos": [
                    "List[int]",
                    "bool",
                    "str",
                    "Union[Set[int],List[int],Dict[int,Any]]",
                    "Set[str]"
                ],
                "cache": [
                    "str",
                    "Dict[str,str]",
                    "Optional[utils.TypingInfo]",
                    "None"
                ],
                "error": [
                    "str",
                    "Dict[str,str]",
                    "Optional[utils.TypingInfo]",
                    "None"
                ]
            }
        },
        "Sequence._as_rhs": {
            "name": "_as_rhs",
            "location": 343,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneOf._uncached_match": {
            "name": "_uncached_match",
            "location": 354,
            "return": [
                "typing.Optional[parsimonious.nodes.Node]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "Optional[str]",
                    "None"
                ],
                "pos": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "Optional[str]",
                    "None"
                ],
                "cache": [
                    "str",
                    "int"
                ],
                "error": [
                    "str",
                    "int"
                ]
            }
        },
        "OneOf._as_rhs": {
            "name": "_as_rhs",
            "location": 361,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lookahead._uncached_match": {
            "name": "_uncached_match",
            "location": 373,
            "return": [
                "typing.Optional[parsimonious.nodes.Node]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "mypy.nodes.SymbolTableNode"
                ],
                "pos": [
                    "str",
                    "mypy.nodes.SymbolTableNode"
                ],
                "cache": [
                    "str",
                    "float",
                    "mypy.nodes.SymbolTableNode"
                ],
                "error": [
                    "str",
                    "float",
                    "mypy.nodes.SymbolTableNode"
                ]
            }
        },
        "Lookahead._as_rhs": {
            "name": "_as_rhs",
            "location": 378,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Not._uncached_match": {
            "name": "_uncached_match",
            "location": 388,
            "return": [
                "typing.Optional[parsimonious.nodes.Node]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "mypy.nodes.SymbolTableNode"
                ],
                "pos": [
                    "str",
                    "mypy.nodes.SymbolTableNode"
                ],
                "cache": [
                    "str",
                    "float",
                    "mypy.nodes.SymbolTableNode"
                ],
                "error": [
                    "str",
                    "float",
                    "mypy.nodes.SymbolTableNode"
                ]
            }
        },
        "Not._as_rhs": {
            "name": "_as_rhs",
            "location": 395,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Optional._uncached_match": {
            "name": "_uncached_match",
            "location": 410,
            "return": [
                "parsimonious.nodes.Node"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "mypy.nodes.SymbolTableNode",
                    "bool",
                    "Dict"
                ],
                "pos": [
                    "str",
                    "mypy.nodes.SymbolTableNode",
                    "bool",
                    "Dict"
                ],
                "cache": [
                    "str",
                    "float",
                    "mypy.nodes.SymbolTableNode"
                ],
                "error": [
                    "str",
                    "float",
                    "mypy.nodes.SymbolTableNode"
                ]
            }
        },
        "Optional._as_rhs": {
            "name": "_as_rhs",
            "location": 415,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZeroOrMore._uncached_match": {
            "name": "_uncached_match",
            "location": 423,
            "return": [
                "parsimonious.nodes.Node"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "int",
                    "bool",
                    "Node",
                    "docutils.nodes.document"
                ],
                "pos": [
                    "str",
                    "Iterable[Any]",
                    "None",
                    "Optional[str]",
                    "Union[str,pathpy.core.node.Node]",
                    "Optional[List[str]]"
                ],
                "cache": [
                    "str",
                    "gfg.bsbst_and_node.Node"
                ],
                "error": [
                    "str",
                    "gfg.bsbst_and_node.Node"
                ]
            }
        },
        "ZeroOrMore._as_rhs": {
            "name": "_as_rhs",
            "location": 434,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneOrMore.__init__": {
            "name": "__init__",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "Text",
                    "str",
                    "Optional[str]"
                ],
                "min": [
                    "int",
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "OneOrMore._uncached_match": {
            "name": "_uncached_match",
            "location": 454,
            "return": [
                "typing.Optional[parsimonious.nodes.Node]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "int",
                    "bool",
                    "Node",
                    "docutils.nodes.document"
                ],
                "pos": [
                    "str",
                    "Iterable[Any]",
                    "None",
                    "Optional[str]",
                    "Union[str,pathpy.core.node.Node]",
                    "Optional[List[str]]"
                ],
                "cache": [
                    "str",
                    "gfg.bsbst_and_node.Node"
                ],
                "error": [
                    "str",
                    "gfg.bsbst_and_node.Node"
                ]
            }
        },
        "OneOrMore._as_rhs": {
            "name": "_as_rhs",
            "location": 469,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "expression.AdHocExpression._uncached_match": {
            "name": "_uncached_match",
            "location": 70,
            "return": [
                "Node",
                "str",
                "Type[Any]",
                "Type",
                "Sequence[Tuple[float,Any]]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "int",
                    "type",
                    "dict",
                    "Optional[str]"
                ],
                "pos": [
                    "int",
                    "type",
                    "dict",
                    "Optional[str]"
                ],
                "cache": [
                    "str",
                    "Type",
                    "Optional[str]",
                    "int"
                ],
                "error": [
                    "str",
                    "Type",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "expression.AdHocExpression._as_rhs": {
            "name": "_as_rhs",
            "location": 83,
            "return": [
                "Text",
                "Tuple",
                "mypy.nodes.ClassDef",
                "List",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pydsdl-master/pydsdl/third_party/parsimonious/grammar.py": {
        "Grammar.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "Text",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Grammar.default": {
            "name": "default",
            "location": 73,
            "return": [
                "str",
                "int",
                "Iterable[str]",
                "Sequence[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "rule_name": [
                    "bool",
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "Iterator[bytes]",
                    "Optional[str]"
                ]
            }
        },
        "Grammar._copy": {
            "name": "_copy",
            "location": 79,
            "return": [
                "Grammar"
            ],
            "arguments": {
                "self": [
                    "_TGrammar@@Grammar@@"
                ]
            }
        },
        "Grammar._expressions_from_rules": {
            "name": "_expressions_from_rules",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "str",
                    "int",
                    "bytes"
                ],
                "custom_rules": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Grammar.parse": {
            "name": "parse",
            "location": 108,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "pos": [
                    "str",
                    "int"
                ]
            }
        },
        "Grammar.match": {
            "name": "match",
            "location": 117,
            "return": [
                "str",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Optional[Callable[[Any,Any],None]]",
                    "Callable[Any,Any,None]",
                    "None"
                ],
                "pos": [
                    "int",
                    "str",
                    "Optional[Callable[[Any,Any],None]]"
                ]
            }
        },
        "Grammar._check_default_rule": {
            "name": "_check_default_rule",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grammar.__str__": {
            "name": "__str__",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grammar.__repr__": {
            "name": "__repr__",
            "location": 142,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenGrammar._expressions_from_rules": {
            "name": "_expressions_from_rules",
            "location": 155,
            "return": [
                "str",
                "Optional[float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "str",
                    "int",
                    "bytes"
                ],
                "custom_rules": [
                    "str",
                    "bool",
                    "Dict[str,Union[str,Set]]",
                    "Dict[str,Union[str,set]]",
                    "Optional[Dict[str,Any]]",
                    "None"
                ]
            }
        },
        "BootstrappingGrammar._expressions_from_rules": {
            "name": "_expressions_from_rules",
            "location": 169,
            "return": [
                "str",
                "bool",
                "Type"
            ],
            "arguments": {
                "self": [],
                "rule_syntax": [
                    "str",
                    "Dict",
                    "Optional[Dict]",
                    "None"
                ],
                "custom_rules": [
                    "str",
                    "List[str]",
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        },
        "LazyReference._as_rhs": {
            "name": "_as_rhs",
            "location": 270,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuleVisitor.__init__": {
            "name": "__init__",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "custom_rules": [
                    "str",
                    "int",
                    "None",
                    "float"
                ]
            }
        },
        "RuleVisitor.visit_parenthesized": {
            "name": "visit_parenthesized",
            "location": 295,
            "return": [
                "mypy.nodes.WithStmt"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.EllipsisExpr",
                    "mypy.nodes.BreakStmt",
                    "mypy.nodes.ContinueStmt"
                ],
                "parenthesized": [
                    "mypy.nodes.FuncDef",
                    "mypy.nodes.WithStmt",
                    "mypy.nodes.TryStmt"
                ]
            }
        },
        "RuleVisitor.visit_quantifier": {
            "name": "visit_quantifier",
            "location": 304,
            "return": [
                "mypy.nodes.OperatorAssignmentStmt",
                "str",
                "mypy.nodes.Lvalue",
                "mypy.nodes.Import"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.EllipsisExpr",
                    "mypy.nodes.BreakStmt",
                    "mypy.nodes.ContinueStmt"
                ],
                "quantifier": [
                    "mypy.nodes.ImportAll"
                ]
            }
        },
        "RuleVisitor.visit_quantified": {
            "name": "visit_quantified",
            "location": 309,
            "return": [
                "Union[(parsimonious.expressions.OneOrMore, parsimonious.expressions.Optional, parsimonious.expressions.ZeroOrMore)]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.EllipsisExpr",
                    "mypy.nodes.BreakStmt",
                    "mypy.nodes.ContinueStmt"
                ],
                "quantified": [
                    "Sequence[Any]",
                    "parsimonious.nodes.Node"
                ]
            }
        },
        "RuleVisitor.visit_lookahead_term": {
            "name": "visit_lookahead_term",
            "location": 313,
            "return": [
                "parsimonious.expressions.Lookahead"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.EllipsisExpr",
                    "mypy.nodes.BreakStmt",
                    "mypy.nodes.ContinueStmt"
                ],
                "lookahead_term": [
                    "mypy.nodes.AssignmentStmt",
                    "mypy.nodes.ImporAll",
                    "mypy.nodes.ImportAll"
                ]
            }
        },
        "RuleVisitor.visit_not_term": {
            "name": "visit_not_term",
            "location": 317,
            "return": [
                "parsimonious.expressions.Not"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.EllipsisExpr",
                    "mypy.nodes.BreakStmt",
                    "mypy.nodes.ContinueStmt"
                ],
                "not_term": [
                    "mypy.nodes.AssignmentStmt",
                    "mypy.nodes.ImporAll",
                    "mypy.nodes.ImportAll"
                ]
            }
        },
        "RuleVisitor.visit_rule": {
            "name": "visit_rule",
            "location": 321,
            "return": [
                "mypy.nodes.WithStmt"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.EllipsisExpr",
                    "mypy.nodes.BreakStmt",
                    "mypy.nodes.ContinueStmt"
                ],
                "rule": [
                    "mypy.nodes.Decorator"
                ]
            }
        },
        "RuleVisitor.visit_sequence": {
            "name": "visit_sequence",
            "location": 327,
            "return": [
                "parsimonious.expressions.Sequence"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.EllipsisExpr",
                    "mypy.nodes.BreakStmt",
                    "mypy.nodes.ContinueStmt"
                ],
                "sequence": [
                    "Sequence[Any]",
                    "parsimonious.nodes.Node"
                ]
            }
        },
        "RuleVisitor.visit_ored": {
            "name": "visit_ored",
            "location": 333,
            "return": [
                "parsimonious.expressions.OneOf"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.EllipsisExpr",
                    "mypy.nodes.BreakStmt",
                    "mypy.nodes.ContinueStmt"
                ],
                "ored": [
                    "Sequence[Any]",
                    "parsimonious.nodes.Node"
                ]
            }
        },
        "RuleVisitor.visit_or_term": {
            "name": "visit_or_term",
            "location": 337,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.EllipsisExpr",
                    "mypy.nodes.BreakStmt",
                    "mypy.nodes.ContinueStmt"
                ],
                "or_term": [
                    "mypy.nodes.AssignmentStmt",
                    "mypy.nodes.ImporAll",
                    "mypy.nodes.ImportAll"
                ]
            }
        },
        "RuleVisitor.visit_label": {
            "name": "visit_label",
            "location": 346,
            "return": [
                "mypy.nodes.Var",
                "mypy.nodes.ClassDef",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "Callable[...,T]",
                    "Type[Any]",
                    "Type",
                    "List[mypy.nodes.Lvalue]",
                    "List[L]"
                ],
                "label": [
                    "bool",
                    "mypy.nodes.Expression"
                ]
            }
        },
        "RuleVisitor.visit_reference": {
            "name": "visit_reference",
            "location": 351,
            "return": [
                "LazyReference"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "reference": [
                    "Sequence[Any]",
                    "mypy.nodes.Block",
                    "parsimonious.nodes.Node"
                ]
            }
        },
        "RuleVisitor.visit_regex": {
            "name": "visit_regex",
            "location": 360,
            "return": [
                "parsimonious.expressions.Regex"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.EllipsisExpr",
                    "mypy.nodes.BreakStmt",
                    "mypy.nodes.ContinueStmt"
                ],
                "regex": [
                    "mypy.nodes.Context"
                ]
            }
        },
        "RuleVisitor.visit_spaceless_literal": {
            "name": "visit_spaceless_literal",
            "location": 373,
            "return": [
                "parsimonious.expressions.Literal"
            ],
            "arguments": {
                "self": [],
                "spaceless_literal": [
                    "mypy.nodes.NameExpr",
                    "mypy.nodes.ImportFrom",
                    "mypy.nodes.ClassDef"
                ],
                "visited_children": []
            }
        },
        "RuleVisitor.visit_literal": {
            "name": "visit_literal",
            "location": 377,
            "return": [
                "mypy.nodes.EllipsisExpr"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.EllipsisExpr",
                    "mypy.nodes.BreakStmt",
                    "mypy.nodes.ContinueStmt"
                ],
                "literal": [
                    "mypy.nodes.EllipsisExpr",
                    "mypy.nodes.Expression",
                    "mypy.nodes.RaiseStmt"
                ]
            }
        },
        "RuleVisitor.generic_visit": {
            "name": "generic_visit",
            "location": 382,
            "return": [
                "Union[(_T0, _T1)]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[Any]",
                    "parsimonious.nodes.Node"
                ],
                "visited_children": [
                    "Sequence[Any]",
                    "parsimonious.nodes.Node"
                ]
            }
        },
        "RuleVisitor._resolve_refs": {
            "name": "_resolve_refs",
            "location": 398,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "rule_map": [
                    "List[mypy.nodes.Expression]",
                    "List",
                    "bool"
                ],
                "expr": [
                    "bool",
                    "str"
                ],
                "done": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "RuleVisitor.visit_rules": {
            "name": "visit_rules",
            "location": 427,
            "return": [
                "Tuple[(collections.OrderedDict, Any)]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "str"
                ],
                "rules_list": [
                    "List[Tuple[int,Any]]",
                    "str",
                    "List[tuple[Union[int,Any]]]",
                    "List[Callable[,None]]"
                ]
            }
        },
        "TokenRuleVisitor.visit_spaceless_literal": {
            "name": "visit_spaceless_literal",
            "location": 466,
            "return": [
                "parsimonious.expressions.TokenMatcher"
            ],
            "arguments": {
                "self": [],
                "spaceless_literal": [
                    "mypy.nodes.NameExpr",
                    "mypy.nodes.Context"
                ],
                "visited_children": []
            }
        },
        "TokenRuleVisitor.visit_regex": {
            "name": "visit_regex",
            "location": 471,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.EllipsisExpr",
                    "mypy.nodes.BreakStmt",
                    "mypy.nodes.ContinueStmt"
                ],
                "regex": [
                    "mypy.nodes.Context"
                ]
            }
        }
    },
    "pydsdl-master/pydsdl/third_party/parsimonious/nodes.py": {
        "rule": {
            "name": "rule",
            "location": 292,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "rule_string": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "int",
                    "str"
                ],
                "full_text": [
                    "int"
                ],
                "start": [
                    "int",
                    "str"
                ],
                "end": [
                    "int",
                    "str"
                ],
                "children": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "Node.expr_name": {
            "name": "expr_name",
            "location": 52,
            "return": [
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__iter__": {
            "name": "__iter__",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.text": {
            "name": "text",
            "location": 66,
            "return": [
                "Callable[[Union, Union], Tuple[Any, ...],]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.prettily": {
            "name": "prettily",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "Type",
                    "None",
                    "List[str]",
                    "MutableMapping[str,str]",
                    "Dict[str,Any]",
                    "Dict",
                    "MutableMapping"
                ]
            }
        },
        "Node.__str__": {
            "name": "__str__",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__eq__": {
            "name": "__eq__",
            "location": 95,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Node.__ne__": {
            "name": "__ne__",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "top_level": [
                    "Iterable[Any]",
                    "bool"
                ]
            }
        },
        "RuleDecoratorMeta.__new__": {
            "name": "__new__",
            "location": 137,
            "return": [
                "bool",
                "str",
                "float",
                "bytes",
                "Optional[int]"
            ],
            "arguments": {
                "metaclass": [
                    "Type[RuleDecoratorMeta]"
                ],
                "name": [
                    "str",
                    "bool",
                    "Union[str,Pattern]",
                    "Pattern"
                ],
                "bases": [
                    "str"
                ],
                "namespace": [
                    "str",
                    "dict",
                    "Container[str]"
                ]
            }
        },
        "NodeVisitor.visit": {
            "name": "visit",
            "location": 198,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "parsimonious.nodes.Node"
                ]
            }
        },
        "NodeVisitor.generic_visit": {
            "name": "generic_visit",
            "location": 229,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ],
                "visited_children": [
                    "List[None]"
                ]
            }
        },
        "NodeVisitor.parse": {
            "name": "parse",
            "location": 246,
            "return": [
                "Dict[str, int]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "pos": [
                    "str",
                    "int"
                ]
            }
        },
        "NodeVisitor.match": {
            "name": "match",
            "location": 256,
            "return": [
                "int",
                "Dict[str, int]",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bool"
                ],
                "pos": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "NodeVisitor.lift_child": {
            "name": "lift_child",
            "location": 268,
            "return": [
                "int",
                "Callable",
                "str",
                "Dict",
                "List[int]",
                "List[list[int]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]"
                ],
                "children": [
                    "int"
                ]
            }
        },
        "NodeVisitor._parse_or_match": {
            "name": "_parse_or_match",
            "location": 275,
            "return": [
                "type",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "pos": [
                    "str"
                ],
                "method_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "rule.decorator": {
            "name": "decorator",
            "location": 324,
            "return": [
                "str",
                "Optional[str]",
                "Callable[[str], T]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "method": [
                    "str",
                    "list",
                    "int"
                ]
            }
        },
        "Node.prettily.indent": {
            "name": "indent",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "RuleDecoratorMeta.__new__.unvisit": {
            "name": "unvisit",
            "location": 138,
            "return": [
                "Dict[str, Union[str, Any]]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Set[str]"
                ]
            }
        }
    },
    "pydsdl-master/pydsdl/third_party/parsimonious/utils.py": {
        "evaluate_string": {
            "name": "evaluate_string",
            "location": 15,
            "return": [
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "StrAndRepr.__repr__": {
            "name": "__repr__",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str",
                    "int"
                ]
            }
        },
        "Token.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__eq__": {
            "name": "__eq__",
            "location": 42,
            "return": [
                "bool",
                "Type",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Type",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        }
    },
    "pydsdl-master/pydsdl/third_party/parsimonious/__init__.py": {},
    "pydsdl-master/pydsdl/_bit_length_set/_bit_length_set.py": {
        "_unittest_bit_length_set": {
            "name": "_unittest_bit_length_set",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BitLengthSet.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Iterable[T]",
                    "int",
                    "float",
                    "T"
                ]
            }
        },
        "BitLengthSet.is_aligned_at": {
            "name": "is_aligned_at",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "bit_length": [
                    "int",
                    "str"
                ]
            }
        },
        "BitLengthSet.is_aligned_at_byte": {
            "name": "is_aligned_at_byte",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitLengthSet.min": {
            "name": "min",
            "location": 82,
            "return": [
                "dict",
                "Iterable[str]",
                "Tuple[type]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitLengthSet.max": {
            "name": "max",
            "location": 92,
            "return": [
                "dict",
                "Iterable[str]",
                "Tuple[type]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitLengthSet.fixed_length": {
            "name": "fixed_length",
            "location": 102,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitLengthSet.__mod__": {
            "name": "__mod__",
            "location": 113,
            "return": [
                "BitLengthSet"
            ],
            "arguments": {
                "self": [
                    "_TBitLengthSet@@BitLengthSet@@"
                ],
                "divisor": [
                    "str",
                    "int"
                ]
            }
        },
        "BitLengthSet.pad_to_alignment": {
            "name": "pad_to_alignment",
            "location": 127,
            "return": [
                "BitLengthSet"
            ],
            "arguments": {
                "self": [
                    "_TBitLengthSet@@BitLengthSet@@"
                ],
                "bit_length": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "BitLengthSet.repeat": {
            "name": "repeat",
            "location": 142,
            "return": [
                "BitLengthSet"
            ],
            "arguments": {
                "self": [
                    "_TBitLengthSet@@BitLengthSet@@"
                ],
                "k": [
                    "bool",
                    "int"
                ]
            }
        },
        "BitLengthSet.repeat_range": {
            "name": "repeat_range",
            "location": 161,
            "return": [
                "BitLengthSet"
            ],
            "arguments": {
                "self": [
                    "_TBitLengthSet@@BitLengthSet@@"
                ],
                "k_max": [
                    "str",
                    "Type[Set[Any]]",
                    "Type"
                ]
            }
        },
        "BitLengthSet.concatenate": {
            "name": "concatenate",
            "location": 173,
            "return": [
                "BitLengthSet"
            ],
            "arguments": {
                "sets": [
                    "Set[T]"
                ]
            }
        },
        "BitLengthSet.unite": {
            "name": "unite",
            "location": 193,
            "return": [
                "BitLengthSet"
            ],
            "arguments": {
                "sets": [
                    "Set[T]"
                ]
            }
        },
        "BitLengthSet.__add__": {
            "name": "__add__",
            "location": 208,
            "return": [
                "BitLengthSet"
            ],
            "arguments": {
                "self": [
                    "_TBitLengthSet@@BitLengthSet@@"
                ],
                "other": [
                    "AbstractSet",
                    "bool",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "BitLengthSet.__radd__": {
            "name": "__radd__",
            "location": 225,
            "return": [
                "BitLengthSet"
            ],
            "arguments": {
                "self": [
                    "_TBitLengthSet@@BitLengthSet@@"
                ],
                "other": [
                    "AbstractSet[T]",
                    "AbstractSet"
                ]
            }
        },
        "BitLengthSet.__or__": {
            "name": "__or__",
            "location": 236,
            "return": [
                "BitLengthSet"
            ],
            "arguments": {
                "self": [
                    "_TBitLengthSet@@BitLengthSet@@"
                ],
                "other": [
                    "AbstractSet[T]",
                    "AbstractSet"
                ]
            }
        },
        "BitLengthSet.__ror__": {
            "name": "__ror__",
            "location": 252,
            "return": [
                "BitLengthSet"
            ],
            "arguments": {
                "self": [
                    "_TBitLengthSet@@BitLengthSet@@"
                ],
                "other": [
                    "AbstractSet[T]",
                    "AbstractSet"
                ]
            }
        },
        "BitLengthSet.__iter__": {
            "name": "__iter__",
            "location": 265,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitLengthSet.__len__": {
            "name": "__len__",
            "location": 276,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitLengthSet.__eq__": {
            "name": "__eq__",
            "location": 294,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet",
                    "AbstractSet[T]",
                    "Set[VT]",
                    "int",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "BitLengthSet.__hash__": {
            "name": "__hash__",
            "location": 315,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitLengthSet.__bool__": {
            "name": "__bool__",
            "location": 324,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitLengthSet.__str__": {
            "name": "__str__",
            "location": 333,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitLengthSet.__repr__": {
            "name": "__repr__",
            "location": 336,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitLengthSet.elementwise_sum_k_multicombinations": {
            "name": "elementwise_sum_k_multicombinations",
            "location": 341,
            "return": [
                "BitLengthSet"
            ],
            "arguments": {
                "self": [
                    "_TBitLengthSet@@BitLengthSet@@"
                ],
                "k": [
                    "int"
                ]
            }
        },
        "BitLengthSet.elementwise_sum_cartesian_product": {
            "name": "elementwise_sum_cartesian_product",
            "location": 349,
            "return": [
                "BitLengthSet"
            ],
            "arguments": {
                "sets": [
                    "int",
                    "Iterable[T]"
                ]
            }
        }
    },
    "pydsdl-master/pydsdl/_bit_length_set/_symbolic.py": {
        "least_common_multiple": {
            "name": "least_common_multiple",
            "location": 330,
            "return": [
                "int",
                "str",
                "bytearray",
                "Union[bytes,bytearray]",
                "bytes"
            ],
            "arguments": {
                "a": [
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "validate_numerically": {
            "name": "validate_numerically",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "op": [
                    "eth.abc.ComputationAPI",
                    "Iterable[T]"
                ]
            }
        },
        "Operator.modulo": {
            "name": "modulo",
            "location": 19,
            "return": [
                "Set[int]",
                "None"
            ],
            "arguments": {
                "self": [],
                "divisor": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Operator.min": {
            "name": "min",
            "location": 24,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operator.max": {
            "name": "max",
            "location": 29,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operator.expand": {
            "name": "expand",
            "location": 33,
            "return": [
                "Set[int]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operator.__repr__": {
            "name": "__repr__",
            "location": 42,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullaryOperator.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "str",
                    "bytes",
                    "float",
                    "Union[str,bytes]",
                    "bool"
                ]
            }
        },
        "NullaryOperator.modulo": {
            "name": "modulo",
            "location": 59,
            "return": [
                "Set[nothing]"
            ],
            "arguments": {
                "self": [],
                "divisor": [
                    "List[tuple[Union[int,int]]]",
                    "List[dict]",
                    "List[Tuple[int,int]]",
                    "List",
                    "List[tuple[Union[Any,Any]]]",
                    "float",
                    "List[Tuple[Any,Any]]",
                    "List[tuple]",
                    "List[Tuple[int,Any]]",
                    "Iterable[int]"
                ]
            }
        },
        "NullaryOperator.min": {
            "name": "min",
            "location": 63,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullaryOperator.max": {
            "name": "max",
            "location": 67,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullaryOperator.expand": {
            "name": "expand",
            "location": 70,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullaryOperator.__repr__": {
            "name": "__repr__",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PaddingOperator.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "int",
                    "float",
                    "bool"
                ],
                "alignment": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "PaddingOperator.modulo": {
            "name": "modulo",
            "location": 88,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "divisor": [
                    "Tuple",
                    "List"
                ]
            }
        },
        "PaddingOperator.min": {
            "name": "min",
            "location": 99,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PaddingOperator.max": {
            "name": "max",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PaddingOperator.expand": {
            "name": "expand",
            "location": 106,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "PaddingOperator._pad": {
            "name": "_pad",
            "location": 109,
            "return": [
                "str",
                "type",
                "Mapping[Any, Any]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "List[int]",
                    "float",
                    "bytes",
                    "Dict"
                ]
            }
        },
        "PaddingOperator.__repr__": {
            "name": "__repr__",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConcatenationOperator.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "str",
                    "bool",
                    "List[tuple]",
                    "List[str]",
                    "int",
                    "List[Tuple]",
                    "Iterable[T]",
                    "Union[List[str],str]"
                ]
            }
        },
        "ConcatenationOperator.modulo": {
            "name": "modulo",
            "location": 128,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "divisor": [
                    "int",
                    "BinaryIO",
                    "List[bool]",
                    "bytearray",
                    "Sequence[int]"
                ]
            }
        },
        "ConcatenationOperator.min": {
            "name": "min",
            "location": 138,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConcatenationOperator.max": {
            "name": "max",
            "location": 142,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConcatenationOperator.expand": {
            "name": "expand",
            "location": 145,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConcatenationOperator.__repr__": {
            "name": "__repr__",
            "location": 148,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RepetitionOperator.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "int",
                    "bool"
                ],
                "k": [
                    "int",
                    "str"
                ]
            }
        },
        "RepetitionOperator.modulo": {
            "name": "modulo",
            "location": 162,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "divisor": [
                    "bool",
                    "float",
                    "List"
                ]
            }
        },
        "RepetitionOperator.min": {
            "name": "min",
            "location": 179,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RepetitionOperator.max": {
            "name": "max",
            "location": 183,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RepetitionOperator.expand": {
            "name": "expand",
            "location": 186,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "RepetitionOperator.__repr__": {
            "name": "__repr__",
            "location": 189,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeRepetitionOperator.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "int",
                    "bool"
                ],
                "k_max": [
                    "int"
                ]
            }
        },
        "RangeRepetitionOperator.modulo": {
            "name": "modulo",
            "location": 203,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "divisor": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "RangeRepetitionOperator.min": {
            "name": "min",
            "location": 217,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeRepetitionOperator.max": {
            "name": "max",
            "location": 221,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeRepetitionOperator.expand": {
            "name": "expand",
            "location": 224,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeRepetitionOperator.__repr__": {
            "name": "__repr__",
            "location": 233,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnionOperator.__init__": {
            "name": "__init__",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "str",
                    "bool",
                    "List[tuple]",
                    "List[str]",
                    "int",
                    "List[Tuple]",
                    "Iterable[T]",
                    "Union[List[str],str]"
                ]
            }
        },
        "UnionOperator.modulo": {
            "name": "modulo",
            "location": 243,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "divisor": [
                    "int",
                    "str",
                    "float",
                    "Tuple[int,int,int,int]",
                    "Tuple[Union[int,int,int,int]]",
                    "Sequence[Tuple[float,float]]",
                    "Sequence[tuple[Union[float,float]]]"
                ]
            }
        },
        "UnionOperator.min": {
            "name": "min",
            "location": 250,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnionOperator.max": {
            "name": "max",
            "location": 254,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnionOperator.expand": {
            "name": "expand",
            "location": 257,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnionOperator.__repr__": {
            "name": "__repr__",
            "location": 263,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoizationOperator.__init__": {
            "name": "__init__",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MemoizationOperator.modulo": {
            "name": "modulo",
            "location": 280,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "divisor": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MemoizationOperator.min": {
            "name": "min",
            "location": 288,
            "return": [
                "int",
                "Literal",
                "Callable",
                "str",
                "Dict[str,Type]",
                "Dict[str,str]",
                "Set",
                "Dict[str,int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoizationOperator.max": {
            "name": "max",
            "location": 294,
            "return": [
                "int",
                "Literal",
                "Callable",
                "str",
                "Dict[str,Type]",
                "Dict[str,str]",
                "Set",
                "Dict[str,int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoizationOperator.expand": {
            "name": "expand",
            "location": 299,
            "return": [
                "int",
                "Callable",
                "List[Book]",
                "str",
                "List[P]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoizationOperator.__repr__": {
            "name": "__repr__",
            "location": 326,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pydsdl-master/pydsdl/_bit_length_set/_symbolic_test.py": {
        "_unittest_nullary": {
            "name": "_unittest_nullary",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_unittest_padding": {
            "name": "_unittest_padding",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_unittest_concatenation": {
            "name": "_unittest_concatenation",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_unittest_repetition": {
            "name": "_unittest_repetition",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_unittest_range_repetition": {
            "name": "_unittest_range_repetition",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_unittest_union": {
            "name": "_unittest_union",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_unittest_repr": {
            "name": "_unittest_repr",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pydsdl-master/pydsdl/_bit_length_set/__init__.py": {},
    "pydsdl-master/pydsdl/_expression/_any.py": {
        "UndefinedOperatorError.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UndefinedAttributeError.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Any.__hash__": {
            "name": "__hash__",
            "location": 44,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": [
                    "_TAny@@Any@@"
                ]
            }
        },
        "Any.__eq__": {
            "name": "__eq__",
            "location": 48,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [
                    "_TAny@@Any@@"
                ],
                "other": [
                    "List[str]",
                    "SupportsFloat",
                    "int",
                    "Union[int,float]",
                    "float",
                    "AbstractSet[T]",
                    "AbstractSet"
                ]
            }
        },
        "Any.__str__": {
            "name": "__str__",
            "location": 52,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [
                    "_TAny@@Any@@"
                ]
            }
        },
        "Any.__repr__": {
            "name": "__repr__",
            "location": 56,
            "return": [
                "int",
                "str",
                "tuple",
                "Callable[..., Awaitable]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [
                    "_TAny@@Any@@"
                ]
            }
        },
        "Any._logical_not": {
            "name": "_logical_not",
            "location": 60,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Any._positive": {
            "name": "_positive",
            "location": 63,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Any._negative": {
            "name": "_negative",
            "location": 66,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Any._logical_or": {
            "name": "_logical_or",
            "location": 73,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Any._logical_and": {
            "name": "_logical_and",
            "location": 74,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Any._equal": {
            "name": "_equal",
            "location": 76,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Any._less_or_equal": {
            "name": "_less_or_equal",
            "location": 77,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Any._greater_or_equal": {
            "name": "_greater_or_equal",
            "location": 78,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Any._less": {
            "name": "_less",
            "location": 79,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Any._greater": {
            "name": "_greater",
            "location": 80,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Any._bitwise_or": {
            "name": "_bitwise_or",
            "location": 82,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Any._bitwise_or_right": {
            "name": "_bitwise_or_right",
            "location": 83,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Any._bitwise_xor": {
            "name": "_bitwise_xor",
            "location": 85,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Any._bitwise_xor_right": {
            "name": "_bitwise_xor_right",
            "location": 86,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Any._bitwise_and": {
            "name": "_bitwise_and",
            "location": 88,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Any._bitwise_and_right": {
            "name": "_bitwise_and_right",
            "location": 89,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Any._add": {
            "name": "_add",
            "location": 91,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "Any._add_right": {
            "name": "_add_right",
            "location": 92,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "Any._subtract": {
            "name": "_subtract",
            "location": 94,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Any._subtract_right": {
            "name": "_subtract_right",
            "location": 95,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Any._multiply": {
            "name": "_multiply",
            "location": 97,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Any._multiply_right": {
            "name": "_multiply_right",
            "location": 98,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Any._divide": {
            "name": "_divide",
            "location": 100,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Any._divide_right": {
            "name": "_divide_right",
            "location": 101,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Any._modulo": {
            "name": "_modulo",
            "location": 103,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Any._modulo_right": {
            "name": "_modulo_right",
            "location": 104,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Any._power": {
            "name": "_power",
            "location": 106,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Any._power_right": {
            "name": "_power_right",
            "location": 107,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Any._attribute": {
            "name": "_attribute",
            "location": 113,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        }
    },
    "pydsdl-master/pydsdl/_expression/_container.py": {
        "Container.element_type": {
            "name": "element_type",
            "location": 20,
            "return": [
                "typing.Type[_any.Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Container.__iter__": {
            "name": "__iter__",
            "location": 24,
            "return": [
                "typing.Iterator[typing.Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Set.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elements": [
                    "Callable",
                    "List[str]",
                    "Iterable[str]",
                    "Optional[str]",
                    "tuple"
                ]
            }
        },
        "Set.__iter__": {
            "name": "__iter__",
            "location": 70,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Set.element_type": {
            "name": "element_type",
            "location": 74,
            "return": [
                "int",
                "Tuple[Type]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Set.__hash__": {
            "name": "__hash__",
            "location": 77,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Set.__eq__": {
            "name": "__eq__",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet[T]",
                    "AbstractSet[Any]",
                    "List[T]",
                    "Iterable[Any]"
                ]
            }
        },
        "Set.__str__": {
            "name": "__str__",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Set._is_equal_to": {
            "name": "_is_equal_to",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "str",
                    "List[int]",
                    "dict",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Set._is_superset_of": {
            "name": "_is_superset_of",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "Optional[Dict[str, Any]]",
                    "Match"
                ]
            }
        },
        "Set._is_subset_of": {
            "name": "_is_subset_of",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "Optional[Dict[str, Any]]",
                    "Match"
                ]
            }
        },
        "Set._is_proper_superset_of": {
            "name": "_is_proper_superset_of",
            "location": 104,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "str",
                    "bool",
                    "Iterator",
                    "int"
                ]
            }
        },
        "Set._is_proper_subset_of": {
            "name": "_is_proper_subset_of",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "str",
                    "bool",
                    "Iterator",
                    "int"
                ]
            }
        },
        "Set._create_union_with": {
            "name": "_create_union_with",
            "location": 112,
            "return": [
                "Set"
            ],
            "arguments": {
                "self": [
                    "_TSet@@Set@@"
                ],
                "right": [
                    "Dict[str, Any]",
                    "Optional[List[dict]]",
                    "bool",
                    "Dict[int, Dict[int, Any]]"
                ]
            }
        },
        "Set._create_intersection_with": {
            "name": "_create_intersection_with",
            "location": 116,
            "return": [
                "Set"
            ],
            "arguments": {
                "self": [
                    "_TSet@@Set@@"
                ],
                "right": [
                    "str",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Set._create_disjunctive_union_with": {
            "name": "_create_disjunctive_union_with",
            "location": 120,
            "return": [
                "Set"
            ],
            "arguments": {
                "self": [
                    "_TSet@@Set@@"
                ],
                "right": [
                    "Type",
                    "dict"
                ]
            }
        },
        "Set._equal": {
            "name": "_equal",
            "location": 126,
            "return": [
                "_primitive.Boolean"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "List[int]",
                    "list",
                    "str",
                    "float"
                ]
            }
        },
        "Set._less_or_equal": {
            "name": "_less_or_equal",
            "location": 131,
            "return": [
                "_primitive.Boolean"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "List[int]",
                    "list",
                    "str",
                    "float"
                ]
            }
        },
        "Set._greater_or_equal": {
            "name": "_greater_or_equal",
            "location": 136,
            "return": [
                "_primitive.Boolean"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "List[int]",
                    "list",
                    "str",
                    "float"
                ]
            }
        },
        "Set._less": {
            "name": "_less",
            "location": 141,
            "return": [
                "_primitive.Boolean"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "List[int]",
                    "list",
                    "str",
                    "float"
                ]
            }
        },
        "Set._greater": {
            "name": "_greater",
            "location": 146,
            "return": [
                "_primitive.Boolean"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "List[int]",
                    "list",
                    "str",
                    "float"
                ]
            }
        },
        "Set._bitwise_or": {
            "name": "_bitwise_or",
            "location": 154,
            "return": [
                "Tuple[int, int]",
                "str",
                "int",
                "T"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "Optional[Union[str, Any]]",
                    "Union[tuple, list]",
                    "str",
                    "int"
                ]
            }
        },
        "Set._bitwise_xor": {
            "name": "_bitwise_xor",
            "location": 159,
            "return": [
                "Tuple[int, int]",
                "str",
                "int",
                "T"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "Optional[Union[str, Any]]",
                    "Union[tuple, list]",
                    "str",
                    "int"
                ]
            }
        },
        "Set._bitwise_and": {
            "name": "_bitwise_and",
            "location": 164,
            "return": [
                "Tuple[int, int]",
                "str",
                "int",
                "T"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "Optional[Union[str, Any]]",
                    "Union[tuple, list]",
                    "str",
                    "int"
                ]
            }
        },
        "Set._elementwise": {
            "name": "_elementwise",
            "location": 173,
            "return": [
                "Set"
            ],
            "arguments": {
                "self": [
                    "_TSet@@Set@@"
                ],
                "impl": [
                    "bool"
                ],
                "other": [
                    "Set[VT]",
                    "dict",
                    "Callable"
                ],
                "swap": [
                    "bool"
                ]
            }
        },
        "Set._add": {
            "name": "_add",
            "location": 180,
            "return": [
                "Set"
            ],
            "arguments": {
                "self": [
                    "_TSet@@Set@@"
                ],
                "right": [
                    "str",
                    "int",
                    "VT"
                ]
            }
        },
        "Set._add_right": {
            "name": "_add_right",
            "location": 183,
            "return": [
                "Set"
            ],
            "arguments": {
                "self": [
                    "_TSet@@Set@@"
                ],
                "left": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "Set._subtract": {
            "name": "_subtract",
            "location": 186,
            "return": [
                "Set"
            ],
            "arguments": {
                "self": [
                    "_TSet@@Set@@"
                ],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Set._subtract_right": {
            "name": "_subtract_right",
            "location": 189,
            "return": [
                "Set"
            ],
            "arguments": {
                "self": [
                    "_TSet@@Set@@"
                ],
                "left": [
                    "Optional[int]",
                    "Callable",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Set._multiply": {
            "name": "_multiply",
            "location": 192,
            "return": [
                "Set"
            ],
            "arguments": {
                "self": [
                    "_TSet@@Set@@"
                ],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Set._multiply_right": {
            "name": "_multiply_right",
            "location": 195,
            "return": [
                "Set"
            ],
            "arguments": {
                "self": [
                    "_TSet@@Set@@"
                ],
                "left": [
                    "Optional[int]",
                    "Callable",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Set._divide": {
            "name": "_divide",
            "location": 198,
            "return": [
                "Set"
            ],
            "arguments": {
                "self": [
                    "_TSet@@Set@@"
                ],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Set._divide_right": {
            "name": "_divide_right",
            "location": 201,
            "return": [
                "Set"
            ],
            "arguments": {
                "self": [
                    "_TSet@@Set@@"
                ],
                "left": [
                    "Optional[int]",
                    "Callable",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Set._modulo": {
            "name": "_modulo",
            "location": 204,
            "return": [
                "Set"
            ],
            "arguments": {
                "self": [
                    "_TSet@@Set@@"
                ],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Set._modulo_right": {
            "name": "_modulo_right",
            "location": 207,
            "return": [
                "Set"
            ],
            "arguments": {
                "self": [
                    "_TSet@@Set@@"
                ],
                "left": [
                    "Optional[int]",
                    "Callable",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Set._power": {
            "name": "_power",
            "location": 210,
            "return": [
                "Set"
            ],
            "arguments": {
                "self": [
                    "_TSet@@Set@@"
                ],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Set._power_right": {
            "name": "_power_right",
            "location": 213,
            "return": [
                "Set"
            ],
            "arguments": {
                "self": [
                    "_TSet@@Set@@"
                ],
                "left": [
                    "Optional[int]",
                    "Callable",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Set._attribute": {
            "name": "_attribute",
            "location": 219,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Set._Decorator.homotypic_binary_operator": {
            "name": "homotypic_binary_operator",
            "location": 34,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "inferior": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Set._Decorator.homotypic_binary_operator.wrapper": {
            "name": "wrapper",
            "location": 37,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "set",
                    "AbstractSet[T_co]",
                    "Union[int, float]",
                    "Iterable[Any]"
                ]
            }
        }
    },
    "pydsdl-master/pydsdl/_expression/_operator.py": {
        "_auto_swap": {
            "name": "_auto_swap",
            "location": 22,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "alternative_operator_name": [
                    "str",
                    "None",
                    "bool",
                    "List[Union[int,Any]]",
                    "Optional[str]"
                ]
            }
        },
        "logical_not": {
            "name": "logical_not",
            "location": 57,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "operand": [
                    "str",
                    "bool"
                ]
            }
        },
        "positive": {
            "name": "positive",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "operand": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "negative": {
            "name": "negative",
            "location": 67,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "operand": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "logical_or": {
            "name": "logical_or",
            "location": 72,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "left": [
                    "str",
                    "bool"
                ],
                "right": [
                    "str",
                    "bool"
                ]
            }
        },
        "logical_and": {
            "name": "logical_and",
            "location": 79,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "left": [
                    "str",
                    "bool"
                ],
                "right": [
                    "str",
                    "bool"
                ]
            }
        },
        "equal": {
            "name": "equal",
            "location": 86,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "left": [
                    "str",
                    "bool"
                ],
                "right": [
                    "str",
                    "bool"
                ]
            }
        },
        "not_equal": {
            "name": "not_equal",
            "location": 93,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "left": [
                    "str",
                    "bool"
                ],
                "right": [
                    "str",
                    "bool"
                ]
            }
        },
        "less_or_equal": {
            "name": "less_or_equal",
            "location": 100,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "left": [
                    "str",
                    "int"
                ],
                "right": [
                    "str",
                    "int"
                ]
            }
        },
        "greater_or_equal": {
            "name": "greater_or_equal",
            "location": 107,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "left": [
                    "str",
                    "int"
                ],
                "right": [
                    "str",
                    "int"
                ]
            }
        },
        "less": {
            "name": "less",
            "location": 114,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "left": [
                    "str",
                    "bool"
                ],
                "right": [
                    "str",
                    "bool"
                ]
            }
        },
        "greater": {
            "name": "greater",
            "location": 121,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "left": [
                    "str",
                    "bool"
                ],
                "right": [
                    "str",
                    "bool"
                ]
            }
        },
        "bitwise_or": {
            "name": "bitwise_or",
            "location": 128,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "left": [
                    "int",
                    "Callable",
                    "str"
                ],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "bitwise_xor": {
            "name": "bitwise_xor",
            "location": 133,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "left": [
                    "int",
                    "Callable",
                    "str"
                ],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "bitwise_and": {
            "name": "bitwise_and",
            "location": 138,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "left": [
                    "int",
                    "Callable",
                    "str"
                ],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "add": {
            "name": "add",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "left": [
                    "int",
                    "VT",
                    "T"
                ],
                "right": [
                    "int",
                    "VT",
                    "T"
                ]
            }
        },
        "subtract": {
            "name": "subtract",
            "location": 148,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "left": [
                    "int",
                    "Callable",
                    "str"
                ],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "multiply": {
            "name": "multiply",
            "location": 153,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "left": [
                    "int",
                    "Callable",
                    "str"
                ],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "divide": {
            "name": "divide",
            "location": 158,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "left": [
                    "int",
                    "Callable",
                    "str"
                ],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "modulo": {
            "name": "modulo",
            "location": 163,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "left": [
                    "int",
                    "Callable",
                    "str"
                ],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "power": {
            "name": "power",
            "location": 168,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "left": [
                    "int",
                    "Callable",
                    "str"
                ],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "attribute": {
            "name": "attribute",
            "location": 175,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "dict"
                ],
                "name": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "_auto_swap.decorator": {
            "name": "decorator",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "direct_operator": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_auto_swap.decorator.wrapper": {
            "name": "wrapper",
            "location": 35,
            "return": [
                "str",
                "Union[str, List[str]]",
                "Optional[str]",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "left": [
                    "float",
                    "Callable"
                ],
                "right": [
                    "float",
                    "Callable"
                ]
            }
        }
    },
    "pydsdl-master/pydsdl/_expression/_primitive.py": {
        "Primitive.native_value": {
            "name": "native_value",
            "location": 19,
            "return": [
                "Any",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Boolean.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "List[str]",
                    "Tuple[float,float]",
                    "int",
                    "Tuple[int,str]",
                    "List"
                ]
            }
        },
        "Boolean.native_value": {
            "name": "native_value",
            "location": 38,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Boolean.__hash__": {
            "name": "__hash__",
            "location": 41,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Boolean.__eq__": {
            "name": "__eq__",
            "location": 44,
            "return": [
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Boolean.__str__": {
            "name": "__str__",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Boolean.__bool__": {
            "name": "__bool__",
            "location": 52,
            "return": [
                "str",
                "Type",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Boolean._logical_not": {
            "name": "_logical_not",
            "location": 55,
            "return": [
                "Boolean"
            ],
            "arguments": {
                "self": [
                    "_TBoolean@@Boolean@@"
                ]
            }
        },
        "Boolean._logical_and": {
            "name": "_logical_and",
            "location": 58,
            "return": [
                "Boolean"
            ],
            "arguments": {
                "self": [
                    "_TBoolean@@Boolean@@"
                ],
                "right": [
                    "str"
                ]
            }
        },
        "Boolean._logical_or": {
            "name": "_logical_or",
            "location": 63,
            "return": [
                "Boolean"
            ],
            "arguments": {
                "self": [
                    "_TBoolean@@Boolean@@"
                ],
                "right": [
                    "str"
                ]
            }
        },
        "Boolean._equal": {
            "name": "_equal",
            "location": 68,
            "return": [
                "Boolean"
            ],
            "arguments": {
                "self": [
                    "_TBoolean@@Boolean@@"
                ],
                "right": [
                    "str"
                ]
            }
        },
        "Rational.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "Rational.native_value": {
            "name": "native_value",
            "location": 84,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rational.as_native_integer": {
            "name": "as_native_integer",
            "location": 87,
            "return": [
                "str",
                "Type[T]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rational.is_integer": {
            "name": "is_integer",
            "location": 97,
            "return": [
                "bool",
                "str",
                "List",
                "Dict[str,Any]",
                "Union[str,int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rational.__hash__": {
            "name": "__hash__",
            "location": 101,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rational.__eq__": {
            "name": "__eq__",
            "location": 104,
            "return": [
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Rational.__str__": {
            "name": "__str__",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rational._positive": {
            "name": "_positive",
            "location": 115,
            "return": [
                "Rational"
            ],
            "arguments": {
                "self": [
                    "_TRational@@Rational@@"
                ]
            }
        },
        "Rational._negative": {
            "name": "_negative",
            "location": 118,
            "return": [
                "Rational"
            ],
            "arguments": {
                "self": [
                    "_TRational@@Rational@@"
                ]
            }
        },
        "Rational._generic_compare": {
            "name": "_generic_compare",
            "location": 124,
            "return": [
                "Boolean"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "Dict[str,List]",
                    "Dict[str,list]"
                ],
                "impl": [
                    "List[str]",
                    "str",
                    "Dict",
                    "Optional[str]",
                    "int",
                    "None",
                    "Match",
                    "Match[str]"
                ]
            }
        },
        "Rational._equal": {
            "name": "_equal",
            "location": 129,
            "return": [
                "Boolean"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Rational._less_or_equal": {
            "name": "_less_or_equal",
            "location": 132,
            "return": [
                "Boolean"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Rational._greater_or_equal": {
            "name": "_greater_or_equal",
            "location": 135,
            "return": [
                "Boolean"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Rational._less": {
            "name": "_less",
            "location": 138,
            "return": [
                "Boolean"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Rational._greater": {
            "name": "_greater",
            "location": 141,
            "return": [
                "Boolean"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Rational._generic_bitwise": {
            "name": "_generic_bitwise",
            "location": 147,
            "return": [
                "Rational"
            ],
            "arguments": {
                "self": [
                    "_TRational@@Rational@@"
                ],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ],
                "impl": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Rational._bitwise_or": {
            "name": "_bitwise_or",
            "location": 154,
            "return": [
                "Rational"
            ],
            "arguments": {
                "self": [
                    "_TRational@@Rational@@"
                ],
                "right": [
                    "Iterable[List[T]]",
                    "bool",
                    "Iterable[list[T]]",
                    "Iterable[T]"
                ]
            }
        },
        "Rational._bitwise_xor": {
            "name": "_bitwise_xor",
            "location": 157,
            "return": [
                "Rational"
            ],
            "arguments": {
                "self": [
                    "_TRational@@Rational@@"
                ],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Rational._bitwise_and": {
            "name": "_bitwise_and",
            "location": 160,
            "return": [
                "Rational"
            ],
            "arguments": {
                "self": [
                    "_TRational@@Rational@@"
                ],
                "right": [
                    "Iterable[List[T]]",
                    "bool",
                    "Iterable[list[T]]",
                    "Iterable[T]"
                ]
            }
        },
        "Rational._generic_arithmetic": {
            "name": "_generic_arithmetic",
            "location": 166,
            "return": [
                "Rational"
            ],
            "arguments": {
                "self": [
                    "_TRational@@Rational@@"
                ],
                "right": [
                    "Optional[Tuple[str,...]]",
                    "Dict",
                    "Tuple[Union[str,...]]",
                    "str",
                    "None"
                ],
                "impl": [
                    "str",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "Rational._add": {
            "name": "_add",
            "location": 179,
            "return": [
                "Rational"
            ],
            "arguments": {
                "self": [
                    "_TRational@@Rational@@"
                ],
                "right": [
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "Rational._subtract": {
            "name": "_subtract",
            "location": 182,
            "return": [
                "Rational"
            ],
            "arguments": {
                "self": [
                    "_TRational@@Rational@@"
                ],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Rational._multiply": {
            "name": "_multiply",
            "location": 185,
            "return": [
                "Rational"
            ],
            "arguments": {
                "self": [
                    "_TRational@@Rational@@"
                ],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Rational._divide": {
            "name": "_divide",
            "location": 188,
            "return": [
                "Rational"
            ],
            "arguments": {
                "self": [
                    "_TRational@@Rational@@"
                ],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Rational._modulo": {
            "name": "_modulo",
            "location": 191,
            "return": [
                "Rational"
            ],
            "arguments": {
                "self": [
                    "_TRational@@Rational@@"
                ],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Rational._power": {
            "name": "_power",
            "location": 194,
            "return": [
                "Rational"
            ],
            "arguments": {
                "self": [
                    "_TRational@@Rational@@"
                ],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "String.__init__": {
            "name": "__init__",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "String.native_value": {
            "name": "native_value",
            "location": 207,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.__hash__": {
            "name": "__hash__",
            "location": 210,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.__eq__": {
            "name": "__eq__",
            "location": 213,
            "return": [
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,float]",
                    "int",
                    "Iterable[Any]",
                    "float",
                    "List[T]"
                ]
            }
        },
        "String.__str__": {
            "name": "__str__",
            "location": 218,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "String._add": {
            "name": "_add",
            "location": 221,
            "return": [
                "String"
            ],
            "arguments": {
                "self": [
                    "_TString@@String@@"
                ],
                "right": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "String._equal": {
            "name": "_equal",
            "location": 226,
            "return": [
                "Boolean"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "str",
                    "int",
                    "Dict",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "String._equal.normalized": {
            "name": "normalized",
            "location": 229,
            "return": [
                "Callable",
                "str",
                "list",
                "float"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "Set[int]"
                ]
            }
        }
    },
    "pydsdl-master/pydsdl/_expression/_test.py": {
        "_unittest_expressions": {
            "name": "_unittest_expressions",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_unittest_textual_representations": {
            "name": "_unittest_textual_representations",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_unittest_basic": {
            "name": "_unittest_basic",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pydsdl-master/pydsdl/_expression/__init__.py": {},
    "pydsdl-master/pydsdl/_serializable/_array.py": {
        "_unittest_fixed_array": {
            "name": "_unittest_fixed_array",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_unittest_variable_array": {
            "name": "_unittest_variable_array",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ArrayType.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element_type": [
                    "bool",
                    "_serializable.SerializableType",
                    "Dict[str,Any]",
                    "Type"
                ],
                "capacity": [
                    "str",
                    "int"
                ]
            }
        },
        "ArrayType.element_type": {
            "name": "element_type",
            "location": 26,
            "return": [
                "int",
                "Tuple[Type]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayType.capacity": {
            "name": "capacity",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayType.string_like": {
            "name": "string_like",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayType.alignment_requirement": {
            "name": "alignment_requirement",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayType.__str__": {
            "name": "__str__",
            "location": 55,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedLengthArrayType.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element_type": [
                    "int",
                    "_serializable.SerializableType",
                    "Dict[str,Any]",
                    "Exception",
                    "Type",
                    "bool"
                ],
                "capacity": [
                    "int",
                    "_serializable.SerializableType",
                    "Dict[str,Any]",
                    "Exception",
                    "Type",
                    "bool"
                ]
            }
        },
        "FixedLengthArrayType.bit_length_set": {
            "name": "bit_length_set",
            "location": 66,
            "return": [
                "bool",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedLengthArrayType.enumerate_elements_with_offsets": {
            "name": "enumerate_elements_with_offsets",
            "location": 69,
            "return": [
                "Generator[(Tuple[(int, Any)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "base_offset": [
                    "BitLengthSet",
                    "str",
                    "int"
                ]
            }
        },
        "FixedLengthArrayType.__str__": {
            "name": "__str__",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedLengthArrayType.__repr__": {
            "name": "__repr__",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthArrayType.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element_type": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "capacity": [
                    "int",
                    "None",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "VariableLengthArrayType.bit_length_set": {
            "name": "bit_length_set",
            "location": 146,
            "return": [
                "bool",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthArrayType.string_like": {
            "name": "string_like",
            "location": 151,
            "return": [
                "bool",
                "Type[Any]",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthArrayType.length_field_type": {
            "name": "length_field_type",
            "location": 157,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthArrayType.__str__": {
            "name": "__str__",
            "location": 165,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthArrayType.__repr__": {
            "name": "__repr__",
            "location": 168,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pydsdl-master/pydsdl/_serializable/_attribute.py": {
        "_unittest_attribute": {
            "name": "_unittest_attribute",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Attribute.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_type": [
                    "str",
                    "int",
                    "_serializable.SerializableType",
                    "List[str]",
                    "None",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Optional[Directory]",
                    "None"
                ],
                "doc": [
                    "Text",
                    "str",
                    "int"
                ]
            }
        },
        "Attribute.data_type": {
            "name": "data_type",
            "location": 33,
            "return": [
                "str",
                "Tuple[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attribute.name": {
            "name": "name",
            "location": 37,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attribute.doc": {
            "name": "doc",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attribute.__hash__": {
            "name": "__hash__",
            "location": 46,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attribute.__eq__": {
            "name": "__eq__",
            "location": 49,
            "return": [
                "bool",
                "Dict[str,Any]",
                "str",
                "List[str]",
                "int",
                "Type",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type"
                ]
            }
        },
        "Attribute.__str__": {
            "name": "__str__",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attribute.__repr__": {
            "name": "__repr__",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PaddingField.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_type": [
                    "str",
                    "bool"
                ],
                "doc": [
                    "str",
                    "Text"
                ]
            }
        },
        "Constant.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_type": [
                    "_serializable.SerializableType"
                ],
                "name": [
                    "str",
                    "List[str]",
                    "Type"
                ],
                "value": [
                    "str",
                    "_expression.Any",
                    "bool",
                    "float"
                ],
                "doc": [
                    "Text",
                    "str",
                    "List[str]",
                    "Type"
                ]
            }
        },
        "Constant.value": {
            "name": "value",
            "location": 129,
            "return": [
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constant.__hash__": {
            "name": "__hash__",
            "location": 137,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constant.__eq__": {
            "name": "__eq__",
            "location": 140,
            "return": [
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[T]"
                ]
            }
        },
        "Constant.__str__": {
            "name": "__str__",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constant.__repr__": {
            "name": "__repr__",
            "location": 150,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pydsdl-master/pydsdl/_serializable/_composite.py": {
        "_unittest_composite_types": {
            "name": "_unittest_composite_types",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_unittest_field_iterators": {
            "name": "_unittest_field_iterators",
            "location": 946,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CompositeType.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "version": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "attributes": [
                    "List[str]",
                    "int",
                    "List[dict[str,Any]]",
                    "bool",
                    "List[Dict[str,Any]]"
                ],
                "deprecated": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "None"
                ],
                "fixed_port_id": [
                    "int",
                    "str",
                    "None",
                    "bool",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "source_file_path": [
                    "str",
                    "Container",
                    "List[str]",
                    "Container[str]",
                    "None",
                    "Optional[str]",
                    "Optional[pathlib.Path]"
                ],
                "has_parent_service": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Union[bool,List[bool]]",
                    "None",
                    "List[bool]"
                ],
                "doc": [
                    "Text",
                    "str",
                    "bool",
                    "int",
                    "Optional[str]",
                    "Iterable[str]"
                ]
            }
        },
        "CompositeType.full_name": {
            "name": "full_name",
            "location": 144,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeType.name_components": {
            "name": "name_components",
            "location": 149,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeType.short_name": {
            "name": "short_name",
            "location": 154,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeType.doc": {
            "name": "doc",
            "location": 159,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeType.full_namespace": {
            "name": "full_namespace",
            "location": 164,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeType.root_namespace": {
            "name": "root_namespace",
            "location": 169,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeType.version": {
            "name": "version",
            "location": 174,
            "return": [
                "str",
                "Callable[[], bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeType.extent": {
            "name": "extent",
            "location": 179,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeType.bit_length_set": {
            "name": "bit_length_set",
            "location": 189,
            "return": [
                "_bit_length_set.BitLengthSet",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeType.deprecated": {
            "name": "deprecated",
            "location": 200,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeType.attributes": {
            "name": "attributes",
            "location": 205,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeType.fields": {
            "name": "fields",
            "location": 209,
            "return": [
                "List",
                "List[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeType.fields_except_padding": {
            "name": "fields_except_padding",
            "location": 213,
            "return": [
                "List",
                "List[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeType.constants": {
            "name": "constants",
            "location": 217,
            "return": [
                "List",
                "Optional[dict]",
                "int",
                "Sequence[int]",
                "Counter",
                "bool",
                "Optional[T]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeType.inner_type": {
            "name": "inner_type",
            "location": 221,
            "return": [
                "CompositeType",
                "str",
                "bool",
                "Dict[str,Any]",
                "Iterator",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeType.fixed_port_id": {
            "name": "fixed_port_id",
            "location": 232,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeType.has_fixed_port_id": {
            "name": "has_fixed_port_id",
            "location": 236,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeType.source_file_path": {
            "name": "source_file_path",
            "location": 240,
            "return": [
                "str",
                "List[str]",
                "int",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeType.alignment_requirement": {
            "name": "alignment_requirement",
            "location": 247,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeType.has_parent_service": {
            "name": "has_parent_service",
            "location": 253,
            "return": [
                "type",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeType.iterate_fields_with_offsets": {
            "name": "iterate_fields_with_offsets",
            "location": 264,
            "return": [
                "Iterator[Tuple[_attribute.Field,_bit_length_set.BitLengthSet]]",
                "None"
            ],
            "arguments": {
                "self": [],
                "base_offset": [
                    "BitLengthSet",
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "Set[str]",
                    "AnyStr"
                ]
            }
        },
        "CompositeType._attribute": {
            "name": "_attribute",
            "location": 298,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "CompositeType.__getitem__": {
            "name": "__getitem__",
            "location": 310,
            "return": [
                "str",
                "Tuple[str, List[str], List[float], List[str], List[float], List[float], List[Any]]"
            ],
            "arguments": {
                "self": [],
                "attribute_name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "CompositeType.__str__": {
            "name": "__str__",
            "location": 318,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeType.__repr__": {
            "name": "__repr__",
            "location": 322,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnionType.__init__": {
            "name": "__init__",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "float",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]",
                    "Optional[int]",
                    "None"
                ],
                "version": [
                    "str",
                    "bool",
                    "float",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]",
                    "Optional[int]",
                    "None"
                ],
                "attributes": [
                    "str",
                    "Tuple[Union[str,str]]",
                    "bool",
                    "Tuple[str,str]",
                    "float",
                    "Optional[int]"
                ],
                "deprecated": [
                    "str",
                    "bool",
                    "float",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]",
                    "Optional[int]",
                    "None"
                ],
                "fixed_port_id": [
                    "str",
                    "bool",
                    "float",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]",
                    "Optional[int]",
                    "None"
                ],
                "source_file_path": [
                    "str",
                    "bool",
                    "float",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]",
                    "Optional[int]",
                    "None"
                ],
                "has_parent_service": [
                    "str",
                    "bool",
                    "float",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]",
                    "Optional[int]",
                    "None"
                ],
                "doc": [
                    "Text",
                    "str",
                    "bool",
                    "Tuple[str,str]",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "UnionType.bit_length_set": {
            "name": "bit_length_set",
            "location": 387,
            "return": [
                "bool",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnionType.number_of_variants": {
            "name": "number_of_variants",
            "location": 391,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnionType.tag_field_type": {
            "name": "tag_field_type",
            "location": 395,
            "return": [
                "bool",
                "Tuple[Type]",
                "str",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnionType.iterate_fields_with_offsets": {
            "name": "iterate_fields_with_offsets",
            "location": 402,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "base_offset": [
                    "BitLengthSet",
                    "str",
                    "Optional[BaseException]"
                ]
            }
        },
        "UnionType.aggregate_bit_length_sets": {
            "name": "aggregate_bit_length_sets",
            "location": 412,
            "return": [
                "BitLengthSet",
                "str",
                "bool"
            ],
            "arguments": {
                "field_types": [
                    "str",
                    "Type",
                    "Optional[str]"
                ]
            }
        },
        "UnionType._compute_tag_bit_length": {
            "name": "_compute_tag_bit_length",
            "location": 436,
            "return": [
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "field_types": [
                    "bool",
                    "Type",
                    "Type[Any]",
                    "str"
                ]
            }
        },
        "StructureType.__init__": {
            "name": "__init__",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "float",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]",
                    "Optional[int]",
                    "None"
                ],
                "version": [
                    "str",
                    "bool",
                    "float",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]",
                    "Optional[int]",
                    "None"
                ],
                "attributes": [
                    "str",
                    "bool",
                    "float",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]",
                    "Optional[int]",
                    "None"
                ],
                "deprecated": [
                    "str",
                    "bool",
                    "float",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]",
                    "Optional[int]",
                    "None"
                ],
                "fixed_port_id": [
                    "str",
                    "bool",
                    "float",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]",
                    "Optional[int]",
                    "None"
                ],
                "source_file_path": [
                    "str",
                    "bool",
                    "float",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]",
                    "Optional[int]",
                    "None"
                ],
                "has_parent_service": [
                    "str",
                    "bool",
                    "float",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]",
                    "Optional[int]",
                    "None"
                ],
                "doc": [
                    "Text",
                    "str",
                    "bool",
                    "Tuple[str,str]",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "StructureType.iterate_fields_with_offsets": {
            "name": "iterate_fields_with_offsets",
            "location": 477,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "base_offset": [
                    "str",
                    "BitLengthSet"
                ]
            }
        },
        "StructureType.bit_length_set": {
            "name": "bit_length_set",
            "location": 488,
            "return": [
                "bool",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "StructureType.aggregate_bit_length_sets": {
            "name": "aggregate_bit_length_sets",
            "location": 492,
            "return": [
                "BitLengthSet",
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "field_types": [
                    "str",
                    "int",
                    "Optional[Any]",
                    "Union[int, str]"
                ]
            }
        },
        "DelimitedType.__init__": {
            "name": "__init__",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "str",
                    "bool"
                ],
                "extent": [
                    "int",
                    "str"
                ]
            }
        },
        "DelimitedType.inner_type": {
            "name": "inner_type",
            "location": 567,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "Iterator",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DelimitedType.extent": {
            "name": "extent",
            "location": 575,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DelimitedType.bit_length_set": {
            "name": "bit_length_set",
            "location": 587,
            "return": [
                "bool",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "DelimitedType.delimiter_header_type": {
            "name": "delimiter_header_type",
            "location": 599,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DelimitedType.iterate_fields_with_offsets": {
            "name": "iterate_fields_with_offsets",
            "location": 606,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "base_offset": [
                    "str",
                    "BitLengthSet"
                ]
            }
        },
        "DelimitedType.__repr__": {
            "name": "__repr__",
            "location": 615,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceType.__init__": {
            "name": "__init__",
            "location": 628,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Optional[str]",
                    "bytes",
                    "str",
                    "Dict[str,str]",
                    "None"
                ],
                "response": [
                    "Dict",
                    "str",
                    "bytes",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "fixed_port_id": [
                    "Dict",
                    "str",
                    "bytes",
                    "Optional[str]",
                    "bool",
                    "None"
                ]
            }
        },
        "ServiceType.bit_length_set": {
            "name": "bit_length_set",
            "location": 664,
            "return": [
                "_bit_length_set.BitLengthSet",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceType.request_type": {
            "name": "request_type",
            "location": 668,
            "return": [
                "bool",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceType.response_type": {
            "name": "response_type",
            "location": 673,
            "return": [
                "str",
                "tuple",
                "Dict[str, str]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceType.iterate_fields_with_offsets": {
            "name": "iterate_fields_with_offsets",
            "location": 677,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "base_offset": [
                    "BitLengthSet",
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "Set[str]",
                    "AnyStr"
                ]
            }
        },
        "_unittest_composite_types.try_name": {
            "name": "try_name",
            "location": 689,
            "return": [
                "StructureType"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_unittest_composite_types.try_union_fields": {
            "name": "try_union_fields",
            "location": 839,
            "return": [
                "UnionType",
                "Sequence[Any]",
                "Type[Any]"
            ],
            "arguments": {
                "field_types": [
                    "type",
                    "str"
                ]
            }
        },
        "_unittest_composite_types.try_struct_fields": {
            "name": "try_struct_fields",
            "location": 904,
            "return": [
                "StructureType",
                "Sequence[Any]",
                "Type[Any]"
            ],
            "arguments": {
                "field_types": [
                    "type",
                    "str"
                ]
            }
        },
        "_unittest_field_iterators.make_type": {
            "name": "make_type",
            "location": 954,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "meta": [
                    "str",
                    "type"
                ],
                "attributes": [
                    "str",
                    "type"
                ]
            }
        },
        "_unittest_field_iterators.validate_iterator": {
            "name": "validate_iterator",
            "location": 967,
            "return": [
                "None"
            ],
            "arguments": {
                "t": [
                    "str",
                    "Tuple[str, List[str], List[str]]"
                ],
                "reference": [
                    "str",
                    "Tuple[str, List[str], List[str]]"
                ],
                "base_offset": [
                    "BitLengthSet",
                    "str",
                    "Tuple[str,List[str],List[str]]"
                ]
            }
        }
    },
    "pydsdl-master/pydsdl/_serializable/_name.py": {
        "check_name": {
            "name": "check_name",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "_unittest_check_name": {
            "name": "_unittest_check_name",
            "location": 78,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "pydsdl-master/pydsdl/_serializable/_primitive.py": {
        "_unittest_primitive": {
            "name": "_unittest_primitive",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "PrimitiveType.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bit_length": [
                    "int",
                    "bool",
                    "float",
                    "Union[bool, str]"
                ],
                "cast_mode": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "PrimitiveType.bit_length_set": {
            "name": "bit_length_set",
            "location": 51,
            "return": [
                "BitLengthSet",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrimitiveType.bit_length": {
            "name": "bit_length",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrimitiveType.standard_bit_length": {
            "name": "standard_bit_length",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrimitiveType.cast_mode": {
            "name": "cast_mode",
            "location": 75,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrimitiveType.alignment_requirement": {
            "name": "alignment_requirement",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrimitiveType._cast_mode_name": {
            "name": "_cast_mode_name",
            "location": 83,
            "return": [
                "bool",
                "Optional[int]",
                "Optional[float]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrimitiveType.__str__": {
            "name": "__str__",
            "location": 91,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrimitiveType.__repr__": {
            "name": "__repr__",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BooleanType.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cast_mode": [
                    "str",
                    "int",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "BooleanType.__str__": {
            "name": "__str__",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArithmeticType.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bit_length": [
                    "str",
                    "int"
                ],
                "cast_mode": [
                    "str",
                    "int"
                ]
            }
        },
        "ArithmeticType.inclusive_value_range": {
            "name": "inclusive_value_range",
            "location": 115,
            "return": [
                "ValueRange",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArithmeticType.__str__": {
            "name": "__str__",
            "location": 119,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegerType.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bit_length": [
                    "str",
                    "int"
                ],
                "cast_mode": [
                    "str",
                    "int"
                ]
            }
        },
        "IntegerType.inclusive_value_range": {
            "name": "inclusive_value_range",
            "location": 129,
            "return": [
                "ValueRange",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegerType.__str__": {
            "name": "__str__",
            "location": 133,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignedIntegerType.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bit_length": [
                    "str",
                    "int"
                ],
                "cast_mode": [
                    "str",
                    "int",
                    "None",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "SignedIntegerType.inclusive_value_range": {
            "name": "inclusive_value_range",
            "location": 148,
            "return": [
                "ValueRange",
                "Type[T]",
                "Union[str,int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignedIntegerType.__str__": {
            "name": "__str__",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnsignedIntegerType.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bit_length": [
                    "str",
                    "int"
                ],
                "cast_mode": [
                    "str",
                    "int"
                ]
            }
        },
        "UnsignedIntegerType.inclusive_value_range": {
            "name": "inclusive_value_range",
            "location": 161,
            "return": [
                "ValueRange",
                "Type[T]",
                "Union[str,int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnsignedIntegerType.__str__": {
            "name": "__str__",
            "location": 164,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FloatType.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bit_length": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "cast_mode": [
                    "str",
                    "int"
                ]
            }
        },
        "FloatType.inclusive_value_range": {
            "name": "inclusive_value_range",
            "location": 186,
            "return": [
                "ValueRange",
                "Type[T]",
                "Union[str,int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FloatType.__str__": {
            "name": "__str__",
            "location": 189,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pydsdl-master/pydsdl/_serializable/_serializable.py": {
        "SerializableType.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializableType.bit_length_set": {
            "name": "bit_length_set",
            "location": 34,
            "return": [
                "_bit_length_set.BitLengthSet",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializableType.alignment_requirement": {
            "name": "alignment_requirement",
            "location": 44,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializableType._attribute": {
            "name": "_attribute",
            "location": 59,
            "return": [
                "_expression._container.Set"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "SerializableType.__str__": {
            "name": "__str__",
            "location": 69,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializableType.__hash__": {
            "name": "__hash__",
            "location": 74,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializableType.__eq__": {
            "name": "__eq__",
            "location": 81,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Mapping[str,Any]",
                    "Callable",
                    "Mapping"
                ]
            }
        }
    },
    "pydsdl-master/pydsdl/_serializable/_void.py": {
        "_unittest_void": {
            "name": "_unittest_void",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "VoidType.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bit_length": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "VoidType.bit_length_set": {
            "name": "bit_length_set",
            "location": 24,
            "return": [
                "BitLengthSet",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VoidType.bit_length": {
            "name": "bit_length",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VoidType.alignment_requirement": {
            "name": "alignment_requirement",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VoidType.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VoidType.__repr__": {
            "name": "__repr__",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pydsdl-master/pydsdl/_serializable/__init__.py": {}
}
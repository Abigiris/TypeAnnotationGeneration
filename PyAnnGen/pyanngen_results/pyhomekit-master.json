{
    "pyhomekit-master/setup.py": {},
    "pyhomekit-master/docs/conf.py": {},
    "pyhomekit-master/pyhomekit/ble.py": {
        "reconnect_callback_factory": {
            "name": "reconnect_callback_factory",
            "location": 574,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "accessory": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "reconnect_tenacity_retry": {
            "name": "reconnect_tenacity_retry",
            "location": 591,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "reconnect_callback": [
                    "str",
                    "raiden.utils.TokenAmount",
                    "Dict[str,Any]",
                    "None",
                    "raiden.utils.BlockSpecification",
                    "Optional[Dict[str,Any]]",
                    "raiden.utils.ChannelID",
                    "raiden.utils.BlockExpiration"
                ],
                "max_attempts": [
                    "int",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.BlockSpecification",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "raiden.utils.ChannelID",
                    "raiden.utils.BlockExpiration"
                ],
                "wait_time": [
                    "int",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.BlockSpecification",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "raiden.utils.ChannelID",
                    "raiden.utils.BlockExpiration"
                ]
            }
        },
        "fragment_tlvs": {
            "name": "fragment_tlvs",
            "location": 604,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "header": [
                    "List[dict[str,Any]]",
                    "raiden.utils.Tuple[raiden.utils.Address,raiden.utils.PrivateKey]",
                    "Dict",
                    "str",
                    "Callable",
                    "List[Dict[str,Any]]"
                ],
                "TLVs": [
                    "Dict",
                    "int"
                ]
            }
        },
        "HapBlePduHeader.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "List[dict]",
                    "Dict[str,Any]"
                ],
                "continuation": [
                    "List[dict]",
                    "Dict[str,Any]"
                ]
            }
        },
        "HapBlePduHeader.control_field": {
            "name": "control_field",
            "location": 40,
            "return": [
                "int",
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapBlePduHeader.control_field_bits": {
            "name": "control_field_bits",
            "location": 45,
            "return": [
                "str",
                "Iterable[int]",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapBlePduHeader.data": {
            "name": "data",
            "location": 52,
            "return": [
                "bytes",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapBlePduHeader.__str__": {
            "name": "__str__",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapBlePduRequestHeader.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cid_sid": [
                    "str",
                    "int",
                    "bytes",
                    "None",
                    "bool",
                    "raiden.utils.List[raiden.transfer.mediated_transfer.state.MediationPairState]",
                    "Optional[str]"
                ],
                "op_code": [
                    "int",
                    "bytes"
                ],
                "response": [
                    "bool",
                    "Dict[str,Any]",
                    "int",
                    "bytes"
                ],
                "continuation": [
                    "bool",
                    "Dict[str,Any]",
                    "int",
                    "bytes"
                ],
                "transaction_id": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[bool]"
                ]
            }
        },
        "HapBlePduRequestHeader.transaction_id": {
            "name": "transaction_id",
            "location": 96,
            "return": [
                "str",
                "int",
                "Dict",
                "None",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapBlePduRequestHeader.data": {
            "name": "data",
            "location": 108,
            "return": [
                "int",
                "str",
                "cmk.utils.type_defs.HostName",
                "AsyncGenerator"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapBlePduRequestHeader.__str__": {
            "name": "__str__",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapBlePduResponseHeader.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int",
                    "bytes",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "transaction_id": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "continuation": [
                    "bool",
                    "Dict[str,Any]",
                    "str"
                ],
                "response": [
                    "bool",
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "HapBlePduResponseHeader.from_data": {
            "name": "from_data",
            "location": 153,
            "return": [
                "HapBlePduResponseHeader"
            ],
            "arguments": {
                "cls": [
                    "Type[_THapBlePduResponseHeader]"
                ],
                "data": [
                    "str",
                    "List[int]",
                    "Tuple[Union[str,list[str]]]",
                    "Dict",
                    "int",
                    "MutableMapping",
                    "Dict[str,Union[str,int]]",
                    "Union[str,int]",
                    "Tuple[str,List[str]]"
                ]
            }
        },
        "HapBlePduResponseHeader.data": {
            "name": "data",
            "location": 172,
            "return": [
                "int",
                "bool",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapBlePduResponseHeader.__str__": {
            "name": "__str__",
            "location": 177,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapBlePdu.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "header": [
                    "str",
                    "bytes",
                    "None",
                    "Optional[str]",
                    "constants.HttpRequestMethod"
                ],
                "TLVs": [
                    "int",
                    "bool"
                ]
            }
        },
        "HapBlePdu.raw_data": {
            "name": "raw_data",
            "location": 196,
            "return": [
                "int",
                "List[str]",
                "Optional[bytes]",
                "dict",
                "\"DataFrame\""
            ],
            "arguments": {
                "self": []
            }
        },
        "HapBlePdu.fragmented": {
            "name": "fragmented",
            "location": 206,
            "return": [
                "bool",
                "int",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapBlePdu.pdu_fragments": {
            "name": "pdu_fragments",
            "location": 209,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapCharacteristic.__init__": {
            "name": "__init__",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "accessory": [
                    "int",
                    "float",
                    "Callable",
                    "bool"
                ],
                "uuid": [
                    "int",
                    "float",
                    "Callable",
                    "bool"
                ],
                "retry": [
                    "bool",
                    "int",
                    "float",
                    "Callable"
                ],
                "retry_max_attempts": [
                    "int",
                    "float",
                    "Sequence[int]",
                    "str"
                ],
                "retry_wait_time": [
                    "int",
                    "float",
                    "raiden.utils.PaymentAmount"
                ]
            }
        },
        "HapCharacteristic._request": {
            "name": "_request",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "header": [
                    "str",
                    "List",
                    "List[str]"
                ],
                "body": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "HapCharacteristic._read": {
            "name": "_read",
            "location": 273,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapCharacteristic.write": {
            "name": "write",
            "location": 278,
            "return": [
                "bytes",
                "Dict",
                "Pattern",
                "Dict[str,Union[int,str]]",
                "List[dict[str,Any]]",
                "frozenset",
                "Dict[str,str]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "request_header": [
                    "Dict[str,Any]"
                ],
                "TLVs": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "HapCharacteristic.write_ktlvs": {
            "name": "write_ktlvs",
            "location": 303,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "request_header": [
                    "bool",
                    "Dict[str,Any]",
                    "Dict",
                    "str"
                ],
                "kTLVs": [
                    "bytes",
                    "str",
                    "Dict",
                    "Optional[str]",
                    "bool",
                    "T"
                ]
            }
        },
        "HapCharacteristic.read": {
            "name": "read",
            "location": 353,
            "return": [
                "bytes",
                "str",
                "Dict",
                "Dict[Any,str]"
            ],
            "arguments": {
                "self": [],
                "request_header": [
                    "int",
                    "bytes",
                    "str",
                    "Optional[bytes]",
                    "None"
                ]
            }
        },
        "HapCharacteristic._setup_tenacity": {
            "name": "_setup_tenacity",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_attempts": [
                    "int",
                    "float"
                ],
                "wait_time": [
                    "int",
                    "float"
                ]
            }
        },
        "HapCharacteristic._characteristic": {
            "name": "_characteristic",
            "location": 379,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapCharacteristic.cid": {
            "name": "cid",
            "location": 384,
            "return": [
                "int",
                "str",
                "Callable",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapCharacteristic.signature": {
            "name": "signature",
            "location": 391,
            "return": [
                "int",
                "Type",
                "Set[str]",
                "List[bytes]",
                "str",
                "Set"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapCharacteristic._read_cid": {
            "name": "_read_cid",
            "location": 401,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapCharacteristic._check_read_response": {
            "name": "_check_read_response",
            "location": 409,
            "return": [
                "HapBlePduResponseHeader"
            ],
            "arguments": {
                "request_header": [
                    "Dict",
                    "Callable",
                    "Dict[str,Any]",
                    "Tuple[str,dict,int,Any]",
                    "str",
                    "Tuple[Union[str,dict,int,Any]]",
                    "bool",
                    "Dict[str,List[str]]",
                    "Dict[str,list[str]]",
                    "Optional[str]",
                    "None"
                ],
                "response": []
            }
        },
        "HapCharacteristic._parse_response": {
            "name": "_parse_response",
            "location": 433,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "Dict"
                ]
            }
        },
        "HapAccessory.__init__": {
            "name": "__init__",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "bool",
                    "List[float]",
                    "List[str]",
                    "int"
                ],
                "address_type": [
                    "Text",
                    "str",
                    "bool"
                ]
            }
        },
        "HapAccessory.connect": {
            "name": "connect",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapAccessory.charateristic": {
            "name": "charateristic",
            "location": 510,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None"
                ]
            }
        },
        "HapAccessory.pair": {
            "name": "pair",
            "location": 517,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapAccessory.pair_verify": {
            "name": "pair_verify",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapAccessory.save_key": {
            "name": "save_key",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapAccessory.discover_hap_characteristics": {
            "name": "discover_hap_characteristics",
            "location": 526,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapAccessory.get_characteristic": {
            "name": "get_characteristic",
            "location": 530,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Iterable[str]"
                ],
                "uuid": [
                    "str",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "HapAccessoryLock.lock_current_state": {
            "name": "lock_current_state",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapAccessoryLock.lock_target_state": {
            "name": "lock_target_state",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapAccessoryLock.lock_control_point": {
            "name": "lock_control_point",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapAccessoryLock.version": {
            "name": "version",
            "location": 548,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapAccessoryLock.logs": {
            "name": "logs",
            "location": 552,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapAccessoryLock.audio_feedback": {
            "name": "audio_feedback",
            "location": 555,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapAccessoryLock.lock_management_auto_security_timeout": {
            "name": "lock_management_auto_security_timeout",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapAccessoryLock.administrator_only_access": {
            "name": "administrator_only_access",
            "location": 561,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapAccessoryLock.lock_last_known_action": {
            "name": "lock_last_known_action",
            "location": 564,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapAccessoryLock.current_door_state": {
            "name": "current_door_state",
            "location": 567,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HapAccessoryLock.motion_detected": {
            "name": "motion_detected",
            "location": 570,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "reconnect_callback_factory.reconnect": {
            "name": "reconnect",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ],
                "trial_number": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        }
    },
    "pyhomekit-master/pyhomekit/constants.py": {
        "to_uuid": {
            "name": "to_uuid",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "b": [
                    "str",
                    "float"
                ]
            }
        },
        "to_bool": {
            "name": "to_bool",
            "location": 15,
            "return": [
                "str",
                "bytes",
                "dict"
            ],
            "arguments": {
                "b": [
                    "bytes",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "to_float": {
            "name": "to_float",
            "location": 20,
            "return": [
                "str",
                "MutableMapping[str, Any]",
                "int"
            ],
            "arguments": {
                "b": [
                    "bytes"
                ]
            }
        },
        "to_int32": {
            "name": "to_int32",
            "location": 25,
            "return": [
                "int",
                "bytes",
                "Union[bytes, bytearray]",
                "str"
            ],
            "arguments": {
                "b": [
                    "bytes"
                ]
            }
        },
        "to_uint64": {
            "name": "to_uint64",
            "location": 30,
            "return": [
                "str",
                "bytearray",
                "bytes"
            ],
            "arguments": {
                "b": [
                    "bytes"
                ]
            }
        },
        "to_uint32": {
            "name": "to_uint32",
            "location": 35,
            "return": [
                "int",
                "bytes",
                "Union[bytes, bytearray]",
                "str"
            ],
            "arguments": {
                "b": [
                    "bytes"
                ]
            }
        },
        "to_uint16": {
            "name": "to_uint16",
            "location": 40,
            "return": [
                "str",
                "bytearray",
                "bytes"
            ],
            "arguments": {
                "b": [
                    "bytes"
                ]
            }
        },
        "to_uint8": {
            "name": "to_uint8",
            "location": 45,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "b": [
                    "bytes"
                ]
            }
        },
        "to_utf8": {
            "name": "to_utf8",
            "location": 50,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "b": [
                    "bytes",
                    "str"
                ]
            }
        },
        "identity": {
            "name": "identity",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "parse_format": {
            "name": "parse_format",
            "location": 60,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "b": [
                    "bool",
                    "Optional[Union[int, str]]",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "HapParamTypes.__call__": {
            "name": "__call__",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "PairingKTLVErrorCodes.__call__": {
            "name": "__call__",
            "location": 301,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int",
                    "str",
                    "Union[None, int, str]"
                ]
            }
        },
        "PairingKTlvValues.__call__": {
            "name": "__call__",
            "location": 323,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int",
                    "str"
                ]
            }
        },
        "PairingKTLVMethodValues.__call__": {
            "name": "__call__",
            "location": 336,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int",
                    "str"
                ]
            }
        },
        "HapBleStatusCodes.__call__": {
            "name": "__call__",
            "location": 352,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "HapBleOpCodes.__call__": {
            "name": "__call__",
            "location": 367,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "pyhomekit-master/pyhomekit/pairing.py": {
        "H": {
            "name": "H",
            "location": 57,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "random_int": {
            "name": "random_int",
            "location": 72,
            "return": [
                "int"
            ],
            "arguments": {
                "n_bits": [
                    "int"
                ]
            }
        },
        "to_bytes": {
            "name": "to_bytes",
            "location": 77,
            "return": [
                "bytes",
                "Optional[int]",
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "value": [
                    "int",
                    "bytes",
                    "Union[str,bytes]"
                ],
                "little_endian": [
                    "bool",
                    "float",
                    "T",
                    "Union[str,int]",
                    "Sequence[Union[int,str]]",
                    "str"
                ]
            }
        },
        "from_bytes": {
            "name": "from_bytes",
            "location": 86,
            "return": [
                "int"
            ],
            "arguments": {
                "value": [
                    "int",
                    "bytes",
                    "Union[str,bytes]"
                ],
                "little_endian": [
                    "bool",
                    "int",
                    "Tuple[str,int]",
                    "complex",
                    "List"
                ]
            }
        },
        "derive_session_key": {
            "name": "derive_session_key",
            "location": 98,
            "return": [
                "bytes"
            ],
            "arguments": {
                "shared_secret": [
                    "str",
                    "int",
                    "Dict[str,str]",
                    "List",
                    "bool"
                ],
                "salt": [
                    "bytes",
                    "str",
                    "int"
                ],
                "info": [
                    "bytes",
                    "str",
                    "int"
                ],
                "output_size": [
                    "int",
                    "str"
                ]
            }
        },
        "pair": {
            "name": "pair",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SRPPairSetup.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pairing_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "storage_folder": [
                    "bool",
                    "float",
                    "None",
                    "Tuple[int]",
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "setup_code": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "SRPPairSetup.m1_generate_srp_start_request": {
            "name": "m1_generate_srp_start_request",
            "location": 169,
            "return": [
                "List[Tuple[(int, bytes)]]"
            ],
            "arguments": {}
        },
        "SRPPairSetup.m2_receive_srp_start_response": {
            "name": "m2_receive_srp_start_response",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parsed_ktlvs": [
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "SRPPairSetup.m3_generate_srp_verify_request": {
            "name": "m3_generate_srp_verify_request",
            "location": 198,
            "return": [
                "List[Tuple[(int, bytes)]]"
            ],
            "arguments": {
                "self": [],
                "setup_code": [
                    "Optional[int]",
                    "None",
                    "str",
                    "Optional[str]",
                    "int",
                    "Type",
                    "Union[List,Tuple]",
                    "List",
                    "Tuple",
                    "Optional[List[str]]",
                    "Optional[Dict[str,str]]",
                    "List[str]",
                    "Dict[str,str]"
                ]
            }
        },
        "SRPPairSetup.m4_receive_srp_verify_response": {
            "name": "m4_receive_srp_verify_response",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parsed_ktlvs": [
                    "str",
                    "bytes",
                    "metrics_backend.utils.Address"
                ]
            }
        },
        "SRPPairSetup.m5_generate_exchange_request": {
            "name": "m5_generate_exchange_request",
            "location": 247,
            "return": [
                "List[Tuple[(int, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SRPPairSetup.m6_receive_exchange_response": {
            "name": "m6_receive_exchange_response",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parsed_ktlvs": [
                    "str",
                    "Union[str,dict]"
                ]
            }
        },
        "SRPPairVerify.__init__": {
            "name": "__init__",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pairing_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "storage_folder": [
                    "bool",
                    "float",
                    "None",
                    "Tuple[int]",
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "setup_code": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "SRPPairVerify.m1_generate_verify_start_request": {
            "name": "m1_generate_verify_start_request",
            "location": 394,
            "return": [
                "List[Tuple[(int, bytes)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SRPPairVerify.m2_receive_start_response": {
            "name": "m2_receive_start_response",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "parsed_ktlvs": [
                    "str",
                    "Type",
                    "Dict",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "pyhomekit-master/pyhomekit/utils.py": {
        "iterate_tvl": {
            "name": "iterate_tvl",
            "location": 14,
            "return": [
                "Generator[(Tuple[(Any, Any, Any)], Any, None)]"
            ],
            "arguments": {
                "response": [
                    "dict",
                    "list",
                    "\"prefecengine.state.State\"",
                    "int"
                ]
            }
        },
        "prepare_tlv": {
            "name": "prepare_tlv",
            "location": 28,
            "return": [
                "Generator[(bytes, Any, None)]"
            ],
            "arguments": {
                "param_type": [
                    "int",
                    "str",
                    "List[int]",
                    "List[Tuple[str]]",
                    "List[tuple[str]]"
                ],
                "value": [
                    "str",
                    "List",
                    "bytes",
                    "bool",
                    "Union[None,str,bytes]"
                ]
            }
        },
        "parse_ktlvs": {
            "name": "parse_ktlvs",
            "location": 47,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "data": [
                    "Dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "HapBleError.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "Optional[str]",
                    "str",
                    "None",
                    "int"
                ],
                "name": [
                    "str",
                    "None",
                    "int",
                    "Dict[str,str]",
                    "Optional[str]"
                ],
                "message": [
                    "None",
                    "Optional[int]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Tuple",
                    "Optional[tuple]"
                ]
            }
        },
        "HapBleError.__str__": {
            "name": "__str__",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyhomekit-master/pyhomekit/__init__.py": {},
    "pyhomekit-master/tests/test_pairing.py": {
        "hex_to_int": {
            "name": "hex_to_int",
            "location": 90,
            "return": [
                "int"
            ],
            "arguments": {
                "hex_str": [
                    "str"
                ]
            }
        },
        "test_SRP_test_vectors": {
            "name": "test_SRP_test_vectors",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyhomekit-master/tests/test_simple.py": {
        "test_success": {
            "name": "test_success",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyhomekit-master/tests/__init__.py": {}
}
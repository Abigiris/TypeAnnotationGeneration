{
    "pyhouse-master/setup.py": {},
    "pyhouse-master/pyhouse/__init__.py": {},
    "pyhouse-master/pyhouse/datalake/data_link.py": {
        "DataLink.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ],
                "session": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "DataLink.read": {
            "name": "read",
            "location": 12,
            "return": [
                "pyspark.sql.DataFrame",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataLink.write": {
            "name": "write",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "pyhouse-master/pyhouse/datalake/file_system_data_link.py": {
        "FileSystemDataLink.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "str",
                    "None",
                    "pyspark.sql.SparkSession",
                    "Optional[str]"
                ],
                "session": [
                    "str",
                    "None",
                    "pyspark.sql.SparkSession",
                    "Optional[str]"
                ],
                "path": [
                    "str",
                    "None",
                    "pyspark.sql.SparkSession",
                    "Optional[str]"
                ],
                "format": [
                    "str",
                    "bytes"
                ],
                "savemode": [
                    "str",
                    "bool",
                    "float"
                ],
                "partitioned_by": [
                    "str",
                    "bool",
                    "None",
                    "float"
                ],
                "options": [
                    "str",
                    "None",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ],
                "schema": [
                    "str",
                    "bool",
                    "None",
                    "float"
                ]
            }
        },
        "FileSystemDataLink.read": {
            "name": "read",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystemDataLink.write": {
            "name": "write",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "str",
                    "bytes",
                    "Union[commands.MutableCommand,types.CommandCoroutine]"
                ]
            }
        }
    },
    "pyhouse-master/pyhouse/datalake/hive_data_link.py": {
        "HiveDataLink.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "str",
                    "Dict[str,Any]",
                    "None",
                    "pyspark.sql.SparkSession",
                    "Optional[str]"
                ],
                "session": [
                    "str",
                    "Dict[str,Any]",
                    "None",
                    "pyspark.sql.SparkSession",
                    "Optional[str]"
                ],
                "path": [
                    "str",
                    "Dict[str,Any]",
                    "None",
                    "pyspark.sql.SparkSession",
                    "Optional[str]"
                ],
                "database": [
                    "str",
                    "bool",
                    "pandas.DataFrame"
                ],
                "table": [
                    "str",
                    "bool",
                    "pandas.DataFrame"
                ],
                "storage_format": [
                    "Text",
                    "str",
                    "int"
                ],
                "save_mode": [
                    "Text",
                    "str",
                    "bool",
                    "int",
                    "Union[int,str]"
                ],
                "partitioned_by": [
                    "str",
                    "None",
                    "bool",
                    "pandas.DataFrame"
                ],
                "overwrite_behavior": [
                    "Text",
                    "str",
                    "pandas.DataFrame",
                    "bool"
                ],
                "options": [
                    "str",
                    "None",
                    "List[str]",
                    "Dict",
                    "Optional[Union[int,str]]",
                    "int",
                    "bool",
                    "Optional[dict]"
                ]
            }
        },
        "HiveDataLink.read": {
            "name": "read",
            "location": 31,
            "return": [
                "str",
                "AsyncGenerator",
                "list",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HiveDataLink.write": {
            "name": "write",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "pyhouse-master/pyhouse/datalake/in_memory_datalink.py": {
        "InMemoryDataLink.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "str",
                    "bool"
                ],
                "session": [
                    "str",
                    "bool"
                ],
                "df": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "InMemoryDataLink.read": {
            "name": "read",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryDataLink.write": {
            "name": "write",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "pyhouse-master/pyhouse/datalake/jdbc_data_link.py": {
        "JdbcDataLink.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "str",
                    "None",
                    "pyspark.sql.SparkSession",
                    "Optional[str]"
                ],
                "session": [
                    "str",
                    "None",
                    "pyspark.sql.SparkSession",
                    "Optional[str]"
                ],
                "url": [
                    "List[str]",
                    "Optional[List[str]]",
                    "str",
                    "float",
                    "None",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "username": [
                    "List[str]",
                    "Optional[List[str]]",
                    "str",
                    "float",
                    "None",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "password": [
                    "List[str]",
                    "Optional[List[str]]",
                    "str",
                    "float",
                    "None",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "driver": [
                    "List[str]",
                    "Optional[List[str]]",
                    "str",
                    "float",
                    "None",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "table": [
                    "List[str]",
                    "Optional[List[str]]",
                    "str",
                    "float",
                    "None",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "save_mode": [
                    "Text",
                    "int",
                    "str",
                    "bool"
                ],
                "number_of_partitions": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "partition_column": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "JdbcDataLink.read": {
            "name": "read",
            "location": 34,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "JdbcDataLink.write": {
            "name": "write",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "str",
                    "int",
                    "Callable",
                    "pyspark.sql.DataFrame"
                ]
            }
        }
    },
    "pyhouse-master/pyhouse/datalake/kafka_data_link.py": {
        "KafkaDataLink.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "str",
                    "None",
                    "pyspark.sql.SparkSession",
                    "Optional[str]"
                ],
                "session": [
                    "str",
                    "None",
                    "pyspark.sql.SparkSession",
                    "Optional[str]"
                ],
                "topic": [
                    "bool",
                    "bytes",
                    "Dict[str,str]",
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "bootstrap_servers": [
                    "Callable"
                ],
                "options": [
                    "Optional[str]",
                    "None",
                    "bool",
                    "Dict",
                    "bytes",
                    "str"
                ]
            }
        },
        "KafkaDataLink.read": {
            "name": "read",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KafkaDataLink.write": {
            "name": "write",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "str",
                    "List[int]",
                    "Dict[str,Any]",
                    "Callable"
                ]
            }
        }
    },
    "pyhouse-master/pyhouse/datalake/path_based_data_link.py": {
        "PathBasedDataLink.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "str",
                    "List[str]",
                    "pyspark.sql.SparkSession",
                    "Tuple[Union[str,...]]",
                    "Union[str,List[str],Tuple[str,...]]"
                ],
                "session": [
                    "str",
                    "List[str]",
                    "pyspark.sql.SparkSession",
                    "Tuple[Union[str,...]]",
                    "Union[str,List[str],Tuple[str,...]]"
                ],
                "path": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "pyhouse-master/pyhouse/datalake/snowflake_data_link.py": {
        "SnowflakeDataLink.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "str",
                    "None",
                    "pyspark.sql.SparkSession",
                    "Optional[str]"
                ],
                "session": [
                    "str",
                    "None",
                    "pyspark.sql.SparkSession",
                    "Optional[str]"
                ],
                "account": [
                    "str",
                    "List[libkol.Item]",
                    "Optional[str]",
                    "None"
                ],
                "username": [
                    "str",
                    "List[libkol.Item]",
                    "Optional[str]",
                    "None"
                ],
                "password": [
                    "str",
                    "List[libkol.Item]",
                    "Optional[str]",
                    "None"
                ],
                "database": [
                    "str",
                    "List[libkol.Item]",
                    "Optional[str]",
                    "None"
                ],
                "schema": [
                    "str",
                    "List[libkol.Item]",
                    "Optional[str]",
                    "None"
                ],
                "table": [
                    "str",
                    "List[libkol.Item]",
                    "Optional[str]",
                    "None"
                ],
                "warehouse": [
                    "str",
                    "List[libkol.Item]",
                    "Optional[str]",
                    "None"
                ],
                "role": [
                    "str",
                    "List[libkol.Item]",
                    "Optional[str]",
                    "None"
                ],
                "parallelism": [
                    "int",
                    "str",
                    "Optional[str]",
                    "List[libkol.Item]"
                ],
                "save_mode": [
                    "Text",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "SnowflakeDataLink.read": {
            "name": "read",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnowflakeDataLink.write": {
            "name": "write",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "Union[Sequence[str],Sequence[int]]",
                    "Sequence[str]",
                    "Iterable[str]",
                    "str",
                    "Sequence[int]",
                    "pyspark.sql.DataFrame"
                ]
            }
        }
    },
    "pyhouse-master/pyhouse/datalake/__init__.py": {
        "sink": {
            "name": "sink",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dl": [
                    "str",
                    "IO"
                ]
            }
        },
        "transform": {
            "name": "transform",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "pyhouse-master/pyhouse/paramstore/aws_parameter_store.py": {
        "AwsParameterStore.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "region_name": [
                    "Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "AwsParameterStore.get_param": {
            "name": "get_param",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "AwsParameterStore.set_param": {
            "name": "set_param",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "bool"
                ],
                "overwrite": [
                    "bool",
                    "str"
                ],
                "secure": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        }
    },
    "pyhouse-master/pyhouse/paramstore/file_parameter_store.py": {
        "FileParameterStore.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "FileParameterStore.get_param": {
            "name": "get_param",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "bool",
                    "str"
                ]
            }
        },
        "FileParameterStore.set_param": {
            "name": "set_param",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "str",
                    "int",
                    "List[str]",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "int",
                    "List[str]",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "overwrite": [
                    "bool",
                    "str",
                    "int",
                    "Optional[type]"
                ],
                "secure": [
                    "bool",
                    "str",
                    "int",
                    "Optional[type]"
                ]
            }
        }
    },
    "pyhouse-master/pyhouse/paramstore/parameter_store.py": {
        "ParameterStore.get_param": {
            "name": "get_param",
            "location": 6,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "bool",
                    "str",
                    "Dict",
                    "T"
                ]
            }
        },
        "ParameterStore.set_param": {
            "name": "set_param",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "bool",
                    "str",
                    "int",
                    "Type",
                    "Optional[type]",
                    "None"
                ],
                "value": [
                    "bool",
                    "str",
                    "int",
                    "Type",
                    "Optional[type]",
                    "None"
                ],
                "overwrite": [
                    "bool",
                    "str",
                    "int",
                    "Optional[type]"
                ],
                "secure": [
                    "bool",
                    "str",
                    "int",
                    "Optional[type]"
                ]
            }
        }
    },
    "pyhouse-master/pyhouse/paramstore/__init__.py": {},
    "pyhouse-master/pyhouse/spark/spark_sessions.py": {
        "SparkSessions.enable_hive_support": {
            "name": "enable_hive_support",
            "location": 9,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkSessions.spark_options": {
            "name": "spark_options",
            "location": 13,
            "return": [
                "Dict[str,str]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkSessions.default_configuration": {
            "name": "default_configuration",
            "location": 17,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {}
        },
        "SparkSessions.spark_session_builder": {
            "name": "spark_session_builder",
            "location": 26,
            "return": [
                "bool",
                "Optional[str]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkSessions.spark": {
            "name": "spark",
            "location": 36,
            "return": [
                "Optional[str]",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyhouse-master/pyhouse/spark/__init__.py": {},
    "pyhouse-master/tests/test_datalake_zones.py": {
        "relative_to_file": {
            "name": "relative_to_file",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "Ingress.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "str",
                    "Dict",
                    "pyspark.sql.session.SparkSession"
                ],
                "session": [
                    "str",
                    "Dict",
                    "pyspark.sql.session.SparkSession"
                ]
            }
        },
        "Landing.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "str",
                    "Dict",
                    "pyspark.sql.session.SparkSession",
                    "List[list[str]]",
                    "List[List[str]]"
                ],
                "session": [
                    "str",
                    "Dict",
                    "pyspark.sql.session.SparkSession",
                    "List[list[str]]",
                    "List[List[str]]"
                ]
            }
        },
        "TestDatalakeZones.test_ingest_sample_data": {
            "name": "test_ingest_sample_data",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyhouse-master/tests/test_file_parameter_store.py": {
        "TestFileParameterStore.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileParameterStore.tearDown": {
            "name": "tearDown",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileParameterStore.test_get_param": {
            "name": "test_get_param",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileParameterStore.test_set_param": {
            "name": "test_set_param",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyhouse-master/tests/data/__init__.py": {}
}
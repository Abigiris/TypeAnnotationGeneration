{
    "pylama-master/dummy.py": {
        "Message.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "loc": [
                    "int",
                    "str",
                    "bool",
                    "None",
                    "List[Any]",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[List[Any]]",
                    "Optional[list]"
                ],
                "use_column": [
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Iterable[str]",
                    "str",
                    "List[str]",
                    "Optional[float]"
                ]
            }
        },
        "Message.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnusedImport.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "lineno": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "RedefinedWhileUnused.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "lineno": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "name": [
                    "str"
                ],
                "orig_lineno": [
                    "str"
                ]
            }
        },
        "ImportShadowedByLoopVar.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "lineno": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "name": [
                    "str"
                ],
                "orig_lineno": [
                    "str"
                ]
            }
        },
        "ImportStarUsed.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "lineno": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "modname": [
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "UndefinedName.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "lineno": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "UndefinedExport.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "lineno": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "UndefinedLocal.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "lineno": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "name": [
                    "str"
                ],
                "orig_lineno": [
                    "str"
                ]
            }
        },
        "DuplicateArgument.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "lineno": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "RedefinedFunction.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "lineno": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "name": [
                    "str"
                ],
                "orig_lineno": [
                    "str"
                ]
            }
        },
        "LateFutureImport.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "lineno": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "names": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "UnusedVariable.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "lineno": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "names": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "BadTyping.bad_method": {
            "name": "bad_method",
            "location": 136,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pylama-master/setup.py": {
        "parse_requirements": {
            "name": "parse_requirements",
            "location": 11,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "pathlib.PurePath"
                ]
            }
        }
    },
    "pylama-master/docs/conf.py": {},
    "pylama-master/pylama/check_async.py": {
        "worker": {
            "name": "worker",
            "location": 24,
            "return": [
                "list"
            ],
            "arguments": {
                "params": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "check_async": {
            "name": "check_async",
            "location": 30,
            "return": [
                "list"
            ],
            "arguments": {
                "paths": [
                    "Dict",
                    "str",
                    "pathlib.Path",
                    "int",
                    "Optional[pathlib.Path]",
                    "pathlib2.Path",
                    "Union[str,pathlib.Path]",
                    "Optional[str]"
                ],
                "code": [
                    "None",
                    "int",
                    "pathlib.Path",
                    "Dict",
                    "str",
                    "Optional[pathlib.Path]",
                    "pathlib2.Path",
                    "Union[str,pathlib.Path]",
                    "Optional[str]"
                ],
                "options": [
                    "None",
                    "int",
                    "pathlib.Path",
                    "Dict",
                    "str",
                    "Optional[pathlib.Path]",
                    "pathlib2.Path",
                    "Union[str,pathlib.Path]",
                    "Optional[str]"
                ],
                "rootdir": [
                    "None",
                    "int",
                    "pathlib.Path",
                    "Dict",
                    "str",
                    "Optional[pathlib.Path]",
                    "pathlib2.Path",
                    "Union[str,pathlib.Path]",
                    "Optional[str]"
                ]
            }
        }
    },
    "pylama-master/pylama/config.py": {
        "split_csp_str": {
            "name": "split_csp_str",
            "location": 39,
            "return": [
                "set"
            ],
            "arguments": {
                "val": [
                    "str",
                    "Dict",
                    "bytes",
                    "bool",
                    "Union[str,Dict[str,Any]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "prepare_sorter": {
            "name": "prepare_sorter",
            "location": 46,
            "return": [
                "Optional[Dict[(Any, int)]]"
            ],
            "arguments": {
                "val": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "parse_linters": {
            "name": "parse_linters",
            "location": 55,
            "return": [
                "list"
            ],
            "arguments": {
                "linters": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "get_default_config_file": {
            "name": "get_default_config_file",
            "location": 60,
            "return": [
                "None",
                "str",
                "Tuple",
                "pathlib.Path",
                "Tuple[str]"
            ],
            "arguments": {
                "rootdir": [
                    "str",
                    "Optional[str]",
                    "Optional[pathlib.Path]",
                    "pathlib.Path"
                ]
            }
        },
        "setup_parser": {
            "name": "setup_parser",
            "location": 76,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "parse_options": {
            "name": "parse_options",
            "location": 180,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {
                "args": [
                    "None"
                ],
                "config": [
                    "bool",
                    "Mapping[str,Any]",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[List[str]]"
                ],
                "rootdir": [
                    "Optional[Dict[str, int]]",
                    "Mapping"
                ]
            }
        },
        "process_value": {
            "name": "process_value",
            "location": 240,
            "return": [
                "bool",
                "int",
                "str",
                "List[Callable[[List],None]]"
            ],
            "arguments": {
                "actions": [
                    "Dict[str,Type]",
                    "str",
                    "Dict[str,type]",
                    "Dict[str,Any]"
                ],
                "name": [
                    "str",
                    "Dict[str,Type]",
                    "Dict[str,type]",
                    "Dict[str,Any]"
                ],
                "value": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "List[str]",
                    "Optional[bytes]"
                ]
            }
        },
        "get_config": {
            "name": "get_config",
            "location": 256,
            "return": [
                "inirama.Namespace"
            ],
            "arguments": {
                "ini_path": [
                    "None",
                    "str",
                    "pathlib.Path",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "rootdir": [
                    "None",
                    "str",
                    "pathlib.Path",
                    "Sequence[str]",
                    "Optional[str]"
                ]
            }
        },
        "setup_logger": {
            "name": "setup_logger",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "options": [
                    "int",
                    "str",
                    "BaseException",
                    "logging.Logger",
                    "bool"
                ]
            }
        },
        "fix_pathname_sep": {
            "name": "fix_pathname_sep",
            "location": 283,
            "return": [
                "str"
            ],
            "arguments": {
                "val": [
                    "Dict",
                    "str",
                    "Callable[T,None]",
                    "Callable[[T],None]",
                    "Callable[[List],List[str]]"
                ]
            }
        },
        "_Default.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "None",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "_Default.__str__": {
            "name": "__str__",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Default.__repr__": {
            "name": "__repr__",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pylama-master/pylama/context.py": {
        "RunContext.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[Union[Dict, str, int, bytes]]"
                ],
                "source": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[Any]",
                    "Dict[str, Any]"
                ],
                "options": [
                    "argparse.Namespace"
                ]
            }
        },
        "RunContext.__enter__": {
            "name": "__enter__",
            "location": 84,
            "return": [
                "RunContext"
            ],
            "arguments": {
                "self": [
                    "_TRunContext@@RunContext@@"
                ]
            }
        },
        "RunContext.__exit__": {
            "name": "__exit__",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "etype": [
                    "Optional[Type[BaseException]]"
                ],
                "evalue": [
                    "Optional[BaseException]"
                ],
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "RunContext.source": {
            "name": "source",
            "location": 113,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]",
                "norfs.fs.base.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunContext.lines": {
            "name": "lines",
            "location": 120,
            "return": [
                "str",
                "Sequence[str]",
                "List[cmk.utils.type_defs.HostName]",
                "Set[str]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunContext.ast": {
            "name": "ast",
            "location": 127,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunContext.temp_filename": {
            "name": "temp_filename",
            "location": 134,
            "return": [
                "str",
                "cmk.utils.type_defs.CheckPluginName"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunContext.update_params": {
            "name": "update_params",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ignore": [
                    "List[str]",
                    "bool",
                    "Union[str, Dict[str, Any]]",
                    "str"
                ],
                "select": [
                    "List[str]",
                    "bool",
                    "Union[str, Dict[str, Any]]",
                    "str"
                ],
                "linters": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "skip": [
                    "Optional[int]",
                    "int",
                    "Union[str, int]",
                    "Optional[str]"
                ]
            }
        },
        "RunContext.get_params": {
            "name": "get_params",
            "location": 165,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "RunContext.get_filter": {
            "name": "get_filter",
            "location": 174,
            "return": [
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "RunContext.push": {
            "name": "push",
            "location": 179,
            "return": [
                "Sequence[str]",
                "mypy.errors.Errors"
            ],
            "arguments": {
                "self": [],
                "filtrate": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "pylama-master/pylama/core.py": {
        "run": {
            "name": "run",
            "location": 15,
            "return": [
                "list"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Dict[str,Any]"
                ],
                "code": [
                    "str",
                    "None",
                    "bytes",
                    "Dict[str,Any]",
                    "int",
                    "List[int]"
                ],
                "rootdir": [
                    "str",
                    "pathlib.Path",
                    "Tuple[str]",
                    "Union[pathlib.Path, str]",
                    "Sequence[str]"
                ],
                "options": [
                    "str",
                    "None",
                    "List[str]",
                    "Optional[List[str]]",
                    "Path",
                    "Optional[pathlib.Path]"
                ]
            }
        }
    },
    "pylama-master/pylama/errors.py": {
        "remove_duplicates": {
            "name": "remove_duplicates",
            "location": 107,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "errors": [
                    "str",
                    "List[str]",
                    "Optional[Exception]",
                    "BaseException",
                    "Exception"
                ]
            }
        },
        "default_sorter": {
            "name": "default_sorter",
            "location": 119,
            "return": [
                "Callable[[Mapping], T]",
                "int",
                "float"
            ],
            "arguments": {
                "err": [
                    "Callable[[Mapping],T]",
                    "int",
                    "Callable[Mapping,T]",
                    "float"
                ]
            }
        },
        "Error.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Text"
                ],
                "col": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "lnum": [
                    "int",
                    "float",
                    "str"
                ],
                "type": [
                    "Tuple[str]",
                    "Optional[bool]"
                ],
                "text": [
                    "Text",
                    "str",
                    "Tuple[Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal]"
                ],
                "filename": [
                    "str",
                    "Text"
                ],
                "number": [
                    "Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Error.__repr__": {
            "name": "__repr__",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.format": {
            "name": "format",
            "location": 82,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Error.to_dict": {
            "name": "to_dict",
            "location": 94,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pylama-master/pylama/hook.py": {
        "run": {
            "name": "run",
            "location": 16,
            "return": [
                "Tuple[(int, List[bytes], List[bytes])]"
            ],
            "arguments": {
                "command": [
                    "str"
                ]
            }
        },
        "git_hook": {
            "name": "git_hook",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "error": [
                    "bool",
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "hg_hook": {
            "name": "hg_hook",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "bool",
                    "int"
                ],
                "repo": [
                    "str",
                    "IO[str]",
                    "dict"
                ],
                "node": [
                    "List",
                    "str",
                    "None",
                    "List[OrderedDict]"
                ]
            }
        },
        "install_git": {
            "name": "install_git",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "install_hg": {
            "name": "install_hg",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "install_hook": {
            "name": "install_hook",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "pylama-master/pylama/main.py": {
        "check_paths": {
            "name": "check_paths",
            "location": 25,
            "return": [
                "list"
            ],
            "arguments": {
                "paths": [
                    "str",
                    "pathlib.Path"
                ],
                "options": [
                    "str",
                    "pathlib.Path",
                    "Tuple[Union[str,...]]",
                    "None",
                    "Union[str,pathlib.Path]",
                    "Optional[Tuple[str,...]]",
                    "paradigm.catalog.Path",
                    "Optional[str]"
                ],
                "code": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Sequence[str]",
                    "List[str]",
                    "Optional[pathlib.Path]",
                    "Optional[List[str]]",
                    "pathlib.Path"
                ],
                "rootdir": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[Path]",
                    "Optional[pathlib.Path]",
                    "Path"
                ]
            }
        },
        "check_path": {
            "name": "check_path",
            "location": 73,
            "return": [
                "list"
            ],
            "arguments": {
                "options": [
                    "str",
                    "int",
                    "List[platform_resources.run.Run.Kinds]",
                    "List[Optional[bytes]]",
                    "None",
                    "Optional[List[Any]]",
                    "raiden.utils.PaymentID",
                    "Optional[bool]"
                ],
                "rootdir": [
                    "str",
                    "None",
                    "int",
                    "List[platform_resources.run.Run.Kinds]",
                    "List[Optional[bytes]]",
                    "Optional[List[Any]]",
                    "raiden.utils.PaymentID",
                    "Optional[bool]"
                ],
                "candidates": [
                    "str",
                    "None",
                    "int",
                    "List[platform_resources.run.Run.Kinds]",
                    "List[Optional[bytes]]",
                    "Optional[List[Any]]",
                    "raiden.utils.PaymentID",
                    "Optional[bool]"
                ],
                "code": [
                    "str",
                    "None",
                    "int",
                    "List[platform_resources.run.Run.Kinds]",
                    "List[Optional[bytes]]",
                    "Optional[List[Any]]",
                    "raiden.utils.PaymentID",
                    "Optional[bool]"
                ]
            }
        },
        "shell": {
            "name": "shell",
            "location": 92,
            "return": [
                "Optional[list]"
            ],
            "arguments": {
                "args": [
                    "None"
                ],
                "error": [
                    "bool",
                    "str",
                    "Exception",
                    "BaseException"
                ]
            }
        },
        "display_errors": {
            "name": "display_errors",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "errors": [
                    "Dict[scripts.node_integration_tests.playbooks.test_config_base.NodeId,pathlib.Path]",
                    "str",
                    "Dict[str,str]",
                    "pathlib.Path",
                    "Optional[Dict[str,str]]"
                ],
                "options": [
                    "str",
                    "Mapping",
                    "Dict",
                    "Mapping[str,Any]",
                    "Dict[str,dict[str,str]]",
                    "argparse.Namespace",
                    "Dict[str,Dict[str,str]]",
                    "config.Config"
                ]
            }
        }
    },
    "pylama-master/pylama/pytest.py": {
        "pytest_load_initial_conftests": {
            "name": "pytest_load_initial_conftests",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "early_config": [
                    "nucypher.config.characters.UrsulaConfiguration",
                    "str",
                    "Callable",
                    "dict"
                ]
            }
        },
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "pytest_sessionstart": {
            "name": "pytest_sessionstart",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "pytest_sessionfinish": {
            "name": "pytest_sessionfinish",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "pytest_collect_file": {
            "name": "pytest_collect_file",
            "location": 44,
            "return": [
                "None",
                "str",
                "bool",
                "Dict[str,Any]",
                "pathlib.Path",
                "Optional[IO[str]]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "int",
                    "path.Path",
                    "Union[str,int]",
                    "cerulean.path.AbstractPath"
                ],
                "parent": [
                    "bool",
                    "Dict",
                    "pathlib.Path",
                    "waterbutler.core.path.WaterButlerPath"
                ]
            }
        },
        "check_file": {
            "name": "check_file",
            "location": 97,
            "return": [
                "list"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "cerulean.path.AbstractPath",
                    "Union[pathlib.Path,str]"
                ]
            }
        },
        "PylamaFile.collect": {
            "name": "collect",
            "location": 56,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "PylamaItem.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PylamaItem.setup": {
            "name": "setup",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PylamaItem.runtest": {
            "name": "runtest",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PylamaItem.repr_failure": {
            "name": "repr_failure",
            "location": 91,
            "return": [
                "int",
                "Optional[int]",
                "pathlib.Path",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "excinfo": [
                    "Optional[str]",
                    "float"
                ],
                "style": [
                    "int",
                    "Callable",
                    "None",
                    "str"
                ]
            }
        }
    },
    "pylama-master/pylama/utils.py": {
        "get_lines": {
            "name": "get_lines",
            "location": 8,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "value": [
                    "float",
                    "bool",
                    "Iterable[object]"
                ]
            }
        },
        "read": {
            "name": "read",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "read_stdin": {
            "name": "read_stdin",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "pylama-master/pylama/__init__.py": {},
    "pylama-master/pylama/__main__.py": {},
    "pylama-master/pylama/libs/inirama.py": {
        "Scanner.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[str]",
                    "Callable",
                    "list",
                    "logging.Logger"
                ],
                "ignore": [
                    "str",
                    "Optional[str]",
                    "Callable",
                    "list",
                    "logging.Logger"
                ],
                "patterns": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "list",
                    "IO"
                ]
            }
        },
        "Scanner.reset": {
            "name": "reset",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Scanner.scan": {
            "name": "scan",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.pre_scan": {
            "name": "pre_scan",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.__repr__": {
            "name": "__repr__",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "INIScanner.pre_scan": {
            "name": "pre_scan",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Section.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Section.__setitem__": {
            "name": "__setitem__",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str",
                    "Union[Mapping[str, Any], str, None]"
                ]
            }
        },
        "InterpolationSection.get": {
            "name": "get",
            "location": 166,
            "return": [
                "str",
                "Optional[str]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "default": [
                    "str",
                    "bool"
                ]
            }
        },
        "InterpolationSection.__interpolate__": {
            "name": "__interpolate__",
            "location": 177,
            "return": [
                "str",
                "Optional[str]",
                "Optional[bool]",
                "List[AnyStr]"
            ],
            "arguments": {
                "self": [],
                "math": [
                    "bool",
                    "str",
                    "Mapping[str, str]",
                    "dict",
                    "Callable"
                ]
            }
        },
        "InterpolationSection.__getitem__": {
            "name": "__getitem__",
            "location": 184,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "raw": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "InterpolationSection.iteritems": {
            "name": "iteritems",
            "location": 198,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "List[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "Namespace.__init__": {
            "name": "__init__",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.default": {
            "name": "default",
            "location": 245,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.read": {
            "name": "read",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.write": {
            "name": "write",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "IO[str]"
                ]
            }
        },
        "Namespace.parse": {
            "name": "parse",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "TextIO",
                    "str",
                    "list",
                    "float",
                    "Type['GenericList']"
                ],
                "update": [
                    "str",
                    "Callable",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "Namespace.__getitem__": {
            "name": "__getitem__",
            "location": 323,
            "return": [
                "Section"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[Union[str, int]]"
                ]
            }
        },
        "Namespace.__contains__": {
            "name": "__contains__",
            "location": 333,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "Namespace.__repr__": {
            "name": "__repr__",
            "location": 336,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pylama-master/pylama/libs/__init__.py": {},
    "pylama-master/pylama/lint/pylama_eradicate.py": {
        "Linter.run_check": {
            "name": "run_check",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        }
    },
    "pylama-master/pylama/lint/pylama_fake.py": {
        "Linter.run": {
            "name": "run",
            "location": 15,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "_path": [
                    "str"
                ]
            }
        }
    },
    "pylama-master/pylama/lint/pylama_mccabe.py": {
        "Linter.add_args": {
            "name": "add_args",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,Any]",
                    "bool",
                    "argparse.ArgumentParser",
                    "argparse._SubParsersAction"
                ],
                "parser": [
                    "argparse.ArgumentParser",
                    "bool"
                ]
            }
        },
        "Linter.run_check": {
            "name": "run_check",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        }
    },
    "pylama-master/pylama/lint/pylama_mypy.py": {
        "Linter.run_check": {
            "name": "run_check",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "_MyPyMessage.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        }
    },
    "pylama-master/pylama/lint/pylama_pycodestyle.py": {
        "Linter.run_check": {
            "name": "run_check",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "_PycodestyleReport.error": {
            "name": "error",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line_number": [
                    "str",
                    "bool"
                ],
                "offset": [
                    "bool",
                    "str"
                ],
                "text": [
                    "str"
                ],
                "_": [
                    "str"
                ]
            }
        }
    },
    "pylama-master/pylama/lint/pylama_pydocstyle.py": {
        "Linter.add_args": {
            "name": "add_args",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,Any]",
                    "bool",
                    "argparse.ArgumentParser",
                    "argparse._SubParsersAction"
                ],
                "parser": [
                    "argparse.ArgumentParser",
                    "argparse.Namespace"
                ]
            }
        },
        "Linter.run_check": {
            "name": "run_check",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        }
    },
    "pylama-master/pylama/lint/pylama_pyflakes.py": {
        "Linter.run_check": {
            "name": "run_check",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        }
    },
    "pylama-master/pylama/lint/pylama_pylint.py": {
        "Linter.add_args": {
            "name": "add_args",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,Any]",
                    "bool",
                    "argparse.ArgumentParser",
                    "argparse._SubParsersAction"
                ],
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "Linter.run_check": {
            "name": "run_check",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "_Params.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "Dict",
                    "Dict[str,Any]",
                    "List",
                    "Mapping",
                    "Mapping[str,Any]"
                ]
            }
        },
        "_Params.prepare_value": {
            "name": "prepare_value",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "List",
                    "str",
                    "Union[list,str]",
                    "List[list[Any]]",
                    "List[List[Any]]"
                ]
            }
        },
        "_Params.to_attrs": {
            "name": "to_attrs",
            "location": 97,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Params.__str__": {
            "name": "__str__",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Params.__repr__": {
            "name": "__repr__",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Linter.run_check.Reporter._display": {
            "name": "_display",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Linter.run_check.Reporter.handle_message": {
            "name": "handle_message",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "pylama-master/pylama/lint/pylama_radon.py": {
        "Linter.add_args": {
            "name": "add_args",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,Any]",
                    "bool",
                    "argparse.ArgumentParser",
                    "argparse._SubParsersAction"
                ],
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "Linter.run_check": {
            "name": "run_check",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "bool"
                ]
            }
        }
    },
    "pylama-master/pylama/lint/pylama_vulture.py": {
        "parse_params": {
            "name": "parse_params",
            "location": 62,
            "return": [
                "List[Union[(str, _T0)]]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bytes"
                ],
                "params": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Linter.add_args": {
            "name": "add_args",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,Any]",
                    "bool",
                    "argparse.ArgumentParser",
                    "argparse._SubParsersAction",
                    "django.core.managemenbase.CommandParser"
                ],
                "parser": [
                    "argparse.ArgumentParser",
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Linter.run_check": {
            "name": "run_check",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "bool",
                    "Exception"
                ]
            }
        }
    },
    "pylama-master/pylama/lint/__init__.py": {
        "LinterMeta.__new__": {
            "name": "__new__",
            "location": 21,
            "return": [
                "str",
                "List[str]",
                "Callable[[str],T]",
                "int"
            ],
            "arguments": {
                "mcs": [
                    "Type[LinterMeta]"
                ],
                "name": [
                    "Type",
                    "str"
                ],
                "bases": [
                    "Dict[str,str]",
                    "str",
                    "Type"
                ],
                "params": [
                    "Dict[str,str]",
                    "str",
                    "Type"
                ]
            }
        },
        "Linter.add_args": {
            "name": "add_args",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "Callable",
                    "bool",
                    "Iterable",
                    "List[str]"
                ],
                "_": [
                    "Type",
                    "Callable",
                    "bool",
                    "Iterable",
                    "List[str]"
                ]
            }
        },
        "Linter.run": {
            "name": "run",
            "location": 41,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "_path": [
                    "List[pathlib.Path]",
                    "str",
                    "bool",
                    "Sequence",
                    "List[int]",
                    "pathlib.Path",
                    "Iterable[pathlib.Path]"
                ]
            }
        },
        "LinterV2.run_check": {
            "name": "run_check",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        }
    },
    "pylama-master/tests/conftest.py": {
        "parse_options": {
            "name": "parse_options",
            "location": 8,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "parse_args": {
            "name": "parse_args",
            "location": 15,
            "return": [
                "str",
                "bool",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "parse_options": [
                    "Tuple[pathlib.Path]",
                    "str"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 23,
            "return": [
                "bool",
                "Awaitable",
                "Iterable[str]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "source": {
            "name": "source",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "context": {
            "name": "context",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "source": [
                    "bool",
                    "Sequence[str]",
                    "str",
                    "List",
                    "Optional[str]",
                    "None"
                ],
                "parse_args": [
                    "bool",
                    "Sequence[str]",
                    "str",
                    "List",
                    "Optional[str]",
                    "None"
                ],
                "request": [
                    "bool",
                    "Sequence[str]",
                    "str",
                    "List",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "parse_args.parse_args_": {
            "name": "parse_args_",
            "location": 16,
            "return": [
                "Tuple[float, float]",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "args": []
            }
        },
        "context.fabric": {
            "name": "fabric",
            "location": 39,
            "return": [
                "RunContext",
                "str",
                "Exception"
            ],
            "arguments": {}
        }
    },
    "pylama-master/tests/test_config.py": {
        "test_config": {
            "name": "test_config",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {
                "parse_options": [
                    "str"
                ]
            }
        },
        "test_parse_options": {
            "name": "test_parse_options",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "parse_options": [
                    "str"
                ]
            }
        },
        "test_from_stdin": {
            "name": "test_from_stdin",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "parse_options": [
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "pylama-master/tests/test_context.py": {
        "test_modeline": {
            "name": "test_modeline",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str"
                ]
            }
        },
        "test_filter": {
            "name": "test_filter",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "parse_args": [
                    "Dict[str,Any]",
                    "List[dict]",
                    "Set[str]"
                ],
                "context": [
                    "str",
                    "Dict[str,Any]",
                    "Container",
                    "T",
                    "Container[T]"
                ]
            }
        },
        "test_context_doesnt_suppress_exception": {
            "name": "test_context_doesnt_suppress_exception",
            "location": 40,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "context": [
                    "str"
                ]
            }
        },
        "test_get_params_doesnt_fail_on_subsequent_invocation": {
            "name": "test_get_params_doesnt_fail_on_subsequent_invocation",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "Type[Any]",
                    "Dict[str,object]",
                    "Type"
                ]
            }
        },
        "test_context_linters_params": {
            "name": "test_context_linters_params",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_context_does_not_change_global_options": {
            "name": "test_context_does_not_change_global_options",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [],
                "parse_args": [
                    "Dict",
                    "int"
                ]
            }
        }
    },
    "pylama-master/tests/test_core.py": {
        "test_remove_duplicates": {
            "name": "test_remove_duplicates",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_checkpath": {
            "name": "test_checkpath",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "parse_options": [
                    "str",
                    "Callable"
                ]
            }
        },
        "test_run_with_code": {
            "name": "test_run_with_code",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "run": [
                    "Dict[str,Any]",
                    "str",
                    "IO",
                    "Dict[str,str]"
                ],
                "parse_options": [
                    "List[dict]",
                    "MutableMapping[str,Any]",
                    "MutableMapping"
                ]
            }
        },
        "test_async": {
            "name": "test_async",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "parse_options": [
                    "Optional[List[str]]",
                    "List[str]",
                    "bool",
                    "Optional[Dict]",
                    "str",
                    "None",
                    "Dict"
                ]
            }
        },
        "test_errors": {
            "name": "test_errors",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pylama-master/tests/test_linters.py": {
        "test_skip_optional_if_not_installed": {
            "name": "test_skip_optional_if_not_installed",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mccabe": {
            "name": "test_mccabe",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_pydocstyle": {
            "name": "test_pydocstyle",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "Exception",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_pycodestyle": {
            "name": "test_pycodestyle",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "Exception",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_pyflakes": {
            "name": "test_pyflakes",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_eradicate": {
            "name": "test_eradicate",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_mypy": {
            "name": "test_mypy",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_radon": {
            "name": "test_radon",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_pylint": {
            "name": "test_pylint",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_quotes": {
            "name": "test_quotes",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "test_vulture": {
            "name": "test_vulture",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        }
    },
    "pylama-master/tests/test_shell.py": {
        "test_shell": {
            "name": "test_shell",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sort": {
            "name": "test_sort",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "parse_options": [
                    "str",
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_linters_params": {
            "name": "test_linters_params",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "parse_options": [
                    "Dict[str,Any]",
                    "Dict"
                ],
                "run": [
                    "str",
                    "Callable"
                ]
            }
        },
        "test_ignore_select": {
            "name": "test_ignore_select",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "parse_options": [
                    "bool"
                ],
                "run": [
                    "str",
                    "int",
                    "Tuple[str,str]",
                    "Mapping",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "test_skip": {
            "name": "test_skip",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "parse_options": [
                    "bool"
                ],
                "run": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ]
            }
        },
        "test_stdin": {
            "name": "test_stdin",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "bytes",
                    "bool",
                    "str",
                    "io.BytesIO"
                ],
                "parse_args": [
                    "Dict",
                    "int"
                ]
            }
        }
    },
    "pylama-master/tests/test_vcs.py": {
        "test_git_hook": {
            "name": "test_git_hook",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hg_hook": {
            "name": "test_hg_hook",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pylama-master/tests/__init__.py": {}
}
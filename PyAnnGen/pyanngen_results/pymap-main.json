{
    "pymap-main/setup.py": {},
    "pymap-main/doc/source/conf.py": {},
    "pymap-main/pymap/concurrent.py": {
        "Subsystem.for_executor": {
            "name": "for_executor",
            "location": 42,
            "return": [
                "Subsystem"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSubsystem]"
                ],
                "executor": [
                    "str",
                    "T",
                    "Optional[Any]",
                    "Union[int, str, bool]",
                    "bool"
                ]
            }
        },
        "Subsystem.for_asyncio": {
            "name": "for_asyncio",
            "location": 59,
            "return": [
                "Subsystem"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSubsystem]"
                ]
            }
        },
        "Subsystem.for_threading": {
            "name": "for_threading",
            "location": 64,
            "return": [
                "Subsystem"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSubsystem]"
                ],
                "executor": [
                    "concurrent.futures.thread.ThreadPoolExecutor"
                ]
            }
        },
        "Subsystem.subsystem": {
            "name": "subsystem",
            "location": 70,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subsystem.execute": {
            "name": "execute",
            "location": 75,
            "return": [
                "typing.Awaitable[RetT]"
            ],
            "arguments": {
                "self": [],
                "future": [
                    "typing.Awaitable[RetT]"
                ]
            }
        },
        "Subsystem.new_rwlock": {
            "name": "new_rwlock",
            "location": 89,
            "return": [
                "ReadWriteLock"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subsystem.new_event": {
            "name": "new_event",
            "location": 94,
            "return": [
                "Event"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AsyncioSubsystem.subsystem": {
            "name": "subsystem",
            "location": 102,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AsyncioSubsystem.execute": {
            "name": "execute",
            "location": 105,
            "return": [
                "typing.Awaitable[RetT]"
            ],
            "arguments": {
                "self": [],
                "future": [
                    "typing.Awaitable[RetT]"
                ]
            }
        },
        "_AsyncioSubsystem.new_rwlock": {
            "name": "new_rwlock",
            "location": 108,
            "return": [
                "_AsyncioReadWriteLock"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AsyncioSubsystem.new_event": {
            "name": "new_event",
            "location": 111,
            "return": [
                "_AsyncioEvent"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ThreadingSubsystem.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "executor": [
                    "concurrent.futures.thread.ThreadPoolExecutor"
                ]
            }
        },
        "_ThreadingSubsystem.subsystem": {
            "name": "subsystem",
            "location": 128,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ThreadingSubsystem._run_in_thread": {
            "name": "_run_in_thread",
            "location": 137,
            "return": [
                "RetT"
            ],
            "arguments": {
                "self": [],
                "future": [
                    "typing.Awaitable[RetT]"
                ],
                "ctx": [
                    "contextvars.Context"
                ]
            }
        },
        "_ThreadingSubsystem.new_rwlock": {
            "name": "new_rwlock",
            "location": 142,
            "return": [
                "hreadingReadWriteLock"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ThreadingSubsystem.new_event": {
            "name": "new_event",
            "location": 145,
            "return": [
                "hreadingEvent"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadWriteLock.for_asyncio": {
            "name": "for_asyncio",
            "location": 153,
            "return": [
                "ReadWriteLock"
            ],
            "arguments": {
                "cls": [
                    "Type[_TReadWriteLock]"
                ]
            }
        },
        "ReadWriteLock.for_threading": {
            "name": "for_threading",
            "location": 158,
            "return": [
                "ReadWriteLock"
            ],
            "arguments": {
                "cls": [
                    "Type[_TReadWriteLock]"
                ]
            }
        },
        "ReadWriteLock.subsystem": {
            "name": "subsystem",
            "location": 164,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadWriteLock.read_lock": {
            "name": "read_lock",
            "location": 172,
            "return": [
                "AsyncContextManager[None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadWriteLock.write_lock": {
            "name": "write_lock",
            "location": 179,
            "return": [
                "AsyncContextManager[None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.for_asyncio": {
            "name": "for_asyncio",
            "location": 193,
            "return": [
                "Event"
            ],
            "arguments": {
                "cls": [
                    "Type[_TEvent]"
                ]
            }
        },
        "Event.for_threading": {
            "name": "for_threading",
            "location": 198,
            "return": [
                "Event"
            ],
            "arguments": {
                "cls": [
                    "Type[_TEvent]"
                ]
            }
        },
        "Event.subsystem": {
            "name": "subsystem",
            "location": 204,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.or_event": {
            "name": "or_event",
            "location": 212,
            "return": [
                "EventT"
            ],
            "arguments": {
                "self": [
                    "EventT"
                ]
            }
        },
        "Event.is_set": {
            "name": "is_set",
            "location": 220,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.set": {
            "name": "set",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.clear": {
            "name": "clear",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AsyncioReadWriteLock.__init__": {
            "name": "__init__",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AsyncioReadWriteLock.subsystem": {
            "name": "subsystem",
            "location": 254,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ThreadingReadWriteLock.__init__": {
            "name": "__init__",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ThreadingReadWriteLock.subsystem": {
            "name": "subsystem",
            "location": 292,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ThreadingReadWriteLock._acquire_read": {
            "name": "_acquire_read",
            "location": 295,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ThreadingReadWriteLock._release_read": {
            "name": "_release_read",
            "location": 300,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLock.__init__": {
            "name": "__init__",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "expiration": [
                    "float"
                ],
                "read_retry_delay": [
                    "typing.Sequence[float]"
                ],
                "write_retry_delay": [
                    "typing.Sequence[float]"
                ]
            }
        },
        "FileLock.subsystem": {
            "name": "subsystem",
            "location": 354,
            "return": [
                "str",
                "TextIO",
                "BinaryIO",
                "py._path.local.LocalPath"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLock._check_lock": {
            "name": "_check_lock",
            "location": 358,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLock._try_lock": {
            "name": "_try_lock",
            "location": 372,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLock._unlock": {
            "name": "_unlock",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AsyncioEvent.__init__": {
            "name": "__init__",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AsyncioEvent.subsystem": {
            "name": "subsystem",
            "location": 428,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AsyncioEvent.or_event": {
            "name": "or_event",
            "location": 431,
            "return": [
                "AsyncioEvent"
            ],
            "arguments": {
                "self": [
                    "_T_AsyncioEvent"
                ]
            }
        },
        "_AsyncioEvent.is_set": {
            "name": "is_set",
            "location": 438,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AsyncioEvent.set": {
            "name": "set",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AsyncioEvent.clear": {
            "name": "clear",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ThreadingEvent.__init__": {
            "name": "__init__",
            "location": 459,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ThreadingEvent.subsystem": {
            "name": "subsystem",
            "location": 465,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ThreadingEvent.or_event": {
            "name": "or_event",
            "location": 468,
            "return": [
                "hreadingEvent"
            ],
            "arguments": {
                "self": [
                    "_T_ThreadingEvent"
                ]
            }
        },
        "_ThreadingEvent.is_set": {
            "name": "is_set",
            "location": 475,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ThreadingEvent.set": {
            "name": "set",
            "location": 478,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ThreadingEvent.clear": {
            "name": "clear",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ThreadingSubsystem._EventLoopLocal.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/config.py": {
        "BackendCapability.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BackendCapability.__iter__": {
            "name": "__iter__",
            "location": 66,
            "return": [
                "typing.Iterator[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BackendCapability.__eq__": {
            "name": "__eq__",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BackendCapability.__hash__": {
            "name": "__hash__",
            "location": 78,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BackendCapability.__repr__": {
            "name": "__repr__",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IMAPConfig.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "IMAPConfig.parse_args": {
            "name": "parse_args",
            "location": 160,
            "return": [
                "typing.Mapping[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "IMAPConfig.from_args": {
            "name": "from_args",
            "location": 172,
            "return": [
                "ConfigT"
            ],
            "arguments": {
                "cls": [
                    "Type[ConfigT]"
                ],
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "IMAPConfig.apply_context": {
            "name": "apply_context",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IMAPConfig.backend_capability": {
            "name": "backend_capability",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IMAPConfig._get_cpu_subsystem": {
            "name": "_get_cpu_subsystem",
            "location": 205,
            "return": [
                "pymap.concurrent.Subsystem"
            ],
            "arguments": {
                "cls": []
            }
        },
        "IMAPConfig._load_certs": {
            "name": "_load_certs",
            "location": 212,
            "return": [
                "ssl.SSLContext"
            ],
            "arguments": {
                "cls": [],
                "extra": [
                    "typing.Mapping[(str, Any)]"
                ]
            }
        },
        "IMAPConfig.ssl_context": {
            "name": "ssl_context",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IMAPConfig.commands": {
            "name": "commands",
            "location": 231,
            "return": [
                "Commands"
            ],
            "arguments": {
                "self": []
            }
        },
        "IMAPConfig.initial_auth": {
            "name": "initial_auth",
            "location": 235,
            "return": [
                "SASLAuth"
            ],
            "arguments": {
                "self": []
            }
        },
        "IMAPConfig.tls_auth": {
            "name": "tls_auth",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IMAPConfig.preauth_credentials": {
            "name": "preauth_credentials",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IMAPConfig.proxy_protocol": {
            "name": "proxy_protocol",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IMAPConfig.parsing_params": {
            "name": "parsing_params",
            "location": 254,
            "return": [
                "Params"
            ],
            "arguments": {
                "self": []
            }
        },
        "IMAPConfig.greeting": {
            "name": "greeting",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IMAPConfig.login_capability": {
            "name": "login_capability",
            "location": 266,
            "return": [
                "list[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IMAPConfig.initial_capability": {
            "name": "initial_capability",
            "location": 274,
            "return": [
                "list[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IMAPConfig.max_filter_len": {
            "name": "max_filter_len",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/context.py": {},
    "pymap-main/pymap/exceptions.py": {
        "ResponseError.get_response": {
            "name": "get_response",
            "location": 26,
            "return": [
                "pymap.parsing.response.Response"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes"
                ]
            }
        },
        "CloseConnection.get_response": {
            "name": "get_response",
            "location": 42,
            "return": [
                "pymap.parsing.response.ResponseOk"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes"
                ]
            }
        },
        "NotSupportedError.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "NotSupportedError.get_response": {
            "name": "get_response",
            "location": 58,
            "return": [
                "pymap.parsing.response.ResponseNo"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes"
                ]
            }
        },
        "SearchNotAllowed.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "parsing.specials.SearchKey",
                    "int",
                    "typing.Mapping",
                    "Mapping"
                ]
            }
        },
        "InvalidAuth.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "InvalidAuth.get_response": {
            "name": "get_response",
            "location": 86,
            "return": [
                "pymap.parsing.response.ResponseNo"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes"
                ]
            }
        },
        "AuthorizationFailure.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "AuthorizationFailure.get_response": {
            "name": "get_response",
            "location": 100,
            "return": [
                "pymap.parsing.response.ResponseNo"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes"
                ]
            }
        },
        "NotAllowedError.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "NotAllowedError.get_response": {
            "name": "get_response",
            "location": 112,
            "return": [
                "pymap.parsing.response.ResponseNo"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes"
                ]
            }
        },
        "IncompatibleData.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "TemporaryFailure.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "TemporaryFailure.get_response": {
            "name": "get_response",
            "location": 136,
            "return": [
                "pymap.parsing.response.ResponseNo"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes"
                ]
            }
        },
        "MailboxError.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mailbox": [
                    "int",
                    "str",
                    "float"
                ],
                "message": [
                    "bytes"
                ],
                "code": [
                    "int",
                    "str",
                    "None",
                    "float"
                ]
            }
        },
        "MailboxError.get_response": {
            "name": "get_response",
            "location": 157,
            "return": [
                "pymap.parsing.response.ResponseNo"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes"
                ]
            }
        },
        "MailboxNotFound.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mailbox": [
                    "str"
                ]
            }
        },
        "MailboxConflict.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mailbox": [
                    "str"
                ]
            }
        },
        "MailboxHasChildren.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mailbox": [
                    "str"
                ]
            }
        },
        "MailboxReadOnly.__init__": {
            "name": "__init__",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mailbox": [
                    "str",
                    "None",
                    "Optional[str]",
                    "bool",
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "UserNotFound.get_response": {
            "name": "get_response",
            "location": 223,
            "return": [
                "pymap.parsing.response.ResponseNo"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes"
                ]
            }
        }
    },
    "pymap-main/pymap/fetch.py": {
        "LoadedMessageProvider.loaded_msg": {
            "name": "loaded_msg",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DynamicFetchValue.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "pymap.parsing.specials.fetchattr.FetchAttribute"
                ]
            }
        },
        "DynamicFetchValue.get_value": {
            "name": "get_value",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DynamicFetchValue.__bytes__": {
            "name": "__bytes__",
            "location": 57,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "DynamicLoadedFetchValue.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "pymap.parsing.specials.fetchattr.FetchAttribute"
                ]
            }
        },
        "DynamicLoadedFetchValue.get_value": {
            "name": "get_value",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loaded_msg": [
                    "pymap.interfaces.message.LoadedMessageInterface"
                ]
            }
        },
        "DynamicLoadedFetchValue.__bytes__": {
            "name": "__bytes__",
            "location": 93,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "DynamicLoadedFetchValue._get_data": {
            "name": "_get_data",
            "location": 103,
            "return": [
                "pymap.bytes.Writeable"
            ],
            "arguments": {
                "cls": [],
                "section": [
                    "pymap.parsing.specials.fetchattr.FetchAttribute.Section"
                ],
                "partial": [],
                "loaded_msg": [
                    "pymap.interfaces.message.LoadedMessageInterface"
                ]
            }
        },
        "DynamicLoadedFetchValue._get_partial": {
            "name": "_get_partial",
            "location": 127,
            "return": [
                "pymap.bytes.Writeable"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "pymap.bytes.Writeable"
                ],
                "partial": []
            }
        },
        "_UidFetchValue.get_value": {
            "name": "get_value",
            "location": 142,
            "return": [
                "Number"
            ],
            "arguments": {
                "self": []
            }
        },
        "_FlagsFetchValue.get_value": {
            "name": "get_value",
            "location": 148,
            "return": [
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "_InternalDateFetchValue.get_value": {
            "name": "get_value",
            "location": 156,
            "return": [
                "DateTime"
            ],
            "arguments": {
                "self": []
            }
        },
        "_EmailIdFetchValue.get_value": {
            "name": "get_value",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ThreadIdFetchValue.get_value": {
            "name": "get_value",
            "location": 168,
            "return": [
                "Nil"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LoadedMessageProvider.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LoadedMessageProvider.apply": {
            "name": "apply",
            "location": 184,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "loaded_msg": []
            }
        },
        "_EnvelopeFetchValue.get_value": {
            "name": "get_value",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "loaded_msg": [
                    "pymap.interfaces.message.LoadedMessageInterface"
                ]
            }
        },
        "_BodyStructureFetchValue.get_value": {
            "name": "get_value",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "loaded_msg": [
                    "pymap.interfaces.message.LoadedMessageInterface"
                ]
            }
        },
        "_BodyFetchValue.get_value": {
            "name": "get_value",
            "location": 206,
            "return": [
                "LiteralString"
            ],
            "arguments": {
                "self": [],
                "loaded_msg": [
                    "pymap.interfaces.message.LoadedMessageInterface"
                ]
            }
        },
        "_RFC822SizeFetchValue.get_value": {
            "name": "get_value",
            "location": 233,
            "return": [
                "Number"
            ],
            "arguments": {
                "self": [],
                "loaded_msg": [
                    "pymap.interfaces.message.LoadedMessageInterface"
                ]
            }
        },
        "_BinaryFetchValue.get_value": {
            "name": "get_value",
            "location": 239,
            "return": [
                "LiteralString"
            ],
            "arguments": {
                "self": [],
                "loaded_msg": [
                    "pymap.interfaces.message.LoadedMessageInterface"
                ]
            }
        },
        "_BinarySizeFetchValue.get_value": {
            "name": "get_value",
            "location": 254,
            "return": [
                "Number"
            ],
            "arguments": {
                "self": [],
                "loaded_msg": [
                    "pymap.interfaces.message.LoadedMessageInterface"
                ]
            }
        },
        "MessageAttributes.__init__": {
            "name": "__init__",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "pymap.interfaces.message.MessageInterface"
                ],
                "selected": [],
                "attributes": [
                    "typing.Sequence[pymap.parsing.specials.fetchattr.FetchAttribute]"
                ]
            }
        },
        "MessageAttributes.__iter__": {
            "name": "__iter__",
            "location": 323,
            "return": [
                "typing.Iterator[pymap.parsing.specials.fetchattr.FetchValue]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageAttributes.__getitem__": {
            "name": "__getitem__",
            "location": 326,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "MessageAttributes.__len__": {
            "name": "__len__",
            "location": 330,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageAttributes._get_values": {
            "name": "_get_values",
            "location": 333,
            "return": [
                "typing.Sequence[pymap.parsing.specials.fetchattr.FetchValue]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageAttributes._get": {
            "name": "_get",
            "location": 338,
            "return": [
                "pymap.parsing.specials.fetchattr.FetchValue"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "pymap.parsing.specials.fetchattr.FetchAttribute"
                ]
            }
        }
    },
    "pymap-main/pymap/filter.py": {
        "PluginFilterSet.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plugin_name": [],
                "value_type": [
                    "Type[FilterValueT]"
                ]
            }
        },
        "PluginFilterSet.compiler": {
            "name": "compiler",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SingleFilterSet.name": {
            "name": "name",
            "location": 60,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/flags.py": {
        "FlagOp.__bytes__": {
            "name": "__bytes__",
            "location": 32,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlagOp.apply": {
            "name": "apply",
            "location": 35,
            "return": [
                "FrozenSet[pymap.parsing.specials.flag.Flag]"
            ],
            "arguments": {
                "self": [],
                "flag_set": [
                    "AbstractSet[pymap.parsing.specials.flag.Flag]"
                ],
                "operand": [
                    "AbstractSet[pymap.parsing.specials.flag.Flag]"
                ]
            }
        },
        "PermanentFlags.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "defined": [
                    "typing.Iterable[pymap.parsing.specials.flag.Flag]"
                ]
            }
        },
        "PermanentFlags.defined": {
            "name": "defined",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PermanentFlags.intersect": {
            "name": "intersect",
            "location": 74,
            "return": [
                "FrozenSet[pymap.parsing.specials.flag.Flag]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Iterable[pymap.parsing.specials.flag.Flag]"
                ]
            }
        },
        "PermanentFlags.__and__": {
            "name": "__and__",
            "location": 94,
            "return": [
                "FrozenSet[pymap.parsing.specials.flag.Flag]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Iterable[pymap.parsing.specials.flag.Flag]"
                ]
            }
        },
        "SessionFlags.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "defined": [
                    "typing.Iterable[pymap.parsing.specials.flag.Flag]"
                ]
            }
        },
        "SessionFlags.defined": {
            "name": "defined",
            "location": 117,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionFlags.intersect": {
            "name": "intersect",
            "location": 121,
            "return": [
                "FrozenSet[pymap.parsing.specials.flag.Flag]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Iterable[pymap.parsing.specials.flag.Flag]"
                ]
            }
        },
        "SessionFlags.__and__": {
            "name": "__and__",
            "location": 141,
            "return": [
                "FrozenSet[pymap.parsing.specials.flag.Flag]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Iterable[pymap.parsing.specials.flag.Flag]"
                ]
            }
        },
        "SessionFlags.get": {
            "name": "get",
            "location": 144,
            "return": [
                "FrozenSet[pymap.parsing.specials.flag.Flag]"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "int"
                ]
            }
        },
        "SessionFlags.remove": {
            "name": "remove",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uids": [
                    "typing.Iterable[int]"
                ]
            }
        },
        "SessionFlags.update": {
            "name": "update",
            "location": 166,
            "return": [
                "FrozenSet[pymap.parsing.specials.flag.Flag]"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "int"
                ],
                "flag_set": [
                    "typing.Iterable[pymap.parsing.specials.flag.Flag]"
                ],
                "op": [
                    "FlagOp"
                ]
            }
        },
        "SessionFlags.add_recent": {
            "name": "add_recent",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "int"
                ]
            }
        },
        "SessionFlags.recent": {
            "name": "recent",
            "location": 194,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionFlags.recent_uids": {
            "name": "recent_uids",
            "location": 199,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionFlags.flags": {
            "name": "flags",
            "location": 204,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Dict[str, int]",
                "SendCh[trio.abc.Stream]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/health.py": {
        "HealthStatus.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial": [
                    "bool"
                ]
            }
        },
        "HealthStatus.name": {
            "name": "name",
            "location": 40,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HealthStatus.healthy": {
            "name": "healthy",
            "location": 45,
            "return": [
                "bool",
                "str",
                "ics.types.ContextDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "HealthStatus._log_change": {
            "name": "_log_change",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "healthy": [
                    "bool"
                ]
            }
        },
        "HealthStatus.register": {
            "name": "register",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "typing.Callable[([bool], Any)]"
                ]
            }
        },
        "HealthStatus._check": {
            "name": "_check",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seen": [
                    "builtins.set[HealthStatus]"
                ]
            }
        },
        "HealthStatus.new_dependency": {
            "name": "new_dependency",
            "location": 81,
            "return": [
                "HealthStatus"
            ],
            "arguments": {
                "self": [
                    "_THealthStatus"
                ],
                "initial": [
                    "bool"
                ]
            }
        },
        "HealthStatus.set": {
            "name": "set",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "healthy": [
                    "bool"
                ]
            }
        },
        "HealthStatus.set_healthy": {
            "name": "set_healthy",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HealthStatus.set_unhealthy": {
            "name": "set_unhealthy",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/listtree.py": {
        "ListEntry.attributes": {
            "name": "attributes",
            "location": 32,
            "return": [
                "list[bytes]",
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TreeNode.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "parent": [
                    "str",
                    "None",
                    "T"
                ]
            }
        },
        "_TreeNode.add": {
            "name": "add",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_name": [
                    "str"
                ]
            }
        },
        "ListTree.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delimiter": [
                    "str"
                ]
            }
        },
        "ListTree.update": {
            "name": "update",
            "location": 96,
            "return": [
                "ListTree"
            ],
            "arguments": {
                "self": [
                    "_TListTree"
                ]
            }
        },
        "ListTree.set_marked": {
            "name": "set_marked",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "marked": [
                    "bool"
                ],
                "unmarked": [
                    "bool"
                ]
            }
        },
        "ListTree._iter": {
            "name": "_iter",
            "location": 126,
            "return": [
                "typing.Iterable[ListEntry]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "reeNode"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "ListTree._find": {
            "name": "_find",
            "location": 138,
            "return": [
                "reeNode"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "reeNode"
                ],
                "node_name": [
                    "str"
                ]
            }
        },
        "ListTree.get": {
            "name": "get",
            "location": 145,
            "return": [
                "None",
                "ListEntry",
                "str",
                "Optional[int]",
                "List[Dict[str, Any]]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ListTree.get_renames": {
            "name": "get_renames",
            "location": 161,
            "return": [
                "typing.Sequence[Tuple[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "from_name": [
                    "str"
                ],
                "to_name": [
                    "str"
                ]
            }
        },
        "ListTree.list": {
            "name": "list",
            "location": 189,
            "return": [
                "typing.Iterable[ListEntry]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListTree._get_pattern": {
            "name": "_get_pattern",
            "location": 194,
            "return": [
                "Tuple[(Pattern[str], Pattern[str])]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        },
        "ListTree.list_matching": {
            "name": "list_matching",
            "location": 206,
            "return": [
                "typing.Iterable[ListEntry]"
            ],
            "arguments": {
                "self": [],
                "ref_name": [
                    "str"
                ],
                "filter_": [
                    "str"
                ]
            }
        }
    },
    "pymap-main/pymap/mailbox.py": {
        "MailboxSnapshot.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mailbox_id": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[list]",
                    "int",
                    "list[]",
                    "Optional[List[Any]]",
                    "None",
                    "tuple",
                    "tuple[]"
                ],
                "readonly": [
                    "bool"
                ],
                "uid_validity": [
                    "int"
                ],
                "permanent_flags": [
                    "typing.Iterable"
                ],
                "session_flags": [
                    "frozenset"
                ],
                "exists": [
                    "int"
                ],
                "recent": [
                    "int"
                ],
                "unseen": [
                    "int"
                ],
                "first_unseen": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "None",
                    "Iterable[Iterable[str]]",
                    "Optional[str]"
                ],
                "next_uid": [
                    "int"
                ]
            }
        },
        "MailboxSnapshot.new_uid_validity": {
            "name": "new_uid_validity",
            "location": 59,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "bool",
                    "int",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None"
                ]
            }
        },
        "MailboxSnapshot.flags": {
            "name": "flags",
            "location": 69,
            "return": [
                "bool",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/main.py": {
        "main": {
            "name": "main",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_get_pwd": {
            "name": "_get_pwd",
            "location": 115,
            "return": [
                "int"
            ],
            "arguments": {
                "setuid": [
                    "str"
                ]
            }
        },
        "_get_grp": {
            "name": "_get_grp",
            "location": 130,
            "return": [
                "int"
            ],
            "arguments": {
                "setgid": [
                    "str"
                ]
            }
        },
        "_drop_privileges": {
            "name": "_drop_privileges",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "notify_ready": {
            "name": "notify_ready",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_PymapArgumentParser.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_PymapArgumentParser.convert_arg_line_to_args": {
            "name": "convert_arg_line_to_args",
            "location": 160,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "arg_line": [
                    "str"
                ]
            }
        },
        "PidFile": {
            "name": "PidFile",
            "location": 35,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "pymap-main/pymap/message.py": {
        "_NoContent.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMessage.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "int"
                ],
                "internal_date": [
                    "_datetime.datetime"
                ],
                "permanent_flags": [
                    "typing.Iterable[pymap.parsing.specials.flag.Flag]"
                ]
            }
        },
        "BaseMessage.email_id": {
            "name": "email_id",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseMessage.thread_id": {
            "name": "thread_id",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseMessage.permanent_flags": {
            "name": "permanent_flags",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "permanent_flags": []
            }
        },
        "BaseMessage.get_flags": {
            "name": "get_flags",
            "location": 81,
            "return": [
                "FrozenSet[pymap.parsing.specials.flag.Flag]"
            ],
            "arguments": {
                "self": [],
                "session_flags": [
                    "pymap.flags.SessionFlags"
                ]
            }
        },
        "BaseMessage.flags_key": {
            "name": "flags_key",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseMessage.__repr__": {
            "name": "__repr__",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseLoadedMessage.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "pymap.interfaces.message.MessageInterface"
                ],
                "requirement": [
                    "pymap.parsing.specials.fetchattr.FetchRequirement"
                ],
                "content": []
            }
        },
        "BaseLoadedMessage.message": {
            "name": "message",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseLoadedMessage.requirement": {
            "name": "requirement",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseLoadedMessage.content": {
            "name": "content",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseLoadedMessage.__bytes__": {
            "name": "__bytes__",
            "location": 132,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseLoadedMessage._get_subpart": {
            "name": "_get_subpart",
            "location": 135,
            "return": [
                "pymap.mime.MessageContent"
            ],
            "arguments": {
                "self": [],
                "section": []
            }
        },
        "BaseLoadedMessage.get_header": {
            "name": "get_header",
            "location": 149,
            "return": [
                "typing.Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "bytes"
                ]
            }
        },
        "BaseLoadedMessage.get_headers": {
            "name": "get_headers",
            "location": 155,
            "return": [
                "pymap.bytes.Writeable"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "typing.Sequence[int]"
                ]
            }
        },
        "BaseLoadedMessage.get_body": {
            "name": "get_body",
            "location": 163,
            "return": [
                "pymap.bytes.Writeable"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "None"
                ],
                "binary": [
                    "bool"
                ]
            }
        },
        "BaseLoadedMessage.get_message_headers": {
            "name": "get_message_headers",
            "location": 181,
            "return": [
                "pymap.bytes.Writeable"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "None"
                ],
                "subset": [
                    "None"
                ],
                "inverse": [
                    "bool"
                ]
            }
        },
        "BaseLoadedMessage.get_message_text": {
            "name": "get_message_text",
            "location": 199,
            "return": [
                "pymap.bytes.Writeable"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "None"
                ]
            }
        },
        "BaseLoadedMessage._get_size_with_lines": {
            "name": "_get_size_with_lines",
            "location": 213,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "cls": [],
                "msg": [
                    "pymap.mime.MessageContent"
                ]
            }
        },
        "BaseLoadedMessage.get_size": {
            "name": "get_size",
            "location": 216,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "None"
                ]
            }
        },
        "BaseLoadedMessage.get_envelope_structure": {
            "name": "get_envelope_structure",
            "location": 223,
            "return": [
                "pymap.parsing.response.fetch.EnvelopeStructure"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseLoadedMessage.get_body_structure": {
            "name": "get_body_structure",
            "location": 229,
            "return": [
                "pymap.parsing.response.fetch.BodyStructure"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseLoadedMessage._get_envelope_structure": {
            "name": "_get_envelope_structure",
            "location": 236,
            "return": [
                "pymap.parsing.response.fetch.EnvelopeStructure"
            ],
            "arguments": {
                "cls": [],
                "msg": [
                    "pymap.mime.MessageContent"
                ]
            }
        },
        "BaseLoadedMessage._get_params": {
            "name": "_get_params",
            "location": 244,
            "return": [
                "typing.Mapping[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "msg": [
                    "pymap.mime.MessageContent"
                ]
            }
        },
        "BaseLoadedMessage._get_body_structure": {
            "name": "_get_body_structure",
            "location": 248,
            "return": [
                "pymap.parsing.response.fetch.BodyStructure"
            ],
            "arguments": {
                "cls": [],
                "msg": [
                    "pymap.mime.MessageContent"
                ]
            }
        },
        "BaseLoadedMessage.contains": {
            "name": "contains",
            "location": 284,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes"
                ]
            }
        }
    },
    "pymap-main/pymap/plugin.py": {
        "Plugin.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "str"
                ]
            }
        },
        "Plugin.__iter__": {
            "name": "__iter__",
            "location": 41,
            "return": [
                "typing.Iterator[Tuple[(str, PluginT)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Plugin.registered": {
            "name": "registered",
            "location": 45,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Plugin.default": {
            "name": "default",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "default": []
            }
        },
        "Plugin._load": {
            "name": "_load",
            "location": 78,
            "return": [
                "typing.Mapping[(str, PluginT)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Plugin.add": {
            "name": "add",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "plugin": [
                    "PluginT"
                ]
            }
        },
        "Plugin.register": {
            "name": "register",
            "location": 102,
            "return": [
                "typing.Callable[([PluginT], PluginT)]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Plugin.__repr__": {
            "name": "__repr__",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Plugin.register.deco": {
            "name": "deco",
            "location": 109,
            "return": [],
            "arguments": {
                "plugin": []
            }
        }
    },
    "pymap-main/pymap/search.py": {
        "SearchParams.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selected": []
            }
        },
        "SearchCriteria.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "SearchParams"
                ]
            }
        },
        "SearchCriteria._in": {
            "name": "_in",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "substr": [
                    "AnyStr"
                ],
                "data": [
                    "AnyStr"
                ]
            }
        },
        "SearchCriteria.matches": {
            "name": "matches",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "msg_seq": [
                    "int"
                ],
                "msg": [
                    "pymap.interfaces.message.MessageInterface"
                ],
                "loaded_msg": [
                    "pymap.interfaces.message.LoadedMessageInterface"
                ]
            }
        },
        "SearchCriteria.of": {
            "name": "of",
            "location": 76,
            "return": [
                "SearchCriteria"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSearchCriteria]"
                ],
                "key": [
                    "pymap.parsing.specials.searchkey.SearchKey"
                ],
                "params": [
                    "SearchParams"
                ]
            }
        },
        "SearchCriteriaSet.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "FrozenSet[pymap.parsing.specials.searchkey.SearchKey]"
                ],
                "params": [
                    "SearchParams"
                ]
            }
        },
        "SearchCriteriaSet.sequence_set": {
            "name": "sequence_set",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchCriteriaSet.matches": {
            "name": "matches",
            "location": 189,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "msg_seq": [
                    "int"
                ],
                "msg": [
                    "pymap.interfaces.message.MessageInterface"
                ],
                "loaded_msg": [
                    "pymap.interfaces.message.LoadedMessageInterface"
                ]
            }
        },
        "InverseSearchCriteria.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "pymap.parsing.specials.searchkey.SearchKey"
                ],
                "params": [
                    "SearchParams"
                ]
            }
        },
        "InverseSearchCriteria.matches": {
            "name": "matches",
            "location": 209,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "msg_seq": [
                    "int"
                ],
                "msg": [
                    "pymap.interfaces.message.MessageInterface"
                ],
                "loaded_msg": [
                    "pymap.interfaces.message.LoadedMessageInterface"
                ]
            }
        },
        "AllSearchCriteria.matches": {
            "name": "matches",
            "location": 217,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "msg_seq": [
                    "int"
                ],
                "msg": [
                    "pymap.interfaces.message.MessageInterface"
                ],
                "loaded_msg": [
                    "pymap.interfaces.message.LoadedMessageInterface"
                ]
            }
        },
        "OrSearchCriteria.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "pymap.parsing.specials.searchkey.SearchKey"
                ],
                "right": [
                    "pymap.parsing.specials.searchkey.SearchKey"
                ],
                "params": [
                    "SearchParams"
                ]
            }
        },
        "OrSearchCriteria.matches": {
            "name": "matches",
            "location": 231,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "msg_seq": [
                    "int"
                ],
                "msg": [
                    "pymap.interfaces.message.MessageInterface"
                ],
                "loaded_msg": [
                    "pymap.interfaces.message.LoadedMessageInterface"
                ]
            }
        },
        "SequenceSetSearchCriteria.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seq_set": [
                    "pymap.parsing.specials.sequenceset.SequenceSet"
                ],
                "params": [
                    "SearchParams"
                ]
            }
        },
        "SequenceSetSearchCriteria.matches": {
            "name": "matches",
            "location": 248,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "msg_seq": [
                    "int"
                ],
                "msg": [
                    "pymap.interfaces.message.MessageInterface"
                ],
                "loaded_msg": [
                    "pymap.interfaces.message.LoadedMessageInterface"
                ]
            }
        },
        "HasEmailIdSearchCriteria.__init__": {
            "name": "__init__",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email_id": [
                    "pymap.parsing.specials.objectid.ObjectId"
                ],
                "params": [
                    "SearchParams"
                ]
            }
        },
        "HasEmailIdSearchCriteria.matches": {
            "name": "matches",
            "location": 266,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "msg_seq": [
                    "int"
                ],
                "msg": [
                    "pymap.interfaces.message.MessageInterface"
                ],
                "loaded_msg": [
                    "pymap.interfaces.message.LoadedMessageInterface"
                ]
            }
        },
        "HasThreadIdSearchCriteria.__init__": {
            "name": "__init__",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "thread_id": [
                    "pymap.parsing.specials.objectid.ObjectId"
                ],
                "params": [
                    "SearchParams"
                ]
            }
        },
        "HasThreadIdSearchCriteria.matches": {
            "name": "matches",
            "location": 286,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "msg_seq": [
                    "int"
                ],
                "msg": [
                    "pymap.interfaces.message.MessageInterface"
                ],
                "loaded_msg": [
                    "pymap.interfaces.message.LoadedMessageInterface"
                ]
            }
        },
        "HasFlagSearchCriteria.__init__": {
            "name": "__init__",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flag": [
                    "pymap.parsing.specials.flag.Flag"
                ],
                "expected": [
                    "bool"
                ],
                "params": [
                    "SearchParams"
                ]
            }
        },
        "HasFlagSearchCriteria.matches": {
            "name": "matches",
            "location": 303,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "msg_seq": [
                    "int"
                ],
                "msg": [
                    "pymap.interfaces.message.MessageInterface"
                ],
                "loaded_msg": [
                    "pymap.interfaces.message.LoadedMessageInterface"
                ]
            }
        },
        "NewSearchCriteria.matches": {
            "name": "matches",
            "location": 313,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "msg_seq": [
                    "int"
                ],
                "msg": [
                    "pymap.interfaces.message.MessageInterface"
                ],
                "loaded_msg": [
                    "pymap.interfaces.message.LoadedMessageInterface"
                ]
            }
        },
        "DateSearchCriteria.__init__": {
            "name": "__init__",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "when": [
                    "_datetime.datetime"
                ],
                "op": [
                    "str"
                ],
                "params": [
                    "SearchParams"
                ]
            }
        },
        "DateSearchCriteria._get_msg_date": {
            "name": "_get_msg_date",
            "location": 328,
            "return": [],
            "arguments": {
                "cls": [],
                "msg": [
                    "pymap.interfaces.message.MessageInterface"
                ],
                "loaded_msg": [
                    "pymap.interfaces.message.LoadedMessageInterface"
                ]
            }
        },
        "DateSearchCriteria.matches": {
            "name": "matches",
            "location": 333,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "msg_seq": [
                    "int"
                ],
                "msg": [
                    "pymap.interfaces.message.MessageInterface"
                ],
                "loaded_msg": [
                    "pymap.interfaces.message.LoadedMessageInterface"
                ]
            }
        },
        "HeaderDateSearchCriteria._get_msg_date": {
            "name": "_get_msg_date",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "msg": [
                    "pymap.interfaces.message.MessageInterface"
                ],
                "loaded_msg": [
                    "pymap.interfaces.message.LoadedMessageInterface"
                ]
            }
        },
        "SizeSearchCriteria.__init__": {
            "name": "__init__",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ],
                "op": [
                    "str"
                ],
                "params": [
                    "SearchParams"
                ]
            }
        },
        "SizeSearchCriteria.matches": {
            "name": "matches",
            "location": 367,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "msg_seq": [
                    "int"
                ],
                "msg": [
                    "pymap.interfaces.message.MessageInterface"
                ],
                "loaded_msg": [
                    "pymap.interfaces.message.LoadedMessageInterface"
                ]
            }
        },
        "EnvelopeSearchCriteria.__init__": {
            "name": "__init__",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes"
                ],
                "value": [
                    "str"
                ],
                "params": [
                    "SearchParams"
                ]
            }
        },
        "EnvelopeSearchCriteria.matches": {
            "name": "matches",
            "location": 388,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "msg_seq": [
                    "int"
                ],
                "msg": [
                    "pymap.interfaces.message.MessageInterface"
                ],
                "loaded_msg": [
                    "pymap.interfaces.message.LoadedMessageInterface"
                ]
            }
        },
        "HeaderSearchCriteria.__init__": {
            "name": "__init__",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "params": [
                    "SearchParams"
                ]
            }
        },
        "HeaderSearchCriteria.matches": {
            "name": "matches",
            "location": 423,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "msg_seq": [
                    "int"
                ],
                "msg": [
                    "pymap.interfaces.message.MessageInterface"
                ],
                "loaded_msg": [
                    "pymap.interfaces.message.LoadedMessageInterface"
                ]
            }
        },
        "BodySearchCriteria.__init__": {
            "name": "__init__",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "params": [
                    "SearchParams"
                ]
            }
        },
        "BodySearchCriteria.matches": {
            "name": "matches",
            "location": 436,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "msg_seq": [
                    "int"
                ],
                "msg": [
                    "pymap.interfaces.message.MessageInterface"
                ],
                "loaded_msg": [
                    "pymap.interfaces.message.LoadedMessageInterface"
                ]
            }
        }
    },
    "pymap-main/pymap/selected.py": {
        "SelectedSet.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectedSet.add": {
            "name": "add",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selected": [
                    "int",
                    "VT",
                    "T"
                ]
            }
        },
        "SelectedSet.any_selected": {
            "name": "any_selected",
            "location": 55,
            "return": [
                "None",
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Frozen.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selected": [
                    "float",
                    "Optional[int]",
                    "int",
                    "dict",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "SynchronizedMessages.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SynchronizedMessages.exists": {
            "name": "exists",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SynchronizedMessages.max_uid": {
            "name": "max_uid",
            "location": 100,
            "return": [
                "int",
                "str",
                "List[List[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SynchronizedMessages._update": {
            "name": "_update",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "messages": [
                    "str",
                    "int",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "SynchronizedMessages._remove": {
            "name": "_remove",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uids": [
                    "bytes",
                    "dict",
                    "dict[, ]",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "None"
                ],
                "pending": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SynchronizedMessages.get": {
            "name": "get",
            "location": 151,
            "return": [
                "str",
                "bool",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[str]",
                    "None",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping"
                ]
            }
        },
        "SynchronizedMessages.get_uids": {
            "name": "get_uids",
            "location": 160,
            "return": [
                "list[tuple[]]",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "seq_set": [
                    "Callable[[], None]",
                    "int",
                    "typing.Callable[_, None]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "SynchronizedMessages.get_all": {
            "name": "get_all",
            "location": 177,
            "return": [
                "list[tuple[]]",
                "str",
                "int",
                "Tuple[int]",
                "List[str]",
                "Optional[dict]"
            ],
            "arguments": {
                "self": [],
                "seq_set": [
                    "list[int]",
                    "int",
                    "List[int]",
                    "Iterable[Union[Any, int]]",
                    "bool"
                ]
            }
        },
        "SelectedMailbox.__init__": {
            "name": "__init__",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mailbox_id": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "set[int]",
                    "Set[int]",
                    "Optional[Set[int]]"
                ],
                "readonly": [
                    "str",
                    "int",
                    "list[]",
                    "list",
                    "None",
                    "Optional[int]",
                    "tuple[typing.Union[float,float]]",
                    "Optional[str]",
                    "Tuple[float, float]"
                ],
                "permanent_flags": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "None",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "session_flags": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "None",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "selected_set": [
                    "None",
                    "Awaitable[None]",
                    "List[Dict[str, int]]"
                ],
                "lookup": [
                    "Dict[str, Any]",
                    "None",
                    "dict",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, str]",
                    "int",
                    "dict[, ]",
                    "dict[str, str]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "SelectedMailbox.mailbox_id": {
            "name": "mailbox_id",
            "location": 250,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectedMailbox.lookup": {
            "name": "lookup",
            "location": 269,
            "return": [
                "None",
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "lookup": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SelectedMailbox.mod_sequence": {
            "name": "mod_sequence",
            "location": 278,
            "return": [
                "None",
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "mod_sequence": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SelectedMailbox.hide_expunged": {
            "name": "hide_expunged",
            "location": 291,
            "return": [
                "None",
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "hide_expunged": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SelectedMailbox.add_updates": {
            "name": "add_updates",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "messages": [
                    "bytes",
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "None"
                ],
                "expunged": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "Optional[bool]"
                ]
            }
        },
        "SelectedMailbox.set_messages": {
            "name": "set_messages",
            "location": 321,
            "return": [
                "bool",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "messages": [
                    "str",
                    "Optional[List[str]]",
                    "list[str]"
                ]
            }
        },
        "SelectedMailbox.readonly": {
            "name": "readonly",
            "location": 339,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectedMailbox.messages": {
            "name": "messages",
            "location": 344,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectedMailbox.permanent_flags": {
            "name": "permanent_flags",
            "location": 349,
            "return": [
                "Dict[str, Any]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectedMailbox.session_flags": {
            "name": "session_flags",
            "location": 354,
            "return": [
                "dict",
                "int",
                "bytes",
                "Optional[Dict[str, Any]]",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectedMailbox.set_deleted": {
            "name": "set_deleted",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectedMailbox.silence": {
            "name": "silence",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seq_set": [
                    "str",
                    "Optional[str]",
                    "None",
                    "dict[, ]",
                    "annotations.DictStrAny",
                    "dict"
                ],
                "flag_set": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "List['cirq.Circuit']"
                ],
                "flag_op": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "SelectedMailbox.fork": {
            "name": "fork",
            "location": 390,
            "return": [
                "tuple[list[]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "bool",
                    "float",
                    "tuple[str]",
                    "Tuple[str]",
                    "int"
                ]
            }
        },
        "SelectedMailbox._compare": {
            "name": "_compare",
            "location": 413,
            "return": [
                "Union[tuple, list]",
                "typing.Generator[ResponseBye]",
                "List[int]",
                "Dict[str, Any]",
                "None",
                "str",
                "typing.Generator[ExpungeResponse]",
                "typing.Generator[ExistsResponse]",
                "typing.Generator[RecentResponse]",
                "typing.Generator[FetchResponse]"
            ],
            "arguments": {
                "self": [],
                "before": [
                    "int",
                    "str",
                    "list",
                    "list[]",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "after": [
                    "int",
                    "str",
                    "Tuple[int]",
                    "tuple[int]",
                    "list",
                    "list[]"
                ],
                "with_uid": [
                    "bool",
                    "float",
                    "int",
                    "dict[tuple[typing.Union[int,...]], int]",
                    "Dict[Tuple[int, ...], int]"
                ]
            }
        }
    },
    "pymap-main/pymap/service.py": {},
    "pymap-main/pymap/sockets.py": {
        "InheritedSockets.get": {
            "name": "get",
            "location": 31,
            "return": [
                "typing.Sequence[_socket.socket]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InheritedSockets.supports": {
            "name": "supports",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "service_manager": [
                    "str"
                ]
            }
        },
        "InheritedSockets.of": {
            "name": "of",
            "location": 51,
            "return": [
                "InheritedSockets"
            ],
            "arguments": {
                "cls": [
                    "Type[_TInheritedSockets]"
                ],
                "service_manager": [
                    "str"
                ]
            }
        },
        "InheritedSockets.for_systemd": {
            "name": "for_systemd",
            "location": 67,
            "return": [
                "InheritedSockets"
            ],
            "arguments": {
                "cls": [
                    "Type[_TInheritedSockets]"
                ]
            }
        },
        "_SystemdSockets.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SystemdSockets.get": {
            "name": "get",
            "location": 100,
            "return": [
                "typing.Sequence[_socket.socket]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SystemdSockets._get_family": {
            "name": "_get_family",
            "location": 104,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Type[T]",
                    "typing.Type",
                    "List[str]",
                    "list[str]"
                ],
                "fd": [
                    "int"
                ]
            }
        }
    },
    "pymap-main/pymap/threads.py": {
        "ThreadKey.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg_id": [
                    "str"
                ],
                "subject": [
                    "str"
                ]
            }
        },
        "ThreadKey.__eq__": {
            "name": "__eq__",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ThreadKey.__hash__": {
            "name": "__hash__",
            "location": 47,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadKey.__iter__": {
            "name": "__iter__",
            "location": 50,
            "return": [
                "typing.Iterator[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadKey._encode": {
            "name": "_encode",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "value": [
                    "str"
                ]
            }
        },
        "ThreadKey._first_match": {
            "name": "_first_match",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "value": [
                    "str"
                ]
            }
        },
        "ThreadKey._subject": {
            "name": "_subject",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "value": [
                    "str"
                ]
            }
        },
        "ThreadKey.get_all": {
            "name": "get_all",
            "location": 76,
            "return": [
                "typing.Sequence[ThreadKey]"
            ],
            "arguments": {
                "cls": [],
                "header": [
                    "pymap.mime.MessageHeader"
                ]
            }
        }
    },
    "pymap-main/pymap/user.py": {
        "UserMetadata.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "pymap.config.IMAPConfig"
                ]
            }
        },
        "UserMetadata.role": {
            "name": "role",
            "location": 34,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserMetadata.to_dict": {
            "name": "to_dict",
            "location": 38,
            "return": [
                "typing.Mapping[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/__init__.py": {},
    "pymap-main/pymap/admin/errors.py": {
        "get_unimplemented_error": {
            "name": "get_unimplemented_error",
            "location": 11,
            "return": [
                "GRPCError",
                "int",
                "dict",
                "Dict[str, Any]",
                "Sequence",
                "str"
            ],
            "arguments": {}
        },
        "get_incompatible_version_error": {
            "name": "get_incompatible_version_error",
            "location": 25,
            "return": [
                "GRPCError",
                "bool",
                "Sequence",
                "List[str]",
                "bytes",
                "Dict[str, str]",
                "Optional[List[str]]",
                "List[float]",
                "str"
            ],
            "arguments": {
                "client_version": [
                    "str"
                ],
                "server_version": [
                    "str"
                ]
            }
        }
    },
    "pymap-main/pymap/admin/server.py": {
        "Server.get_loop": {
            "name": "get_loop",
            "location": 22,
            "return": [
                "asyncio.events.AbstractEventLoop"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.is_serving": {
            "name": "is_serving",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/admin/typing.py": {
        "Handler.__mapping__": {
            "name": "__mapping__",
            "location": 20,
            "return": [
                "typing.Mapping[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/admin/__init__.py": {
        "AdminService.add_arguments": {
            "name": "add_arguments",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "argparse.ArgumentParser",
                    "Dict[str, Any]",
                    "argparse._SubParsersAction"
                ],
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "AdminService._init_admin_token": {
            "name": "_init_admin_token",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdminService._write_admin_token": {
            "name": "_write_admin_token",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "admin_token": [
                    "str"
                ]
            }
        },
        "AdminService._get_health": {
            "name": "_get_health",
            "location": 91,
            "return": [
                "pymap.admin.typing.Handler"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdminService._new_server": {
            "name": "_new_server",
            "location": 110,
            "return": [
                "pymap.admin.server.Server"
            ],
            "arguments": {
                "self": [],
                "server_handlers": [
                    "typing.Sequence[pymap.admin.typing.Handler]"
                ]
            }
        }
    },
    "pymap-main/pymap/admin/handlers/mailbox.py": {},
    "pymap-main/pymap/admin/handlers/system.py": {},
    "pymap-main/pymap/admin/handlers/user.py": {},
    "pymap-main/pymap/admin/handlers/__init__.py": {
        "BaseHandler.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backend": [
                    "pymap.interfaces.backend.BackendInterface"
                ]
            }
        },
        "BaseHandler._get_admin_keys": {
            "name": "_get_admin_keys",
            "location": 41,
            "return": [
                "AbstractSet[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseHandler._get_token": {
            "name": "_get_token",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[bool]",
                    "int"
                ]
            }
        }
    },
    "pymap-main/pymap/backend/mailbox.py": {
        "MailboxDataInterface.mailbox_id": {
            "name": "mailbox_id",
            "location": 35,
            "return": [
                "pymap.parsing.specials.ObjectId",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxDataInterface.readonly": {
            "name": "readonly",
            "location": 46,
            "return": [
                "builtins.bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxDataInterface.uid_validity": {
            "name": "uid_validity",
            "location": 52,
            "return": [
                "builtins.int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxDataInterface.permanent_flags": {
            "name": "permanent_flags",
            "location": 57,
            "return": [
                "str",
                "BaseException",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxDataInterface.session_flags": {
            "name": "session_flags",
            "location": 62,
            "return": [
                "set[]",
                "str",
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxDataInterface.selected_set": {
            "name": "selected_set",
            "location": 68,
            "return": [
                "pymap.selected.SelectedSet",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxSetInterface.delimiter": {
            "name": "delimiter",
            "location": 224,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/backend/session.py": {
        "BaseSession.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str"
                ]
            }
        },
        "BaseSession.owner": {
            "name": "owner",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSession.config": {
            "name": "config",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSession.mailbox_set": {
            "name": "mailbox_set",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSession.filter_set": {
            "name": "filter_set",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSession.close": {
            "name": "close",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSession._pick_selected": {
            "name": "_pick_selected",
            "location": 83,
            "return": [],
            "arguments": {
                "cls": [
                    "Type[BaseSession]"
                ],
                "selected": [],
                "mbx": [
                    "pymap.backend.mailbox.MailboxDataInterface[MessageT]"
                ]
            }
        }
    },
    "pymap-main/pymap/backend/__init__.py": {},
    "pymap-main/pymap/backend/dict/filter.py": {
        "FilterSet.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/backend/dict/mailbox.py": {
        "Message.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "int"
                ],
                "internal_date": [
                    "_datetime.datetime"
                ],
                "permanent_flags": [
                    "typing.Iterable[pymap.parsing.specials.flag.Flag]"
                ]
            }
        },
        "Message.copy": {
            "name": "copy",
            "location": 47,
            "return": [
                "Message"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMessage]"
                ],
                "msg": [
                    "Message"
                ]
            }
        },
        "Message.recent": {
            "name": "recent",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "recent": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_ModSequenceMapping.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ModSequenceMapping.highest": {
            "name": "highest",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ModSequenceMapping._remove_prev": {
            "name": "_remove_prev",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "int"
                ],
                "prev_mod_seq": [
                    "int"
                ],
                "data": [
                    "Dict[(int, Set[int])]"
                ]
            }
        },
        "_ModSequenceMapping._set": {
            "name": "_set",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uids": [
                    "typing.Iterable[int]"
                ],
                "data": [
                    "Dict[(int, Set[int])]"
                ]
            }
        },
        "_ModSequenceMapping.update": {
            "name": "update",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uids": [
                    "typing.Iterable[int]"
                ]
            }
        },
        "_ModSequenceMapping.expunge": {
            "name": "expunge",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uids": [
                    "typing.Iterable[int]"
                ]
            }
        },
        "_ModSequenceMapping.find_updated": {
            "name": "find_updated",
            "location": 114,
            "return": [
                "Tuple[(FrozenSet[int], FrozenSet[int])]"
            ],
            "arguments": {
                "self": [],
                "mod_seq": [
                    "int"
                ]
            }
        },
        "_ContentCache.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ContentCache.add": {
            "name": "add",
            "location": 142,
            "return": [
                "pymap.parsing.specials.objectid.ObjectId"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "pymap.mime.MessageContent"
                ]
            }
        },
        "_ContentCache._remove": {
            "name": "_remove",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg_hash": [
                    "bytes"
                ],
                "email_id": [
                    "pymap.parsing.specials.objectid.ObjectId"
                ]
            }
        },
        "_ContentCache.get": {
            "name": "get",
            "location": 158,
            "return": [
                "pymap.mime.MessageContent"
            ],
            "arguments": {
                "self": [],
                "email_id": [
                    "pymap.parsing.specials.objectid.ObjectId"
                ]
            }
        },
        "_ThreadCache.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ThreadCache.add": {
            "name": "add",
            "location": 171,
            "return": [
                "pymap.parsing.specials.objectid.ObjectId"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "pymap.mime.MessageContent"
                ]
            }
        },
        "MailboxData.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content_cache": [
                    "_ContentCache"
                ],
                "thread_cache": [
                    "hreadCache"
                ]
            }
        },
        "MailboxData.mailbox_id": {
            "name": "mailbox_id",
            "location": 205,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxData.readonly": {
            "name": "readonly",
            "location": 209,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxData.uid_validity": {
            "name": "uid_validity",
            "location": 213,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxData.messages_lock": {
            "name": "messages_lock",
            "location": 217,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxData.selected_set": {
            "name": "selected_set",
            "location": 221,
            "return": [
                "str",
                "Set[str]",
                "int",
                "Callable[[str, str], float]",
                "Optional[str]",
                "MutableSequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxSet.__init__": {
            "name": "__init__",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxSet.delimiter": {
            "name": "delimiter",
            "location": 373,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/backend/dict/__init__.py": {
        "DictBackend.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "login": [
                    "Login"
                ],
                "config": [
                    "Config"
                ]
            }
        },
        "DictBackend.login": {
            "name": "login",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictBackend.config": {
            "name": "config",
            "location": 52,
            "return": [
                "str",
                "Optional[dict]",
                "app.config.MQConfig",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictBackend.status": {
            "name": "status",
            "location": 56,
            "return": [
                "str",
                "int",
                "datetime.timedelta",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictBackend.add_subparser": {
            "name": "add_subparser",
            "location": 60,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Type[T]",
                    "typing.Type"
                ],
                "name": [
                    "str"
                ],
                "subparsers": [
                    "str",
                    "List[str]",
                    "argparse.Namespace",
                    "list"
                ]
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "Config.backend_capability": {
            "name": "backend_capability",
            "location": 99,
            "return": [
                "BackendCapability",
                "bool",
                "Optional[int]",
                "int",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.demo_data": {
            "name": "demo_data",
            "location": 103,
            "return": [
                "dict",
                "Dict[str, List[int]]",
                "IO[bytes]",
                "Optional[float]",
                "bool",
                "middleman_protocol.message.GolemMessageFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.demo_data_resource": {
            "name": "demo_data_resource",
            "location": 108,
            "return": [
                "dict",
                "Dict[str, List[int]]",
                "IO[bytes]",
                "Optional[float]",
                "bool",
                "middleman_protocol.message.GolemMessageFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.demo_user": {
            "name": "demo_user",
            "location": 113,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.demo_password": {
            "name": "demo_password",
            "location": 121,
            "return": [
                "str",
                "type",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.parse_args": {
            "name": "parse_args",
            "location": 129,
            "return": [
                "typing.Mapping[(str, Any)]"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "Callable",
                    "int",
                    "list[]",
                    "list",
                    "str",
                    "typing.Type",
                    "bool",
                    "Type[T]",
                    "Callable[[None], None]"
                ],
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "Session.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str"
                ],
                "config": [
                    "Config"
                ],
                "mailbox_set": [
                    "pymap.backend.dict.mailbox.MailboxSet"
                ],
                "filter_set": [
                    "pymap.backend.dict.filter.FilterSet"
                ]
            }
        },
        "Session.config": {
            "name": "config",
            "location": 147,
            "return": [
                "str",
                "Optional[dict]",
                "app.config.MQConfig",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Session.mailbox_set": {
            "name": "mailbox_set",
            "location": 151,
            "return": [
                "str",
                "Set[str]",
                "int",
                "Callable[[str, str], float]",
                "Optional[str]",
                "MutableSequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Session.filter_set": {
            "name": "filter_set",
            "location": 155,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Login.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Config"
                ]
            }
        },
        "Login.tokens": {
            "name": "tokens",
            "location": 171,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Identity.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "login": [
                    "Login"
                ],
                "role": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "None",
                    "Sequence",
                    "bool",
                    "datetime.datetime",
                    "Optional[str]"
                ]
            }
        },
        "Identity.name": {
            "name": "name",
            "location": 207,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/backend/maildir/flags.py": {
        "MaildirFlags.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keywords": [
                    "typing.Sequence[pymap.parsing.specials.flag.Flag]"
                ]
            }
        },
        "MaildirFlags.permanent_flags": {
            "name": "permanent_flags",
            "location": 60,
            "return": [
                "Dict[str, Any]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaildirFlags.system_flags": {
            "name": "system_flags",
            "location": 65,
            "return": [
                "set[]",
                "Optional[Exception]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaildirFlags.keywords": {
            "name": "keywords",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaildirFlags.to_maildir": {
            "name": "to_maildir",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "typing.Iterable"
                ]
            }
        },
        "MaildirFlags.from_maildir": {
            "name": "from_maildir",
            "location": 95,
            "return": [
                "FrozenSet[pymap.parsing.specials.flag.Flag]"
            ],
            "arguments": {
                "self": [],
                "codes": [
                    "str"
                ]
            }
        },
        "MaildirFlags.get_file": {
            "name": "get_file",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "MaildirFlags.get_default": {
            "name": "get_default",
            "location": 120,
            "return": [
                "_MFT"
            ],
            "arguments": {
                "cls": [
                    "Type[_MFT]"
                ],
                "base_dir": [
                    "str"
                ]
            }
        },
        "MaildirFlags.open": {
            "name": "open",
            "location": 124,
            "return": [
                "_MFT"
            ],
            "arguments": {
                "cls": [
                    "Type[_MFT]"
                ],
                "base_dir": [
                    "str"
                ],
                "fp": [
                    "IO[str]"
                ]
            }
        }
    },
    "pymap-main/pymap/backend/maildir/io.py": {
        "FileReadable.get_file": {
            "name": "get_file",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "FileReadable.get_lock": {
            "name": "get_lock",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "FileReadable.get_default": {
            "name": "get_default",
            "location": 37,
            "return": [
                "_RT"
            ],
            "arguments": {
                "cls": [
                    "Type[_RT]"
                ],
                "base_dir": [
                    "str"
                ]
            }
        },
        "FileReadable.open": {
            "name": "open",
            "location": 42,
            "return": [
                "_RT"
            ],
            "arguments": {
                "cls": [
                    "Type[_RT]"
                ],
                "base_dir": [
                    "str"
                ],
                "fp": [
                    "IO[str]"
                ]
            }
        },
        "FileReadable.read": {
            "name": "read",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "IO[str]"
                ]
            }
        },
        "FileReadable.read_lock": {
            "name": "read_lock",
            "location": 54,
            "return": [
                "AsyncContextManager[None]"
            ],
            "arguments": {
                "cls": [],
                "base_dir": [
                    "str"
                ]
            }
        },
        "FileReadable.write_lock": {
            "name": "write_lock",
            "location": 63,
            "return": [
                "AsyncContextManager[None]"
            ],
            "arguments": {
                "cls": [],
                "base_dir": [
                    "str"
                ]
            }
        },
        "FileReadable.file_exists": {
            "name": "file_exists",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "base_dir": [
                    "str"
                ]
            }
        },
        "FileReadable.file_open": {
            "name": "file_open",
            "location": 77,
            "return": [
                "_RT"
            ],
            "arguments": {
                "cls": [
                    "Type[_RT]"
                ],
                "base_dir": [
                    "str"
                ]
            }
        },
        "FileReadable.file_read": {
            "name": "file_read",
            "location": 86,
            "return": [
                "_RT"
            ],
            "arguments": {
                "cls": [
                    "Type[_RT]"
                ],
                "base_dir": [
                    "str"
                ]
            }
        },
        "FileReadable.with_open": {
            "name": "with_open",
            "location": 97,
            "return": [
                "_FileReadWith[_RT]"
            ],
            "arguments": {
                "cls": [
                    "Type[_RT]"
                ],
                "base_dir": [
                    "str"
                ]
            }
        },
        "FileReadable.with_read": {
            "name": "with_read",
            "location": 101,
            "return": [
                "_FileReadWith[_RT]"
            ],
            "arguments": {
                "cls": [
                    "Type[_RT]"
                ],
                "base_dir": [
                    "str"
                ]
            }
        },
        "FileWriteable.get_dir": {
            "name": "get_dir",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileWriteable.write": {
            "name": "write",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "IO[str]"
                ]
            }
        },
        "FileWriteable.delete": {
            "name": "delete",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "base_dir": [
                    "str"
                ]
            }
        },
        "FileWriteable.file_write": {
            "name": "file_write",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileWriteable.with_write": {
            "name": "with_write",
            "location": 134,
            "return": [
                "_FileWriteWith[_WT]"
            ],
            "arguments": {
                "cls": [
                    "Type[_WT]"
                ],
                "base_dir": [
                    "str"
                ]
            }
        },
        "_FileReadWith.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_dir": [
                    "str"
                ],
                "cls": [
                    "Type[_RT]"
                ],
                "only_open": [
                    "bool"
                ]
            }
        },
        "_FileWriteWith.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_dir": [
                    "str"
                ],
                "cls": [
                    "Type[_WT]"
                ]
            }
        },
        "_FileWriteWith._write_obj": {
            "name": "_write_obj",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/backend/maildir/layout.py": {
        "MaildirLayout.get": {
            "name": "get",
            "location": 28,
            "return": [
                "MaildirLayout[_MaildirT]"
            ],
            "arguments": {
                "cls": [
                    "Type[MaildirLayout]"
                ],
                "path": [
                    "str"
                ],
                "layout": [
                    "str"
                ],
                "maildir_type": [
                    "Type[_MaildirT]"
                ]
            }
        },
        "MaildirLayout.path": {
            "name": "path",
            "location": 50,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaildirLayout.get_path": {
            "name": "get_path",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "delimiter": [
                    "str"
                ]
            }
        },
        "MaildirLayout.list_folders": {
            "name": "list_folders",
            "location": 66,
            "return": [
                "typing.Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "delimiter": [
                    "str"
                ],
                "top": [
                    "str"
                ]
            }
        },
        "MaildirLayout.get_folder": {
            "name": "get_folder",
            "location": 82,
            "return": [
                "_MaildirT"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "delimiter": [
                    "str"
                ]
            }
        },
        "MaildirLayout.add_folder": {
            "name": "add_folder",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "delimiter": [
                    "str"
                ]
            }
        },
        "MaildirLayout.remove_folder": {
            "name": "remove_folder",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "delimiter": [
                    "str"
                ]
            }
        },
        "MaildirLayout.rename_folder": {
            "name": "rename_folder",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_name": [
                    "str"
                ],
                "dest_name": [
                    "str"
                ],
                "delimiter": [
                    "str"
                ]
            }
        },
        "_BaseLayout.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "maildir_type": [
                    "Type[_MaildirT]"
                ]
            }
        },
        "_BaseLayout.path": {
            "name": "path",
            "location": 151,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BaseLayout._split": {
            "name": "_split",
            "location": 155,
            "return": [
                "typing.Sequence[str]"
            ],
            "arguments": {
                "cls": [
                    "Type[_BaseLayout]"
                ],
                "name": [
                    "str"
                ],
                "delimiter": [
                    "str"
                ]
            }
        },
        "_BaseLayout._join": {
            "name": "_join",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Type[_BaseLayout]"
                ],
                "parts": [
                    "typing.Sequence[str]"
                ],
                "delimiter": [
                    "str"
                ]
            }
        },
        "_BaseLayout._can_remove": {
            "name": "_can_remove",
            "location": 166,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "parts": [
                    "typing.Sequence[str]"
                ]
            }
        },
        "_BaseLayout._get_path": {
            "name": "_get_path",
            "location": 170,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "parts": [
                    "typing.Sequence[str]"
                ]
            }
        },
        "_BaseLayout._list_folders": {
            "name": "_list_folders",
            "location": 174,
            "return": [
                "typing.Iterable[typing.Sequence[str]]"
            ],
            "arguments": {
                "self": [],
                "parts": [
                    "typing.Sequence[str]"
                ]
            }
        },
        "_BaseLayout._rename_folder": {
            "name": "_rename_folder",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_parts": [
                    "typing.Sequence[str]"
                ],
                "dest_parts": [
                    "typing.Sequence[str]"
                ]
            }
        },
        "_BaseLayout.get_path": {
            "name": "get_path",
            "location": 182,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "delimiter": [
                    "str"
                ]
            }
        },
        "_BaseLayout.list_folders": {
            "name": "list_folders",
            "location": 186,
            "return": [
                "typing.Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "delimiter": [
                    "str"
                ],
                "top": [
                    "str"
                ]
            }
        },
        "_BaseLayout.get_folder": {
            "name": "get_folder",
            "location": 192,
            "return": [
                "_MaildirT"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "delimiter": [
                    "str"
                ]
            }
        },
        "_BaseLayout.add_folder": {
            "name": "add_folder",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "delimiter": [
                    "str"
                ]
            }
        },
        "_BaseLayout.remove_folder": {
            "name": "remove_folder",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "delimiter": [
                    "str"
                ]
            }
        },
        "_BaseLayout.rename_folder": {
            "name": "rename_folder",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_name": [
                    "str"
                ],
                "dest_name": [
                    "str"
                ],
                "delimiter": [
                    "str"
                ]
            }
        },
        "DefaultLayout._get_path": {
            "name": "_get_path",
            "location": 252,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "parts": [
                    "typing.Sequence[str]"
                ]
            }
        },
        "DefaultLayout._get_subdir": {
            "name": "_get_subdir",
            "location": 256,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Type[DefaultLayout]"
                ],
                "parts": [
                    "typing.Sequence[str]"
                ]
            }
        },
        "DefaultLayout._get_parts": {
            "name": "_get_parts",
            "location": 262,
            "return": [
                "typing.Sequence[str]"
            ],
            "arguments": {
                "cls": [
                    "Type[DefaultLayout]"
                ],
                "subdir": [
                    "str"
                ]
            }
        },
        "DefaultLayout._list_folders": {
            "name": "_list_folders",
            "location": 267,
            "return": [
                "typing.Iterable[typing.Sequence[str]]"
            ],
            "arguments": {
                "self": [],
                "parts": [
                    "typing.Sequence[str]"
                ]
            }
        },
        "DefaultLayout._rename_folder": {
            "name": "_rename_folder",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_parts": [
                    "typing.Sequence[str]"
                ],
                "dest_parts": [
                    "typing.Sequence[str]"
                ]
            }
        },
        "FilesystemLayout._get_path": {
            "name": "_get_path",
            "location": 307,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "parts": [
                    "typing.Sequence[str]"
                ]
            }
        },
        "FilesystemLayout._can_remove": {
            "name": "_can_remove",
            "location": 310,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "parts": [
                    "typing.Sequence[str]"
                ]
            }
        },
        "FilesystemLayout._list_folders": {
            "name": "_list_folders",
            "location": 319,
            "return": [
                "typing.Iterable[typing.Sequence[str]]"
            ],
            "arguments": {
                "self": [],
                "parts": [
                    "typing.Sequence[str]"
                ]
            }
        },
        "FilesystemLayout._rename_folder": {
            "name": "_rename_folder",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_parts": [
                    "typing.Sequence[str]"
                ],
                "dest_parts": [
                    "typing.Sequence[str]"
                ]
            }
        }
    },
    "pymap-main/pymap/backend/maildir/mailbox.py": {
        "Maildir._path_new": {
            "name": "_path_new",
            "location": 39,
            "return": [
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maildir._path_cur": {
            "name": "_path_cur",
            "location": 43,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maildir._join": {
            "name": "_join",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "subpath": [
                    "str"
                ]
            }
        },
        "Maildir._split": {
            "name": "_split",
            "location": 50,
            "return": [
                "Tuple[(Literal[('cur', 'new')], str)]"
            ],
            "arguments": {
                "self": [],
                "subpath": [
                    "str"
                ]
            }
        },
        "Maildir._lookup": {
            "name": "_lookup",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Maildir._update": {
            "name": "_update",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "subpath": [
                    "str"
                ]
            }
        },
        "Maildir.claim_new": {
            "name": "claim_new",
            "location": 66,
            "return": [
                "typing.Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maildir.move_message": {
            "name": "move_message",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "dest": [
                    "Maildir"
                ],
                "dest_subdir": [
                    "str"
                ]
            }
        },
        "Maildir.get_message_metadata": {
            "name": "get_message_metadata",
            "location": 93,
            "return": [
                "mailbox.MaildirMessage"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Maildir.update_metadata": {
            "name": "update_metadata",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "msg": [
                    "mailbox.MaildirMessage"
                ]
            }
        },
        "Message.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "int"
                ],
                "internal_date": [
                    "_datetime.datetime"
                ],
                "permanent_flags": [
                    "typing.Iterable[pymap.parsing.specials.flag.Flag]"
                ]
            }
        },
        "Message.copy_expunged": {
            "name": "copy_expunged",
            "location": 158,
            "return": [
                "Message"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMessage]"
                ],
                "msg": [
                    "Message"
                ]
            }
        },
        "Message.to_maildir": {
            "name": "to_maildir",
            "location": 164,
            "return": [
                "mailbox.MaildirMessage"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Union[str, bytes]",
                    "bytes",
                    "Optional[str]",
                    "None",
                    "List[Dict]",
                    "list[dict[, ]]"
                ],
                "append_msg": [
                    "pymap.parsing.message.AppendMessage"
                ],
                "recent": [
                    "bool"
                ],
                "maildir_flags": [
                    "pymap.backend.maildir.flags.MaildirFlags"
                ]
            }
        },
        "Message.from_maildir": {
            "name": "from_maildir",
            "location": 175,
            "return": [
                "Message"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMessage]"
                ],
                "uid": [
                    "int"
                ],
                "maildir_msg": [
                    "mailbox.MaildirMessage"
                ],
                "maildir": [
                    "Maildir"
                ],
                "key": [
                    "str"
                ],
                "email_id": [
                    "None",
                    "str",
                    "Optional[pymap.parsing.specials.ObjectId]",
                    "int",
                    "typing.Mapping",
                    "Maildir",
                    "Mapping[Any, str]"
                ],
                "thread_id": [
                    "None",
                    "str",
                    "Optional[pymap.parsing.specials.ObjectId]",
                    "int",
                    "typing.Mapping",
                    "Maildir",
                    "Mapping[Any, str]"
                ],
                "maildir_flags": [
                    "pymap.backend.maildir.flags.MaildirFlags"
                ]
            }
        },
        "MailboxData.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mailbox_id": [
                    "pymap.parsing.specials.objectid.ObjectId"
                ],
                "maildir": [
                    "Maildir"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "MailboxData._get_object_id": {
            "name": "_get_object_id",
            "location": 207,
            "return": [
                "dict",
                "str",
                "Dict[str, str]",
                "Set[int]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "flags.SessionFlags",
                    "list[M]",
                    "List['PydanticModelField']"
                ],
                "rec": [
                    "pymap.backend.maildir.uidlist.Record"
                ],
                "field": [
                    "str"
                ]
            }
        },
        "MailboxData.mailbox_id": {
            "name": "mailbox_id",
            "location": 211,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxData.readonly": {
            "name": "readonly",
            "location": 215,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxData.uid_validity": {
            "name": "uid_validity",
            "location": 219,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxData.maildir_flags": {
            "name": "maildir_flags",
            "location": 223,
            "return": [
                "Mapping[str, Sequence[str]]",
                "Union[int, float, complex]",
                "str",
                "bytes",
                "typing.Counter",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxData.permanent_flags": {
            "name": "permanent_flags",
            "location": 230,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxData.messages_lock": {
            "name": "messages_lock",
            "location": 234,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxData.selected_set": {
            "name": "selected_set",
            "location": 238,
            "return": [
                "str",
                "Set[str]",
                "int",
                "Callable[[str, str], float]",
                "Optional[str]",
                "MutableSequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxSet.__init__": {
            "name": "__init__",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "maildir": [
                    "Maildir"
                ],
                "layout": [
                    "pymap.backend.maildir.layout.MaildirLayout"
                ]
            }
        },
        "MailboxSet.delimiter": {
            "name": "delimiter",
            "location": 471,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/backend/maildir/subscriptions.py": {
        "Subscriptions.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_dir": [
                    "str"
                ]
            }
        },
        "Subscriptions.subscribed": {
            "name": "subscribed",
            "location": 28,
            "return": [
                "list[]",
                "List[str]",
                "list",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subscriptions.add": {
            "name": "add",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str"
                ]
            }
        },
        "Subscriptions.remove": {
            "name": "remove",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str"
                ]
            }
        },
        "Subscriptions.set": {
            "name": "set",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str"
                ],
                "subscribed": [
                    "bool"
                ]
            }
        },
        "Subscriptions.get_file": {
            "name": "get_file",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "Subscriptions.get_lock": {
            "name": "get_lock",
            "location": 55,
            "return": [
                "typing.Text",
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Type[T]",
                    "typing.Type",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Subscriptions.get_default": {
            "name": "get_default",
            "location": 59,
            "return": [
                "_ST"
            ],
            "arguments": {
                "cls": [
                    "Type[_ST]"
                ],
                "base_dir": [
                    "str"
                ]
            }
        },
        "Subscriptions.get_dir": {
            "name": "get_dir",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subscriptions.open": {
            "name": "open",
            "location": 66,
            "return": [
                "_ST"
            ],
            "arguments": {
                "cls": [
                    "Type[_ST]"
                ],
                "base_dir": [
                    "str"
                ],
                "fp": [
                    "IO[str]"
                ]
            }
        },
        "Subscriptions.read": {
            "name": "read",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "IO[str]"
                ]
            }
        },
        "Subscriptions.write": {
            "name": "write",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "IO[str]"
                ]
            }
        }
    },
    "pymap-main/pymap/backend/maildir/uidlist.py": {
        "Record.key": {
            "name": "key",
            "location": 34,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UidList.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_dir": [
                    "str"
                ],
                "uid_validity": [
                    "int"
                ],
                "next_uid": [
                    "int"
                ],
                "global_uid": [
                    "str",
                    "None",
                    "int",
                    "bytes",
                    "Optional[int]",
                    "Dict[bytes, int]",
                    "dict[bytes, int]"
                ]
            }
        },
        "UidList.records": {
            "name": "records",
            "location": 66,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UidList.get": {
            "name": "get",
            "location": 70,
            "return": [
                "Record"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "int"
                ]
            }
        },
        "UidList.get_all": {
            "name": "get_all",
            "location": 82,
            "return": [
                "typing.Mapping[(int, Record)]"
            ],
            "arguments": {
                "self": [],
                "uids": [
                    "typing.Iterable[int]"
                ]
            }
        },
        "UidList.set": {
            "name": "set",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rec": [
                    "Record"
                ]
            }
        },
        "UidList.remove": {
            "name": "remove",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "int"
                ]
            }
        },
        "UidList._build_line": {
            "name": "_build_line",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Optional[bool]",
                    "bool",
                    "io.TextIO",
                    "None"
                ],
                "rec": [
                    "Record"
                ]
            }
        },
        "UidList._read_line": {
            "name": "_read_line",
            "location": 119,
            "return": [
                "Record"
            ],
            "arguments": {
                "cls": [
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "str",
                    "bool",
                    "List[str]"
                ],
                "line": [
                    "str"
                ]
            }
        },
        "UidList._read_header": {
            "name": "_read_header",
            "location": 130,
            "return": [
                "_UDT"
            ],
            "arguments": {
                "cls": [
                    "Type[_UDT]"
                ],
                "base_dir": [
                    "str"
                ],
                "line": [
                    "str"
                ]
            }
        },
        "UidList._create_guid": {
            "name": "_create_guid",
            "location": 149,
            "return": [
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "Type[T]",
                    "int",
                    "Type[tuple]",
                    "str",
                    "dict[str, str]",
                    "dict[str, bool]",
                    "Dict[str, str]",
                    "Dict[str, bool]"
                ]
            }
        },
        "UidList._build_header": {
            "name": "_build_header",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UidList.get_file": {
            "name": "get_file",
            "location": 159,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "UidList.get_lock": {
            "name": "get_lock",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "str",
                    "list[int]",
                    "Type['DataclassT']",
                    "typing.Type",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "UidList.get_dir": {
            "name": "get_dir",
            "location": 166,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UidList.get_default": {
            "name": "get_default",
            "location": 170,
            "return": [
                "_UDT"
            ],
            "arguments": {
                "cls": [
                    "Type[_UDT]"
                ],
                "base_dir": [
                    "str"
                ]
            }
        },
        "UidList.write": {
            "name": "write",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "IO[str]"
                ]
            }
        },
        "UidList.open": {
            "name": "open",
            "location": 179,
            "return": [
                "_UDT"
            ],
            "arguments": {
                "cls": [
                    "Type[_UDT]"
                ],
                "base_dir": [
                    "str"
                ],
                "fp": [
                    "IO[str]"
                ]
            }
        },
        "UidList.read": {
            "name": "read",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "IO[str]"
                ]
            }
        }
    },
    "pymap-main/pymap/backend/maildir/__init__.py": {
        "MaildirBackend.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "login": [
                    "Login"
                ],
                "config": [
                    "Config"
                ]
            }
        },
        "MaildirBackend.login": {
            "name": "login",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaildirBackend.users": {
            "name": "users",
            "location": 49,
            "return": [
                "None",
                "Optional[str]",
                "Optional[bool]",
                "Optional[Type[Exception]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaildirBackend.config": {
            "name": "config",
            "location": 53,
            "return": [
                "str",
                "Optional[dict]",
                "app.config.MQConfig",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaildirBackend.status": {
            "name": "status",
            "location": 57,
            "return": [
                "str",
                "int",
                "datetime.timedelta",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaildirBackend.add_subparser": {
            "name": "add_subparser",
            "location": 61,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Type[T]",
                    "typing.Type"
                ],
                "name": [
                    "str"
                ],
                "subparsers": [
                    "str",
                    "List[str]",
                    "argparse.Namespace",
                    "list"
                ]
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "Config._get_base_dir": {
            "name": "_get_base_dir",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "BinaryIO",
                    "typing.BinaryIO",
                    "Iterable[str]",
                    "str",
                    "typing.Iterable[str]",
                    "bool",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "base_dir": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable[[str], None]",
                    "typing.Callable[str, None]"
                ],
                "users_file": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Config.backend_capability": {
            "name": "backend_capability",
            "location": 118,
            "return": [
                "BackendCapability",
                "bool",
                "Optional[int]",
                "int",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.users_file": {
            "name": "users_file",
            "location": 122,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.base_dir": {
            "name": "base_dir",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.layout": {
            "name": "layout",
            "location": 148,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.colon": {
            "name": "colon",
            "location": 158,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.parse_args": {
            "name": "parse_args",
            "location": 168,
            "return": [
                "typing.Mapping[(str, Any)]"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "Callable",
                    "int",
                    "list[]",
                    "list",
                    "str",
                    "typing.Type",
                    "bool",
                    "Type[T]",
                    "Callable[[None], None]"
                ],
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "FilterSet.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_dir": [
                    "str"
                ]
            }
        },
        "Session.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str"
                ],
                "config": [
                    "Config"
                ],
                "mailbox_set": [
                    "pymap.backend.maildir.mailbox.MailboxSet"
                ],
                "filter_set": [
                    "FilterSet"
                ]
            }
        },
        "Session.config": {
            "name": "config",
            "location": 218,
            "return": [
                "str",
                "Optional[dict]",
                "app.config.MQConfig",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Session.mailbox_set": {
            "name": "mailbox_set",
            "location": 222,
            "return": [
                "str",
                "Set[str]",
                "int",
                "Callable[[str, str], float]",
                "Optional[str]",
                "MutableSequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Session.filter_set": {
            "name": "filter_set",
            "location": 226,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Login.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Config"
                ]
            }
        },
        "Login.tokens": {
            "name": "tokens",
            "location": 239,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Identity.__init__": {
            "name": "__init__",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Config"
                ],
                "name": [
                    "str"
                ],
                "metadata": [
                    "pymap.user.UserMetadata"
                ],
                "mailbox_path": [
                    "str"
                ]
            }
        },
        "Identity.name": {
            "name": "name",
            "location": 274,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Identity._load_maildir": {
            "name": "_load_maildir",
            "location": 288,
            "return": [
                "Tuple[(pymap.backend.maildir.mailbox.Maildir, pymap.backend.maildir.layout.MaildirLayout)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/backend/redis/background.py": {
        "BackgroundTask.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "redis": [
                    "str",
                    "typing.Any",
                    "bool",
                    "Optional[Any]",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "status": [
                    "pymap.health.HealthStatus"
                ],
                "action": [
                    "BackgroundAction"
                ]
            }
        },
        "BackgroundTask.start": {
            "name": "start",
            "location": 81,
            "return": [
                "asyncio.tasks.Task[None]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/backend/redis/cleanup.py": {
        "CleanupAction.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "global_keys": [
                    "pymap.backend.redis.keys.GlobalKeys"
                ]
            }
        }
    },
    "pymap-main/pymap/backend/redis/filter.py": {
        "FilterSet.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "redis": [
                    "int",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "ns_keys": [
                    "pymap.backend.redis.keys.NamespaceKeys"
                ]
            }
        }
    },
    "pymap-main/pymap/backend/redis/keys.py": {
        "RedisKey.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "joiner": [
                    "pymap.bytes.BytesFormat"
                ],
                "segments": [
                    "typing.Sequence"
                ],
                "named": [
                    "typing.Mapping[(str, bytes)]"
                ]
            }
        },
        "RedisKey.fork": {
            "name": "fork",
            "location": 39,
            "return": [
                "RedisKey"
            ],
            "arguments": {
                "self": [
                    "_TRedisKey"
                ],
                "segment": [
                    "str",
                    "List[Tuple[str, int]]",
                    "List[str]"
                ]
            }
        },
        "RedisKey.end": {
            "name": "end",
            "location": 56,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeysGroup.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "RedisKey"
                ]
            }
        },
        "KeysGroup.keys": {
            "name": "keys",
            "location": 83,
            "return": [
                "collections.abc.Sequence[builtins.bytes]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlobalKeys.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "RedisKey"
                ]
            }
        },
        "GlobalKeys.keys": {
            "name": "keys",
            "location": 106,
            "return": [
                "list[]",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CleanupKeys.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "GlobalKeys"
                ]
            }
        },
        "CleanupKeys.keys": {
            "name": "keys",
            "location": 128,
            "return": [
                "list[]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamespaceKeys.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "GlobalKeys"
                ],
                "namespace": [
                    "str",
                    "bool"
                ]
            }
        },
        "NamespaceKeys.keys": {
            "name": "keys",
            "location": 161,
            "return": [
                "list[]",
                "int",
                "bool",
                "str",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentKeys.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "NamespaceKeys"
                ],
                "email_id": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "None",
                    "dict[str, str]",
                    "Union[str, List[str]]",
                    "list[str]",
                    "List[Tuple[int, str]]",
                    "list[tuple[typing.Union[int,str]]]"
                ]
            }
        },
        "ContentKeys.keys": {
            "name": "keys",
            "location": 184,
            "return": [
                "list[]",
                "bytes",
                "Dict[str, Any]",
                "Callable[[str], T]",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterKeys.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "NamespaceKeys"
                ]
            }
        },
        "FilterKeys.keys": {
            "name": "keys",
            "location": 205,
            "return": [
                "str",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxKeys.__init__": {
            "name": "__init__",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "NamespaceKeys"
                ],
                "mailbox_id": [
                    "str",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "MailboxKeys.keys": {
            "name": "keys",
            "location": 234,
            "return": [
                "list[]",
                "str",
                "bytes",
                "int",
                "bytearray",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/backend/redis/mailbox.py": {
        "MailboxData.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "redis": [
                    "bool",
                    "bytes",
                    "str",
                    "Union[Callable, str]",
                    "typing.Callable[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "mailbox_id": [
                    "bytes"
                ],
                "uid_validity": [
                    "int"
                ],
                "keys": [
                    "pymap.backend.redis.keys.MailboxKeys"
                ],
                "ns_keys": [
                    "pymap.backend.redis.keys.NamespaceKeys"
                ],
                "cl_keys": [
                    "pymap.backend.redis.keys.CleanupKeys"
                ]
            }
        },
        "MailboxData.mailbox_id": {
            "name": "mailbox_id",
            "location": 59,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxData.readonly": {
            "name": "readonly",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxData.uid_validity": {
            "name": "uid_validity",
            "location": 67,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxData.selected_set": {
            "name": "selected_set",
            "location": 71,
            "return": [
                "str",
                "Set[str]",
                "int",
                "Callable[[str, str], float]",
                "Optional[str]",
                "MutableSequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxData._get_msg": {
            "name": "_get_msg",
            "location": 74,
            "return": [
                "pymap.backend.redis.message.Message"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "int"
                ],
                "msg_raw": [
                    "bytes"
                ]
            }
        },
        "MailboxData._get_mod_seq": {
            "name": "_get_mod_seq",
            "location": 212,
            "return": [
                "None",
                "Optional[int]",
                "Optional[str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "changes": [
                    "typing.Sequence[Tuple[(bytes, typing.Mapping[(bytes, bytes)])]]"
                ]
            }
        },
        "MailboxData._get_changes": {
            "name": "_get_changes",
            "location": 233,
            "return": [
                "Tuple[(typing.Sequence[pymap.backend.redis.message.Message], FrozenSet[int])]"
            ],
            "arguments": {
                "self": [],
                "changes": [
                    "typing.Sequence[Tuple[(bytes, typing.Mapping[(bytes, bytes)])]]"
                ]
            }
        },
        "MailboxSet.__init__": {
            "name": "__init__",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "redis": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Sequence",
                    "typing.Sequence[]"
                ],
                "keys": [
                    "pymap.backend.redis.keys.NamespaceKeys"
                ],
                "cl_keys": [
                    "pymap.backend.redis.keys.CleanupKeys"
                ]
            }
        },
        "MailboxSet.delimiter": {
            "name": "delimiter",
            "location": 281,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/backend/redis/message.py": {
        "Message.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "int"
                ],
                "internal_date": [
                    "_datetime.datetime"
                ],
                "permanent_flags": [
                    "typing.Iterable[pymap.parsing.specials.flag.Flag]"
                ]
            }
        },
        "Message.copy_expunged": {
            "name": "copy_expunged",
            "location": 70,
            "return": [
                "Message"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMessage]"
                ],
                "msg": [
                    "Message"
                ]
            }
        }
    },
    "pymap-main/pymap/backend/redis/__init__.py": {
        "RedisBackend.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "login": [
                    "Login"
                ],
                "config": [
                    "Config"
                ],
                "status": [
                    "pymap.health.HealthStatus"
                ]
            }
        },
        "RedisBackend.login": {
            "name": "login",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedisBackend.config": {
            "name": "config",
            "location": 62,
            "return": [
                "str",
                "Optional[dict]",
                "app.config.MQConfig",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedisBackend.status": {
            "name": "status",
            "location": 66,
            "return": [
                "str",
                "int",
                "datetime.timedelta",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedisBackend.add_subparser": {
            "name": "add_subparser",
            "location": 70,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Type[T]",
                    "typing.Type"
                ],
                "name": [
                    "str"
                ],
                "subparsers": [
                    "str",
                    "List[str]",
                    "argparse.Namespace",
                    "list"
                ]
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "Config.backend_capability": {
            "name": "backend_capability",
            "location": 133,
            "return": [
                "BackendCapability",
                "bool",
                "Optional[int]",
                "int",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.address": {
            "name": "address",
            "location": 137,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.data_address": {
            "name": "data_address",
            "location": 148,
            "return": [
                "Dict[str, List[int]]",
                "str",
                "Optional[float]",
                "dict",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.separator": {
            "name": "separator",
            "location": 162,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.prefix": {
            "name": "prefix",
            "location": 167,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.users_prefix": {
            "name": "users_prefix",
            "location": 175,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.users_json": {
            "name": "users_json",
            "location": 180,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config._joiner": {
            "name": "_joiner",
            "location": 193,
            "return": [
                "str",
                "BytesFormat"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config._users_root": {
            "name": "_users_root",
            "location": 197,
            "return": [
                "RedisKey",
                "int",
                "Dict[str, Sequence[Any]]",
                "asyncio.StreamReader",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config._global_keys": {
            "name": "_global_keys",
            "location": 201,
            "return": [
                "GlobalKeys",
                "str",
                "Optional[str]",
                "bytes",
                "bool",
                "Sequence[Sequence[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.parse_args": {
            "name": "parse_args",
            "location": 206,
            "return": [
                "typing.Mapping[(str, Any)]"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "Callable",
                    "int",
                    "list[]",
                    "list",
                    "str",
                    "typing.Type",
                    "bool",
                    "Type[T]",
                    "Callable[[None], None]"
                ],
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "Session.__init__": {
            "name": "__init__",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "redis": [
                    "str",
                    "bool",
                    "list[dict[, ]]",
                    "int",
                    "dict[, ]",
                    "List[Dict]",
                    "typing.MutableMapping",
                    "dict",
                    "MutableMapping[str, str]"
                ],
                "owner": [
                    "str"
                ],
                "config": [
                    "Config"
                ],
                "mailbox_set": [
                    "pymap.backend.redis.mailbox.MailboxSet"
                ],
                "filter_set": [
                    "pymap.backend.redis.filter.FilterSet"
                ]
            }
        },
        "Session.config": {
            "name": "config",
            "location": 230,
            "return": [
                "str",
                "Optional[dict]",
                "app.config.MQConfig",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Session.mailbox_set": {
            "name": "mailbox_set",
            "location": 234,
            "return": [
                "str",
                "Set[str]",
                "int",
                "Callable[[str, str], float]",
                "Optional[str]",
                "MutableSequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Session.filter_set": {
            "name": "filter_set",
            "location": 238,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Login.__init__": {
            "name": "__init__",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Config"
                ],
                "status": [
                    "pymap.health.HealthStatus"
                ]
            }
        },
        "Login.tokens": {
            "name": "tokens",
            "location": 255,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Login._start_background": {
            "name": "_start_background",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "contextlib.AsyncExitStack"
                ],
                "user_action": [
                    "pymap.backend.redis.background.BackgroundAction"
                ],
                "mail_action": [
                    "pymap.backend.redis.background.BackgroundAction"
                ]
            }
        },
        "Identity.__init__": {
            "name": "__init__",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Config"
                ],
                "tokens": [
                    "pymap.interfaces.token.TokensInterface"
                ],
                "user_connect": [
                    "typing.Callable[([], typing.Awaitable)]"
                ],
                "mail_connect": [
                    "typing.Callable[([], typing.Awaitable)]"
                ],
                "name": [
                    "str"
                ],
                "role": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "List[Dict]",
                    "list[dict[, ]]",
                    "list",
                    "list[]"
                ]
            }
        },
        "Identity.name": {
            "name": "name",
            "location": 341,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/backend/redis/scripts/cleanup.py": {
        "CleanupScripts.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CleanupNamespace.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CleanupMailbox.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CleanupContent.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/backend/redis/scripts/filter.py": {
        "FilterScripts.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterGet.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterSetActive.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterDelete.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterRename.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/backend/redis/scripts/mailbox.py": {
        "MailboxScripts.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageAdd.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageAdd._convert": {
            "name": "_convert",
            "location": 32,
            "return": [
                "Tuple[(int, bytes, bytes)]"
            ],
            "arguments": {
                "self": [],
                "ret": [
                    "Tuple[(bytes, bytes, bytes)]"
                ]
            }
        },
        "MessageCopy.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageCopy._convert": {
            "name": "_convert",
            "location": 61,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "ret": [
                    "Tuple[bytes]"
                ]
            }
        },
        "MessageMove.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageMove._convert": {
            "name": "_convert",
            "location": 81,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "ret": [
                    "Tuple[bytes]"
                ]
            }
        },
        "MessageUpdate.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageDelete.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxSnapshot.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxSnapshot._convert": {
            "name": "_convert",
            "location": 134,
            "return": [
                "Tuple[(int, int, int, int, Any)]"
            ],
            "arguments": {
                "self": [],
                "ret": [
                    "Tuple[(bytes, bytes, bytes, bytes, bytes)]"
                ]
            }
        }
    },
    "pymap-main/pymap/backend/redis/scripts/namespace.py": {
        "NamespaceScripts.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxList.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxList._convert": {
            "name": "_convert",
            "location": 30,
            "return": [
                "typing.Sequence[bytes]"
            ],
            "arguments": {
                "self": [],
                "ret": [
                    "Tuple[(typing.Mapping[(bytes, bytes)], typing.Sequence[bytes])]"
                ]
            }
        },
        "MailboxGet.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxGet._convert": {
            "name": "_convert",
            "location": 49,
            "return": [
                "Tuple[(bytes, int)]"
            ],
            "arguments": {
                "self": [],
                "ret": [
                    "Tuple[(bytes, bytes)]"
                ]
            }
        },
        "MailboxAdd.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxDelete.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/backend/redis/scripts/__init__.py": {
        "ScriptBase.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ScriptBase._load": {
            "name": "_load",
            "location": 36,
            "return": [
                "Tuple[(str, bytes)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScriptBase._convert": {
            "name": "_convert",
            "location": 43,
            "return": [
                "_RetT"
            ],
            "arguments": {
                "self": [],
                "ret": [
                    "str",
                    "bytes",
                    "Tuple[bytes, bytes, bytes]",
                    "tuple[typing.Union[bytes,bytes,bytes]]"
                ]
            }
        },
        "ScriptBase._pack": {
            "name": "_pack",
            "location": 48,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "ScriptBase._maybe_int": {
            "name": "_maybe_int",
            "location": 52,
            "return": [
                "None",
                "Optional[str]",
                "int",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "bytes"
                ]
            }
        }
    },
    "pymap-main/pymap/bytes/__init__.py": {
        "WriteStream.write": {
            "name": "write",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "HashStream.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashStream.write": {
            "name": "write",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "HashStream.digest": {
            "name": "digest",
            "location": 61,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "None"
                ]
            }
        },
        "Writeable.tobytes": {
            "name": "tobytes",
            "location": 79,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Writeable.empty": {
            "name": "empty",
            "location": 89,
            "return": [
                "Writeable"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWriteable]"
                ]
            }
        },
        "Writeable.wrap": {
            "name": "wrap",
            "location": 94,
            "return": [
                "Writeable"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWriteable]"
                ],
                "data": []
            }
        },
        "Writeable.concat": {
            "name": "concat",
            "location": 104,
            "return": [
                "Writeable"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWriteable]"
                ],
                "data": [
                    "typing.Iterable"
                ]
            }
        },
        "Writeable.write": {
            "name": "write",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "WriteStream"
                ]
            }
        },
        "Writeable.__bool__": {
            "name": "__bool__",
            "location": 123,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Writeable.__len__": {
            "name": "__len__",
            "location": 126,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Writeable.__bytes__": {
            "name": "__bytes__",
            "location": 130,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "_EmptyWriteable.write": {
            "name": "write",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "WriteStream"
                ]
            }
        },
        "_EmptyWriteable.__bytes__": {
            "name": "__bytes__",
            "location": 141,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "_EmptyWriteable.__repr__": {
            "name": "__repr__",
            "location": 144,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_WrappedWriteable.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "_WrappedWriteable.__bytes__": {
            "name": "__bytes__",
            "location": 158,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "_WrappedWriteable.__repr__": {
            "name": "__repr__",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ConcatWriteable.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "typing.Iterable"
                ]
            }
        },
        "_ConcatWriteable.write": {
            "name": "write",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "WriteStream"
                ]
            }
        },
        "_ConcatWriteable.__bytes__": {
            "name": "__bytes__",
            "location": 179,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ConcatWriteable.__repr__": {
            "name": "__repr__",
            "location": 182,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BytesFormat.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "how": [
                    "bytes"
                ]
            }
        },
        "BytesFormat.__mod__": {
            "name": "__mod__",
            "location": 202,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BytesFormat._fix_format_arg": {
            "name": "_fix_format_arg",
            "location": 220,
            "return": [
                "int",
                "bytes"
            ],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "BytesFormat.format": {
            "name": "format",
            "location": 226,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "typing.Iterable"
                ]
            }
        },
        "BytesFormat._fix_join_arg": {
            "name": "_fix_join_arg",
            "location": 243,
            "return": [
                "int",
                "bytes"
            ],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "BytesFormat.join": {
            "name": "join",
            "location": 249,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/cluster/swim.py": {
        "SwimService.add_arguments": {
            "name": "add_arguments",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "argparse.ArgumentParser",
                    "Dict[str, Any]",
                    "argparse._SubParsersAction"
                ],
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "SwimService._local_update": {
            "name": "_local_update",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "members": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "metadata": [
                    "typing.Mapping[(str, bytes)]"
                ]
            }
        }
    },
    "pymap-main/pymap/cluster/__init__.py": {
        "MemberInterface.__hash__": {
            "name": "__hash__",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberInterface.name": {
            "name": "name",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberInterface.metadata": {
            "name": "metadata",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListenCallback.__call__": {
            "name": "__call__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "metadata": [
                    "typing.Mapping[(str, bytes)]"
                ]
            }
        },
        "_LocalMetadata.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LocalMetadata.__getitem__": {
            "name": "__getitem__",
            "location": 65,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "_LocalMetadata.__setitem__": {
            "name": "__setitem__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "bytes"
                ]
            }
        },
        "_LocalMetadata.__delitem__": {
            "name": "__delitem__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "_LocalMetadata.__iter__": {
            "name": "__iter__",
            "location": 82,
            "return": [
                "typing.Iterator[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LocalMetadata.__len__": {
            "name": "__len__",
            "location": 85,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LocalMetadata.__repr__": {
            "name": "__repr__",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RemoteMetadata.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RemoteMetadata.__getitem__": {
            "name": "__getitem__",
            "location": 98,
            "return": [
                "weakref.WeakKeyDictionary[(MemberInterface, bytes)]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "_RemoteMetadata.__iter__": {
            "name": "__iter__",
            "location": 101,
            "return": [
                "typing.Iterator[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RemoteMetadata.__len__": {
            "name": "__len__",
            "location": 104,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RemoteMetadata._add_member": {
            "name": "_add_member",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member": [
                    "MemberInterface"
                ]
            }
        },
        "_RemoteMetadata._del_member": {
            "name": "_del_member",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member": [
                    "MemberInterface"
                ]
            }
        },
        "_RemoteMetadata.__repr__": {
            "name": "__repr__",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterMetadata.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ClusterMetadata.__contains__": {
            "name": "__contains__",
            "location": 146,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "member": [
                    "object"
                ]
            }
        },
        "ClusterMetadata.__iter__": {
            "name": "__iter__",
            "location": 149,
            "return": [
                "typing.Iterator[MemberInterface]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterMetadata.__len__": {
            "name": "__len__",
            "location": 152,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterMetadata.add": {
            "name": "add",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member": [
                    "MemberInterface"
                ]
            }
        },
        "ClusterMetadata.discard": {
            "name": "discard",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member": [
                    "MemberInterface"
                ]
            }
        },
        "ClusterMetadata.local": {
            "name": "local",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClusterMetadata.remote": {
            "name": "remote",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClusterMetadata.get_all": {
            "name": "get_all",
            "location": 177,
            "return": [
                "AbstractSet[bytes]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "ClusterMetadata.listen": {
            "name": "listen",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "ListenCallback[ArgT]"
                ],
                "arg": [
                    "ArgT"
                ]
            }
        }
    },
    "pymap-main/pymap/imap/state.py": {
        "ConnectionState.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "login": [
                    "pymap.interfaces.login.LoginInterface"
                ],
                "config": [
                    "pymap.config.IMAPConfig"
                ]
            }
        },
        "ConnectionState.session": {
            "name": "session",
            "location": 69,
            "return": [
                "None",
                "dict",
                "Exception",
                "Dict[str, Any]",
                "str",
                "Dict[str, Union[str, Set]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionState.selected": {
            "name": "selected",
            "location": 75,
            "return": [
                "None",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionState.capability": {
            "name": "capability",
            "location": 81,
            "return": [
                "Capability",
                "str",
                "IO",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionState._get_func_name": {
            "name": "_get_func_name",
            "location": 366,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "BaseException",
                    "list[str]",
                    "List[dict]",
                    "list[dict[, ]]"
                ],
                "cmd": [
                    "pymap.parsing.command.Command"
                ]
            }
        }
    },
    "pymap-main/pymap/imap/__init__.py": {
        "IMAPService.add_arguments": {
            "name": "add_arguments",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "argparse.ArgumentParser",
                    "Dict[str, Any]",
                    "argparse._SubParsersAction"
                ],
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "IMAPServer.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "login": [
                    "pymap.interfaces.login.LoginInterface"
                ],
                "config": [
                    "pymap.config.IMAPConfig"
                ]
            }
        },
        "IMAPConnection.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "commands": [
                    "pymap.parsing.commands.Commands"
                ],
                "config": [
                    "pymap.config.IMAPConfig"
                ],
                "reader": [
                    "asyncio.streams.StreamReader"
                ],
                "writer": [
                    "asyncio.streams.StreamWriter"
                ]
            }
        },
        "IMAPConnection._reset_streams": {
            "name": "_reset_streams",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reader": [
                    "asyncio.streams.StreamReader"
                ],
                "writer": [
                    "asyncio.streams.StreamWriter"
                ]
            }
        },
        "IMAPConnection.close": {
            "name": "close",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IMAPConnection._print": {
            "name": "_print",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "log_format": [
                    "str"
                ],
                "output": [
                    "str",
                    "int"
                ]
            }
        },
        "IMAPConnection._exec": {
            "name": "_exec",
            "location": 180,
            "return": [
                "typing.Awaitable[_Ret]"
            ],
            "arguments": {
                "self": [],
                "future": [
                    "typing.Awaitable[_Ret]"
                ]
            }
        }
    },
    "pymap-main/pymap/interfaces/backend.py": {
        "BackendInterface.add_subparser": {
            "name": "add_subparser",
            "location": 27,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Type[T]",
                    "typing.Type"
                ],
                "name": [
                    "str"
                ],
                "subparsers": [
                    "str",
                    "bool",
                    "Type[T]",
                    "typing.Type"
                ]
            }
        },
        "BackendInterface.login": {
            "name": "login",
            "location": 70,
            "return": [
                "login.LoginInterface",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BackendInterface.config": {
            "name": "config",
            "location": 76,
            "return": [
                "config.IMAPConfig",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BackendInterface.status": {
            "name": "status",
            "location": 82,
            "return": [
                "health.HealthStatus",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceInterface.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backend": [
                    "BackendInterface"
                ],
                "config": [
                    "pymap.config.IMAPConfig"
                ]
            }
        },
        "ServiceInterface.add_arguments": {
            "name": "add_arguments",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "argparse.ArgumentParser",
                    "Dict[str, Any]",
                    "argparse._SubParsersAction"
                ],
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        }
    },
    "pymap-main/pymap/interfaces/filter.py": {
        "FilterCompilerInterface.value_type": {
            "name": "value_type",
            "location": 58,
            "return": [
                "builtins.type[FilterValueT]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterCompilerInterface.filter_type": {
            "name": "filter_type",
            "location": 64,
            "return": [
                "builtins.type[FilterInterface]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterSetInterface.compiler": {
            "name": "compiler",
            "location": 93,
            "return": [
                "FilterCompilerInterface[FilterValueT]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/interfaces/login.py": {
        "LoginInterface.tokens": {
            "name": "tokens",
            "location": 23,
            "return": [
                "token.TokensInterface",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentityInterface.name": {
            "name": "name",
            "location": 47,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentityInterface.new_session": {
            "name": "new_session",
            "location": 52,
            "return": [
                "AsyncContextManager[pymap.interfaces.session.SessionInterface]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/interfaces/mailbox.py": {
        "MailboxInterface.mailbox_id": {
            "name": "mailbox_id",
            "location": 23,
            "return": [
                "parsing.specials.ObjectId",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxInterface.readonly": {
            "name": "readonly",
            "location": 38,
            "return": [
                "builtins.bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxInterface.permanent_flags": {
            "name": "permanent_flags",
            "location": 44,
            "return": [
                "builtins.frozenset[parsing.specials.Flag]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxInterface.session_flags": {
            "name": "session_flags",
            "location": 50,
            "return": [
                "builtins.frozenset[parsing.specials.Flag]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxInterface.flags": {
            "name": "flags",
            "location": 56,
            "return": [
                "builtins.frozenset[parsing.specials.Flag]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxInterface.exists": {
            "name": "exists",
            "location": 62,
            "return": [
                "builtins.int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxInterface.recent": {
            "name": "recent",
            "location": 68,
            "return": [
                "builtins.int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxInterface.unseen": {
            "name": "unseen",
            "location": 74,
            "return": [
                "builtins.int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxInterface.first_unseen": {
            "name": "first_unseen",
            "location": 80,
            "return": [
                "int | None",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxInterface.next_uid": {
            "name": "next_uid",
            "location": 86,
            "return": [
                "builtins.int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxInterface.uid_validity": {
            "name": "uid_validity",
            "location": 92,
            "return": [
                "builtins.int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/interfaces/message.py": {
        "CachedMessage.uid": {
            "name": "uid",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedMessage.internal_date": {
            "name": "internal_date",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedMessage.permanent_flags": {
            "name": "permanent_flags",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedMessage.email_id": {
            "name": "email_id",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedMessage.thread_id": {
            "name": "thread_id",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedMessage.flags_key": {
            "name": "flags_key",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedMessage.get_flags": {
            "name": "get_flags",
            "location": 81,
            "return": [
                "FrozenSet[pymap.parsing.specials.flag.Flag]"
            ],
            "arguments": {
                "self": [],
                "session_flags": [
                    "pymap.flags.SessionFlags"
                ]
            }
        },
        "MessageInterface.uid": {
            "name": "uid",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageInterface.expunged": {
            "name": "expunged",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageInterface.internal_date": {
            "name": "internal_date",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageInterface.permanent_flags": {
            "name": "permanent_flags",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageInterface.email_id": {
            "name": "email_id",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageInterface.thread_id": {
            "name": "thread_id",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageInterface.get_flags": {
            "name": "get_flags",
            "location": 146,
            "return": [
                "FrozenSet[pymap.parsing.specials.flag.Flag]"
            ],
            "arguments": {
                "self": [],
                "session_flags": [
                    "pymap.flags.SessionFlags"
                ]
            }
        },
        "LoadedMessageInterface.requirement": {
            "name": "requirement",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadedMessageInterface.__bytes__": {
            "name": "__bytes__",
            "location": 189,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadedMessageInterface.get_header": {
            "name": "get_header",
            "location": 193,
            "return": [
                "typing.Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "bytes"
                ]
            }
        },
        "LoadedMessageInterface.get_headers": {
            "name": "get_headers",
            "location": 203,
            "return": [
                "pymap.bytes.Writeable"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "typing.Sequence[int]"
                ]
            }
        },
        "LoadedMessageInterface.get_message_headers": {
            "name": "get_message_headers",
            "location": 217,
            "return": [
                "pymap.bytes.Writeable"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "None"
                ],
                "subset": [
                    "None"
                ],
                "inverse": [
                    "bool"
                ]
            }
        },
        "LoadedMessageInterface.get_message_text": {
            "name": "get_message_text",
            "location": 237,
            "return": [
                "pymap.bytes.Writeable"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "None"
                ]
            }
        },
        "LoadedMessageInterface.get_body": {
            "name": "get_body",
            "location": 252,
            "return": [
                "pymap.bytes.Writeable"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "None"
                ],
                "binary": [
                    "bool"
                ]
            }
        },
        "LoadedMessageInterface.get_size": {
            "name": "get_size",
            "location": 269,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "None"
                ]
            }
        },
        "LoadedMessageInterface.get_envelope_structure": {
            "name": "get_envelope_structure",
            "location": 279,
            "return": [
                "pymap.parsing.response.fetch.EnvelopeStructure"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadedMessageInterface.get_body_structure": {
            "name": "get_body_structure",
            "location": 290,
            "return": [
                "pymap.parsing.response.fetch.BodyStructure"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadedMessageInterface.contains": {
            "name": "contains",
            "location": 301,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes"
                ]
            }
        }
    },
    "pymap-main/pymap/interfaces/session.py": {
        "SessionInterface.owner": {
            "name": "owner",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionInterface.filter_set": {
            "name": "filter_set",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionInterface.close": {
            "name": "close",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/interfaces/token.py": {
        "TokensInterface.get_login_token": {
            "name": "get_login_token",
            "location": 18,
            "return": [
                "str | None",
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str"
                ],
                "key": [
                    "bytes"
                ]
            }
        },
        "TokensInterface.get_admin_token": {
            "name": "get_admin_token",
            "location": 37,
            "return": [
                "str | None",
                "None"
            ],
            "arguments": {
                "self": [],
                "admin_key": [
                    "bool",
                    "str",
                    "list[str]",
                    "Optional[List[str]]",
                    "None",
                    "Optional[Iterable[str]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "List[Tuple[str, str]]",
                    "List[str]"
                ]
            }
        },
        "TokensInterface.parse": {
            "name": "parse",
            "location": 56,
            "return": [
                "pysasl.creds.AuthenticationCredentials",
                "None"
            ],
            "arguments": {
                "self": [],
                "authzid": [
                    "str"
                ],
                "token": [
                    "str"
                ]
            }
        }
    },
    "pymap-main/pymap/interfaces/__init__.py": {},
    "pymap-main/pymap/mime/cte.py": {
        "MessageDecoder.of": {
            "name": "of",
            "location": 28,
            "return": [
                "MessageDecoder"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMessageDecoder]"
                ],
                "msg_header": [
                    "pymap.mime.MessageHeader"
                ]
            }
        },
        "MessageDecoder.of_cte": {
            "name": "of_cte",
            "location": 42,
            "return": [
                "MessageDecoder"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMessageDecoder]"
                ],
                "header": [
                    "Optional[str]",
                    "str",
                    "Optional[Mapping]",
                    "None",
                    "Optional[Dict[str, str]]",
                    "typing.Mapping",
                    "Optional[dict]",
                    "dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "dict[, ]"
                ]
            }
        },
        "MessageDecoder.decode": {
            "name": "decode",
            "location": 70,
            "return": [
                "pymap.bytes.Writeable"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "pymap.mime.MessageBody"
                ]
            }
        },
        "_NoopDecoder.decode": {
            "name": "decode",
            "location": 82,
            "return": [
                "pymap.bytes.Writeable"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "pymap.mime.MessageBody"
                ]
            }
        },
        "_QuotedPrintableDecoder.decode": {
            "name": "decode",
            "location": 88,
            "return": [
                "pymap.bytes.Writeable"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "pymap.mime.MessageBody"
                ]
            }
        },
        "_Base64Decoder.decode": {
            "name": "decode",
            "location": 96,
            "return": [
                "pymap.bytes.Writeable"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "pymap.mime.MessageBody"
                ]
            }
        }
    },
    "pymap-main/pymap/mime/parsed.py": {
        "ParsedHeaders.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "typing.Mapping[(bytes, typing.Sequence[typing.Sequence[bytes]])]"
                ]
            }
        },
        "ParsedHeaders.__getitem__": {
            "name": "__getitem__",
            "location": 32,
            "return": [
                "typing.Sequence[email.headerregistry.BaseHeader]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "bytes"
                ]
            }
        },
        "ParsedHeaders.__len__": {
            "name": "__len__",
            "location": 41,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedHeaders.__contains__": {
            "name": "__contains__",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ParsedHeaders.__iter__": {
            "name": "__iter__",
            "location": 49,
            "return": [
                "typing.Iterator[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedHeaders._parse": {
            "name": "_parse",
            "location": 53,
            "return": [
                "typing.Iterable[email.headerregistry.BaseHeader]"
            ],
            "arguments": {
                "cls": [],
                "values": [
                    "typing.Sequence[typing.Sequence[bytes]]"
                ]
            }
        },
        "ParsedHeaders.__repr__": {
            "name": "__repr__",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedHeaders.content_type": {
            "name": "content_type",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedHeaders.date": {
            "name": "date",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedHeaders.subject": {
            "name": "subject",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedHeaders.from_": {
            "name": "from_",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedHeaders.sender": {
            "name": "sender",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedHeaders.reply_to": {
            "name": "reply_to",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedHeaders.to": {
            "name": "to",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedHeaders.cc": {
            "name": "cc",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedHeaders.bcc": {
            "name": "bcc",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedHeaders.in_reply_to": {
            "name": "in_reply_to",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedHeaders.references": {
            "name": "references",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedHeaders.message_id": {
            "name": "message_id",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedHeaders.content_disposition": {
            "name": "content_disposition",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedHeaders.content_language": {
            "name": "content_language",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedHeaders.content_location": {
            "name": "content_location",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedHeaders.content_id": {
            "name": "content_id",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedHeaders.content_description": {
            "name": "content_description",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedHeaders.content_transfer_encoding": {
            "name": "content_transfer_encoding",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/mime/_util.py": {
        "find_any": {
            "name": "find_any",
            "location": 13,
            "return": [
                "int"
            ],
            "arguments": {
                "data": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "bool",
                    "Tuple[int, int]"
                ],
                "end_marker": [
                    "FrozenSet[int]"
                ],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ],
                "inverse": [
                    "bool"
                ],
                "reverse": [
                    "bool"
                ]
            }
        },
        "get_raw": {
            "name": "get_raw",
            "location": 29,
            "return": [
                "memoryview"
            ],
            "arguments": {
                "view": [
                    "memoryview"
                ]
            }
        }
    },
    "pymap-main/pymap/mime/__init__.py": {
        "MessageContent.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ],
                "header": [
                    "MessageHeader"
                ],
                "body": [
                    "MessageBody"
                ]
            }
        },
        "MessageContent.walk": {
            "name": "walk",
            "location": 47,
            "return": [
                "typing.Iterable[MessageContent]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageContent.is_rfc822": {
            "name": "is_rfc822",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageContent.json": {
            "name": "json",
            "location": 67,
            "return": [
                "dict[typing.Text, ]",
                "dict",
                "int",
                "Dict[str, Any]",
                "Dict[str, Set[str]]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageContent.from_json": {
            "name": "from_json",
            "location": 79,
            "return": [
                "MessageContent"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMessageContent]"
                ],
                "data": [
                    "bytes"
                ],
                "json": [
                    "typing.Mapping[(str, Any)]"
                ]
            }
        },
        "MessageContent.parse": {
            "name": "parse",
            "location": 99,
            "return": [
                "MessageContent"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMessageContent]"
                ],
                "data": [
                    "bytes"
                ]
            }
        },
        "MessageContent._parse": {
            "name": "_parse",
            "location": 111,
            "return": [
                "MessageContent"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMessageContent]"
                ],
                "data": [
                    "bytes"
                ],
                "view": [
                    "memoryview"
                ],
                "lines": [
                    "typing.Sequence[Tuple[(int, int, int)]]"
                ]
            }
        },
        "MessageContent._find_lines": {
            "name": "_find_lines",
            "location": 120,
            "return": [
                "typing.Sequence[Tuple[(int, int, int)]]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "memoryview",
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]",
                    "Type[T]",
                    "typing.Type"
                ],
                "data": [
                    "bytes"
                ]
            }
        },
        "MessageContent._split_lines": {
            "name": "_split_lines",
            "location": 138,
            "return": [
                "Tuple[(typing.Sequence[Tuple[(int, int, int)]], typing.Sequence[Tuple[(int, int, int)]])]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Callable[..., None]",
                    "typing.Callable[..., None]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "data": [
                    "bytes"
                ],
                "lines": [
                    "typing.Sequence[Tuple[(int, int, int)]]"
                ]
            }
        },
        "MessageContent.write": {
            "name": "write",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "pymap.bytes.WriteStream"
                ]
            }
        },
        "MessageContent.__len__": {
            "name": "__len__",
            "location": 149,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageContent.__bytes__": {
            "name": "__bytes__",
            "location": 152,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageHeader.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ],
                "lines": [
                    "typing.Sequence[Tuple[(int, int, int)]]"
                ],
                "folded": [
                    "typing.Sequence[Tuple[(str, typing.Sequence[Tuple[(int, int, int)]])]]"
                ]
            }
        },
        "MessageHeader.lines": {
            "name": "lines",
            "location": 182,
            "return": [
                "int",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageHeader.json": {
            "name": "json",
            "location": 187,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "Optional[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageHeader.from_json": {
            "name": "from_json",
            "location": 199,
            "return": [
                "MessageHeader"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMessageHeader]"
                ],
                "data": [
                    "bytes"
                ],
                "json": [
                    "typing.Mapping[(str, Any)]"
                ]
            }
        },
        "MessageHeader.empty": {
            "name": "empty",
            "location": 216,
            "return": [
                "MessageHeader"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMessageHeader]"
                ]
            }
        },
        "MessageHeader._get_folded": {
            "name": "_get_folded",
            "location": 221,
            "return": [
                "typing.Sequence[Tuple[(bytes, memoryview)]]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bytes",
                    "str",
                    "int"
                ],
                "view": [
                    "memoryview"
                ],
                "folded": [
                    "typing.Sequence[Tuple[(str, typing.Sequence[Tuple[(int, int, int)]])]]"
                ]
            }
        },
        "MessageHeader._get_parsed": {
            "name": "_get_parsed",
            "location": 227,
            "return": [
                "pymap.mime.parsed.ParsedHeaders"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str",
                    "List[int]",
                    "list[int]"
                ],
                "data": [
                    "bytes"
                ],
                "folded": [
                    "typing.Sequence[Tuple[(str, typing.Sequence[Tuple[(int, int, int)]])]]"
                ]
            }
        },
        "MessageHeader._to_bytes": {
            "name": "_to_bytes",
            "location": 236,
            "return": [
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[int]",
                    "int",
                    "bool",
                    "None",
                    "Hashable",
                    "typing.Hashable"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "MessageHeader._to_str": {
            "name": "_to_str",
            "location": 240,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "key": [
                    "bytes"
                ]
            }
        },
        "MessageHeader._parse": {
            "name": "_parse",
            "location": 244,
            "return": [
                "MessageHeader"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMessageHeader]"
                ],
                "data": [
                    "bytes"
                ],
                "view": [
                    "memoryview"
                ],
                "lines": [
                    "typing.Sequence[Tuple[(int, int, int)]]"
                ]
            }
        },
        "MessageHeader._find_folds": {
            "name": "_find_folds",
            "location": 251,
            "return": [
                "typing.Sequence[typing.Sequence[Tuple[(int, int, int)]]]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "typing.Type",
                    "str",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "data": [
                    "bytes"
                ],
                "lines": [
                    "typing.Sequence[Tuple[(int, int, int)]]"
                ]
            }
        },
        "MessageHeader._find_folded": {
            "name": "_find_folded",
            "location": 266,
            "return": [
                "typing.Sequence[Tuple[(str, typing.Sequence[Tuple[(int, int, int)]])]]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Dict[str, Any]",
                    "list",
                    "float",
                    "str"
                ],
                "data": [
                    "bytes"
                ],
                "view": [
                    "memoryview"
                ],
                "folds": [
                    "typing.Sequence[typing.Sequence[Tuple[(int, int, int)]]]"
                ]
            }
        },
        "MessageHeader.write": {
            "name": "write",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "pymap.bytes.WriteStream"
                ]
            }
        },
        "MessageHeader.__len__": {
            "name": "__len__",
            "location": 281,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageHeader.__bytes__": {
            "name": "__bytes__",
            "location": 284,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageBody.__init__": {
            "name": "__init__",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ],
                "lines": [
                    "typing.Sequence[Tuple[(int, int, int)]]"
                ],
                "content_type": [
                    "email.headerregistry.ContentTypeHeader"
                ],
                "nested": [
                    "typing.Sequence[MessageContent]"
                ]
            }
        },
        "MessageBody.lines": {
            "name": "lines",
            "location": 310,
            "return": [
                "int",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageBody.has_nested": {
            "name": "has_nested",
            "location": 315,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageBody.nested": {
            "name": "nested",
            "location": 320,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageBody.json": {
            "name": "json",
            "location": 325,
            "return": [
                "bool",
                "dict[typing.Text, typing.Union[str,list[]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageBody.from_json": {
            "name": "from_json",
            "location": 338,
            "return": [
                "MessageBody"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMessageBody]"
                ],
                "data": [
                    "bytes"
                ],
                "json": [
                    "typing.Mapping[(str, Any)]"
                ]
            }
        },
        "MessageBody.empty": {
            "name": "empty",
            "location": 357,
            "return": [
                "MessageBody"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMessageBody]"
                ]
            }
        },
        "MessageBody._parse": {
            "name": "_parse",
            "location": 363,
            "return": [
                "MessageBody"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMessageBody]"
                ],
                "data": [
                    "bytes"
                ],
                "view": [
                    "memoryview"
                ],
                "lines": [
                    "typing.Sequence[Tuple[(int, int, int)]]"
                ],
                "content_type": [
                    "str",
                    "bool",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "MessageBody._parse_content_type": {
            "name": "_parse_content_type",
            "location": 378,
            "return": [
                "email.headerregistry.ContentTypeHeader"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "bytes",
                    "Dict[int, str]",
                    "dict[int, str]"
                ],
                "header": [
                    "str"
                ]
            }
        },
        "MessageBody._get_boundary": {
            "name": "_get_boundary",
            "location": 384,
            "return": [
                "str",
                "bool",
                "bytes",
                "Optional[int]",
                "int",
                "bytearray",
                "dict[, ]",
                "list[str]",
                "None"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "content_type": [
                    "email.headerregistry.ContentTypeHeader"
                ]
            }
        },
        "MessageBody._parse_rfc822": {
            "name": "_parse_rfc822",
            "location": 400,
            "return": [
                "MessageBody"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMessageBody]"
                ],
                "data": [
                    "bytes"
                ],
                "view": [
                    "memoryview"
                ],
                "lines": [
                    "typing.Sequence[Tuple[(int, int, int)]]"
                ],
                "content_type": [
                    "email.headerregistry.ContentTypeHeader"
                ]
            }
        },
        "MessageBody._parse_multipart": {
            "name": "_parse_multipart",
            "location": 406,
            "return": [
                "MessageBody"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMessageBody]"
                ],
                "data": [
                    "bytes"
                ],
                "view": [
                    "memoryview"
                ],
                "lines": [
                    "typing.Sequence[Tuple[(int, int, int)]]"
                ],
                "content_type": [
                    "email.headerregistry.ContentTypeHeader"
                ],
                "boundary": [
                    "bytes"
                ]
            }
        },
        "MessageBody._find_parts": {
            "name": "_find_parts",
            "location": 417,
            "return": [
                "typing.Sequence[typing.Sequence[Tuple[(int, int, int)]]]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "data": [
                    "bytes"
                ],
                "view": [
                    "memoryview"
                ],
                "lines": [
                    "typing.Sequence[Tuple[(int, int, int)]]"
                ],
                "boundary": [
                    "bytes"
                ]
            }
        },
        "MessageBody.write": {
            "name": "write",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "pymap.bytes.WriteStream"
                ]
            }
        },
        "MessageBody.__len__": {
            "name": "__len__",
            "location": 436,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageBody.__bytes__": {
            "name": "__bytes__",
            "location": 439,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/parsing/commands.py": {
        "InvalidCommand.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "pymap.parsing.Params"
                ],
                "parse_exc": [],
                "command": [
                    "None"
                ],
                "command_type": [
                    "None"
                ]
            }
        },
        "InvalidCommand.value": {
            "name": "value",
            "location": 60,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidCommand.message": {
            "name": "message",
            "location": 64,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidCommand.command_name": {
            "name": "command_name",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvalidCommand.command_type": {
            "name": "command_type",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvalidCommand.parse_exc": {
            "name": "parse_exc",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvalidCommand.parse": {
            "name": "parse",
            "location": 89,
            "return": [
                "Tuple[(InvalidCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "Commands.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Commands._load_commands": {
            "name": "_load_commands",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Commands.register": {
            "name": "register",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "Type[pymap.parsing.command.Command]"
                ]
            }
        },
        "Commands.deregister": {
            "name": "deregister",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "bytes"
                ]
            }
        },
        "Commands.parse": {
            "name": "parse",
            "location": 127,
            "return": [
                "Tuple[(pymap.parsing.command.Command, memoryview)]"
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        }
    },
    "pymap-main/pymap/parsing/exceptions.py": {
        "NotParseable.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "memoryview"
                ],
                "code": [
                    "str",
                    "Exception",
                    "None"
                ]
            }
        },
        "NotParseable.__bytes__": {
            "name": "__bytes__",
            "location": 32,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotParseable.__str__": {
            "name": "__str__",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/parsing/message.py": {},
    "pymap-main/pymap/parsing/modutf7.py": {
        "_modified_b64encode": {
            "name": "_modified_b64encode",
            "location": 14,
            "return": [
                "bytes"
            ],
            "arguments": {
                "src": [
                    "str"
                ]
            }
        },
        "_modified_b64decode": {
            "name": "_modified_b64decode",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "src": [
                    "bytes"
                ]
            }
        },
        "modutf7_encode": {
            "name": "modutf7_encode",
            "location": 28,
            "return": [
                "bytes"
            ],
            "arguments": {
                "data": [
                    "str"
                ]
            }
        },
        "modutf7_decode": {
            "name": "modutf7_decode",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ]
            }
        }
    },
    "pymap-main/pymap/parsing/primitives.py": {
        "Nil.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nil.value": {
            "name": "value",
            "location": 33,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nil.__bytes__": {
            "name": "__bytes__",
            "location": 37,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nil.__hash__": {
            "name": "__hash__",
            "location": 40,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nil.__eq__": {
            "name": "__eq__",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T",
                    "MutableMapping[str, Any]",
                    "str"
                ]
            }
        },
        "Nil.parse": {
            "name": "parse",
            "location": 49,
            "return": [
                "Tuple[(Nil, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "Number.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "int"
                ]
            }
        },
        "Number.value": {
            "name": "value",
            "location": 80,
            "return": [
                "Tuple[int, int]",
                "List[Tuple[int, int]]",
                "List[str]",
                "int",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.parse": {
            "name": "parse",
            "location": 85,
            "return": [
                "Tuple[(Number, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "str",
                    "Type",
                    "int"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "Number.__bytes__": {
            "name": "__bytes__",
            "location": 96,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.__hash__": {
            "name": "__hash__",
            "location": 99,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.__eq__": {
            "name": "__eq__",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Number.__lt__": {
            "name": "__lt__",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Atom.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes"
                ]
            }
        },
        "Atom.value": {
            "name": "value",
            "location": 132,
            "return": [
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Atom.parse": {
            "name": "parse",
            "location": 137,
            "return": [
                "Tuple[(Atom, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[object]",
                    "int",
                    "bytes",
                    "Callable[[str, str], str]"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "Atom.__bytes__": {
            "name": "__bytes__",
            "location": 146,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Atom.__hash__": {
            "name": "__hash__",
            "location": 149,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Atom.__eq__": {
            "name": "__eq__",
            "location": 152,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[Iterable[int], int]",
                    "SupportsFloat",
                    "Iterable[Any]",
                    "List[T]",
                    "AbstractSet[Any]"
                ]
            }
        },
        "String.binary": {
            "name": "binary",
            "location": 170,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.length": {
            "name": "length",
            "location": 176,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.parse": {
            "name": "parse",
            "location": 181,
            "return": [
                "Tuple[(String, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "Params",
                    "memoryview",
                    "bool",
                    "str"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "String.build": {
            "name": "build",
            "location": 190,
            "return": [
                "str",
                "bool",
                "Optional[Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]"
                ],
                "value": [
                    "object"
                ],
                "binary": [
                    "bool"
                ],
                "fallback": [
                    "object"
                ]
            }
        },
        "String.__bytes__": {
            "name": "__bytes__",
            "location": 231,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.__hash__": {
            "name": "__hash__",
            "location": 234,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.__eq__": {
            "name": "__eq__",
            "location": 237,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[Any]",
                    "Type"
                ]
            }
        },
        "QuotedString.__init__": {
            "name": "__init__",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "bytes"
                ],
                "raw": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "QuotedString.value": {
            "name": "value",
            "location": 263,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuotedString.binary": {
            "name": "binary",
            "location": 268,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuotedString.length": {
            "name": "length",
            "location": 272,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuotedString.parse": {
            "name": "parse",
            "location": 276,
            "return": [
                "Tuple[(QuotedString, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Params",
                    "eth.abc.DatabaseAPI",
                    "dict",
                    "Match[bytes]",
                    "bytes",
                    "float"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "QuotedString._escape_quoted_specials": {
            "name": "_escape_quoted_specials",
            "location": 302,
            "return": [
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "Iterable[Any]",
                    "bool",
                    "SupportsFloat"
                ],
                "match": [
                    "Match[bytes]"
                ]
            }
        },
        "QuotedString.__bytes__": {
            "name": "__bytes__",
            "location": 305,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiteralString.__init__": {
            "name": "__init__",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "int",
                    "str",
                    "List[Tuple[int, int]]",
                    "tuple"
                ],
                "binary": [
                    "bool"
                ]
            }
        },
        "LiteralString.value": {
            "name": "value",
            "location": 337,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiteralString.binary": {
            "name": "binary",
            "location": 341,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiteralString.length": {
            "name": "length",
            "location": 345,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiteralString._prefix": {
            "name": "_prefix",
            "location": 349,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiteralString._check_too_big": {
            "name": "_check_too_big",
            "location": 354,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int"
                ],
                "params": [
                    "pymap.parsing.Params"
                ],
                "length": [
                    "int"
                ]
            }
        },
        "LiteralString.parse": {
            "name": "parse",
            "location": 362,
            "return": [
                "Tuple[(LiteralString, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "type"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "LiteralString.write": {
            "name": "write",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "pymap.bytes.WriteStream"
                ]
            }
        },
        "LiteralString.__len__": {
            "name": "__len__",
            "location": 394,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiteralString.__bytes__": {
            "name": "__bytes__",
            "location": 397,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "List.__init__": {
            "name": "__init__",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "typing.Iterable"
                ],
                "sort": [
                    "bool"
                ]
            }
        },
        "List.value": {
            "name": "value",
            "location": 426,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Union[Sequence, 'SweepFixedValues']",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "List.get_as": {
            "name": "get_as",
            "location": 430,
            "return": [
                "typing.Sequence[MaybeBytesT]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[MaybeBytesT]"
                ]
            }
        },
        "List.__iter__": {
            "name": "__iter__",
            "location": 435,
            "return": [
                "typing.Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "List.__len__": {
            "name": "__len__",
            "location": 438,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "List.parse": {
            "name": "parse",
            "location": 442,
            "return": [
                "Tuple[(List, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "Type[T]"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "List.write": {
            "name": "write",
            "location": 459,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "pymap.bytes.WriteStream"
                ]
            }
        },
        "List.__bytes__": {
            "name": "__bytes__",
            "location": 473,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "List.__hash__": {
            "name": "__hash__",
            "location": 477,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "List.__eq__": {
            "name": "__eq__",
            "location": 480,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Set[VT]",
                    "str"
                ]
            }
        }
    },
    "pymap-main/pymap/parsing/state.py": {
        "ParsingState.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsingInterrupt.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "ParsingExpectation"
                ]
            }
        },
        "ParsingExpectation.consume": {
            "name": "consume",
            "location": 65,
            "return": [
                "ParsingExpectedT | None",
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "ParsingState"
                ]
            }
        },
        "ParsingExpectation.expect": {
            "name": "expect",
            "location": 74,
            "return": [
                "ParsingExpectedT"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "ParsingState"
                ]
            }
        },
        "ExpectContinuation.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bytes"
                ],
                "literal_length": [
                    "int"
                ]
            }
        },
        "ExpectContinuation.consume": {
            "name": "consume",
            "location": 110,
            "return": [
                "str",
                "float",
                "eth.abc.ChainAPI"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "ParsingState"
                ]
            }
        }
    },
    "pymap-main/pymap/parsing/__init__.py": {
        "Params.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "None"
                ]
            }
        },
        "Params._set_if_none": {
            "name": "_set_if_none",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kwargs": [
                    "Dict[(str, Any)]"
                ],
                "attr": [
                    "str"
                ],
                "value": []
            }
        },
        "Params.copy": {
            "name": "copy",
            "location": 74,
            "return": [
                "Params"
            ],
            "arguments": {
                "self": [
                    "_TParams"
                ],
                "state": [
                    "None"
                ]
            }
        },
        "Parseable.value": {
            "name": "value",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parseable._whitespace_length": {
            "name": "_whitespace_length",
            "location": 119,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [
                    "Type[Parseable]"
                ],
                "buf": [
                    "memoryview"
                ],
                "start": [
                    "int"
                ]
            }
        },
        "Parseable.__eq__": {
            "name": "__eq__",
            "location": 125,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Parseable.parse": {
            "name": "parse",
            "location": 132,
            "return": [
                "Tuple[(Parseable[ParseableT], memoryview)]"
            ],
            "arguments": {
                "cls": [],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "Params"
                ]
            }
        },
        "ExpectedParseable.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpectedParseable.value": {
            "name": "value",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpectedParseable.__bytes__": {
            "name": "__bytes__",
            "location": 159,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpectedParseable.parse": {
            "name": "parse",
            "location": 163,
            "return": [
                "Tuple[(Parseable, memoryview)]"
            ],
            "arguments": {
                "cls": [],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "Params"
                ]
            }
        },
        "Space.__init__": {
            "name": "__init__",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int"
                ]
            }
        },
        "Space.value": {
            "name": "value",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Space.parse": {
            "name": "parse",
            "location": 202,
            "return": [
                "Tuple[(Space, memoryview)]"
            ],
            "arguments": {
                "cls": [],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "Params"
                ]
            }
        },
        "Space.__bytes__": {
            "name": "__bytes__",
            "location": 209,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "EndLine.__init__": {
            "name": "__init__",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "preceding_spaces": [
                    "int"
                ],
                "carriage_return": [
                    "bool"
                ]
            }
        },
        "EndLine.value": {
            "name": "value",
            "location": 238,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "EndLine.parse": {
            "name": "parse",
            "location": 243,
            "return": [
                "Tuple[(EndLine, memoryview)]"
            ],
            "arguments": {
                "cls": [],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "Params"
                ]
            }
        },
        "EndLine.__bytes__": {
            "name": "__bytes__",
            "location": 252,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/parsing/command/any.py": {},
    "pymap-main/pymap/parsing/command/auth.py": {
        "CommandMailboxArg.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes"
                ],
                "mailbox": [
                    "pymap.parsing.specials.mailbox.Mailbox"
                ]
            }
        },
        "CommandMailboxArg.mailbox": {
            "name": "mailbox",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandMailboxArg.parse": {
            "name": "parse",
            "location": 34,
            "return": [
                "Tuple[(CommandMailboxArg, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "\"Track\""
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "AppendCommand.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes"
                ],
                "mailbox": [
                    "pymap.parsing.specials.mailbox.Mailbox"
                ],
                "messages": [
                    "typing.Iterable[pymap.parsing.message.AppendMessage]"
                ],
                "cancelled": [
                    "bool"
                ],
                "error": [
                    "Optional[str]",
                    "bool",
                    "None",
                    "str",
                    "Optional[List[str]]",
                    "list[str]"
                ]
            }
        },
        "AppendCommand.mailbox": {
            "name": "mailbox",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppendCommand._parse_msg": {
            "name": "_parse_msg",
            "location": 75,
            "return": [
                "Tuple[(Any, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Type[T]",
                    "typing.Type"
                ],
                "name": [
                    "str"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "AppendCommand.parse": {
            "name": "parse",
            "location": 121,
            "return": [
                "Tuple[(AppendCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "Params",
                    "dict[str, object]",
                    "Dict[str, object]"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "CreateCommand.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes"
                ],
                "mailbox": [
                    "pymap.parsing.specials.mailbox.Mailbox"
                ],
                "options": [
                    "pymap.parsing.specials.options.ExtensionOptions"
                ]
            }
        },
        "CreateCommand.parse": {
            "name": "parse",
            "location": 155,
            "return": [
                "Tuple[(CreateCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "Type[object]",
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "Iterable[T]"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "ListCommand.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes"
                ],
                "ref_name": [
                    "str"
                ],
                "filter_": [
                    "str"
                ]
            }
        },
        "ListCommand.parse": {
            "name": "parse",
            "location": 194,
            "return": [
                "Tuple[(ListCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "type",
                    "Type[T]",
                    "Type['AbstractIntegrationConversation']"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "RenameCommand.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes"
                ],
                "from_mailbox": [
                    "pymap.parsing.specials.mailbox.Mailbox"
                ],
                "to_mailbox": [
                    "pymap.parsing.specials.mailbox.Mailbox"
                ],
                "options": [
                    "pymap.parsing.specials.options.ExtensionOptions"
                ]
            }
        },
        "RenameCommand.from_mailbox": {
            "name": "from_mailbox",
            "location": 241,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenameCommand.to_mailbox": {
            "name": "to_mailbox",
            "location": 245,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenameCommand.parse": {
            "name": "parse",
            "location": 249,
            "return": [
                "Tuple[(RenameCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "dict",
                    "dict[, ]",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "SelectCommand.__init__": {
            "name": "__init__",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes"
                ],
                "mailbox": [
                    "pymap.parsing.specials.mailbox.Mailbox"
                ],
                "options": [
                    "pymap.parsing.specials.options.ExtensionOptions"
                ]
            }
        },
        "SelectCommand.parse": {
            "name": "parse",
            "location": 278,
            "return": [
                "Tuple[(SelectCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "Type[object]",
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "Iterable[T]"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "StatusCommand.__init__": {
            "name": "__init__",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes"
                ],
                "mailbox": [
                    "pymap.parsing.specials.mailbox.Mailbox"
                ],
                "status_list": [
                    "typing.Sequence[pymap.parsing.specials.statusattr.StatusAttribute]"
                ]
            }
        },
        "StatusCommand.parse": {
            "name": "parse",
            "location": 319,
            "return": [
                "Tuple[(StatusCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[\"PNSqlCursor\"]",
                    "None"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        }
    },
    "pymap-main/pymap/parsing/command/nonauth.py": {
        "AuthenticateCommand.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes"
                ],
                "mech_name": [
                    "bytes"
                ]
            }
        },
        "AuthenticateCommand.parse": {
            "name": "parse",
            "location": 29,
            "return": [
                "Tuple[(AuthenticateCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "typing.Type",
                    "Union[int, slice]",
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "LoginCommand.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes"
                ],
                "userid": [
                    "bytes"
                ],
                "password": [
                    "bytes"
                ]
            }
        },
        "LoginCommand.parse": {
            "name": "parse",
            "location": 56,
            "return": [
                "Tuple[(LoginCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "Union[int, str]",
                    "int",
                    "Type",
                    "str",
                    "typing.Type"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        }
    },
    "pymap-main/pymap/parsing/command/select.py": {
        "ExpungeCommand.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes"
                ],
                "uid_set": [
                    "int",
                    "None",
                    "Optional[List[str]]",
                    "bool",
                    "list[str]",
                    "Optional[Set[str]]",
                    "set[str]",
                    "Callable[[dict], None]",
                    "typing.Callable[dict[, ], None]",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Pattern",
                    "typing.Pattern"
                ]
            }
        },
        "ExpungeCommand.parse": {
            "name": "parse",
            "location": 68,
            "return": [
                "Tuple[(ExpungeCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "typing.Type",
                    "type",
                    "dict[, ]",
                    "dict",
                    "T"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "CopyCommand.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes"
                ],
                "seq_set": [
                    "pymap.parsing.specials.sequenceset.SequenceSet"
                ],
                "mailbox": [
                    "pymap.parsing.specials.mailbox.Mailbox"
                ]
            }
        },
        "CopyCommand.mailbox": {
            "name": "mailbox",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CopyCommand.parse": {
            "name": "parse",
            "location": 106,
            "return": [
                "Tuple[(CopyCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "typing.Type",
                    "type",
                    "dict[, ]",
                    "dict",
                    "T"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "MoveCommand.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes"
                ],
                "seq_set": [
                    "pymap.parsing.specials.sequenceset.SequenceSet"
                ],
                "mailbox": [
                    "pymap.parsing.specials.mailbox.Mailbox"
                ]
            }
        },
        "MoveCommand.mailbox": {
            "name": "mailbox",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoveCommand.parse": {
            "name": "parse",
            "location": 144,
            "return": [
                "Tuple[(MoveCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "typing.Type",
                    "type",
                    "dict[, ]",
                    "dict",
                    "T"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "FetchCommand.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes"
                ],
                "seq_set": [
                    "pymap.parsing.specials.sequenceset.SequenceSet"
                ],
                "attr_list": [
                    "typing.Sequence[pymap.parsing.specials.fetchattr.FetchAttribute]"
                ],
                "options": [
                    "None",
                    "Iterable[object]",
                    "typing.Iterable[object]",
                    "Dict[str, str]",
                    "typing.Sequence[str]",
                    "typing.Callable[, ]",
                    "List[str]",
                    "str",
                    "dict",
                    "Optional[Sequence[str]]",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "FetchCommand._check_macros": {
            "name": "_check_macros",
            "location": 181,
            "return": [
                "Tuple[(typing.Sequence[pymap.parsing.specials.fetchattr.FetchAttribute], memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "Params",
                    "bool",
                    "str"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "FetchCommand.parse": {
            "name": "parse",
            "location": 206,
            "return": [
                "Tuple[(FetchCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "dict",
                    "list[str]",
                    "List[str]",
                    "int"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "StoreCommand.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes"
                ],
                "seq_set": [
                    "pymap.parsing.specials.sequenceset.SequenceSet"
                ],
                "flags": [
                    "typing.Iterable[pymap.parsing.specials.flag.Flag]"
                ],
                "mode": [
                    "pymap.flags.FlagOp"
                ],
                "silent": [
                    "bool"
                ],
                "options": [
                    "Dict[str, str]",
                    "None",
                    "dict",
                    "dict[str, str]",
                    "str",
                    "List[str]",
                    "bytes",
                    "dict[, ]",
                    "list[str]",
                    "Optional[str]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "StoreCommand._parse_store_info": {
            "name": "_parse_store_info",
            "location": 265,
            "return": [
                "Tuple[(pymap.flags.FlagOp, bool, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "StoreCommand._parse_flag_list": {
            "name": "_parse_flag_list",
            "location": 276,
            "return": [
                "Tuple[(typing.Sequence[pymap.parsing.specials.flag.Flag], memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "Callable[[Any], T]",
                    "bool",
                    "typing.Callable[typing.Any, T]",
                    "str",
                    "Type[T]",
                    "typing.Type"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "StoreCommand.parse": {
            "name": "parse",
            "location": 295,
            "return": [
                "Tuple[(StoreCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "SearchCommand.__init__": {
            "name": "__init__",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes"
                ],
                "keys": [
                    "typing.Iterable[pymap.parsing.specials.searchkey.SearchKey]"
                ],
                "charset": [
                    "bool",
                    "typing.Sequence[]",
                    "str",
                    "Sequence",
                    "typing.Mapping",
                    "Mapping[str, Any]",
                    "int"
                ],
                "options": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "SearchCommand._parse_charset": {
            "name": "_parse_charset",
            "location": 334,
            "return": [
                "Tuple[(Any, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "Params",
                    "bool",
                    "str"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "SearchCommand._parse_options": {
            "name": "_parse_options",
            "location": 354,
            "return": [
                "Tuple[(pymap.parsing.specials.options.ExtensionOptions, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "str",
                    "Optional[int]"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "SearchCommand.parse": {
            "name": "parse",
            "location": 364,
            "return": [
                "Tuple[(SearchCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "Params",
                    "memoryview",
                    "dict",
                    "float",
                    "Dict[str, List[float]]"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "UidCommand.parse": {
            "name": "parse",
            "location": 398,
            "return": [
                "Tuple[(UidCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "UidCopyCommand.parse": {
            "name": "parse",
            "location": 414,
            "return": [
                "Tuple[(UidCopyCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "Params",
                    "bool",
                    "str"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "UidMoveCommand.parse": {
            "name": "parse",
            "location": 433,
            "return": [
                "Tuple[(UidMoveCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "Params",
                    "bool",
                    "str"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "UidExpungeCommand.parse": {
            "name": "parse",
            "location": 452,
            "return": [
                "Tuple[(UidExpungeCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "Params",
                    "bool",
                    "str"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "UidFetchCommand.parse": {
            "name": "parse",
            "location": 471,
            "return": [
                "Tuple[(UidFetchCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "Params",
                    "bool",
                    "str"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "UidSearchCommand.parse": {
            "name": "parse",
            "location": 490,
            "return": [
                "Tuple[(UidSearchCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "Params",
                    "bool",
                    "str"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "UidStoreCommand.parse": {
            "name": "parse",
            "location": 509,
            "return": [
                "Tuple[(UidStoreCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "Params",
                    "bool",
                    "str"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "IdleCommand.parse": {
            "name": "parse",
            "location": 540,
            "return": [
                "Tuple[(IdleCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "\"Track\""
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "IdleCommand.parse_done": {
            "name": "parse_done",
            "location": 545,
            "return": [
                "Tuple[(bool, memoryview)]"
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "memoryview"
                ]
            }
        }
    },
    "pymap-main/pymap/parsing/command/__init__.py": {
        "Command.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes"
                ]
            }
        },
        "Command.value": {
            "name": "value",
            "location": 37,
            "return": [
                "Union[str, int, float]",
                "float",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.parse": {
            "name": "parse",
            "location": 43,
            "return": [
                "Tuple[(Command, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "Params",
                    "bool",
                    "str"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "Command.__bytes__": {
            "name": "__bytes__",
            "location": 47,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.__repr__": {
            "name": "__repr__",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandNoArgs.parse": {
            "name": "parse",
            "location": 61,
            "return": [
                "Tuple[(CommandNoArgs, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "\"Track\""
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        }
    },
    "pymap-main/pymap/parsing/response/code.py": {
        "Capability.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_capabilities": [
                    "typing.Iterable"
                ]
            }
        },
        "Capability.__contains__": {
            "name": "__contains__",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "capability": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Capability.string": {
            "name": "string",
            "location": 32,
            "return": [
                "int",
                "List[str]",
                "dict[str, str]",
                "str",
                "list[str]",
                "typing.DefaultDict",
                "frozenset",
                "dict[str, list[str]]",
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Capability.__bytes__": {
            "name": "__bytes__",
            "location": 40,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "PermanentFlags.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "typing.Iterable"
                ]
            }
        },
        "PermanentFlags.__bytes__": {
            "name": "__bytes__",
            "location": 58,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "UidNext.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "next_": [
                    "int"
                ]
            }
        },
        "UidNext.__bytes__": {
            "name": "__bytes__",
            "location": 74,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "UidValidity.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validity": [
                    "int"
                ]
            }
        },
        "UidValidity.__bytes__": {
            "name": "__bytes__",
            "location": 91,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unseen.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "next_": [
                    "int"
                ]
            }
        },
        "Unseen.__bytes__": {
            "name": "__bytes__",
            "location": 108,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppendUid.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validity": [
                    "int"
                ],
                "uids": [
                    "typing.Iterable[int]"
                ]
            }
        },
        "AppendUid.__bytes__": {
            "name": "__bytes__",
            "location": 132,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "CopyUid.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validity": [
                    "int"
                ],
                "uids": [
                    "typing.Iterable[Tuple[(int, int)]]"
                ]
            }
        },
        "CopyUid.__bytes__": {
            "name": "__bytes__",
            "location": 157,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailboxId.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "object_id": [
                    "int",
                    "str"
                ]
            }
        },
        "MailboxId.__bytes__": {
            "name": "__bytes__",
            "location": 178,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/parsing/response/fetch.py": {
        "_Concatenated.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parts": [
                    "typing.Sequence[SupportsBytes]"
                ]
            }
        },
        "_Concatenated.write": {
            "name": "write",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "pymap.bytes.WriteStream"
                ]
            }
        },
        "_Concatenated.__bytes__": {
            "name": "__bytes__",
            "location": 31,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AddressList.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": []
            }
        },
        "_AddressList._parse": {
            "name": "_parse",
            "location": 42,
            "return": [
                "pymap.parsing.primitives.List"
            ],
            "arguments": {
                "cls": [],
                "address": [
                    "email.headerregistry.Address"
                ]
            }
        },
        "_AddressList._value": {
            "name": "_value",
            "location": 49,
            "return": [
                "List",
                "Nil"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AddressList.write": {
            "name": "write",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "pymap.bytes.WriteStream"
                ]
            }
        },
        "_AddressList.__bytes__": {
            "name": "__bytes__",
            "location": 65,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ParamsList.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "_ParamsList._value": {
            "name": "_value",
            "location": 76,
            "return": [
                "List",
                "Nil"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ParamsList.write": {
            "name": "write",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "pymap.bytes.WriteStream"
                ]
            }
        },
        "_ParamsList.__bytes__": {
            "name": "__bytes__",
            "location": 87,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnvelopeStructure.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "date": [],
                "subject": [],
                "from_": [],
                "sender": [],
                "reply_to": [],
                "to": [],
                "cc": [],
                "bcc": [],
                "in_reply_to": [],
                "message_id": []
            }
        },
        "EnvelopeStructure.empty": {
            "name": "empty",
            "location": 133,
            "return": [
                "EnvelopeStructure"
            ],
            "arguments": {
                "cls": [
                    "Type[_TEnvelopeStructure]"
                ]
            }
        },
        "EnvelopeStructure._addresses": {
            "name": "_addresses",
            "location": 143,
            "return": [
                "SupportsBytes"
            ],
            "arguments": {
                "self": [],
                "headers": [],
                "fallback": [
                    "None"
                ]
            }
        },
        "EnvelopeStructure._value": {
            "name": "_value",
            "location": 151,
            "return": [
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnvelopeStructure.write": {
            "name": "write",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "pymap.bytes.WriteStream"
                ]
            }
        },
        "EnvelopeStructure.__bytes__": {
            "name": "__bytes__",
            "location": 168,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "BodyStructure.__init__": {
            "name": "__init__",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "maintype": [
                    "str"
                ],
                "subtype": [
                    "str"
                ],
                "content_type_params": [],
                "content_disposition": [],
                "content_language": [],
                "content_location": []
            }
        },
        "BodyStructure.empty": {
            "name": "empty",
            "location": 201,
            "return": [
                "BodyStructure"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBodyStructure]"
                ]
            }
        },
        "BodyStructure._value": {
            "name": "_value",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BodyStructure.write": {
            "name": "write",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "pymap.bytes.WriteStream"
                ]
            }
        },
        "BodyStructure.__bytes__": {
            "name": "__bytes__",
            "location": 218,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "BodyStructure.extended": {
            "name": "extended",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartBodyStructure.__init__": {
            "name": "__init__",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subtype": [
                    "str"
                ],
                "content_type_params": [],
                "content_disposition": [],
                "content_language": [],
                "content_location": [],
                "parts": [
                    "typing.Sequence[BodyStructure]"
                ]
            }
        },
        "MultipartBodyStructure._value": {
            "name": "_value",
            "location": 253,
            "return": [
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartBodyStructure.extended": {
            "name": "extended",
            "location": 257,
            "return": [
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentBodyStructure.__init__": {
            "name": "__init__",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "maintype": [
                    "str"
                ],
                "subtype": [
                    "str"
                ],
                "content_type_params": [],
                "content_disposition": [],
                "content_language": [],
                "content_location": [],
                "content_id": [],
                "content_description": [],
                "content_transfer_encoding": [],
                "body_md5": [],
                "size": [
                    "int"
                ]
            }
        },
        "ContentBodyStructure._value": {
            "name": "_value",
            "location": 306,
            "return": [
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentBodyStructure.extended": {
            "name": "extended",
            "location": 316,
            "return": [
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextBodyStructure.__init__": {
            "name": "__init__",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subtype": [
                    "str"
                ],
                "content_type_params": [],
                "content_disposition": [],
                "content_language": [],
                "content_location": [],
                "content_id": [],
                "content_description": [],
                "content_transfer_encoding": [],
                "body_md5": [],
                "size": [
                    "int"
                ],
                "lines": [
                    "int"
                ]
            }
        },
        "TextBodyStructure._value": {
            "name": "_value",
            "location": 366,
            "return": [
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextBodyStructure.extended": {
            "name": "extended",
            "location": 376,
            "return": [
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageBodyStructure.__init__": {
            "name": "__init__",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content_type_params": [],
                "content_disposition": [],
                "content_language": [],
                "content_location": [],
                "content_id": [],
                "content_description": [],
                "content_transfer_encoding": [],
                "body_md5": [],
                "size": [
                    "int"
                ],
                "lines": [
                    "int"
                ],
                "envelope_structure": [
                    "EnvelopeStructure"
                ],
                "body_structure": [
                    "BodyStructure"
                ]
            }
        },
        "MessageBodyStructure._value": {
            "name": "_value",
            "location": 430,
            "return": [
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageBodyStructure.extended": {
            "name": "extended",
            "location": 443,
            "return": [
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "_EmptyEnvelopeStructure.__init__": {
            "name": "__init__",
            "location": 463,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_EmptyBodyStructure.__init__": {
            "name": "__init__",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/parsing/response/specials.py": {
        "FlagsResponse.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "typing.Iterable"
                ]
            }
        },
        "FlagsResponse.text": {
            "name": "text",
            "location": 37,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExistsResponse.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "int"
                ]
            }
        },
        "ExistsResponse.text": {
            "name": "text",
            "location": 56,
            "return": [
                "str",
                "Iterable[str]",
                "IO[str]",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecentResponse.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "int"
                ]
            }
        },
        "RecentResponse.text": {
            "name": "text",
            "location": 74,
            "return": [
                "str",
                "Iterable[str]",
                "IO[str]",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpungeResponse.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seq": [
                    "int"
                ]
            }
        },
        "ExpungeResponse.text": {
            "name": "text",
            "location": 91,
            "return": [
                "str",
                "int",
                "List[str]",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchResponse.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seq": [
                    "int"
                ],
                "data": [
                    "typing.Iterable[pymap.parsing.specials.fetchattr.FetchValue]"
                ]
            }
        },
        "FetchResponse.merge_key": {
            "name": "merge_key",
            "location": 116,
            "return": [
                "int",
                "str",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchResponse.merge": {
            "name": "merge",
            "location": 119,
            "return": [
                "FetchResponse"
            ],
            "arguments": {
                "self": [
                    "_TFetchResponse"
                ],
                "other": [
                    "FetchResponse"
                ]
            }
        },
        "FetchResponse.text": {
            "name": "text",
            "location": 142,
            "return": [
                "bytes",
                "str",
                "int",
                "bytes.WriteStream",
                "BinaryIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchResponse.write": {
            "name": "write",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "pymap.bytes.WriteStream"
                ]
            }
        },
        "SearchResponse.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seqs": [
                    "typing.Iterable[int]"
                ]
            }
        },
        "SearchResponse.text": {
            "name": "text",
            "location": 165,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ESearchResponse.__init__": {
            "name": "__init__",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "issuer_tag": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "str",
                    "Optional[bytes]",
                    "bytes",
                    "None",
                    "Dict[str, Dict[str, Any]]",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "uid": [
                    "bool"
                ],
                "data": [
                    "typing.Mapping[(bytes, Any)]"
                ]
            }
        },
        "ESearchResponse.text": {
            "name": "text",
            "location": 193,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusResponse.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "data": [
                    "typing.Mapping[(pymap.parsing.specials.statusattr.StatusAttribute, Any)]"
                ]
            }
        },
        "StatusResponse.text": {
            "name": "text",
            "location": 220,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListResponse.__init__": {
            "name": "__init__",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mailbox": [
                    "str"
                ],
                "sep": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "bool",
                    "List[Dict]",
                    "list[dict[, ]]",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "attrs": [
                    "typing.Iterable[bytes]"
                ]
            }
        },
        "ListResponse.text": {
            "name": "text",
            "location": 246,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/parsing/response/__init__.py": {
        "ResponseCode.__bytes__": {
            "name": "__bytes__",
            "location": 28,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseCode.of": {
            "name": "of",
            "location": 32,
            "return": [
                "\"User\"",
                "_AnonymousResponseCode",
                "List[Dict[str, Any]]",
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[list]",
                    "list[]",
                    "None"
                ],
                "code": [
                    "str",
                    "int",
                    "float",
                    "Optional[int]",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "_AnonymousResponseCode.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "_AnonymousResponseCode.__bytes__": {
            "name": "__bytes__",
            "location": 51,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "Dict[str, str]",
                    "bytes",
                    "Optional[bytes]"
                ],
                "text": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]",
                    "dict[str, tuple[typing.Union[str,str]]]",
                    "Dict[str, Tuple[str, str]]",
                    "int"
                ],
                "code": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]",
                    "dict[str, tuple[typing.Union[str,str]]]",
                    "Dict[str, Tuple[str, str]]",
                    "int"
                ]
            }
        },
        "Response.text": {
            "name": "text",
            "location": 84,
            "return": [
                "bytes",
                "str",
                "Optional[str]",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.code": {
            "name": "code",
            "location": 101,
            "return": [
                "None",
                "typing.Pattern",
                "str"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int"
                ]
            }
        },
        "Response.is_terminal": {
            "name": "is_terminal",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.is_bad": {
            "name": "is_bad",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.write": {
            "name": "write",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "pymap.bytes.WriteStream"
                ]
            }
        },
        "Response.__bytes__": {
            "name": "__bytes__",
            "location": 134,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandResponse.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes.MaybeBytes"
                ],
                "text": [
                    "bytes.MaybeBytes",
                    "None"
                ],
                "code": [
                    "bytes.MaybeBytes",
                    "None"
                ]
            }
        },
        "CommandResponse.add_untagged": {
            "name": "add_untagged",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandResponse.add_untagged_ok": {
            "name": "add_untagged_ok",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "code": [
                    "str",
                    "None"
                ]
            }
        },
        "CommandResponse.is_terminal": {
            "name": "is_terminal",
            "location": 198,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandResponse.write": {
            "name": "write",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "pymap.bytes.WriteStream"
                ]
            }
        },
        "UntaggedResponse.__init__": {
            "name": "__init__",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "bytes.MaybeBytes",
                    "str",
                    "None"
                ],
                "code": [
                    "bytes.MaybeBytes",
                    "str",
                    "None"
                ]
            }
        },
        "UntaggedResponse.merge_key": {
            "name": "merge_key",
            "location": 244,
            "return": [
                "collections.abc.Hashable",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UntaggedResponse.merge": {
            "name": "merge",
            "location": 255,
            "return": [
                "ResponseT"
            ],
            "arguments": {
                "self": [
                    "ResponseT"
                ],
                "other": [
                    "ResponseT"
                ]
            }
        },
        "ResponseContinuation.__init__": {
            "name": "__init__",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bytes",
                    "bytes.MaybeBytes"
                ]
            }
        },
        "ResponseBad.__init__": {
            "name": "__init__",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes.MaybeBytes"
                ],
                "text": [
                    "bytes.MaybeBytes"
                ],
                "code": [
                    "bytes.MaybeBytes",
                    "None"
                ]
            }
        },
        "ResponseBad.is_bad": {
            "name": "is_bad",
            "location": 307,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseNo.__init__": {
            "name": "__init__",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes.MaybeBytes"
                ],
                "text": [
                    "bytes.MaybeBytes"
                ],
                "code": [
                    "bytes.MaybeBytes",
                    "None"
                ]
            }
        },
        "ResponseBye.is_terminal": {
            "name": "is_terminal",
            "location": 357,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponsePreAuth.__init__": {
            "name": "__init__",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes.MaybeBytes"
                ],
                "text": [
                    "bytes.MaybeBytes"
                ],
                "code": [
                    "bytes.MaybeBytes",
                    "None"
                ]
            }
        }
    },
    "pymap-main/pymap/parsing/specials/astring.py": {
        "AString.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "bytes"
                ],
                "raw": [
                    "str",
                    "None",
                    "int",
                    "bool"
                ]
            }
        },
        "AString.value": {
            "name": "value",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AString.parse": {
            "name": "parse",
            "location": 41,
            "return": [
                "Tuple[(AString, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "Type[\"SerializationDialect\"]",
                    "Union[str, bytes]",
                    "str"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "AString.__eq__": {
            "name": "__eq__",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AString.__bytes__": {
            "name": "__bytes__",
            "location": 56,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/parsing/specials/datetime_.py": {
        "DateTime.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "when": [
                    "_datetime.datetime"
                ],
                "raw": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "DateTime.value": {
            "name": "value",
            "location": 31,
            "return": [
                "Union[str, int, float]",
                "float",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateTime.get_local_tzinfo": {
            "name": "get_local_tzinfo",
            "location": 36,
            "return": [
                "str",
                "datetime.date",
                "int",
                "datetime.datetime",
                "Sequence[str]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Type[T]",
                    "typing.Type",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "DateTime.parse": {
            "name": "parse",
            "location": 41,
            "return": [
                "Tuple[(DateTime, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Iterator",
                    "Iterator[str]",
                    "Union[str]"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "DateTime.__bytes__": {
            "name": "__bytes__",
            "location": 51,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/parsing/specials/fetchattr.py": {
        "FetchRequirement.has_all": {
            "name": "has_all",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "FetchRequirement"
                ]
            }
        },
        "FetchRequirement.has_none": {
            "name": "has_none",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "FetchRequirement"
                ]
            }
        },
        "FetchRequirement.get_all": {
            "name": "get_all",
            "location": 74,
            "return": [
                "FetchRequirement"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFetchRequirement]"
                ]
            }
        },
        "FetchRequirement.reduce": {
            "name": "reduce",
            "location": 82,
            "return": [
                "FetchRequirement"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFetchRequirement]"
                ],
                "requirements": [
                    "typing.Iterable[_TFetchRequirement]"
                ]
            }
        },
        "FetchAttribute.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "bytes"
                ],
                "section": [
                    "None"
                ],
                "partial": [
                    "None"
                ]
            }
        },
        "FetchAttribute.value": {
            "name": "value",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FetchAttribute.for_response": {
            "name": "for_response",
            "location": 154,
            "return": [
                "FetchAttribute"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchAttribute.set_seen": {
            "name": "set_seen",
            "location": 165,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchAttribute.requirement": {
            "name": "requirement",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FetchAttribute._get_body_requirement": {
            "name": "_get_body_requirement",
            "location": 187,
            "return": [
                "FetchRequirement"
            ],
            "arguments": {
                "cls": [],
                "section": []
            }
        },
        "FetchAttribute.raw": {
            "name": "raw",
            "location": 196,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchAttribute.__hash__": {
            "name": "__hash__",
            "location": 227,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchAttribute.__eq__": {
            "name": "__eq__",
            "location": 230,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FetchAttribute.__ne__": {
            "name": "__ne__",
            "location": 235,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FetchAttribute.__lt__": {
            "name": "__lt__",
            "location": 240,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FetchAttribute._parse_section": {
            "name": "_parse_section",
            "location": 246,
            "return": [
                "Tuple[(FetchAttribute.Section, memoryview)]"
            ],
            "arguments": {
                "cls": [],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "FetchAttribute.parse": {
            "name": "parse",
            "location": 274,
            "return": [
                "Tuple[(FetchAttribute, memoryview)]"
            ],
            "arguments": {
                "cls": [],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "FetchAttribute.__bytes__": {
            "name": "__bytes__",
            "location": 323,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchValue.__init__": {
            "name": "__init__",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "FetchAttribute"
                ]
            }
        },
        "FetchValue.of": {
            "name": "of",
            "location": 342,
            "return": [
                "FetchValue"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFetchValue]"
                ],
                "attribute": [
                    "FetchAttribute"
                ],
                "value": []
            }
        },
        "_StaticFetchValue.__init__": {
            "name": "__init__",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "FetchAttribute"
                ],
                "value": []
            }
        },
        "_StaticFetchValue.__bytes__": {
            "name": "__bytes__",
            "location": 355,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchAttribute.Section.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parts": [
                    "typing.Sequence[int]"
                ],
                "specifier": [
                    "None"
                ],
                "headers": []
            }
        },
        "FetchAttribute.Section.__hash__": {
            "name": "__hash__",
            "location": 128,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/parsing/specials/flag.py": {
        "get_system_flags": {
            "name": "get_system_flags",
            "location": 98,
            "return": [
                "FrozenSet[Flag]"
            ],
            "arguments": {}
        },
        "Flag.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "List[bytes]",
                    "list[bytes]",
                    "bytes",
                    "Union[str, bytes]",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Flag.value": {
            "name": "value",
            "location": 34,
            "return": [
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Flag.is_system": {
            "name": "is_system",
            "location": 39,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Flag._capitalize": {
            "name": "_capitalize",
            "location": 44,
            "return": [
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "int",
                    "T",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "bytes"
                ]
            }
        },
        "Flag.__eq__": {
            "name": "__eq__",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Flag.__lt__": {
            "name": "__lt__",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bytes",
                    "Match[bytes]",
                    "typing.Match",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Flag.__hash__": {
            "name": "__hash__",
            "location": 69,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Flag.__repr__": {
            "name": "__repr__",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Flag.__bytes__": {
            "name": "__bytes__",
            "location": 75,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Flag.__str__": {
            "name": "__str__",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Flag.parse": {
            "name": "parse",
            "location": 82,
            "return": [
                "Tuple[(Flag, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, str]",
                    "int",
                    "dict[str, str]"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        }
    },
    "pymap-main/pymap/parsing/specials/mailbox.py": {
        "Mailbox.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mailbox": [
                    "str"
                ]
            }
        },
        "Mailbox.value": {
            "name": "value",
            "location": 29,
            "return": [
                "Union[str, int, float]",
                "float",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mailbox.parse": {
            "name": "parse",
            "location": 34,
            "return": [
                "Tuple[(Mailbox, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "int"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "Mailbox.__bytes__": {
            "name": "__bytes__",
            "location": 42,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mailbox.__str__": {
            "name": "__str__",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/parsing/specials/objectid.py": {
        "ObjectId.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "object_id": [
                    "str",
                    "int",
                    "None",
                    "bytes"
                ]
            }
        },
        "ObjectId.value": {
            "name": "value",
            "location": 38,
            "return": [
                "None",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectId.parens": {
            "name": "parens",
            "location": 45,
            "return": [
                "str",
                "Union[bytes, bytearray]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectId.parse": {
            "name": "parse",
            "location": 50,
            "return": [
                "Tuple[(ObjectId, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Pattern",
                    "bytes",
                    "Dict[str, str]"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "ObjectId.new": {
            "name": "new",
            "location": 59,
            "return": [
                "ObjectId"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str",
                    "bool",
                    "int"
                ],
                "prefix": [
                    "bytes"
                ],
                "digest": [
                    "bytes"
                ]
            }
        },
        "ObjectId.new_mailbox_id": {
            "name": "new_mailbox_id",
            "location": 70,
            "return": [
                "ObjectId"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str"
                ],
                "digest": [
                    "bytes"
                ]
            }
        },
        "ObjectId.new_email_id": {
            "name": "new_email_id",
            "location": 80,
            "return": [
                "ObjectId"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str",
                    "float"
                ],
                "digest": [
                    "bytes"
                ]
            }
        },
        "ObjectId.new_thread_id": {
            "name": "new_thread_id",
            "location": 90,
            "return": [
                "ObjectId"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str"
                ],
                "digest": [
                    "bytes"
                ]
            }
        },
        "ObjectId.random": {
            "name": "random",
            "location": 100,
            "return": [
                "ObjectId"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "Callable",
                    "typing.Callable[, ]",
                    "IO",
                    "typing.IO"
                ],
                "prefix": [
                    "bytes"
                ]
            }
        },
        "ObjectId.random_mailbox_id": {
            "name": "random_mailbox_id",
            "location": 110,
            "return": [
                "ObjectId"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str",
                    "List[str]"
                ]
            }
        },
        "ObjectId.random_email_id": {
            "name": "random_email_id",
            "location": 115,
            "return": [
                "ObjectId"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "Callable",
                    "str"
                ]
            }
        },
        "ObjectId.random_thread_id": {
            "name": "random_thread_id",
            "location": 120,
            "return": [
                "ObjectId"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str",
                    "List[str]"
                ]
            }
        },
        "ObjectId.maybe": {
            "name": "maybe",
            "location": 125,
            "return": [
                "ObjectId"
            ],
            "arguments": {
                "cls": [
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "None",
                    "bytes",
                    "Optional[Union[str, Any]]",
                    "str",
                    "typing.Any",
                    "T"
                ],
                "value": [
                    "Optional[AnyStr]",
                    "str",
                    "typing.AnyStr",
                    "None",
                    "Dict[str, Union[str, int, bool]]",
                    "dict[str, typing.Union[str,int,bool]]"
                ]
            }
        },
        "ObjectId.__eq__": {
            "name": "__eq__",
            "location": 141,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ObjectId.__hash__": {
            "name": "__hash__",
            "location": 148,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectId.__str__": {
            "name": "__str__",
            "location": 151,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectId.__repr__": {
            "name": "__repr__",
            "location": 157,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectId.__bytes__": {
            "name": "__bytes__",
            "location": 160,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/parsing/specials/options.py": {
        "ExtensionOption.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "option": [
                    "bytes"
                ],
                "arg": [
                    "pymap.parsing.primitives.List"
                ]
            }
        },
        "ExtensionOption.value": {
            "name": "value",
            "location": 38,
            "return": [
                "str",
                "bool",
                "Optional[Any]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionOption.__bytes__": {
            "name": "__bytes__",
            "location": 41,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionOption.raw_arg": {
            "name": "raw_arg",
            "location": 48,
            "return": [
                "int",
                "bytes",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionOption._parse_arg": {
            "name": "_parse_arg",
            "location": 63,
            "return": [
                "Tuple[(pymap.parsing.primitives.List, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "Params",
                    "bool",
                    "str"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "ExtensionOption.parse": {
            "name": "parse",
            "location": 87,
            "return": [
                "Tuple[(ExtensionOption, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "ExtensionOptions.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "typing.Iterable[ExtensionOption]"
                ]
            }
        },
        "ExtensionOptions.empty": {
            "name": "empty",
            "location": 122,
            "return": [
                "ExtensionOptions"
            ],
            "arguments": {
                "cls": [
                    "Type[_TExtensionOptions]"
                ]
            }
        },
        "ExtensionOptions.value": {
            "name": "value",
            "location": 129,
            "return": [
                "str",
                "bool",
                "Optional[Any]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionOptions.has": {
            "name": "has",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "option": [
                    "bytes"
                ]
            }
        },
        "ExtensionOptions.get": {
            "name": "get",
            "location": 135,
            "return": [
                "Optional[str]",
                "str",
                "Dict[str, Any]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "option": [
                    "bytes"
                ]
            }
        },
        "ExtensionOptions.__bool__": {
            "name": "__bool__",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionOptions.__len__": {
            "name": "__len__",
            "location": 141,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionOptions.__bytes__": {
            "name": "__bytes__",
            "location": 144,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionOptions._parse_paren": {
            "name": "_parse_paren",
            "location": 152,
            "return": [
                "memoryview"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "Type",
                    "complex",
                    "bytes"
                ],
                "buf": [
                    "memoryview"
                ],
                "paren": [
                    "bytes"
                ]
            }
        },
        "ExtensionOptions._parse": {
            "name": "_parse",
            "location": 159,
            "return": [
                "Tuple[(ExtensionOptions, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "T",
                    "str"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "ExtensionOptions.parse": {
            "name": "parse",
            "location": 174,
            "return": [
                "Tuple[(ExtensionOptions, memoryview)]"
            ],
            "arguments": {
                "cls": [],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        }
    },
    "pymap-main/pymap/parsing/specials/searchkey.py": {
        "SearchKey.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes"
                ],
                "filter_": [
                    "str",
                    "None",
                    "int",
                    "float",
                    "pyshgp.push.atoms.Atom"
                ],
                "inverse": [
                    "bool"
                ]
            }
        },
        "SearchKey.value": {
            "name": "value",
            "location": 52,
            "return": [
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchKey.value_str": {
            "name": "value_str",
            "location": 57,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchKey.requirement": {
            "name": "requirement",
            "location": 62,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[Any]]",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchKey.not_inverse": {
            "name": "not_inverse",
            "location": 83,
            "return": [
                "SearchKey",
                "Optional[List[str]]",
                "List[str]",
                "bool",
                "str",
                "IO[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchKey._get_filter": {
            "name": "_get_filter",
            "location": 87,
            "return": [
                "_FilterT"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[_FilterT]"
                ]
            }
        },
        "SearchKey.filter_sequence_set": {
            "name": "filter_sequence_set",
            "location": 93,
            "return": [
                "List[int]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchKey.filter_key_set": {
            "name": "filter_key_set",
            "location": 97,
            "return": [
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchKey.filter_key_or": {
            "name": "filter_key_or",
            "location": 101,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchKey.filter_flag": {
            "name": "filter_flag",
            "location": 105,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchKey.filter_datetime": {
            "name": "filter_datetime",
            "location": 109,
            "return": [
                "str",
                "datetime.datetime",
                "bool",
                "Dict[str, Dict[str, Any]]",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchKey.filter_int": {
            "name": "filter_int",
            "location": 113,
            "return": [
                "List[List[Any]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchKey.filter_str": {
            "name": "filter_str",
            "location": 117,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchKey.filter_header": {
            "name": "filter_header",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchKey.filter_object_id": {
            "name": "filter_object_id",
            "location": 125,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchKey.__bytes__": {
            "name": "__bytes__",
            "location": 128,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchKey.__hash__": {
            "name": "__hash__",
            "location": 131,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchKey.__eq__": {
            "name": "__eq__",
            "location": 134,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, Union[str, int, bool]]",
                    "dict[str, typing.Union[str,int,bool]]"
                ]
            }
        },
        "SearchKey.__ne__": {
            "name": "__ne__",
            "location": 139,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, Union[str, int, bool]]",
                    "dict[str, typing.Union[str,int,bool]]"
                ]
            }
        },
        "SearchKey._parse_astring_filter": {
            "name": "_parse_astring_filter",
            "location": 145,
            "return": [
                "Tuple[(str, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "list[dict[, ]]",
                    "str",
                    "List[dict]",
                    "dict[, ]",
                    "dict",
                    "Iterable"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "SearchKey._parse_date_filter": {
            "name": "_parse_date_filter",
            "location": 151,
            "return": [
                "Tuple[(_datetime.datetime, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Dict[str, object]",
                    "dict[str, object]",
                    "List[object]",
                    "list[object]",
                    "Type[Exception]",
                    "typing.Type",
                    "List[str]",
                    "list[str]"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "SearchKey.parse": {
            "name": "parse",
            "location": 163,
            "return": [
                "Tuple[(SearchKey, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "Dict[str, Any]",
                    "int",
                    "type",
                    "Type"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        }
    },
    "pymap-main/pymap/parsing/specials/sequenceset.py": {
        "MaxValue.__eq__": {
            "name": "__eq__",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MaxValue.__hash__": {
            "name": "__hash__",
            "location": 26,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequenceSet.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sequences": [],
                "uid": [
                    "bool"
                ]
            }
        },
        "SequenceSet.all": {
            "name": "all",
            "location": 53,
            "return": [
                "_AllSequenceSet"
            ],
            "arguments": {
                "cls": [],
                "uid": [
                    "bool"
                ]
            }
        },
        "SequenceSet.value": {
            "name": "value",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceSet.is_all": {
            "name": "is_all",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequenceSet._get_range": {
            "name": "_get_range",
            "location": 77,
            "return": [
                "range",
                "tuple[]"
            ],
            "arguments": {
                "cls": [],
                "elem": [],
                "max_value": []
            }
        },
        "SequenceSet.flatten": {
            "name": "flatten",
            "location": 98,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": [],
                "max_value": []
            }
        },
        "SequenceSet.iter": {
            "name": "iter",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "max_value": []
            }
        },
        "SequenceSet._elem_bytes": {
            "name": "_elem_bytes",
            "location": 118,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "elem": []
            }
        },
        "SequenceSet.__bytes__": {
            "name": "__bytes__",
            "location": 124,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequenceSet.__eq__": {
            "name": "__eq__",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SequenceSet.__hash__": {
            "name": "__hash__",
            "location": 144,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequenceSet.__repr__": {
            "name": "__repr__",
            "location": 147,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequenceSet._parse_part": {
            "name": "_parse_part",
            "location": 152,
            "return": [
                "tuple[tuple[int]]",
                "tuple[int]"
            ],
            "arguments": {
                "cls": [],
                "buf": []
            }
        },
        "SequenceSet.build": {
            "name": "build",
            "location": 175,
            "return": [
                "SequenceSet"
            ],
            "arguments": {
                "cls": [],
                "seqs": [],
                "uid": [
                    "bool"
                ]
            }
        },
        "SequenceSet.parse": {
            "name": "parse",
            "location": 205,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "cls": [],
                "buf": [],
                "params": []
            }
        },
        "_AllSequenceSet.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": []
            }
        },
        "_AllSequenceSet.iter": {
            "name": "iter",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "max_value": []
            }
        },
        "_AllSequenceSet.__bytes__": {
            "name": "__bytes__",
            "location": 231,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AllSequenceSet.__repr__": {
            "name": "__repr__",
            "location": 234,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/parsing/specials/statusattr.py": {
        "StatusAttribute.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "bytes"
                ]
            }
        },
        "StatusAttribute.value": {
            "name": "value",
            "location": 33,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "int",
                "dict",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusAttribute.parse": {
            "name": "parse",
            "location": 38,
            "return": [
                "Tuple[(StatusAttribute, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "dict[, ]",
                    "Type[object]",
                    "typing.Type",
                    "tuple",
                    "tuple[]"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "StatusAttribute.__hash__": {
            "name": "__hash__",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusAttribute.__eq__": {
            "name": "__eq__",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "StatusAttribute.__bytes__": {
            "name": "__bytes__",
            "location": 58,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/parsing/specials/tag.py": {
        "Tag.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bytes"
                ]
            }
        },
        "Tag.value": {
            "name": "value",
            "location": 28,
            "return": [
                "str",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.parse": {
            "name": "parse",
            "location": 33,
            "return": [
                "Tuple[(Tag, memoryview)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Pattern",
                    "bytes",
                    "Dict[str, str]"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "Tag.__bytes__": {
            "name": "__bytes__",
            "location": 41,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/pymap/parsing/specials/__init__.py": {},
    "pymap-main/pymap/sieve/runner.py": {
        "SieveRunner.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "commands": [
                    "typing.Sequence"
                ]
            }
        },
        "SieveRunner.get_actions": {
            "name": "get_actions",
            "location": 25,
            "return": [
                "typing.Sequence"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "recipient": [
                    "str"
                ],
                "append_msg": [
                    "pymap.parsing.message.AppendMessage"
                ]
            }
        },
        "SieveRunner._get_actions": {
            "name": "_get_actions",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "actions": [
                    "list"
                ],
                "sender": [
                    "str"
                ],
                "recipient": [
                    "str"
                ],
                "append_msg": [
                    "pymap.parsing.message.AppendMessage"
                ],
                "content": [
                    "pymap.mime.MessageContent"
                ]
            }
        }
    },
    "pymap-main/pymap/sieve/tests.py": {
        "SieveTest.of": {
            "name": "of",
            "location": 28,
            "return": [
                "SieveTest"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSieveTest]"
                ],
                "cmd": [
                    "Optional['models.LTI1p3Provider']",
                    "Exception",
                    "None"
                ]
            }
        },
        "SieveTest.run": {
            "name": "run",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "recipient": [
                    "str"
                ],
                "append_msg": [
                    "pymap.parsing.message.AppendMessage"
                ],
                "content": [
                    "pymap.mime.MessageContent"
                ]
            }
        },
        "AllOfTest.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tests": [
                    "typing.Sequence[SieveTest]"
                ]
            }
        },
        "AllOfTest.run": {
            "name": "run",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "recipient": [
                    "str"
                ],
                "append_msg": [
                    "pymap.parsing.message.AppendMessage"
                ],
                "content": [
                    "pymap.mime.MessageContent"
                ]
            }
        },
        "AnyOfTest.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tests": [
                    "typing.Sequence[SieveTest]"
                ]
            }
        },
        "AnyOfTest.run": {
            "name": "run",
            "location": 111,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "recipient": [
                    "str"
                ],
                "append_msg": [
                    "pymap.parsing.message.AppendMessage"
                ],
                "content": [
                    "pymap.mime.MessageContent"
                ]
            }
        },
        "NotTest.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "SieveTest"
                ]
            }
        },
        "NotTest.run": {
            "name": "run",
            "location": 123,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "recipient": [
                    "str"
                ],
                "append_msg": [
                    "pymap.parsing.message.AppendMessage"
                ],
                "content": [
                    "pymap.mime.MessageContent"
                ]
            }
        },
        "TrueTest.run": {
            "name": "run",
            "location": 130,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "recipient": [
                    "str"
                ],
                "append_msg": [
                    "pymap.parsing.message.AppendMessage"
                ],
                "content": [
                    "pymap.mime.MessageContent"
                ]
            }
        },
        "FalseTest.run": {
            "name": "run",
            "location": 137,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "recipient": [
                    "str"
                ],
                "append_msg": [
                    "pymap.parsing.message.AppendMessage"
                ],
                "content": [
                    "pymap.mime.MessageContent"
                ]
            }
        },
        "MatchTest._compile": {
            "name": "_compile",
            "location": 147,
            "return": [
                "typing.Sequence[Pattern[str]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[Callable[[Any, Any], None]]",
                    "typing.Callable[A, None]",
                    "None"
                ],
                "key_list": [
                    "typing.Sequence[str]"
                ],
                "match_type": [
                    "pymap.sieve.util.MatchType"
                ],
                "case_sensitive": [
                    "bool"
                ]
            }
        },
        "AddressTest.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "header_list": [
                    "typing.Sequence[str]"
                ],
                "key_list": [
                    "typing.Sequence[str]"
                ],
                "address_part": [
                    "pymap.sieve.util.AddressPart"
                ],
                "match_type": [
                    "pymap.sieve.util.MatchType"
                ],
                "case_sensitive": [
                    "bool"
                ]
            }
        },
        "AddressTest.run": {
            "name": "run",
            "location": 180,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "recipient": [
                    "str"
                ],
                "append_msg": [
                    "pymap.parsing.message.AppendMessage"
                ],
                "content": [
                    "pymap.mime.MessageContent"
                ]
            }
        },
        "EnvelopeTest._check_address": {
            "name": "_check_address",
            "location": 202,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "envelope_part": [
                    "bytes"
                ],
                "address": [
                    "str"
                ]
            }
        },
        "EnvelopeTest.run": {
            "name": "run",
            "location": 223,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "recipient": [
                    "str"
                ],
                "append_msg": [
                    "pymap.parsing.message.AppendMessage"
                ],
                "content": [
                    "pymap.mime.MessageContent"
                ]
            }
        },
        "ExistsTest.__init__": {
            "name": "__init__",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "header_names": [
                    "typing.Sequence[str]"
                ]
            }
        },
        "ExistsTest.run": {
            "name": "run",
            "location": 239,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "recipient": [
                    "str"
                ],
                "append_msg": [
                    "pymap.parsing.message.AppendMessage"
                ],
                "content": [
                    "pymap.mime.MessageContent"
                ]
            }
        },
        "HeaderTest.__init__": {
            "name": "__init__",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "header_names": [
                    "typing.Sequence[str]"
                ],
                "key_list": [
                    "typing.Sequence[str]"
                ],
                "match_type": [
                    "pymap.sieve.util.MatchType"
                ],
                "case_sensitive": [
                    "bool"
                ]
            }
        },
        "HeaderTest.run": {
            "name": "run",
            "location": 253,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "recipient": [
                    "str"
                ],
                "append_msg": [
                    "pymap.parsing.message.AppendMessage"
                ],
                "content": [
                    "pymap.mime.MessageContent"
                ]
            }
        },
        "SizeTest.__init__": {
            "name": "__init__",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comparator": [
                    "pymap.sieve.util.SizeComparator"
                ],
                "limit": [
                    "int"
                ]
            }
        },
        "SizeTest.run": {
            "name": "run",
            "location": 272,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "str"
                ],
                "recipient": [
                    "str"
                ],
                "append_msg": [
                    "pymap.parsing.message.AppendMessage"
                ],
                "content": [
                    "pymap.mime.MessageContent"
                ]
            }
        }
    },
    "pymap-main/pymap/sieve/util.py": {
        "str_list": {
            "name": "str_list",
            "location": 62,
            "return": [
                "typing.Sequence[str]"
            ],
            "arguments": {
                "value": []
            }
        },
        "unquote": {
            "name": "unquote",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "AddressPart.of": {
            "name": "of",
            "location": 16,
            "return": [
                "AddressPart"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAddressPart]"
                ],
                "flag": []
            }
        },
        "MatchType.of": {
            "name": "of",
            "location": 35,
            "return": [
                "MatchType"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMatchType]"
                ],
                "flag": []
            }
        },
        "SizeComparator.of": {
            "name": "of",
            "location": 53,
            "return": [
                "SizeComparator"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSizeComparator]"
                ],
                "flag": [
                    "str"
                ]
            }
        }
    },
    "pymap-main/pymap/sieve/__init__.py": {
        "SieveCompiler.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SieveCompiler.value_type": {
            "name": "value_type",
            "location": 32,
            "return": [
                "bytes",
                "float",
                "int",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "SieveCompiler.filter_type": {
            "name": "filter_type",
            "location": 36,
            "return": [
                "Callable[[Union, Union], Tuple[Any, ...],]",
                "List[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SieveFilter.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [
                    "pymap.sieve.runner.SieveRunner"
                ]
            }
        }
    },
    "pymap-main/pymap/sieve/manage/command.py": {
        "Command.value": {
            "name": "value",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command.__bytes__": {
            "name": "__bytes__",
            "location": 31,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.__repr__": {
            "name": "__repr__",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._all_commands": {
            "name": "_all_commands",
            "location": 38,
            "return": [
                "typing.Sequence[Type[Command]]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Command._get_commands": {
            "name": "_get_commands",
            "location": 47,
            "return": [
                "typing.Mapping[(bytes, Type[Command])]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Command._parse_script_name": {
            "name": "_parse_script_name",
            "location": 56,
            "return": [
                "Tuple[(str, memoryview)]"
            ],
            "arguments": {
                "self": [
                    "Type[Command]"
                ],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ],
                "allow_empty": [
                    "bool"
                ]
            }
        },
        "Command.parse": {
            "name": "parse",
            "location": 68,
            "return": [
                "Tuple[(Command, memoryview)]"
            ],
            "arguments": {
                "cls": [],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "NoOpCommand.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "NoOpCommand.parse": {
            "name": "parse",
            "location": 91,
            "return": [
                "Tuple[(NoOpCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "CapabilityCommand.parse": {
            "name": "parse",
            "location": 112,
            "return": [
                "Tuple[(CapabilityCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "StartTLSCommand.parse": {
            "name": "parse",
            "location": 123,
            "return": [
                "Tuple[(StartTLSCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "AuthenticateCommand.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mech_name": [
                    "bytes"
                ],
                "initial_data": [
                    "None"
                ]
            }
        },
        "AuthenticateCommand.parse": {
            "name": "parse",
            "location": 140,
            "return": [
                "Tuple[(AuthenticateCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "UnauthenticateCommand.parse": {
            "name": "parse",
            "location": 157,
            "return": [
                "Tuple[(UnauthenticateCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "LogoutCommand.parse": {
            "name": "parse",
            "location": 168,
            "return": [
                "Tuple[(LogoutCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "HaveSpaceCommand.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "script_name": [
                    "str"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "HaveSpaceCommand.parse": {
            "name": "parse",
            "location": 184,
            "return": [
                "Tuple[(HaveSpaceCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "PutScriptCommand.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "script_name": [
                    "str"
                ],
                "script_data": [
                    "bytes"
                ]
            }
        },
        "PutScriptCommand.parse": {
            "name": "parse",
            "location": 204,
            "return": [
                "Tuple[(PutScriptCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "ListScriptsCommand.parse": {
            "name": "parse",
            "location": 217,
            "return": [
                "Tuple[(ListScriptsCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "SetActiveCommand.__init__": {
            "name": "__init__",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "script_name": []
            }
        },
        "SetActiveCommand.parse": {
            "name": "parse",
            "location": 232,
            "return": [
                "Tuple[(SetActiveCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "GetScriptCommand.__init__": {
            "name": "__init__",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "script_name": [
                    "str"
                ]
            }
        },
        "GetScriptCommand.parse": {
            "name": "parse",
            "location": 248,
            "return": [
                "Tuple[(GetScriptCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "DeleteScriptCommand.__init__": {
            "name": "__init__",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "script_name": [
                    "str"
                ]
            }
        },
        "DeleteScriptCommand.parse": {
            "name": "parse",
            "location": 264,
            "return": [
                "Tuple[(DeleteScriptCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "RenameScriptCommand.__init__": {
            "name": "__init__",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old_script_name": [
                    "str"
                ],
                "new_script_name": [
                    "str"
                ]
            }
        },
        "RenameScriptCommand.parse": {
            "name": "parse",
            "location": 281,
            "return": [
                "Tuple[(RenameScriptCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        },
        "CheckScriptCommand.__init__": {
            "name": "__init__",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "script_data": [
                    "bytes"
                ]
            }
        },
        "CheckScriptCommand.parse": {
            "name": "parse",
            "location": 298,
            "return": [
                "Tuple[(CheckScriptCommand, memoryview)]"
            ],
            "arguments": {
                "cls": [],
                "buf": [
                    "memoryview"
                ],
                "params": [
                    "pymap.parsing.Params"
                ]
            }
        }
    },
    "pymap-main/pymap/sieve/manage/response.py": {
        "Condition.__bytes__": {
            "name": "__bytes__",
            "location": 23,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "Condition"
                ]
            }
        },
        "Response.is_bye": {
            "name": "is_bye",
            "location": 39,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.write": {
            "name": "write",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "pymap.bytes.WriteStream"
                ]
            }
        },
        "Response.__bytes__": {
            "name": "__bytes__",
            "location": 53,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__repr__": {
            "name": "__repr__",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BadCommandResponse.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "pymap.parsing.exceptions.NotParseable"
                ]
            }
        },
        "NoOpResponse.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "Optional[str]",
                    "Optional[Union[Any, Any]]",
                    "None",
                    "Optional[int]",
                    "typing.Any",
                    "Optional[bytes]",
                    "int",
                    "List[Dict[str, Any]]",
                    "bytes",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "CapabilitiesResponse.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capabilities": [
                    "typing.Mapping[(bytes, Any)]"
                ]
            }
        },
        "CapabilitiesResponse.write": {
            "name": "write",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "pymap.bytes.WriteStream"
                ]
            }
        },
        "GetScriptResponse.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "script_data": [
                    "bytes"
                ]
            }
        },
        "GetScriptResponse.write": {
            "name": "write",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "pymap.bytes.WriteStream"
                ]
            }
        },
        "ListScriptsResponse.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "active": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "names": [
                    "typing.Sequence[str]"
                ]
            }
        },
        "ListScriptsResponse.write": {
            "name": "write",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "pymap.bytes.WriteStream"
                ]
            }
        }
    },
    "pymap-main/pymap/sieve/manage/state.py": {
        "FilterState.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filter_set": [
                    "pymap.interfaces.filter.FilterSetInterface[bytes]"
                ],
                "owner": [
                    "bytes"
                ],
                "config": [
                    "pymap.config.IMAPConfig"
                ]
            }
        }
    },
    "pymap-main/pymap/sieve/manage/__init__.py": {
        "ManageSieveService.add_arguments": {
            "name": "add_arguments",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "argparse.ArgumentParser",
                    "Dict[str, Any]",
                    "argparse._SubParsersAction"
                ],
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "ManageSieveServer.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "login": [
                    "pymap.interfaces.login.LoginInterface"
                ],
                "config": [
                    "pymap.config.IMAPConfig"
                ]
            }
        },
        "ManageSieveConnection.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "login": [
                    "pymap.interfaces.login.LoginInterface"
                ],
                "config": [
                    "pymap.config.IMAPConfig"
                ],
                "reader": [
                    "asyncio.streams.StreamReader"
                ],
                "writer": [
                    "asyncio.streams.StreamWriter"
                ]
            }
        },
        "ManageSieveConnection._reset_streams": {
            "name": "_reset_streams",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reader": [
                    "asyncio.streams.StreamReader"
                ],
                "writer": [
                    "asyncio.streams.StreamWriter"
                ]
            }
        },
        "ManageSieveConnection._get_state": {
            "name": "_get_state",
            "location": 137,
            "return": [
                "pymap.sieve.manage.state.FilterState"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "pymap.interfaces.session.SessionInterface"
                ]
            }
        },
        "ManageSieveConnection.capabilities": {
            "name": "capabilities",
            "location": 144,
            "return": [
                "dict[bytes, typing.Union[bytes,None]]",
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManageSieveConnection._print": {
            "name": "_print",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "log_format": [
                    "str"
                ],
                "output": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "pymap-main/pymap/token/macaroon.py": {
        "MacaroonTokens.get_login_token": {
            "name": "get_login_token",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str"
                ],
                "key": [
                    "bytes"
                ]
            }
        },
        "MacaroonTokens.get_admin_token": {
            "name": "get_admin_token",
            "location": 35,
            "return": [
                "None",
                "str",
                "Optional[int]",
                "dict[str, typing.Union[typing.Any,typing.Any,int,str]]",
                "bool",
                "dict",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "admin_key": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "MacaroonTokens.parse": {
            "name": "parse",
            "location": 51,
            "return": [
                "MacaroonCredentials"
            ],
            "arguments": {
                "self": [],
                "authzid": [
                    "str"
                ],
                "token": [
                    "str"
                ]
            }
        },
        "MacaroonCredentials.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "str"
                ],
                "serialized": [
                    "str"
                ],
                "admin_keys": [
                    "AbstractSet[bytes]"
                ]
            }
        },
        "MacaroonCredentials._find_type": {
            "name": "_find_type",
            "location": 89,
            "return": [
                "typing.Text",
                "Callable",
                "None",
                "bool",
                "int"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "Type[Any]",
                    "typing.Callable[, ]",
                    "Callable",
                    "Type[T]"
                ],
                "macaroon": [
                    "Set[str]",
                    "List[str]",
                    "List[int]",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "MacaroonCredentials.has_secret": {
            "name": "has_secret",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MacaroonCredentials.secret": {
            "name": "secret",
            "location": 103,
            "return": [
                "typing.NoReturn",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MacaroonCredentials._satisfy": {
            "name": "_satisfy",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "predicate": [
                    "str"
                ]
            }
        },
        "MacaroonCredentials._verify": {
            "name": "_verify",
            "location": 123,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "verifier": [
                    "bytes",
                    "str",
                    "int"
                ],
                "key": [
                    "bytes"
                ]
            }
        },
        "MacaroonCredentials._get_login_verifier": {
            "name": "_get_login_verifier",
            "location": 131,
            "return": [
                "Verifier",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MacaroonCredentials._get_admin_verifier": {
            "name": "_get_admin_verifier",
            "location": 137,
            "return": [
                "Verifier",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MacaroonCredentials.check_secret": {
            "name": "check_secret",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "secret": [
                    "str",
                    "bool",
                    "Callable[[], bool]",
                    "typing.Callable[[], bool]",
                    "Optional[float]",
                    "float",
                    "Optional[int]",
                    "None"
                ]
            }
        }
    },
    "pymap-main/pymap/token/__init__.py": {
        "AllTokens.get_login_token": {
            "name": "get_login_token",
            "location": 27,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[List[str]]",
                "bool",
                "dict",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str"
                ],
                "key": [
                    "bytes"
                ]
            }
        },
        "AllTokens.get_admin_token": {
            "name": "get_admin_token",
            "location": 40,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[List[str]]",
                "bool",
                "dict",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "admin_key": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "AllTokens.parse": {
            "name": "parse",
            "location": 53,
            "return": [
                "bool",
                "str",
                "List[str]",
                "Dict[str, str]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "authzid": [
                    "str"
                ],
                "token": [
                    "str"
                ]
            }
        }
    },
    "pymap-main/tasks/check.py": {
        "check_import": {
            "name": "check_import",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        }
    },
    "pymap-main/tasks/doc.py": {
        "install": {
            "name": "install",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str"
                ],
                "update": [
                    "bool",
                    "str"
                ]
            }
        },
        "clean": {
            "name": "clean",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "build": {
            "name": "build",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "open": {
            "name": "open",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool"
                ]
            }
        }
    },
    "pymap-main/tasks/lint.py": {
        "flake8": {
            "name": "flake8",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "bool"
                ]
            }
        },
        "bandit": {
            "name": "bandit",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "bool"
                ]
            }
        },
        "all": {
            "name": "all",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        }
    },
    "pymap-main/tasks/test.py": {
        "pytest": {
            "name": "pytest",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "bool"
                ]
            }
        },
        "all": {
            "name": "all",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        }
    },
    "pymap-main/tasks/types.py": {
        "mypy": {
            "name": "mypy",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "bool"
                ]
            }
        },
        "all": {
            "name": "all",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        }
    },
    "pymap-main/tasks/__init__.py": {
        "clean": {
            "name": "clean",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str"
                ],
                "full": [
                    "bool"
                ]
            }
        },
        "install": {
            "name": "install",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "int"
                ],
                "dev": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ],
                "update": [
                    "bool",
                    "str"
                ]
            }
        },
        "validate": {
            "name": "validate",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        }
    },
    "pymap-main/test/test_cluster.py": {
        "_Member.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "_Member.__hash__": {
            "name": "__hash__",
            "location": 15,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClusterMetadata.test_local": {
            "name": "test_local",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClusterMetadata.test_listen": {
            "name": "test_listen",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClusterMetadata.test_remote": {
            "name": "test_remote",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClusterMetadata.test_get_all": {
            "name": "test_get_all",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/test/test_health.py": {
        "TestHealthStatus.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHealthStatus._check_call": {
            "name": "_check_call",
            "location": 17,
            "return": [
                "_T"
            ],
            "arguments": {
                "self": [],
                "healthy": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "int",
                    "Callable[..., T]",
                    "typing.Callable[..., T]",
                    "Optional[str]",
                    "None"
                ],
                "func": [
                    "typing.Callable[(..., _T)]"
                ]
            }
        },
        "TestHealthStatus.test_name": {
            "name": "test_name",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHealthStatus.test_set": {
            "name": "test_set",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHealthStatus.test_callback": {
            "name": "test_callback",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHealthStatus.test_add_dependency": {
            "name": "test_add_dependency",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/test/test_listtree.py": {
        "TestListEntry.test_attributes": {
            "name": "test_attributes",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListTree.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListTree.test_list": {
            "name": "test_list",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListTree.test_list_matching": {
            "name": "test_list_matching",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListTree.test_get_renames": {
            "name": "test_get_renames",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/test/test_mime.py": {
        "TestMessageContents.test_parse": {
            "name": "test_parse",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageContents.test_parse_rfc822": {
            "name": "test_parse_rfc822",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageContents.test_parse_multipart": {
            "name": "test_parse_multipart",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/test/test_mime_cte.py": {
        "TestMessageDecoder.test_7bit_cte": {
            "name": "test_7bit_cte",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageDecoder.test_8bit_cte": {
            "name": "test_8bit_cte",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageDecoder.test_quopri_cte": {
            "name": "test_quopri_cte",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageDecoder.test_base64_cte": {
            "name": "test_base64_cte",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/test/test_parsing.py": {
        "TestExpectedParseable.test_parse": {
            "name": "test_parse",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExpectedParseable.test_parse_expectation_failure": {
            "name": "test_parse_expectation_failure",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExpectedParseable.test_parse_expectation_casting": {
            "name": "test_parse_expectation_casting",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpace.test_parse": {
            "name": "test_parse",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpace.test_parse_failure": {
            "name": "test_parse_failure",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpace.test_bytes": {
            "name": "test_bytes",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEndLine.test_parse": {
            "name": "test_parse",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEndLine.test_parse_no_cr": {
            "name": "test_parse_no_cr",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEndLine.test_parse_failure": {
            "name": "test_parse_failure",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEndLine.test_bytes": {
            "name": "test_bytes",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/test/test_parsing_command.py": {
        "TestCommandNoArgs.test_parse": {
            "name": "test_parse",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommandNoArgs.test_parse_no_cr": {
            "name": "test_parse_no_cr",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommands.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommands.test_parse": {
            "name": "test_parse",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/test/test_parsing_command_auth.py": {
        "TestCommandMailboxArg.test_parse": {
            "name": "test_parse",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAppendCommand.test_parse": {
            "name": "test_parse",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAppendCommand.test_parse_multi": {
            "name": "test_parse_multi",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAppendCommand.test_parse_toobig": {
            "name": "test_parse_toobig",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListCommand.test_parse": {
            "name": "test_parse",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListCommand.test_parse_filter_string": {
            "name": "test_parse_filter_string",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRenameCommand.test_parse": {
            "name": "test_parse",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatusCommand.test_parse": {
            "name": "test_parse",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatusCommand.test_parse_error": {
            "name": "test_parse_error",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/test/test_parsing_command_nonauth.py": {
        "TestAuthenticateCommand.test_parse": {
            "name": "test_parse",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoginCommand.test_parse": {
            "name": "test_parse",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/test/test_parsing_command_select.py": {
        "TestExpungeCommand.test_parse": {
            "name": "test_parse",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExpungeCommand.test_parse_uid": {
            "name": "test_parse_uid",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCopyCommand.test_parse": {
            "name": "test_parse",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCopyCommand.test_parse_uid": {
            "name": "test_parse_uid",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMoveCommand.test_parse": {
            "name": "test_parse",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMoveCommand.test_parse_uid": {
            "name": "test_parse_uid",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFetchCommand.test_parse": {
            "name": "test_parse",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFetchCommand.test_parse_uid": {
            "name": "test_parse_uid",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFetchCommand.test_parse_list": {
            "name": "test_parse_list",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFetchCommand.test_parse_uid_list": {
            "name": "test_parse_uid_list",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFetchCommand.test_parse_macro_all": {
            "name": "test_parse_macro_all",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFetchCommand.test_parse_macro_full": {
            "name": "test_parse_macro_full",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFetchCommand.test_parse_macro_fast": {
            "name": "test_parse_macro_fast",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStoreCommand.test_parse": {
            "name": "test_parse",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStoreCommand.test_parse_uid": {
            "name": "test_parse_uid",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStoreCommand.test_parse_simple": {
            "name": "test_parse_simple",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStoreCommand.test_parse_error": {
            "name": "test_parse_error",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchCommand.test_parse_charset": {
            "name": "test_parse_charset",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchCommand.test_parse_charset_error": {
            "name": "test_parse_charset_error",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchCommand.test_parse_charset_default": {
            "name": "test_parse_charset_default",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchCommand.test_parse": {
            "name": "test_parse",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchCommand.test_parse_uid": {
            "name": "test_parse_uid",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchCommand.test_parse_error": {
            "name": "test_parse_error",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIdleCommand.test_parse": {
            "name": "test_parse",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIdleCommand.test_parse_error": {
            "name": "test_parse_error",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIdleCommand.test_parse_done": {
            "name": "test_parse_done",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIdleCommand.test_parse_done_bad": {
            "name": "test_parse_done_bad",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/test/test_parsing_primitives.py": {
        "TestNil.test_parse": {
            "name": "test_parse",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNil.test_parse_failure": {
            "name": "test_parse_failure",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNil.test_bytes": {
            "name": "test_bytes",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNumber.test_parse": {
            "name": "test_parse",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNumber.test_parse_failure": {
            "name": "test_parse_failure",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNumber.test_bytes": {
            "name": "test_bytes",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtom.test_parse": {
            "name": "test_parse",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtom.test_parse_failure": {
            "name": "test_parse_failure",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtom.test_bytes": {
            "name": "test_bytes",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestString.test_quoted_parse": {
            "name": "test_quoted_parse",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestString.test_quoted_parse_empty": {
            "name": "test_quoted_parse_empty",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestString.test_quoted_parse_failure": {
            "name": "test_quoted_parse_failure",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestString.test_quoted_bytes": {
            "name": "test_quoted_bytes",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestString.test_literal_parse": {
            "name": "test_literal_parse",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestString.test_literal_parse_empty": {
            "name": "test_literal_parse_empty",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestString.test_literal_plus": {
            "name": "test_literal_plus",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestString.test_literal_binary": {
            "name": "test_literal_binary",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestString.test_literal_plus_binary": {
            "name": "test_literal_plus_binary",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestString.test_literal_parse_failure": {
            "name": "test_literal_parse_failure",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestString.test_literal_bytes": {
            "name": "test_literal_bytes",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestString.test_build_binary": {
            "name": "test_build_binary",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestList.test_parse": {
            "name": "test_parse",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestList.test_parse_empty": {
            "name": "test_parse_empty",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestList.test_parse_failure": {
            "name": "test_parse_failure",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestList.test_bytes": {
            "name": "test_bytes",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/test/test_parsing_response.py": {
        "TestResponse.test_bytes": {
            "name": "test_bytes",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResponseContinuation.test_bytes": {
            "name": "test_bytes",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResponseBad.test_bytes": {
            "name": "test_bytes",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResponseNo.test_bytes": {
            "name": "test_bytes",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResponseOk.test_bytes": {
            "name": "test_bytes",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResponseBye.test_bytes": {
            "name": "test_bytes",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/test/test_parsing_response_code.py": {
        "TestCapability.test_bytes": {
            "name": "test_bytes",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPermanentFlags.test_bytes": {
            "name": "test_bytes",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUidNext.test_bytes": {
            "name": "test_bytes",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUidValidity.test_bytes": {
            "name": "test_bytes",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnseen.test_bytes": {
            "name": "test_bytes",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAppendUid.test_bytes": {
            "name": "test_bytes",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCopyUid.test_bytes": {
            "name": "test_bytes",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/test/test_parsing_response_specials.py": {
        "TestFlagsResponse.test_bytes": {
            "name": "test_bytes",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExistsResponse.test_bytes": {
            "name": "test_bytes",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRecentResponse.test_bytes": {
            "name": "test_bytes",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExpungeResponse.test_bytes": {
            "name": "test_bytes",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFetchResponse.test_bytes": {
            "name": "test_bytes",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchResponse.test_bytes": {
            "name": "test_bytes",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestESearchResponse.test_bytes": {
            "name": "test_bytes",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListResponse.test_bytes": {
            "name": "test_bytes",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLSubResponse.test_bytes": {
            "name": "test_bytes",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/test/test_parsing_specials.py": {
        "TestAString.test_parse": {
            "name": "test_parse",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAString.test_parse_quoted": {
            "name": "test_parse_quoted",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAString.test_parse_literal": {
            "name": "test_parse_literal",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAString.test_bytes": {
            "name": "test_bytes",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTag.test_parse": {
            "name": "test_parse",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTag.test_parse_failure": {
            "name": "test_parse_failure",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTag.test_bytes": {
            "name": "test_bytes",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMailbox.test_parse": {
            "name": "test_parse",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMailbox.test_parse_inbox": {
            "name": "test_parse_inbox",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMailbox.test_parse_quoted": {
            "name": "test_parse_quoted",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMailbox.test_parse_failure": {
            "name": "test_parse_failure",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMailbox.test_bytes": {
            "name": "test_bytes",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMailbox.test_str": {
            "name": "test_str",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObjectId.test_parse": {
            "name": "test_parse",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObjectId.test_parse_failure": {
            "name": "test_parse_failure",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObjectId.test_bytes": {
            "name": "test_bytes",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObjectId.test_parens": {
            "name": "test_parens",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObjectId.test_maybe": {
            "name": "test_maybe",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObjectId.test_random": {
            "name": "test_random",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDateTime.test_parse": {
            "name": "test_parse",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDateTime.test_parse_failure": {
            "name": "test_parse_failure",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDateTime.test_bytes": {
            "name": "test_bytes",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlag.test_parse": {
            "name": "test_parse",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlag.test_bytes": {
            "name": "test_bytes",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatusAttribute.test_valueerror": {
            "name": "test_valueerror",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatusAttribute.test_parse": {
            "name": "test_parse",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatusAttribute.test_parse_invalid": {
            "name": "test_parse_invalid",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatusAttribute.test_bytes": {
            "name": "test_bytes",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceSet.test_parse": {
            "name": "test_parse",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceSet.test_parse_error": {
            "name": "test_parse_error",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFetchAttribute.test_hash": {
            "name": "test_hash",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFetchAttribute.test_parse": {
            "name": "test_parse",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFetchAttribute.test_parse_simple": {
            "name": "test_parse_simple",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFetchAttribute.test_parse_sections": {
            "name": "test_parse_sections",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFetchAttribute.test_parse_error": {
            "name": "test_parse_error",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFetchAttribute.test_bytes": {
            "name": "test_bytes",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchKey.test_parse": {
            "name": "test_parse",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchKey.test_parse_seqset": {
            "name": "test_parse_seqset",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchKey.test_parse_list": {
            "name": "test_parse_list",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchKey.test_parse_list_error": {
            "name": "test_parse_list_error",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchKey.test_parse_filter_astring": {
            "name": "test_parse_filter_astring",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchKey.test_parse_filter_date": {
            "name": "test_parse_filter_date",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchKey.test_parse_filter_keyword": {
            "name": "test_parse_filter_keyword",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchKey.test_parse_filter_number": {
            "name": "test_parse_filter_number",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchKey.test_parse_filter_uid": {
            "name": "test_parse_filter_uid",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchKey.test_parse_filter_header": {
            "name": "test_parse_filter_header",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchKey.test_parse_filter_or": {
            "name": "test_parse_filter_or",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchKey.test_parse_error": {
            "name": "test_parse_error",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtensionOptions.test_parse_empty": {
            "name": "test_parse_empty",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtensionOptions.test_parse": {
            "name": "test_parse",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtensionOptions.test_parse_num": {
            "name": "test_parse_num",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtensionOptions.test_parse_seqset": {
            "name": "test_parse_seqset",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtensionOptions.test_parse_string": {
            "name": "test_parse_string",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtensionOptions.test_parse_nested": {
            "name": "test_parse_nested",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtensionOptions.test_bytes": {
            "name": "test_bytes",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/test/test_selected.py": {
        "TestSelectedMailbox.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelectedMailbox.new_selected": {
            "name": "new_selected",
            "location": 28,
            "return": [
                "SelectedMailbox",
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "typing.Type",
                    "str",
                    "int",
                    "typing.Callable[None, None]",
                    "Type",
                    "Type[T]",
                    "Callable[[None], None]"
                ],
                "guid": [
                    "bytes"
                ]
            }
        },
        "TestSelectedMailbox.set_messages": {
            "name": "set_messages",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "Type[T]",
                    "list[dict[str, typing.Any]]",
                    "int",
                    "Type[tuple]",
                    "dict[str, bool]",
                    "List[Dict[str, Any]]",
                    "list[]",
                    "Dict[str, bool]",
                    "bool",
                    "list"
                ],
                "selected": [
                    "pymap.selected.SelectedMailbox",
                    "Dict[str, str]"
                ],
                "expunged": [
                    "dict[str, str]",
                    "pymap.selected.SelectedMailbox",
                    "Dict[str, str]"
                ],
                "messages": [
                    "bytes",
                    "tuple[int]",
                    "eth.vm.message.Message",
                    "Tuple[int]"
                ]
            }
        },
        "TestSelectedMailbox.command": {
            "name": "command",
            "location": 41,
            "return": [
                "SearchCommand",
                "bool",
                "str",
                "Optional[bool]",
                "Dict[str, Any]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelectedMailbox.uid_command": {
            "name": "uid_command",
            "location": 45,
            "return": [
                "UidSearchCommand",
                "Tuple[float, float]",
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelectedMailbox.test_add_untagged_recent_equal": {
            "name": "test_add_untagged_recent_equal",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelectedMailbox.test_add_untagged_recent_increase": {
            "name": "test_add_untagged_recent_increase",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelectedMailbox.test_add_untagged_session_flag_add": {
            "name": "test_add_untagged_session_flag_add",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelectedMailbox.test_add_untagged_recent_expunge": {
            "name": "test_add_untagged_recent_expunge",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelectedMailbox.test_add_untagged_equal": {
            "name": "test_add_untagged_equal",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelectedMailbox.test_add_untagged_fetch": {
            "name": "test_add_untagged_fetch",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelectedMailbox.test_add_untagged_fetch_uid": {
            "name": "test_add_untagged_fetch_uid",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelectedMailbox.test_add_untagged_fetch_silenced": {
            "name": "test_add_untagged_fetch_silenced",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelectedMailbox.test_add_untagged_expunge_hidden": {
            "name": "test_add_untagged_expunge_hidden",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelectedMailbox.test_add_untagged_expunge": {
            "name": "test_add_untagged_expunge",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelectedMailbox.test_add_untagged_all": {
            "name": "test_add_untagged_all",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelectedMailbox.test_add_untagged_deleted_bye": {
            "name": "test_add_untagged_deleted_bye",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/test/test_sequenceset.py": {
        "TestSequenceSet.test_contains": {
            "name": "test_contains",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceSet.test_set": {
            "name": "test_set",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceSet.test_bytes": {
            "name": "test_bytes",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceSet.test_build": {
            "name": "test_build",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/test/server/base.py": {
        "FakeArgs.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeArgs.__getattr__": {
            "name": "__getattr__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "TestBase.init": {
            "name": "init",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool"
                ],
                "request": [],
                "backend": [
                    "bool"
                ]
            }
        },
        "TestBase.imap_server": {
            "name": "imap_server",
            "location": 40,
            "return": [
                "IMAPServer",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "backend": [
                    "str",
                    "Callable",
                    "int",
                    "typing.Callable[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "TestBase.managesieve_server": {
            "name": "managesieve_server",
            "location": 44,
            "return": [
                "ManageSieveServer",
                "int",
                "Callable",
                "bytes",
                "Iterable"
            ],
            "arguments": {
                "self": [],
                "backend": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Mapping[str, str]",
                    "typing.Mapping"
                ]
            }
        },
        "TestBase.args": {
            "name": "args",
            "location": 48,
            "return": [
                "FakeArgs",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBase.overrides": {
            "name": "overrides",
            "location": 52,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBase._incr_fd": {
            "name": "_incr_fd",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBase.new_transport": {
            "name": "new_transport",
            "location": 65,
            "return": [
                "server.mocktransport.MockTransport"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestBase.new_events": {
            "name": "new_events",
            "location": 68,
            "return": [
                "Union[(pymap.concurrent.Event, Generator[(pymap.concurrent.Event, Any, None)])]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "TestBase._check_queue": {
            "name": "_check_queue",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "pymap-main/test/server/mocktransport.py": {
        "_Socket.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fd": [
                    "int"
                ]
            }
        },
        "_Socket.fileno": {
            "name": "fileno",
            "location": 27,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockTransport.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "int",
                    "Union[int, float]",
                    "float"
                ],
                "matches": [
                    "int",
                    "Union[int, float]",
                    "float"
                ],
                "fd": [
                    "int",
                    "bytes",
                    "Dict[str, int]",
                    "dict[str, int]"
                ]
            }
        },
        "MockTransport._caller": {
            "name": "_caller",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "frame": [
                    "Optional[List[Type]]",
                    "list[typing.Type]",
                    "bool",
                    "Callable",
                    "None",
                    "typing.Callable[, ]",
                    "Optional[Tuple[str, Any]]",
                    "List[str]",
                    "tuple[typing.Union[str,typing.Any]]",
                    "list[str]"
                ]
            }
        },
        "MockTransport._fail": {
            "name": "_fail",
            "location": 48,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "memoryview",
                    "bool",
                    "None"
                ],
                "msg": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "MockTransport.push_readline": {
            "name": "push_readline",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ],
                "wait": [
                    "str",
                    "None",
                    "int",
                    "List[List[str]]",
                    "Dict[str, str]",
                    "list[list[str]]",
                    "dict",
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "set": [
                    "str",
                    "None",
                    "int",
                    "List[List[str]]",
                    "Dict[str, str]",
                    "list[list[str]]",
                    "dict",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "MockTransport.push_readexactly": {
            "name": "push_readexactly",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ],
                "wait": [
                    "str",
                    "None",
                    "int",
                    "List[List[str]]",
                    "Dict[str, str]",
                    "list[list[str]]",
                    "dict",
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "set": [
                    "str",
                    "None",
                    "int",
                    "List[List[str]]",
                    "Dict[str, str]",
                    "list[list[str]]",
                    "dict",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "MockTransport.push_write": {
            "name": "push_write",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockTransport.push_read_eof": {
            "name": "push_read_eof",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wait": [
                    "str",
                    "None",
                    "bool",
                    "float",
                    "Callable[[str, str], None]",
                    "typing.Callable[str,str, None]"
                ],
                "set": [
                    "str",
                    "None",
                    "bool",
                    "float",
                    "Callable[[str, str], None]",
                    "typing.Callable[str,str, None]"
                ]
            }
        },
        "MockTransport.push_login": {
            "name": "push_login",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "bytes",
                    "bool",
                    "List[List[str]]",
                    "int",
                    "Optional[List[str]]"
                ],
                "wait": [
                    "str",
                    "None",
                    "bool",
                    "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
                ],
                "set": [
                    "str",
                    "None",
                    "Optional[dict]",
                    "int",
                    "List[str]",
                    "dict[, ]",
                    "list[str]"
                ]
            }
        },
        "MockTransport.push_logout": {
            "name": "push_logout",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wait": [
                    "Dict[str, Any]",
                    "str",
                    "None",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "set": [
                    "list",
                    "None",
                    "float",
                    "List[int]",
                    "list[]",
                    "list[int]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "MockTransport.push_select": {
            "name": "push_select",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mailbox": [
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "exists": [
                    "Callable",
                    "None",
                    "Optional[Sequence[str]]",
                    "typing.Callable[, ]",
                    "int",
                    "Optional[Any]",
                    "typing.Sequence[str]",
                    "Optional[List[str]]",
                    "typing.Any",
                    "list[str]"
                ],
                "recent": [
                    "Callable",
                    "None",
                    "Optional[Sequence[str]]",
                    "typing.Callable[, ]",
                    "int",
                    "Optional[Any]",
                    "typing.Sequence[str]",
                    "Optional[List[str]]",
                    "typing.Any",
                    "list[str]"
                ],
                "uidnext": [
                    "Callable",
                    "None",
                    "Optional[Sequence[str]]",
                    "typing.Callable[, ]",
                    "int",
                    "Optional[Any]",
                    "typing.Sequence[str]",
                    "Optional[List[str]]",
                    "typing.Any",
                    "list[str]"
                ],
                "unseen": [
                    "Optional[str]",
                    "None",
                    "Optional[bool]",
                    "str",
                    "int",
                    "bool"
                ],
                "readonly": [
                    "bool",
                    "str",
                    "int"
                ],
                "examine": [
                    "bool",
                    "str",
                    "int"
                ],
                "wait": [
                    "str",
                    "None",
                    "bool",
                    "dict",
                    "int",
                    "dict[, ]"
                ],
                "post_wait": [
                    "bool",
                    "None"
                ],
                "set": [
                    "bool",
                    "None"
                ]
            }
        },
        "MockTransport._pop_expected": {
            "name": "_pop_expected",
            "location": 135,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "got": [
                    "Collection[str]",
                    "typing.Collection",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "bytes",
                    "Literal",
                    "None",
                    "typing.Literal",
                    "bool",
                    "Type[object]",
                    "typing.Type"
                ]
            }
        },
        "MockTransport._match_write_expected": {
            "name": "_match_write_expected",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "list[dict[, ]]",
                    "str",
                    "bool",
                    "List[dict]"
                ],
                "re_parts": [
                    "list[]",
                    "list",
                    "str"
                ]
            }
        },
        "MockTransport._match_write_msg": {
            "name": "_match_write_msg",
            "location": 168,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "bool",
                    "Tuple['cirq.Qid']",
                    "tuple['cirq.Qid']",
                    "Union[Dict, None]",
                    "None"
                ],
                "data": [
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "full_regex": [
                    "str",
                    "Optional[str]",
                    "Iterable[bytes]"
                ],
                "where": [
                    "str",
                    "dict",
                    "Tuple['cirq.Qid']",
                    "bool",
                    "Union[Dict, None]"
                ]
            }
        },
        "MockTransport._match_write": {
            "name": "_match_write",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "where": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "expected": [
                    "dict[, ]",
                    "dict",
                    "typing.MutableMapping",
                    "MutableMapping",
                    "typing.Mapping",
                    "Mapping",
                    "typing.Type",
                    "typing.Collection",
                    "type",
                    "dict[str, typing.Any]",
                    "Collection[str]",
                    "T",
                    "Dict[str, Any]",
                    "enum.Enum"
                ],
                "data": [
                    "bytes",
                    "int",
                    "dict",
                    "dict[, ]",
                    "BinaryIO",
                    "typing.BinaryIO",
                    "bool",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "list[typing.Any]",
                    "Optional[List[Any]]",
                    "None"
                ]
            }
        },
        "MockTransport.get_extra_info": {
            "name": "get_extra_info",
            "location": 198,
            "return": [
                "Optional[Union[(_Socket, Tuple[(str, int)])]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "default": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "MockTransport.write": {
            "name": "write",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "MockTransport.at_eof": {
            "name": "at_eof",
            "location": 251,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockTransport.close": {
            "name": "close",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/test/server/test_admin_auth.py": {
        "TestAdminAuth.overrides": {
            "name": "overrides",
            "location": 23,
            "return": [
                "dict[typing.Text, bytes]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/test/server/test_admin_mailbox.py": {
        "TestMailboxHandlers.overrides": {
            "name": "overrides",
            "location": 20,
            "return": [
                "dict[typing.Text, bytes]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/test/server/test_admin_system.py": {},
    "pymap-main/test/server/test_admin_user.py": {
        "TestMailboxHandlers.overrides": {
            "name": "overrides",
            "location": 21,
            "return": [
                "dict[typing.Text, bytes]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/test/server/test_copy.py": {},
    "pymap-main/test/server/test_expunge.py": {},
    "pymap-main/test/server/test_fetch.py": {},
    "pymap-main/test/server/test_idle.py": {},
    "pymap-main/test/server/test_mailbox.py": {},
    "pymap-main/test/server/test_managesieve.py": {
        "TestManageSieve._push_capabilities": {
            "name": "_push_capabilities",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestManageSieve._push_logout": {
            "name": "_push_logout",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestManageSieve._push_authenticate": {
            "name": "_push_authenticate",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "pymap-main/test/server/test_readonly.py": {},
    "pymap-main/test/server/test_rename.py": {},
    "pymap-main/test/server/test_search.py": {
        "TestSearch.overrides": {
            "name": "overrides",
            "location": 10,
            "return": [
                "bool",
                "dict[typing.Text, list[bytes]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymap-main/test/server/test_session.py": {},
    "pymap-main/test/server/test_store.py": {},
    "pymap-main/test/server/__init__.py": {}
}
{
    "pymem-master/setup.py": {},
    "pymem-master/pymem/api.py": {
        "get_malloc_stats": {
            "name": "get_malloc_stats",
            "location": 11,
            "return": [
                "dict"
            ],
            "arguments": {
                "debugger": [
                    "pymem.debugger.base.BaseDebugger"
                ]
            }
        },
        "get_objects": {
            "name": "get_objects",
            "location": 17,
            "return": [
                "dict"
            ],
            "arguments": {
                "debugger": [
                    "pymem.debugger.base.BaseDebugger"
                ],
                "limit": [
                    "int"
                ]
            }
        },
        "get_garbages": {
            "name": "get_garbages",
            "location": 23,
            "return": [
                "dict"
            ],
            "arguments": {
                "debugger": [
                    "pymem.debugger.base.BaseDebugger"
                ]
            }
        },
        "get_summary": {
            "name": "get_summary",
            "location": 29,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "pid": [
                    "int"
                ]
            }
        }
    },
    "pymem-master/pymem/cli.py": {
        "main": {
            "name": "main",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "pid": [
                    "int",
                    "str",
                    "Set[str]",
                    "set[str]"
                ],
                "debugger_kind": [
                    "str",
                    "bool"
                ],
                "output_format": [
                    "str",
                    "Union[utils.CWLObjectType, MutableSequence[utils.CWLObjectType], None]",
                    "typing.MutableSequence",
                    "Optional[qiskiproviders.ibmq.utils.utils.RefreshQueue]",
                    "None",
                    "Optional[float]",
                    "float"
                ],
                "objects_limit": [
                    "int",
                    "str"
                ],
                "verbose": [
                    "bool",
                    "str",
                    "None",
                    "Optional[int]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "format_output": {
            "name": "format_output",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "dict"
                ],
                "output_format": [
                    "str"
                ]
            }
        }
    },
    "pymem-master/pymem/utils.py": {
        "human": {
            "name": "human",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "num": [
                    "float"
                ]
            }
        },
        "check_process_exist": {
            "name": "check_process_exist",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "pid": [
                    "int"
                ]
            }
        }
    },
    "pymem-master/pymem/__init__.py": {},
    "pymem-master/pymem/debugger/base.py": {
        "BaseDebugger.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bin_path": [
                    "str"
                ],
                "target_pid": [
                    "int"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "BaseDebugger.bin_path": {
            "name": "bin_path",
            "location": 22,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDebugger.target_pid": {
            "name": "target_pid",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDebugger.verbose": {
            "name": "verbose",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDebugger._format_command": {
            "name": "_format_command",
            "location": 33,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "debug_code": [
                    "str"
                ]
            }
        },
        "BaseDebugger.debug_with": {
            "name": "debug_with",
            "location": 36,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "debug_code": [
                    "str"
                ]
            }
        }
    },
    "pymem-master/pymem/debugger/gdb.py": {
        "GDBDebugger._format_command": {
            "name": "_format_command",
            "location": 7,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "debug_code": [
                    "str"
                ]
            }
        }
    },
    "pymem-master/pymem/debugger/lldb.py": {
        "LLDBDebugger._format_command": {
            "name": "_format_command",
            "location": 7,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "debug_code": [
                    "str"
                ]
            }
        }
    },
    "pymem-master/pymem/debugger/__init__.py": {},
    "pymem-master/pymem/snippets/garbages.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pymem-master/pymem/snippets/mallocstats.py": {
        "redirect_stderr": {
            "name": "redirect_stderr",
            "location": 12,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "new_fd": [
                    "str",
                    "Dict[str, int]",
                    "dict[str, int]",
                    "Optional[bool]",
                    "bool",
                    "list",
                    "None",
                    "list[]"
                ]
            }
        },
        "get_malloc_stats": {
            "name": "get_malloc_stats",
            "location": 19,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pymem-master/pymem/snippets/objects.py": {
        "_is_containerobject": {
            "name": "_is_containerobject",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "ignore_object": {
            "name": "ignore_object",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_remove_duplicates": {
            "name": "_remove_duplicates",
            "location": 22,
            "return": [
                "list"
            ],
            "arguments": {
                "objects": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "get_referents": {
            "name": "get_referents",
            "location": 39,
            "return": [
                "list"
            ],
            "arguments": {
                "object": [
                    "str",
                    "int"
                ],
                "level": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "get_objects": {
            "name": "get_objects",
            "location": 60,
            "return": [
                "list"
            ],
            "arguments": {
                "remove_dups": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ],
                "include_frames": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "summarize": {
            "name": "summarize",
            "location": 88,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "objects": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "human": {
            "name": "human",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "num": [
                    "int"
                ],
                "power": [
                    "typing.Text",
                    "int",
                    "str"
                ]
            }
        },
        "format_": {
            "name": "format_",
            "location": 121,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "rows": [
                    "dict[, ]",
                    "Iterator[Dict[str, Any]]",
                    "list[str]",
                    "dict",
                    "List[str]"
                ],
                "limit": [
                    "int",
                    "Dict[str, str]",
                    "List[str]",
                    "Sequence[MutableSet[int]]",
                    "str"
                ],
                "sort": [
                    "typing.Text",
                    "List[int]",
                    "List[List[str]]",
                    "bool",
                    "int"
                ],
                "order": [
                    "typing.Text",
                    "int",
                    "Dict[str, str]",
                    "List[str]",
                    "Sequence[MutableSet[int]]",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pymem-master/tests/test_api.py": {
        "test_get_summary": {
            "name": "test_get_summary",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_summary.sleep_until_wake": {
            "name": "sleep_until_wake",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "e": [
                    "int",
                    "Event"
                ]
            }
        },
        "test_get_summary.convert": {
            "name": "convert",
            "location": 20,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        }
    },
    "pymem-master/tests/test_cli.py": {
        "cli": {
            "name": "cli",
            "location": 12,
            "return": [
                "CliRunner",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_invalid_pid": {
            "name": "test_invalid_pid",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "cli": []
            }
        },
        "test_no_debugger": {
            "name": "test_no_debugger",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "cli": []
            }
        },
        "test_print": {
            "name": "test_print",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "cli": []
            }
        },
        "test_format_output": {
            "name": "test_format_output",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_print.sleep_until_wake": {
            "name": "sleep_until_wake",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "e": [
                    "int",
                    "Event"
                ]
            }
        }
    },
    "pymem-master/tests/test_debugger.py": {
        "test_BaseDebugger": {
            "name": "test_BaseDebugger",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_GDBDebugger_format_command": {
            "name": "test_GDBDebugger_format_command",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_LLDBDebugger_format_command": {
            "name": "test_LLDBDebugger_format_command",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_GDBDebugger": {
            "name": "test_GDBDebugger",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_LLDBDebugger": {
            "name": "test_LLDBDebugger",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_BaseDebugger._format_command": {
            "name": "_format_command",
            "location": 17,
            "return": [
                "list[typing.Text]",
                "int",
                "types.Resolver",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "debug_code": [
                    "int",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "pymem-master/tests/test_utils.py": {
        "test_human": {
            "name": "test_human",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_process_exist": {
            "name": "test_check_process_exist",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_process_exist.sleep_until_wake": {
            "name": "sleep_until_wake",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "e": [
                    "int",
                    "Event"
                ]
            }
        }
    },
    "pymem-master/tests/__init__.py": {}
}
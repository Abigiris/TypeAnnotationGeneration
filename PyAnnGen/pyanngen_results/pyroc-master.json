{
    "pyroc-master/setup.py": {},
    "pyroc-master/examples/bootstrap.py": {},
    "pyroc-master/examples/compare.py": {},
    "pyroc-master/examples/simple_example.py": {},
    "pyroc-master/pyroc/bootstrap.py": {
        "bootstrap_roc_": {
            "name": "bootstrap_roc_",
            "location": 12,
            "return": [
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "args": []
            }
        },
        "bootstrap_roc": {
            "name": "bootstrap_roc",
            "location": 33,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "inp_roc": [
                    "int",
                    "Sized",
                    "float",
                    "Sequence[float]",
                    "Union[float,Sequence[float]]",
                    "bool",
                    "numpy.ndarray"
                ],
                "num_bootstraps": [
                    "int",
                    "List",
                    "bool",
                    "Sequence"
                ],
                "seed": [
                    "int",
                    "List[float]",
                    "None",
                    "float"
                ],
                "n_jobs": [
                    "int",
                    "float",
                    "List[float]"
                ]
            }
        }
    },
    "pyroc-master/pyroc/compare.py": {
        "gaussian_cdf": {
            "name": "gaussian_cdf",
            "location": 11,
            "return": [
                "float",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        },
        "compare_bootstrap": {
            "name": "compare_bootstrap",
            "location": 25,
            "return": [
                "Tuple[bool]",
                "int",
                "float",
                "bool",
                "str",
                "List[int]"
            ],
            "arguments": {
                "roc1": [
                    "str",
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "roc2": [
                    "str",
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "alt_hypothesis": [
                    "float",
                    "Optional[int]",
                    "bool",
                    "str",
                    "Tuple[str]",
                    "Optional[bool]"
                ],
                "seed": [
                    "int",
                    "None",
                    "List",
                    "List[str]",
                    "Set",
                    "List[Tuple[int,Any]]",
                    "List[tuple[Union[int,Any]]]",
                    "Tuple[FrozenSet[int]]",
                    "Tuple[frozenset]"
                ]
            }
        },
        "compare_binary": {
            "name": "compare_binary",
            "location": 93,
            "return": [
                "Tuple[bool]",
                "int",
                "float",
                "bool",
                "str",
                "List[int]"
            ],
            "arguments": {
                "roc1": [
                    "str",
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "roc2": [
                    "str",
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "alt_hypothesis": [
                    "float",
                    "Optional[int]",
                    "bool",
                    "str",
                    "Tuple[str]",
                    "Optional[bool]"
                ],
                "seed": [
                    "int",
                    "None",
                    "List",
                    "List[str]",
                    "Set",
                    "List[Tuple[int,Any]]",
                    "List[tuple[Union[int,Any]]]",
                    "Tuple[FrozenSet[int]]",
                    "Tuple[frozenset]"
                ]
            }
        }
    },
    "pyroc-master/pyroc/roc.py": {
        "ROC.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ground_truth": [
                    "int",
                    "numpy.ndarray"
                ],
                "estimates": [
                    "float",
                    "numpy.ndarray",
                    "Sequence[numpy.ndarray]",
                    "int"
                ],
                "statistical_power": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ROC.__eq__": {
            "name": "__eq__",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]",
                    "bool"
                ]
            }
        },
        "ROC.__gt__": {
            "name": "__gt__",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[Union[dict, str]]",
                    "dict"
                ]
            }
        },
        "ROC.__ge__": {
            "name": "__ge__",
            "location": 77,
            "return": [
                "bool",
                "int",
                "Iterable[T]",
                "str",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet[T]",
                    "Set[VT]",
                    "dict",
                    "str",
                    "list",
                    "List[str]"
                ]
            }
        },
        "ROC.__lt__": {
            "name": "__lt__",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[Union[dict, str]]",
                    "dict"
                ]
            }
        },
        "ROC.__le__": {
            "name": "__le__",
            "location": 91,
            "return": [
                "bool",
                "int",
                "Iterable[T]",
                "str",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet[T]",
                    "Set[VT]",
                    "dict",
                    "str",
                    "list",
                    "List[str]"
                ]
            }
        },
        "ROC.auc": {
            "name": "auc",
            "location": 97,
            "return": [
                "float",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "ROC.roc": {
            "name": "roc",
            "location": 111,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ROC.bootstrap": {
            "name": "bootstrap",
            "location": 167,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "ROC.bootstrap_confidence": {
            "name": "bootstrap_confidence",
            "location": 190,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "num_bootstraps": [
                    "int",
                    "float",
                    "numpy.array",
                    "Callable[[Type, str], bool]",
                    "List['Entity']"
                ],
                "num_bootstrap_jobs": [
                    "int",
                    "float",
                    "numpy.array",
                    "Callable[[Type, str], bool]",
                    "List['Entity']"
                ],
                "show_min_max": [
                    "int",
                    "Optional[numpy.ndarray]",
                    "Optional[float]",
                    "numpy.ndarray",
                    "float"
                ],
                "mean_roc": [
                    "int",
                    "Optional[numpy.ndarray]",
                    "Optional[float]",
                    "numpy.ndarray",
                    "float"
                ],
                "p_value": [
                    "int",
                    "Optional[numpy.ndarray]",
                    "Optional[float]",
                    "numpy.ndarray",
                    "float"
                ],
                "seed": [
                    "int",
                    "float",
                    "numpy.array",
                    "Callable[[Type, str], bool]",
                    "List['Entity']"
                ]
            }
        },
        "ROC.plot": {
            "name": "plot",
            "location": 263,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x_label": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "str",
                    "float"
                ],
                "y_label": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "str",
                    "float"
                ],
                "title": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "str",
                    "float"
                ],
                "label": [
                    "Callable",
                    "List[List[int]]",
                    "numpy.ndarray"
                ],
                "color": [
                    "int",
                    "str",
                    "float",
                    "List[List[int]]"
                ],
                "bootstrap": [
                    "Sequence[int]",
                    "int",
                    "List[str]"
                ],
                "num_bootstraps": [
                    "int",
                    "float",
                    "Iterable[str]",
                    "Tuple[int, int, int]"
                ],
                "num_bootstrap_jobs": [
                    "int",
                    "float",
                    "Iterable[str]",
                    "Tuple[int, int, int]"
                ],
                "seed": [
                    "int",
                    "float",
                    "Iterable[str]",
                    "Tuple[int, int, int]"
                ],
                "p_value": [
                    "int",
                    "float",
                    "Iterable[str]",
                    "Tuple[int, int, int]"
                ],
                "mean_roc": [
                    "int",
                    "float",
                    "Iterable[str]",
                    "Tuple[int, int, int]"
                ],
                "show_min_max": [
                    "int",
                    "float",
                    "Iterable[str]",
                    "Tuple[int, int, int]"
                ],
                "plot_roc_curve": [
                    "Sequence[int]",
                    "int",
                    "List[str]"
                ],
                "ax": [
                    "int",
                    "bool",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]"
                ]
            }
        }
    },
    "pyroc-master/pyroc/__init__.py": {},
    "pyroc-master/tests/test_bootstrap.py": {
        "TestBootstrap.test_bootstrap_helper": {
            "name": "test_bootstrap_helper",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gt": [],
                "est": [],
                "seed": [
                    "float",
                    "str"
                ]
            }
        },
        "TestBootstrap.test_bootstrap_roc_ex1": {
            "name": "test_bootstrap_roc_ex1",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBootstrap.test_bootstrap_roc_ex2": {
            "name": "test_bootstrap_roc_ex2",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBootstrap.test_bootstrap_roc_n_jobs": {
            "name": "test_bootstrap_roc_n_jobs",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBootstrap.test_bootstrap_roc_num_bootstraps": {
            "name": "test_bootstrap_roc_num_bootstraps",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyroc-master/tests/test_compare.py": {
        "TestCompareBootstrap.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompareBootstrap.test_compare_bootstrap_simple": {
            "name": "test_compare_bootstrap_simple",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompareBootstrap.test_compare_bootstrap_extreme_alt_hypothesis": {
            "name": "test_compare_bootstrap_extreme_alt_hypothesis",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompareBootstrap.test_compare_bootstrap_failures": {
            "name": "test_compare_bootstrap_failures",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompareBinary.setUp": {
            "name": "setUp",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompareBinary.test_compare_binary_simple": {
            "name": "test_compare_binary_simple",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompareBinary.test_compare_binary_extreme_alt_hypothesis": {
            "name": "test_compare_binary_extreme_alt_hypothesis",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompareBinary.test_compare_binary_failures": {
            "name": "test_compare_binary_failures",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyroc-master/tests/test_roc.py": {
        "TestROCExample1.setup": {
            "name": "setup",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestROCExample1.test_roc": {
            "name": "test_roc",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestROCExample1.test_auc": {
            "name": "test_auc",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestROCExample2.test_auc_all_gt_equal": {
            "name": "test_auc_all_gt_equal",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestROCExample2.test_auc_two_values": {
            "name": "test_auc_two_values",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestROCExample2.test_auc_three_values": {
            "name": "test_auc_three_values",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestROCExample3.test_auc_hypothesis": {
            "name": "test_auc_hypothesis",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gt": [
                    "str"
                ],
                "est": [
                    "str"
                ]
            }
        },
        "TestROCExample3.test_roc_ran_twice": {
            "name": "test_roc_ran_twice",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gt": [],
                "est": []
            }
        },
        "TestROCExample3.test_bootstrapping": {
            "name": "test_bootstrapping",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gt": [],
                "est": [],
                "seed": [
                    "float",
                    "str"
                ]
            }
        },
        "TestROCBootstrap.setUp": {
            "name": "setUp",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestROCBootstrap.test_bootstrap_confidence_default": {
            "name": "test_bootstrap_confidence_default",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestROCBootstrap.test_bootstrap_confidence_num_bootstraps": {
            "name": "test_bootstrap_confidence_num_bootstraps",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestROCBootstrap.test_bootstrap_confidence_num_bootstrap_jobs": {
            "name": "test_bootstrap_confidence_num_bootstrap_jobs",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestROCBootstrap.test_bootstrap_confidence_show_min_max": {
            "name": "test_bootstrap_confidence_show_min_max",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestROCBootstrap.test_bootstrap_confidence_mean_roc": {
            "name": "test_bootstrap_confidence_mean_roc",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestROCBootstrap.test_bootstrap_confidence_p_value": {
            "name": "test_bootstrap_confidence_p_value",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestROCBootstrap.test_plot_with_bootstrap": {
            "name": "test_plot_with_bootstrap",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestROCCompare.setUp": {
            "name": "setUp",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestROCCompare.test_equal": {
            "name": "test_equal",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestROCCompare.test_unequal": {
            "name": "test_unequal",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyroc-master/tests/__init__.py": {}
}
{
    "pystan-main/doc/conf.py": {},
    "pystan-main/stan/common.py": {
        "unused_tcp_port": {
            "name": "unused_tcp_port",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "HTTPResponse.json": {
            "name": "json",
            "location": 23,
            "return": [
                "bool",
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pystan-main/stan/fit.py": {
        "Fit.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stan_outputs": [
                    "int",
                    "str",
                    "List[int]",
                    "bool"
                ],
                "num_chains": [
                    "int",
                    "List[int]"
                ],
                "param_names": [
                    "str",
                    "bool",
                    "Pattern[str]",
                    "List[str]",
                    "Pattern"
                ],
                "constrained_param_names": [
                    "Set[str]",
                    "List[str]",
                    "str",
                    "Set[Tuple[str,str]]",
                    "Set[tuple[Union[str,str]]]"
                ],
                "dims": [
                    "str",
                    "List",
                    "Union[str,Tuple[str,...]]",
                    "Set[Optional[str]]",
                    "Tuple[Union[str,...]]",
                    "List[Optional[str]]",
                    "Union[Dict[str,int],str]",
                    "Dict[str,int]"
                ],
                "num_warmup": [
                    "List[int]",
                    "float",
                    "Callable",
                    "int",
                    "List[str]",
                    "str"
                ],
                "num_samples": [
                    "List[int]",
                    "float",
                    "Callable",
                    "int",
                    "List[str]",
                    "str"
                ],
                "num_thin": [
                    "int",
                    "List[Optional[int]]",
                    "Tuple[int,int]",
                    "Callable",
                    "Tuple[Union[int,int]]",
                    "Union[int,str]",
                    "str"
                ],
                "save_warmup": [
                    "int",
                    "List[Optional[int]]",
                    "Tuple[int,int]",
                    "Callable",
                    "Tuple[Union[int,int]]",
                    "Union[int,str]",
                    "str"
                ]
            }
        },
        "Fit.__contains__": {
            "name": "__contains__",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool"
                ]
            }
        },
        "Fit.to_frame": {
            "name": "to_frame",
            "location": 102,
            "return": [
                "numpy.ndarray",
                "float",
                "Dict[str, numpy.ndarray]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fit.__getitem__": {
            "name": "__getitem__",
            "location": 121,
            "return": [
                "Tuple[Any, Any, Any]",
                "int",
                "float",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "str",
                    "float"
                ]
            }
        },
        "Fit.__iter__": {
            "name": "__iter__",
            "location": 141,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fit.__len__": {
            "name": "__len__",
            "location": 145,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fit.__repr__": {
            "name": "__repr__",
            "location": 148,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fit._parameter_indexes": {
            "name": "_parameter_indexes",
            "location": 164,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "str"
                ]
            }
        },
        "Fit.__repr__.summarize_param": {
            "name": "summarize_param",
            "location": 152,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "param_name": [
                    "str",
                    "Optional[str]",
                    "Collection[str]",
                    "bool",
                    "List[str]"
                ],
                "dims": [
                    "str",
                    "Optional[str]",
                    "Collection[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Fit._parameter_indexes.calculate_starts": {
            "name": "calculate_starts",
            "location": 194,
            "return": [
                "Tuple",
                "str",
                "Union[List[str],str]",
                "Tuple[int,int]"
            ],
            "arguments": {
                "dims": [
                    "int",
                    "Dict[int, numpy.ndarray]",
                    "Tuple[int]",
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "pystan-main/stan/model.py": {
        "build": {
            "name": "build",
            "location": 435,
            "return": [
                "Optional[Model]"
            ],
            "arguments": {
                "program_code": [
                    "str",
                    "bool",
                    "list[typing.Sequence[int]]",
                    "typing.Sequence[]",
                    "list[]"
                ],
                "data": [
                    "frozendict"
                ],
                "random_seed": [
                    "None",
                    "str",
                    "bool",
                    "list[typing.Sequence[int]]",
                    "typing.Sequence[]",
                    "list[]"
                ]
            }
        },
        "DataJSONEncoder.default": {
            "name": "default",
            "location": 24,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "frozendict.__setitem__": {
            "name": "__setitem__",
            "location": 37,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "Model.__post_init__": {
            "name": "__post_init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.sample": {
            "name": "sample",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.hmc_nuts_diag_e_adapt": {
            "name": "hmc_nuts_diag_e_adapt",
            "location": 91,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.fixed_param": {
            "name": "fixed_param",
            "location": 110,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._create_fit": {
            "name": "_create_fit",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.constrain_pars": {
            "name": "constrain_pars",
            "location": 316,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "unconstrained_parameters": [
                    "float",
                    "tuple['cirq.Qid']"
                ],
                "include_tparams": [
                    "bool"
                ],
                "include_gqs": [
                    "bool"
                ]
            }
        },
        "Model.unconstrain_pars": {
            "name": "unconstrain_pars",
            "location": 350,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "constrained_parameters": [
                    "float",
                    "tuple['cirq.Qid']"
                ]
            }
        },
        "Model.log_prob": {
            "name": "log_prob",
            "location": 375,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "unconstrained_parameters": [
                    "list[float]",
                    "list[str]"
                ],
                "adjust_transform": [
                    "bool"
                ]
            }
        },
        "Model.grad_log_prob": {
            "name": "grad_log_prob",
            "location": 405,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "unconstrained_parameters": [
                    "bool",
                    "str",
                    "typing.Collection"
                ]
            }
        },
        "Model._create_fit.go.is_nonempty_logger_message": {
            "name": "is_nonempty_logger_message",
            "location": 260,
            "return": [
                "bool"
            ],
            "arguments": {
                "msg": []
            }
        },
        "Model._create_fit.go.is_iteration_or_elapsed_time_logger_message": {
            "name": "is_iteration_or_elapsed_time_logger_message",
            "location": 263,
            "return": [],
            "arguments": {
                "msg": []
            }
        }
    },
    "pystan-main/stan/plugins.py": {
        "get_plugins": {
            "name": "get_plugins",
            "location": 9,
            "return": [
                "Generator[(pkg_resources.EntryPoint, None, None)]"
            ],
            "arguments": {}
        },
        "PluginBase.on_post_sample": {
            "name": "on_post_sample",
            "location": 28,
            "return": [
                "Dict",
                "Optional[Type]",
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "fit": [
                    "Dict",
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "pystan-main/stan/__init__.py": {},
    "pystan-main/tests/conftest.py": {
        "host": {
            "name": "host",
            "location": 6,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "port": {
            "name": "port",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "pystan-main/tests/test_basic_bernoulli.py": {
        "posterior": {
            "name": "posterior",
            "location": 24,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "fit": {
            "name": "fit",
            "location": 29,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "posterior": [
                    "int",
                    "str"
                ]
            }
        },
        "test_bernoulli_sampling_thin": {
            "name": "test_bernoulli_sampling_thin",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "posterior": [
                    "int",
                    "str"
                ]
            }
        },
        "test_bernoulli_fixed_param": {
            "name": "test_bernoulli_fixed_param",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "posterior": [
                    "int",
                    "str"
                ]
            }
        },
        "test_bernoulli_sampling_invalid_argument": {
            "name": "test_bernoulli_sampling_invalid_argument",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "posterior": [
                    "int",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_bernoulli_sampling": {
            "name": "test_bernoulli_sampling",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "fit": [
                    "int",
                    "str"
                ]
            }
        },
        "test_bernoulli_to_frame": {
            "name": "test_bernoulli_to_frame",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "fit": [
                    "Iterable[numpy.dtype]"
                ]
            }
        },
        "test_bernoulli_get_item": {
            "name": "test_bernoulli_get_item",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "fit": [
                    "str",
                    "int"
                ]
            }
        },
        "test_bernoulli_random_seed": {
            "name": "test_bernoulli_random_seed",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bernoulli_random_seed_same": {
            "name": "test_bernoulli_random_seed_same",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bernoulli_random_seed_different": {
            "name": "test_bernoulli_random_seed_different",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "posterior": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "test_bernoulli_different_chains": {
            "name": "test_bernoulli_different_chains",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "posterior": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "pystan-main/tests/test_basic_normal.py": {
        "normal_posterior": {
            "name": "normal_posterior",
            "location": 9,
            "return": [
                "IO",
                "str",
                "bytes",
                "float",
                "Optional[int]",
                "bool"
            ],
            "arguments": {}
        },
        "test_normal_stepsize": {
            "name": "test_normal_stepsize",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "normal_posterior": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "pystan-main/tests/test_build_exceptions.py": {
        "test_semantic_error": {
            "name": "test_semantic_error",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_syntax_error": {
            "name": "test_syntax_error",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pystan-main/tests/test_build_program.py": {
        "test_build_basic": {
            "name": "test_build_basic",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stanc_no_such_distribution": {
            "name": "test_stanc_no_such_distribution",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stanc_invalid_assignment": {
            "name": "test_stanc_invalid_assignment",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stanc_exception_semicolon": {
            "name": "test_stanc_exception_semicolon",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pystan-main/tests/test_constrain_pars.py": {
        "posterior": {
            "name": "posterior",
            "location": 28,
            "return": [
                "IO",
                "str",
                "bytes",
                "float",
                "Optional[int]",
                "bool"
            ],
            "arguments": {}
        },
        "test_log_prob": {
            "name": "test_log_prob",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "posterior": [
                    "Optional[bool]",
                    "bool",
                    "str"
                ],
                "x": [
                    "int",
                    "str",
                    "Union[List,Dict]",
                    "List",
                    "Dict"
                ],
                "y": [
                    "str",
                    "Union[List,Dict]",
                    "List",
                    "Dict"
                ]
            }
        }
    },
    "pystan-main/tests/test_corr_matrix.py": {
        "test_corr_matrix_build": {
            "name": "test_corr_matrix_build",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_corr_matrix_sample": {
            "name": "test_corr_matrix_sample",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pystan-main/tests/test_eight_schools.py": {
        "posterior": {
            "name": "posterior",
            "location": 36,
            "return": [
                "str",
                "dict",
                "Union[str, Dict]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "test_eight_schools_build": {
            "name": "test_eight_schools_build",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "posterior": [
                    "Optional[Iterable[Any]]",
                    "Iterable[Any]",
                    "None"
                ]
            }
        },
        "test_eight_schools_build_numpy": {
            "name": "test_eight_schools_build_numpy",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "posterior": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_eight_schools_sample": {
            "name": "test_eight_schools_sample",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "posterior": [
                    "int",
                    "str"
                ]
            }
        },
        "test_eight_schools_parameter_indexes": {
            "name": "test_eight_schools_parameter_indexes",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "posterior": [
                    "int"
                ]
            }
        },
        "test_eight_schools_positional_argument": {
            "name": "test_eight_schools_positional_argument",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "posterior": [
                    "int",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "pystan-main/tests/test_eight_schools_large.py": {
        "posterior": {
            "name": "posterior",
            "location": 39,
            "return": [
                "str",
                "dict",
                "Union[str, Dict]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "test_eight_schools_large_sample": {
            "name": "test_eight_schools_large_sample",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "posterior": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "pystan-main/tests/test_fit_basic_array.py": {
        "posterior": {
            "name": "posterior",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "fit": {
            "name": "fit",
            "location": 32,
            "return": [
                "str",
                "int",
                "bytes",
                "float"
            ],
            "arguments": {
                "posterior": [
                    "Optional[int]",
                    "int",
                    "Sequence[int]",
                    "numpy.ndarray"
                ]
            }
        },
        "test_fit_array_draw_contents": {
            "name": "test_fit_array_draw_contents",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "fit": []
            }
        }
    },
    "pystan-main/tests/test_fit_basic_matrix.py": {
        "posterior": {
            "name": "posterior",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "fit": {
            "name": "fit",
            "location": 39,
            "return": [
                "str",
                "int",
                "bytes",
                "float"
            ],
            "arguments": {
                "posterior": [
                    "Optional[int]",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "test_fit_matrix_draw_order": {
            "name": "test_fit_matrix_draw_order",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "fit": [
                    "bool",
                    "List[str]",
                    "None",
                    "Optional[Environment]",
                    "int",
                    "Optional[List[str]]",
                    "Optional[Game]"
                ]
            }
        },
        "test_fit_matrix_draw_contents": {
            "name": "test_fit_matrix_draw_contents",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "fit": [
                    "int"
                ]
            }
        }
    },
    "pystan-main/tests/test_fit_basic_scalar.py": {
        "posterior": {
            "name": "posterior",
            "location": 13,
            "return": [
                "IO",
                "str",
                "bytes",
                "float",
                "Optional[int]",
                "bool"
            ],
            "arguments": {}
        },
        "fit": {
            "name": "fit",
            "location": 18,
            "return": [
                "str",
                "int",
                "bytes",
                "float"
            ],
            "arguments": {
                "posterior": [
                    "Optional[int]",
                    "int",
                    "Sequence[int]",
                    "numpy.ndarray"
                ]
            }
        },
        "test_fit_scalar_draw_order": {
            "name": "test_fit_scalar_draw_order",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "fit": [
                    "bool",
                    "Iterable[T]",
                    "None",
                    "int",
                    "Optional[Environment]"
                ]
            }
        },
        "test_fit_scalar_param": {
            "name": "test_fit_scalar_param",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "fit": [
                    "int",
                    "BaseException"
                ]
            }
        },
        "test_fit_mapping": {
            "name": "test_fit_mapping",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "fit": [
                    "Dict"
                ]
            }
        }
    },
    "pystan-main/tests/test_fit_basic_vector.py": {
        "posterior": {
            "name": "posterior",
            "location": 24,
            "return": [
                "IO",
                "str",
                "bytes",
                "float",
                "Optional[int]",
                "bool"
            ],
            "arguments": {}
        },
        "fit": {
            "name": "fit",
            "location": 29,
            "return": [
                "str",
                "int",
                "bytes",
                "float"
            ],
            "arguments": {
                "posterior": [
                    "Optional[int]",
                    "int",
                    "Sequence[int]",
                    "numpy.ndarray"
                ]
            }
        },
        "test_fit_vector_draw_order": {
            "name": "test_fit_vector_draw_order",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "fit": [
                    "bool",
                    "Iterable[T]",
                    "None",
                    "int",
                    "Optional[Environment]"
                ]
            }
        },
        "test_fit_vector_draw_contents": {
            "name": "test_fit_vector_draw_contents",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "fit": [
                    "str",
                    "int",
                    "Optional[Game]"
                ]
            }
        }
    },
    "pystan-main/tests/test_fit_cache.py": {
        "cache_path": {
            "name": "cache_path",
            "location": 13,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "file_usage": {
            "name": "file_usage",
            "location": 17,
            "return": [
                "int"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "test_fit_cache": {
            "name": "test_fit_cache",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fit_cache_uncacheable": {
            "name": "test_fit_cache_uncacheable",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pystan-main/tests/test_fit_shape.py": {
        "get_posterior": {
            "name": "get_posterior",
            "location": 68,
            "return": [
                "Optional[stan.model.Model]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict[str,Any]",
                    "bytes",
                    "Dict",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "Optional[MutableMapping[Any,Any]]",
                    "None",
                    "Dict[str,Callable[[str],Any]]",
                    "MutableMapping",
                    "Dict[str,Callable[str,Any]]"
                ]
            }
        },
        "get_fit": {
            "name": "get_fit",
            "location": 72,
            "return": [
                "str",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "data": [
                    "List[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "get_data": {
            "name": "get_data",
            "location": 77,
            "return": [
                "Dict[(Any, int)]"
            ],
            "arguments": {
                "zero_dims": [
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "bool",
                    "Callable",
                    "Optional"
                ]
            }
        },
        "test_fit_empty_array_shape": {
            "name": "test_fit_empty_array_shape",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "zero_dims": [
                    "str"
                ]
            }
        }
    },
    "pystan-main/tests/test_grad_log_prob.py": {
        "gaussian_gradient": {
            "name": "gaussian_gradient",
            "location": 22,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "bytes"
                ],
                "mean": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "bytes"
                ],
                "var": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "bytes"
                ]
            }
        },
        "posterior": {
            "name": "posterior",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_grad_log_prob": {
            "name": "test_grad_log_prob",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "posterior": [
                    "Optional[bool]",
                    "bool"
                ]
            }
        }
    },
    "pystan-main/tests/test_httpstan_health.py": {},
    "pystan-main/tests/test_linear_regression.py": {
        "posterior": {
            "name": "posterior",
            "location": 34,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "test_linear_regression": {
            "name": "test_linear_regression",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "posterior": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "pystan-main/tests/test_logger_messages.py": {
        "posterior": {
            "name": "posterior",
            "location": 13,
            "return": [
                "IO",
                "str",
                "bytes",
                "float",
                "Optional[int]",
                "bool"
            ],
            "arguments": {}
        },
        "test_logger_messages_present": {
            "name": "test_logger_messages_present",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "posterior": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "pystan-main/tests/test_log_prob.py": {
        "posterior": {
            "name": "posterior",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_log_prob": {
            "name": "test_log_prob",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "posterior": [
                    "int"
                ]
            }
        },
        "test_log_prob_restricted": {
            "name": "test_log_prob_restricted",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "posterior": [
                    "int",
                    "List[Tuple[int, bytes]]"
                ]
            }
        }
    },
    "pystan-main/tests/test_matrix_params.py": {
        "test_vector_params": {
            "name": "test_vector_params",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_matrix_params_build": {
            "name": "test_matrix_params_build",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_matrix_params_sample": {
            "name": "test_matrix_params_sample",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pystan-main/tests/test_model_build_data.py": {
        "posterior": {
            "name": "posterior",
            "location": 27,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "test_data_unmodified": {
            "name": "test_data_unmodified",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "posterior": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "pystan-main/tests/test_nan_inf.py": {
        "test_nan_inf": {
            "name": "test_nan_inf",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pystan-main/tests/test_normal.py": {
        "test_normal_build": {
            "name": "test_normal_build",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_normal_sample": {
            "name": "test_normal_sample",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_normal_sample_chains": {
            "name": "test_normal_sample_chains",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_normal_sample_args": {
            "name": "test_normal_sample_args",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pystan-main/tests/test_numpy_data.py": {
        "test_unsupported_type": {
            "name": "test_unsupported_type",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_numpy_integer_types": {
            "name": "test_numpy_integer_types",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pystan-main/tests/test_pickle.py": {
        "normal_posterior": {
            "name": "normal_posterior",
            "location": 13,
            "return": [
                "IO",
                "str",
                "bytes",
                "float",
                "Optional[int]",
                "bool"
            ],
            "arguments": {}
        },
        "test_pickle": {
            "name": "test_pickle",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "normal_posterior": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "pystan-main/tests/test_plugins.py": {
        "mock_iter_entry_points": {
            "name": "mock_iter_entry_points",
            "location": 23,
            "return": [
                "listiterator[Type[MockEntryPoint]]"
            ],
            "arguments": {
                "group": [
                    "str",
                    "int"
                ]
            }
        },
        "normal_posterior": {
            "name": "normal_posterior",
            "location": 28,
            "return": [
                "IO",
                "str",
                "bytes",
                "float",
                "Optional[int]",
                "bool"
            ],
            "arguments": {}
        },
        "test_get_plugins": {
            "name": "test_get_plugins",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_dummy_plugin": {
            "name": "test_dummy_plugin",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "capsys": [
                    "str",
                    "float"
                ],
                "normal_posterior": [
                    "str",
                    "float"
                ]
            }
        },
        "test_two_plugins": {
            "name": "test_two_plugins",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "capsys": [
                    "str",
                    "float"
                ],
                "normal_posterior": [
                    "str",
                    "float"
                ]
            }
        },
        "DummyPlugin.on_post_sample": {
            "name": "on_post_sample",
            "location": 11,
            "return": [
                "Dict",
                "Optional[Type]",
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "fit": [
                    "Dict",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "MockEntryPoint.load": {
            "name": "load",
            "location": 19,
            "return": [
                "Type[DummyPlugin]"
            ],
            "arguments": {}
        },
        "OtherDummyPlugin.on_post_sample": {
            "name": "on_post_sample",
            "location": 53,
            "return": [
                "Dict",
                "Optional[Type]",
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "fit": [
                    "Dict",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "OtherMockEntryPoint.load": {
            "name": "load",
            "location": 61,
            "return": [
                "Type[OtherDummyPlugin]"
            ],
            "arguments": {}
        },
        "test_two_plugins.mock_iter_entry_points": {
            "name": "mock_iter_entry_points",
            "location": 68,
            "return": [
                "listiterator[Type[MockEntryPoint]]"
            ],
            "arguments": {
                "group": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "pystan-main/tests/test_repr.py": {
        "posterior": {
            "name": "posterior",
            "location": 34,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "test_repr_fit": {
            "name": "test_repr_fit",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "posterior": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "pystan-main/tests/test_sample_exceptions.py": {
        "test_initialization_failed": {
            "name": "test_initialization_failed",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pystan-main/tests/test_stanc_warnings.py": {
        "test_stanc_no_warning": {
            "name": "test_stanc_no_warning",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stanc_unused_warning": {
            "name": "test_stanc_unused_warning",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stanc_assignment_warning": {
            "name": "test_stanc_assignment_warning",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pystan-main/tests/test_transformed_data_rng.py": {
        "test_generated_quantities_seed": {
            "name": "test_generated_quantities_seed",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pystan-main/tests/test_unconstrain_pars.py": {
        "posterior": {
            "name": "posterior",
            "location": 28,
            "return": [
                "IO",
                "str",
                "bytes",
                "float",
                "Optional[int]",
                "bool"
            ],
            "arguments": {}
        },
        "test_log_prob": {
            "name": "test_log_prob",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "posterior": [
                    "str",
                    "float"
                ],
                "x": [
                    "str",
                    "int",
                    "Union[List,Dict]",
                    "List",
                    "Dict"
                ],
                "y": [
                    "str",
                    "int",
                    "Union[List,Dict]",
                    "List",
                    "Dict"
                ]
            }
        }
    },
    "pystan-main/tests/test_user_inits.py": {
        "test_program": {
            "name": "test_program",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_user_init_same_initial_values": {
            "name": "test_user_init_same_initial_values",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_user_init_different_initial_values": {
            "name": "test_user_init_different_initial_values",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
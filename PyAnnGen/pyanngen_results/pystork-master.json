{
    "pystork-master/setup.py": {},
    "pystork-master/pystork/activations.py": {
        "AbstractActivation.get_value": {
            "name": "get_value",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "numpy.array",
                    "Sequence",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "AbstractActivation.get_derivative": {
            "name": "get_derivative",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "numpy.array",
                    "Union[bool,int]",
                    "int"
                ],
                "value_at_x": [
                    "None",
                    "numpy.array",
                    "bool",
                    "Union[bool,int]",
                    "int"
                ]
            }
        },
        "AbstractActivation.get_approximate_derivative": {
            "name": "get_approximate_derivative",
            "location": 24,
            "return": [
                "dict",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "List",
                    "List[float]",
                    "Union[pandas.DataFrame,numpy.ndarray]",
                    "numpy.ndarray"
                ],
                "eps": [
                    "int",
                    "list",
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "numpy.ndarray",
                    "List[float]"
                ]
            }
        },
        "Sigmoid.get_value": {
            "name": "get_value",
            "location": 34,
            "return": [
                "int",
                "str",
                "bytes",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "numpy.array",
                    "numpy.ndarray"
                ]
            }
        },
        "Sigmoid.get_derivative": {
            "name": "get_derivative",
            "location": 38,
            "return": [
                "str",
                "float",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "int",
                    "Union[int,float]"
                ],
                "value_at_x": [
                    "numpy.array",
                    "None",
                    "Callable",
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "Relu.get_value": {
            "name": "get_value",
            "location": 50,
            "return": [
                "str",
                "bytes",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "numpy.array",
                    "numpy.ndarray"
                ]
            }
        },
        "Relu.get_derivative": {
            "name": "get_derivative",
            "location": 54,
            "return": [
                "bool",
                "str",
                "float",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "numpy.array",
                    "Union[bool,int]",
                    "int"
                ],
                "value_at_x": [
                    "None",
                    "numpy.array",
                    "bool",
                    "Union[bool,int]",
                    "int"
                ]
            }
        },
        "Relu.get_approximate_derivative": {
            "name": "get_approximate_derivative",
            "location": 62,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "numpy.ndarray"
                ],
                "eps": [
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "Tanh.get_value": {
            "name": "get_value",
            "location": 69,
            "return": [
                "str",
                "bytes",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "numpy.array",
                    "numpy.ndarray"
                ]
            }
        },
        "Tanh.get_derivative": {
            "name": "get_derivative",
            "location": 73,
            "return": [
                "int",
                "str",
                "Dict[Tuple[str,str],Tuple[float,float]]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "int",
                    "Union[int,float]"
                ],
                "value_at_x": [
                    "numpy.array",
                    "None",
                    "Callable",
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "pystork-master/pystork/helpers.py": {
        "shuffle_data": {
            "name": "shuffle_data",
            "location": 5,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "training_inputs": [
                    "List[numpy.ndarray]",
                    "List[str]",
                    "int",
                    "numpy.ndarray"
                ],
                "training_labels": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "pystork-master/pystork/initializers.py": {
        "AbstractInitializer.get_values": {
            "name": "get_values",
            "location": 8,
            "return": [
                "Union[numpy.array,float]",
                "None"
            ],
            "arguments": {
                "self": [],
                "x_dim": [
                    "bool",
                    "numpy.array",
                    "Sequence",
                    "str",
                    "Dict[str,Any]"
                ],
                "y_dim": [
                    "bool",
                    "numpy.array",
                    "Sequence",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "RandomInitializer.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reduction": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "RandomInitializer.get_values": {
            "name": "get_values",
            "location": 24,
            "return": [
                "Dict[str, int]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "x_dim": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "Union[numpy.ndarray,pandas.DataFrame]"
                ],
                "y_dim": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "Union[numpy.ndarray,pandas.DataFrame]"
                ]
            }
        },
        "ZerosInitializer.get_values": {
            "name": "get_values",
            "location": 30,
            "return": [
                "str",
                "Tuple[int, int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "x_dim": [
                    "int",
                    "numpy.array",
                    "numpy.ndarray"
                ],
                "y_dim": [
                    "int",
                    "numpy.array",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "pystork-master/pystork/layer.py": {
        "Layer.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "units_number": [
                    "int",
                    "float",
                    "bool"
                ],
                "inputs_number": [
                    "int",
                    "float",
                    "bool"
                ],
                "activation_function": [
                    "Callable",
                    "int",
                    "str",
                    "numpy.array",
                    "float",
                    "bool",
                    "None",
                    "Optional[float]"
                ]
            }
        },
        "Layer.compute_preactivation": {
            "name": "compute_preactivation",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "Callable[numpy.ndarray,numpy.ndarray]",
                    "Iterable[T]",
                    "numpy.array",
                    "int",
                    "Callable[[numpy.ndarray],numpy.ndarray]",
                    "Callable[[numpy.ndarray],float]"
                ],
                "save": [
                    "bool",
                    "float",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "Layer.execute_forward_propagation": {
            "name": "execute_forward_propagation",
            "location": 47,
            "return": [
                "str",
                "int",
                "List[tuple[Union[str,str]]]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "Callable[numpy.ndarray,numpy.ndarray]",
                    "Iterable[T]",
                    "Callable[[numpy.ndarray],numpy.ndarray]",
                    "Callable[[numpy.ndarray],float]",
                    "numpy.array",
                    "numpy.ndarray"
                ],
                "save": [
                    "bool",
                    "float",
                    "int",
                    "numpy.ndarray",
                    "Union[bytes,bytearray,memoryview]"
                ]
            }
        },
        "Layer.execute_last_unit_backward_propagation": {
            "name": "execute_last_unit_backward_propagation",
            "location": 65,
            "return": [
                "str",
                "int",
                "Dict[str,Any]",
                "Dict[str,numpy.ndarray]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "current_layer_d_preactivation": [
                    "str",
                    "int"
                ]
            }
        },
        "Layer.execute_backward_propagation": {
            "name": "execute_backward_propagation",
            "location": 79,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "next_layer_d_preactivation": [
                    "Callable",
                    "List[cirq.Qid]"
                ],
                "next_layer_weights": [
                    "Callable",
                    "List[cirq.Qid]"
                ]
            }
        },
        "Layer.get_parameters_derivatives": {
            "name": "get_parameters_derivatives",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.initialize": {
            "name": "initialize",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initializer": [
                    "str",
                    "bool"
                ]
            }
        },
        "Layer.set_parameters": {
            "name": "set_parameters",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_W": [
                    "int",
                    "float"
                ],
                "new_b": [
                    "int",
                    "float"
                ]
            }
        },
        "Layer.check_derivatives_dimensions": {
            "name": "check_derivatives_dimensions",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pystork-master/pystork/layer_cache.py": {
        "LayerCache.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "units_number": [
                    "int",
                    "float",
                    "bool"
                ],
                "inputs_number": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "pystork-master/pystork/model.py": {
        "Model.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layers": [
                    "List[str]",
                    "List[Tuple[int, int]]",
                    "Tuple[int, int]",
                    "bytes",
                    "Iterable",
                    "list"
                ],
                "cost_function": [
                    "float",
                    "bool",
                    "int"
                ],
                "initializer": [
                    "float",
                    "bool",
                    "int"
                ]
            }
        },
        "Model.normalize_inputs": {
            "name": "normalize_inputs",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "training_inputs": [
                    "bytes",
                    "str",
                    "bytearray",
                    "Tuple[int, int]"
                ]
            }
        },
        "Model._check_dimensions_compatibility": {
            "name": "_check_dimensions_compatibility",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.initialize_layers": {
            "name": "initialize_layers",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.execute_forward_propagation": {
            "name": "execute_forward_propagation",
            "location": 67,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "training_inputs": [
                    "str",
                    "int",
                    "List[str]",
                    "numpy.array"
                ],
                "training_labels": [
                    "List[list[int]]",
                    "int",
                    "List[List[int]]",
                    "str",
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "Model.execute_backward_propagation": {
            "name": "execute_backward_propagation",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "training_labels": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Model.predict": {
            "name": "predict",
            "location": 108,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "numpy.ndarray",
                    "numpy.array"
                ]
            }
        }
    },
    "pystork-master/pystork/__init__.py": {},
    "pystork-master/pystork/costs/abstract_cost.py": {
        "AbstractCostFunction.compute": {
            "name": "compute",
            "location": 11,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": [],
                "y_pred": [
                    "bool",
                    "Mapping",
                    "numpy.array",
                    "int"
                ],
                "y_labels": [
                    "bool",
                    "Mapping",
                    "numpy.array",
                    "int"
                ]
            }
        },
        "AbstractCostFunction.compute_preactivation_derivative": {
            "name": "compute_preactivation_derivative",
            "location": 19,
            "return": [
                "numpy.array",
                "None"
            ],
            "arguments": {
                "self": [],
                "y_pred": [
                    "bool",
                    "Mapping",
                    "numpy.array",
                    "int"
                ],
                "y_labels": [
                    "bool",
                    "Mapping",
                    "numpy.array",
                    "int"
                ]
            }
        }
    },
    "pystork-master/pystork/costs/binary_classfication.py": {
        "BinaryClassificationCost.compute": {
            "name": "compute",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "y_pred": [
                    "bool",
                    "numpy.array",
                    "numpy.ndarray"
                ],
                "y_labels": [
                    "int",
                    "numpy.array",
                    "Dict[int,str]",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "BinaryClassificationCost.compute_preactivation_derivative": {
            "name": "compute_preactivation_derivative",
            "location": 30,
            "return": [
                "int",
                "str",
                "Dict",
                "Dict[str,int]",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "y_pred": [
                    "int",
                    "numpy.array",
                    "str",
                    "Tuple[str]"
                ],
                "y_labels": [
                    "int",
                    "numpy.array",
                    "str",
                    "Tuple[str]"
                ]
            }
        }
    },
    "pystork-master/pystork/costs/__init__.py": {},
    "pystork-master/pystork/data_generators/threshold_data.py": {
        "generate_data": {
            "name": "generate_data",
            "location": 9,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "samples_number": [
                    "float",
                    "int"
                ],
                "threshold": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "pystork-master/pystork/data_generators/__init__.py": {},
    "pystork-master/pystork/optimizers/abstract_optimizer.py": {
        "AbstractOptimizer.optimize_cost": {
            "name": "optimize_cost",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "numpy.array",
                    "pystork.model.Model",
                    "int"
                ],
                "training_inputs": [
                    "bool",
                    "numpy.array",
                    "pystork.model.Model",
                    "int"
                ],
                "training_labels": [
                    "bool",
                    "numpy.array",
                    "pystork.model.Model",
                    "int"
                ]
            }
        },
        "AbstractOptimizer.check_dimensions": {
            "name": "check_dimensions",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "int",
                    "pystork.model.Model",
                    "numpy.array",
                    "models.Model"
                ],
                "training_inputs": [
                    "Tuple[Union[numpy.ndarray,numpy.ndarray]]",
                    "numpy.array",
                    "Tuple[numpy.ndarray,numpy.ndarray]",
                    "object"
                ],
                "training_labels": [
                    "List[T]",
                    "numpy.array",
                    "pystork.model.Model"
                ]
            }
        }
    },
    "pystork-master/pystork/optimizers/gradient_descent.py": {
        "MiniBatchGradientDescent.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterations_number": [
                    "int",
                    "numpy.ndarray",
                    "bool",
                    "List[int]"
                ],
                "mini_batch_size": [
                    "int",
                    "Union[Tuple[int,int],int]",
                    "str",
                    "numpy.ndarray",
                    "Tuple[int,int]"
                ],
                "learning_rate": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "bool",
                    "List[int]"
                ],
                "print_cost": [
                    "bool",
                    "int",
                    "numpy.ndarray",
                    "List[int]"
                ]
            }
        },
        "MiniBatchGradientDescent.optimize_cost": {
            "name": "optimize_cost",
            "location": 29,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "numpy.array",
                    "models.Model",
                    "pystork.model.Model",
                    "TestModule.Model",
                    "bool",
                    "int"
                ],
                "training_inputs": [
                    "bool",
                    "Set[int]",
                    "str",
                    "model.batcher.QABatch",
                    "TestModule.Model",
                    "model.predictor.PredictorModel",
                    "int",
                    "allennlp.models.model.Model"
                ],
                "training_labels": [
                    "bool",
                    "model.batcher.QABatch"
                ]
            }
        },
        "MiniBatchGradientDescent._get_minibatches": {
            "name": "_get_minibatches",
            "location": 60,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "training_inputs": [
                    "Tuple[Union[int,int]]",
                    "float",
                    "int",
                    "Tuple[int,int]",
                    "numpy.random.RandomState"
                ],
                "training_labels": [
                    "str",
                    "numpy.array"
                ]
            }
        },
        "MiniBatchGradientDescent._execute_one_iteration": {
            "name": "_execute_one_iteration",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "pystork.model.Model",
                    "Any",
                    "None",
                    "Optional[Union[int,Any]]",
                    "str",
                    "Union[int,str]",
                    "Optional[bool]",
                    "numpy.ndarray",
                    "Optional[int]",
                    "numpy.array"
                ],
                "training_inputs": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "training_labels": [
                    "str",
                    "bool",
                    "float",
                    "Dict",
                    "Dict[tuple[Union[str,str]],tuple[Union[float,float]]]",
                    "Dict[Tuple[str,str],Tuple[float,float]]",
                    "int"
                ]
            }
        },
        "GradientDescent.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterations_number": [
                    "int",
                    "float",
                    "bool"
                ],
                "learning_rate": [
                    "float",
                    "int",
                    "bool"
                ],
                "print_cost": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "GradientDescent.optimize_cost": {
            "name": "optimize_cost",
            "location": 120,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Type",
                    "int",
                    "pystork.model.Model",
                    "numpy.array",
                    "Type[T]",
                    "text_recognizer.models.base.Model"
                ],
                "training_inputs": [
                    "bool",
                    "float",
                    "numpy.array",
                    "numpy.ndarray"
                ],
                "training_labels": [
                    "Type",
                    "int",
                    "pystork.model.Model",
                    "numpy.array",
                    "Type[T]",
                    "text_recognizer.models.base.Model"
                ]
            }
        },
        "Adam.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterations_number": [
                    "int",
                    "numpy.ndarray",
                    "bool",
                    "List[int]"
                ],
                "mini_batch_size": [
                    "int",
                    "Union[Tuple[int,int],int]",
                    "str",
                    "numpy.ndarray",
                    "Tuple[int,int]"
                ],
                "learning_rate": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "bool",
                    "List[int]"
                ],
                "gradient_moment": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "bool",
                    "List[int]"
                ],
                "square_gradient_moment": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "bool",
                    "List[int]"
                ],
                "print_cost": [
                    "bool",
                    "int",
                    "numpy.ndarray",
                    "List[int]"
                ]
            }
        },
        "Adam._get_minibatches": {
            "name": "_get_minibatches",
            "location": 149,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "training_inputs": [
                    "Tuple[Union[int,int]]",
                    "float",
                    "int",
                    "Tuple[int,int]",
                    "numpy.random.RandomState"
                ],
                "training_labels": [
                    "str",
                    "numpy.array"
                ]
            }
        },
        "Adam.optimize_cost": {
            "name": "optimize_cost",
            "location": 182,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "numpy.array",
                    "models.Model",
                    "pystork.model.Model",
                    "TestModule.Model",
                    "bool",
                    "int"
                ],
                "training_inputs": [
                    "bool",
                    "Set[int]",
                    "str",
                    "model.batcher.QABatch",
                    "TestModule.Model",
                    "model.predictor.PredictorModel",
                    "int",
                    "allennlp.models.model.Model"
                ],
                "training_labels": [
                    "bool",
                    "model.batcher.QABatch"
                ]
            }
        },
        "Adam._update_layer_parameters": {
            "name": "_update_layer_parameters",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layer": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, float]"
                ],
                "iteration_number": [
                    "Iterable[Any]",
                    "bool",
                    "int",
                    "Dict[str,bool]"
                ]
            }
        },
        "Adam._execute_one_iteration": {
            "name": "_execute_one_iteration",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "pystork.model.Model",
                    "Any",
                    "None",
                    "Optional[Union[int,Any]]",
                    "str",
                    "Union[int,str]",
                    "Optional[bool]",
                    "numpy.ndarray",
                    "Optional[int]",
                    "numpy.array"
                ],
                "training_inputs": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "training_labels": [
                    "str",
                    "bool",
                    "float",
                    "Dict",
                    "Dict[tuple[Union[str,str]],tuple[Union[float,float]]]",
                    "Dict[Tuple[str,str],Tuple[float,float]]",
                    "int"
                ]
            }
        }
    },
    "pystork-master/pystork/optimizers/__init__.py": {},
    "pystork-master/tests/conftest.py": {
        "layer": {
            "name": "layer",
            "location": 21,
            "return": [
                "Layer",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "forward_propagation_model": {
            "name": "forward_propagation_model",
            "location": 31,
            "return": [
                "Model",
                "allennlp.models.model.Model",
                "float"
            ],
            "arguments": {}
        },
        "forward_training_data": {
            "name": "forward_training_data",
            "location": 61,
            "return": [
                "Tuple",
                "Dict",
                "Iterable[str]",
                "bool"
            ],
            "arguments": {}
        },
        "backward_propagation_model": {
            "name": "backward_propagation_model",
            "location": 75,
            "return": [
                "Model",
                "allennlp.models.model.Model",
                "float"
            ],
            "arguments": {}
        },
        "backward_training_data": {
            "name": "backward_training_data",
            "location": 104,
            "return": [
                "Tuple",
                "Dict",
                "Iterable[str]",
                "bool"
            ],
            "arguments": {}
        },
        "mock_permutations": {
            "name": "mock_permutations",
            "location": 118,
            "return": [
                "float",
                "bool",
                "str",
                "int",
                "model.IpAddress",
                "bytes"
            ],
            "arguments": {
                "mocker": [
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "pystork-master/tests/test_activations.py": {
        "test_sigmoid_value": {
            "name": "test_sigmoid_value",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sigmoid_derivative": {
            "name": "test_sigmoid_derivative",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sigmoid_derivative_when_value_present": {
            "name": "test_sigmoid_derivative_when_value_present",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tanh_value": {
            "name": "test_tanh_value",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tanh_derivative": {
            "name": "test_tanh_derivative",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tanh_derivative_with_value": {
            "name": "test_tanh_derivative_with_value",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_relu_value": {
            "name": "test_relu_value",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_relu_derivative": {
            "name": "test_relu_derivative",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_relu_approximative_derivative": {
            "name": "test_relu_approximative_derivative",
            "location": 112,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "pystork-master/tests/test_costs.py": {
        "test_binary_classification_cost": {
            "name": "test_binary_classification_cost",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_binary_classification_derivative": {
            "name": "test_binary_classification_derivative",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pystork-master/tests/test_data_generators.py": {
        "test_threshold_data": {
            "name": "test_threshold_data",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pystork-master/tests/test_helpers.py": {
        "test_data_shuffle": {
            "name": "test_data_shuffle",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_permutations": []
            }
        }
    },
    "pystork-master/tests/test_initializers.py": {
        "test_zero_initializer": {
            "name": "test_zero_initializer",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_random_initializer": {
            "name": "test_random_initializer",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pystork-master/tests/test_layer.py": {
        "test_get_preactivation_with_save": {
            "name": "test_get_preactivation_with_save",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_preactivation_without_save": {
            "name": "test_get_preactivation_without_save",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_execute_forward_propagation_with_save": {
            "name": "test_execute_forward_propagation_with_save",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "layer": []
            }
        },
        "test_execute_forward_propagation_without_save": {
            "name": "test_execute_forward_propagation_without_save",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "layer": []
            }
        },
        "test_execute_last_unit_backward_propagation": {
            "name": "test_execute_last_unit_backward_propagation",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "layer": [
                    "Dict[str,Any]"
                ]
            }
        },
        "test_execute_hidden_backward_propagation": {
            "name": "test_execute_hidden_backward_propagation",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "layer": [
                    "str"
                ]
            }
        }
    },
    "pystork-master/tests/test_model.py": {
        "test_forward_propagation": {
            "name": "test_forward_propagation",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "forward_propagation_model": [
                    "str"
                ],
                "forward_training_data": []
            }
        },
        "test_backward_propagation": {
            "name": "test_backward_propagation",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "backward_propagation_model": [
                    "bool",
                    "str"
                ],
                "backward_training_data": []
            }
        }
    },
    "pystork-master/tests/__init__.py": {},
    "pystork-master/tests/optimizers/test_gradient_descent.py": {
        "test_get_minibatches": {
            "name": "test_get_minibatches",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gradient_descent": {
            "name": "test_gradient_descent",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mini_batch_gradient_descent": {
            "name": "test_mini_batch_gradient_descent",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gradient_descent_adam": {
            "name": "test_gradient_descent_adam",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mini_batch_gradient_descent_adam": {
            "name": "test_mini_batch_gradient_descent_adam",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pystork-master/tests/optimizers/__init__.py": {}
}
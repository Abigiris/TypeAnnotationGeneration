{
    "python-acquia-cloud-2-2.x/setup.py": {},
    "python-acquia-cloud-2-2.x/acapi2/acquia.py": {
        "Acquia.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_key": [
                    "str",
                    "None",
                    "int",
                    "float",
                    "bytes",
                    "Union[str, bytes]"
                ],
                "api_secret": [
                    "int",
                    "str",
                    "None",
                    "Union[str, bytes]",
                    "bytes"
                ],
                "endpoint": [
                    "bytes",
                    "None",
                    "int",
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "Acquia.agreements": {
            "name": "agreements",
            "location": 38,
            "return": [
                "AgreementList",
                "List[str]",
                "List[int]",
                "List[Dict]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Acquia.agreement": {
            "name": "agreement",
            "location": 41,
            "return": [
                "Agreement",
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Acquia.applications": {
            "name": "applications",
            "location": 46,
            "return": [
                "ApplicationList",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "filters": [
                    "bool",
                    "None",
                    "List[str]",
                    "Dict[str, Iterable[Any]]",
                    "list[str]",
                    "dict",
                    "dict[str, typing.Iterable[typing.Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "dict[, ]"
                ],
                "sort": [
                    "bool",
                    "None",
                    "List[str]",
                    "Dict[str, Iterable[Any]]",
                    "list[str]",
                    "dict",
                    "dict[str, typing.Iterable[typing.Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "dict[, ]"
                ],
                "limit": [
                    "bool",
                    "None",
                    "List[str]",
                    "Dict[str, Iterable[Any]]",
                    "list[str]",
                    "dict",
                    "dict[str, typing.Iterable[typing.Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "dict[, ]"
                ],
                "offset": [
                    "bool",
                    "None",
                    "List[str]",
                    "Dict[str, Iterable[Any]]",
                    "list[str]",
                    "dict",
                    "dict[str, typing.Iterable[typing.Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "dict[, ]"
                ]
            }
        },
        "Acquia.application": {
            "name": "application",
            "location": 68,
            "return": [
                "Application",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Acquia.notification": {
            "name": "notification",
            "location": 74,
            "return": [
                "Notification",
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Acquia.environment": {
            "name": "environment",
            "location": 79,
            "return": [
                "Environment",
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "env_id": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Acquia.api_endpoint": {
            "name": "api_endpoint",
            "location": 89,
            "return": [
                "",
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Acquia.api_key": {
            "name": "api_key",
            "location": 97,
            "return": [
                "",
                "str",
                "int",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "api_key": [
                    "str",
                    "Set[str]",
                    "Callable[[T], Any]"
                ]
            }
        },
        "Acquia.api_secret": {
            "name": "api_secret",
            "location": 106,
            "return": [
                "",
                "str",
                "list[str]",
                "dict[typing.Any, tuple[typing.Union[typing.Any,typing.Any,typing.Any]]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "api_secret": [
                    "int"
                ]
            }
        },
        "Acquia.health": {
            "name": "health",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Acquia.get_uri": {
            "name": "get_uri",
            "location": 113,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Acquia.permissions": {
            "name": "permissions",
            "location": 116,
            "return": [
                "PermissionsList",
                "str",
                "dict",
                "Mapping[str, str]",
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Acquia.subscription": {
            "name": "subscription",
            "location": 121,
            "return": [
                "Subscription",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "Acquia.subscriptions": {
            "name": "subscriptions",
            "location": 127,
            "return": [
                "SubscriptionList",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "filters": [
                    "dict",
                    "int",
                    "None",
                    "dict[, ]",
                    "List[\"DictDataLoader\"]",
                    "list[\"DictDataLoader\"]"
                ]
            }
        },
        "Acquia.__find_credentials": {
            "name": "__find_credentials",
            "location": 134,
            "return": [
                "tuple[typing.Union[str,list[str]]]",
                "str",
                "bytes"
            ],
            "arguments": {}
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/exceptions.py": {
        "AcquiaCloudNotificationException.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int"
                ],
                "task": [
                    "str",
                    "int",
                    "Sequence[Dict[str, str]]",
                    "typing.Sequence[dict[str, str]]",
                    "Optional[int]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Dict], None]",
                    "typing.Callable[dict[, ], None]"
                ]
            }
        },
        "AcquiaCloudNotificationException.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/http_request.py": {
        "HttpRequest.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpRequest._get_session": {
            "name": "_get_session",
            "location": 17,
            "return": [
                "str",
                "Dict[str, str]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpRequest.do": {
            "name": "do",
            "location": 26,
            "return": [
                "str",
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/version.py": {},
    "python-acquia-cloud-2-2.x/acapi2/__init__.py": {},
    "python-acquia-cloud-2-2.x/acapi2/resources/acquiadata.py": {
        "AcquiaData.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "str"
                ],
                "api_key": [
                    "str"
                ],
                "api_secret": [
                    "str"
                ],
                "data": [
                    "dict"
                ]
            }
        },
        "AcquiaData.data": {
            "name": "data",
            "location": 40,
            "return": [
                "",
                "str",
                "dict[, ]",
                "list[dict[str, typing.Any]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "bytes",
                    "list",
                    "str"
                ]
            }
        },
        "AcquiaData.generate_url_query": {
            "name": "generate_url_query",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "uri": [
                    "str"
                ],
                "params": [
                    "dict"
                ]
            }
        },
        "AcquiaData.request": {
            "name": "request",
            "location": 53,
            "return": [
                "dict",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "Optional[str]",
                    "None",
                    "dict",
                    "str",
                    "dict[, ]"
                ],
                "method": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "dict",
                    "Tuple[str]"
                ],
                "data": [
                    "dict",
                    "None",
                    "bytes",
                    "str",
                    "dict[, ]",
                    "Dict[str, Dict[str, str]]",
                    "dict[str, dict[str, str]]"
                ],
                "params": [
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/resources/acquialist.py": {
        "AcquiaList.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_uri": [
                    "str"
                ],
                "api_key": [
                    "str"
                ],
                "api_secret": [
                    "str"
                ]
            }
        },
        "AcquiaList.__delitem__": {
            "name": "__delitem__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "typing.Match",
                    "abc.doc.DocKeyType",
                    "Match"
                ]
            }
        },
        "AcquiaList.__setitem__": {
            "name": "__setitem__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "None",
                    "Optional[\"PNSqlCursor\"]",
                    "str",
                    "bool",
                    "Optional[\"PNBuffer\"]"
                ],
                "value": [
                    "None",
                    "Optional[\"PNSqlCursor\"]",
                    "str",
                    "bool",
                    "Optional[\"PNBuffer\"]"
                ]
            }
        },
        "AcquiaList.first": {
            "name": "first",
            "location": 34,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AcquiaList.generate_resource_uri": {
            "name": "generate_resource_uri",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str"
                ]
            }
        },
        "AcquiaList.last": {
            "name": "last",
            "location": 44,
            "return": [
                "str",
                "bytes",
                "dict",
                "Union[str, bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AcquiaList.search_pos": {
            "name": "search_pos",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ]
            }
        },
        "AcquiaList.sorted_keys": {
            "name": "sorted_keys",
            "location": 64,
            "return": [
                "",
                "dict[, ]",
                "str",
                "None",
                "set[str]",
                "bytes",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "bytes",
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "AcquiaList.base_uri": {
            "name": "base_uri",
            "location": 74,
            "return": [
                "",
                "int",
                "str",
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "base_uri": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/resources/acquiaresource.py": {
        "AcquiaResource.__getitem__": {
            "name": "__getitem__",
            "location": 10,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool",
                    "Iterator[str]",
                    "typing.Iterator"
                ]
            }
        },
        "AcquiaResource.data": {
            "name": "data",
            "location": 23,
            "return": [
                "",
                "str",
                "dict[, ]",
                "list[dict[str, typing.Any]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "bytes",
                    "list",
                    "str"
                ]
            }
        },
        "AcquiaResource.populate_data": {
            "name": "populate_data",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/resources/agreement.py": {
        "Agreement.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "str"
                ],
                "api_key": [
                    "str"
                ],
                "api_secret": [
                    "str"
                ]
            }
        },
        "Agreement.accept": {
            "name": "accept",
            "location": 19,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agreement.decline": {
            "name": "decline",
            "location": 30,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agreement.invitees": {
            "name": "invitees",
            "location": 41,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/resources/agreementlist.py": {
        "AgreementList.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "str"
                ],
                "api_key": [
                    "str"
                ],
                "api_secret": [
                    "str"
                ]
            }
        },
        "AgreementList.fetch": {
            "name": "fetch",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgreementList.base_uri": {
            "name": "base_uri",
            "location": 38,
            "return": [
                "",
                "int",
                "str",
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "base_uri": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/resources/application.py": {
        "Application.artifacts": {
            "name": "artifacts",
            "location": 16,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.create_database": {
            "name": "create_database",
            "location": 19,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Application.create_environment": {
            "name": "create_environment",
            "location": 31,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str"
                ],
                "env_name": [
                    "str"
                ],
                "databases": [
                    "list"
                ]
            }
        },
        "Application.environments": {
            "name": "environments",
            "location": 49,
            "return": [
                "acapi2.resources.environmentlist.EnvironmentList"
            ],
            "arguments": {
                "self": [],
                "filters": [
                    "dict"
                ],
                "sort": [
                    "str"
                ],
                "limit": [
                    "int"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "Application.environment": {
            "name": "environment",
            "location": 68,
            "return": [
                "acapi2.resources.environment.Environment"
            ],
            "arguments": {
                "self": [],
                "environment_id": [
                    "str"
                ]
            }
        },
        "Application.load": {
            "name": "load",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.notifications": {
            "name": "notifications",
            "location": 75,
            "return": [
                "acapi2.resources.notificationlist.NotificationList"
            ],
            "arguments": {
                "self": [],
                "filters": [
                    "dict"
                ],
                "sort": [
                    "str"
                ],
                "limit": [
                    "int"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "Application.permissions": {
            "name": "permissions",
            "location": 95,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.tasks": {
            "name": "tasks",
            "location": 106,
            "return": [
                "acapi2.resources.tasklist.TaskList"
            ],
            "arguments": {
                "self": [],
                "filters": [
                    "dict"
                ]
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/resources/applicationlist.py": {
        "ApplicationList.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "str"
                ],
                "api_key": [
                    "str"
                ],
                "api_secret": [
                    "str"
                ],
                "qry_params": [
                    "dict"
                ]
            }
        },
        "ApplicationList.fetch": {
            "name": "fetch",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApplicationList.base_uri": {
            "name": "base_uri",
            "location": 46,
            "return": [
                "",
                "int",
                "str",
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "base_uri": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/resources/environment.py": {
        "Environment.backups": {
            "name": "backups",
            "location": 12,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "db_name": [
                    "str"
                ]
            }
        },
        "Environment.backup_details": {
            "name": "backup_details",
            "location": 21,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "db_name": [
                    "str"
                ],
                "backup_id": [
                    "str"
                ]
            }
        },
        "Environment.backup_download": {
            "name": "backup_download",
            "location": 30,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "db_name": [
                    "str"
                ],
                "backup_id": [
                    "str"
                ]
            }
        },
        "Environment.code_switch": {
            "name": "code_switch",
            "location": 44,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "branch_tag": [
                    "str"
                ]
            }
        },
        "Environment.configure": {
            "name": "configure",
            "location": 56,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        },
        "Environment.create_backup": {
            "name": "create_backup",
            "location": 64,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "db_name": [
                    "str"
                ]
            }
        },
        "Environment.create_domain": {
            "name": "create_domain",
            "location": 73,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str"
                ]
            }
        },
        "Environment.create_log_forwarding_destinations": {
            "name": "create_log_forwarding_destinations",
            "location": 85,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str"
                ],
                "sources": [
                    "list"
                ],
                "consumer": [
                    "str"
                ],
                "credentials": [
                    "dict"
                ],
                "address": [
                    "str"
                ]
            }
        },
        "Environment.databases": {
            "name": "databases",
            "location": 114,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": []
            }
        },
        "Environment.delete_backup": {
            "name": "delete_backup",
            "location": 121,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "db_name": [
                    "str"
                ],
                "backup_id": [
                    "str"
                ]
            }
        },
        "Environment.delete_domain": {
            "name": "delete_domain",
            "location": 131,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str"
                ]
            }
        },
        "Environment.delete_log_forwarding_destinations": {
            "name": "delete_log_forwarding_destinations",
            "location": 142,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "destination_uuid": [
                    "str"
                ]
            }
        },
        "Environment.clear_varnish_domain": {
            "name": "clear_varnish_domain",
            "location": 156,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str"
                ]
            }
        },
        "Environment.clear_varnish_domains": {
            "name": "clear_varnish_domains",
            "location": 168,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "domains": [
                    "list"
                ]
            }
        },
        "Environment.destroy": {
            "name": "destroy",
            "location": 182,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Environment.deploy_code": {
            "name": "deploy_code",
            "location": 190,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "id_from": [
                    "str"
                ]
            }
        },
        "Environment.deploy_database": {
            "name": "deploy_database",
            "location": 202,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "id_from": [
                    "str"
                ],
                "db_name": [
                    "str"
                ]
            }
        },
        "Environment.deploy_files": {
            "name": "deploy_files",
            "location": 215,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "id_from": [
                    "str"
                ]
            }
        },
        "Environment.get_crons": {
            "name": "get_crons",
            "location": 227,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Environment.get_log_forwarding_destinations": {
            "name": "get_log_forwarding_destinations",
            "location": 236,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Environment.get_servers": {
            "name": "get_servers",
            "location": 245,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Environment.get_php_version": {
            "name": "get_php_version",
            "location": 254,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Environment.set_php_version": {
            "name": "set_php_version",
            "location": 264,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str"
                ]
            }
        },
        "Environment.update_log_forwarding_destinations": {
            "name": "update_log_forwarding_destinations",
            "location": 274,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str"
                ],
                "sources": [
                    "list"
                ],
                "consumer": [
                    "str"
                ],
                "credentials": [
                    "dict"
                ],
                "address": [
                    "str"
                ],
                "destination_uuid": [
                    "str"
                ]
            }
        },
        "Environment.delete_cron": {
            "name": "delete_cron",
            "location": 304,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "cron_id": [
                    "str"
                ]
            }
        },
        "Environment.disable_cron": {
            "name": "disable_cron",
            "location": 314,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "cron_id": [
                    "str"
                ]
            }
        },
        "Environment.enable_cron": {
            "name": "enable_cron",
            "location": 324,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "cron_id": [
                    "str"
                ]
            }
        },
        "Environment.get_ssl_settings": {
            "name": "get_ssl_settings",
            "location": 334,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Environment.get_ssl_certs": {
            "name": "get_ssl_certs",
            "location": 343,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Environment.get_ssl_cert": {
            "name": "get_ssl_cert",
            "location": 352,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "cert_id": [
                    "str"
                ]
            }
        },
        "Environment.install_ssl_cert": {
            "name": "install_ssl_cert",
            "location": 361,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str"
                ],
                "certificate": [
                    "str"
                ],
                "private_key": [
                    "str"
                ],
                "ca_certificates": [
                    "str"
                ],
                "legacy": [
                    "bool"
                ],
                "csr_id": [
                    "int"
                ]
            }
        },
        "Environment.delete_ssl_cert": {
            "name": "delete_ssl_cert",
            "location": 398,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "cert_id": [
                    "str"
                ]
            }
        },
        "Environment.activate_ssl_cert": {
            "name": "activate_ssl_cert",
            "location": 408,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "cert_id": [
                    "str"
                ]
            }
        },
        "Environment.deactivate_ssl_cert": {
            "name": "deactivate_ssl_cert",
            "location": 418,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "cert_id": [
                    "str"
                ]
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/resources/environmentlist.py": {
        "EnvironmentList.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "str"
                ],
                "api_key": [
                    "str"
                ],
                "api_secret": [
                    "str"
                ],
                "qry_params": [
                    "dict"
                ]
            }
        },
        "EnvironmentList.fetch": {
            "name": "fetch",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnvironmentList.base_uri": {
            "name": "base_uri",
            "location": 40,
            "return": [
                "",
                "int",
                "str",
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "base_uri": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/resources/notification.py": {
        "Notification.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "str"
                ],
                "api_key": [
                    "str"
                ],
                "api_secret": [
                    "str"
                ],
                "filters": [
                    "dict"
                ]
            }
        },
        "Notification.pending": {
            "name": "pending",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notification.wait": {
            "name": "wait",
            "location": 46,
            "return": [
                "Notification"
            ],
            "arguments": {
                "self": [
                    "_TNotification"
                ],
                "timeout": [
                    "int"
                ]
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/resources/notificationlist.py": {
        "NotificationList.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "str"
                ],
                "api_key": [
                    "str"
                ],
                "api_secret": [
                    "str"
                ],
                "qry_params": [
                    "dict"
                ]
            }
        },
        "NotificationList.fetch": {
            "name": "fetch",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotificationList.base_uri": {
            "name": "base_uri",
            "location": 47,
            "return": [
                "",
                "int",
                "str",
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "base_uri": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/resources/permissionslist.py": {
        "PermissionsList.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "str"
                ],
                "api_key": [
                    "str"
                ],
                "api_secret": [
                    "str"
                ]
            }
        },
        "PermissionsList.fetch": {
            "name": "fetch",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PermissionsList.base_uri": {
            "name": "base_uri",
            "location": 34,
            "return": [
                "",
                "int",
                "str",
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "base_uri": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/resources/subscription.py": {
        "Subscription.applications": {
            "name": "applications",
            "location": 9,
            "return": [
                "acapi2.resources.applicationlist.ApplicationList"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subscription.entitlements": {
            "name": "entitlements",
            "location": 13,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/resources/subscriptionlist.py": {
        "SubscriptionList.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "str"
                ],
                "api_key": [
                    "str"
                ],
                "api_secret": [
                    "str"
                ]
            }
        },
        "SubscriptionList.fetch": {
            "name": "fetch",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubscriptionList.base_uri": {
            "name": "base_uri",
            "location": 40,
            "return": [
                "",
                "int",
                "str",
                "None",
                "typing.Callable[, ]",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "base_uri": [
                    "str",
                    "List[Tuple[str, str]]"
                ]
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/resources/task.py": {
        "Task.mangle_uri": {
            "name": "mangle_uri",
            "location": 24,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "str"
                ],
                "task_data": [
                    "dict"
                ]
            }
        },
        "Task.is_pending": {
            "name": "is_pending",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.wait": {
            "name": "wait",
            "location": 34,
            "return": [
                "ask"
            ],
            "arguments": {
                "self": [
                    "_TTask"
                ],
                "timeout": [
                    "int"
                ]
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/resources/tasklist.py": {
        "TaskList.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "str"
                ],
                "api_key": [
                    "str"
                ],
                "api_secret": [
                    "str"
                ],
                "filters": [
                    "dict"
                ]
            }
        },
        "TaskList.fetch": {
            "name": "fetch",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskList.base_uri": {
            "name": "base_uri",
            "location": 45,
            "return": [
                "",
                "int",
                "str",
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "base_uri": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/resources/__init__.py": {},
    "python-acquia-cloud-2-2.x/acapi2/tests/basetest.py": {
        "BaseTest.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/tests/test_acquia.py": {
        "TestAcquia.test_failed_connection": {
            "name": "test_failed_connection",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "typing.Mapping",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock",
                    "requests_mock.Mocker",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestAcquia.test_wrong_credentials_connection": {
            "name": "test_wrong_credentials_connection",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "typing.Mapping",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock",
                    "requests_mock.Mocker",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestAcquia.test_connection_system_health": {
            "name": "test_connection_system_health",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "typing.Mapping",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock",
                    "requests_mock.Mocker",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestAcquia.test_missing_os_credentials": {
            "name": "test_missing_os_credentials",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "typing.Mapping",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock",
                    "requests_mock.Mocker",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/tests/test_acquiadata.py": {
        "TestAcquiaData.test_endpoint_not_found": {
            "name": "test_endpoint_not_found",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestAcquiaData.test_retry_and_get": {
            "name": "test_retry_and_get",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestAcquiaData.test_unauthorised_request": {
            "name": "test_unauthorised_request",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestAcquiaData.test_post_request": {
            "name": "test_post_request",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestAcquiaData.test_delete_request": {
            "name": "test_delete_request",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker"
                ]
            }
        },
        "TestAcquiaData.test_request_backoff": {
            "name": "test_request_backoff",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "List[T]",
                    "list[T]"
                ],
                "request_do_mock": [
                    "requests_mock.Mocker"
                ]
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/tests/test_agreements.py": {
        "TestAgreements.test_agreement_list": {
            "name": "test_agreement_list",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "tests.setup.SetupTest"
                ]
            }
        },
        "TestAgreements.test_agreement": {
            "name": "test_agreement",
            "location": 121,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "Optional[Exception]"
                ]
            }
        },
        "TestAgreements.test_accept_agreement": {
            "name": "test_accept_agreement",
            "location": 171,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "bool"
                ]
            }
        },
        "TestAgreements.test_decline_agreement": {
            "name": "test_decline_agreement",
            "location": 182,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "bool"
                ]
            }
        },
        "TestAgreements.test_agreement_invitees": {
            "name": "test_agreement_invitees",
            "location": 193,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "Optional[Exception]"
                ]
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/tests/test_applications.py": {
        "TestApplications.test_application_list": {
            "name": "test_application_list",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "tests.setup.SetupTest"
                ]
            }
        },
        "TestApplications.test_applications_filters": {
            "name": "test_applications_filters",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "jsonlog.tests.capture.Capture"
                ]
            }
        },
        "TestApplications.test_application_not_found": {
            "name": "test_application_not_found",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "bool"
                ]
            }
        },
        "TestApplications.test_create_environment": {
            "name": "test_create_environment",
            "location": 120,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "tests.setup.SetupTest"
                ]
            }
        },
        "TestApplications.test_get_environments": {
            "name": "test_get_environments",
            "location": 137,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "Optional[Exception]"
                ]
            }
        },
        "TestApplications.test_application_permission": {
            "name": "test_application_permission",
            "location": 383,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "tests.setup.SetupTest"
                ]
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/tests/test_environments.py": {
        "TestEnvironments.test_backups": {
            "name": "test_backups",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker"
                ]
            }
        },
        "TestEnvironments.test_backup_details": {
            "name": "test_backup_details",
            "location": 196,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker"
                ]
            }
        },
        "TestEnvironments.test_backup_download": {
            "name": "test_backup_download",
            "location": 266,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker"
                ]
            }
        },
        "TestEnvironments.test_code_switch": {
            "name": "test_code_switch",
            "location": 299,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestEnvironments.test_configure": {
            "name": "test_configure",
            "location": 318,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker",
                    "str"
                ]
            }
        },
        "TestEnvironments.test_create_backup": {
            "name": "test_create_backup",
            "location": 345,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker"
                ]
            }
        },
        "TestEnvironments.test_create_domain": {
            "name": "test_create_domain",
            "location": 378,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker",
                    "str"
                ]
            }
        },
        "TestEnvironments.test_create_log_forwarding_destinations": {
            "name": "test_create_log_forwarding_destinations",
            "location": 398,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker",
                    "str"
                ]
            }
        },
        "TestEnvironments.test_delete_backup": {
            "name": "test_delete_backup",
            "location": 430,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker"
                ]
            }
        },
        "TestEnvironments.test_delete_domain": {
            "name": "test_delete_domain",
            "location": 463,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestEnvironments.test_clear_varnish_domain": {
            "name": "test_clear_varnish_domain",
            "location": 477,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker",
                    "str"
                ]
            }
        },
        "TestEnvironments.test_clear_varnish_domains": {
            "name": "test_clear_varnish_domains",
            "location": 500,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker",
                    "str"
                ]
            }
        },
        "TestEnvironments.test_delete_log_forwarding_destinations": {
            "name": "test_delete_log_forwarding_destinations",
            "location": 522,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker",
                    "str"
                ]
            }
        },
        "TestEnvironments.test_destroy": {
            "name": "test_destroy",
            "location": 545,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "bool"
                ]
            }
        },
        "TestEnvironments.test_deploy_code": {
            "name": "test_deploy_code",
            "location": 559,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker",
                    "str"
                ]
            }
        },
        "TestEnvironments.test_deploy_database": {
            "name": "test_deploy_database",
            "location": 576,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker",
                    "str"
                ]
            }
        },
        "TestEnvironments.test_deploy_files": {
            "name": "test_deploy_files",
            "location": 595,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker",
                    "str"
                ]
            }
        },
        "TestEnvironments.test_get_crons": {
            "name": "test_get_crons",
            "location": 614,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker",
                    "str"
                ]
            }
        },
        "TestEnvironments.test_get_log_forwarding_destinations": {
            "name": "test_get_log_forwarding_destinations",
            "location": 699,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker",
                    "str"
                ]
            }
        },
        "TestEnvironments.test_get_php_version": {
            "name": "test_get_php_version",
            "location": 780,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker",
                    "str"
                ]
            }
        },
        "TestEnvironments.test_get_servers": {
            "name": "test_get_servers",
            "location": 792,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker",
                    "str"
                ]
            }
        },
        "TestEnvironments.test_set_php_version": {
            "name": "test_set_php_version",
            "location": 900,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker",
                    "str"
                ]
            }
        },
        "TestEnvironments.test_update_log_forwarding_destinations": {
            "name": "test_update_log_forwarding_destinations",
            "location": 916,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker",
                    "str"
                ]
            }
        },
        "TestEnvironments.test_enable_cron": {
            "name": "test_enable_cron",
            "location": 948,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker"
                ]
            }
        },
        "TestEnvironments.test_disable_cron": {
            "name": "test_disable_cron",
            "location": 982,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker"
                ]
            }
        },
        "TestEnvironments.test_delete_cron": {
            "name": "test_delete_cron",
            "location": 1016,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker"
                ]
            }
        },
        "TestEnvironments.test_get_ssl_settings": {
            "name": "test_get_ssl_settings",
            "location": 1045,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker"
                ]
            }
        },
        "TestEnvironments.test_get_ssl_certs": {
            "name": "test_get_ssl_certs",
            "location": 1076,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker"
                ]
            }
        },
        "TestEnvironments.test_install_ssl_cert": {
            "name": "test_install_ssl_cert",
            "location": 1171,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker"
                ]
            }
        },
        "TestEnvironments.test_get_ssl_cert": {
            "name": "test_get_ssl_cert",
            "location": 1212,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker"
                ]
            }
        },
        "TestEnvironments.test_delete_ssl_cert": {
            "name": "test_delete_ssl_cert",
            "location": 1248,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker"
                ]
            }
        },
        "TestEnvironments.test_activate_ssl_cert": {
            "name": "test_activate_ssl_cert",
            "location": 1275,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker"
                ]
            }
        },
        "TestEnvironments.test_deactivate_ssl_cert": {
            "name": "test_deactivate_ssl_cert",
            "location": 1300,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker"
                ]
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/tests/test_http_request.py": {
        "TestHttpRequest.test_session": {
            "name": "test_session",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHttpRequest.test_get_session": {
            "name": "test_get_session",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHttpRequest.test_make_request": {
            "name": "test_make_request",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/tests/test_notification.py": {
        "TestNotification.test_pending": {
            "name": "test_pending",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker"
                ]
            }
        },
        "TestNotification.test_wait_in_progress": {
            "name": "test_wait_in_progress",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "experimental.util.alice.alice_pb2.RunRequest"
                ],
                "mock_pending": []
            }
        },
        "TestNotification.test_wait_failed": {
            "name": "test_wait_failed",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker"
                ],
                "mock_pending": []
            }
        },
        "TestNotification.test_wait_completed": {
            "name": "test_wait_completed",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker"
                ],
                "mock_pending": []
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/tests/test_notifications.py": {
        "TestNotifications.test_notifications": {
            "name": "test_notifications",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "requests_mock.Mocker"
                ]
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/tests/test_permissions.py": {
        "TestPermissions.test_permissions_list": {
            "name": "test_permissions_list",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/tests/test_subscriptions.py": {
        "TestSubscriptions.test_subscription_list": {
            "name": "test_subscription_list",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "tests.setup.SetupTest"
                ]
            }
        },
        "TestSubscriptions.test_subscription_applications": {
            "name": "test_subscription_applications",
            "location": 142,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "Optional[Exception]"
                ]
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/tests/test_tasks.py": {
        "TestTasks.test_get_application_tasks": {
            "name": "test_get_application_tasks",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "Optional[Exception]"
                ]
            }
        },
        "TestTasks.test_wait_task": {
            "name": "test_wait_task",
            "location": 119,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock",
                    "requests_mock.Mocker"
                ]
            }
        },
        "TestTasks.test_failed_task": {
            "name": "test_failed_task",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock",
                    "requests_mock.Mocker"
                ]
            }
        },
        "TestTasks.test_task_not_found": {
            "name": "test_task_not_found",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "bool",
                    "typing.Callable[, ]",
                    "Callable"
                ]
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/tests/util.py": {
        "load_fixture": {
            "name": "load_fixture",
            "location": 5,
            "return": [
                "dict"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "python-acquia-cloud-2-2.x/acapi2/tests/__init__.py": {},
    "python-acquia-cloud-2-2.x/docs/conf.py": {}
}
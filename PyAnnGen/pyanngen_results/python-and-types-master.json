{
    "python-and-types-master/decorators.py": {
        "make_bold": {
            "name": "make_bold",
            "location": 4,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "say_hello": {
            "name": "say_hello",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "make_bold.func_wrapper": {
            "name": "func_wrapper",
            "location": 6,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "name": [
                    "dict",
                    "Callable[[], None]",
                    "Type",
                    "str",
                    "Callable[..., str]"
                ]
            }
        }
    },
    "python-and-types-master/generators.py": {
        "rock_paper_scissor": {
            "name": "rock_paper_scissor",
            "location": 1,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {}
        },
        "infinite_generator": {
            "name": "infinite_generator",
            "location": 12,
            "return": [
                "Generator[(int, Any, Any)]"
            ],
            "arguments": {}
        }
    },
    "python-and-types-master/main.py": {
        "h1": {
            "name": "h1",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "python-and-types-master/partials.py": {
        "add": {
            "name": "add",
            "location": 4,
            "return": [
                "float",
                "int",
                "T",
                "Tuple[float, float]",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "python-and-types-master/toolz_demo.py": {
        "add": {
            "name": "add",
            "location": 6,
            "return": [
                "float",
                "int",
                "T",
                "Tuple[float, float]",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ]
            }
        },
        "double": {
            "name": "double",
            "location": 10,
            "return": [
                "int",
                "float",
                "list[T]",
                "list[int]"
            ],
            "arguments": {
                "a": [
                    "List[T]",
                    "int",
                    "list[T]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "curried_sum": {
            "name": "curried_sum",
            "location": 15,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str"
                ],
                "y": [
                    "float",
                    "str"
                ],
                "z": [
                    "float",
                    "str"
                ]
            }
        },
        "is_eaten": {
            "name": "is_eaten",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "food": [
                    "str",
                    "int"
                ],
                "eater": [
                    "str",
                    "int"
                ]
            }
        }
    }
}
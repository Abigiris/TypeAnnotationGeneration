{
    "python-as3-master/demo.py": {},
    "python-as3-master/setup.py": {},
    "python-as3-master/.idea/fileTemplates/internal/Python Script.py": {},
    "python-as3-master/as3/ast_.py": {
        "Literal.from_": {
            "name": "from_",
            "location": 22,
            "return": [
                "Literal"
            ],
            "arguments": {
                "token": [
                    "as3.scanner.Token"
                ]
            }
        },
        "Name.from_": {
            "name": "from_",
            "location": 70,
            "return": [
                "AST"
            ],
            "arguments": {
                "token": [
                    "as3.scanner.Token"
                ]
            }
        }
    },
    "python-as3-master/as3/enums.py": {},
    "python-as3-master/as3/exceptions.py": {
        "ASSyntaxError.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "ASReturn.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "ASReferenceError.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        }
    },
    "python-as3-master/as3/interpreter.py": {
        "execute": {
            "name": "execute",
            "location": 15,
            "return": [
                "tuple"
            ],
            "arguments": {
                "node": [
                    "ast_.AST"
                ],
                "with_environment": [
                    "dict"
                ]
            }
        },
        "execute_block": {
            "name": "execute_block",
            "location": 26,
            "return": [
                "int",
                "tuple",
                "Dict[str, Any]",
                "bool",
                "float",
                "str"
            ],
            "arguments": {
                "node": [
                    "ast_.Block"
                ],
                "with_environment": [
                    "dict"
                ]
            }
        },
        "execute_for": {
            "name": "execute_for",
            "location": 33,
            "return": [
                "float",
                "str",
                "Optional[Callable[[str], bool]]",
                "int",
                "dict"
            ],
            "arguments": {
                "node": [
                    "ast_.AbstractFor"
                ],
                "with_environment": [
                    "dict"
                ]
            }
        },
        "return_": {
            "name": "return_",
            "location": 45,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "node": [
                    "ast_.Return"
                ],
                "with_environment": [
                    "dict"
                ]
            }
        },
        "new": {
            "name": "new",
            "location": 49,
            "return": [
                "dict[typing.Text, typing.Union[list[],int]]",
                "Dict[str, Any]",
                "str",
                "float",
                "tuple[str]",
                "Optional[int]"
            ],
            "arguments": {
                "with_constructor": [
                    "list",
                    "int",
                    "list[]"
                ],
                "with_arguments": [
                    "list"
                ],
                "with_environment": [
                    "dict"
                ]
            }
        },
        "call": {
            "name": "call",
            "location": 60,
            "return": [
                "Iterable[T]",
                "str",
                "float"
            ],
            "arguments": {
                "value": [
                    "dict"
                ],
                "with_arguments": [
                    "List[ast_.AST]"
                ],
                "with_environment": [
                    "dict"
                ]
            }
        },
        "define_variable": {
            "name": "define_variable",
            "location": 68,
            "return": [
                "str",
                "list",
                "T",
                "Type",
                "float"
            ],
            "arguments": {
                "with_node": [
                    "ast_.Variable"
                ],
                "in_environment": [
                    "dict"
                ]
            }
        },
        "define_function": {
            "name": "define_function",
            "location": 74,
            "return": [
                "dict"
            ],
            "arguments": {
                "with_node": [
                    "ast_.Function"
                ],
                "in_environment": [
                    "dict"
                ]
            }
        },
        "make_function_object": {
            "name": "make_function_object",
            "location": 101,
            "return": [
                "dict"
            ],
            "arguments": {
                "callable_": [
                    "Callable"
                ]
            }
        },
        "define_class": {
            "name": "define_class",
            "location": 105,
            "return": [
                "dict"
            ],
            "arguments": {
                "with_node": [
                    "ast_.Class"
                ],
                "in_environment": [
                    "dict"
                ]
            }
        },
        "execute_assignment": {
            "name": "execute_assignment",
            "location": 111,
            "return": [
                "int",
                "dict[, ]",
                "str",
                "Callable",
                "bool"
            ],
            "arguments": {
                "left": [
                    "ast_.AST"
                ],
                "right": [
                    "dict[, ]",
                    "bool",
                    "as3.ast_.AST",
                    "str",
                    "dict",
                    "int"
                ],
                "with_environment": [
                    "dict"
                ]
            }
        },
        "get_name": {
            "name": "get_name",
            "location": 136,
            "return": [
                "int",
                "Callable",
                "bool",
                "Mapping[str, str]",
                "List[str]"
            ],
            "arguments": {
                "with_node": [
                    "ast_.Name"
                ],
                "with_environment": [
                    "dict"
                ]
            }
        },
        "get_property": {
            "name": "get_property",
            "location": 140,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "of_value": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "of_name": [
                    "str"
                ]
            }
        },
        "has_property": {
            "name": "has_property",
            "location": 149,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Iterable[Hashable]",
                    "bool",
                    "typing.Iterable[typing.Hashable]",
                    "Sequence[MutableMapping]",
                    "typing.Sequence[typing.MutableMapping]"
                ],
                "of_name": [
                    "str"
                ]
            }
        },
        "resolve_property": {
            "name": "resolve_property",
            "location": 158,
            "return": [
                "ResolvedTarget"
            ],
            "arguments": {
                "where": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "resolve_own_property": {
            "name": "resolve_own_property",
            "location": 174,
            "return": [
                "ResolvedTarget"
            ],
            "arguments": {
                "where": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "push_environment": {
            "name": "push_environment",
            "location": 190,
            "return": [
                "dict"
            ],
            "arguments": {
                "environment": [
                    "dict"
                ]
            }
        },
        "binary_operation": {
            "name": "binary_operation",
            "location": 197,
            "return": [
                "Callable[([ast_.AST, ast_.AST, dict], Any)]"
            ],
            "arguments": {
                "operation": [
                    "Callable[([Any, Any], Any)]"
                ]
            }
        },
        "binary_augmented_assignment": {
            "name": "binary_augmented_assignment",
            "location": 203,
            "return": [
                "Callable[([ast_.AST, ast_.AST, dict], Any)]"
            ],
            "arguments": {
                "with_operation": [
                    "Callable[([Any, Any], Any)]"
                ]
            }
        },
        "unary_operation": {
            "name": "unary_operation",
            "location": 211,
            "return": [
                "Callable[([ast_.AST, dict], Any)]"
            ],
            "arguments": {
                "operation": [
                    "Callable[([Any], Any)]"
                ]
            }
        },
        "unary_augmented_assignment": {
            "name": "unary_augmented_assignment",
            "location": 217,
            "return": [
                "Callable[([ast_.AST, dict], Any)]"
            ],
            "arguments": {
                "with_operation": [
                    "Callable[([Any], Any)]"
                ]
            }
        },
        "postfix_augmented_assignment": {
            "name": "postfix_augmented_assignment",
            "location": 225,
            "return": [
                "Callable[([ast_.AST, dict], Any)]"
            ],
            "arguments": {
                "with_operation": [
                    "Callable[([Any], Any)]"
                ]
            }
        },
        "resolve_assignment_target": {
            "name": "resolve_assignment_target",
            "location": 237,
            "return": [
                "ResolvedTarget"
            ],
            "arguments": {
                "node": [
                    "ast_.AST"
                ],
                "with_environment": [
                    "dict"
                ]
            }
        },
        "define_function.function_": {
            "name": "function_",
            "location": 75,
            "return": [
                "Optional[Union[int, float, bool, str]]",
                "str",
                "Optional[int]",
                "Optional[str]",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        },
        "ResolvedTarget.value": {
            "name": "value",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "binary_operation.execute_": {
            "name": "execute_",
            "location": 198,
            "return": [],
            "arguments": {
                "left": [],
                "right": [],
                "with_environment": []
            }
        },
        "binary_augmented_assignment.execute_": {
            "name": "execute_",
            "location": 204,
            "return": [],
            "arguments": {
                "left": [],
                "right": [],
                "with_environment": []
            }
        },
        "unary_operation.execute_": {
            "name": "execute_",
            "location": 212,
            "return": [],
            "arguments": {
                "on_argument": [],
                "with_environment": []
            }
        },
        "unary_augmented_assignment.execute_": {
            "name": "execute_",
            "location": 218,
            "return": [],
            "arguments": {
                "on_argument": [],
                "with_environment": []
            }
        },
        "postfix_augmented_assignment.execute_": {
            "name": "execute_",
            "location": 226,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "on_argument": [
                    "int",
                    "Callable",
                    "str"
                ],
                "with_environment": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ASUndefined.__repr__": {
            "name": "__repr__",
            "location": 316,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-as3-master/as3/parser.py": {
        "filter_tokens": {
            "name": "filter_tokens",
            "location": 579,
            "return": [
                "Iterable[as3.scanner.Token]"
            ],
            "arguments": {
                "tokens": [
                    "Iterable[as3.scanner.Token]"
                ]
            }
        },
        "raise_syntax_error": {
            "name": "raise_syntax_error",
            "location": 583,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "location": [
                    "Optional[as3.scanner.Token]"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "Iterable[as3.scanner.Token]"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "Parser.parse_script": {
            "name": "parse_script",
            "location": 21,
            "return": [
                "ast_.Block"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_package": {
            "name": "parse_package",
            "location": 31,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_class": {
            "name": "parse_class",
            "location": 39,
            "return": [
                "ast_.Class"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_modifiers": {
            "name": "parse_modifiers",
            "location": 69,
            "return": [
                "Set[as3.enums.TokenType]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_statement_or_code_block": {
            "name": "parse_statement_or_code_block",
            "location": 81,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_statement": {
            "name": "parse_statement",
            "location": 84,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_code_block": {
            "name": "parse_code_block",
            "location": 106,
            "return": [
                "ast_.Block"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_expression_statement": {
            "name": "parse_expression_statement",
            "location": 113,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_qualified_name": {
            "name": "parse_qualified_name",
            "location": 118,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_import": {
            "name": "parse_import",
            "location": 126,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_if": {
            "name": "parse_if",
            "location": 141,
            "return": [
                "ast_.If"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_variable_definition": {
            "name": "parse_variable_definition",
            "location": 152,
            "return": [
                "ast_.Variable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_type_annotation": {
            "name": "parse_type_annotation",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_type": {
            "name": "parse_type",
            "location": 170,
            "return": [
                "Union[None, int, Tuple[int], Tuple[int, ...]]",
                "None",
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_semicolon": {
            "name": "parse_semicolon",
            "location": 193,
            "return": [
                "ast_.Block"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_return": {
            "name": "parse_return",
            "location": 197,
            "return": [
                "ast_.Return"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_function_definition": {
            "name": "parse_function_definition",
            "location": 204,
            "return": [
                "ast_.Function"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_break": {
            "name": "parse_break",
            "location": 223,
            "return": [
                "ast_.Break"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_while": {
            "name": "parse_while",
            "location": 227,
            "return": [
                "ast_.While"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_try": {
            "name": "parse_try",
            "location": 236,
            "return": [
                "ast_.TryFinally"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_throw": {
            "name": "parse_throw",
            "location": 255,
            "return": [
                "ast_.Throw"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_for": {
            "name": "parse_for",
            "location": 261,
            "return": [
                "ast_.AbstractFor"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_expression": {
            "name": "parse_expression",
            "location": 278,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_label": {
            "name": "parse_label",
            "location": 281,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_assignment_expression": {
            "name": "parse_assignment_expression",
            "location": 290,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_conditional_expression": {
            "name": "parse_conditional_expression",
            "location": 300,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_logical_or_expression": {
            "name": "parse_logical_or_expression",
            "location": 311,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_logical_and_expression": {
            "name": "parse_logical_and_expression",
            "location": 314,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_bitwise_xor": {
            "name": "parse_bitwise_xor",
            "location": 317,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_equality_expression": {
            "name": "parse_equality_expression",
            "location": 320,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_relational_expression": {
            "name": "parse_relational_expression",
            "location": 327,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_additive_expression": {
            "name": "parse_additive_expression",
            "location": 339,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_multiplicative_expression": {
            "name": "parse_multiplicative_expression",
            "location": 342,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_unary_expression": {
            "name": "parse_unary_expression",
            "location": 348,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_postfix": {
            "name": "parse_postfix",
            "location": 355,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_primary_expression": {
            "name": "parse_primary_expression",
            "location": 362,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_attribute_expression": {
            "name": "parse_attribute_expression",
            "location": 373,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "ast_.AST"
                ]
            }
        },
        "Parser.parse_call_expression": {
            "name": "parse_call_expression",
            "location": 379,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "ast_.AST"
                ]
            }
        },
        "Parser.parse_subscript": {
            "name": "parse_subscript",
            "location": 387,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "ast_.AST"
                ]
            }
        },
        "Parser.parse_terminal_or_parenthesized": {
            "name": "parse_terminal_or_parenthesized",
            "location": 394,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_parenthesized_expression": {
            "name": "parse_parenthesized_expression",
            "location": 412,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_super_expression": {
            "name": "parse_super_expression",
            "location": 418,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_new": {
            "name": "parse_new",
            "location": 429,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_compound_literal": {
            "name": "parse_compound_literal",
            "location": 456,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_map_literal": {
            "name": "parse_map_literal",
            "location": 465,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_binary_operations": {
            "name": "parse_binary_operations",
            "location": 480,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": [],
                "child_parser": [
                    "Callable[([], ast_.AST)]"
                ]
            }
        },
        "Parser.switch": {
            "name": "switch",
            "location": 493,
            "return": [
                "ast_.AST"
            ],
            "arguments": {
                "self": [],
                "cases": [
                    "Dict[(as3.enums.TokenType, Callable[(..., ast_.AST)])]"
                ],
                "else_": [
                    "Optional[Callable[(..., ast_.AST)]]"
                ]
            }
        },
        "Parser.expect": {
            "name": "expect",
            "location": 510,
            "return": [
                "as3.scanner.Token"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.raise_syntax_error": {
            "name": "raise_syntax_error",
            "location": 519,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Peekable.__init__": {
            "name": "__init__",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "Iterable[as3.scanner.Token]"
                ]
            }
        },
        "Peekable.__iter__": {
            "name": "__iter__",
            "location": 541,
            "return": [
                "Iterator[as3.scanner.Token]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Peekable.__next__": {
            "name": "__next__",
            "location": 544,
            "return": [
                "as3.scanner.Token"
            ],
            "arguments": {
                "self": []
            }
        },
        "Peekable.__bool__": {
            "name": "__bool__",
            "location": 548,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Peekable.peek": {
            "name": "peek",
            "location": 556,
            "return": [
                "as3.scanner.Token"
            ],
            "arguments": {
                "self": []
            }
        },
        "Peekable.is_type": {
            "name": "is_type",
            "location": 561,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Peekable.skip": {
            "name": "skip",
            "location": 570,
            "return": [
                "Optional[as3.scanner.Token]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-as3-master/as3/scanner.py": {
        "scan": {
            "name": "scan",
            "location": 73,
            "return": [
                "Iterable[Token]"
            ],
            "arguments": {
                "source": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "python-as3-master/as3/__init__.py": {
        "parse": {
            "name": "parse",
            "location": 12,
            "return": [
                "ast_.Block"
            ],
            "arguments": {
                "source": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "execute": {
            "name": "execute",
            "location": 16,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "source": [
                    "str"
                ],
                "filename": [
                    "str"
                ],
                "environment": [
                    "Optional[dict]"
                ]
            }
        }
    },
    "python-as3-master/as3/__main__.py": {
        "main": {
            "name": "main",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "shell": [
                    "str",
                    "bool",
                    "Tuple[str]",
                    "tuple[str]",
                    "List[str]",
                    "list[str]"
                ],
                "packages_path": [
                    "str",
                    "bool",
                    "Tuple[str]",
                    "tuple[str]",
                    "List[str]",
                    "list[str]"
                ],
                "scripts": [
                    "str",
                    "tuple[str]",
                    "Tuple[str]",
                    "list[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "run_shell": {
            "name": "run_shell",
            "location": 49,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "environment": [
                    "dict"
                ]
            }
        },
        "print_exception": {
            "name": "print_exception",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "e": [
                    "Exception"
                ]
            }
        }
    },
    "python-as3-master/tests/tests.py": {
        "test_int_literal": {
            "name": "test_int_literal",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "expected": []
            }
        },
        "test_addition": {
            "name": "test_addition",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_priority": {
            "name": "test_priority",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "expected": []
            }
        },
        "test_new_string_generic": {
            "name": "test_new_string_generic",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_new_string": {
            "name": "test_new_string",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_math": {
            "name": "test_math",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "expected": []
            }
        },
        "test_get_property": {
            "name": "test_get_property",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "expected": []
            }
        },
        "test_call_function": {
            "name": "test_call_function",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "expected": []
            }
        },
        "test_boolean_literal": {
            "name": "test_boolean_literal",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "expected": []
            }
        },
        "test_unary": {
            "name": "test_unary",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "expected": []
            }
        },
        "test_binary": {
            "name": "test_binary",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "expected": []
            }
        },
        "test_undefined": {
            "name": "test_undefined",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string_literal": {
            "name": "test_string_literal",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "expected": []
            }
        },
        "test_float_literal": {
            "name": "test_float_literal",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "expected": []
            }
        },
        "test_conditional": {
            "name": "test_conditional",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "expected": []
            }
        },
        "test_array": {
            "name": "test_array",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "expected": []
            }
        },
        "test_null": {
            "name": "test_null",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_map_literal": {
            "name": "test_map_literal",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "expected": []
            }
        },
        "test_label": {
            "name": "test_label",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_variable_definition": {
            "name": "test_variable_definition",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "expected": []
            }
        },
        "test_augmented_assignment": {
            "name": "test_augmented_assignment",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "expected": []
            }
        },
        "test_for": {
            "name": "test_for",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "expected": []
            }
        },
        "test_if": {
            "name": "test_if",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "expected": []
            }
        },
        "test_function_parameter": {
            "name": "test_function_parameter",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "expected": []
            }
        },
        "test_function_return": {
            "name": "test_function_return",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "expected": []
            }
        },
        "test_assign_property": {
            "name": "test_assign_property",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "expected": []
            }
        },
        "test_reference_error": {
            "name": "test_reference_error",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "source": []
            }
        },
        "test_simple_class": {
            "name": "test_simple_class",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_class_constructor": {
            "name": "test_class_constructor",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_missing_class_field": {
            "name": "test_get_missing_class_field",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_initialized_class_field": {
            "name": "test_initialized_class_field",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_execute_deprecated": {
            "name": "test_execute_deprecated",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "expected": []
            }
        }
    },
    "python-as3-master/tests/test_parser.py": {
        "test_parse_syntax_error": {
            "name": "test_parse_syntax_error",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "source": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "python-as3-master/tests/test_scanner.py": {
        "make_test_params": {
            "name": "make_test_params",
            "location": 11,
            "return": [],
            "arguments": {
                "value": [
                    "str"
                ],
                "type_": [
                    "as3.enums.TokenType"
                ],
                "xfail": [
                    "bool"
                ]
            }
        },
        "test_empty": {
            "name": "test_empty",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_single_token": {
            "name": "test_single_token",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "expected": []
            }
        },
        "test_multiple_tokens": {
            "name": "test_multiple_tokens",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "expected": []
            }
        },
        "test_scanner_get_elemental_penetration": {
            "name": "test_scanner_get_elemental_penetration",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-as3-master/tests/__init__.py": {}
}
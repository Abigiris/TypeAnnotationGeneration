{
    "python-aws-dataclasses-master/setup.py": {},
    "python-aws-dataclasses-master/aws_dataclasses/alexa_skill_event.py": {
        "_parse_intents": {
            "name": "_parse_intents",
            "location": 15,
            "return": [
                "Dict[(str, IntentSlot)]"
            ],
            "arguments": {
                "slots": [
                    "Dict[(str, Dict[(str, str)])]"
                ]
            }
        },
        "AlexaIntent.__post_init__": {
            "name": "__post_init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlexaSkillRequest.__post_init__": {
            "name": "__post_init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requestId": [
                    "str"
                ],
                "shouldLinkResultBeReturned": [
                    "bool"
                ]
            }
        },
        "AlexaSkillSession.__post_init__": {
            "name": "__post_init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sessionId": [
                    "str"
                ]
            }
        },
        "AlexaSkillEvent.__post_init__": {
            "name": "__post_init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-aws-dataclasses-master/aws_dataclasses/base.py": {
        "_check_fields": {
            "name": "_check_fields",
            "location": 8,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "item": [
                    "dict"
                ],
                "cls": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_normalize_key": {
            "name": "_normalize_key",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "identifier": [
                    "str"
                ]
            }
        },
        "GenericDataClass.from_json": {
            "name": "from_json",
            "location": 28,
            "return": [
                "GenericDataClass"
            ],
            "arguments": {
                "cls": [
                    "Type[_TGenericDataClass]"
                ],
                "input": [
                    "Union[(dict, str)]"
                ]
            }
        },
        "EventClass.from_event": {
            "name": "from_event",
            "location": 38,
            "return": [
                "EventClass"
            ],
            "arguments": {
                "cls": [
                    "Type[_TEventClass]"
                ],
                "event": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "Dict[str, dict]",
                    "dict[str, dict[, ]]"
                ]
            }
        }
    },
    "python-aws-dataclasses-master/aws_dataclasses/cf_event.py": {
        "_parse_headers": {
            "name": "_parse_headers",
            "location": 11,
            "return": [
                "Dict[(str, List[KVPair])]"
            ],
            "arguments": {
                "headers": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "dict[, ]",
                    "dict[int, dict[str, typing.Any]]",
                    "dict",
                    "Dict[str, Any]",
                    "List[\"libkol.types.ItemQuantity\"]",
                    "Dict[int, Dict[str, Any]]"
                ]
            }
        },
        "CloudFrontConfig.__post_init__": {
            "name": "__post_init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "distributionId": [
                    "str"
                ],
                "requestId": [
                    "str"
                ]
            }
        },
        "CloudFrontfRequest.__post_init__": {
            "name": "__post_init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "clientIp": [
                    "str"
                ]
            }
        },
        "CloudFrontResponse.__post_init__": {
            "name": "__post_init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "statusDescription": [
                    "str"
                ]
            }
        },
        "CloudFrontRecord.__post_init__": {
            "name": "__post_init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudFrontEvent.__post_init__": {
            "name": "__post_init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Records": [
                    "List[dict]"
                ]
            }
        }
    },
    "python-aws-dataclasses-master/aws_dataclasses/cloudwatch_alarm.py": {
        "CloudWatchAlarmTrigger.__post_init__": {
            "name": "__post_init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "MetricName": [
                    "str"
                ],
                "Namespace": [
                    "str"
                ],
                "StatisticType": [
                    "str"
                ],
                "Statistic": [
                    "str"
                ],
                "Dimensions": [
                    "List[dict]"
                ],
                "Period": [
                    "int"
                ],
                "EvaluationPeriods": [
                    "int"
                ],
                "ComparisonOperator": [
                    "str"
                ],
                "Threshold": [
                    "float"
                ],
                "TreatMissingData": [
                    "str"
                ],
                "EvaluateLowSampleCountPercentile": [
                    "str"
                ],
                "Unit": [
                    "str"
                ]
            }
        },
        "CloudWatchAlarm.__post_init__": {
            "name": "__post_init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "AlarmName": [
                    "str"
                ],
                "AlarmDescription": [
                    "str"
                ],
                "AWSAccountId": [
                    "str"
                ],
                "NewStateValue": [
                    "str"
                ],
                "NewStateReason": [
                    "str"
                ],
                "StateChangeTime": [
                    "str"
                ],
                "Region": [
                    "str"
                ],
                "OldStateValue": [
                    "str"
                ],
                "Trigger": [
                    "dict"
                ]
            }
        }
    },
    "python-aws-dataclasses-master/aws_dataclasses/cloudwatch_event.py": {
        "CloudWatchEvent.__post_init__": {
            "name": "__post_init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-aws-dataclasses-master/aws_dataclasses/http_proxy_event.py": {
        "Identity.__post_init__": {
            "name": "__post_init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "apiKey": [
                    "str"
                ],
                "userArn": [
                    "str"
                ],
                "cognitoAuthenticationType": [
                    "str"
                ],
                "userAgent": [
                    "str"
                ],
                "cognitoIdentityPoolId": [
                    "str"
                ],
                "cognitoAuthenticationProvider": [
                    "str"
                ],
                "sourceIp": [
                    "str"
                ],
                "accountId": [
                    "str"
                ],
                "cognitoIdentityId": [
                    "str"
                ]
            }
        },
        "RequestContext.__post_init__": {
            "name": "__post_init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resourceId": [
                    "str"
                ],
                "apiId": [
                    "str"
                ],
                "resourcePath": [
                    "str"
                ],
                "httpMethod": [
                    "str"
                ],
                "requestId": [
                    "str"
                ],
                "accountId": [
                    "str"
                ]
            }
        },
        "ApiGwProxyEvent.__post_init__": {
            "name": "__post_init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requestContext": [
                    "str"
                ],
                "queryStringParameters": [
                    "str"
                ],
                "pathParameters": [
                    "str"
                ],
                "httpMethod": [
                    "str"
                ],
                "stageVariables": [
                    "str"
                ]
            }
        }
    },
    "python-aws-dataclasses-master/aws_dataclasses/lambda_function_configuration.py": {
        "LambdaTracingConfig.__post_init__": {
            "name": "__post_init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Mode": [
                    "str"
                ]
            }
        },
        "LambdaVpcConfig.__post_init__": {
            "name": "__post_init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "SubnetIds": [
                    "List[str]"
                ],
                "SecurityGroupIds": [
                    "List[str]"
                ],
                "VpcId": [
                    "str"
                ]
            }
        },
        "LambdaDlqConfig.__post_init__": {
            "name": "__post_init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "TargetArn": [
                    "str"
                ]
            }
        },
        "LambdaEnvironment.__post_init__": {
            "name": "__post_init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Variables": [
                    "dict"
                ]
            }
        },
        "LambdaFunctionConfiguration.__post_init__": {
            "name": "__post_init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "FunctionName": [
                    "str"
                ],
                "FunctionArn": [
                    "str"
                ],
                "Runtime": [
                    "str"
                ],
                "Role": [
                    "str"
                ],
                "Handler": [
                    "str"
                ],
                "CodeSize": [
                    "int"
                ],
                "Description": [
                    "str"
                ],
                "Timeout": [
                    "int"
                ],
                "MemorySize": [
                    "int"
                ],
                "LastModified": [
                    "str"
                ],
                "CodeSha256": [
                    "str"
                ],
                "Version": [
                    "str"
                ],
                "VpcConfig": [
                    "dict[, ]",
                    "int",
                    "dict",
                    "str",
                    "bool"
                ],
                "DeadLetterConfig": [
                    "Optional[bool]",
                    "bool",
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "Environment": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[List[str]]",
                    "None",
                    "dict",
                    "dict[, ]"
                ],
                "TracingConfig": [
                    "dict[, ]",
                    "int",
                    "dict",
                    "str",
                    "bool"
                ],
                "RevisionId": [
                    "str"
                ]
            }
        }
    },
    "python-aws-dataclasses-master/aws_dataclasses/s3_event.py": {
        "S3Object.__post_init__": {
            "name": "__post_init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eTag": [
                    "str"
                ]
            }
        },
        "S3Bucket.__post_init__": {
            "name": "__post_init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ownerIdentity": [
                    "str"
                ]
            }
        },
        "S3.__post_init__": {
            "name": "__post_init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configurationId": [
                    "str"
                ],
                "s3SchemaVersion": [
                    "str"
                ]
            }
        },
        "S3Record.__post_init__": {
            "name": "__post_init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eventVersion": [
                    "str"
                ],
                "eventTime": [
                    "str"
                ],
                "requestParameters": [
                    "Dict[(str, str)]"
                ],
                "responseElements": [
                    "Dict[(str, str)]"
                ],
                "awsRegion": [
                    "str"
                ],
                "eventName": [
                    "str"
                ],
                "userIdentity": [
                    "Dict[(str, str)]"
                ],
                "eventSource": [
                    "str"
                ]
            }
        },
        "S3Event.__post_init__": {
            "name": "__post_init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Records": [
                    "List[dict]"
                ]
            }
        }
    },
    "python-aws-dataclasses-master/aws_dataclasses/sns_event.py": {
        "_parse_message_attributes": {
            "name": "_parse_message_attributes",
            "location": 14,
            "return": [
                "Dict[(Any, MessageAttribute)]"
            ],
            "arguments": {
                "attrs": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "SnsMessage.__post_init__": {
            "name": "__post_init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "SignatureVersion": [
                    "str"
                ],
                "Timestamp": [
                    "str"
                ],
                "Signature": [
                    "str"
                ],
                "MessageId": [
                    "str"
                ],
                "Message": [
                    "str"
                ],
                "Subject": [
                    "str"
                ],
                "Type": [
                    "str"
                ],
                "TopicArn": [
                    "str"
                ],
                "UnsubscribeUrl": [
                    "str"
                ],
                "SigningCertUrl": [
                    "str"
                ],
                "MessageAttributes": [
                    "dict"
                ]
            }
        },
        "SnsRecord.__post_init__": {
            "name": "__post_init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "EventVersion": [
                    "str"
                ],
                "EventSubscriptionArn": [
                    "str"
                ],
                "Sns": [
                    "dict"
                ],
                "EventSource": [
                    "str"
                ]
            }
        },
        "SnsEvent.__post_init__": {
            "name": "__post_init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Records": [
                    "list"
                ]
            }
        }
    },
    "python-aws-dataclasses-master/aws_dataclasses/__init__.py": {},
    "python-aws-dataclasses-master/tests/test_alexaskill_event.py": {
        "alexa_event_raw": {
            "name": "alexa_event_raw",
            "location": 9,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "alexa_event": {
            "name": "alexa_event",
            "location": 14,
            "return": [],
            "arguments": {
                "alexa_event_raw": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_alexa_skill": {
            "name": "test_alexa_skill",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "alexa_event": [
                    "str"
                ]
            }
        },
        "test_skill_session": {
            "name": "test_skill_session",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "alexa_event": []
            }
        },
        "test_skill_request": {
            "name": "test_skill_request",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "alexa_event": []
            }
        }
    },
    "python-aws-dataclasses-master/tests/test_apigw_proxy_event.py": {
        "apigw_proxy_event_raw": {
            "name": "apigw_proxy_event_raw",
            "location": 9,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "apigw_proxy_event": {
            "name": "apigw_proxy_event",
            "location": 14,
            "return": [
                "bool",
                "Sequence[int]",
                "bytes",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "apigw_proxy_event_raw": []
            }
        },
        "test_apigw_proxy_event": {
            "name": "test_apigw_proxy_event",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "apigw_proxy_event": [
                    "str",
                    "slice"
                ]
            }
        },
        "test_apigw_proxy_event_contains_headers": {
            "name": "test_apigw_proxy_event_contains_headers",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "apigw_proxy_event": [
                    "str",
                    "slice"
                ]
            }
        },
        "test_apigw_proxy_event_contains_querystrin_params": {
            "name": "test_apigw_proxy_event_contains_querystrin_params",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "apigw_proxy_event": [
                    "str",
                    "slice"
                ]
            }
        },
        "test_apigw_proxy_event_contains_request_ctx": {
            "name": "test_apigw_proxy_event_contains_request_ctx",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "apigw_proxy_event": [
                    "str",
                    "slice"
                ]
            }
        }
    },
    "python-aws-dataclasses-master/tests/test_cf_event.py": {
        "cf_request_event_raw": {
            "name": "cf_request_event_raw",
            "location": 9,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "bool",
                "dict"
            ],
            "arguments": {}
        },
        "cf_response_event_raw": {
            "name": "cf_response_event_raw",
            "location": 14,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[str]",
                "dict"
            ],
            "arguments": {}
        },
        "cf_request_event": {
            "name": "cf_request_event",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "cf_request_event_raw": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "cf_response_event": {
            "name": "cf_response_event",
            "location": 24,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "cf_response_event_raw": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_request": {
            "name": "test_request",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "cf_request_event": [
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "test_response": {
            "name": "test_response",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "cf_response_event": [
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "python-aws-dataclasses-master/tests/test_cloudwatch_alarm.py": {
        "cloudwatch_alarm_raw": {
            "name": "cloudwatch_alarm_raw",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "cloudwatch_alarm": {
            "name": "cloudwatch_alarm",
            "location": 18,
            "return": [],
            "arguments": {
                "cloudwatch_alarm_raw": []
            }
        },
        "test_toplevel_items": {
            "name": "test_toplevel_items",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "cloudwatch_alarm": []
            }
        },
        "test_trigger_items": {
            "name": "test_trigger_items",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "cloudwatch_alarm": []
            }
        }
    },
    "python-aws-dataclasses-master/tests/test_cloudwatch_event.py": {
        "cloudwatch_event_raw": {
            "name": "cloudwatch_event_raw",
            "location": 12,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "cloudwatch_event": {
            "name": "cloudwatch_event",
            "location": 17,
            "return": [],
            "arguments": {
                "cloudwatch_event_raw": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_toplevel_items": {
            "name": "test_toplevel_items",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "cloudwatch_event": [
                    "str"
                ]
            }
        }
    },
    "python-aws-dataclasses-master/tests/test_lambda_list_functions.py": {
        "lambda_functionconfig_raw": {
            "name": "lambda_functionconfig_raw",
            "location": 12,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "lambda_functionconfig": {
            "name": "lambda_functionconfig",
            "location": 17,
            "return": [
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "lambda_functionconfig_raw": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_toplevel_items": {
            "name": "test_toplevel_items",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "lambda_functionconfig": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_environment": {
            "name": "test_environment",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "lambda_functionconfig": [
                    "str",
                    "float"
                ]
            }
        },
        "test_vpcconfig": {
            "name": "test_vpcconfig",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "lambda_functionconfig": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "python-aws-dataclasses-master/tests/test_s3_event.py": {
        "s3_event_raw": {
            "name": "s3_event_raw",
            "location": 8,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {}
        },
        "s3_event": {
            "name": "s3_event",
            "location": 13,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "s3_event_raw": [
                    "dict",
                    "int",
                    "dict[, ]",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_s3_event_contains_s3": {
            "name": "test_s3_event_contains_s3",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "s3_event": [
                    "Callable[[Dict], None]",
                    "typing.Callable[dict[, ], None]",
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_s3_event_contains_object": {
            "name": "test_s3_event_contains_object",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "s3_event": [
                    "str",
                    "Optional[Callable[[Any], None]]",
                    "typing.Callable[typing.Any, None]",
                    "Callable[[Dict], None]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_s3_event_contains_bucket": {
            "name": "test_s3_event_contains_bucket",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "s3_event": [
                    "Callable[[Dict], None]",
                    "typing.Callable[dict[, ], None]",
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_s3_event_contains_record": {
            "name": "test_s3_event_contains_record",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "s3_event": [
                    "str",
                    "Optional[Callable[[Any], None]]",
                    "typing.Callable[typing.Any, None]",
                    "Callable[[Dict], None]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "python-aws-dataclasses-master/tests/test_sns_event.py": {
        "sns_event_raw": {
            "name": "sns_event_raw",
            "location": 12,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "sns_event": {
            "name": "sns_event",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "sns_event_raw": [
                    "set",
                    "set[]",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_sns_record": {
            "name": "test_sns_record",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "sns_event": []
            }
        },
        "test_sns": {
            "name": "test_sns",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "sns_event": []
            }
        },
        "test_message_attributes": {
            "name": "test_message_attributes",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "sns_event": [
                    "str",
                    "typing.Callable[List,bool, None]",
                    "Callable[[List, bool], None]",
                    "Callable"
                ]
            }
        },
        "test_can_handle_missing_fields": {
            "name": "test_can_handle_missing_fields",
            "location": 44,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "sns_event_raw": []
            }
        },
        "test_can_handle_extra_fields": {
            "name": "test_can_handle_extra_fields",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "sns_event_raw": []
            }
        }
    },
    "python-aws-dataclasses-master/tests/util.py": {
        "get_event_dict": {
            "name": "get_event_dict",
            "location": 6,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "file": [
                    "str"
                ]
            }
        }
    },
    "python-aws-dataclasses-master/tests/__init__.py": {},
    "python-aws-dataclasses-master/tests/resources/__init__.py": {}
}
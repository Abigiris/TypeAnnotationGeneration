{
    "python-broqer-master/setup.py": {},
    "python-broqer-master/broqer/coro_queue.py": {
        "wrap_coro": {
            "name": "wrap_coro",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "coro": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "unpack": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "CoroQueue.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "coro": [
                    "int",
                    "float",
                    "List[str]",
                    "list[str]",
                    "Union[int, Tuple[int, int]]",
                    "tuple[typing.Union[int,int]]"
                ],
                "mode": [
                    "bool",
                    "int",
                    "Union[str, int]",
                    "float"
                ]
            }
        },
        "CoroQueue.schedule": {
            "name": "schedule",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoroQueue._start_task": {
            "name": "_start_task",
            "location": 95,
            "return": [
                "None",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "future": [
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "dict[str, typing.Any]",
                    "functools.partial",
                    "asyncio.AbstractEventLoop",
                    "Dict[str, Any]"
                ]
            }
        },
        "CoroQueue._handle_done": {
            "name": "_handle_done",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "result_future": [
                    "dict",
                    "List[Dict]",
                    "Optional[Any]",
                    "Type[Any]",
                    "Dict[str, Any]"
                ],
                "task": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "python-broqer-master/broqer/disposable.py": {
        "Disposable.dispose": {
            "name": "dispose",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Disposable.__enter__": {
            "name": "__enter__",
            "location": 28,
            "return": [
                "Disposable"
            ],
            "arguments": {
                "self": [
                    "_TDisposable"
                ]
            }
        },
        "Disposable.__exit__": {
            "name": "__exit__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_type": [
                    "Optional[Type[BaseException]]"
                ],
                "_value": [
                    "Optional[BaseException]"
                ],
                "_traceback": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ]
            }
        }
    },
    "python-broqer-master/broqer/error_handler.py": {
        "_default_error_callback": {
            "name": "_default_error_callback",
            "location": 11,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "exc_type": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[Callable[[bool], None]]",
                    "None",
                    "typing.Callable[bool, None]"
                ],
                "exc_value": [
                    "Optional[str]",
                    "bool",
                    "Hashable",
                    "str",
                    "Optional[Callable[[bool], None]]"
                ],
                "exc_traceback": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Hashable",
                    "typing.Hashable",
                    "Optional[Callable[[bool], None]]",
                    "typing.Callable[bool, None]"
                ]
            }
        },
        "DefaultErrorHandler.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultErrorHandler.__call__": {
            "name": "__call__",
            "location": 30,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "int",
                    "type",
                    "typing.Type"
                ],
                "exc_value": [
                    "int",
                    "type",
                    "typing.Type"
                ],
                "exc_traceback": [
                    "int",
                    "type",
                    "typing.Type"
                ]
            }
        },
        "DefaultErrorHandler.set": {
            "name": "set",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error_callback": [
                    "str",
                    "Optional[str]",
                    "Exception",
                    "None",
                    "Callable",
                    "typing.Callable[, ]",
                    "Dict[str, Optional[str]]",
                    "dict[str, typing.Union[str,None]]"
                ]
            }
        },
        "DefaultErrorHandler.reset": {
            "name": "reset",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-broqer-master/broqer/operator.py": {
        "Operator.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operator.originator": {
            "name": "originator",
            "location": 30,
            "return": [
                "",
                "dict[int, typing.Any]",
                "int",
                "dict[, ]",
                "str",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "publisher": [
                    "dict",
                    "int"
                ]
            }
        },
        "Operator.subscribe": {
            "name": "subscribe",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "subscriber": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "prepend": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Operator.unsubscribe": {
            "name": "unsubscribe",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subscriber": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Operator.notify": {
            "name": "notify",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "broqer.publisher.TValue",
                    "complex",
                    "tuple[typing.Union[str,int]]",
                    "Tuple[str, int]",
                    "list[]",
                    "list"
                ]
            }
        },
        "Operator.emit": {
            "name": "emit",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "broqer.publisher.TValue",
                    "complex",
                    "tuple[typing.Union[str,int]]",
                    "Tuple[str, int]",
                    "list[]",
                    "list"
                ],
                "who": [
                    "int",
                    "broqer.publisher.TValue",
                    "complex",
                    "tuple[typing.Union[str,int]]",
                    "Tuple[str, int]",
                    "list[]",
                    "list"
                ]
            }
        },
        "MultiOperator.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiOperator.subscribe": {
            "name": "subscribe",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "subscriber": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "prepend": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MultiOperator.unsubscribe": {
            "name": "unsubscribe",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subscriber": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "MultiOperator.notify": {
            "name": "notify",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "broqer.publisher.TValue",
                    "complex",
                    "tuple[typing.Union[str,int]]",
                    "Tuple[str, int]",
                    "list[]",
                    "list"
                ]
            }
        },
        "MultiOperator.emit": {
            "name": "emit",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "broqer.publisher.TValue",
                    "complex",
                    "tuple[typing.Union[str,int]]",
                    "Tuple[str, int]",
                    "list[]",
                    "list"
                ],
                "who": [
                    "int",
                    "broqer.publisher.TValue",
                    "complex",
                    "tuple[typing.Union[str,int]]",
                    "Tuple[str, int]",
                    "list[]",
                    "list"
                ]
            }
        }
    },
    "python-broqer-master/broqer/operator_overloading.py": {
        "apply_operator_overloading": {
            "name": "apply_operator_overloading",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "MapConstant.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "publisher": [
                    "str",
                    "bool",
                    "None",
                    "Union[None, str, int]",
                    "Optional[str]"
                ],
                "value": [
                    "float",
                    "str",
                    "int",
                    "Callable[[None], bool]",
                    "typing.Callable[None, bool]"
                ],
                "operation": [
                    "List[Tuple[int, float]]",
                    "int",
                    "list[tuple[typing.Union[int,float]]]",
                    "float",
                    "str"
                ]
            }
        },
        "MapConstant.get": {
            "name": "get",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapConstant.emit": {
            "name": "emit",
            "location": 26,
            "return": [
                "int",
                "str",
                "List[str]",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "typing.Iterable[]",
                    "Iterable",
                    "Dict[str, Any]",
                    "None",
                    "typing.Sequence[typing.Hashable]",
                    "Optional[bool]",
                    "typing.Sequence[T]",
                    "Sequence[Hashable]",
                    "Optional[Sequence[T]]"
                ],
                "who": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "MapConstantReverse.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "publisher": [
                    "str",
                    "bool",
                    "None",
                    "Union[None, str, int]",
                    "Optional[str]"
                ],
                "value": [
                    "float",
                    "str",
                    "int",
                    "Callable[[None], bool]",
                    "typing.Callable[None, bool]"
                ],
                "operation": [
                    "List[Tuple[int, float]]",
                    "int",
                    "list[tuple[typing.Union[int,float]]]",
                    "float",
                    "str"
                ]
            }
        },
        "MapConstantReverse.get": {
            "name": "get",
            "location": 46,
            "return": [
                "bool",
                "str",
                "Callable[[Any], bool]",
                "List[str]",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapConstantReverse.emit": {
            "name": "emit",
            "location": 49,
            "return": [
                "int",
                "str",
                "List[str]",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "typing.Iterable[]",
                    "Iterable",
                    "Dict[str, Any]",
                    "None",
                    "typing.Sequence[typing.Hashable]",
                    "Optional[bool]",
                    "typing.Sequence[T]",
                    "Sequence[Hashable]",
                    "Optional[Sequence[T]]"
                ],
                "who": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "MapUnary.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "publisher": [
                    "str",
                    "int",
                    "List[bytes]",
                    "list[bytes]"
                ],
                "operation": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MapUnary.get": {
            "name": "get",
            "location": 68,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapUnary.emit": {
            "name": "emit",
            "location": 71,
            "return": [
                "int",
                "str",
                "List[str]",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "list[T]",
                    "T",
                    "str",
                    "List[T]",
                    "bytes",
                    "Union[str, bytes]",
                    "list[]",
                    "Union[str, list]"
                ],
                "who": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "_GetAttr.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "publisher": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "attribute_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_GetAttr.get": {
            "name": "get",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_GetAttr.__call__": {
            "name": "__call__",
            "location": 97,
            "return": [
                "_GetAttr",
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_GetAttr.emit": {
            "name": "emit",
            "location": 102,
            "return": [
                "Dict[str, int]",
                "List[int]",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[bool, str]",
                    "bool",
                    "Union[str, bytes]",
                    "bytes",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "who": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "apply_operator_overloading._getattr": {
            "name": "_getattr",
            "location": 159,
            "return": [
                "_GetAttr",
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "publisher": [
                    "str"
                ],
                "attribute_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "apply_operator_overloading._op": {
            "name": "_op",
            "location": 143,
            "return": [
                "MapConstant",
                "int",
                "bytearray",
                "float"
            ],
            "arguments": {
                "operand_left": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "operand_right": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "operation": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "apply_operator_overloading._op_unary": {
            "name": "_op_unary",
            "location": 154,
            "return": [
                "MapUnary",
                "int",
                "bytearray",
                "float"
            ],
            "arguments": {
                "operand": [
                    "int",
                    "bytearray",
                    "float"
                ],
                "operation": [
                    "int",
                    "bytearray",
                    "float"
                ]
            }
        }
    },
    "python-broqer-master/broqer/publisher.py": {
        "Publisher.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init": [],
                "type_": [
                    "None",
                    "str",
                    "typing.Type",
                    "dict[, ]"
                ]
            }
        },
        "Publisher.subscribe": {
            "name": "subscribe",
            "location": 80,
            "return": [
                "SubscriptionDisposable"
            ],
            "arguments": {
                "self": [],
                "subscriber": [],
                "prepend": [
                    "bool"
                ]
            }
        },
        "Publisher.unsubscribe": {
            "name": "unsubscribe",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subscriber": [
                    "bool",
                    "str",
                    "float",
                    "typing.Sequence[int]"
                ]
            }
        },
        "Publisher.get": {
            "name": "get",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Publisher.notify": {
            "name": "notify",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "list[]",
                    "float"
                ]
            }
        },
        "Publisher.reset_state": {
            "name": "reset_state",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Publisher.subscriptions": {
            "name": "subscriptions",
            "location": 164,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Publisher.register_on_subscription_callback": {
            "name": "register_on_subscription_callback",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "int",
                    "str",
                    "list[str]"
                ]
            }
        },
        "Publisher.__await__": {
            "name": "__await__",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Publisher.as_future": {
            "name": "as_future",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": [
                    "bool",
                    "None"
                ],
                "omit_subscription": [
                    "bool"
                ],
                "loop": [
                    "None",
                    "bool"
                ]
            }
        },
        "Publisher.__bool__": {
            "name": "__bool__",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Publisher.__iter__": {
            "name": "__iter__",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Publisher.inherit_type": {
            "name": "inherit_type",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_cls": [
                    "str",
                    "list[typing.Any]",
                    "None"
                ]
            }
        },
        "Publisher.inherited_type": {
            "name": "inherited_type",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Publisher.dependencies": {
            "name": "dependencies",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Publisher.add_dependencies": {
            "name": "add_dependencies",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Publisher.__or__": {
            "name": "__or__",
            "location": 250,
            "return": [
                "int",
                "typing.Callable[, ]",
                "str"
            ],
            "arguments": {
                "self": [],
                "operator": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Publisher.__dir__": {
            "name": "__dir__",
            "location": 254,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubscriptionDisposable.__init__": {
            "name": "__init__",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "publisher": [
                    "int",
                    "float"
                ],
                "subscriber": [
                    "int",
                    "float"
                ]
            }
        },
        "SubscriptionDisposable.dispose": {
            "name": "dispose",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubscriptionDisposable.publisher": {
            "name": "publisher",
            "location": 276,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubscriptionDisposable.subscriber": {
            "name": "subscriber",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-broqer-master/broqer/subscriber.py": {
        "Subscriber.emit": {
            "name": "emit",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "broqer.publisher.TValue",
                    "complex",
                    "tuple[typing.Union[str,int]]",
                    "Tuple[str, int]",
                    "list[]",
                    "list"
                ],
                "who": [
                    "int",
                    "broqer.publisher.TValue",
                    "complex",
                    "tuple[typing.Union[str,int]]",
                    "Tuple[str, int]",
                    "list[]",
                    "list"
                ]
            }
        },
        "Subscriber.reset_state": {
            "name": "reset_state",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-broqer-master/broqer/timer.py": {
        "Timer.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "Optional[Callable[([], None)]]"
                ],
                "loop": [
                    "Optional[asyncio.base_events.BaseEventLoop]"
                ]
            }
        },
        "Timer.start": {
            "name": "start",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float"
                ],
                "args": [
                    "tuple[]"
                ]
            }
        },
        "Timer.change_arguments": {
            "name": "change_arguments",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "tuple[]"
                ]
            }
        },
        "Timer.cancel": {
            "name": "cancel",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.end_early": {
            "name": "end_early",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.is_running": {
            "name": "is_running",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer._trigger": {
            "name": "_trigger",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-broqer-master/broqer/types.py": {},
    "python-broqer-master/broqer/value.py": {
        "Value.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "init": [
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "bool"
                ]
            }
        },
        "Value.emit": {
            "name": "emit",
            "location": 26,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ],
                "who": [
                    "None",
                    "Optional[Union[str, Any]]",
                    "str",
                    "float",
                    "Optional[object]",
                    "typing.Any",
                    "Optional[bool]",
                    "bool",
                    "typing.Iterator",
                    "Optional[str]",
                    "VT",
                    "Iterator[T]",
                    "Optional[int]"
                ]
            }
        }
    },
    "python-broqer-master/broqer/__init__.py": {},
    "python-broqer-master/broqer/op/bitwise.py": {
        "map_bit": {
            "name": "map_bit",
            "location": 95,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "bit_index": [
                    "int",
                    "bool",
                    "Type",
                    "float",
                    "Dict[str, Any]",
                    "Tuple[float, float]",
                    "Optional[Pattern[str]]"
                ],
                "value": [
                    "int",
                    "bool",
                    "Type",
                    "float",
                    "Dict[str, Any]",
                    "Tuple[float, float]",
                    "Optional[Pattern[str]]"
                ]
            }
        },
        "BitwiseCombineLatest.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "publisher_bit_mapping": [
                    "str",
                    "bool",
                    "Union[str, dict]",
                    "dict[, ]",
                    "Mapping[str, str]",
                    "typing.Mapping"
                ],
                "init": [
                    "int",
                    "Callable",
                    "bool"
                ]
            }
        },
        "BitwiseCombineLatest.subscribe": {
            "name": "subscribe",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "subscriber": [
                    "str",
                    "List[float]",
                    "float",
                    "list[float]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "prepend": [
                    "bool",
                    "str",
                    "List[float]",
                    "List[Dict[str, Any]]",
                    "float"
                ]
            }
        },
        "BitwiseCombineLatest.unsubscribe": {
            "name": "unsubscribe",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subscriber": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "BitwiseCombineLatest.get": {
            "name": "get",
            "location": 51,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitwiseCombineLatest.emit": {
            "name": "emit",
            "location": 70,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "bool",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "broqer.publisher.TValue",
                    "complex",
                    "tuple[typing.Union[str,int]]",
                    "Tuple[str, int]",
                    "list[]",
                    "list"
                ],
                "who": [
                    "int",
                    "float",
                    "str",
                    "list[]",
                    "bool",
                    "list"
                ]
            }
        }
    },
    "python-broqer-master/broqer/op/cache.py": {
        "Cache.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init": [
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "bool"
                ]
            }
        },
        "Cache.get": {
            "name": "get",
            "location": 45,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cache.emit": {
            "name": "emit",
            "location": 51,
            "return": [
                "None",
                "int",
                "str",
                "bool",
                "Callable",
                "Dict[Tuple[str, str], Tuple[float, float]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "float",
                    "dict[, ]",
                    "dict",
                    "int",
                    "Union[float, int]"
                ],
                "who": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        }
    },
    "python-broqer-master/broqer/op/combine_latest.py": {
        "build_combine_latest": {
            "name": "build_combine_latest",
            "location": 127,
            "return": [
                "str"
            ],
            "arguments": {
                "map_": [
                    "Callable",
                    "str",
                    "None",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "CombineLatest.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombineLatest.unsubscribe": {
            "name": "unsubscribe",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subscriber": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "CombineLatest.get": {
            "name": "get",
            "location": 79,
            "return": [
                "bool",
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombineLatest.emit": {
            "name": "emit",
            "location": 93,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "List[int]",
                    "str",
                    "list[int]",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ],
                "who": [
                    "int",
                    "broqer.Publisher",
                    "dict[, ]",
                    "Optional[Dict]",
                    "None"
                ]
            }
        },
        "build_combine_latest._build_combine_latest": {
            "name": "_build_combine_latest",
            "location": 134,
            "return": [
                "bool"
            ],
            "arguments": {
                "map_": [
                    "bool",
                    "list",
                    "Iterable[str]"
                ]
            }
        },
        "build_combine_latest._build_combine_latest._wrapper": {
            "name": "_wrapper",
            "location": 136,
            "return": [
                "CombineLatest",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "python-broqer-master/broqer/op/filter_.py": {
        "build_filter": {
            "name": "build_filter",
            "location": 143,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "predicate": [
                    "Callable[[Any], bool]",
                    "None",
                    "Dict[str, Any]",
                    "typing.Callable[typing.Any, bool]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "build_filter_factory": {
            "name": "build_filter_factory",
            "location": 159,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "predicate": [
                    "Callable[[Any], bool]",
                    "None",
                    "Dict[str, Any]",
                    "typing.Callable[typing.Any, bool]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Filter.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predicate": [
                    "list[]",
                    "str",
                    "list",
                    "int",
                    "typing.Callable[, ]",
                    "Callable",
                    "dict[str, typing.Callable[[], None]]",
                    "Dict[str, Callable[[], None]]",
                    "typing.Sequence[str]",
                    "Sequence[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Filter.get": {
            "name": "get",
            "location": 49,
            "return": [
                "dict[str, str]",
                "Optional[str]",
                "bool",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "Optional[bool]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Filter.emit": {
            "name": "emit",
            "location": 68,
            "return": [
                "None",
                "float",
                "str",
                "dict",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "float"
                ],
                "who": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "EvalTrue.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "publisher": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "EvalTrue.get": {
            "name": "get",
            "location": 90,
            "return": [
                "Optional[bool]",
                "typing.Type",
                "Union[int, float]",
                "dict[str, typing.Any]",
                "Optional[List[\"custom_index\"]]",
                "tuple[]",
                "tuple",
                "dict[tuple[typing.Union[int,int]], str]",
                "bytes",
                "typing.Callable[[], typing.Any]",
                "Optional[str]",
                "dict[str, dict[str, typing.Any]]",
                "bool",
                "list[list[typing.Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EvalTrue.emit": {
            "name": "emit",
            "location": 103,
            "return": [
                "None",
                "int",
                "str",
                "bool",
                "Callable",
                "Dict[Tuple[str, str], Tuple[float, float]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "Collection[str]",
                    "typing.Collection"
                ],
                "who": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "EvalFalse.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "publisher": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "EvalFalse.get": {
            "name": "get",
            "location": 121,
            "return": [
                "Optional[bool]",
                "typing.Type",
                "Union[int, float]",
                "dict[str, typing.Any]",
                "Optional[List[\"custom_index\"]]",
                "tuple[]",
                "tuple",
                "dict[tuple[typing.Union[int,int]], str]",
                "bytes",
                "typing.Callable[[], typing.Any]",
                "Optional[str]",
                "dict[str, dict[str, typing.Any]]",
                "bool",
                "list[list[typing.Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EvalFalse.emit": {
            "name": "emit",
            "location": 134,
            "return": [
                "None",
                "int",
                "str",
                "bool",
                "Callable",
                "Dict[Tuple[str, str], Tuple[float, float]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "Collection[str]",
                    "typing.Collection"
                ],
                "who": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "build_filter._build_filter": {
            "name": "_build_filter",
            "location": 150,
            "return": [
                "Filter"
            ],
            "arguments": {
                "predicate": []
            }
        },
        "build_filter_factory._build_filter": {
            "name": "_build_filter",
            "location": 166,
            "return": [
                "bool",
                "Filter"
            ],
            "arguments": {
                "predicate": [
                    "bool",
                    "Callable[[Any], bool]",
                    "Sequence[str]",
                    "list",
                    "Iterable[str]"
                ]
            }
        },
        "build_filter_factory._build_filter._wrapper": {
            "name": "_wrapper",
            "location": 168,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "python-broqer-master/broqer/op/map_.py": {
        "build_map": {
            "name": "build_map",
            "location": 101,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "function": [
                    "None",
                    "Callable[..., None]",
                    "typing.Callable[..., None]",
                    "int",
                    "Callable",
                    "str",
                    "list[typing.Union[str,\"SqlFile\"]]",
                    "List[Union[str, \"SqlFile\"]]",
                    "bool"
                ]
            }
        },
        "build_map_factory": {
            "name": "build_map_factory",
            "location": 117,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "function": [
                    "None",
                    "Callable[..., None]",
                    "typing.Callable[..., None]",
                    "int",
                    "Callable",
                    "str",
                    "list[typing.Union[str,\"SqlFile\"]]",
                    "List[Union[str, \"SqlFile\"]]",
                    "bool"
                ],
                "unpack": [
                    "bool",
                    "Callable",
                    "float",
                    "Callable[..., T]"
                ]
            }
        },
        "Map.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Map.get": {
            "name": "get",
            "location": 67,
            "return": [
                "NONE",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map.emit": {
            "name": "emit",
            "location": 85,
            "return": [
                "None",
                "list",
                "Optional[str]",
                "Optional[BaseException]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "list[]",
                    "str",
                    "broqer.publisher.TValue",
                    "list"
                ],
                "who": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "build_map._build_map": {
            "name": "_build_map",
            "location": 108,
            "return": [
                "Map"
            ],
            "arguments": {
                "function": []
            }
        },
        "build_map_factory._build_map": {
            "name": "_build_map",
            "location": 124,
            "return": [
                "bool",
                "Map"
            ],
            "arguments": {
                "function": [
                    "bool",
                    "Callable",
                    "float",
                    "Callable[..., T]"
                ]
            }
        },
        "build_map_factory._build_map._wrapper": {
            "name": "_wrapper",
            "location": 126,
            "return": [
                "str",
                "tuple",
                "bool"
            ],
            "arguments": {}
        }
    },
    "python-broqer-master/broqer/op/map_async.py": {
        "build_map_async": {
            "name": "build_map_async",
            "location": 151,
            "return": [
                "str"
            ],
            "arguments": {
                "coro": [
                    "int",
                    "float",
                    "None"
                ]
            }
        },
        "build_map_async_factory": {
            "name": "build_map_async_factory",
            "location": 172,
            "return": [
                "str"
            ],
            "arguments": {
                "coro": [
                    "int",
                    "float",
                    "None"
                ]
            }
        },
        "MapAsync.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coro": [
                    "Sequence[Any]",
                    "bool",
                    "typing.Sequence[typing.Any]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "MapAsync.emit": {
            "name": "emit",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "float",
                    "int",
                    "list[str]",
                    "List[str]"
                ],
                "who": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "MapAsync._done": {
            "name": "_done",
            "location": 141,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "future": [
                    "asyncio.Task[None]",
                    "Dict[str, Dict[str, int]]",
                    "Dict[str, Any]",
                    "asyncio.Future",
                    "Sequence['cirq.Qid']"
                ]
            }
        },
        "build_map_async._build_map_async": {
            "name": "_build_map_async",
            "location": 162,
            "return": [
                "MapAsync"
            ],
            "arguments": {
                "coro": []
            }
        },
        "build_map_async_factory._build_map_async": {
            "name": "_build_map_async",
            "location": 186,
            "return": [
                "bool",
                "MapAsync"
            ],
            "arguments": {
                "coro": [
                    "bool",
                    "list",
                    "Iterable[str]"
                ]
            }
        },
        "build_map_async_factory._build_map_async._wrapper": {
            "name": "_wrapper",
            "location": 188,
            "return": [
                "str",
                "tuple"
            ],
            "arguments": {}
        }
    },
    "python-broqer-master/broqer/op/py_operators.py": {
        "_in": {
            "name": "_in",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "item": [
                    "type",
                    "typing.Type",
                    "Exception",
                    "Optional[str]",
                    "str",
                    "None",
                    "Sized",
                    "typing.Sized"
                ],
                "container": [
                    "str",
                    "type",
                    "Optional[str]",
                    "Exception",
                    "Sized"
                ]
            }
        },
        "_all": {
            "name": "_all",
            "location": 83,
            "return": [
                "bool",
                "List[str]",
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "_any": {
            "name": "_any",
            "location": 97,
            "return": [
                "bool",
                "list",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {}
        },
        "_bitwise_or": {
            "name": "_bitwise_or",
            "location": 111,
            "return": [
                "str",
                "DefaultDict[int, List[Any]]",
                "OrderedDict"
            ],
            "arguments": {}
        },
        "_bitwise_and": {
            "name": "_bitwise_and",
            "location": 124,
            "return": [
                "str",
                "DefaultDict[int, List[Any]]",
                "OrderedDict"
            ],
            "arguments": {}
        },
        "Str.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "publisher": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Union[str, Dict[str, str]]",
                    "dict[str, str]"
                ]
            }
        },
        "Bool.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "publisher": [
                    "str",
                    "bool",
                    "Union[str, dict]",
                    "dict[, ]"
                ]
            }
        },
        "Not.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "publisher": []
            }
        },
        "Int.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "publisher": [
                    "str",
                    "bool",
                    "Union[str, dict]",
                    "dict[, ]"
                ]
            }
        },
        "Float.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "publisher": [
                    "str",
                    "bool",
                    "Union[str, dict]",
                    "dict[, ]"
                ]
            }
        },
        "Repr.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "publisher": [
                    "str",
                    "bool",
                    "Union[str, dict]",
                    "dict[, ]"
                ]
            }
        },
        "Len.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "publisher": [
                    "str",
                    "bool",
                    "Union[str, dict]",
                    "dict[, ]"
                ]
            }
        },
        "In.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "container": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "All.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Any.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitwiseOr.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitwiseAnd.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-broqer-master/broqer/op/throttle.py": {
        "Throttle.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "duration": [
                    "int",
                    "float",
                    "bool",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "error_callback": [
                    "int",
                    "bool",
                    "List[str]",
                    "Optional[List[str]]",
                    "float"
                ],
                "loop": [
                    "bool",
                    "None",
                    "str",
                    "Optional[asyncio.AbstractEventLoop]"
                ]
            }
        },
        "Throttle.get": {
            "name": "get",
            "location": 53,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Throttle.emit": {
            "name": "emit",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[float]",
                    "list[float]",
                    "tuple",
                    "tuple[]",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[List[Any]]",
                    "None",
                    "Callable[..., None]",
                    "typing.Callable[..., None]"
                ],
                "who": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Throttle._delayed_emit_cb": {
            "name": "_delayed_emit_cb",
            "location": 65,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]",
                    "T",
                    "str",
                    "bytes",
                    "Optional[bytes]"
                ]
            }
        },
        "Throttle.reset": {
            "name": "reset",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-broqer-master/broqer/op/__init__.py": {},
    "python-broqer-master/broqer/publishers/poll.py": {
        "PollPublisher.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "poll_cb": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ],
                "interval": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "PollPublisher.subscribe": {
            "name": "subscribe",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "subscriber": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "prepend": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PollPublisher.unsubscribe": {
            "name": "unsubscribe",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subscriber": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "PollPublisher._poll": {
            "name": "_poll",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PollPublisher.notify": {
            "name": "notify",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "broqer.publisher.TValue",
                    "complex",
                    "tuple[typing.Union[str,int]]",
                    "Tuple[str, int]",
                    "list[]",
                    "list"
                ]
            }
        }
    },
    "python-broqer-master/broqer/publishers/__init__.py": {},
    "python-broqer-master/broqer/subscribers/on_emit_future.py": {
        "OnEmitFuture.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "publisher": [
                    "int",
                    "float",
                    "str"
                ],
                "timeout": [
                    "str",
                    "None",
                    "bool",
                    "Sequence[str]",
                    "Dict[str, Any]",
                    "typing.Sequence[str]",
                    "dict[str, typing.Any]"
                ],
                "omit_subscription": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ],
                "loop": [
                    "Optional[float]",
                    "None",
                    "float"
                ]
            }
        },
        "OnEmitFuture._cleanup": {
            "name": "_cleanup",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_future": [
                    "int",
                    "None",
                    "str",
                    "Iterable['Context']",
                    "typing.Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "OnEmitFuture.emit": {
            "name": "emit",
            "location": 64,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "Union[str, list]",
                    "list[]"
                ],
                "who": [
                    "bool",
                    "None",
                    "str",
                    "int"
                ]
            }
        }
    },
    "python-broqer-master/broqer/subscribers/sink.py": {
        "build_sink": {
            "name": "build_sink",
            "location": 66,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "function": [
                    "None",
                    "Callable[..., None]",
                    "typing.Callable[..., None]",
                    "int",
                    "Callable",
                    "str",
                    "list[typing.Union[str,S]]",
                    "List[Union[str, \"SqlFile\"]]",
                    "bool"
                ]
            }
        },
        "build_sink_factory": {
            "name": "build_sink_factory",
            "location": 82,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "function": [
                    "None",
                    "Callable[..., None]",
                    "typing.Callable[..., None]",
                    "int",
                    "Callable",
                    "str",
                    "list[typing.Union[str,S]]",
                    "List[Union[str, \"SqlFile\"]]",
                    "bool"
                ]
            }
        },
        "sink_property": {
            "name": "sink_property",
            "location": 102,
            "return": [
                "str",
                "int",
                "bool",
                "Union[str, bytes]"
            ],
            "arguments": {
                "function": [
                    "None",
                    "Callable",
                    "bool",
                    "typing.Callable[, ]",
                    "Callable[..., None]",
                    "list[]",
                    "...",
                    "set[]",
                    "list",
                    "set"
                ],
                "unpack": [
                    "bool",
                    "Callable",
                    "Optional[Callable]",
                    "List[str]",
                    "list",
                    "tuple"
                ]
            }
        },
        "Sink.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "str",
                    "None",
                    "int",
                    "Type",
                    "typing.Type",
                    "Callable",
                    "Union",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Sink.emit": {
            "name": "emit",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[None, str, bytes]",
                    "None",
                    "Dict[type, Callable]",
                    "Union[int, float]",
                    "bytes",
                    "type",
                    "dict[typing.Type, typing.Callable[, ]]",
                    "int",
                    "float",
                    "typing.Type"
                ],
                "who": [
                    "int",
                    "broqer.publisher.TValue",
                    "complex",
                    "tuple[typing.Union[str,int]]",
                    "Tuple[str, int]",
                    "list[]",
                    "list"
                ]
            }
        },
        "build_sink._build_sink": {
            "name": "_build_sink",
            "location": 73,
            "return": [
                "Sink"
            ],
            "arguments": {
                "function": []
            }
        },
        "build_sink_factory._build_sink": {
            "name": "_build_sink",
            "location": 88,
            "return": [
                "Sink"
            ],
            "arguments": {
                "function": []
            }
        },
        "sink_property.build_sink_property": {
            "name": "build_sink_property",
            "location": 107,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "function": [
                    "List[str]",
                    "list",
                    "Callable"
                ]
            }
        },
        "build_sink_factory._build_sink._wrapper": {
            "name": "_wrapper",
            "location": 90,
            "return": [
                "str",
                "tuple",
                "bool"
            ],
            "arguments": {}
        },
        "sink_property.build_sink_property._build_sink": {
            "name": "_build_sink",
            "location": 109,
            "return": [
                "Sink",
                "Sequence['cirq.Qid']",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-broqer-master/broqer/subscribers/sink_async.py": {
        "build_sink_async": {
            "name": "build_sink_async",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "coro": [
                    "int",
                    "None",
                    "bytes",
                    "List[int]",
                    "type",
                    "list[int]",
                    "typing.Type"
                ]
            }
        },
        "build_sink_async_factory": {
            "name": "build_sink_async_factory",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "coro": [
                    "int",
                    "float",
                    "None"
                ]
            }
        },
        "sink_async_property": {
            "name": "sink_async_property",
            "location": 109,
            "return": [
                "str",
                "Optional[str]",
                "List[str]",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "coro": [
                    "None",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "float",
                    "Callable[..., None]",
                    "int",
                    "typing.Callable[..., None]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "SinkAsync.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coro": [
                    "Sequence[Any]",
                    "bool",
                    "typing.Sequence[typing.Any]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "SinkAsync.emit": {
            "name": "emit",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "float",
                    "Iterable[T_co]",
                    "typing.Iterable[T_co]"
                ],
                "who": [
                    "int",
                    "broqer.publisher.TValue",
                    "complex",
                    "tuple[typing.Union[str,int]]",
                    "Tuple[str, int]",
                    "list[]",
                    "list"
                ]
            }
        },
        "build_sink_async._build_sink_async": {
            "name": "_build_sink_async",
            "location": 69,
            "return": [
                "SinkAsync"
            ],
            "arguments": {
                "coro": []
            }
        },
        "build_sink_async_factory._build_sink_async": {
            "name": "_build_sink_async",
            "location": 90,
            "return": [
                "SinkAsync"
            ],
            "arguments": {
                "coro": []
            }
        },
        "sink_async_property.build_sink_async_property": {
            "name": "build_sink_async_property",
            "location": 120,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "coro": [
                    "bool",
                    "str",
                    "int",
                    "bytes",
                    "Iterable[dict]"
                ]
            }
        },
        "build_sink_async_factory._build_sink_async._wrapper": {
            "name": "_wrapper",
            "location": 92,
            "return": [
                "IO[str]"
            ],
            "arguments": {}
        },
        "sink_async_property.build_sink_async_property._build_sink_async": {
            "name": "_build_sink_async",
            "location": 122,
            "return": [
                "Iterable[str]",
                "SinkAsync"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-broqer-master/broqer/subscribers/trace.py": {
        "Trace.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "Optional[Callable[..., None]]",
                    "None",
                    "Callable",
                    "typing.Callable[..., None]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Trace.emit": {
            "name": "emit",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "str"
                ],
                "who": [
                    "bool",
                    "str"
                ]
            }
        },
        "Trace.set_handler": {
            "name": "set_handler",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "bool",
                    "dict[, ]"
                ],
                "handler": [
                    "dict",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "Trace._trace_handler": {
            "name": "_trace_handler",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "publisher": [
                    "str",
                    "Publisher",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "tuple[typing.Union[str,str]]",
                    "Tuple[str, str]",
                    "Optional[Iterable[str]]"
                ],
                "value": [
                    "typing.Sequence[bytes]",
                    "Sequence[bytes]",
                    "bool",
                    "bytes",
                    "T"
                ],
                "label": [
                    "None",
                    "Publisher",
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "tuple[typing.Union[str,str]]",
                    "Tuple[str, str]",
                    "Optional[Iterable[str]]"
                ]
            }
        }
    },
    "python-broqer-master/broqer/subscribers/__init__.py": {},
    "python-broqer-master/docs/conf.py": {
        "setup": {
            "name": "setup",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "ClassDocDocumenter.add_directive_header": {
            "name": "add_directive_header",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sig": []
            }
        }
    },
    "python-broqer-master/examples/await.py": {},
    "python-broqer-master/examples/from_polling.py": {},
    "python-broqer-master/examples/pipeline.py": {},
    "python-broqer-master/tests/eventloop.py": {
        "_format_handle": {
            "name": "_format_handle",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "handle": []
            }
        },
        "_run_until_complete_cb": {
            "name": "_run_until_complete_cb",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "fut": []
            }
        },
        "isfuture": {
            "name": "isfuture",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": []
            }
        },
        "VirtualTimeEventLoop.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualTimeEventLoop.run_forever": {
            "name": "run_forever",
            "location": 54,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualTimeEventLoop.run_until_complete": {
            "name": "run_until_complete",
            "location": 71,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "future": []
            }
        },
        "VirtualTimeEventLoop.stop": {
            "name": "stop",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualTimeEventLoop.close": {
            "name": "close",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualTimeEventLoop.is_closed": {
            "name": "is_closed",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualTimeEventLoop.is_running": {
            "name": "is_running",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualTimeEventLoop.call_later": {
            "name": "call_later",
            "location": 130,
            "return": [
                "asyncio.events.TimerHandle"
            ],
            "arguments": {
                "self": [],
                "delay": [],
                "callback": []
            }
        },
        "VirtualTimeEventLoop.call_at": {
            "name": "call_at",
            "location": 136,
            "return": [
                "asyncio.events.TimerHandle"
            ],
            "arguments": {
                "self": [],
                "when": [],
                "callback": []
            }
        },
        "VirtualTimeEventLoop.call_soon": {
            "name": "call_soon",
            "location": 144,
            "return": [
                "asyncio.events.Handle"
            ],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "VirtualTimeEventLoop._call_soon": {
            "name": "_call_soon",
            "location": 150,
            "return": [
                "asyncio.events.Handle"
            ],
            "arguments": {
                "self": [],
                "callback": [],
                "args": []
            }
        },
        "VirtualTimeEventLoop.call_soon_threadsafe": {
            "name": "call_soon_threadsafe",
            "location": 160,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "VirtualTimeEventLoop.time": {
            "name": "time",
            "location": 163,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualTimeEventLoop.create_future": {
            "name": "create_future",
            "location": 166,
            "return": [
                "asyncio.futures.Future[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualTimeEventLoop.create_task": {
            "name": "create_task",
            "location": 170,
            "return": [
                "asyncio.tasks.Task"
            ],
            "arguments": {
                "self": [],
                "coro": []
            }
        },
        "VirtualTimeEventLoop.default_exception_handler": {
            "name": "default_exception_handler",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "VirtualTimeEventLoop.call_exception_handler": {
            "name": "call_exception_handler",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "VirtualTimeEventLoop.get_debug": {
            "name": "get_debug",
            "location": 267,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualTimeEventLoop._run_once": {
            "name": "_run_once",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualTimeEventLoop._check_closed": {
            "name": "_check_closed",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualTimeEventLoop._timer_handle_cancelled": {
            "name": "_timer_handle_cancelled",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handle": []
            }
        }
    },
    "python-broqer-master/tests/helper_multi.py": {
        "check_get_method": {
            "name": "check_get_method",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "operator": [
                    "str",
                    "bool",
                    "Union[bytes, str]"
                ],
                "input_vector": [
                    "str"
                ],
                "output_vector": [
                    "str"
                ]
            }
        },
        "check_subscription": {
            "name": "check_subscription",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "operator": [
                    "int"
                ],
                "input_vector": [
                    "Iterable[Iterable[float]]",
                    "Iterable[float]",
                    "bool"
                ],
                "output_vector": [
                    "str",
                    "int",
                    "list[int]",
                    "Optional[float]",
                    "List[int]"
                ]
            }
        },
        "check_dependencies": {
            "name": "check_dependencies",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "operator": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "python-broqer-master/tests/helper_single.py": {
        "check_get_method": {
            "name": "check_get_method",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "operator": [
                    "int",
                    "str",
                    "bool",
                    "float"
                ],
                "input_vector": [
                    "str"
                ],
                "output_vector": [
                    "str"
                ]
            }
        },
        "check_subscription": {
            "name": "check_subscription",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "operator": [
                    "int",
                    "bool",
                    "Sequence[int]",
                    "float"
                ],
                "input_vector": [
                    "list[int]",
                    "str",
                    "List[int]",
                    "int",
                    "bool"
                ],
                "output_vector": [
                    "int"
                ]
            }
        },
        "check_dependencies": {
            "name": "check_dependencies",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "operator": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        }
    },
    "python-broqer-master/tests/test_core_disposable.py": {
        "test_disposable": {
            "name": "test_disposable",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_subscription_disposable": {
            "name": "test_subscription_disposable",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_disposable.MyDisposable.dispose": {
            "name": "dispose",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-broqer-master/tests/test_core_publisher.py": {
        "test_subscribe": {
            "name": "test_subscribe",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_get": {
            "name": "test_get",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "init": []
            }
        },
        "test_notify": {
            "name": "test_notify",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "init": [
                    "str",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "number_of_subscribers": [
                    "float",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_subscription_callback": {
            "name": "test_subscription_callback",
            "location": 129,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prepend": {
            "name": "test_prepend",
            "location": 170,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_reset_state": {
            "name": "test_reset_state",
            "location": 191,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "python-broqer-master/tests/test_core_publisher_operators.py": {
        "test_operator_with_publishers": {
            "name": "test_operator_with_publishers",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_operator_with_constant": {
            "name": "test_operator_with_constant",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_operator_with_constant_r": {
            "name": "test_operator_with_constant_r",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_with_publisher": {
            "name": "test_with_publisher",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "operator": [
                    "typing.Callable[, ]"
                ],
                "l_value": [],
                "r_value": [
                    "typing.Callable[, ]"
                ],
                "result": [
                    "dict[, ]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_wrong_comparision": {
            "name": "test_wrong_comparision",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mod_str": {
            "name": "test_mod_str",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_concat": {
            "name": "test_concat",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_getitem": {
            "name": "test_getitem",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unary_operators": {
            "name": "test_unary_operators",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "operator": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "typing.Mapping"
                ],
                "value": [
                    "str",
                    "typing.Callable[str, bool]",
                    "list[str]",
                    "dict[, ]",
                    "dict[str, str]"
                ],
                "result": [
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_in_operator": {
            "name": "test_in_operator",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_getattr_method": {
            "name": "test_getattr_method",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_inherit_getattr": {
            "name": "test_inherit_getattr",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_inherit_with_operators": {
            "name": "test_inherit_with_operators",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_getattr_attribute": {
            "name": "test_getattr_attribute",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_getattr_without_inherit": {
            "name": "test_getattr_without_inherit",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multi_operators": {
            "name": "test_multi_operators",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "operator": [
                    "str",
                    "int"
                ],
                "values": [
                    "str",
                    "list[]"
                ],
                "result": [
                    "str",
                    "None",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_getattr_attribute.Foo.__init__": {
            "name": "__init__",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int"
                ]
            }
        },
        "test_getattr_without_inherit.Foo.__init__": {
            "name": "__init__",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int"
                ]
            }
        }
    },
    "python-broqer-master/tests/test_coro_queue.py": {},
    "python-broqer-master/tests/test_error_handler.py": {
        "test_default": {
            "name": "test_default",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "str"
                ]
            }
        },
        "test_set_errorhandler": {
            "name": "test_set_errorhandler",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "python-broqer-master/tests/test_op_bitwise.py": {
        "test_bitwise_combine_latest": {
            "name": "test_bitwise_combine_latest",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "method": [
                    "int",
                    "bytes",
                    "List[int]",
                    "str",
                    "list[int]"
                ],
                "init": [
                    "int",
                    "str",
                    "float",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode",
                    "Union[str, float]"
                ],
                "bit_value_map": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "Optional[Any]"
                ],
                "input_vector": [
                    "List[str]",
                    "str",
                    "Iterable[str]"
                ],
                "output_vector": [
                    "int",
                    "bytes",
                    "List[int]",
                    "str",
                    "list[int]"
                ]
            }
        },
        "test_bitwise_uninitialized_publishers": {
            "name": "test_bitwise_uninitialized_publishers",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_map_bit": {
            "name": "test_map_bit",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "method": [
                    "typing.Iterable[typing.Iterable[float]]",
                    "int",
                    "Iterable[Iterable[float]]",
                    "typing.Iterable[float]",
                    "List[int]",
                    "Iterable[float]"
                ],
                "bit_index": [
                    "int",
                    "float",
                    "str",
                    "bytes"
                ],
                "input_vector": [
                    "typing.Iterable[typing.Iterable[float]]",
                    "int",
                    "Iterable[Iterable[float]]",
                    "typing.Iterable[float]",
                    "List[int]",
                    "Iterable[float]"
                ],
                "output_vector": [
                    "typing.Iterable[typing.Iterable[float]]",
                    "int",
                    "Iterable[Iterable[float]]",
                    "typing.Iterable[float]",
                    "List[int]",
                    "Iterable[float]"
                ]
            }
        }
    },
    "python-broqer-master/tests/test_op_combine_latest.py": {
        "test_operator": {
            "name": "test_operator",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "method": [
                    "Iterable[Iterable[float]]",
                    "int",
                    "typing.Iterable[typing.Iterable[float]]",
                    "Iterable[float]",
                    "typing.Iterable[float]"
                ],
                "o": [
                    "str",
                    "int",
                    "bytes"
                ],
                "args": [],
                "kwargs": [],
                "input_vector": [
                    "list[float]",
                    "bytes",
                    "str",
                    "float",
                    "List[float]",
                    "bool",
                    "int",
                    "Exception"
                ],
                "output_vector": [
                    "Iterable[Iterable[float]]",
                    "int",
                    "typing.Iterable[typing.Iterable[float]]",
                    "Iterable[float]",
                    "typing.Iterable[float]"
                ]
            }
        },
        "test_emit_on": {
            "name": "test_emit_on",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "factory": [
                    "bool",
                    "str",
                    "float",
                    "int"
                ],
                "flags": [
                    "str",
                    "bytes",
                    "dict"
                ]
            }
        },
        "test_unsubscibe": {
            "name": "test_unsubscibe",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "subscribe": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ]
            }
        }
    },
    "python-broqer-master/tests/test_op_filter.py": {
        "test_operator": {
            "name": "test_operator",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "method": [
                    "Iterable[Iterable[float]]",
                    "int",
                    "typing.Iterable[typing.Iterable[float]]",
                    "Iterable[float]",
                    "typing.Iterable[float]"
                ],
                "o": [
                    "List[dict]",
                    "list[dict[, ]]",
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "Dict[str, float]",
                    "dict[str, float]",
                    "List[str]",
                    "list[str]"
                ],
                "args": [],
                "kwargs": [],
                "input_vector": [
                    "Iterable[Iterable[float]]",
                    "int",
                    "typing.Iterable[typing.Iterable[float]]",
                    "Iterable[float]",
                    "typing.Iterable[float]"
                ],
                "output_vector": [
                    "Iterable[Iterable[float]]",
                    "int",
                    "typing.Iterable[typing.Iterable[float]]",
                    "Iterable[float]",
                    "typing.Iterable[float]"
                ]
            }
        },
        "test_true_false": {
            "name": "test_true_false",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "method": [
                    "list[]",
                    "str",
                    "list",
                    "int",
                    "dict[str, typing.Sequence[str]]",
                    "bool",
                    "Dict[str, Sequence[str]]"
                ],
                "o": [
                    "list[]",
                    "str",
                    "list",
                    "int",
                    "dict[str, typing.Sequence[str]]",
                    "bool",
                    "Dict[str, Sequence[str]]"
                ],
                "input_vector": [
                    "list[]",
                    "str",
                    "list",
                    "int",
                    "dict[str, typing.Sequence[str]]",
                    "bool",
                    "Dict[str, Sequence[str]]"
                ],
                "output_vector": [
                    "list[]",
                    "str",
                    "list",
                    "int",
                    "dict[str, typing.Sequence[str]]",
                    "bool",
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_filter_factory_keyword": {
            "name": "test_filter_factory_keyword",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "python-broqer-master/tests/test_op_map.py": {
        "add": {
            "name": "add",
            "location": 7,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "List[int]",
                    "list[int]"
                ],
                "b": [
                    "int",
                    "List[int]",
                    "list[int]"
                ],
                "c": [
                    "int",
                    "List[int]",
                    "list[int]"
                ],
                "constant": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "test_operator": {
            "name": "test_operator",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "method": [
                    "Iterable[Iterable[float]]",
                    "int",
                    "typing.Iterable[typing.Iterable[float]]",
                    "Iterable[float]",
                    "typing.Iterable[float]"
                ],
                "o": [
                    "List[dict]",
                    "list[dict[, ]]",
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "Dict[str, float]",
                    "dict[str, float]",
                    "List[str]",
                    "list[str]"
                ],
                "args": [],
                "kwargs": [],
                "input_vector": [
                    "Iterable[Iterable[float]]",
                    "int",
                    "typing.Iterable[typing.Iterable[float]]",
                    "Iterable[float]",
                    "typing.Iterable[float]"
                ],
                "output_vector": [
                    "Iterable[Iterable[float]]",
                    "int",
                    "typing.Iterable[typing.Iterable[float]]",
                    "Iterable[float]",
                    "typing.Iterable[float]"
                ]
            }
        },
        "test_map_factory_keyword": {
            "name": "test_map_factory_keyword",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_two_maps": {
            "name": "test_two_maps",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "python-broqer-master/tests/test_op_on_emit_future.py": {
        "event_loop": {
            "name": "event_loop",
            "location": 9,
            "return": [
                "",
                "typing.Generator[VirtualTimeEventLoop]"
            ],
            "arguments": {}
        },
        "test_publisher": {
            "name": "test_publisher",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_wrong_source": {
            "name": "test_wrong_source",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "python-broqer-master/tests/test_op_sink.py": {
        "test_sink": {
            "name": "test_sink",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "operator_cls": [
                    "str",
                    "bytes",
                    "bool",
                    "IO[bytes]",
                    "typing.IO",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_sink2": {
            "name": "test_sink2",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "operator_cls": [
                    "bool",
                    "float",
                    "bytes",
                    "Optional[bool]",
                    "None",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "test_sink_without_function": {
            "name": "test_sink_without_function",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "operator_cls": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "IO[bytes]",
                    "typing.IO",
                    "TextIO",
                    "typing.TextIO",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "test_sink_on_subscription": {
            "name": "test_sink_on_subscription",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "operator": []
            }
        },
        "test_sink_partial": {
            "name": "test_sink_partial",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "operator_cls": [
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "dict",
                    "int",
                    "dict[, ]",
                    "List[str]",
                    "list[str]",
                    "IO",
                    "typing.IO"
                ]
            }
        },
        "test_build": {
            "name": "test_build",
            "location": 141,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "build_kwargs": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[dict]",
                    "dict[, ]"
                ],
                "init_args": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "Iterable[str]"
                ],
                "init_kwargs": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "Iterable[str]"
                ],
                "ref_args": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "ref_kwargs": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "exception": [
                    "str",
                    "int",
                    "list[]",
                    "list",
                    "list[str]",
                    "dict[str, dict[, ]]",
                    "List[str]",
                    "typing.Callable[str, None]",
                    "Dict[str, Dict]",
                    "Callable[[str], None]",
                    "Callable[[float], float]",
                    "bool"
                ]
            }
        }
    },
    "python-broqer-master/tests/test_op_throttle.py": {
        "event_loop": {
            "name": "event_loop",
            "location": 12,
            "return": [
                "",
                "typing.Generator[VirtualTimeEventLoop]"
            ],
            "arguments": {}
        },
        "test_argument_check": {
            "name": "test_argument_check",
            "location": 136,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "python-broqer-master/tests/test_publishers_poll.py": {
        "event_loop": {
            "name": "event_loop",
            "location": 12,
            "return": [
                "",
                "typing.Generator[VirtualTimeEventLoop]"
            ],
            "arguments": {}
        }
    },
    "python-broqer-master/tests/__init__.py": {}
}
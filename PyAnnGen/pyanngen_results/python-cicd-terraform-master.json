{
    "python-cicd-terraform-master/example/src/setup.py": {},
    "python-cicd-terraform-master/example/src/docs/source/conf.py": {},
    "python-cicd-terraform-master/example/src/py_pkg/curves.py": {
        "equil_price": {
            "name": "equil_price",
            "location": 142,
            "return": [
                "None",
                "bool",
                "Type",
                "Sequence[int]",
                "numpy.ndarray"
            ],
            "arguments": {
                "s": [],
                "d": []
            }
        },
        "equil_price_ranges": {
            "name": "equil_price_ranges",
            "location": 173,
            "return": [
                "PriceRanges",
                "float",
                "int",
                "bool",
                "Tuple[numpy.ndarray, numpy.ndarray]",
                "tuple"
            ],
            "arguments": {
                "s": [
                    "bool",
                    "set[str]",
                    "Set[str]",
                    "numpy.ndarray"
                ],
                "d": [
                    "bool",
                    "set[str]",
                    "Set[str]",
                    "numpy.ndarray"
                ]
            }
        },
        "SupplyCurve.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "\"ks.Series\"",
                    "dict[str, typing.Any]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "SupplyCurve.__eq__": {
            "name": "__eq__",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SupplyCurve.quantity": {
            "name": "quantity",
            "location": 57,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "price": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "DemandCurve.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "\"ks.Series\"",
                    "dict[str, typing.Any]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "DemandCurve.__eq__": {
            "name": "__eq__",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DemandCurve.quantity": {
            "name": "quantity",
            "location": 110,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "price": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "SupplyMonotonicityError.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DemandMonotonicityError.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Equilibrium.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "supply_curve": [
                    "float",
                    "bytes",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "demand_curve": [
                    "float",
                    "bytes",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Equilibrium.__eq__": {
            "name": "__eq__",
            "location": 242,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[int, int, int]",
                    "tuple[typing.Union[int,int,int]]"
                ]
            }
        },
        "EconShockScenario.__init__": {
            "name": "__init__",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "supply_shock": [
                    "int",
                    "bool",
                    "float"
                ],
                "demand_shock": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "EconShockScenario.__repr__": {
            "name": "__repr__",
            "location": 275,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "EconShockScenario.apply": {
            "name": "apply",
            "location": 282,
            "return": [
                "Curve",
                "None"
            ],
            "arguments": {
                "self": [],
                "curve": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "NoneShock.apply": {
            "name": "apply",
            "location": 299,
            "return": [
                "int",
                "str",
                "Callable",
                "typing.Iterable['Context']"
            ],
            "arguments": {
                "self": [],
                "curve": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "HorizPriceShock.apply": {
            "name": "apply",
            "location": 309,
            "return": [
                "SupplyCurve",
                "int",
                "DemandCurve",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "curve": [
                    "float",
                    "str"
                ]
            }
        }
    },
    "python-cicd-terraform-master/example/src/py_pkg/entry_points.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                "None",
                "Optional[str]",
                "Optional[bool]",
                "Optional[Any]",
                "List[str]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "install_template_from_github": {
            "name": "install_template_from_github",
            "location": 33,
            "return": [
                "None",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        }
    },
    "python-cicd-terraform-master/example/src/py_pkg/__init__.py": {},
    "python-cicd-terraform-master/example/src/py_pkg/__version__.py": {},
    "python-cicd-terraform-master/example/src/source/conf.py": {},
    "python-cicd-terraform-master/example/src/tests/conftest.py": {
        "load_test_data": {
            "name": "load_test_data",
            "location": 19,
            "return": [
                "dict",
                "str",
                "Callable"
            ],
            "arguments": {}
        },
        "supply_curve": {
            "name": "supply_curve",
            "location": 35,
            "return": [
                "bool",
                "SupplyCurve"
            ],
            "arguments": {}
        },
        "demand_curve": {
            "name": "demand_curve",
            "location": 47,
            "return": [
                "bool",
                "DemandCurve"
            ],
            "arguments": {}
        }
    },
    "python-cicd-terraform-master/example/src/tests/test_curves.py": {
        "TestSupplyCurve.test_curve_comparison": {
            "name": "test_curve_comparison",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "supply_curve": [
                    "str",
                    "float"
                ]
            }
        },
        "TestSupplyCurve.test_curve_points": {
            "name": "test_curve_points",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "supply_curve": [
                    "str",
                    "float"
                ]
            }
        },
        "TestSupplyCurve.test_curve_interpolation": {
            "name": "test_curve_interpolation",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "supply_curve": [
                    "str",
                    "float"
                ]
            }
        },
        "TestSupplyCurve.test_curve_extrapolation_from_above": {
            "name": "test_curve_extrapolation_from_above",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "supply_curve": [
                    "py_pkg.curves.SupplyCurve",
                    "py_pkg.curves.DemandCurve"
                ]
            }
        },
        "TestSupplyCurve.test_curve_extrapolation_from_below": {
            "name": "test_curve_extrapolation_from_below",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "supply_curve": [
                    "py_pkg.curves.SupplyCurve",
                    "py_pkg.curves.DemandCurve"
                ]
            }
        },
        "TestSupplyCurve.test_curve_raises_monotonicity_exception": {
            "name": "test_curve_raises_monotonicity_exception",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSupplyCurve.test_curve_raises_zero_price_exception": {
            "name": "test_curve_raises_zero_price_exception",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDemandCurve.test_curve_comparison": {
            "name": "test_curve_comparison",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "demand_curve": [
                    "str",
                    "float"
                ]
            }
        },
        "TestDemandCurve.test_curve_points": {
            "name": "test_curve_points",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "demand_curve": [
                    "str",
                    "float"
                ]
            }
        },
        "TestDemandCurve.test_curve_interpolation": {
            "name": "test_curve_interpolation",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "demand_curve": [
                    "str",
                    "float"
                ]
            }
        },
        "TestDemandCurve.test_curve_extrapolation_from_above": {
            "name": "test_curve_extrapolation_from_above",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "demand_curve": [
                    "py_pkg.curves.SupplyCurve",
                    "py_pkg.curves.DemandCurve"
                ]
            }
        },
        "TestDemandCurve.test_curve_extrapolation_from_below": {
            "name": "test_curve_extrapolation_from_below",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "demand_curve": [
                    "py_pkg.curves.SupplyCurve",
                    "py_pkg.curves.DemandCurve"
                ]
            }
        },
        "TestDemandCurve.test_curve_raises_monotonicity_exception": {
            "name": "test_curve_raises_monotonicity_exception",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDemandCurve.test_curve_raises_zero_price_exception": {
            "name": "test_curve_raises_zero_price_exception",
            "location": 116,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCurveAnalytics.test_equilibrium_price": {
            "name": "test_equilibrium_price",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "supply_curve": [
                    "str",
                    "float"
                ],
                "demand_curve": [
                    "str",
                    "float"
                ]
            }
        },
        "TestCurveAnalytics.test_equilibrium_price_ranges": {
            "name": "test_equilibrium_price_ranges",
            "location": 133,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "supply_curve": [
                    "py_pkg.curves.DemandCurve",
                    "py_pkg.curves.SupplyCurve"
                ],
                "demand_curve": [
                    "py_pkg.curves.DemandCurve",
                    "py_pkg.curves.SupplyCurve"
                ]
            }
        },
        "TestCurveAnalytics.test_horiz_supply_shock": {
            "name": "test_horiz_supply_shock",
            "location": 139,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "supply_curve": [
                    "str",
                    "float"
                ]
            }
        },
        "TestCurveAnalytics.test_horiz_demand_shock": {
            "name": "test_horiz_demand_shock",
            "location": 148,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "demand_curve": [
                    "str",
                    "float"
                ]
            }
        },
        "TestCurveAnalytics.test_equilibrium": {
            "name": "test_equilibrium",
            "location": 157,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "supply_curve": [
                    "str",
                    "float"
                ],
                "demand_curve": [
                    "str",
                    "float"
                ]
            }
        },
        "TestCurveAnalytics.test_equilibrium_comparison": {
            "name": "test_equilibrium_comparison",
            "location": 167,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "supply_curve": [
                    "str",
                    "float"
                ],
                "demand_curve": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "python-cicd-terraform-master/example/src/tests/__init__.py": {}
}
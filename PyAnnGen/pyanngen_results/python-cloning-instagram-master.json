{
    "python-cloning-instagram-master/manage.py": {},
    "python-cloning-instagram-master/config/urls.py": {},
    "python-cloning-instagram-master/config/wsgi.py": {},
    "python-cloning-instagram-master/config/__init__.py": {},
    "python-cloning-instagram-master/config/settings/base.py": {},
    "python-cloning-instagram-master/config/settings/local.py": {},
    "python-cloning-instagram-master/config/settings/production.py": {},
    "python-cloning-instagram-master/config/settings/test.py": {},
    "python-cloning-instagram-master/config/settings/__init__.py": {},
    "python-cloning-instagram-master/docs/conf.py": {},
    "python-cloning-instagram-master/docs/__init__.py": {},
    "python-cloning-instagram-master/nomadgram/conftest.py": {
        "media_storage": {
            "name": "media_storage",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "list[str]"
                ],
                "tmpdir": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 14,
            "return": [
                "UserFactory",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "request_factory": {
            "name": "request_factory",
            "location": 19,
            "return": [
                "RequestFactory",
                "int",
                "List[Dict[str, Any]]",
                "bool",
                "list"
            ],
            "arguments": {}
        }
    },
    "python-cloning-instagram-master/nomadgram/__init__.py": {},
    "python-cloning-instagram-master/nomadgram/contrib/__init__.py": {},
    "python-cloning-instagram-master/nomadgram/contrib/sites/__init__.py": {},
    "python-cloning-instagram-master/nomadgram/contrib/sites/migrations/0001_initial.py": {},
    "python-cloning-instagram-master/nomadgram/contrib/sites/migrations/0002_alter_domain_unique.py": {},
    "python-cloning-instagram-master/nomadgram/contrib/sites/migrations/0003_set_site_domain_and_name.py": {
        "update_site_forward": {
            "name": "update_site_forward",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "update_site_backward": {
            "name": "update_site_backward",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        }
    },
    "python-cloning-instagram-master/nomadgram/contrib/sites/migrations/__init__.py": {},
    "python-cloning-instagram-master/nomadgram/images/admin.py": {},
    "python-cloning-instagram-master/nomadgram/images/apps.py": {},
    "python-cloning-instagram-master/nomadgram/images/models.py": {
        "Image.like_count": {
            "name": "like_count",
            "location": 24,
            "return": [
                "Dict[int, Tuple[int, int]]",
                "List[str]",
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Image.comment_count": {
            "name": "comment_count",
            "location": 28,
            "return": [
                "Dict[int, Tuple[int, int]]",
                "List[str]",
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Image.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Like.__str__": {
            "name": "__str__",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-cloning-instagram-master/nomadgram/images/serializers.py": {},
    "python-cloning-instagram-master/nomadgram/images/tests.py": {},
    "python-cloning-instagram-master/nomadgram/images/urls.py": {},
    "python-cloning-instagram-master/nomadgram/images/views.py": {
        "Feed.get": {
            "name": "get",
            "location": 11,
            "return": [
                "Response",
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Optional[str]",
                    "None",
                    "zerver.models.UserProfile"
                ],
                "format": [
                    "None",
                    "bool",
                    "rest_framework.requesRequest",
                    "str",
                    "float",
                    "Optional[int]",
                    "list[]",
                    "list"
                ]
            }
        },
        "LikeImage.post": {
            "name": "post",
            "location": 31,
            "return": [
                "Response",
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "image_id": [
                    "int",
                    "typing.Mapping",
                    "tracim.models.data.Content",
                    "typing.Any",
                    "None",
                    "Mapping[str, str]",
                    "Optional[Any]",
                    "transfer.models.ArticleID",
                    "transfer.models.ShopID"
                ],
                "format": [
                    "str",
                    "None",
                    "int",
                    "bool"
                ]
            }
        },
        "UnlikeImage.delete": {
            "name": "delete",
            "location": 51,
            "return": [
                "Response",
                "zerver.models.UserProfile",
                "str",
                "dict",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ],
                "image_id": [
                    "int",
                    "str",
                    "typing.Mapping",
                    "Mapping[str, str]",
                    "transfer.models.ShopID"
                ],
                "format": [
                    "str",
                    "None"
                ]
            }
        },
        "CommentOnImage.post": {
            "name": "post",
            "location": 69,
            "return": [
                "Response",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "image_id": [
                    "int",
                    "typing.Mapping",
                    "tracim.models.data.Content",
                    "typing.Any",
                    "None",
                    "Mapping[str, str]",
                    "Optional[Any]",
                    "transfer.models.ArticleID",
                    "transfer.models.ShopID"
                ],
                "format": [
                    "str",
                    "None",
                    "int",
                    "bool"
                ]
            }
        },
        "Comment.delete": {
            "name": "delete",
            "location": 87,
            "return": [
                "Response",
                "zerver.models.UserProfile",
                "str",
                "dict",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int"
                ],
                "comment_id": [
                    "int",
                    "str"
                ],
                "format": [
                    "rest_framework.requesRequest",
                    "bool",
                    "None",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Search.get": {
            "name": "get",
            "location": 99,
            "return": [
                "Response",
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "rest_framework.requesRequest",
                    "dict"
                ]
            }
        }
    },
    "python-cloning-instagram-master/nomadgram/images/__init__.py": {},
    "python-cloning-instagram-master/nomadgram/images/migrations/0001_initial.py": {},
    "python-cloning-instagram-master/nomadgram/images/migrations/0002_like.py": {},
    "python-cloning-instagram-master/nomadgram/images/migrations/0003_auto_20190916_1752.py": {},
    "python-cloning-instagram-master/nomadgram/images/migrations/0004_auto_20190918_1443.py": {},
    "python-cloning-instagram-master/nomadgram/images/migrations/0005_auto_20190918_1615.py": {},
    "python-cloning-instagram-master/nomadgram/images/migrations/0006_image_tags.py": {},
    "python-cloning-instagram-master/nomadgram/images/migrations/__init__.py": {},
    "python-cloning-instagram-master/nomadgram/notifications/admin.py": {},
    "python-cloning-instagram-master/nomadgram/notifications/apps.py": {},
    "python-cloning-instagram-master/nomadgram/notifications/models.py": {
        "Notification.__str__": {
            "name": "__str__",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-cloning-instagram-master/nomadgram/notifications/tests.py": {},
    "python-cloning-instagram-master/nomadgram/notifications/views.py": {},
    "python-cloning-instagram-master/nomadgram/notifications/__init__.py": {},
    "python-cloning-instagram-master/nomadgram/notifications/migrations/0001_initial.py": {},
    "python-cloning-instagram-master/nomadgram/notifications/migrations/0002_auto_20190923_1612.py": {},
    "python-cloning-instagram-master/nomadgram/notifications/migrations/__init__.py": {},
    "python-cloning-instagram-master/nomadgram/users/adapters.py": {
        "AccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 10,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        },
        "SocialAccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 15,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ],
                "sociallogin": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        }
    },
    "python-cloning-instagram-master/nomadgram/users/admin.py": {},
    "python-cloning-instagram-master/nomadgram/users/apps.py": {
        "UsersConfig.ready": {
            "name": "ready",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-cloning-instagram-master/nomadgram/users/forms.py": {
        "UserCreationForm.clean_username": {
            "name": "clean_username",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-cloning-instagram-master/nomadgram/users/models.py": {
        "User.__str__": {
            "name": "__str__",
            "location": 22,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.post_count": {
            "name": "post_count",
            "location": 29,
            "return": [
                "str",
                "int",
                "Set[Optional[str]]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.followers_count": {
            "name": "followers_count",
            "location": 33,
            "return": [
                "Dict[int, Tuple[int, int]]",
                "List[str]",
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.following_count": {
            "name": "following_count",
            "location": 37,
            "return": [
                "Dict[int, Tuple[int, int]]",
                "List[str]",
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-cloning-instagram-master/nomadgram/users/serializers.py": {},
    "python-cloning-instagram-master/nomadgram/users/urls.py": {},
    "python-cloning-instagram-master/nomadgram/users/views.py": {
        "ExploreUsers.get": {
            "name": "get",
            "location": 11,
            "return": [
                "Response",
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "rest_framework.requesRequest",
                    "str",
                    "None",
                    "float",
                    "Optional[int]",
                    "list[]",
                    "list"
                ],
                "format": [
                    "None",
                    "bool",
                    "rest_framework.requesRequest",
                    "str",
                    "float",
                    "Optional[int]",
                    "list[]",
                    "list"
                ]
            }
        },
        "FollowUser.post": {
            "name": "post",
            "location": 19,
            "return": [
                "Response",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "user_id": [
                    "int"
                ],
                "format": [
                    "int",
                    "None",
                    "Iterable[int]",
                    "bool",
                    "typing.Iterable[int]"
                ]
            }
        },
        "UnfollowUser.post": {
            "name": "post",
            "location": 34,
            "return": [
                "Response",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "user_id": [
                    "int"
                ],
                "format": [
                    "int",
                    "None",
                    "Iterable[int]",
                    "bool",
                    "typing.Iterable[int]"
                ]
            }
        },
        "UserProfile.get": {
            "name": "get",
            "location": 49,
            "return": [
                "Response",
                "str",
                "List[str]",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "list[str]",
                    "List[str]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "Iterable"
                ],
                "username": [
                    "Optional[str]",
                    "str",
                    "FrozenSet[bytes]",
                    "None",
                    "frozenset"
                ],
                "format": [
                    "List[str]",
                    "None",
                    "Dict[str, Any]",
                    "list[str]",
                    "dict",
                    "dict[str, typing.Any]",
                    "Iterable",
                    "dict[, ]"
                ]
            }
        },
        "UserFollowers.get": {
            "name": "get",
            "location": 62,
            "return": [
                "Response",
                "str",
                "List[str]",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, str]",
                    "rest_framework.requesRequest",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict"
                ],
                "username": [
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "UserFollowing.get": {
            "name": "get",
            "location": 74,
            "return": [
                "Response",
                "str",
                "List[str]",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, str]",
                    "rest_framework.requesRequest",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict"
                ],
                "username": [
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Search.get": {
            "name": "get",
            "location": 86,
            "return": [
                "Response",
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "python-cloning-instagram-master/nomadgram/users/__init__.py": {},
    "python-cloning-instagram-master/nomadgram/users/migrations/0001_initial.py": {},
    "python-cloning-instagram-master/nomadgram/users/migrations/0002_auto_20190916_1651.py": {},
    "python-cloning-instagram-master/nomadgram/users/migrations/0003_auto_20190917_1435.py": {},
    "python-cloning-instagram-master/nomadgram/users/migrations/0004_user_profile_image.py": {},
    "python-cloning-instagram-master/nomadgram/users/migrations/__init__.py": {},
    "python-cloning-instagram-master/nomadgram/users/tests/factories.py": {
        "UserFactory.password": {
            "name": "password",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "str",
                    "bool",
                    "typing.Callable[typing.Any, T]",
                    "Callable[[Any], T]"
                ],
                "extracted": [
                    "int",
                    "str",
                    "bool",
                    "typing.Callable[typing.Any, T]",
                    "Callable[[Any], T]"
                ]
            }
        }
    },
    "python-cloning-instagram-master/nomadgram/users/tests/test_forms.py": {
        "TestUserCreationForm.test_clean_username": {
            "name": "test_clean_username",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-cloning-instagram-master/nomadgram/users/tests/test_models.py": {
        "test_user_get_absolute_url": {
            "name": "test_user_get_absolute_url",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        }
    },
    "python-cloning-instagram-master/nomadgram/users/tests/test_urls.py": {
        "test_detail": {
            "name": "test_detail",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_redirect": {
            "name": "test_redirect",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-cloning-instagram-master/nomadgram/users/tests/test_views.py": {
        "TestUserUpdateView.test_get_success_url": {
            "name": "test_get_success_url",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserUpdateView.test_get_object": {
            "name": "test_get_object",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserRedirectView.test_get_redirect_url": {
            "name": "test_get_redirect_url",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "bool"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        }
    },
    "python-cloning-instagram-master/nomadgram/users/tests/__init__.py": {}
}
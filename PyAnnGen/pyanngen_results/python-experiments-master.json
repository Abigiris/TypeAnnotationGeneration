{
    "python-experiments-master/algo/iterate.py": {},
    "python-experiments-master/algo/node.py": {},
    "python-experiments-master/algo/nodeExercices.py": {},
    "python-experiments-master/algo/__init__.py": {},
    "python-experiments-master/backup/backup.py": {},
    "python-experiments-master/backup/__init__.py": {},
    "python-experiments-master/bookmarks/bookmark-convert.py": {},
    "python-experiments-master/cherrypy/cherrypy-experiments.py": {
        "setupDatabase": {
            "name": "setupDatabase",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Portal.index": {
            "name": "index",
            "location": 19,
            "return": [
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Portal.submit": {
            "name": "submit",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "strig": [
                    "Text",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "python-experiments-master/cherrypy/__init__.py": {},
    "python-experiments-master/git-backup/git-backup.py": {
        "exitProgram": {
            "name": "exitProgram",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [
                    "str",
                    "int",
                    "Type"
                ],
                "text": [
                    "Text",
                    "str",
                    "bool"
                ]
            }
        },
        "parseConfigurationFile": {
            "name": "parseConfigurationFile",
            "location": 47,
            "return": [
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {}
        }
    },
    "python-experiments-master/leet/leet.py": {},
    "python-experiments-master/leet/__init__.py": {},
    "python-experiments-master/memo_python/arg_parse.py": {},
    "python-experiments-master/memo_python/basics.py": {},
    "python-experiments-master/memo_python/classes.py": {
        "Personne.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Personne.__fakePrivateMethod": {
            "name": "__fakePrivateMethod",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-experiments-master/memo_python/commands.py": {
        "command": {
            "name": "command",
            "location": 15,
            "return": [
                "int"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "loggedCommand": {
            "name": "loggedCommand",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "python-experiments-master/memo_python/curse.py": {},
    "python-experiments-master/memo_python/date_time.py": {},
    "python-experiments-master/memo_python/fileInput.py": {},
    "python-experiments-master/memo_python/files.py": {},
    "python-experiments-master/memo_python/gui_graphics_example.py": {},
    "python-experiments-master/memo_python/iterable_class.py": {
        "Iterable.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "Iterable.next": {
            "name": "next",
            "location": 11,
            "return": [
                "set",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Iterable.__iter__": {
            "name": "__iter__",
            "location": 18,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "self": [
                    "_TIterable@@Iterable@@"
                ]
            }
        }
    },
    "python-experiments-master/memo_python/json_list.py": {},
    "python-experiments-master/memo_python/lists.py": {},
    "python-experiments-master/memo_python/regex.py": {},
    "python-experiments-master/memo_python/root_sudo_and_users.py": {},
    "python-experiments-master/memo_python/shell_colors.py": {},
    "python-experiments-master/memo_python/strings.py": {},
    "python-experiments-master/memo_python/xml.py": {},
    "python-experiments-master/memo_python/__init__.py": {},
    "python-experiments-master/monitoring/command.py": {
        "C.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logName": [
                    "None"
                ]
            }
        },
        "C.c": {
            "name": "c",
            "location": 24,
            "return": [
                "C"
            ],
            "arguments": {
                "self": [
                    "_TC@@C@@"
                ],
                "command": [],
                "logLine": []
            }
        },
        "C.executeAll": {
            "name": "executeAll",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "commandList": []
            }
        },
        "C._getDate": {
            "name": "_getDate",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-experiments-master/monitoring/listProcess.py": {},
    "python-experiments-master/monitoring/monitoring.py": {},
    "python-experiments-master/monitoring/timedtasks.py": {},
    "python-experiments-master/monitoring/__init__.py": {},
    "python-experiments-master/ncurses/let-it-snow.py": {
        "playLetItSnow": {
            "name": "playLetItSnow",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "getRandomChar": {
            "name": "getRandomChar",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "getRandomEffect": {
            "name": "getRandomEffect",
            "location": 47,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "python-experiments-master/ncurses/tutorial.py": {
        "getRandomChar": {
            "name": "getRandomChar",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "getRandomEffect": {
            "name": "getRandomEffect",
            "location": 59,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "python-experiments-master/ncurses/__init__.py": {},
    "python-experiments-master/path/playsnes.py": {},
    "python-experiments-master/path/show-comands.py": {},
    "python-experiments-master/path/__init__.py": {},
    "python-experiments-master/slack/slack-client.py": {
        "connectToSlack": {
            "name": "connectToSlack",
            "location": 13,
            "return": [
                "SlackClient",
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "token": [
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "Union[str,Sequence[str]]",
                    "Sequence[str]"
                ]
            }
        },
        "processMessage": {
            "name": "processMessage",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "sc": [
                    "int",
                    "Callable",
                    "str"
                ],
                "raw": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "listenMessages": {
            "name": "listenMessages",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "sc": []
            }
        }
    },
    "python-experiments-master/testing/main.py": {},
    "python-experiments-master/testing/__init__.py": {},
    "python-experiments-master/testing/src/TestObject.py": {
        "TestObject.sayHello": {
            "name": "sayHello",
            "location": 6,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObject.sayHelloTo": {
            "name": "sayHelloTo",
            "location": 10,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "python-experiments-master/testing/src/__init__.py": {},
    "python-experiments-master/testing/tests/MockTest.py": {
        "MockTest.test_mockMethod": {
            "name": "test_mockMethod",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockTest.test_mockIgnoreCheck": {
            "name": "test_mockIgnoreCheck",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockTest.configureMock": {
            "name": "configureMock",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-experiments-master/testing/tests/SetupTest.py": {
        "SetupTest.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetupTest.test_mock1": {
            "name": "test_mock1",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetupTest.test_mock2": {
            "name": "test_mock2",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-experiments-master/testing/tests/SimpleTest.py": {
        "SimpleCaseTest.test_assertTrue": {
            "name": "test_assertTrue",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleCaseTest.assertFail": {
            "name": "assertFail",
            "location": 10,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleCaseTest.test_shouldFail": {
            "name": "test_shouldFail",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleCaseTest.test_expectedFailure": {
            "name": "test_expectedFailure",
            "location": 19,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-experiments-master/testing/tests/__init__.py": {},
    "python-experiments-master/typings/src/BadTypings.py": {
        "BadTypings.start": {
            "name": "start",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-experiments-master/typings/src/Square.py": {
        "Square.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        }
    },
    "python-experiments-master/typings/src/TypedObject.py": {
        "TypedObject.sayHelloTo": {
            "name": "sayHelloTo",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TypedObject.useStringList": {
            "name": "useStringList",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "list": [
                    "List[str]",
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "List[int]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TypedObject.useSquare": {
            "name": "useSquare",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "square": [
                    "str",
                    "T"
                ]
            }
        },
        "TypedObject.optionalParam": {
            "name": "optionalParam",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "optionalParam": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "TypedObject.multipleReturnType": {
            "name": "multipleReturnType",
            "location": 24,
            "return": [
                "Tuple[(int, str)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-experiments-master/typings/src/__init__.py": {},
    "python-experiments-master/typings/src/__main__.py": {},
    "python-experiments-master/venv/venv-wrapper.py": {
        "checkPrerequisites": {
            "name": "checkPrerequisites",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "checkPythonVirtualEnv": {
            "name": "checkPythonVirtualEnv",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "executeCommand": {
            "name": "executeCommand",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-experiments-master/venv/python-project-dir/main.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
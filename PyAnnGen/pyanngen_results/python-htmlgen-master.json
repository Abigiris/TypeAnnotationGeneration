{
    "python-htmlgen-master/htmlgen/attribute.py": {
        "html_attribute.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute_name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "default": [
                    "bool",
                    "None",
                    "Sequence",
                    "str",
                    "int",
                    "typing.Sequence[]",
                    "Dict[str, Tuple[str, str]]",
                    "dict[str, tuple[typing.Union[str,str]]]"
                ]
            }
        },
        "html_attribute.__get__": {
            "name": "__get__",
            "location": 38,
            "return": [
                "Optional[str]",
                "bool",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ],
                "_": [
                    "bool",
                    "None",
                    "str",
                    "T",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "html_attribute.__set__": {
            "name": "__set__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool",
                    "Optional[Any]",
                    "typing.Any",
                    "Union[int, bytes]",
                    "None",
                    "type",
                    "bytes",
                    "Any",
                    "typing.Type"
                ],
                "value": [
                    "Union[T, Sequence[T]]",
                    "typing.Sequence[l]",
                    "str",
                    "Optional[Any]",
                    "typing.Any",
                    "None",
                    "float",
                    "Callable",
                    "Optional[Dict[str, Any]]",
                    "typing.Callable[, ]",
                    "Optional[List[Any]]",
                    "dict[str, typing.Any]",
                    "list[typing.Any]"
                ]
            }
        },
        "boolean_html_attribute.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "boolean_html_attribute.__get__": {
            "name": "__get__",
            "location": 68,
            "return": [
                "bool",
                "str",
                "Tuple[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "_": [
                    "bool",
                    "None",
                    "str",
                    "T",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "boolean_html_attribute.__set__": {
            "name": "__set__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "bool",
                    "str",
                    "int",
                    "typing.Type",
                    "Optional[type]",
                    "None"
                ]
            }
        },
        "int_html_attribute.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute_name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "default": [
                    "bool",
                    "None",
                    "Sequence",
                    "str",
                    "int",
                    "typing.Sequence[]",
                    "Dict[str, Tuple[str, str]]",
                    "dict[str, tuple[typing.Union[str,str]]]"
                ]
            }
        },
        "int_html_attribute.__get__": {
            "name": "__get__",
            "location": 109,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "None",
                    "Optional[int]",
                    "Optional[str]",
                    "Union[str, int]"
                ],
                "_": [
                    "bool",
                    "None",
                    "str",
                    "T",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "int_html_attribute.__set__": {
            "name": "__set__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "List[Tuple[str, str, str]]",
                    "list[tuple[typing.Union[str,str,str]]]",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "value": [
                    "Union[T, Sequence[T]]",
                    "typing.Sequence[l]",
                    "str",
                    "Optional[Any]",
                    "typing.Any",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "Optional[dict]",
                    "dict[str, typing.Any]",
                    "Optional[datetime.timedelta]",
                    "dict[, ]"
                ]
            }
        },
        "float_html_attribute.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute_name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "default": [
                    "bool",
                    "None",
                    "Sequence",
                    "str",
                    "int",
                    "typing.Sequence[]",
                    "Dict[str, Tuple[str, str]]",
                    "dict[str, tuple[typing.Union[str,str]]]"
                ]
            }
        },
        "float_html_attribute.__get__": {
            "name": "__get__",
            "location": 153,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "None",
                    "Optional[int]",
                    "Optional[str]",
                    "Union[str, int]"
                ],
                "_": [
                    "bool",
                    "None",
                    "str",
                    "T",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "float_html_attribute.__set__": {
            "name": "__set__",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "List[Tuple[str, str, str]]",
                    "list[tuple[typing.Union[str,str,str]]]",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "value": [
                    "Union[T, Sequence[T]]",
                    "typing.Sequence[l]",
                    "str",
                    "Optional[Any]",
                    "typing.Any",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "Optional[dict]",
                    "dict[str, typing.Any]",
                    "Optional[datetime.timedelta]",
                    "dict[, ]"
                ]
            }
        },
        "time_html_attribute.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute_name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "default": [
                    "bool",
                    "None",
                    "Sequence",
                    "str",
                    "int",
                    "typing.Sequence[]",
                    "Dict[str, Tuple[str, str]]",
                    "dict[str, tuple[typing.Union[str,str]]]"
                ]
            }
        },
        "time_html_attribute.__get__": {
            "name": "__get__",
            "location": 198,
            "return": [
                "datetime.datetime",
                "bool",
                "Set[str]",
                "float",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "None",
                    "bool",
                    "Optional[int]"
                ],
                "_": [
                    "bool",
                    "None",
                    "str",
                    "T",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "time_html_attribute.__set__": {
            "name": "__set__",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "List[Tuple[str, str, str]]",
                    "list[tuple[typing.Union[str,str,str]]]",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "value": [
                    "Union[T, Sequence[T]]",
                    "typing.Sequence[l]",
                    "str",
                    "Optional[Any]",
                    "typing.Any",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "Optional[dict]",
                    "dict[str, typing.Any]",
                    "Optional[datetime.timedelta]",
                    "dict[, ]"
                ]
            }
        },
        "list_html_attribute.__init__": {
            "name": "__init__",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "list_html_attribute.__get__": {
            "name": "__get__",
            "location": 231,
            "return": [
                "list[]",
                "bool",
                "Optional[Tuple[str]]",
                "list",
                "Set[str]",
                "Optional[List[int]]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "None",
                    "bool",
                    "Optional[int]"
                ],
                "_": [
                    "bool",
                    "None",
                    "str",
                    "T",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "list_html_attribute.__set__": {
            "name": "__set__",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool",
                    "typing.Iterable[str]",
                    "Union[str, Iterable[str]]",
                    "Dict[str, float]"
                ],
                "value": [
                    "dict[str, float]",
                    "bool",
                    "str",
                    "Dict[str, float]",
                    "Optional[str]"
                ]
            }
        },
        "data_attribute.__init__": {
            "name": "__init__",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "List[str]"
                ],
                "default": [
                    "str",
                    "None",
                    "bool",
                    "float",
                    "Optional[Sequence[Any]]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "css_class_attribute.__init__": {
            "name": "__init__",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "css_class": [
                    "bool",
                    "type",
                    "typing.Type",
                    "set",
                    "set[]",
                    "Optional[str]",
                    "str",
                    "int",
                    "None",
                    "Dict[str, Union[str, int]]",
                    "dict[str, typing.Union[str,int]]"
                ]
            }
        },
        "css_class_attribute.__get__": {
            "name": "__get__",
            "location": 269,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "bool",
                    "float",
                    "Dict[str, Any]",
                    "Union[int, float]"
                ],
                "_": [
                    "bool",
                    "None",
                    "str",
                    "T",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "css_class_attribute.__set__": {
            "name": "__set__",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "dict[, ]",
                    "bool",
                    "dict",
                    "int"
                ],
                "value": [
                    "bool",
                    "str",
                    "int",
                    "typing.Type",
                    "Optional[type]",
                    "None"
                ]
            }
        },
        "enum_attribute.__init__": {
            "name": "__init__",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "enum": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "default": [
                    "str",
                    "None",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "enum_attribute.__get__": {
            "name": "__get__",
            "location": 316,
            "return": [
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "_": [
                    "bool",
                    "None",
                    "str",
                    "T",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "enum_attribute.__set__": {
            "name": "__set__",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Dict[str, Any]",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "value": [
                    "typing.Any",
                    "Optional[Any]",
                    "str",
                    "None",
                    "bytes",
                    "Optional[object]",
                    "Optional[str]",
                    "Optional[Union[str, Any]]"
                ]
            }
        }
    },
    "python-htmlgen-master/htmlgen/block.py": {
        "Division.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paragraph.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Preformatted.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-htmlgen-master/htmlgen/document.py": {
        "json_script": {
            "name": "json_script",
            "location": 220,
            "return": [
                "Script"
            ],
            "arguments": {
                "json": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Document.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str",
                    "None"
                ],
                "language": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "Document.generate": {
            "name": "generate",
            "location": 42,
            "return": [
                "typing.Generator[(Union[(HTMLRoot, str)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.title": {
            "name": "title",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "title": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Document.add_stylesheets": {
            "name": "add_stylesheets",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.add_stylesheet": {
            "name": "add_stylesheet",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stylesheet": [
                    "dict",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "Document.add_scripts": {
            "name": "add_scripts",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.add_script": {
            "name": "add_script",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "script": [
                    "dict",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "Document.append_head": {
            "name": "append_head",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "str",
                    "list",
                    "list[]",
                    "tuple",
                    "tuple[]",
                    "Callable[[], None]",
                    "typing.Callable[[], None]"
                ]
            }
        },
        "Document.append_body": {
            "name": "append_body",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "dict[, ]",
                    "dict",
                    "T"
                ]
            }
        },
        "HTMLRoot.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "typing.Text",
                    "int",
                    "bool",
                    "float"
                ],
                "language": [
                    "typing.Text",
                    "bool",
                    "Optional[float]",
                    "List[bytes]",
                    "int"
                ]
            }
        },
        "HTMLRoot.generate_children": {
            "name": "generate_children",
            "location": 95,
            "return": [
                "typing.Generator[(Union[(Body, Head)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Head.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "Head.title": {
            "name": "title",
            "location": 127,
            "return": [
                "",
                "str",
                "int",
                "list[str]",
                "tuple[typing.Union[typing.Literal,typing.Literal]]"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Head.add_stylesheets": {
            "name": "add_stylesheets",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Head.add_stylesheet": {
            "name": "add_stylesheet",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stylesheet": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Head.add_scripts": {
            "name": "add_scripts",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Head.add_script": {
            "name": "add_script",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "script": [
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "Body.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Title.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "Title.generate_children": {
            "name": "generate_children",
            "location": 161,
            "return": [
                "typing.Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Meta.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Meta.create_charset": {
            "name": "create_charset",
            "location": 173,
            "return": [
                "Meta"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMeta]"
                ],
                "charset": [
                    "int",
                    "str"
                ]
            }
        },
        "Script.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Optional[str]",
                    "None",
                    "Optional[Union[str, Any]]",
                    "str",
                    "Optional[int]",
                    "typing.Any",
                    "Optional[bool]",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "script": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Script.generate_children": {
            "name": "generate_children",
            "location": 215,
            "return": [
                "typing.Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeadLink.__init__": {
            "name": "__init__",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "relation": [
                    "str",
                    "dict",
                    "float",
                    "dict[, ]",
                    "Set[str]",
                    "set[str]"
                ],
                "url": [
                    "str",
                    "dict",
                    "float",
                    "dict[, ]",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "HeadLink.create_stylesheet": {
            "name": "create_stylesheet",
            "location": 252,
            "return": [
                "HeadLink"
            ],
            "arguments": {
                "cls": [
                    "Type[_THeadLink]"
                ],
                "stylesheet": [
                    "str",
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Main.__init__": {
            "name": "__init__",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-htmlgen-master/htmlgen/element.py": {
        "is_element": {
            "name": "is_element",
            "location": 6,
            "return": [
                "bool",
                "Callable[..., Awaitable]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "o": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "element_name": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ElementBase.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element_name": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "ElementBase.generate": {
            "name": "generate",
            "location": 24,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementBase.data": {
            "name": "data",
            "location": 48,
            "return": [
                "",
                "str",
                "list[]",
                "tuple[int]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "T",
                    "Dict[str, Any]"
                ]
            }
        },
        "ElementBase.set_attribute": {
            "name": "set_attribute",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[Iterable[str]]",
                    "typing.Iterable[str]",
                    "Set[str]",
                    "None"
                ],
                "value": [
                    "str",
                    "Optional[Iterable[str]]",
                    "typing.Iterable[str]",
                    "Set[str]",
                    "None"
                ]
            }
        },
        "ElementBase.get_attribute": {
            "name": "get_attribute",
            "location": 69,
            "return": [
                "_T1"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "default": [
                    "_T1"
                ]
            }
        },
        "ElementBase.remove_attribute": {
            "name": "remove_attribute",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ElementBase.attribute_names": {
            "name": "attribute_names",
            "location": 89,
            "return": [
                "set[]",
                "Set[str]",
                "bool",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementBase.add_css_classes": {
            "name": "add_css_classes",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementBase.remove_css_classes": {
            "name": "remove_css_classes",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementBase.has_css_class": {
            "name": "has_css_class",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "css_class": [
                    "str",
                    "bool",
                    "Dict[str, Dict[str, str]]",
                    "dict[str, dict[str, str]]",
                    "Type[T]",
                    "typing.Type"
                ]
            }
        },
        "ElementBase.set_style": {
            "name": "set_style",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "value": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "ElementBase.id": {
            "name": "id",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "List[int]",
                    "str",
                    "bool"
                ]
            }
        },
        "ElementBase.render_start_tag": {
            "name": "render_start_tag",
            "location": 145,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementBase._get_attribute_string": {
            "name": "_get_attribute_string",
            "location": 156,
            "return": [
                "str"
            ],
            "arguments": {
                "attribute": [
                    "str",
                    "Optional[Any]",
                    "List[Tuple[int, float]]",
                    "float",
                    "int"
                ],
                "value": [
                    "bool",
                    "str",
                    "Optional[dict]",
                    "dict[, ]",
                    "None",
                    "Optional[Tuple[str, str]]",
                    "Tuple[str, int]",
                    "tuple[typing.Union[str,str]]",
                    "tuple[typing.Union[str,int]]"
                ]
            }
        },
        "ElementBase._class_value": {
            "name": "_class_value",
            "location": 161,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementBase._style_value": {
            "name": "_style_value",
            "location": 165,
            "return": [
                "str",
                "int",
                "Tuple[int, int]",
                "Tuple[str, int]",
                "T",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ElementDataProxy.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Tuple[float, float]",
                    "str",
                    "tuple[typing.Union[float,float]]",
                    "bool"
                ]
            }
        },
        "_ElementDataProxy.__iter__": {
            "name": "__iter__",
            "location": 183,
            "return": [
                "typing.Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ElementDataProxy.__len__": {
            "name": "__len__",
            "location": 188,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ElementDataProxy.__setitem__": {
            "name": "__setitem__",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ],
                "value": [
                    "str",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "_ElementDataProxy.__getitem__": {
            "name": "__getitem__",
            "location": 194,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "int",
                    "KT"
                ]
            }
        },
        "_ElementDataProxy.__delitem__": {
            "name": "__delitem__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "_ElementDataProxy.clear": {
            "name": "clear",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ElementDataProxy._attribute_name": {
            "name": "_attribute_name",
            "location": 210,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool",
                    "KT",
                    "int",
                    "Iterable[T]"
                ]
            }
        },
        "_ElementDataProxy.from_data": {
            "name": "from_data",
            "location": 214,
            "return": [
                "ElementDataProxy"
            ],
            "arguments": {
                "cls": [
                    "Type[_T_ElementDataProxy]"
                ],
                "element": [
                    "type",
                    "str",
                    "typing.Type",
                    "Optional[int]",
                    "int",
                    "bool",
                    "None"
                ],
                "data": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "NonVoidElement.generate": {
            "name": "generate",
            "location": 236,
            "return": [
                "typing.Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NonVoidElement.generate_children": {
            "name": "generate_children",
            "location": 242,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.__init__": {
            "name": "__init__",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Tuple[type]",
                    "tuple[typing.Type]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "Element.__bool__": {
            "name": "__bool__",
            "location": 301,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.__getattr__": {
            "name": "__getattr__",
            "location": 304,
            "return": [
                "bytes",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "Element.__len__": {
            "name": "__len__",
            "location": 307,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.__nonzero__": {
            "name": "__nonzero__",
            "location": 315,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.generate_children": {
            "name": "generate_children",
            "location": 318,
            "return": [
                "htmlgen.generator.HTMLChildGenerator"
            ],
            "arguments": {
                "self": []
            }
        },
        "VoidElement.generate": {
            "name": "generate",
            "location": 340,
            "return": [
                "typing.Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-htmlgen-master/htmlgen/form.py": {
        "Form.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "typing.Text"
                ],
                "url": [
                    "typing.Text"
                ]
            }
        },
        "Form.set_blank_target": {
            "name": "set_blank_target",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.multipart": {
            "name": "multipart",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "multipart": []
            }
        },
        "Input.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "typing.Text"
                ],
                "name": [
                    "typing.Text"
                ]
            }
        },
        "TextInput.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text"
                ],
                "value": [
                    "typing.Text"
                ]
            }
        },
        "SearchInput.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text"
                ]
            }
        },
        "PasswordInput.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text"
                ]
            }
        },
        "NumberInput.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text"
                ],
                "number": [
                    "None",
                    "typing.Callable[, ]",
                    "bool",
                    "str",
                    "typing.Any"
                ]
            }
        },
        "DateInput.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text"
                ],
                "date": [
                    "None",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "DateInput.date": {
            "name": "date",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "date": []
            }
        },
        "DateInput._parse_date": {
            "name": "_parse_date",
            "location": 209,
            "return": [
                "Optional[datetime.date]"
            ],
            "arguments": {
                "v": [
                    "str"
                ]
            }
        },
        "TimeInput.__init__": {
            "name": "__init__",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text"
                ],
                "time": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "TimeInput.minimum": {
            "name": "minimum",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "minimum": []
            }
        },
        "TimeInput.maximum": {
            "name": "maximum",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "maximum": []
            }
        },
        "TimeInput.step": {
            "name": "step",
            "location": 280,
            "return": [
                "None",
                "float"
            ],
            "arguments": {
                "self": [],
                "step": []
            }
        },
        "_CheckableInput.__init__": {
            "name": "__init__",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "None"
                ],
                "name": [
                    "str",
                    "None"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "Checkbox.__init__": {
            "name": "__init__",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text"
                ],
                "value": [
                    "typing.Text"
                ]
            }
        },
        "RadioButton.__init__": {
            "name": "__init__",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text"
                ],
                "value": [
                    "typing.Text"
                ]
            }
        },
        "FileInput.__init__": {
            "name": "__init__",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text"
                ]
            }
        },
        "HiddenInput.__init__": {
            "name": "__init__",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "SubmitButton.__init__": {
            "name": "__init__",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "tuple[int]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "SubmitButton.label": {
            "name": "label",
            "location": 363,
            "return": [
                "int",
                "dict[int, str]",
                "float",
                "list[dict[str, typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "Button.__init__": {
            "name": "__init__",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextArea.__init__": {
            "name": "__init__",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text"
                ]
            }
        },
        "Select.__init__": {
            "name": "__init__",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text"
                ]
            }
        },
        "Select.create_group": {
            "name": "create_group",
            "location": 436,
            "return": [
                "OptionGroup"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "dict[str, int]",
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "list[int]",
                    "int"
                ]
            }
        },
        "Select.create_option": {
            "name": "create_option",
            "location": 442,
            "return": [
                "Option"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "bool",
                    "str",
                    "bytes",
                    "dict[str, typing.Union[str,bool]]",
                    "dict[, ]"
                ],
                "value": [
                    "None",
                    "bool",
                    "str",
                    "bytes",
                    "dict[str, typing.Union[str,bool]]",
                    "dict[, ]"
                ],
                "selected": [
                    "bool"
                ]
            }
        },
        "Select._options_iter": {
            "name": "_options_iter",
            "location": 451,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Select.selected_option": {
            "name": "selected_option",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "option": []
            }
        },
        "Select.selected_value": {
            "name": "selected_value",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selected_value": []
            }
        },
        "OptionGroup.__init__": {
            "name": "__init__",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "bool",
                    "list[list[typing.Any]]",
                    "None"
                ]
            }
        },
        "OptionGroup.create_option": {
            "name": "create_option",
            "location": 521,
            "return": [
                "Option"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "bool",
                    "str",
                    "bytes",
                    "dict[str, typing.Union[str,bool]]",
                    "dict[, ]"
                ],
                "value": [
                    "None",
                    "bool",
                    "str",
                    "bytes",
                    "dict[str, typing.Union[str,bool]]",
                    "dict[, ]"
                ]
            }
        },
        "Option.__init__": {
            "name": "__init__",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "typing.Any",
                    "None",
                    "bool",
                    "float"
                ],
                "value": [
                    "None",
                    "int",
                    "str",
                    "list[]"
                ]
            }
        },
        "Option.value": {
            "name": "value",
            "location": 566,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Label.__init__": {
            "name": "__init__",
            "location": 581,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-htmlgen-master/htmlgen/generator.py": {
        "generate_html_string": {
            "name": "generate_html_string",
            "location": 295,
            "return": [
                "Union[(HTMLChildGenerator, _T0)]"
            ],
            "arguments": {
                "s": [
                    "_T0"
                ]
            }
        },
        "Generator.__iter__": {
            "name": "__iter__",
            "location": 31,
            "return": [
                "typing.Generator[(nothing, Any, nothing)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Generator.__str__": {
            "name": "__str__",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Generator.generate": {
            "name": "generate",
            "location": 59,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullGenerator.generate": {
            "name": "generate",
            "location": 71,
            "return": [
                "listiterator[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorGenerator.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterator": [
                    "int",
                    "float"
                ]
            }
        },
        "IteratorGenerator.generate": {
            "name": "generate",
            "location": 89,
            "return": [
                "typing.Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChildGenerator.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChildGenerator.__len__": {
            "name": "__len__",
            "location": 115,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChildGenerator.append": {
            "name": "append",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "int",
                    "None",
                    "float",
                    "list[str]"
                ]
            }
        },
        "ChildGenerator.extend": {
            "name": "extend",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "str"
                ]
            }
        },
        "ChildGenerator.remove": {
            "name": "remove",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "ChildGenerator.empty": {
            "name": "empty",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChildGenerator.children": {
            "name": "children",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChildGenerator.generate": {
            "name": "generate",
            "location": 152,
            "return": [
                "listiterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLChildGenerator.__init__": {
            "name": "__init__",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLChildGenerator.__len__": {
            "name": "__len__",
            "location": 199,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLChildGenerator.append": {
            "name": "append",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "HTMLChildGenerator.append_raw": {
            "name": "append_raw",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "int",
                    "str"
                ]
            }
        },
        "HTMLChildGenerator.extend": {
            "name": "extend",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "str"
                ]
            }
        },
        "HTMLChildGenerator.extend_raw": {
            "name": "extend_raw",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "str"
                ]
            }
        },
        "HTMLChildGenerator.remove": {
            "name": "remove",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "HTMLChildGenerator.remove_raw": {
            "name": "remove_raw",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "HTMLChildGenerator.empty": {
            "name": "empty",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLChildGenerator.children": {
            "name": "children",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLChildGenerator.generate": {
            "name": "generate",
            "location": 285,
            "return": [
                "listiterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "JoinGenerator.__init__": {
            "name": "__init__",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "glue": [
                    "int",
                    "float"
                ],
                "pieces": []
            }
        },
        "JoinGenerator.generate": {
            "name": "generate",
            "location": 347,
            "return": [
                "typing.Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLJoinGenerator.__init__": {
            "name": "__init__",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "glue": [
                    "int",
                    "float"
                ],
                "pieces": []
            }
        },
        "HTMLJoinGenerator.generate": {
            "name": "generate",
            "location": 379,
            "return": [
                "typing.Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-htmlgen-master/htmlgen/image.py": {
        "Image.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "Sequence[Dict[str, str]]",
                    "typing.Sequence[dict[str, str]]",
                    "Optional[str]",
                    "None"
                ],
                "alternate_text": [
                    "typing.Text",
                    "str",
                    "int",
                    "Dict[Tuple[Any, str], int]",
                    "Callable[[], int]"
                ]
            }
        }
    },
    "python-htmlgen-master/htmlgen/inline.py": {
        "Span.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Strong.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alternate.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emphasis.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Small.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineBreak.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-htmlgen-master/htmlgen/link.py": {
        "Link.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "set",
                    "set[]",
                    "float",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Link.set_blank_target": {
            "name": "set_blank_target",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-htmlgen-master/htmlgen/list.py": {
        "_ListBase.create_item": {
            "name": "create_item",
            "location": 8,
            "return": [
                "ListItem"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "float",
                    "None"
                ]
            }
        },
        "_ListBase.create_items": {
            "name": "create_items",
            "location": 16,
            "return": [
                "List[ListItem]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedList.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnorderedList.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListItem.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DescriptionList.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DescriptionList.create_item": {
            "name": "create_item",
            "location": 83,
            "return": [
                "Tuple[(DescriptionTerm, DescriptionDefinition)]"
            ],
            "arguments": {
                "self": [],
                "term": [
                    "str"
                ],
                "description": [
                    "str"
                ]
            }
        },
        "DescriptionTerm.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DescriptionDefinition.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-htmlgen-master/htmlgen/structure.py": {
        "Section.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Navigation.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aside.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Header.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Footer.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Heading.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int",
                    "str",
                    "T",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "python-htmlgen-master/htmlgen/table.py": {
        "Table.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.create_head": {
            "name": "create_head",
            "location": 46,
            "return": [
                "TableHead"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.create_header_row": {
            "name": "create_header_row",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.create_body": {
            "name": "create_body",
            "location": 75,
            "return": [
                "TableBody"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.create_row": {
            "name": "create_row",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.append_header_row": {
            "name": "append_header_row",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "Table.append_row": {
            "name": "append_row",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "dict[str, typing.Any]",
                    "str",
                    "list[]"
                ]
            }
        },
        "Table.create_simple_header_row": {
            "name": "create_simple_header_row",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.create_simple_row": {
            "name": "create_simple_row",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.generate_children": {
            "name": "generate_children",
            "location": 170,
            "return": [
                "Generator[(Union[(TableBody, TableHead)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.generate_header_rows": {
            "name": "generate_header_rows",
            "location": 186,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.generate_rows": {
            "name": "generate_rows",
            "location": 195,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TableSection.create_row": {
            "name": "create_row",
            "location": 206,
            "return": [
                "TableRow"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableHead.__init__": {
            "name": "__init__",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableBody.__init__": {
            "name": "__init__",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableRow.__init__": {
            "name": "__init__",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableRow.create_cell": {
            "name": "create_cell",
            "location": 255,
            "return": [
                "TableCell"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "typing.Text"
                ]
            }
        },
        "TableRow.create_cells": {
            "name": "create_cells",
            "location": 265,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableRow.create_header_cell": {
            "name": "create_header_cell",
            "location": 277,
            "return": [
                "TableHeaderCell"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "typing.Text"
                ]
            }
        },
        "TableRow.create_header_cells": {
            "name": "create_header_cells",
            "location": 288,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TableCellBase.__init__": {
            "name": "__init__",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element_name": [
                    "str",
                    "None"
                ]
            }
        },
        "TableHeaderCell.__init__": {
            "name": "__init__",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableCell.__init__": {
            "name": "__init__",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColumnGroup.__init__": {
            "name": "__init__",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColumnGroup.create_column": {
            "name": "create_column",
            "location": 349,
            "return": [
                "Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColumnGroup.create_columns_with_classes": {
            "name": "create_columns_with_classes",
            "location": 355,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.__init__": {
            "name": "__init__",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColumnGroup.create_columns_with_classes.create_column": {
            "name": "create_column",
            "location": 358,
            "return": [
                "Column"
            ],
            "arguments": {
                "css": []
            }
        }
    },
    "python-htmlgen-master/htmlgen/time.py": {
        "Time.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "date": [
                    "str"
                ]
            }
        }
    },
    "python-htmlgen-master/htmlgen/timeutil.py": {
        "parse_rfc3339_partial_time": {
            "name": "parse_rfc3339_partial_time",
            "location": 5,
            "return": [
                "Optional[datetime.time]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Union[str, datetime.datetime]",
                    "datetime.datetime"
                ]
            }
        }
    },
    "python-htmlgen-master/htmlgen/video.py": {
        "Video.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str"
                ]
            }
        }
    },
    "python-htmlgen-master/htmlgen/__init__.py": {},
    "python-htmlgen-master/test_htmlgen/attribute.py": {
        "HTMLAttributeTest.test_regular": {
            "name": "test_regular",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLAttributeTest.test_regular_with_default": {
            "name": "test_regular_with_default",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLAttributeTest.test_boolean": {
            "name": "test_boolean",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLAttributeTest.test_integer": {
            "name": "test_integer",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLAttributeTest.test_integer_with_default": {
            "name": "test_integer_with_default",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLAttributeTest.test_float": {
            "name": "test_float",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLAttributeTest.test_float_with_default": {
            "name": "test_float_with_default",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLAttributeTest.test_time": {
            "name": "test_time",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLAttributeTest.test_time_with_fraction": {
            "name": "test_time_with_fraction",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLAttributeTest.test_time__invalid_value": {
            "name": "test_time__invalid_value",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLAttributeTest.test_time_with_default": {
            "name": "test_time_with_default",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLAttributeTest.test_list": {
            "name": "test_list",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLAttributeTest.test_data": {
            "name": "test_data",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLAttributeTest.test_data_with_default": {
            "name": "test_data_with_default",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLAttributeTest.test_css_class": {
            "name": "test_css_class",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumAttributeTest.test_enum": {
            "name": "test_enum",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumAttributeTest.test_default": {
            "name": "test_default",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumAttributeTest.test_not_an_enum": {
            "name": "test_not_an_enum",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumAttributeTest.test_invalid_value": {
            "name": "test_invalid_value",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-htmlgen-master/test_htmlgen/block.py": {
        "DivisionTest.test_without_initial_content": {
            "name": "test_without_initial_content",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DivisionTest.test_with_initial_content": {
            "name": "test_with_initial_content",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParagraphTest.test_without_initial_content": {
            "name": "test_without_initial_content",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParagraphTest.test_with_initial_content": {
            "name": "test_with_initial_content",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreformattedTest.test_render": {
            "name": "test_render",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-htmlgen-master/test_htmlgen/document.py": {
        "_TestingHead.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestingHead.add_stylesheet": {
            "name": "add_stylesheet",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "style": [
                    "float",
                    "int"
                ]
            }
        },
        "_TestingHead.add_stylesheets": {
            "name": "add_stylesheets",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestingHead.add_script": {
            "name": "add_script",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "script": [
                    "float",
                    "int"
                ]
            }
        },
        "_TestingHead.add_scripts": {
            "name": "add_scripts",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentTest.test_generate": {
            "name": "test_generate",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentTest.test_title": {
            "name": "test_title",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentTest.test_default_title": {
            "name": "test_default_title",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentTest.test_language": {
            "name": "test_language",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentTest.test_default_language": {
            "name": "test_default_language",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentTest.test_stylesheets": {
            "name": "test_stylesheets",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentTest.test_scripts": {
            "name": "test_scripts",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentTest.test_append": {
            "name": "test_append",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLRootTest.test_default_language": {
            "name": "test_default_language",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLRootTest.test_custom_language": {
            "name": "test_custom_language",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLRootTest.test_title": {
            "name": "test_title",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeadTest.test_element": {
            "name": "test_element",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeadTest.test_default_title": {
            "name": "test_default_title",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeadTest.test_custom_title": {
            "name": "test_custom_title",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeadTest.test_charset": {
            "name": "test_charset",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeadTest.test_custom_title_element": {
            "name": "test_custom_title_element",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeadTest.test_stylesheets": {
            "name": "test_stylesheets",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeadTest.test_scripts": {
            "name": "test_scripts",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BodyTest.test_element": {
            "name": "test_element",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TitleTest.test_custom_title": {
            "name": "test_custom_title",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TitleTest.test_default_title": {
            "name": "test_default_title",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaTest.test_default": {
            "name": "test_default",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaTest.test_create_charset": {
            "name": "test_create_charset",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScriptTest.test_url": {
            "name": "test_url",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScriptTest.test_script": {
            "name": "test_script",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScriptTest.test_type": {
            "name": "test_type",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScriptTest.test_type_default": {
            "name": "test_type_default",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONScriptTest.test_element_type": {
            "name": "test_element_type",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONScriptTest.test_type": {
            "name": "test_type",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONScriptTest.test_script": {
            "name": "test_script",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONScriptTest.test_serialized": {
            "name": "test_serialized",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONScriptTest.test_escape_slash": {
            "name": "test_escape_slash",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeadLinkTest.test_attributes": {
            "name": "test_attributes",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeadLinkTest.test_create_stylesheet": {
            "name": "test_create_stylesheet",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainTest.test_generate": {
            "name": "test_generate",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-htmlgen-master/test_htmlgen/element.py": {
        "NonVoidElementTest.test_generate_children": {
            "name": "test_generate_children",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_true": {
            "name": "test_true",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_append_extend": {
            "name": "test_append_extend",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_empty": {
            "name": "test_empty",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_generate_empty": {
            "name": "test_generate_empty",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_generate_with_children": {
            "name": "test_generate_with_children",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_attributes": {
            "name": "test_attributes",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_attribute_order": {
            "name": "test_attribute_order",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_get_attribute": {
            "name": "test_get_attribute",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_remove_attribute": {
            "name": "test_remove_attribute",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_attribute_names": {
            "name": "test_attribute_names",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_add_one_css_classes": {
            "name": "test_add_one_css_classes",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_add_multiple_css_classes": {
            "name": "test_add_multiple_css_classes",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_remove_css_classes": {
            "name": "test_remove_css_classes",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_has_css_class": {
            "name": "test_has_css_class",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_set_one_style": {
            "name": "test_set_one_style",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_set_multiple_styles": {
            "name": "test_set_multiple_styles",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_id": {
            "name": "test_id",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_id_space": {
            "name": "test_id_space",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_data_set": {
            "name": "test_data_set",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_data_get": {
            "name": "test_data_get",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_data_get_not_set": {
            "name": "test_data_get_not_set",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_data_overwrite": {
            "name": "test_data_overwrite",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_data_delete": {
            "name": "test_data_delete",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_data_delete_unknown": {
            "name": "test_data_delete_unknown",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_data_clear": {
            "name": "test_data_clear",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_data_replace": {
            "name": "test_data_replace",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_data_iteration": {
            "name": "test_data_iteration",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_data_length": {
            "name": "test_data_length",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementTest.test_data_external": {
            "name": "test_data_external",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShortElementTest.test_empty": {
            "name": "test_empty",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShortElementTest.test_attribute": {
            "name": "test_attribute",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NonVoidElementTest.test_generate_children.TestingElement.generate_children": {
            "name": "generate_children",
            "location": 18,
            "return": [
                "",
                "typing.Generator[typing.Text]",
                "typing.Generator[VoidElement]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-htmlgen-master/test_htmlgen/form.py": {
        "FormTest.test_implicit_arguments": {
            "name": "test_implicit_arguments",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormTest.test_arguments": {
            "name": "test_arguments",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormTest.test_default_arguments": {
            "name": "test_default_arguments",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormTest.test_target": {
            "name": "test_target",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormTest.test_multipart": {
            "name": "test_multipart",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputTest.test_with_name": {
            "name": "test_with_name",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputTest.test_defaults": {
            "name": "test_defaults",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputTest.test_attributes": {
            "name": "test_attributes",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputTest.test_boolean_attributes": {
            "name": "test_boolean_attributes",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextInputTest.test_defaults": {
            "name": "test_defaults",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextInputTest.test_with_arguments": {
            "name": "test_with_arguments",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchInputTest.test_defaults": {
            "name": "test_defaults",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchInputTest.test_with_arguments": {
            "name": "test_with_arguments",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PasswordInputTest.test_defaults": {
            "name": "test_defaults",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PasswordInputTest.test_with_arguments": {
            "name": "test_with_arguments",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumberInputTest.test_defaults": {
            "name": "test_defaults",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumberInputTest.test_with_arguments": {
            "name": "test_with_arguments",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumberInputTest.test_value_zero": {
            "name": "test_value_zero",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumberInputTest.test_attributes": {
            "name": "test_attributes",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateInputTest.test_defaults": {
            "name": "test_defaults",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateInputTest.test_with_arguments": {
            "name": "test_with_arguments",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateInputTest.test_value": {
            "name": "test_value",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeInputTest.test_defaults": {
            "name": "test_defaults",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeInputTest.test_construct_with_arguments": {
            "name": "test_construct_with_arguments",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeInputTest.test_minimum_maximum": {
            "name": "test_minimum_maximum",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeInputTest.test_minimum_above_maximum": {
            "name": "test_minimum_above_maximum",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeInputTest.test_maximum_below_minimum": {
            "name": "test_maximum_below_minimum",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeInputTest.test_step": {
            "name": "test_step",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeInputTest.test_step_get_invalid": {
            "name": "test_step_get_invalid",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeInputTest.test_step_set_invalid": {
            "name": "test_step_set_invalid",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckboxTest.test_defaults": {
            "name": "test_defaults",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckboxTest.test_name_and_value": {
            "name": "test_name_and_value",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckboxTest.test_checked": {
            "name": "test_checked",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RadioButtonTest.test_defaults": {
            "name": "test_defaults",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RadioButtonTest.test_name_and_value": {
            "name": "test_name_and_value",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RadioButtonTest.test_checked": {
            "name": "test_checked",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInputTest.test_defaults": {
            "name": "test_defaults",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInputTest.test_construct_with_name": {
            "name": "test_construct_with_name",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInputTest.test_max_length": {
            "name": "test_max_length",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInputTest.test_accepts": {
            "name": "test_accepts",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HiddenInputTest.test_construct": {
            "name": "test_construct",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubmitButtonTest.test_construct": {
            "name": "test_construct",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubmitButtonTest.test_label": {
            "name": "test_label",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ButtonTest.test_with_children": {
            "name": "test_with_children",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ButtonTest.test_disabled": {
            "name": "test_disabled",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextAreaTest.test_with_name": {
            "name": "test_with_name",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextAreaTest.test_without_name": {
            "name": "test_without_name",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextAreaTest.test_attributes": {
            "name": "test_attributes",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectTest.test_attributes": {
            "name": "test_attributes",
            "location": 459,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectTest.test_with_name": {
            "name": "test_with_name",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectTest.test_without_name": {
            "name": "test_without_name",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectTest.test_create_group": {
            "name": "test_create_group",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectTest.test_create_option": {
            "name": "test_create_option",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectTest.test_create_option__selected": {
            "name": "test_create_option__selected",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectTest.test_create_option__option_object": {
            "name": "test_create_option__option_object",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectTest.test_create_option__option_object__default_value": {
            "name": "test_create_option__option_object__default_value",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectTest.test_create_option__selected_deselect_others": {
            "name": "test_create_option__selected_deselect_others",
            "location": 517,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectTest.test_get_selected_option": {
            "name": "test_get_selected_option",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectTest.test_get_selected_option__return_first": {
            "name": "test_get_selected_option__return_first",
            "location": 530,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectTest.test_get_selected_option__no_selected_elements": {
            "name": "test_get_selected_option__no_selected_elements",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectTest.test_get_selected_option__non_option_elements": {
            "name": "test_get_selected_option__non_option_elements",
            "location": 547,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectTest.test_get_selected_option__in_option_group": {
            "name": "test_get_selected_option__in_option_group",
            "location": 552,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectTest.test_get_selected_option__option_group_has_string_child": {
            "name": "test_get_selected_option__option_group_has_string_child",
            "location": 559,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectTest.test_set_selected_option": {
            "name": "test_set_selected_option",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectTest.test_set_selected_option__deselect_others": {
            "name": "test_set_selected_option__deselect_others",
            "location": 574,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectTest.test_set_selected_option__string_children": {
            "name": "test_set_selected_option__string_children",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectTest.test_get_selected_value": {
            "name": "test_get_selected_value",
            "location": 588,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectTest.test_get_selected_value__implicit_value": {
            "name": "test_get_selected_value__implicit_value",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectTest.test_get_selected_value__no_selected": {
            "name": "test_get_selected_value__no_selected",
            "location": 600,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectTest.test_set_selected_value": {
            "name": "test_set_selected_value",
            "location": 605,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectTest.test_set_selected_value__value_not_found": {
            "name": "test_set_selected_value__value_not_found",
            "location": 615,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptionGroupTest.test_default": {
            "name": "test_default",
            "location": 624,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptionGroupTest.test_disabled": {
            "name": "test_disabled",
            "location": 630,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptionGroupTest.create_option": {
            "name": "create_option",
            "location": 638,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptionTest.test_default_value": {
            "name": "test_default_value",
            "location": 648,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptionTest.test_with_value": {
            "name": "test_with_value",
            "location": 655,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptionTest.test_set_value": {
            "name": "test_set_value",
            "location": 662,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptionTest.test_set_value_to_none": {
            "name": "test_set_value_to_none",
            "location": 670,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelTest.test_default": {
            "name": "test_default",
            "location": 678,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelTest.test_children": {
            "name": "test_children",
            "location": 682,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelTest.test_for": {
            "name": "test_for",
            "location": 686,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-htmlgen-master/test_htmlgen/generator.py": {
        "_TestingGenerator.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": []
            }
        },
        "_TestingGenerator.generate": {
            "name": "generate",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeneratorTest.test_empty_generate": {
            "name": "test_empty_generate",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneratorTest.test_generate_strings_only": {
            "name": "test_generate_strings_only",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneratorTest.test_generate_python2_strings": {
            "name": "test_generate_python2_strings",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneratorTest.test_generate_non_ascii": {
            "name": "test_generate_non_ascii",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneratorTest.test_generate_bytes": {
            "name": "test_generate_bytes",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneratorTest.test_generate_sub_generators": {
            "name": "test_generate_sub_generators",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneratorTest.test_str": {
            "name": "test_str",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneratorTest.test_invalid_class": {
            "name": "test_invalid_class",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullGeneratorTest.test_generate": {
            "name": "test_generate",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorGeneratorTest.test_generate": {
            "name": "test_generate",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChildGeneratorTest.test_append": {
            "name": "test_append",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChildGeneratorTest.test_extend": {
            "name": "test_extend",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChildGeneratorTest.test_remove_string": {
            "name": "test_remove_string",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChildGeneratorTest.test_remove_generator": {
            "name": "test_remove_generator",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChildGeneratorTest.test_remove__not_found": {
            "name": "test_remove__not_found",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChildGeneratorTest.test_len": {
            "name": "test_len",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChildGeneratorTest.test_empty": {
            "name": "test_empty",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChildGeneratorTest.test_children": {
            "name": "test_children",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLChildGeneratorTest.test_append": {
            "name": "test_append",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLChildGeneratorTest.test_append_raw": {
            "name": "test_append_raw",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLChildGeneratorTest.test_extend": {
            "name": "test_extend",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLChildGeneratorTest.test_extend_raw": {
            "name": "test_extend_raw",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLChildGeneratorTest.test_remove_not_found": {
            "name": "test_remove_not_found",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLChildGeneratorTest.test_remove": {
            "name": "test_remove",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLChildGeneratorTest.test_remove_generator": {
            "name": "test_remove_generator",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLChildGeneratorTest.test_remove_raw_not_found": {
            "name": "test_remove_raw_not_found",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLChildGeneratorTest.test_remove_raw": {
            "name": "test_remove_raw",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLChildGeneratorTest.test_remove_raw_generator": {
            "name": "test_remove_raw_generator",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLChildGeneratorTest.test_len": {
            "name": "test_len",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLChildGeneratorTest.test_empty": {
            "name": "test_empty",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLChildGeneratorTest.test_children": {
            "name": "test_children",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLChildGeneratorTest.test_children_readonly": {
            "name": "test_children_readonly",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenerateHTMLStringTest.test_wrap_string": {
            "name": "test_wrap_string",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenerateHTMLStringTest.test_escape_string": {
            "name": "test_escape_string",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenerateHTMLStringTest.test_do_not_wrap_generator": {
            "name": "test_do_not_wrap_generator",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JoinGeneratorTest.test_no_pieces": {
            "name": "test_no_pieces",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JoinGeneratorTest.test_supplied_pieces": {
            "name": "test_supplied_pieces",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JoinGeneratorTest.test_append_extend": {
            "name": "test_append_extend",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JoinGeneratorTest.test_glue_is_generator": {
            "name": "test_glue_is_generator",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLJoinGeneratorTest.test_no_pieces": {
            "name": "test_no_pieces",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLJoinGeneratorTest.test_supplied_pieces": {
            "name": "test_supplied_pieces",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLJoinGeneratorTest.test_append_extend": {
            "name": "test_append_extend",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLJoinGeneratorTest.test_glue_is_generator": {
            "name": "test_glue_is_generator",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-htmlgen-master/test_htmlgen/image.py": {
        "ImageTest.test_attributes": {
            "name": "test_attributes",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageTest.test_attributes_default_alt": {
            "name": "test_attributes_default_alt",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageTest.test_with_alt": {
            "name": "test_with_alt",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageTest.test_without_alt": {
            "name": "test_without_alt",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-htmlgen-master/test_htmlgen/inline.py": {
        "SpanTest.test_without_initial_content": {
            "name": "test_without_initial_content",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpanTest.test_with_initial_content": {
            "name": "test_with_initial_content",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HighlightTest.test_without_initial_content": {
            "name": "test_without_initial_content",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HighlightTest.test_with_initial_content": {
            "name": "test_with_initial_content",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StrongTest.test_without_initial_content": {
            "name": "test_without_initial_content",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StrongTest.test_with_initial_content": {
            "name": "test_with_initial_content",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlternateTest.test_without_initial_content": {
            "name": "test_without_initial_content",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlternateTest.test_with_initial_content": {
            "name": "test_with_initial_content",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmphasisTest.test_without_initial_content": {
            "name": "test_without_initial_content",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmphasisTest.test_with_initial_content": {
            "name": "test_with_initial_content",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmallTest.test_without_initial_content": {
            "name": "test_without_initial_content",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmallTest.test_with_initial_content": {
            "name": "test_with_initial_content",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineBreakTest.test_line_break": {
            "name": "test_line_break",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-htmlgen-master/test_htmlgen/link.py": {
        "LinkTest.test_simple": {
            "name": "test_simple",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkTest.test_caption_argument": {
            "name": "test_caption_argument",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkTest.test_url": {
            "name": "test_url",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkTest.test_target": {
            "name": "test_target",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkTest.test_title": {
            "name": "test_title",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-htmlgen-master/test_htmlgen/list.py": {
        "OrderedListTest.test_empty": {
            "name": "test_empty",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedListTest.test_create_item_no_content": {
            "name": "test_create_item_no_content",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedListTest.test_create_item_with_content": {
            "name": "test_create_item_with_content",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedListTest.test_create_items": {
            "name": "test_create_items",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedListTest.test_start_attribute": {
            "name": "test_start_attribute",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedListTest.test_start_attribute_default": {
            "name": "test_start_attribute_default",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnorderedListTest.test_empty": {
            "name": "test_empty",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnorderedListTest.test_create_item_no_content": {
            "name": "test_create_item_no_content",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnorderedListTest.test_create_item_with_content": {
            "name": "test_create_item_with_content",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnorderedListTest.test_create_items": {
            "name": "test_create_items",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListItemTest.test_without_initial_content": {
            "name": "test_without_initial_content",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListItemTest.test_with_initial_content": {
            "name": "test_with_initial_content",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DescriptionListTest.test_create_term": {
            "name": "test_create_term",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-htmlgen-master/test_htmlgen/structure.py": {
        "SectionTest.test_element": {
            "name": "test_element",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArticleTest.test_element": {
            "name": "test_element",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NavigationTest.test_element": {
            "name": "test_element",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsideTest.test_element": {
            "name": "test_element",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeaderTest.test_element": {
            "name": "test_element",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FooterTest.test_element": {
            "name": "test_element",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeadingTest.test_without_initial_content": {
            "name": "test_without_initial_content",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeadingTest.test_with_initial_content": {
            "name": "test_with_initial_content",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeadingTest.test_default_depth": {
            "name": "test_default_depth",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-htmlgen-master/test_htmlgen/table.py": {
        "TableTest.test_empty": {
            "name": "test_empty",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableTest.test_create_head_and_body": {
            "name": "test_create_head_and_body",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableTest.test_append_header_row__implicit_head": {
            "name": "test_append_header_row__implicit_head",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableTest.test_create_header_row__implicit_head": {
            "name": "test_create_header_row__implicit_head",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableTest.test_create_header_row__row_object": {
            "name": "test_create_header_row__row_object",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableTest.test_append_row__implicit_body": {
            "name": "test_append_row__implicit_body",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableTest.test_create_row__implicit_body": {
            "name": "test_create_row__implicit_body",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableTest.test_create_row__row_object": {
            "name": "test_create_row__row_object",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableTest.test_children_order": {
            "name": "test_children_order",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableTest.test_create_simple_header_row": {
            "name": "test_create_simple_header_row",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableTest.test_create_simple_header_row__returned_row": {
            "name": "test_create_simple_header_row__returned_row",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableTest.test_create_simple_row": {
            "name": "test_create_simple_row",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableTest.test_create_simple_row__returned_row": {
            "name": "test_create_simple_row__returned_row",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableTest.test_generate_header_rows": {
            "name": "test_generate_header_rows",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableTest.test_generate_rows": {
            "name": "test_generate_rows",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableHeadTest.test_create_row": {
            "name": "test_create_row",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableRowTest.test_create_cell": {
            "name": "test_create_cell",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableRowTest.test_create_cells": {
            "name": "test_create_cells",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableRowTest.test_create_cells_return_value": {
            "name": "test_create_cells_return_value",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableRowTest.test_create_header_cell": {
            "name": "test_create_header_cell",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableRowTest.test_create_header_cells": {
            "name": "test_create_header_cells",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableRowTest.test_create_header_cells_return_value": {
            "name": "test_create_header_cells_return_value",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableCellTest.test_default_columns_and_rows": {
            "name": "test_default_columns_and_rows",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableCellTest.test_columns_and_rows": {
            "name": "test_columns_and_rows",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableCellTest.test_element_child": {
            "name": "test_element_child",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColumnGroupTest.test_create_column": {
            "name": "test_create_column",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColumnGroupTest.test_create_columns_with_classes": {
            "name": "test_create_columns_with_classes",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableTest.test_generate_header_rows.MyTable.generate_header_rows": {
            "name": "generate_header_rows",
            "location": 171,
            "return": [
                "",
                "typing.Generator[TableRow]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableTest.test_generate_rows.MyTable.generate_rows": {
            "name": "generate_rows",
            "location": 179,
            "return": [
                "",
                "typing.Generator[TableRow]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-htmlgen-master/test_htmlgen/time.py": {
        "TimeTest.test_date": {
            "name": "test_date",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeTest.test_datetime": {
            "name": "test_datetime",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-htmlgen-master/test_htmlgen/util.py": {
        "parse_short_tag": {
            "name": "parse_short_tag",
            "location": 8,
            "return": [
                "Tag"
            ],
            "arguments": {
                "string": [
                    "str",
                    "Dict[int, str]",
                    "dict[int, str]"
                ]
            }
        },
        "Tag.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Tag.add_attribute": {
            "name": "add_attribute",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "bool"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "python-htmlgen-master/test_htmlgen/video.py": {
        "VideoTest.test_src_only": {
            "name": "test_src_only",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoTest.test_controls": {
            "name": "test_controls",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoTest.test_poster": {
            "name": "test_poster",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoTest.test_preload": {
            "name": "test_preload",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-htmlgen-master/test_htmlgen/__init__.py": {}
}
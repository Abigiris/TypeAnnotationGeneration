{
    "python-imaginary-master/setup.py": {
        "read": {
            "name": "read",
            "location": 36,
            "return": [
                "bytes"
            ],
            "arguments": {}
        },
        "find_meta": {
            "name": "find_meta",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "meta": [
                    "str"
                ]
            }
        }
    },
    "python-imaginary-master/docs/conf.py": {},
    "python-imaginary-master/src/imaginary/client.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "transport": [
                    "imaginary.transports.Transport"
                ]
            }
        },
        "Client.post": {
            "name": "post",
            "location": 36,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "params": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "data": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "files": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "Client.get": {
            "name": "get",
            "location": 58,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        }
    },
    "python-imaginary-master/src/imaginary/exceptions.py": {},
    "python-imaginary-master/src/imaginary/image.py": {
        "Image.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "imaginary.client.Client"
                ],
                "file": [
                    "IO[bytes]"
                ],
                "registry": [
                    "imaginary.registry.Registry"
                ]
            }
        },
        "Image.__call__": {
            "name": "__call__",
            "location": 45,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "imaginary.operations.BaseOperation"
                ]
            }
        },
        "Image.__getattr__": {
            "name": "__getattr__",
            "location": 60,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Image.pipeline": {
            "name": "pipeline",
            "location": 86,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Image.__getattr__.inner": {
            "name": "inner",
            "location": 81,
            "return": [
                "Container[T]",
                "Sequence['cirq.Qid']",
                "bool",
                "float",
                "int"
            ],
            "arguments": {}
        }
    },
    "python-imaginary-master/src/imaginary/imaginary.py": {
        "Imaginary.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "transport": [
                    "imaginary.transports.Transport"
                ]
            }
        },
        "Imaginary.health": {
            "name": "health",
            "location": 37,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Imaginary.versions": {
            "name": "versions",
            "location": 42,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Imaginary.__call__": {
            "name": "__call__",
            "location": 47,
            "return": [
                "imaginary.image.Image"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "IO[bytes]"
                ]
            }
        },
        "Imaginary.from_path": {
            "name": "from_path",
            "location": 54,
            "return": [
                "imaginary.image.Image"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Imaginary.from_bytes": {
            "name": "from_bytes",
            "location": 62,
            "return": [
                "imaginary.image.Image"
            ],
            "arguments": {
                "self": [],
                "bytes_": [
                    "bytes"
                ]
            }
        }
    },
    "python-imaginary-master/src/imaginary/operations.py": {
        "BaseOperation.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "registry": [
                    "Optional[imaginary.registry.Registry]"
                ],
                "abstract": [
                    "bool"
                ]
            }
        },
        "BaseOperation._name": {
            "name": "_name",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "BaseOperation._api_name": {
            "name": "_api_name",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Exception",
                    "type"
                ]
            }
        },
        "BaseOperation.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOperation.__repr__": {
            "name": "__repr__",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOperation._value": {
            "name": "_value",
            "location": 106,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "BaseOperation.value": {
            "name": "value",
            "location": 113,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.pipeline_values": {
            "name": "pipeline_values",
            "location": 198,
            "return": [
                "Iterator[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.value": {
            "name": "value",
            "location": 210,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-imaginary-master/src/imaginary/params.py": {
        "EnumParam.serialize": {
            "name": "serialize",
            "location": 10,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Color.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "red": [
                    "int"
                ],
                "green": [
                    "int"
                ],
                "blue": [
                    "int"
                ]
            }
        },
        "Color.serialize": {
            "name": "serialize",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-imaginary-master/src/imaginary/registry.py": {
        "Registry.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Registry.__getitem__": {
            "name": "__getitem__",
            "location": 23,
            "return": [
                "type"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Registry.__contains__": {
            "name": "__contains__",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Registry.register": {
            "name": "register",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "type"
                ]
            }
        }
    },
    "python-imaginary-master/src/imaginary/transports.py": {
        "Transport.get": {
            "name": "get",
            "location": 27,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "Transport.post": {
            "name": "post",
            "location": 37,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "params": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "data": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "files": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "MockTransport.get": {
            "name": "get",
            "location": 57,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "MockTransport.post": {
            "name": "post",
            "location": 61,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "params": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "data": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "files": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "RequestsTransport.get": {
            "name": "get",
            "location": 81,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "RequestsTransport.post": {
            "name": "post",
            "location": 89,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "params": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "data": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "files": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        }
    },
    "python-imaginary-master/src/imaginary/types.py": {},
    "python-imaginary-master/src/imaginary/__init__.py": {},
    "python-imaginary-master/tests/test_client.py": {
        "client": {
            "name": "client",
            "location": 8,
            "return": [
                "Client",
                "dict"
            ],
            "arguments": {}
        },
        "test_client_get": {
            "name": "test_client_get",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "mocker": []
            }
        },
        "test_client_post": {
            "name": "test_client_post",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "mocker": []
            }
        }
    },
    "python-imaginary-master/tests/test_image.py": {
        "client": {
            "name": "client",
            "location": 10,
            "return": [
                "Client",
                "dict"
            ],
            "arguments": {}
        },
        "file": {
            "name": "file",
            "location": 20,
            "return": [
                "BytesIO",
                "Pattern",
                "Set[str]",
                "str"
            ],
            "arguments": {}
        },
        "registry": {
            "name": "registry",
            "location": 25,
            "return": [
                "Registry",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "image": {
            "name": "image",
            "location": 31,
            "return": [
                "Image",
                "Optional[str]",
                "Optional[int]",
                "Tuple[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "client": [],
                "file": [],
                "registry": []
            }
        },
        "test_image_call": {
            "name": "test_image_call",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "image": [
                    "clienmodels.Client"
                ],
                "registry": [
                    "bool",
                    "dict[str, bool]",
                    "int",
                    "tuple[]",
                    "Dict[str, bool]",
                    "tuple"
                ],
                "mocker": [
                    "bytes",
                    "str",
                    "List[int]",
                    "list[int]",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "test_image_operation_as_attribute": {
            "name": "test_image_operation_as_attribute",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "image": [
                    "clienmodels.Client"
                ],
                "registry": [
                    "bool",
                    "dict[str, bool]",
                    "int",
                    "Dict[str, bool]"
                ],
                "mocker": [
                    "bytes",
                    "List[int]",
                    "list[int]",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "test_image_unknown_operation_as_attribute_fails": {
            "name": "test_image_unknown_operation_as_attribute_fails",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "image": [
                    "str",
                    "docker_push_latest_if_changed.Image",
                    "float",
                    "int"
                ]
            }
        },
        "test_image_pipeline_attribute": {
            "name": "test_image_pipeline_attribute",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "image": [
                    "Callable",
                    "Optional[str]"
                ],
                "registry": [
                    "int",
                    "tuple[typing.Union[int,int,int]]",
                    "float",
                    "PIL.Image",
                    "Tuple[int, int, int]",
                    "PIL.Image.Image"
                ],
                "mocker": [
                    "List[int]",
                    "list[int]",
                    "str",
                    "tuple",
                    "tuple[]"
                ]
            }
        }
    },
    "python-imaginary-master/tests/test_imaginary.py": {
        "imaginary": {
            "name": "imaginary",
            "location": 11,
            "return": [
                "Imaginary",
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "test_imaginary_health": {
            "name": "test_imaginary_health",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "imaginary": [],
                "mocker": [
                    "str",
                    "float"
                ]
            }
        },
        "test_imaginary_versions": {
            "name": "test_imaginary_versions",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "imaginary": [],
                "mocker": [
                    "str"
                ]
            }
        },
        "test_imaginary_make_image": {
            "name": "test_imaginary_make_image",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "imaginary": [],
                "mocker": []
            }
        },
        "test_imaginary_make_image_from_bytes": {
            "name": "test_imaginary_make_image_from_bytes",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "imaginary": [
                    "int"
                ],
                "mocker": []
            }
        },
        "test_imaginary_make_image_from_path": {
            "name": "test_imaginary_make_image_from_path",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "imaginary": [
                    "str"
                ],
                "mocker": []
            }
        }
    },
    "python-imaginary-master/tests/test_operations.py": {
        "registry": {
            "name": "registry",
            "location": 9,
            "return": [
                "Registry",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_operations_name": {
            "name": "test_operations_name",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "registry": []
            }
        },
        "test_operations_api_name": {
            "name": "test_operations_api_name",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "registry": []
            }
        },
        "test_operations_repr": {
            "name": "test_operations_repr",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "registry": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_operations_value": {
            "name": "test_operations_value",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "registry": [
                    "Dict[str, Sequence[str]]",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "test_operations_positional_arguments": {
            "name": "test_operations_positional_arguments",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "registry": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_operations_cant_use_positional_argument_for_optional_params": {
            "name": "test_operations_cant_use_positional_argument_for_optional_params",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "registry": []
            }
        },
        "test_operations_multiple_values_for_required_param": {
            "name": "test_operations_multiple_values_for_required_param",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "registry": [
                    "Dict[str, Sequence[str]]",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "test_operations_missing_required_argument": {
            "name": "test_operations_missing_required_argument",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "registry": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_operations_unexpected_argument": {
            "name": "test_operations_unexpected_argument",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "registry": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_operations_pipeline_value": {
            "name": "test_operations_pipeline_value",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "registry": [
                    "str"
                ]
            }
        }
    },
    "python-imaginary-master/tests/test_params.py": {
        "test_enum_param_serialize": {
            "name": "test_enum_param_serialize",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_color_serialize": {
            "name": "test_color_serialize",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-imaginary-master/tests/test_registry.py": {
        "registry": {
            "name": "registry",
            "location": 7,
            "return": [
                "Registry",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_registry_register": {
            "name": "test_registry_register",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "registry": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_registry_abstract_operation_not_registered": {
            "name": "test_registry_abstract_operation_not_registered",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "registry": []
            }
        },
        "test_registry_registering_operation_twice_fails": {
            "name": "test_registry_registering_operation_twice_fails",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "registry": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        }
    },
    "python-imaginary-master/tests/test_transports.py": {
        "test_transports_mock_get": {
            "name": "test_transports_mock_get",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_transports_mock_post": {
            "name": "test_transports_mock_post",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_transports_requests_get": {
            "name": "test_transports_requests_get",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_transports_requests_get_fails": {
            "name": "test_transports_requests_get_fails",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_transports_requests_post": {
            "name": "test_transports_requests_post",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_transports_requests_post_fails": {
            "name": "test_transports_requests_post_fails",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    }
}
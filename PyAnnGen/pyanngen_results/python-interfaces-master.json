{
    "python-interfaces-master/interfaces/base.py": {
        "_InterfaceMeta.__interface_spec__": {
            "name": "__interface_spec__",
            "location": 14,
            "return": [
                "interfaces.spec.InterfaceSpec"
            ],
            "arguments": {
                "self": []
            }
        },
        "_InterfaceMeta.__subclasscheck__": {
            "name": "__subclasscheck__",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "subclass": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Interface.__new__": {
            "name": "__new__",
            "location": 22,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "Tuple[()]",
                    "Union[Callable, str]",
                    "str",
                    "bool"
                ]
            }
        },
        "Interface.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "python-interfaces-master/interfaces/compat.py": {
        "Object.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "Optional[List[str]]"
                ],
                "implements": [
                    "Optional[str]",
                    "Sequence[str]",
                    "float",
                    "str"
                ]
            }
        }
    },
    "python-interfaces-master/interfaces/exceptions.py": {
        "InterfaceNoInstanceAllowedError.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterfaceNoInstanceAllowedError.__str__": {
            "name": "__str__",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterfaceNotImplementedError.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterfaceNotImplementedError.__str__": {
            "name": "__str__",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterfaceOverloadingError.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterfaceOverloadingError.__str__": {
            "name": "__str__",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-interfaces-master/interfaces/spec.py": {
        "interface_spec": {
            "name": "interface_spec",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "iface": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "InterfaceSpec.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iface": [
                    "bool",
                    "str"
                ]
            }
        },
        "InterfaceSpec.__getitem__": {
            "name": "__getitem__",
            "location": 23,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable"
                ]
            }
        },
        "InterfaceSpec.__iter__": {
            "name": "__iter__",
            "location": 26,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterfaceSpec.__len__": {
            "name": "__len__",
            "location": 29,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterfaceSpec.__repr__": {
            "name": "__repr__",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterfaceSpec._get_iface_attrs": {
            "name": "_get_iface_attrs",
            "location": 36,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "iface": [
                    "str",
                    "bool"
                ]
            }
        },
        "_PartialInterfaceSpec._get_iface_attrs": {
            "name": "_get_iface_attrs",
            "location": 44,
            "return": [
                "dict_keys[str]"
            ],
            "arguments": {
                "iface": [
                    "bool",
                    "str",
                    "OrderedDict"
                ]
            }
        }
    },
    "python-interfaces-master/interfaces/typing.py": {},
    "python-interfaces-master/interfaces/util.py": {
        "isimplementation": {
            "name": "isimplementation",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "Type[T]",
                    "int",
                    "str",
                    "Type['AbstractIntegrationConversation']"
                ],
                "interface_or_iterable": [
                    "Type",
                    "Type[T]",
                    "int",
                    "str",
                    "Type['AbstractIntegrationConversation']"
                ]
            }
        },
        "_isimplementation": {
            "name": "_isimplementation",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "str",
                    "bool"
                ],
                "iface": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_isimplementation_fail": {
            "name": "_isimplementation_fail",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "type",
                    "Callable",
                    "bool"
                ],
                "attr_name": [
                    "str",
                    "type",
                    "Callable",
                    "bool"
                ],
                "iface": [
                    "str",
                    "type",
                    "Callable",
                    "bool"
                ],
                "raise_errors": [
                    "bool"
                ]
            }
        }
    },
    "python-interfaces-master/interfaces/__init__.py": {},
    "python-interfaces-master/tests/conftest.py": {
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "typeT1": {
            "name": "typeT1",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "typeT2": {
            "name": "typeT2",
            "location": 18,
            "return": [],
            "arguments": {}
        }
    },
    "python-interfaces-master/tests/interfaces_test.py": {
        "test_010_empty_definition": {
            "name": "test_010_empty_definition",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_020_non_iterable_as_implements_value": {
            "name": "test_020_non_iterable_as_implements_value",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_030_no_implements_value": {
            "name": "test_030_no_implements_value",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_040_error_non_interface_as_implements_value": {
            "name": "test_040_error_non_interface_as_implements_value",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_050_method_is_implemented_no_annotations": {
            "name": "test_050_method_is_implemented_no_annotations",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_060_method_is_implemented_with_annotations": {
            "name": "test_060_method_is_implemented_with_annotations",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "typeT1": [
                    "Callable",
                    "Iterable[str]",
                    "dict"
                ],
                "typeT2": [
                    "Callable",
                    "Iterable[str]",
                    "dict"
                ]
            }
        },
        "test_070_error_method_is_not_implemented": {
            "name": "test_070_error_method_is_not_implemented",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_080_error_method_params_signature_is_not_implemented": {
            "name": "test_080_error_method_params_signature_is_not_implemented",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "typeT1": [
                    "bool",
                    "Iterable[str]",
                    "dict",
                    "List[int]"
                ],
                "typeT2": [
                    "bool",
                    "Iterable[str]",
                    "dict",
                    "List[int]"
                ]
            }
        },
        "test_090_error_method_return_signature_is_not_implemented": {
            "name": "test_090_error_method_return_signature_is_not_implemented",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "typeT1": [
                    "bool",
                    "Iterable[str]",
                    "dict"
                ],
                "typeT2": [
                    "bool",
                    "Iterable[str]",
                    "dict"
                ]
            }
        },
        "test_100_property_is_implemented_no_annotations": {
            "name": "test_100_property_is_implemented_no_annotations",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_110_error_property_is_implemented_as_method_no_annotations": {
            "name": "test_110_error_property_is_implemented_as_method_no_annotations",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_120_error_interface_instance": {
            "name": "test_120_error_interface_instance",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_130_interface_inheritance": {
            "name": "test_130_interface_inheritance",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "typeT1": [
                    "bool",
                    "Iterable[str]",
                    "dict"
                ],
                "typeT2": [
                    "bool",
                    "Iterable[str]",
                    "dict"
                ]
            }
        },
        "test_140_error_not_implemented_with_inheritance": {
            "name": "test_140_error_not_implemented_with_inheritance",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "typeT1": [
                    "bool",
                    "Iterable[str]"
                ],
                "typeT2": [
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "test_150_interface_multiple_inheritance": {
            "name": "test_150_interface_multiple_inheritance",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "typeT1": [
                    "bool",
                    "Iterable[str]",
                    "dict"
                ],
                "typeT2": [
                    "bool",
                    "Iterable[str]",
                    "dict"
                ]
            }
        },
        "test_160_error_not_implemented_with_multiple_inheritance": {
            "name": "test_160_error_not_implemented_with_multiple_inheritance",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "typeT1": [
                    "bool",
                    "Iterable[str]"
                ],
                "typeT2": [
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "test_170_error_method_overloading": {
            "name": "test_170_error_method_overloading",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_180_error_mixing_bases_interface_object": {
            "name": "test_180_error_mixing_bases_interface_object",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_050_method_is_implemented_no_annotations.TestInterface.method": {
            "name": "method",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "test_050_method_is_implemented_no_annotations.TestClass.method": {
            "name": "method",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "test_060_method_is_implemented_with_annotations.TestInterface.method": {
            "name": "method",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "test_060_method_is_implemented_with_annotations.TestClass.method": {
            "name": "method",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "test_070_error_method_is_not_implemented.TestInterface.method": {
            "name": "method",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "test_080_error_method_params_signature_is_not_implemented.TestInterface.method": {
            "name": "method",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "test_090_error_method_return_signature_is_not_implemented.TestInterface.method": {
            "name": "method",
            "location": 85,
            "return": [
                "typeT2"
            ],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "test_100_property_is_implemented_no_annotations.TestInterface.value": {
            "name": "value",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_100_property_is_implemented_no_annotations.TestClass.value": {
            "name": "value",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_110_error_property_is_implemented_as_method_no_annotations.TestInterface.value": {
            "name": "value",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_130_interface_inheritance.TestInterfaceA.method_a": {
            "name": "method_a",
            "location": 130,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_130_interface_inheritance.TestInterfaceB.method_b": {
            "name": "method_b",
            "location": 134,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_130_interface_inheritance.TestClass.method_a": {
            "name": "method_a",
            "location": 138,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_130_interface_inheritance.TestClass.method_b": {
            "name": "method_b",
            "location": 141,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_140_error_not_implemented_with_inheritance.TestInterfaceA.method_a": {
            "name": "method_a",
            "location": 147,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_140_error_not_implemented_with_inheritance.TestInterfaceB.method_b": {
            "name": "method_b",
            "location": 151,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_150_interface_multiple_inheritance.TestInterfaceA.method_a": {
            "name": "method_a",
            "location": 163,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_150_interface_multiple_inheritance.TestInterfaceB.method_b": {
            "name": "method_b",
            "location": 167,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_150_interface_multiple_inheritance.TestClass.method_a": {
            "name": "method_a",
            "location": 174,
            "return": [
                "typeT1"
            ],
            "arguments": {
                "arg": []
            }
        },
        "test_150_interface_multiple_inheritance.TestClass.method_b": {
            "name": "method_b",
            "location": 177,
            "return": [
                "typeT2"
            ],
            "arguments": {
                "arg": []
            }
        },
        "test_160_error_not_implemented_with_multiple_inheritance.TestInterfaceA.method_a": {
            "name": "method_a",
            "location": 183,
            "return": [
                "typeT1"
            ],
            "arguments": {
                "arg": []
            }
        },
        "test_160_error_not_implemented_with_multiple_inheritance.TestInterfaceB.method_b": {
            "name": "method_b",
            "location": 187,
            "return": [
                "typeT2"
            ],
            "arguments": {
                "arg": []
            }
        },
        "test_170_error_method_overloading.TestInterfaceA.method": {
            "name": "method",
            "location": 208,
            "return": [],
            "arguments": {}
        },
        "test_080_error_method_params_signature_is_not_implemented.TestClass.method": {
            "name": "method",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "test_090_error_method_return_signature_is_not_implemented.TestClass.method": {
            "name": "method",
            "location": 91,
            "return": [
                "typeT1"
            ],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "test_110_error_property_is_implemented_as_method_no_annotations.TestClass.value": {
            "name": "value",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_140_error_not_implemented_with_inheritance.TestClass.method_b": {
            "name": "method_b",
            "location": 157,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_160_error_not_implemented_with_multiple_inheritance.TestClassA.method_a": {
            "name": "method_a",
            "location": 196,
            "return": [
                "typeT1"
            ],
            "arguments": {
                "arg": []
            }
        },
        "test_160_error_not_implemented_with_multiple_inheritance.TestClassB.method_b": {
            "name": "method_b",
            "location": 202,
            "return": [
                "typeT2"
            ],
            "arguments": {
                "arg": []
            }
        },
        "test_170_error_method_overloading.TestInterfaceB.method": {
            "name": "method",
            "location": 214,
            "return": [],
            "arguments": {}
        }
    },
    "python-interfaces-master/tests/typing_test.py": {
        "test_typing_self_test": {
            "name": "test_typing_self_test",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "typed_code_wrapper": {
            "name": "typed_code_wrapper",
            "location": 22,
            "return": [
                "SampleImplementation"
            ],
            "arguments": {}
        },
        "SampleInterface.method": {
            "name": "method",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampleImplementation.method": {
            "name": "method",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-interfaces-master/tests/util_test.py": {
        "isimplementation": {
            "name": "isimplementation",
            "location": 7,
            "return": [
                "int",
                "list"
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        },
        "test_010_isimplementation_single_true_explicit_interface": {
            "name": "test_010_isimplementation_single_true_explicit_interface",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "typeT1": [
                    "bool",
                    "List[int]"
                ],
                "typeT2": [
                    "bool",
                    "List[int]"
                ],
                "isimplementation": [
                    "str"
                ]
            }
        },
        "test_020_isimplementation_single_true_explicit_object": {
            "name": "test_020_isimplementation_single_true_explicit_object",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "typeT1": [
                    "bool",
                    "List[int]"
                ],
                "typeT2": [
                    "bool",
                    "List[int]"
                ],
                "isimplementation": [
                    "str"
                ]
            }
        },
        "test_030_isimplementation_single_true": {
            "name": "test_030_isimplementation_single_true",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "typeT1": [
                    "bool",
                    "List[int]"
                ],
                "typeT2": [
                    "bool",
                    "List[int]"
                ],
                "isimplementation": [
                    "str"
                ]
            }
        },
        "test_040_isimplementation_single_false": {
            "name": "test_040_isimplementation_single_false",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "typeT1": [
                    "bool",
                    "List[int]",
                    "Iterable[str]"
                ],
                "typeT2": [
                    "bool",
                    "List[int]",
                    "Iterable[str]"
                ],
                "isimplementation": [
                    "str"
                ]
            }
        },
        "test_050_isimplementation_multi_true_one_explicit": {
            "name": "test_050_isimplementation_multi_true_one_explicit",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "typeT1": [
                    "bool",
                    "List[int]"
                ],
                "typeT2": [
                    "bool",
                    "List[int]"
                ],
                "isimplementation": [
                    "str"
                ]
            }
        },
        "test_060_isimplementation_multi_true_one": {
            "name": "test_060_isimplementation_multi_true_one",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "typeT1": [
                    "bool",
                    "List[int]"
                ],
                "typeT2": [
                    "bool",
                    "List[int]"
                ],
                "isimplementation": [
                    "str"
                ]
            }
        },
        "test_070_isimplementation_multi_true_all_explicit": {
            "name": "test_070_isimplementation_multi_true_all_explicit",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "typeT1": [
                    "bool",
                    "List[int]"
                ],
                "typeT2": [
                    "bool",
                    "List[int]"
                ],
                "isimplementation": [
                    "str",
                    "bool",
                    "Optional[Iterable]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_080_isimplementation_multi_true_all": {
            "name": "test_080_isimplementation_multi_true_all",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "typeT1": [
                    "bool",
                    "List[int]"
                ],
                "typeT2": [
                    "bool",
                    "List[int]"
                ],
                "isimplementation": [
                    "str",
                    "bool",
                    "Optional[Iterable]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_090_isimplementation_multi_false_one": {
            "name": "test_090_isimplementation_multi_false_one",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "typeT1": [
                    "bool",
                    "List[int]",
                    "Iterable[str]"
                ],
                "typeT2": [
                    "bool",
                    "List[int]",
                    "Iterable[str]"
                ]
            }
        },
        "test_100_isimplementation_multi_false_all": {
            "name": "test_100_isimplementation_multi_false_all",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "typeT1": [
                    "bool",
                    "List[int]",
                    "str"
                ],
                "typeT2": [
                    "bool",
                    "List[int]",
                    "str"
                ],
                "isimplementation": [
                    "str",
                    "bool",
                    "Optional[Iterable]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_010_isimplementation_single_true_explicit_interface.TestInterface.method": {
            "name": "method",
            "location": 15,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_010_isimplementation_single_true_explicit_interface.TestClass.method": {
            "name": "method",
            "location": 19,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_020_isimplementation_single_true_explicit_object.TestInterface.method": {
            "name": "method",
            "location": 29,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_020_isimplementation_single_true_explicit_object.TestClass.method": {
            "name": "method",
            "location": 33,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_030_isimplementation_single_true.TestInterface.method": {
            "name": "method",
            "location": 41,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_030_isimplementation_single_true.TestClass.method": {
            "name": "method",
            "location": 45,
            "return": [
                "typeT2"
            ],
            "arguments": {
                "arg": []
            }
        },
        "test_040_isimplementation_single_false.TestInterface.method": {
            "name": "method",
            "location": 53,
            "return": [
                "typeT2"
            ],
            "arguments": {
                "arg": []
            }
        },
        "test_050_isimplementation_multi_true_one_explicit.TestInterfaceA.method_a": {
            "name": "method_a",
            "location": 64,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_050_isimplementation_multi_true_one_explicit.TestInterfaceB.method_b": {
            "name": "method_b",
            "location": 68,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_050_isimplementation_multi_true_one_explicit.TestClass.method_a": {
            "name": "method_a",
            "location": 72,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_050_isimplementation_multi_true_one_explicit.TestClass.method_b": {
            "name": "method_b",
            "location": 75,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_060_isimplementation_multi_true_one.TestInterfaceA.method_a": {
            "name": "method_a",
            "location": 83,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_060_isimplementation_multi_true_one.TestInterfaceB.method_b": {
            "name": "method_b",
            "location": 87,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_060_isimplementation_multi_true_one.TestClass.method_a": {
            "name": "method_a",
            "location": 91,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_060_isimplementation_multi_true_one.TestClass.method_b": {
            "name": "method_b",
            "location": 94,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_070_isimplementation_multi_true_all_explicit.TestInterfaceA.method_a": {
            "name": "method_a",
            "location": 102,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_070_isimplementation_multi_true_all_explicit.TestInterfaceB.method_b": {
            "name": "method_b",
            "location": 106,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_070_isimplementation_multi_true_all_explicit.TestClass.method_a": {
            "name": "method_a",
            "location": 110,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_070_isimplementation_multi_true_all_explicit.TestClass.method_b": {
            "name": "method_b",
            "location": 113,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_080_isimplementation_multi_true_all.TestInterfaceA.method_a": {
            "name": "method_a",
            "location": 121,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_080_isimplementation_multi_true_all.TestInterfaceB.method_b": {
            "name": "method_b",
            "location": 125,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_080_isimplementation_multi_true_all.TestClass.method_a": {
            "name": "method_a",
            "location": 129,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_080_isimplementation_multi_true_all.TestClass.method_b": {
            "name": "method_b",
            "location": 132,
            "return": [
                "typeT2"
            ],
            "arguments": {
                "arg": []
            }
        },
        "test_090_isimplementation_multi_false_one.TestInterfaceA.method_a": {
            "name": "method_a",
            "location": 140,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_090_isimplementation_multi_false_one.TestInterfaceB.method_b": {
            "name": "method_b",
            "location": 144,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_090_isimplementation_multi_false_one.TestClass.method_a": {
            "name": "method_a",
            "location": 148,
            "return": [
                "typeT1"
            ],
            "arguments": {
                "arg": []
            }
        },
        "test_100_isimplementation_multi_false_all.TestInterfaceA.method_a": {
            "name": "method_a",
            "location": 157,
            "return": [
                "typeT1"
            ],
            "arguments": {
                "arg": []
            }
        },
        "test_100_isimplementation_multi_false_all.TestInterfaceB.method_b": {
            "name": "method_b",
            "location": 161,
            "return": [
                "typeT2"
            ],
            "arguments": {
                "arg": []
            }
        }
    }
}
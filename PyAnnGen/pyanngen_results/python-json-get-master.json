{
    "python-json-get-master/jsonget/__init__.py": {
        "assert_json_type": {
            "name": "assert_json_type",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "Optional[Union[(dict, float, list, str)]]"
                ],
                "expected_type": [
                    "Optional[Union[(JList, Type[Union[(dict, float, list, str)]])]]"
                ]
            }
        },
        "_parse_json_path": {
            "name": "_parse_json_path",
            "location": 62,
            "return": [
                "List[Union[(int, str)]]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "json_get": {
            "name": "json_get",
            "location": 127,
            "return": [
                "None",
                "Callable",
                "str",
                "List[str]",
                "list"
            ],
            "arguments": {
                "json": [
                    "Optional[Union[(dict, float, list, str)]]"
                ],
                "path": [
                    "str"
                ],
                "expected_type": [
                    "str"
                ]
            }
        },
        "json_get_default": {
            "name": "json_get_default",
            "location": 282,
            "return": [
                "None",
                "str",
                "List[str]"
            ],
            "arguments": {
                "json": [
                    "Optional[Union[(dict, float, list, str)]]"
                ],
                "path": [
                    "str"
                ],
                "default": [
                    "str",
                    "list[]",
                    "list",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "typing.Type",
                    "Type[list]",
                    "Type[dict]"
                ],
                "expected_type": [
                    "str"
                ]
            }
        },
        "JList.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value_type": [
                    "Optional[Union[(JList, Type[Optional[Union[(dict, float, list, str)]]])]]"
                ]
            }
        },
        "assert_json_type.type_name": {
            "name": "type_name",
            "location": 35,
            "return": [
                "typing.Text",
                "Type[Any]",
                "Union[str, None]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "t": [
                    "str",
                    "bool"
                ]
            }
        },
        "_parse_json_path.parse_element": {
            "name": "parse_element",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_parse_json_path.parse_indexes": {
            "name": "parse_indexes",
            "location": 74,
            "return": [
                "list[int]",
                "int",
                "List[int]",
                "List[List[int]]",
                "List[float]",
                "Tuple[int]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "FrozenSet[int]",
                    "Optional[str]",
                    "float"
                ]
            }
        }
    },
    "python-json-get-master/jsonget_test/__init__.py": {
        "AssertJsonTypeTest.test_str": {
            "name": "test_str",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssertJsonTypeTest.test_int": {
            "name": "test_int",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssertJsonTypeTest.test_float": {
            "name": "test_float",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssertJsonTypeTest.test_bool": {
            "name": "test_bool",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssertJsonTypeTest.test_list": {
            "name": "test_list",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssertJsonTypeTest.test_dict": {
            "name": "test_dict",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssertJsonTypeTest.test_null": {
            "name": "test_null",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssertJsonTypeTest.test_expected_null_exception_message": {
            "name": "test_expected_null_exception_message",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssertJsonTypeTest.test_did_not_expect_null_exception_message": {
            "name": "test_did_not_expect_null_exception_message",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssertJsonTypeTest.test_jlist__empty_list": {
            "name": "test_jlist__empty_list",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssertJsonTypeTest.test_jlist__all_match": {
            "name": "test_jlist__all_match",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssertJsonTypeTest.test_jlist__nested": {
            "name": "test_jlist__nested",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssertJsonTypeTest.test_jlist__not_a_list": {
            "name": "test_jlist__not_a_list",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssertJsonTypeTest.test_jlist__no_match": {
            "name": "test_jlist__no_match",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssertJsonTypeTest.test_jlist__any_does_not_match": {
            "name": "test_jlist__any_does_not_match",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonGetTest.test_empty_path_elements": {
            "name": "test_empty_path_elements",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonGetTest.test_empty_path": {
            "name": "test_empty_path",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonGetTest.test_slash_only": {
            "name": "test_slash_only",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonGetTest.test_ignore_leading_slash": {
            "name": "test_ignore_leading_slash",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonGetTest.test_sub_path": {
            "name": "test_sub_path",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonGetTest.test_sub_path_missing": {
            "name": "test_sub_path_missing",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonGetTest.test_string_is_not_a_sub_path": {
            "name": "test_string_is_not_a_sub_path",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonGetTest.test_int_is_not_a_sub_path": {
            "name": "test_int_is_not_a_sub_path",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonGetTest.test_correct_type": {
            "name": "test_correct_type",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonGetTest.test_wrong_type": {
            "name": "test_wrong_type",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonGetTest.test_wrong_bool": {
            "name": "test_wrong_bool",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonGetTest.test_root_array": {
            "name": "test_root_array",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonGetTest.test_array_in_object": {
            "name": "test_array_in_object",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonGetTest.test_nested_arrays": {
            "name": "test_nested_arrays",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonGetTest.test_mixed_objects_and_arrays": {
            "name": "test_mixed_objects_and_arrays",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonGetTest.test_int_not_an_array": {
            "name": "test_int_not_an_array",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonGetTest.test_string_not_an_array": {
            "name": "test_string_not_an_array",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonGetTest.test_object_not_an_array": {
            "name": "test_object_not_an_array",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonGetTest.test_array_out_of_bound": {
            "name": "test_array_out_of_bound",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonGetTest.test_error_path": {
            "name": "test_error_path",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonGetDefaultTest.test_path_exists": {
            "name": "test_path_exists",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonGetDefaultTest.test_path_does_not_exist": {
            "name": "test_path_does_not_exist",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonGetDefaultTest.test_index_does_not_exist": {
            "name": "test_index_does_not_exist",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonGetDefaultTest.test_type_does_not_match": {
            "name": "test_type_does_not_match",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
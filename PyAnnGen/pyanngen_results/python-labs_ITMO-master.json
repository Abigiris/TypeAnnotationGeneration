{
    "python-labs_ITMO-master/homework01/caesar.py": {
        "encrypt_caesar": {
            "name": "encrypt_caesar",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "plaintext": [
                    "str"
                ]
            }
        },
        "decrypt_caesar": {
            "name": "decrypt_caesar",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "ciphertext": [
                    "str"
                ]
            }
        }
    },
    "python-labs_ITMO-master/homework01/rsa.py": {
        "is_prime": {
            "name": "is_prime",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "gcd": {
            "name": "gcd",
            "location": 19,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "a": [
                    "int",
                    "T",
                    "Optional[int]"
                ],
                "b": [
                    "int",
                    "T",
                    "Optional[int]"
                ]
            }
        },
        "multiplicative_inverse": {
            "name": "multiplicative_inverse",
            "location": 34,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "e": [
                    "Optional[str]"
                ],
                "phi": [
                    "str",
                    "float"
                ]
            }
        },
        "generate_keypair": {
            "name": "generate_keypair",
            "location": 60,
            "return": [
                "Tuple[(Tuple[(int, Any)], Tuple[(Any, Any)])]"
            ],
            "arguments": {
                "p": [
                    "float",
                    "int",
                    "str",
                    "List[str]"
                ],
                "q": [
                    "float",
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 85,
            "return": [
                "list"
            ],
            "arguments": {
                "pk": [
                    "int",
                    "Dict[str,Any]",
                    "Set[str]",
                    "str",
                    "bool"
                ],
                "plaintext": [
                    "str",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "bool"
                ]
            }
        },
        "decrypt": {
            "name": "decrypt",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "pk": [
                    "int",
                    "Dict[str,Any]",
                    "Set[str]",
                    "str",
                    "bool"
                ],
                "ciphertext": [
                    "List[dict[str,Any]]",
                    "str",
                    "List[Dict[str,Any]]",
                    "bool"
                ]
            }
        }
    },
    "python-labs_ITMO-master/homework01/vigener.py": {
        "encrypt_vigenere": {
            "name": "encrypt_vigenere",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "plaintext": [],
                "keyword": []
            }
        },
        "decrypt_vigenere": {
            "name": "decrypt_vigenere",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "ciphertext": [],
                "keyword": []
            }
        }
    },
    "python-labs_ITMO-master/homework02/sudoku.py": {
        "group": {
            "name": "group",
            "location": 4,
            "return": [
                "list"
            ],
            "arguments": {
                "values": [],
                "n": []
            }
        },
        "read_sudoku": {
            "name": "read_sudoku",
            "location": 19,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "filename": []
            }
        },
        "display": {
            "name": "display",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "values": []
            }
        },
        "get_row": {
            "name": "get_row",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "values": [],
                "pos": []
            }
        },
        "get_col": {
            "name": "get_col",
            "location": 51,
            "return": [
                "list"
            ],
            "arguments": {
                "values": [],
                "pos": []
            }
        },
        "get_block": {
            "name": "get_block",
            "location": 64,
            "return": [
                "list"
            ],
            "arguments": {
                "values": [],
                "pos": []
            }
        },
        "find_empty_positions": {
            "name": "find_empty_positions",
            "location": 83,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "grid": []
            }
        },
        "find_possible_values": {
            "name": "find_possible_values",
            "location": 101,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "grid": [],
                "pos": []
            }
        },
        "solve": {
            "name": "solve",
            "location": 119,
            "return": [
                "list[]"
            ],
            "arguments": {
                "grid": []
            }
        },
        "check_solution": {
            "name": "check_solution",
            "location": 146,
            "return": [
                "bool"
            ],
            "arguments": {
                "solution": []
            }
        },
        "generate_sudoku": {
            "name": "generate_sudoku",
            "location": 164,
            "return": [
                "Any"
            ],
            "arguments": {
                "N": []
            }
        }
    },
    "python-labs_ITMO-master/homework03/life.py": {
        "GameOfLife.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "cell_size": [
                    "int"
                ],
                "speed": [
                    "int"
                ]
            }
        },
        "GameOfLife.draw_grid": {
            "name": "draw_grid",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameOfLife.run": {
            "name": "run",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameOfLife.cell_list": {
            "name": "cell_list",
            "location": 54,
            "return": [
                "List[List[int]]"
            ],
            "arguments": {
                "self": [],
                "randomize": [
                    "bool"
                ]
            }
        },
        "GameOfLife.draw_cell_list": {
            "name": "draw_cell_list",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "clist": []
            }
        },
        "GameOfLife.get_neighbours": {
            "name": "get_neighbours",
            "location": 85,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "cell": []
            }
        },
        "GameOfLife.update_cell_list": {
            "name": "update_cell_list",
            "location": 101,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cell_list": []
            }
        }
    },
    "python-labs_ITMO-master/homework03/life_with_classes.py": {
        "Cell.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [],
                "col": [],
                "state": [
                    "bool"
                ]
            }
        },
        "Cell.is_alive": {
            "name": "is_alive",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CellList.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nrows": [],
                "ncols": [],
                "randomize": [
                    "bool"
                ]
            }
        },
        "CellList.update": {
            "name": "update",
            "location": 32,
            "return": [
                "CellList"
            ],
            "arguments": {
                "self": [
                    "_TCellList@@CellList@@"
                ]
            }
        },
        "CellList.get_neighbours": {
            "name": "get_neighbours",
            "location": 48,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "cell": []
            }
        },
        "CellList.from_file": {
            "name": "from_file",
            "location": 58,
            "return": [
                "CellList"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCellList]"
                ],
                "filename": []
            }
        },
        "CellList.__iter__": {
            "name": "__iter__",
            "location": 69,
            "return": [
                "CellList"
            ],
            "arguments": {
                "self": [
                    "_TCellList@@CellList@@"
                ]
            }
        },
        "CellList.__next__": {
            "name": "__next__",
            "location": 73,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CellList.__str__": {
            "name": "__str__",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameOfLife.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "cell_size": [
                    "int"
                ],
                "speed": [
                    "int"
                ]
            }
        },
        "GameOfLife.draw_grid": {
            "name": "draw_grid",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameOfLife.run": {
            "name": "run",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameOfLife.draw_cell_list": {
            "name": "draw_cell_list",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "clist": []
            }
        }
    },
    "python-labs_ITMO-master/homework03/test_life.py": {
        "TestGameOfLife.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameOfLife.test_can_create_an_empty_grid": {
            "name": "test_can_create_an_empty_grid",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameOfLife.test_can_create_a_random_grid": {
            "name": "test_can_create_a_random_grid",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameOfLife.test_get_neighbours": {
            "name": "test_get_neighbours",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameOfLife.test_get_neighbours_for_upper_left_corner": {
            "name": "test_get_neighbours_for_upper_left_corner",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameOfLife.test_get_neighbours_for_upper_right_corner": {
            "name": "test_get_neighbours_for_upper_right_corner",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameOfLife.test_get_neighbours_for_lower_left_corner": {
            "name": "test_get_neighbours_for_lower_left_corner",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameOfLife.test_get_neighbours_for_lower_right_corner": {
            "name": "test_get_neighbours_for_lower_right_corner",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameOfLife.test_get_neighbours_for_upper_side": {
            "name": "test_get_neighbours_for_upper_side",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameOfLife.test_get_neighbours_for_bottom_side": {
            "name": "test_get_neighbours_for_bottom_side",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameOfLife.test_get_neighbours_for_left_side": {
            "name": "test_get_neighbours_for_left_side",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameOfLife.test_get_neighbours_for_right_side": {
            "name": "test_get_neighbours_for_right_side",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameOfLife.test_can_update": {
            "name": "test_can_update",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-labs_ITMO-master/homework03/test_life_with_classes.py": {
        "TestCell.test_can_create_a_cell": {
            "name": "test_can_create_a_cell",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCellList.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCellList.test_clist_is_iterable": {
            "name": "test_clist_is_iterable",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCellList.test_can_iterate_over_clist": {
            "name": "test_can_iterate_over_clist",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCellList.test_can_create_an_empty_grid": {
            "name": "test_can_create_an_empty_grid",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCellList.test_can_create_a_random_grid": {
            "name": "test_can_create_a_random_grid",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCellList.test_can_create_a_grid_from_file": {
            "name": "test_can_create_a_grid_from_file",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCellList.test_get_neighbours": {
            "name": "test_get_neighbours",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCellList.test_get_neighbours_for_upper_left_corner": {
            "name": "test_get_neighbours_for_upper_left_corner",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCellList.test_get_neighbours_for_upper_right_corner": {
            "name": "test_get_neighbours_for_upper_right_corner",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCellList.test_get_neighbours_for_lower_left_corner": {
            "name": "test_get_neighbours_for_lower_left_corner",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCellList.test_get_neighbours_for_lower_right_corner": {
            "name": "test_get_neighbours_for_lower_right_corner",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCellList.test_get_neighbours_for_upper_side": {
            "name": "test_get_neighbours_for_upper_side",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCellList.test_get_neighbours_for_bottom_side": {
            "name": "test_get_neighbours_for_bottom_side",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCellList.test_get_neighbours_for_left_side": {
            "name": "test_get_neighbours_for_left_side",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCellList.test_get_neighbours_for_right_side": {
            "name": "test_get_neighbours_for_right_side",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCellList.test_can_update": {
            "name": "test_can_update",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-labs_ITMO-master/homework04/access_token.py": {
        "get_access_token": {
            "name": "get_access_token",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "client_id": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "scope": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "python-labs_ITMO-master/homework04/age.py": {
        "age_predict": {
            "name": "age_predict",
            "location": 9,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "user_id": []
            }
        }
    },
    "python-labs_ITMO-master/homework04/api.py": {
        "get": {
            "name": "get",
            "location": 7,
            "return": [
                "Optional[requests.models.Response]"
            ],
            "arguments": {
                "url": [],
                "params": [
                    "dict[, ]"
                ],
                "timeout": [
                    "int"
                ],
                "max_retries": [
                    "int"
                ],
                "backoff_factor": [
                    "float"
                ]
            }
        },
        "get_friends": {
            "name": "get_friends",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "user_id": [],
                "fields": []
            }
        },
        "messages_get_history": {
            "name": "messages_get_history",
            "location": 50,
            "return": [
                "List[api_models.Message]"
            ],
            "arguments": {
                "user_id": [],
                "offset": [
                    "int"
                ],
                "count": [
                    "int"
                ]
            }
        }
    },
    "python-labs_ITMO-master/homework04/api_models.py": {},
    "python-labs_ITMO-master/homework04/messages.py": {
        "fromtimestamp": {
            "name": "fromtimestamp",
            "location": 22,
            "return": [
                "datetime.date"
            ],
            "arguments": {
                "ts": []
            }
        },
        "count_dates_from_messages": {
            "name": "count_dates_from_messages",
            "location": 26,
            "return": [
                "Tuple[(list, List[int])]"
            ],
            "arguments": {
                "messages": []
            }
        },
        "plotly_messages_freq": {
            "name": "plotly_messages_freq",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "dates": [],
                "freq": []
            }
        }
    },
    "python-labs_ITMO-master/homework04/network.py": {
        "get_network": {
            "name": "get_network",
            "location": 6,
            "return": [
                "List[Tuple[(int, int)]]"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "as_edgelist": [
                    "bool",
                    "int",
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "plot_graph": {
            "name": "plot_graph",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "python-labs_ITMO-master/homework04/tests/test_age.py": {
        "TestAgePredict.test_friends_with_bdate_field": {
            "name": "test_friends_with_bdate_field",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAgePredict.test_friends_without_bdate_field": {
            "name": "test_friends_without_bdate_field",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAgePredict.test_friends_with_incomplete_bdate_field": {
            "name": "test_friends_with_incomplete_bdate_field",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAgePredict.test_empty_response": {
            "name": "test_empty_response",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-labs_ITMO-master/homework04/tests/test_api.py": {
        "TestGetRequest.test_max_retries": {
            "name": "test_max_retries",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetRequest.test_backoff_factor": {
            "name": "test_backoff_factor",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetRequest.test_raises_on_timeout_error": {
            "name": "test_raises_on_timeout_error",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetRequest.test_raises_on_http_error": {
            "name": "test_raises_on_http_error",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetRequest.test_raises_on_server_internal_error": {
            "name": "test_raises_on_server_internal_error",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-labs_ITMO-master/homework05/bot.py": {
        "get_page": {
            "name": "get_page",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "group": [],
                "week": [
                    "typing.Text"
                ]
            }
        },
        "parse_schedule_for_a_day": {
            "name": "parse_schedule_for_a_day",
            "location": 27,
            "return": [
                "Tuple[(list, list, list, List[str])]"
            ],
            "arguments": {
                "web_page": [],
                "day_num": []
            }
        },
        "get_schedule": {
            "name": "get_schedule",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        },
        "week_day": {
            "name": "week_day",
            "location": 85,
            "return": [
                "Tuple[(int, str)]"
            ],
            "arguments": {
                "num_week": [],
                "num_day": []
            }
        },
        "get_near_lesson": {
            "name": "get_near_lesson",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        },
        "get_tommorow": {
            "name": "get_tommorow",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        },
        "get_all_schedule": {
            "name": "get_all_schedule",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        }
    },
    "python-labs_ITMO-master/homework05/echo_bot.py": {
        "echo": {
            "name": "echo",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "python-labs_ITMO-master/homework06/bayes.py": {
        "NaiveBayesClassifier.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alpha": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "NaiveBayesClassifier.fit": {
            "name": "fit",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "List"
                ],
                "y": [
                    "Optional[int]"
                ]
            }
        },
        "NaiveBayesClassifier.count_words_with_labeles": {
            "name": "count_words_with_labeles",
            "location": 46,
            "return": [
                "int",
                "str",
                "List[int]",
                "Optional[str]",
                "List[str]",
                "Tuple[int,int]",
                "List[Tuple[int,int]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "cur_label": [
                    "Dict",
                    "str",
                    "Dict[str,Any]",
                    "List[str]"
                ]
            }
        },
        "NaiveBayesClassifier.smoothing_likelihood": {
            "name": "smoothing_likelihood",
            "location": 57,
            "return": [
                "int",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "Dict",
                    "int",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,dict[str,str]]",
                    "Dict[str,Any]",
                    "Hashable",
                    "Optional[Hashable]",
                    "None"
                ],
                "cur_label": [
                    "Dict[str,float]",
                    "str",
                    "Optional[dict]",
                    "Dict",
                    "None"
                ]
            }
        },
        "NaiveBayesClassifier.predict": {
            "name": "predict",
            "location": 68,
            "return": [
                "str",
                "List[str]",
                "Set",
                "List",
                "Dict[str,str]",
                "Set[str]",
                "List[list[Any]]",
                "Dict[str,Union[None,Any,bool,str]]",
                "Dict",
                "Dict[str,int]"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "str",
                    "bytes",
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "List",
                    "T"
                ]
            }
        },
        "NaiveBayesClassifier.score": {
            "name": "score",
            "location": 96,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "X_test": [
                    "int",
                    "str",
                    "bool"
                ],
                "y_test": [
                    "str",
                    "bool",
                    "List[Optional['Cell']]",
                    "List[str]",
                    "Mapping[str, Any]",
                    "list"
                ]
            }
        }
    },
    "python-labs_ITMO-master/homework06/db.py": {},
    "python-labs_ITMO-master/homework06/hackernews.py": {
        "news_list": {
            "name": "news_list",
            "location": 12,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {}
        },
        "add_label": {
            "name": "add_label",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "update_news": {
            "name": "update_news",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "clean": {
            "name": "clean",
            "location": 48,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "classify_news": {
            "name": "classify_news",
            "location": 54,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "python-labs_ITMO-master/homework06/scraputils.py": {
        "extract_news": {
            "name": "extract_news",
            "location": 6,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "parser": []
            }
        },
        "extract_next_page": {
            "name": "extract_next_page",
            "location": 45,
            "return": [
                "Text",
                "str",
                "bool",
                "Iterable[str]",
                "Tuple",
                "requests.Response"
            ],
            "arguments": {
                "parser": []
            }
        },
        "get_news": {
            "name": "get_news",
            "location": 58,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "url": [
                    "Text",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "n_pages": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "List"
                ]
            }
        }
    },
    "python-labs_ITMO-master/homework08/async_server.py": {
        "url_normalize": {
            "name": "url_normalize",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "path": []
            }
        },
        "run": {
            "name": "run",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FileProducer.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "bool",
                    "str",
                    "Union[bool,str]"
                ],
                "chunk_size": [
                    "int",
                    "Tuple[int,int]",
                    "bool",
                    "Tuple[int,int,int]",
                    "bytes"
                ]
            }
        },
        "FileProducer.more": {
            "name": "more",
            "location": 34,
            "return": [
                "str",
                "List",
                "Text",
                "Optional[float]",
                "int",
                "List[Dict[str,Any]]",
                "Dict[str,str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncServer.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "Text",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "port": [
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "handler_class": [
                    "bool",
                    "None",
                    "Callable[,int]",
                    "str",
                    "Set[str]",
                    "int"
                ]
            }
        },
        "AsyncServer.handle_accepted": {
            "name": "handle_accepted",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sock": [
                    "str",
                    "float",
                    "int",
                    "bytes"
                ],
                "address": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "AsyncServer.serve_forever": {
            "name": "serve_forever",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncHTTPRequestHandler.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sock": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[A,bool]"
                ]
            }
        },
        "AsyncHTTPRequestHandler.collect_incoming_data": {
            "name": "collect_incoming_data",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "int",
                    "Dict[str, Any]",
                    "List[str]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "AsyncHTTPRequestHandler.found_terminator": {
            "name": "found_terminator",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncHTTPRequestHandler.parse_request": {
            "name": "parse_request",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncHTTPRequestHandler.parse_headers": {
            "name": "parse_headers",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "Exception"
                ]
            }
        },
        "AsyncHTTPRequestHandler.handle_request": {
            "name": "handle_request",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncHTTPRequestHandler.init_response": {
            "name": "init_response",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "Dict"
                ],
                "message": [
                    "str",
                    "Dict",
                    "None"
                ]
            }
        },
        "AsyncHTTPRequestHandler.add_header": {
            "name": "add_header",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keyword": [
                    "str",
                    "int",
                    "Mapping",
                    "float",
                    "Optional[int]",
                    "None",
                    "Union[str]",
                    "T"
                ],
                "value": [
                    "str",
                    "int",
                    "Mapping",
                    "float",
                    "Optional[int]",
                    "None",
                    "Union[str]",
                    "T"
                ]
            }
        },
        "AsyncHTTPRequestHandler.end_headers": {
            "name": "end_headers",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncHTTPRequestHandler.send_error": {
            "name": "send_error",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ],
                "message": [
                    "str",
                    "None",
                    "Dict",
                    "Optional[str]"
                ]
            }
        },
        "AsyncHTTPRequestHandler.send_head": {
            "name": "send_head",
            "location": 147,
            "return": [
                "Optional[str]",
                "None",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncHTTPRequestHandler.do_GET": {
            "name": "do_GET",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncHTTPRequestHandler.do_HEAD": {
            "name": "do_HEAD",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncHTTPRequestHandler.do_POST": {
            "name": "do_POST",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-labs_ITMO-master/homework08/test_async_wsgi_py.py": {
        "TestAsyncHTTPServer.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsyncHTTPServer.test_empty_request": {
            "name": "test_empty_request",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsyncHTTPServer.test_server_header": {
            "name": "test_server_header",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsyncHTTPServer.test_directory_index": {
            "name": "test_directory_index",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsyncHTTPServer.test_index_not_found": {
            "name": "test_index_not_found",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsyncHTTPServer.test_file_not_found": {
            "name": "test_file_not_found",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsyncHTTPServer.test_file_in_nested_folders": {
            "name": "test_file_in_nested_folders",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsyncHTTPServer.test_file_with_query_string": {
            "name": "test_file_with_query_string",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsyncHTTPServer.test_file_with_spaces": {
            "name": "test_file_with_spaces",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsyncHTTPServer.test_file_urlencoded": {
            "name": "test_file_urlencoded",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsyncHTTPServer.test_document_root_escaping": {
            "name": "test_document_root_escaping",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsyncHTTPServer.test_file_with_dot_in_name": {
            "name": "test_file_with_dot_in_name",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsyncHTTPServer.test_post_method": {
            "name": "test_post_method",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsyncHTTPServer.test_head_method": {
            "name": "test_head_method",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsyncHTTPServer.test_filetype_html": {
            "name": "test_filetype_html",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsyncHTTPServer.test_filetype_css": {
            "name": "test_filetype_css",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsyncHTTPServer.test_filetype_js": {
            "name": "test_filetype_js",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsyncHTTPServer.test_filetype_jpg": {
            "name": "test_filetype_jpg",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsyncHTTPServer.test_filetype_jpeg": {
            "name": "test_filetype_jpeg",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsyncHTTPServer.test_filetype_png": {
            "name": "test_filetype_png",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsyncHTTPServer.test_filetype_gif": {
            "name": "test_filetype_gif",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewResult.getDescription": {
            "name": "getDescription",
            "location": 204,
            "return": [
                "Text",
                "List[Tuple[str,str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "str"
                ]
            }
        }
    },
    "python-labs_ITMO-master/lab9/map_reduse.py": {
        "mapper": {
            "name": "mapper",
            "location": 3,
            "return": [
                "List[Tuple[(str, int)]]"
            ],
            "arguments": {
                "doc": []
            }
        },
        "reducer": {
            "name": "reducer",
            "location": 14,
            "return": [
                "dict"
            ],
            "arguments": {
                "words": []
            }
        }
    },
    "python-labs_ITMO-master/mp/mp.py": {
        "ProcessPool.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "min_workers": [
                    "int",
                    "bool",
                    "float"
                ],
                "max_workers": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "mem_usage": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ProcessPool.memory_test": {
            "name": "memory_test",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable[...,str]",
                    "Dict",
                    "List[str]",
                    "str",
                    "bool",
                    "Callable"
                ],
                "data": [
                    "Callable[...,str]",
                    "Dict",
                    "List[str]",
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "ProcessPool.max_ram": {
            "name": "max_ram",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "List[int]"
                ],
                "return_dict": [
                    "float",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "ProcessPool.map": {
            "name": "map",
            "location": 36,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Dict",
                    "Dict[str,Any]",
                    "str",
                    "Exception"
                ],
                "bid_data": [
                    "dict",
                    "bytes",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "python-labs_ITMO-master/mp/task.py": {
        "sorter": {
            "name": "sorter",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "generate_data": {
            "name": "generate_data",
            "location": 9,
            "return": [
                "queue.Queue[nothing]"
            ],
            "arguments": {
                "len_q": [
                    "int",
                    "bool",
                    "List[str]",
                    "Callable[[str],bool]"
                ],
                "len_list": [
                    "int",
                    "float",
                    "Union[None,int]"
                ]
            }
        }
    }
}
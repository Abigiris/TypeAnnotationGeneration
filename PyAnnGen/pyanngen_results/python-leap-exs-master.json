{
    "python-leap-exs-master/src/setup.py": {},
    "python-leap-exs-master/src/allocation/commands.py": {},
    "python-leap-exs-master/src/allocation/config.py": {
        "get_postgres_uri": {
            "name": "get_postgres_uri",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_api_url": {
            "name": "get_api_url",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_redis_host_and_port": {
            "name": "get_redis_host_and_port",
            "location": 17,
            "return": [
                "dict"
            ],
            "arguments": {}
        }
    },
    "python-leap-exs-master/src/allocation/email.py": {
        "send": {
            "name": "send",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-leap-exs-master/src/allocation/events.py": {},
    "python-leap-exs-master/src/allocation/exceptions.py": {},
    "python-leap-exs-master/src/allocation/flask_app.py": {
        "add_batch": {
            "name": "add_batch",
            "location": 19,
            "return": [
                "Tuple[Union[Text,int]]",
                "int",
                "Optional[str]",
                "datetime.datetime"
            ],
            "arguments": {}
        },
        "allocate_endpoint": {
            "name": "allocate_endpoint",
            "location": 31,
            "return": [
                "str",
                "Tuple[int]",
                "bytes",
                "Tuple[Union[Text,int]]"
            ],
            "arguments": {}
        },
        "allocations_view_endpoint": {
            "name": "allocations_view_endpoint",
            "location": 44,
            "return": [
                "Tuple[Union[Text,int]]",
                "str",
                "Tuple[int]",
                "int",
                "Iterable[T]",
                "float"
            ],
            "arguments": {
                "orderid": [
                    "str",
                    "Callable",
                    "Union[Callable,Coroutine]",
                    "collections.abc.Coroutine",
                    "guillotina.db.orm.interfaces.IBaseObject"
                ]
            }
        }
    },
    "python-leap-exs-master/src/allocation/handlers.py": {
        "add_batch": {
            "name": "add_batch",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "raiden_libs.events.Event",
                    "allocation.unit_of_work.AbstractUnitOfWork"
                ],
                "uow": [
                    "allocation.unit_of_work.AbstractUnitOfWork",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "allocate": {
            "name": "allocate",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "Dict",
                    "app.model.team.Team"
                ],
                "uow": [
                    "allocation.unit_of_work.AbstractUnitOfWork",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "change_batch_quantity": {
            "name": "change_batch_quantity",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "allocation.unit_of_work.AbstractUnitOfWork",
                    "raiden_libs.events.Event",
                    "relay.events.Event"
                ],
                "uow": [
                    "allocation.unit_of_work.AbstractUnitOfWork",
                    "raiden_libs.events.Event",
                    "relay.events.Event"
                ]
            }
        },
        "send_out_of_stock_notification": {
            "name": "send_out_of_stock_notification",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "Callable",
                    "str",
                    "aioquic.quic.events.QuicEvent"
                ],
                "send_mail": [
                    "Callable",
                    "str",
                    "aioquic.quic.events.QuicEvent"
                ]
            }
        },
        "publish_allocated_event": {
            "name": "publish_allocated_event",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "Callable",
                    "Dict[str,Any]",
                    "keras.models.Sequential"
                ],
                "publish": [
                    "Callable",
                    "Dict[str,Any]",
                    "keras.models.Sequential"
                ]
            }
        },
        "add_allocation_to_read_model": {
            "name": "add_allocation_to_read_model",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "Dict[str,Any]"
                ],
                "uow": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "remove_allocation_from_read_model": {
            "name": "remove_allocation_from_read_model",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "Dict[str,Any]"
                ],
                "uow": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "python-leap-exs-master/src/allocation/messagebus.py": {
        "MessageBus.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uow": [
                    "str",
                    "bool",
                    "Dict"
                ],
                "send_mail": [
                    "str",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "publish": [
                    "str",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "MessageBus.handle": {
            "name": "handle",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_queue": [
                    "asyncio.events.AbstractEventLoop",
                    "Mapping[str, Any]"
                ]
            }
        },
        "MessageBus.handle_event": {
            "name": "handle_event",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "watchdog.events.FileSystemEvent",
                    "raiden_libs.events.Event",
                    "apscheduler.events.JobExecutionEvent"
                ]
            }
        },
        "MessageBus.handle_command": {
            "name": "handle_command",
            "location": 47,
            "return": [
                "str",
                "Tuple[str]",
                "Iterable[str]",
                "commands.CommandMessage",
                "Callable[[None], None]",
                "int"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "int",
                    "BaseException",
                    "Dict[str,Any]"
                ]
            }
        },
        "MessageBus.call_handler_with_dependencies": {
            "name": "call_handler_with_dependencies",
            "location": 56,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "int",
                    "bytes"
                ],
                "message": [
                    "str",
                    "bool",
                    "Callable",
                    "int"
                ]
            }
        }
    },
    "python-leap-exs-master/src/allocation/model.py": {
        "Product.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sku": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "batches": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "version_number": [
                    "int",
                    "Dict",
                    "Any",
                    "Dict[str,List[str]]",
                    "Mapping[str,str]",
                    "str",
                    "Union[bool,str]"
                ]
            }
        },
        "Product.allocate": {
            "name": "allocate",
            "location": 16,
            "return": [
                "None",
                "str",
                "Optional[Iterable[Any]]",
                "List[str]",
                "Optional[BaseException]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "Counter[str]",
                    "str",
                    "Counter",
                    "List",
                    "List[str]",
                    "Dict[str,List[str]]",
                    "Dict[str,list[str]]"
                ]
            }
        },
        "Product.change_batch_quantity": {
            "name": "change_batch_quantity",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str"
                ],
                "qty": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Batch.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "Callable",
                    "str",
                    "Type",
                    "Sequence"
                ],
                "sku": [
                    "Callable",
                    "str",
                    "Type",
                    "Sequence"
                ],
                "qty": [
                    "Callable",
                    "str",
                    "Type",
                    "Sequence"
                ],
                "eta": [
                    "Callable",
                    "str",
                    "Type",
                    "Sequence"
                ]
            }
        },
        "Batch.__repr__": {
            "name": "__repr__",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Batch.__eq__": {
            "name": "__eq__",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Batch.__hash__": {
            "name": "__hash__",
            "location": 65,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Batch.__gt__": {
            "name": "__gt__",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "Optional[bool]",
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "float",
                    "int"
                ]
            }
        },
        "Batch.allocate": {
            "name": "allocate",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "Set[int]",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "Tuple[Literal,Literal]"
                ]
            }
        },
        "Batch.deallocate_one": {
            "name": "deallocate_one",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Batch.allocated_quantity": {
            "name": "allocated_quantity",
            "location": 83,
            "return": [
                "bool",
                "List[str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Batch.available_quantity": {
            "name": "available_quantity",
            "location": 87,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Batch.can_allocate": {
            "name": "can_allocate",
            "location": 90,
            "return": [
                "bool",
                "str",
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "python-leap-exs-master/src/allocation/orm.py": {
        "start_mappers": {
            "name": "start_mappers",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "receive_load": {
            "name": "receive_load",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "product": [
                    "int",
                    "rflx.model.Message",
                    "rflx.model.Field"
                ],
                "_": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "python-leap-exs-master/src/allocation/redis_pubsub.py": {
        "get_bus": {
            "name": "get_bus",
            "location": 11,
            "return": [
                "Sequence[str]",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "handle_change_batch_quantity": {
            "name": "handle_change_batch_quantity",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "m": [
                    "str",
                    "bytes"
                ],
                "bus": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "publish": {
            "name": "publish",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "channel": [
                    "str",
                    "Callable",
                    "pyramid.config.Configurator"
                ],
                "event": [
                    "str",
                    "Callable",
                    "pyramid.config.Configurator"
                ]
            }
        }
    },
    "python-leap-exs-master/src/allocation/repository.py": {
        "AbstractRepository.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractRepository.add": {
            "name": "add",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "product": [
                    "Callable",
                    "Type"
                ]
            }
        },
        "AbstractRepository.get": {
            "name": "get",
            "location": 15,
            "return": [
                "str",
                "bool",
                "ValuesView",
                "List[int]",
                "List",
                "Set",
                "Set[int]",
                "DefaultDict",
                "List[list[Any]]"
            ],
            "arguments": {
                "self": [],
                "sku": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "AbstractRepository.get_by_batchid": {
            "name": "get_by_batchid",
            "location": 21,
            "return": [
                "str",
                "int",
                "bool",
                "List[tuple[Union[int,int,int,int,int,int]]]"
            ],
            "arguments": {
                "self": [],
                "batchid": [
                    "str",
                    "float"
                ]
            }
        },
        "AbstractRepository._add": {
            "name": "_add",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "product": [
                    "Dict",
                    "bool",
                    "allocation.domain.model.Product",
                    "str",
                    "int"
                ]
            }
        },
        "AbstractRepository._get": {
            "name": "_get",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sku": [
                    "bool",
                    "str",
                    "Dict",
                    "T"
                ]
            }
        },
        "AbstractRepository._get_by_batchid": {
            "name": "_get_by_batchid",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batchid": [
                    "bool",
                    "str",
                    "Dict",
                    "T"
                ]
            }
        },
        "SqlAlchemyRepository.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "bool",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "SqlAlchemyRepository._add": {
            "name": "_add",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "product": [
                    "collections.abc.AsyncIterable",
                    "allocation.domain.model.Product",
                    "bool",
                    "Iterable[Any]",
                    "Union[AsyncIterable[Any],Iterable[Any]]",
                    "Tuple[float,float]"
                ]
            }
        },
        "SqlAlchemyRepository._get": {
            "name": "_get",
            "location": 51,
            "return": [
                "int",
                "Dict[str, Any]",
                "Callable",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "sku": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "SqlAlchemyRepository._get_by_batchid": {
            "name": "_get_by_batchid",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "batchid": [
                    "str",
                    "Exception",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "python-leap-exs-master/src/allocation/unit_of_work.py": {
        "AbstractUnitOfWork.__enter__": {
            "name": "__enter__",
            "location": 14,
            "return": [
                "AbstractUnitOfWork"
            ],
            "arguments": {
                "self": [
                    "_TAbstractUnitOfWork@@AbstractUnitOfWork@@"
                ]
            }
        },
        "AbstractUnitOfWork.__exit__": {
            "name": "__exit__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractUnitOfWork.commit": {
            "name": "commit",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractUnitOfWork._commit": {
            "name": "_commit",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractUnitOfWork.rollback": {
            "name": "rollback",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractUnitOfWork.collect_events": {
            "name": "collect_events",
            "location": 32,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractUnitOfWork.init_repositories": {
            "name": "init_repositories",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "products": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "AbstractUnitOfWork.products": {
            "name": "products",
            "location": 41,
            "return": [
                "bytes",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlAlchemyUnitOfWork.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_factory": [
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "bool",
                    "nox.sessions.Session",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "SqlAlchemyUnitOfWork._commit": {
            "name": "_commit",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlAlchemyUnitOfWork.rollback": {
            "name": "rollback",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-leap-exs-master/src/allocation/views.py": {
        "allocations": {
            "name": "allocations",
            "location": 3,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "orderid": [
                    "Dict",
                    "List[Dict]",
                    "Callable",
                    "List[dict]",
                    "Dict[str,Any]",
                    "Optional[Tuple[str,...]]",
                    "Tuple[Union[str,...]]",
                    "None"
                ],
                "uow": [
                    "Dict",
                    "List[Dict]",
                    "Callable",
                    "List[dict]",
                    "Dict[str,Any]",
                    "Optional[Tuple[str,...]]",
                    "Tuple[Union[str,...]]",
                    "None"
                ]
            }
        }
    },
    "python-leap-exs-master/tests/conftest.py": {
        "in_memory_sqlite_db": {
            "name": "in_memory_sqlite_db",
            "location": 21,
            "return": [
                "str",
                "int",
                "List[dict[str,Any]]",
                "Dict[str,dict[str,int]]",
                "float"
            ],
            "arguments": {}
        },
        "sqlite_session_factory": {
            "name": "sqlite_session_factory",
            "location": 27,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "in_memory_sqlite_db": [
                    "Dict[str,str]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "wait_for_postgres_to_come_up": {
            "name": "wait_for_postgres_to_come_up",
            "location": 33,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "engine": [
                    "str",
                    "Callable"
                ]
            }
        },
        "wait_for_webapp_to_come_up": {
            "name": "wait_for_webapp_to_come_up",
            "location": 43,
            "return": [
                "str",
                "int",
                "Dict[str, str]",
                "Exception",
                "dict"
            ],
            "arguments": {}
        },
        "wait_for_redis_to_come_up": {
            "name": "wait_for_redis_to_come_up",
            "location": 54,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]"
            ],
            "arguments": {}
        },
        "postgres_db": {
            "name": "postgres_db",
            "location": 66,
            "return": [
                "bool",
                "str",
                "List[str]",
                "Tuple[int, int, int]"
            ],
            "arguments": {}
        },
        "postgres_session_factory": {
            "name": "postgres_session_factory",
            "location": 73,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "postgres_db": [
                    "Set[str]",
                    "int",
                    "abilian.core.sqlalchemy.SQLAlchemy",
                    "sqlalchemy.engine.base.Engine",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "postgres_session": {
            "name": "postgres_session",
            "location": 79,
            "return": [
                "dict",
                "Exception",
                "str",
                "Dict[str, Any]",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "postgres_session_factory": [
                    "str",
                    "bool",
                    "None",
                    "Optional[SparkSession]",
                    "Optional[int]"
                ]
            }
        },
        "restart_api": {
            "name": "restart_api",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "restart_redis_pubsub": {
            "name": "restart_redis_pubsub",
            "location": 90,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        }
    },
    "python-leap-exs-master/tests/e2e/test_api.py": {
        "random_ref": {
            "name": "random_ref",
            "location": 7,
            "return": [
                "Iterable[T]",
                "str",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "prefix": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "post_to_add_batch": {
            "name": "post_to_add_batch",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "ref": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "None",
                    "Optional[Dict]",
                    "Dict"
                ],
                "sku": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "None",
                    "Optional[Dict]",
                    "Dict"
                ],
                "qty": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "None",
                    "Optional[Dict]",
                    "Dict"
                ],
                "eta": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "None",
                    "Optional[Dict]",
                    "Dict"
                ]
            }
        },
        "get_allocation": {
            "name": "get_allocation",
            "location": 18,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "orderid": [
                    "str"
                ]
            }
        },
        "test_happy_path_returns_202_and_batch_is_allocated": {
            "name": "test_happy_path_returns_202_and_batch_is_allocated",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unhappy_path_returns_400_and_error_message": {
            "name": "test_unhappy_path_returns_400_and_error_message",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-leap-exs-master/tests/e2e/test_external_events.py": {
        "random_ref": {
            "name": "random_ref",
            "location": 10,
            "return": [
                "Iterable[T]",
                "str",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "prefix": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "post_to_add_batch": {
            "name": "post_to_add_batch",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "ref": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "None",
                    "Optional[Dict]",
                    "Dict"
                ],
                "sku": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "None",
                    "Optional[Dict]",
                    "Dict"
                ],
                "qty": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "None",
                    "Optional[Dict]",
                    "Dict"
                ],
                "eta": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "None",
                    "Optional[Dict]",
                    "Dict"
                ]
            }
        },
        "post_to_allocate": {
            "name": "post_to_allocate",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "orderid": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "sku": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "qty": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "expected_batch": [
                    "bool",
                    "str"
                ]
            }
        },
        "wait_for": {
            "name": "wait_for",
            "location": 29,
            "return": [
                "float",
                "List[str]",
                "Set[str]",
                "str",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "wait_for_assertion": {
            "name": "wait_for_assertion",
            "location": 38,
            "return": [
                "None",
                "int",
                "List[int]"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "bool",
                    "List[str]",
                    "int",
                    "Tuple[Union[int,int]]",
                    "None",
                    "Union[int,Tuple[int,int]]",
                    "Optional[int]"
                ]
            }
        },
        "subscribe_to_allocated_events": {
            "name": "subscribe_to_allocated_events",
            "location": 50,
            "return": [
                "float",
                "bytes",
                "Sequence[float]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "r": [
                    "int",
                    "tuple",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "test_change_batch_quantity_leading_to_reallocation": {
            "name": "test_change_batch_quantity_leading_to_reallocation",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_change_batch_quantity_leading_to_reallocation.check_messages": {
            "name": "check_messages",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-leap-exs-master/tests/integration/test_repository.py": {
        "test_get_by_batchid": {
            "name": "test_get_by_batchid",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "sqlite_session_factory": [
                    "str",
                    "None",
                    "Union[None,str]",
                    "Optional[str]"
                ]
            }
        }
    },
    "python-leap-exs-master/tests/integration/test_uow.py": {
        "random_ref": {
            "name": "random_ref",
            "location": 11,
            "return": [
                "Iterable[T]",
                "str",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "prefix": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "insert_batch": {
            "name": "insert_batch",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "int",
                    "str",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]"
                ],
                "ref": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "int",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Literal"
                ],
                "sku": [
                    "int",
                    "str",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]"
                ],
                "qty": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "int",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Literal"
                ],
                "eta": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "int",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Literal"
                ],
                "product_version": [
                    "int",
                    "Dict",
                    "str"
                ]
            }
        },
        "get_allocated_batch_id": {
            "name": "get_allocated_batch_id",
            "location": 25,
            "return": [
                "str",
                "int",
                "bool",
                "bytes"
            ],
            "arguments": {
                "session": [],
                "orderid": [],
                "sku": []
            }
        },
        "test_uow_can_retrieve_a_batch_and_allocate_to_it": {
            "name": "test_uow_can_retrieve_a_batch_and_allocate_to_it",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "sqlite_session_factory": [
                    "str",
                    "Dict[str,Any]",
                    "Mapping[str,Any]",
                    "Mapping",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ]
            }
        },
        "test_rolls_back_uncommitted_work_by_default": {
            "name": "test_rolls_back_uncommitted_work_by_default",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "sqlite_session_factory": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_rolls_back_on_error": {
            "name": "test_rolls_back_on_error",
            "location": 64,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "sqlite_session_factory": [
                    "bool",
                    "str"
                ]
            }
        },
        "try_to_allocate": {
            "name": "try_to_allocate",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "orderid": [
                    "bool",
                    "model.SockeyeModel",
                    "int"
                ],
                "sku": [
                    "Dict[str,Any]",
                    "str"
                ],
                "exceptions": [
                    "List[bytes]",
                    "Callable",
                    "int",
                    "str",
                    "float"
                ],
                "session_factory": [
                    "int",
                    "List[Outcome]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "test_concurrent_updates_to_version_are_not_allowed": {
            "name": "test_concurrent_updates_to_version_are_not_allowed",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "postgres_session_factory": [
                    "Dict[str,Any]",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "python-leap-exs-master/tests/integration/test_views.py": {
        "sqlite_bus": {
            "name": "sqlite_bus",
            "location": 9,
            "return": [
                "str",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "sqlite_session_factory": [
                    "Dict"
                ]
            }
        },
        "test_allocations_view": {
            "name": "test_allocations_view",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "sqlite_bus": []
            }
        },
        "test_deallocation": {
            "name": "test_deallocation",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "sqlite_bus": []
            }
        }
    },
    "python-leap-exs-master/tests/unit/test_batches.py": {
        "test_allocating_to_a_batch_reduces_the_available_quantity": {
            "name": "test_allocating_to_a_batch_reduces_the_available_quantity",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "make_batch_and_line": {
            "name": "make_batch_and_line",
            "location": 13,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "sku": [
                    "datetime.datetime"
                ],
                "batch_qty": [
                    "datetime.datetime"
                ],
                "line_qty": [
                    "datetime.datetime"
                ]
            }
        },
        "test_can_allocate_if_available_greater_than_required": {
            "name": "test_can_allocate_if_available_greater_than_required",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_allocate_if_available_smaller_than_required": {
            "name": "test_cannot_allocate_if_available_smaller_than_required",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_allocate_if_available_equal_to_required": {
            "name": "test_can_allocate_if_available_equal_to_required",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_allocate_if_skus_do_not_match": {
            "name": "test_cannot_allocate_if_skus_do_not_match",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_allocation_is_idempotent": {
            "name": "test_allocation_is_idempotent",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-leap-exs-master/tests/unit/test_handlers.py": {
        "FakeRepository.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "products": [
                    "str",
                    "bytes",
                    "Set[int]",
                    "float"
                ]
            }
        },
        "FakeRepository._add": {
            "name": "_add",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "product": [
                    "collections.abc.AsyncIterable",
                    "allocation.domain.model.Product",
                    "bool",
                    "Iterable[Any]",
                    "Union[AsyncIterable[Any],Iterable[Any]]",
                    "Tuple[float,float]"
                ]
            }
        },
        "FakeRepository._get": {
            "name": "_get",
            "location": 16,
            "return": [
                "bool",
                "list",
                "List[Dict[str, Any]]",
                "frozenset",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "sku": [
                    "bool",
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "FakeRepository._get_by_batchid": {
            "name": "_get_by_batchid",
            "location": 19,
            "return": [
                "List[str]",
                "str",
                "list",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "batchid": [
                    "int",
                    "str",
                    "Dict[int,dict]"
                ]
            }
        },
        "FakeUnitOfWork.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeUnitOfWork._commit": {
            "name": "_commit",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeUnitOfWork.rollback": {
            "name": "rollback",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeBus.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddBatch.test_for_new_product": {
            "name": "test_for_new_product",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestAddBatch.test_for_existing_product": {
            "name": "test_for_existing_product",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestAllocate.test_allocates": {
            "name": "test_allocates",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestAllocate.test_errors_for_invalid_sku": {
            "name": "test_errors_for_invalid_sku",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestAllocate.test_commits": {
            "name": "test_commits",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestAllocate.test_sends_email_on_out_of_stock_error": {
            "name": "test_sends_email_on_out_of_stock_error",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestChangeBatchQuantity.test_changes_available_quantity": {
            "name": "test_changes_available_quantity",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestChangeBatchQuantity.test_reallocates_if_necessary": {
            "name": "test_reallocates_if_necessary",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-leap-exs-master/tests/unit/test_product.py": {
        "test_prefers_warehouse_batches_to_shipments": {
            "name": "test_prefers_warehouse_batches_to_shipments",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_prefers_earlier_batches": {
            "name": "test_prefers_earlier_batches",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_returns_allocated_batch_id": {
            "name": "test_returns_allocated_batch_id",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_records_out_of_stock_event_if_cannot_allocate": {
            "name": "test_records_out_of_stock_event_if_cannot_allocate",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_increments_version_number": {
            "name": "test_increments_version_number",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
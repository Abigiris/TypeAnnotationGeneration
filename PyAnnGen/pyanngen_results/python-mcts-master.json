{
    "python-mcts-master/mcts.py": {
        "State.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "observation": [
                    "bool",
                    "str",
                    "dict[str, np.ndarray]",
                    "int",
                    "Union[np.ndarray, Dict[str, np.ndarray], loompy.LayerManager]"
                ],
                "reward": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "done": [
                    "int",
                    "Optional[float]",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "player": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "State.__eq__": {
            "name": "__eq__",
            "location": 21,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "State.__hash__": {
            "name": "__hash__",
            "location": 24,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.__repr__": {
            "name": "__repr__",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "Callable",
                    "int",
                    "typing.Callable[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "state": [
                    "str",
                    "None",
                    "Callable",
                    "int",
                    "Dict[str, Any]",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ],
                "parent": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[bytes]",
                    "bytes"
                ]
            }
        },
        "Node.is_evaluated": {
            "name": "is_evaluated",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.is_expanded": {
            "name": "is_expanded",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__eq__": {
            "name": "__eq__",
            "location": 56,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "Node.__str__": {
            "name": "__str__",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MCTS.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "Tuple[int, int]",
                    "str"
                ],
                "player": [
                    "Tuple[int, int]",
                    "str",
                    "tuple[typing.Union[int,int]]"
                ],
                "budget": [
                    "int",
                    "datetime.timedelta",
                    "str",
                    "Optional[datetime.datetime]",
                    "Optional[datetime.timedelta]",
                    "dict",
                    "bool"
                ]
            }
        },
        "MCTS.register": {
            "name": "register",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ]
            }
        },
        "MCTS.randomax": {
            "name": "randomax",
            "location": 80,
            "return": [
                "str",
                "bytes",
                "tuple[typing.Union[int,int]]",
                "bool",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "elements": [
                    "bytes",
                    "float",
                    "list[tuple[typing.Union[int,int]]]",
                    "str",
                    "int",
                    "List[Tuple[int, int]]"
                ],
                "key": [
                    "None",
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "slice"
                ]
            }
        },
        "MCTS.act": {
            "name": "act",
            "location": 101,
            "return": [
                "tuple",
                "str"
            ],
            "arguments": {
                "self": [],
                "observation": [
                    "int"
                ]
            }
        },
        "MCTS.run": {
            "name": "run",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root_node": [
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "observation": [
                    "List[int]",
                    "list[int]",
                    "int",
                    "List[T]",
                    "list[T]"
                ]
            }
        },
        "MCTS.UCB1": {
            "name": "UCB1",
            "location": 130,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "str",
                    "numpy.ndarray"
                ],
                "c": [
                    "float",
                    "int",
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "MCTS.selection": {
            "name": "selection",
            "location": 136,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "MCTS.expansion": {
            "name": "expansion",
            "location": 151,
            "return": [
                "_T1"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "bytes"
                ],
                "next_node": [
                    "_T1"
                ]
            }
        },
        "MCTS.simulation": {
            "name": "simulation",
            "location": 166,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "MCTS.backpropagation": {
            "name": "backpropagation",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict",
                    "dict[, ]"
                ],
                "root_node": [
                    "typing.Callable[..., None]",
                    "bool",
                    "Callable[..., None]",
                    "Callable"
                ],
                "winner": [
                    "Optional[Mapping[str, Any]]",
                    "str",
                    "typing.Mapping",
                    "None"
                ],
                "reward": [
                    "int",
                    "Pattern",
                    "typing.Pattern",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "MCTS.play": {
            "name": "play",
            "location": 195,
            "return": [
                "float",
                "str",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "root_node": [
                    "Optional[int]",
                    "int",
                    "dict",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "MCTS.dumps": {
            "name": "dumps",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "MCTS.loads": {
            "name": "loads",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "MCTS.__str__": {
            "name": "__str__",
            "location": 210,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MCTS.__repr__": {
            "name": "__repr__",
            "location": 213,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-mcts-master/players.py": {
        "BasePlayer.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "str",
                    "list",
                    "bool",
                    "list[]",
                    "Optional[Dict]",
                    "dict[, ]",
                    "None"
                ],
                "token": [
                    "str"
                ]
            }
        },
        "BasePlayer.act": {
            "name": "act",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePlayer.__str__": {
            "name": "__str__",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePlayer.__repr__": {
            "name": "__repr__",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Iterate.act": {
            "name": "act",
            "location": 36,
            "return": [
                "Optional[Tuple[(int, int)]]"
            ],
            "arguments": {
                "self": [],
                "observation": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "Random.act": {
            "name": "act",
            "location": 47,
            "return": [
                "str",
                "Callable[[List], List[str]]"
            ],
            "arguments": {
                "self": [],
                "observation": [
                    "str"
                ]
            }
        },
        "MCTS.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MCTS.act": {
            "name": "act",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "observation": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "python-mcts-master/run.py": {},
    "python-mcts-master/tictactoe.py": {
        "FixedTupleSpace.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "bytes",
                    "str"
                ],
                "depth": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "FixedTupleSpace.sample": {
            "name": "sample",
            "location": 24,
            "return": [
                "Tuple[(nothing, ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TicTacToe.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ]
            }
        },
        "TicTacToe.reset": {
            "name": "reset",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "custom_current_player": [
                    "int",
                    "str",
                    "None",
                    "float"
                ],
                "custom_start": [
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "TicTacToe.clone": {
            "name": "clone",
            "location": 50,
            "return": [
                "icTacToe"
            ],
            "arguments": {
                "self": [
                    "_TTicTacToe"
                ]
            }
        },
        "TicTacToe.step": {
            "name": "step",
            "location": 54,
            "return": [
                "Tuple[(Any, int, bool, Any)]"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "str"
                ],
                "move": [
                    "tuple"
                ]
            }
        },
        "TicTacToe.state": {
            "name": "state",
            "location": 89,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "observation": [
                    "BaseException",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "None"
                ],
                "player": [
                    "int",
                    "Sequence[Tuple[float, float]]",
                    "bytes",
                    "typing.Sequence[tuple[typing.Union[float,float]]]",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "TicTacToe.actions": {
            "name": "actions",
            "location": 99,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "observation": [
                    "str"
                ]
            }
        },
        "TicTacToe.is_finished": {
            "name": "is_finished",
            "location": 104,
            "return": [
                "bool",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "TicTacToe.is_winner": {
            "name": "is_winner",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "int",
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "TicTacToe._switch_player": {
            "name": "_switch_player",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TicTacToe.__str__": {
            "name": "__str__",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TicTacToe.__repr__": {
            "name": "__repr__",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TicTacToe.is_winner.check": {
            "name": "check",
            "location": 111,
            "return": [
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "array": [
                    "Iterable[str]",
                    "int",
                    "List[List[int]]",
                    "List[str]",
                    "List[int]"
                ],
                "token": [
                    "Iterable[str]",
                    "int",
                    "List[List[int]]",
                    "List[str]",
                    "List[int]"
                ]
            }
        }
    }
}
{
    "python-prj-template-main/{{cookiecutter.project_slug}}/conftest.py": {},
    "python-prj-template-main/{{cookiecutter.project_slug}}/setup.py": {},
    "python-prj-template-main/{{cookiecutter.project_slug}}/conf/gunicorn.py": {},
    "python-prj-template-main/{{cookiecutter.project_slug}}/scripts/generate-conf-doc.py": {},
    "python-prj-template-main/{{cookiecutter.project_slug}}/tests/conftest.py": {},
    "python-prj-template-main/{{cookiecutter.project_slug}}/tests/test_apiserver.py": {},
    "python-prj-template-main/{{cookiecutter.project_slug}}/tests/commands/test_cli.py": {},
    "python-prj-template-main/{{cookiecutter.project_slug}}/tests/commands/test_command_base.py": {},
    "python-prj-template-main/{{cookiecutter.project_slug}}/tests/commands/test_version.py": {},
    "python-prj-template-main/{{cookiecutter.project_slug}}/{{cookiecutter.package_name}}/client.py": {},
    "python-prj-template-main/{{cookiecutter.project_slug}}/{{cookiecutter.package_name}}/config.py": {},
    "python-prj-template-main/{{cookiecutter.project_slug}}/{{cookiecutter.package_name}}/exception.py": {},
    "python-prj-template-main/{{cookiecutter.project_slug}}/{{cookiecutter.package_name}}/loghandler.py": {
        "_json_default": {
            "name": "_json_default",
            "location": 15,
            "return": [
                "str",
                "int",
                "dict",
                "List[datetime.time]"
            ],
            "arguments": {
                "obj": [
                    "datetime.datetime",
                    "Optional[datetime.tzinfo]",
                    "int",
                    "Optional[datetime.datetime]",
                    "float"
                ]
            }
        },
        "JsonFormatter.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonFormatter._parse_format_string": {
            "name": "_parse_format_string",
            "location": 85,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonFormatter.add_fields": {
            "name": "add_fields",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_record": [
                    "T",
                    "bool",
                    "Union[bytes, bytearray, memoryview]",
                    "str"
                ],
                "record": [
                    "Dict[str, Tuple[Any, Any]]",
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ],
                "message_dict": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "JsonFormatter.format": {
            "name": "format",
            "location": 109,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "dict",
                    "Optional[str]"
                ]
            }
        }
    },
    "python-prj-template-main/{{cookiecutter.project_slug}}/{{cookiecutter.package_name}}/main.py": {},
    "python-prj-template-main/{{cookiecutter.project_slug}}/{{cookiecutter.package_name}}/openapi.py": {},
    "python-prj-template-main/{{cookiecutter.project_slug}}/{{cookiecutter.package_name}}/__init__.py": {
        "_parse_version": {
            "name": "_parse_version",
            "location": 6,
            "return": [
                "typing.Text",
                "bool",
                "bytes",
                "Optional[List[str]]",
                "List[str]",
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "get_git_sha": {
            "name": "get_git_sha",
            "location": 18,
            "return": [
                "typing.Text",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "python-prj-template-main/{{cookiecutter.project_slug}}/{{cookiecutter.package_name}}/api/config.py": {},
    "python-prj-template-main/{{cookiecutter.project_slug}}/{{cookiecutter.package_name}}/api/info.py": {},
    "python-prj-template-main/{{cookiecutter.project_slug}}/{{cookiecutter.package_name}}/api/__init__.py": {},
    "python-prj-template-main/{{cookiecutter.project_slug}}/{{cookiecutter.package_name}}/api/{{cookiecutter.package_name}}.py": {},
    "python-prj-template-main/{{cookiecutter.project_slug}}/{{cookiecutter.package_name}}/api/middlewares/__init__.py": {},
    "python-prj-template-main/{{cookiecutter.project_slug}}/{{cookiecutter.package_name}}/commands/cli.py": {},
    "python-prj-template-main/{{cookiecutter.project_slug}}/{{cookiecutter.package_name}}/commands/command_base.py": {},
    "python-prj-template-main/{{cookiecutter.project_slug}}/{{cookiecutter.package_name}}/commands/openapi.py": {},
    "python-prj-template-main/{{cookiecutter.project_slug}}/{{cookiecutter.package_name}}/commands/runserver.py": {},
    "python-prj-template-main/{{cookiecutter.project_slug}}/{{cookiecutter.package_name}}/commands/utils.py": {
        "ensure_value": {
            "name": "ensure_value",
            "location": 12,
            "return": [
                "bool",
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "namespace": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]"
                ],
                "value": [
                    "str",
                    "Awaitable",
                    "collections.abc.Awaitable[]"
                ]
            }
        },
        "ServerHost.__call__": {
            "name": "__call__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "argparse.ArgumentParser"
                ],
                "namespace": [
                    "argparse.Namespace"
                ],
                "value": [
                    "str",
                    "tuple[]",
                    "argparse.ArgumentParser",
                    "argparse.Namespace",
                    "tuple"
                ],
                "option_string": [
                    "Optional[str]"
                ]
            }
        },
        "LoadVariables._parse_cmd": {
            "name": "_parse_cmd",
            "location": 30,
            "return": [
                "dict[typing.Union[str,int,list[str]], typing.Union[str,bytes,dict[str, bool]]]",
                "Iterable[str]",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "Type",
                    "Type[Any]",
                    "float"
                ]
            }
        },
        "LoadVariables._load_from_file": {
            "name": "_load_from_file",
            "location": 43,
            "return": [
                "str",
                "bool",
                "Any"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]"
                ],
                "ext": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "LoadVariables.load_variables": {
            "name": "load_variables",
            "location": 53,
            "return": [
                "bool",
                "Type",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "typing.Type",
                    "Type[object]",
                    "Type"
                ]
            }
        },
        "LoadVariables.__call__": {
            "name": "__call__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "argparse.ArgumentParser"
                ],
                "namespace": [
                    "argparse.Namespace"
                ],
                "values": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "option_string": [
                    "str"
                ]
            }
        }
    },
    "python-prj-template-main/{{cookiecutter.project_slug}}/{{cookiecutter.package_name}}/commands/version.py": {},
    "python-prj-template-main/{{cookiecutter.project_slug}}/{{cookiecutter.package_name}}/commands/__init__.py": {}
}
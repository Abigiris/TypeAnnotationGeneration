{
    "python-sandbox-master/bounding_box/main.py": {
        "draw_bboxes": {
            "name": "draw_bboxes",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "img": [
                    "int",
                    "None",
                    "Optional[int]",
                    "typing.Type",
                    "Type[T]",
                    "bool"
                ],
                "bboxes": [
                    "List[int]",
                    "list[int]",
                    "List[float]",
                    "str",
                    "list[float]",
                    "List[List[int]]",
                    "list[list[int]]",
                    "bool",
                    "float",
                    "Callable[[Type, str], bool]",
                    "typing.Callable[Type,str, bool]",
                    "List['Entity']",
                    "list['Entity']"
                ],
                "labels": [
                    "List[int]",
                    "list[int]",
                    "List[float]",
                    "str",
                    "list[float]",
                    "List[List[int]]",
                    "list[list[int]]",
                    "bool",
                    "float",
                    "Callable[[Type, str], bool]",
                    "typing.Callable[Type,str, bool]",
                    "List['Entity']",
                    "list['Entity']"
                ],
                "scores": [
                    "List[int]",
                    "list[int]",
                    "List[float]",
                    "str",
                    "list[float]",
                    "List[List[int]]",
                    "list[list[int]]",
                    "bool",
                    "float",
                    "Callable[[Type, str], bool]",
                    "typing.Callable[Type,str, bool]",
                    "List['Entity']",
                    "list['Entity']"
                ],
                "classes": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-sandbox-master/load_measurement/log_docker_stats.py": {
        "parse_docker_stats": {
            "name": "parse_docker_stats",
            "location": 10,
            "return": [
                "str",
                "list",
                "dict[, ]",
                "set"
            ],
            "arguments": {}
        },
        "default_containers": {
            "name": "default_containers",
            "location": 22,
            "return": [
                "str",
                "bool",
                "Union[str, List[str]]",
                "int"
            ],
            "arguments": {}
        },
        "default_csv_name": {
            "name": "default_csv_name",
            "location": 27,
            "return": [
                "typing.Text",
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "parse_args": {
            "name": "parse_args",
            "location": 31,
            "return": [
                "argparse.Namespace",
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-sandbox-master/load_measurement/log_proc.py": {
        "parse_load_average": {
            "name": "parse_load_average",
            "location": 11,
            "return": [
                "str",
                "bool",
                "tuple[typing.Union[typing.Any,typing.Any]]"
            ],
            "arguments": {}
        },
        "make_header": {
            "name": "make_header",
            "location": 87,
            "return": [
                "list[typing.Text]",
                "Dict[str, Any]",
                "Dict[str, Union[str, int]]",
                "dict",
                "Dict[str, Dict[str, str]]",
                "List[dict]",
                "Dict[str, Type]",
                "str"
            ],
            "arguments": {
                "cpu_keys": [
                    "str",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "make_row": {
            "name": "make_row",
            "location": 96,
            "return": [
                "list[str]",
                "Tuple[int, int]",
                "bool",
                "float"
            ],
            "arguments": {
                "cpu_keys": [
                    "str",
                    "Optional[Any]",
                    "typing.Any",
                    "dict",
                    "None",
                    "dict[, ]"
                ],
                "cpu_usage": [
                    "Iterable[Iterable[T]]",
                    "int",
                    "str",
                    "Optional[str]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "default_csv_name": {
            "name": "default_csv_name",
            "location": 108,
            "return": [
                "typing.Text",
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "parse_args": {
            "name": "parse_args",
            "location": 112,
            "return": [
                "argparse.Namespace",
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CpuUsage.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CpuUsage.cpu_usage_ratio": {
            "name": "cpu_usage_ratio",
            "location": 37,
            "return": [
                "dict[, list[int]]",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CpuUsage.__parse_proc_stat": {
            "name": "__parse_proc_stat",
            "location": 53,
            "return": [
                "dict[typing.Union[float,str], list[int]]",
                "Sequence[str]",
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ]
            }
        },
        "CpuUsage.get_cpu_keys": {
            "name": "get_cpu_keys",
            "location": 67,
            "return": [
                "list[]",
                "List[str]",
                "List[dict]",
                "Dict[str, Set[str]]",
                "list",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Dict]",
                    "Optional"
                ]
            }
        },
        "CpuUsage.__read_proc_stat": {
            "name": "__read_proc_stat",
            "location": 72,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "python-sandbox-master/prohibit_override/init_subclass.py": {
        "final": {
            "name": "final",
            "location": 7,
            "return": [
                "int",
                "bool",
                "str",
                "Callable",
                "None"
            ],
            "arguments": {
                "funcobj": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "get_func_type": {
            "name": "get_func_type",
            "location": 12,
            "return": [
                "Dict[str, Any]",
                "typing.Text"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "func_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "Final.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "Final.get_methods": {
            "name": "get_methods",
            "location": 40,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Collection[int]",
                    "typing.Collection"
                ]
            }
        },
        "A.final_member": {
            "name": "final_member",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "A.final_class": {
            "name": "final_class",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "tuple[str]",
                    "Tuple[str]",
                    "bool",
                    "typing.Type",
                    "Type",
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "list[]",
                    "Type[Any]",
                    "Optional[List]"
                ]
            }
        },
        "A.final_static": {
            "name": "final_static",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "A.overridable": {
            "name": "overridable",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "L.overridable": {
            "name": "overridable",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "C.final_member": {
            "name": "final_member",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "D.final_member": {
            "name": "final_member",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "E.final_member": {
            "name": "final_member",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "F.final_member": {
            "name": "final_member",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "G.final_member": {
            "name": "final_member",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "H.final_member": {
            "name": "final_member",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "J.final_class": {
            "name": "final_class",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "tuple[str]",
                    "Tuple[str]",
                    "bool",
                    "typing.Type",
                    "Type",
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "list[]",
                    "Type[Any]",
                    "Optional[List]"
                ]
            }
        },
        "K.final_static": {
            "name": "final_static",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-sandbox-master/prohibit_override/mypy.py": {
        "Base.hello": {
            "name": "hello",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Derived.hello": {
            "name": "hello",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-sandbox-master/pytorch_bn_fusion/main.py": {
        "fuse_conv_bn": {
            "name": "fuse_conv_bn",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "conv": [
                    "int",
                    "torch.nn.Conv2d"
                ],
                "bn": [
                    "bool",
                    "str",
                    "float",
                    "typing.Sequence[int]",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "convert_bn_params": {
            "name": "convert_bn_params",
            "location": 17,
            "return": [
                "tuple[]",
                "Tuple[int, int]",
                "float"
            ],
            "arguments": {
                "bn": []
            }
        },
        "gen_conv": {
            "name": "gen_conv",
            "location": 24,
            "return": [
                "bool",
                "str",
                "Optional[Any]",
                "int"
            ],
            "arguments": {
                "in_channels": [
                    "int",
                    "float",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "torch.Tensor",
                    "Tuple[int, int]"
                ],
                "out_channels": [
                    "int",
                    "float",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "torch.Tensor",
                    "Tuple[int, int]"
                ],
                "kernel_size": [
                    "int",
                    "float",
                    "str",
                    "torch.Tensor",
                    "Tuple[int, int]"
                ]
            }
        },
        "gen_bn": {
            "name": "gen_bn",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "num_features": [
                    "int",
                    "Optional[int]",
                    "float",
                    "None"
                ]
            }
        },
        "TestBatchNormFusion.test_fuse_bn": {
            "name": "test_fuse_bn",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_features": [
                    "int",
                    "typing.Sequence[int]",
                    "Sequence[int]",
                    "bool"
                ]
            }
        },
        "TestBatchNormFusion.test_fuse_conv_bn": {
            "name": "test_fuse_conv_bn",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_channels": [
                    "float",
                    "int",
                    "List[int]",
                    "list[int]"
                ],
                "out_channels": [
                    "int",
                    "float",
                    "str",
                    "bool",
                    "list[str]",
                    "List[str]"
                ]
            }
        }
    },
    "python-sandbox-master/pytorch_lightning_optuna/main.py": {
        "objective_wrapper": {
            "name": "objective_wrapper",
            "location": 92,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "epochs": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "Net.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "trial": [
                    "bytes",
                    "List[torch.Tensor]",
                    "float",
                    "int"
                ]
            }
        },
        "Net.forward": {
            "name": "forward",
            "location": 43,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "hypothesis.internal.conjecture.data.ConjectureData"
                ]
            }
        },
        "Net.training_step": {
            "name": "training_step",
            "location": 50,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "raiden.utils.Any"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "str",
                    "int",
                    "pathlib.Path"
                ],
                "batch_nb": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Net.validation_step": {
            "name": "validation_step",
            "location": 55,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "torch.nn.utils.rnn.PackedSequence",
                "Iterable[str]",
                "raiden.utils.signer.Signer"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "str",
                    "int",
                    "pathlib.Path"
                ],
                "batch_nb": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Net.validation_epoch_end": {
            "name": "validation_epoch_end",
            "location": 61,
            "return": [
                "dict[typing.Text, typing.Union[list[],typing.Iterator,dict[str, int]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "outputs": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "bytes",
                    "list",
                    "list[]"
                ]
            }
        },
        "Net.on_post_performance_check": {
            "name": "on_post_performance_check",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Net.configure_optimizers": {
            "name": "configure_optimizers",
            "location": 73,
            "return": [
                "str",
                "torch.Tensor",
                "list",
                "Tuple[str, List[str], List[float], List[str], List[float], List[float], List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Net.train_dataloader": {
            "name": "train_dataloader",
            "location": 79,
            "return": [
                "DataLoader",
                "str",
                "bool",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Net.val_dataloader": {
            "name": "val_dataloader",
            "location": 86,
            "return": [
                "DataLoader",
                "int",
                "str",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "objective_wrapper.objective": {
            "name": "objective",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "trial": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    }
}
{
    "python-zulip-api-master-master/tools/custom_check.py": {
        "build_custom_checkers": {
            "name": "build_custom_checkers",
            "location": 12,
            "return": [
                "bool",
                "Tuple"
            ],
            "arguments": {
                "by_lang": [
                    "bool",
                    "List",
                    "Iterable[str]"
                ]
            }
        },
        "build_custom_checkers.custom_check_file": {
            "name": "custom_check_file",
            "location": 16,
            "return": [
                "bool",
                "str",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "identifier": [
                    "str",
                    "Mapping"
                ],
                "rules": [
                    "bool",
                    "Callable"
                ],
                "skip_rules": [
                    "None",
                    "bool",
                    "Callable"
                ],
                "max_length": [
                    "None",
                    "str",
                    "Dict",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "build_custom_checkers.check_custom_checks_py": {
            "name": "check_custom_checks_py",
            "location": 214,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "build_custom_checkers.check_custom_checks_nonpy": {
            "name": "check_custom_checks_nonpy",
            "location": 225,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "python-zulip-api-master-master/tools/pep8.py": {
        "check_pep8": {
            "name": "check_pep8",
            "location": 14,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "files": [
                    "BinaryIO",
                    "bytes"
                ]
            }
        },
        "check_pep8.run_pycodestyle": {
            "name": "run_pycodestyle",
            "location": 17,
            "return": [
                "bool",
                "str",
                "int",
                "List"
            ],
            "arguments": {
                "files": [
                    "str",
                    "list"
                ],
                "ignored_rules": [
                    "str",
                    "list"
                ]
            }
        }
    },
    "python-zulip-api-master-master/tools/server_lib/lister.py": {
        "get_ftype": {
            "name": "get_ftype",
            "location": 15,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "fpath": [
                    "str",
                    "int"
                ],
                "use_shebang": [
                    "bool",
                    "str"
                ]
            }
        },
        "list_files": {
            "name": "list_files",
            "location": 42,
            "return": [
                "bool",
                "List[dict[str,Any]]",
                "str",
                "List[int]",
                "Dict[str,str]",
                "List"
            ],
            "arguments": {
                "targets": [
                    "List",
                    "int",
                    "List[float]",
                    "str",
                    "bool"
                ],
                "ftypes": [
                    "List",
                    "List[str]",
                    "str",
                    "Set[str]",
                    "List[int]"
                ],
                "use_shebang": [
                    "bool",
                    "str",
                    "Optional[Tuple[int,int]]"
                ],
                "modified_only": [
                    "bool",
                    "str",
                    "int"
                ],
                "exclude": [
                    "List",
                    "str",
                    "Union[str,dict]"
                ],
                "group_by_ftype": [
                    "bool",
                    "int",
                    "List[int]",
                    "Tuple"
                ],
                "extless_only": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str,Any]",
                    "List[str]",
                    "bytes"
                ]
            }
        }
    },
    "python-zulip-api-master-master/tools/server_lib/printer.py": {
        "print_err": {
            "name": "print_err",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "color": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "line": [
                    "str",
                    "dict",
                    "Optional[Dict]",
                    "Set[str]"
                ]
            }
        }
    },
    "python-zulip-api-master-master/tools/server_lib/test_handler.py": {
        "handle_input_and_run_tests_for_package": {
            "name": "handle_input_and_run_tests_for_package",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "package_name": [
                    "str"
                ]
            }
        }
    },
    "python-zulip-api-master-master/tools/server_lib/__init__.py": {},
    "python-zulip-api-master-master/zulip/setup.py": {
        "version": {
            "name": "version",
            "location": 13,
            "return": [
                "str",
                "Callable[,bool]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "recur_expand": {
            "name": "recur_expand",
            "location": 22,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "target_root": [
                    "str",
                    "bool"
                ],
                "dir": [
                    "str",
                    "int",
                    "List",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip/integrations/codebase/zulip_codebase_config.py": {},
    "python-zulip-api-master-master/zulip/integrations/git/zulip_git_config.py": {
        "commit_notice_destination": {
            "name": "commit_notice_destination",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": [],
                "branch": [],
                "commit": []
            }
        },
        "format_commit_message": {
            "name": "format_commit_message",
            "location": 58,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "author": [],
                "subject": [],
                "commit_id": []
            }
        }
    },
    "python-zulip-api-master-master/zulip/integrations/hg/zulip-changegroup.py": {
        "format_summary_line": {
            "name": "format_summary_line",
            "location": 37,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "web_url": [
                    "str",
                    "int",
                    "Exception"
                ],
                "user": [
                    "str",
                    "int"
                ],
                "base": [
                    "int",
                    "bool",
                    "Dict"
                ],
                "tip": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "branch": [
                    "str",
                    "int"
                ],
                "node": [
                    "str",
                    "int"
                ]
            }
        },
        "format_commit_lines": {
            "name": "format_commit_lines",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "web_url": [
                    "str",
                    "Dict",
                    "Optional[str]"
                ],
                "repo": [
                    "int",
                    "List[int]",
                    "bool",
                    "str"
                ],
                "base": [
                    "str",
                    "int",
                    "Dict",
                    "float",
                    "None",
                    "Optional[int]",
                    "Sequence[dict[str,str]]",
                    "Optional[Dict]",
                    "Sequence[Dict[str,str]]"
                ],
                "tip": [
                    "int",
                    "str",
                    "Dict",
                    "float",
                    "Optional[int]",
                    "Optional[Dict]",
                    "Sequence[Dict[str,str]]"
                ]
            }
        },
        "send_zulip": {
            "name": "send_zulip",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "email": [
                    "str",
                    "bool",
                    "Optional[Union[int,Any]]",
                    "Any",
                    "None"
                ],
                "api_key": [
                    "str",
                    "bool",
                    "Optional[Union[int,Any]]",
                    "Any",
                    "None"
                ],
                "site": [
                    "str",
                    "bool",
                    "Optional[Union[int,Any]]",
                    "Any",
                    "None"
                ],
                "stream": [
                    "str",
                    "Optional[bool]",
                    "bytes",
                    "bool",
                    "Tuple[int,int]",
                    "None",
                    "Tuple[Union[int,int]]"
                ],
                "subject": [
                    "str",
                    "Optional[bool]",
                    "bytes",
                    "bool",
                    "Tuple[int,int]",
                    "None",
                    "Tuple[Union[int,int]]"
                ],
                "content": [
                    "str",
                    "Optional[bool]",
                    "bytes",
                    "bool",
                    "Tuple[int,int]",
                    "None",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "get_config": {
            "name": "get_config",
            "location": 108,
            "return": [
                "None",
                "str",
                "int",
                "bool",
                "Optional[Tuple[int,int]]"
            ],
            "arguments": {
                "ui": [
                    "Dict[str, str]",
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, Dict[str, str]]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "item": [
                    "Dict[str,str]",
                    "Dict",
                    "bool",
                    "Mapping",
                    "Mapping[str,Any]",
                    "Dict[str,dict[str,str]]",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "hook": {
            "name": "hook",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "ui": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "repo": [
                    "Callable",
                    "int",
                    "str",
                    "Awaitable[T]",
                    "Optional[Iterable[str]]"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip/integrations/irc/irc-mirror.py": {},
    "python-zulip-api-master-master/zulip/integrations/irc/irc_mirror_backend.py": {
        "zulip_sender": {
            "name": "zulip_sender",
            "location": 8,
            "return": [
                "str",
                "bool",
                "int",
                "List[Tuple[str,str]]"
            ],
            "arguments": {
                "sender_string": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "IRCBot.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "zulip_client": [
                    "Callable"
                ],
                "channel": [
                    "float",
                    "bool"
                ],
                "nickname": [
                    "str",
                    "int",
                    "None",
                    "Union[Literal,str]",
                    "Optional[str]"
                ],
                "server": [
                    "str",
                    "int",
                    "None",
                    "Union[Literal,str]",
                    "Optional[str]"
                ],
                "port": [
                    "int",
                    "str",
                    "Union[Literal,str]",
                    "Optional[str]"
                ]
            }
        },
        "IRCBot.on_nicknameinuse": {
            "name": "on_nicknameinuse",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "float",
                    "Callable",
                    "irc.clienServerConnection",
                    "T"
                ],
                "e": [
                    "bool",
                    "irc.clienServerConnection",
                    "irc.clienEvent",
                    "int"
                ]
            }
        },
        "IRCBot.on_welcome": {
            "name": "on_welcome",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "bool",
                    "irc.clienServerConnection",
                    "irc.clienEvent",
                    "int"
                ],
                "e": [
                    "bool",
                    "irc.clienServerConnection",
                    "irc.clienEvent",
                    "int"
                ]
            }
        },
        "IRCBot.on_privmsg": {
            "name": "on_privmsg",
            "location": 47,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "bool",
                    "irc.clienServerConnection",
                    "irc.clienEvent",
                    "int"
                ],
                "e": [
                    "Callable",
                    "Dict",
                    "Optional[Any]",
                    "Any",
                    "T",
                    "None"
                ]
            }
        },
        "IRCBot.on_pubmsg": {
            "name": "on_pubmsg",
            "location": 62,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "bool",
                    "irc.clienServerConnection",
                    "irc.clienEvent",
                    "int"
                ],
                "e": [
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "IRCBot.on_dccmsg": {
            "name": "on_dccmsg",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "bool",
                    "Callable[...,str]",
                    "irc.clienEvent",
                    "irc.clienServerConnection"
                ],
                "e": [
                    "bool",
                    "Callable[...,str]",
                    "irc.clienEvent",
                    "irc.clienServerConnection"
                ]
            }
        },
        "IRCBot.on_dccchat": {
            "name": "on_dccchat",
            "location": 84,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "bool",
                    "irc.clienServerConnection",
                    "irc.clienEvent",
                    "int"
                ],
                "e": [
                    "Callable",
                    "Tuple",
                    "Sequence[Any]",
                    "Callable[...,T]",
                    "Mapping",
                    "Mapping[str,Any]"
                ]
            }
        },
        "IRCBot.on_welcome.forward_to_irc": {
            "name": "forward_to_irc",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "Callable",
                    "List[Tuple[int, int, str]]",
                    "Set[str]",
                    "int",
                    "Iterable"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip/integrations/jabber/jabber_mirror.py": {
        "die": {
            "name": "die",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "signal": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip/integrations/jabber/jabber_mirror_backend.py": {
        "room_to_stream": {
            "name": "room_to_stream",
            "location": 60,
            "return": [
                "str",
                "bytes",
                "int",
                "IO",
                "List[str]"
            ],
            "arguments": {
                "room": [
                    "str",
                    "List[int]",
                    "int",
                    "List[list[str]]",
                    "float",
                    "List[List[str]]"
                ]
            }
        },
        "stream_to_room": {
            "name": "stream_to_room",
            "location": 64,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "stream": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "jid_to_zulip": {
            "name": "jid_to_zulip",
            "location": 68,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "jid": [
                    "str"
                ]
            }
        },
        "zulip_to_jid": {
            "name": "zulip_to_jid",
            "location": 75,
            "return": [
                "JID",
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "email": [
                    "str"
                ],
                "jabber_domain": [
                    "str"
                ]
            }
        },
        "get_rooms": {
            "name": "get_rooms",
            "location": 301,
            "return": [
                "List",
                "str",
                "bool"
            ],
            "arguments": {
                "zulipToJabber": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "None",
                    "zulip.Client"
                ]
            }
        },
        "config_error": {
            "name": "config_error",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "int"
                ]
            }
        },
        "JabberToZulipBot.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jid": [
                    "str",
                    "Tuple",
                    "int"
                ],
                "password": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "rooms": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "JabberToZulipBot.set_zulip_client": {
            "name": "set_zulip_client",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "zulipToJabberClient": [
                    "int",
                    "bytes",
                    "Dict",
                    "bool"
                ]
            }
        },
        "JabberToZulipBot.session_start": {
            "name": "session_start",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "bool",
                    "str",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "JabberToZulipBot.join_muc": {
            "name": "join_muc",
            "location": 114,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "room": [
                    "str",
                    "lowerpines.endpoints.message.Message",
                    "Dict",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "JabberToZulipBot.leave_muc": {
            "name": "leave_muc",
            "location": 140,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "room": [
                    "str",
                    "float",
                    "List[str]"
                ]
            }
        },
        "JabberToZulipBot.message": {
            "name": "message",
            "location": 149,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "JabberToZulipBot.private": {
            "name": "private",
            "location": 162,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "slice"
                ]
            }
        },
        "JabberToZulipBot.group": {
            "name": "group",
            "location": 179,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "JabberToZulipBot.nickname_to_jid": {
            "name": "nickname_to_jid",
            "location": 207,
            "return": [
                "JID",
                "int",
                "Dict[str,int]",
                "Dict[str,Any]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "room": [
                    "str",
                    "bool",
                    "int"
                ],
                "nick": [
                    "str"
                ]
            }
        },
        "ZulipToJabberBot.__init__": {
            "name": "__init__",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "zulip_client": [
                    "float",
                    "bool",
                    "discord.Client"
                ]
            }
        },
        "ZulipToJabberBot.set_jabber_client": {
            "name": "set_jabber_client",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "float",
                    "discord.Client"
                ]
            }
        },
        "ZulipToJabberBot.process_event": {
            "name": "process_event",
            "location": 225,
            "return": [
                "None",
                "Iterable[Mapping[str,Any]]",
                "Optional[bool]",
                "bytes",
                "float"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "ZulipToJabberBot.stream_message": {
            "name": "stream_message",
            "location": 244,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "List[str]",
                    "bytes",
                    "Message"
                ]
            }
        },
        "ZulipToJabberBot.private_message": {
            "name": "private_message",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "List[str]",
                    "bytes",
                    "Message"
                ]
            }
        },
        "ZulipToJabberBot.process_subscription": {
            "name": "process_subscription",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "ZulipToJabberBot.process_stream": {
            "name": "process_stream",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "get_rooms.get_stream_infos": {
            "name": "get_stream_infos",
            "location": 303,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Iterator[str]",
                    "tuple"
                ],
                "method": [
                    "str",
                    "Union[bytes, str, SupportsFloat]",
                    "float",
                    "Tuple[int, int]",
                    "Hashable"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip/integrations/openshift/zulip_openshift_config.py": {
        "deployment_notice_destination": {
            "name": "deployment_notice_destination",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "branch": []
            }
        },
        "format_deployment_message": {
            "name": "format_deployment_message",
            "location": 64,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "app_name": [
                    "typing.Text"
                ],
                "url": [
                    "typing.Text"
                ],
                "branch": [
                    "typing.Text"
                ],
                "commit_id": [
                    "typing.Text"
                ],
                "dep_id": [
                    "typing.Text"
                ],
                "dep_time": [
                    "typing.Text"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip/integrations/perforce/git_p4.py": {
        "p4_build_cmd": {
            "name": "p4_build_cmd",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "cmd": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "chdir": {
            "name": "chdir",
            "location": 70,
            "return": [],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]",
                    "Union[List, str]"
                ],
                "is_client_path": [
                    "str",
                    "bool",
                    "List[str]",
                    "Set[str]"
                ]
            }
        },
        "die": {
            "name": "die",
            "location": 92,
            "return": [],
            "arguments": {
                "msg": [
                    "str",
                    "float"
                ]
            }
        },
        "write_pipe": {
            "name": "write_pipe",
            "location": 99,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Iterator[str]"
                ],
                "stdin": [
                    "dict",
                    "Optional[tuple]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "p4_write_pipe": {
            "name": "p4_write_pipe",
            "location": 113,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "c": [
                    "List[str]",
                    "Optional[bool]",
                    "\"IntensityTable\"",
                    "bool"
                ],
                "stdin": [
                    "int",
                    "str",
                    "Counter",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "read_pipe": {
            "name": "read_pipe",
            "location": 117,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Optional[str]"
                ],
                "ignore_error": [
                    "bool",
                    "Dict[int, dict]",
                    "Type"
                ]
            }
        },
        "p4_read_pipe": {
            "name": "p4_read_pipe",
            "location": 130,
            "return": [
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "c": [
                    "Optional[str]",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "str"
                ],
                "ignore_error": [
                    "int",
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "read_pipe_lines": {
            "name": "read_pipe_lines",
            "location": 134,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "c": [
                    "str",
                    "bool"
                ]
            }
        },
        "p4_read_pipe_lines": {
            "name": "p4_read_pipe_lines",
            "location": 147,
            "return": [
                "int",
                "List[str]",
                "List[Tuple[str, str]]",
                "str"
            ],
            "arguments": {
                "c": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "p4_has_command": {
            "name": "p4_has_command",
            "location": 152,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "Callable"
                ]
            }
        },
        "p4_has_move_command": {
            "name": "p4_has_move_command",
            "location": 161,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "system": {
            "name": "system",
            "location": 180,
            "return": [],
            "arguments": {
                "cmd": [
                    "str"
                ]
            }
        },
        "p4_system": {
            "name": "p4_system",
            "location": 188,
            "return": [],
            "arguments": {
                "cmd": [
                    "str",
                    "Callable"
                ]
            }
        },
        "p4_version_string": {
            "name": "p4_version_string",
            "location": 197,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "p4_integrate": {
            "name": "p4_integrate",
            "location": 212,
            "return": [],
            "arguments": {
                "src": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "dest": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "p4_sync": {
            "name": "p4_sync",
            "location": 215,
            "return": [],
            "arguments": {
                "f": [
                    "dict",
                    "list",
                    "Dict[str, Any]"
                ]
            }
        },
        "p4_add": {
            "name": "p4_add",
            "location": 218,
            "return": [],
            "arguments": {
                "f": [
                    "\"Atom\"",
                    "int",
                    "dict"
                ]
            }
        },
        "p4_delete": {
            "name": "p4_delete",
            "location": 225,
            "return": [],
            "arguments": {
                "f": [
                    "Tuple[str, bool]",
                    "str"
                ]
            }
        },
        "p4_edit": {
            "name": "p4_edit",
            "location": 228,
            "return": [],
            "arguments": {
                "f": [
                    "Callable",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "p4_revert": {
            "name": "p4_revert",
            "location": 231,
            "return": [],
            "arguments": {
                "f": [
                    "Callable",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "p4_reopen": {
            "name": "p4_reopen",
            "location": 234,
            "return": [],
            "arguments": {
                "type": [
                    "Type",
                    "Callable"
                ],
                "f": [
                    "Type",
                    "Callable"
                ]
            }
        },
        "p4_move": {
            "name": "p4_move",
            "location": 237,
            "return": [],
            "arguments": {
                "src": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "dest": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "p4_describe": {
            "name": "p4_describe",
            "location": 240,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "change": [
                    "int",
                    "Union[str, List[str]]",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "split_p4_type": {
            "name": "split_p4_type",
            "location": 268,
            "return": [
                "int",
                "Pattern",
                "Optional[\"Node\"]"
            ],
            "arguments": {
                "p4type": [
                    "bool",
                    "str"
                ]
            }
        },
        "p4_type": {
            "name": "p4_type",
            "location": 301,
            "return": [
                "str",
                "Optional[str]",
                "BinaryIO"
            ],
            "arguments": {
                "file": [
                    "list",
                    "bool"
                ]
            }
        },
        "p4_keywords_regexp_for_type": {
            "name": "p4_keywords_regexp_for_type",
            "location": 309,
            "return": [
                "Optional[Callable[[bool], None]]",
                "Optional[BaseException]"
            ],
            "arguments": {
                "base": [
                    "str",
                    "bool"
                ],
                "type_mods": [
                    "str",
                    "bool"
                ]
            }
        },
        "p4_keywords_regexp_for_file": {
            "name": "p4_keywords_regexp_for_file",
            "location": 333,
            "return": [
                "bool",
                "Callable[[Type, str], bool]",
                "Optional['Entity']"
            ],
            "arguments": {
                "file": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "setP4ExecBit": {
            "name": "setP4ExecBit",
            "location": 340,
            "return": [],
            "arguments": {
                "file": [
                    "str",
                    "float"
                ],
                "mode": [
                    "List[str]",
                    "int"
                ]
            }
        },
        "getP4OpenedType": {
            "name": "getP4OpenedType",
            "location": 355,
            "return": [
                "List[int]",
                "dict",
                "bytearray",
                "Optional[str]",
                "Container[str]",
                "str"
            ],
            "arguments": {
                "file": [
                    "bool"
                ]
            }
        },
        "getP4Labels": {
            "name": "getP4Labels",
            "location": 366,
            "return": [
                "str",
                "List[List[str]]",
                "int"
            ],
            "arguments": {
                "depotPaths": [
                    "Optional[str]"
                ]
            }
        },
        "getGitTags": {
            "name": "getGitTags",
            "location": 378,
            "return": [
                "str",
                "Tuple[str]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "diffTreePattern": {
            "name": "diffTreePattern",
            "location": 385,
            "return": [],
            "arguments": {}
        },
        "parseDiffTreeEntry": {
            "name": "parseDiffTreeEntry",
            "location": 392,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "entry": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "isModeExec": {
            "name": "isModeExec",
            "location": 425,
            "return": [
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "mode": [
                    "int",
                    "str",
                    "Callable[[Any], T]",
                    "List[Dict[str, Any]]",
                    "Type[T]",
                    "List[str]"
                ]
            }
        },
        "isModeExecChanged": {
            "name": "isModeExecChanged",
            "location": 430,
            "return": [
                "bool",
                "float",
                "int",
                "List[str]"
            ],
            "arguments": {
                "src_mode": [
                    "str",
                    "int"
                ],
                "dst_mode": [
                    "str",
                    "int"
                ]
            }
        },
        "p4CmdList": {
            "name": "p4CmdList",
            "location": 433,
            "return": [
                "int",
                "bool",
                "\"Parameter\"",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "cmd": [
                    "dict",
                    "str",
                    "List[List[int]]",
                    "bool",
                    "List[str]"
                ],
                "stdin": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Union[bytes, str]",
                    "Optional[bytes]",
                    "bool"
                ],
                "stdin_mode": [
                    "str",
                    "bytes",
                    "bool",
                    "int"
                ],
                "cb": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "p4Cmd": {
            "name": "p4Cmd",
            "location": 483,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "cmd": [
                    "Deque",
                    "Callable[..., bool]"
                ]
            }
        },
        "p4Where": {
            "name": "p4Where",
            "location": 490,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "depotPath": [
                    "str"
                ]
            }
        },
        "currentGitBranch": {
            "name": "currentGitBranch",
            "location": 523,
            "return": [
                "str",
                "type",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "isValidGitDir": {
            "name": "isValidGitDir",
            "location": 526,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "parseRevision": {
            "name": "parseRevision",
            "location": 532,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "ref": [
                    "str",
                    "Collection[str]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "branchExists": {
            "name": "branchExists",
            "location": 535,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ref": [
                    "str",
                    "Match[str]",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "extractLogMessageFromGitCommit": {
            "name": "extractLogMessageFromGitCommit",
            "location": 540,
            "return": [
                "Dict[str, Any]",
                "Set[str]"
            ],
            "arguments": {
                "commit": [
                    "float",
                    "subprocess.Popen",
                    "Optional[List[str]]",
                    "Optional[BaseException]"
                ]
            }
        },
        "extractSettingsGitLog": {
            "name": "extractSettingsGitLog",
            "location": 554,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "log": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "gitBranchExists": {
            "name": "gitBranchExists",
            "location": 579,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "branch": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "gitConfig": {
            "name": "gitConfig",
            "location": 586,
            "return": [
                "Dict[str, Any]",
                "bool",
                "dict"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "gitConfigBool": {
            "name": "gitConfigBool",
            "location": 593,
            "return": [
                "Dict[str, Any]",
                "dict",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "List[str]",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "gitConfigList": {
            "name": "gitConfigList",
            "location": 605,
            "return": [
                "Dict[str, Any]",
                "dict",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "p4BranchesInGit": {
            "name": "p4BranchesInGit",
            "location": 611,
            "return": [
                "Dict[str, str]",
                "int",
                "Iterable[Iterable[T]]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "branchesAreInRemotes": [
                    "str",
                    "int",
                    "Callable",
                    "Coroutine[Any, Any, Any]",
                    "bool"
                ]
            }
        },
        "branch_exists": {
            "name": "branch_exists",
            "location": 643,
            "return": [
                "bool"
            ],
            "arguments": {
                "branch": [
                    "int",
                    "float"
                ]
            }
        },
        "findUpstreamBranchPoint": {
            "name": "findUpstreamBranchPoint",
            "location": 654,
            "return": [
                "str",
                "Tuple[str]",
                "bytes"
            ],
            "arguments": {
                "head": [
                    "str"
                ]
            }
        },
        "createOrUpdateBranchesFromOrigin": {
            "name": "createOrUpdateBranchesFromOrigin",
            "location": 681,
            "return": [],
            "arguments": {
                "localRefPrefix": [
                    "str",
                    "List[str]"
                ],
                "silent": [
                    "bool",
                    "tuple"
                ]
            }
        },
        "originP4BranchesExist": {
            "name": "originP4BranchesExist",
            "location": 728,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "p4ChangesForPaths": {
            "name": "p4ChangesForPaths",
            "location": 731,
            "return": [
                "str",
                "bool",
                "Type[Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "depotPaths": [
                    "Optional[List[str]]",
                    "Optional[str]",
                    "bool"
                ],
                "changeRange": [
                    "bool",
                    "str",
                    "TextIO"
                ]
            }
        },
        "p4PathStartsWith": {
            "name": "p4PathStartsWith",
            "location": 746,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "getClientSpec": {
            "name": "getClientSpec",
            "location": 758,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "getClientRoot": {
            "name": "getClientRoot",
            "location": 788,
            "return": [
                "str",
                "Dict[str, Sequence[Any]]"
            ],
            "arguments": {}
        },
        "wildcard_decode": {
            "name": "wildcard_decode",
            "location": 806,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "wildcard_encode": {
            "name": "wildcard_encode",
            "location": 818,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "wildcard_present": {
            "name": "wildcard_present",
            "location": 826,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "printUsage": {
            "name": "printUsage",
            "location": 3193,
            "return": [],
            "arguments": {
                "commands": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "list",
                    "List[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 3213,
            "return": [],
            "arguments": {}
        },
        "Command.__init__": {
            "name": "__init__",
            "location": 831,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4UserMap.__init__": {
            "name": "__init__",
            "location": 837,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4UserMap.p4UserId": {
            "name": "p4UserId",
            "location": 841,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "P4UserMap.p4UserIsMe": {
            "name": "p4UserIsMe",
            "location": 852,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "p4User": [
                    "dict"
                ]
            }
        },
        "P4UserMap.getUserCacheFilename": {
            "name": "getUserCacheFilename",
            "location": 860,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "P4UserMap.getUserMapFromPerforceServer": {
            "name": "getUserMapFromPerforceServer",
            "location": 864,
            "return": [
                "int",
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "P4UserMap.loadUserMapFromCache": {
            "name": "loadUserMapFromCache",
            "location": 883,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Debug.__init__": {
            "name": "__init__",
            "location": 897,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Debug.run": {
            "name": "run",
            "location": 903,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "P4RollBack.__init__": {
            "name": "__init__",
            "location": 912,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4RollBack.run": {
            "name": "run",
            "location": 920,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "P4Submit.__init__": {
            "name": "__init__",
            "location": 973,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Submit.check": {
            "name": "check",
            "location": 1001,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Submit.separate_jobs_from_description": {
            "name": "separate_jobs_from_description",
            "location": 1005,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "P4Submit.prepareLogMessage": {
            "name": "prepareLogMessage",
            "location": 1029,
            "return": [
                "int",
                "str",
                "Optional[int]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "jobs": [
                    "str",
                    "List[int]",
                    "Iterable[Type]"
                ]
            }
        },
        "P4Submit.patchRCSKeywords": {
            "name": "patchRCSKeywords",
            "location": 1061,
            "return": [],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "FrozenSet[str]"
                ],
                "pattern": [
                    "str",
                    "bytes",
                    "TextIO",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "P4Submit.p4UserForCommit": {
            "name": "p4UserForCommit",
            "location": 1084,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "P4Submit.checkValidP4Users": {
            "name": "checkValidP4Users",
            "location": 1095,
            "return": [],
            "arguments": {
                "self": [],
                "commits": [
                    "Mapping",
                    "float",
                    "bool",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "P4Submit.lastP4Changelist": {
            "name": "lastP4Changelist",
            "location": 1106,
            "return": [
                "bool",
                "List[str]",
                "str",
                "List[Mapping[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "P4Submit.modifyChangelistUser": {
            "name": "modifyChangelistUser",
            "location": 1125,
            "return": [
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "changelist": [
                    "dict",
                    "Optional[str]"
                ],
                "newUser": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "P4Submit.canChangeChangelists": {
            "name": "canChangeChangelists",
            "location": 1147,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "P4Submit.prepareSubmitTemplate": {
            "name": "prepareSubmitTemplate",
            "location": 1159,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "P4Submit.edit_template": {
            "name": "edit_template",
            "location": 1191,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "template_file": [
                    "IO[bytes]"
                ]
            }
        },
        "P4Submit.applyCommit": {
            "name": "applyCommit",
            "location": 1226,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str"
                ]
            }
        },
        "P4Submit.exportGitTags": {
            "name": "exportGitTags",
            "location": 1495,
            "return": [],
            "arguments": {
                "self": [],
                "gitTags": [
                    "list",
                    "Type[Exception]",
                    "Dict[str, Any]",
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "P4Submit.run": {
            "name": "run",
            "location": 1564,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "View.__init__": {
            "name": "__init__",
            "location": 1787,
            "return": [],
            "arguments": {
                "self": [],
                "client_name": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "View.append": {
            "name": "append",
            "location": 1793,
            "return": [],
            "arguments": {
                "self": [],
                "view_line": [
                    "Sequence[str]",
                    "Tuple[str, str]",
                    "os.DirEntry",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "View.convert_client_path": {
            "name": "convert_client_path",
            "location": 1837,
            "return": [
                "Tuple[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "clientFile": [
                    "str",
                    "bytes"
                ]
            }
        },
        "View.update_client_spec_path_cache": {
            "name": "update_client_spec_path_cache",
            "location": 1844,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]",
                "Optional[List[\"DeliveryItem\"]]"
            ],
            "arguments": {
                "self": [],
                "files": []
            }
        },
        "View.map_in_client": {
            "name": "map_in_client",
            "location": 1870,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "depot_path": [
                    "str"
                ]
            }
        },
        "P4Sync.__init__": {
            "name": "__init__",
            "location": 1884,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Sync.checkpoint": {
            "name": "checkpoint",
            "location": 1936,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Sync.extractFilesFromCommit": {
            "name": "extractFilesFromCommit",
            "location": 1943,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "commit": [
                    "str",
                    "Union[str, IO[bytes]]",
                    "bool"
                ]
            }
        },
        "P4Sync.stripRepoPath": {
            "name": "stripRepoPath",
            "location": 1970,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "prefixes": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "P4Sync.splitFilesIntoBranches": {
            "name": "splitFilesIntoBranches",
            "location": 2002,
            "return": [
                "str",
                "List[str]",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "commit": [
                    "bytes",
                    "Union[str, List[str]]",
                    "dict",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "P4Sync.streamOneP4File": {
            "name": "streamOneP4File",
            "location": 2048,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str"
                ],
                "contents": [
                    "Dict[str, str]",
                    "Dict[str, List[str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "P4Sync.streamOneP4Deletion": {
            "name": "streamOneP4Deletion",
            "location": 2118,
            "return": [],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "IO[str]",
                    "AsyncGenerator",
                    "Coroutine"
                ]
            }
        },
        "P4Sync.streamP4FilesCb": {
            "name": "streamP4FilesCb",
            "location": 2125,
            "return": [],
            "arguments": {
                "self": [],
                "marshalled": [
                    "str"
                ]
            }
        },
        "P4Sync.streamP4Files": {
            "name": "streamP4Files",
            "location": 2168,
            "return": [],
            "arguments": {
                "self": [],
                "files": [
                    "Sequence[str]",
                    "IO[str]",
                    "IO[Any]",
                    "List[str]"
                ]
            }
        },
        "P4Sync.make_email": {
            "name": "make_email",
            "location": 2209,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "userid": [
                    "str",
                    "deque",
                    "int",
                    "list"
                ]
            }
        },
        "P4Sync.streamTag": {
            "name": "streamTag",
            "location": 2216,
            "return": [],
            "arguments": {
                "self": [],
                "gitStream": [
                    "str",
                    "int",
                    "Dict[str, bool]",
                    "Set[int]"
                ],
                "labelName": [
                    "str"
                ],
                "labelDetails": [
                    "str"
                ],
                "commit": [
                    "str",
                    "Container[str]"
                ],
                "epoch": [
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "Dict[str, Any]",
                    "Dict[str, bytes]"
                ]
            }
        },
        "P4Sync.commit": {
            "name": "commit",
            "location": 2247,
            "return": [],
            "arguments": {
                "self": [],
                "details": [
                    "bool",
                    "str",
                    "list",
                    "Set[str]",
                    "Iterator[str]"
                ],
                "files": [
                    "str",
                    "\"Pipeline\""
                ],
                "branch": [
                    "str"
                ],
                "parent": [
                    "str",
                    "Optional[str]",
                    "IO[str]"
                ]
            }
        },
        "P4Sync.getLabels": {
            "name": "getLabels",
            "location": 2326,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Sync.importP4Labels": {
            "name": "importP4Labels",
            "location": 2356,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [
                    "Hashable",
                    "Callable"
                ],
                "p4Labels": [
                    "str"
                ]
            }
        },
        "P4Sync.guessProjectName": {
            "name": "guessProjectName",
            "location": 2415,
            "return": [
                "str",
                "Dict[str, Any]",
                "IO",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "P4Sync.getBranchMapping": {
            "name": "getBranchMapping",
            "location": 2424,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Sync.getBranchMappingFromGitBranches": {
            "name": "getBranchMappingFromGitBranches",
            "location": 2484,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Sync.updateOptionDict": {
            "name": "updateOptionDict",
            "location": 2493,
            "return": [],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "Callable[[str], str]"
                ]
            }
        },
        "P4Sync.readOptions": {
            "name": "readOptions",
            "location": 2500,
            "return": [],
            "arguments": {
                "self": [],
                "d": [
                    "dict",
                    "bytes",
                    "str"
                ]
            }
        },
        "P4Sync.gitRefForBranch": {
            "name": "gitRefForBranch",
            "location": 2504,
            "return": [
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "str",
                    "int",
                    "bool",
                    "Union[str, int]"
                ]
            }
        },
        "P4Sync.gitCommitByP4Change": {
            "name": "gitCommitByP4Change",
            "location": 2513,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "Union[dict, list]",
                    "Callable",
                    "Union[str, int]"
                ],
                "change": [
                    "str",
                    "Callable",
                    "int",
                    "Dict[str, float]"
                ]
            }
        },
        "P4Sync.importNewBranch": {
            "name": "importNewBranch",
            "location": 2546,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "str",
                    "bool",
                    "os.DirEntry"
                ],
                "maxChange": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "P4Sync.searchParent": {
            "name": "searchParent",
            "location": 2574,
            "return": [
                "Optional[int]",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str"
                ],
                "branch": [
                    "str",
                    "IO[str]"
                ],
                "target": [
                    "str"
                ]
            }
        },
        "P4Sync.importChanges": {
            "name": "importChanges",
            "location": 2589,
            "return": [],
            "arguments": {
                "self": [],
                "changes": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "P4Sync.importHeadRevision": {
            "name": "importHeadRevision",
            "location": 2671,
            "return": [],
            "arguments": {
                "self": [],
                "revision": [
                    "str",
                    "int"
                ]
            }
        },
        "P4Sync.run": {
            "name": "run",
            "location": 2726,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "P4Rebase.__init__": {
            "name": "__init__",
            "location": 3032,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Rebase.run": {
            "name": "run",
            "location": 3041,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "P4Rebase.rebase": {
            "name": "rebase",
            "location": 3048,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "P4Clone.__init__": {
            "name": "__init__",
            "location": 3068,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Clone.ensure_value": {
            "name": "ensure_value",
            "location": 3087,
            "return": [
                "str",
                "Dict[str, str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "Sequence[MutableMapping]"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "P4Clone.defaultDestination": {
            "name": "defaultDestination",
            "location": 3092,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "P4Clone.run": {
            "name": "run",
            "location": 3101,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "P4Branches.__init__": {
            "name": "__init__",
            "location": 3156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Branches.run": {
            "name": "run",
            "location": 3163,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "HelpFormatter.__init__": {
            "name": "__init__",
            "location": 3184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelpFormatter.format_description": {
            "name": "format_description",
            "location": 3187,
            "return": [
                "str",
                "float",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "description": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "CalledProcessError.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "returncode": [
                    "int",
                    "bool",
                    "float"
                ],
                "cmd": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "CalledProcessError.__str__": {
            "name": "__str__",
            "location": 47,
            "return": [
                "int",
                "dict",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "P4Sync.streamP4Files.streamP4FilesCbSelf": {
            "name": "streamP4FilesCbSelf",
            "location": 2196,
            "return": [],
            "arguments": {
                "entry": [
                    "str"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip/integrations/perforce/zulip_change-commit.py": {},
    "python-zulip-api-master-master/zulip/integrations/perforce/zulip_perforce_config.py": {
        "commit_notice_destination": {
            "name": "commit_notice_destination",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "changelist": []
            }
        }
    },
    "python-zulip-api-master-master/zulip/integrations/slack/slackdata2zulipdata.py": {
        "rm_tree": {
            "name": "rm_tree",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "users2zerver_userprofile": {
            "name": "users2zerver_userprofile",
            "location": 22,
            "return": [
                "Tuple[Union[list,dict[,int]]]",
                "str",
                "Dict[str,Any]",
                "Dict",
                "int"
            ],
            "arguments": {
                "slack_dir": [
                    "str",
                    "int"
                ],
                "realm_id": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "timestamp": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "domain_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "channels2zerver_stream": {
            "name": "channels2zerver_stream",
            "location": 134,
            "return": [
                "dict"
            ],
            "arguments": {
                "slack_dir": [
                    "str"
                ],
                "realm_id": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "added_users": [
                    "Optional[Dict[int,int]]",
                    "str",
                    "Dict[int,int]",
                    "None",
                    "Collection[Any]",
                    "Collection"
                ],
                "zerver_userprofile": [
                    "str",
                    "List[dict[str,Any]]",
                    "bool",
                    "Optional[str]",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "slack_zip_file": [
                    "str",
                    "Optional[str]",
                    "IO[Any]"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip/integrations/slack/zulip_slack.py": {
        "_generate_random_password": {
            "name": "_generate_random_password",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "size": [
                    "int",
                    "float",
                    "List[int]",
                    "bytes"
                ]
            }
        },
        "get_and_add_users": {
            "name": "get_and_add_users",
            "location": 85,
            "return": [
                "Dict",
                "bool",
                "Dict[str,str]",
                "Optional[Dict]",
                "str"
            ],
            "arguments": {
                "slack_importer": [
                    "int",
                    "float"
                ]
            }
        },
        "create_streams_and_add_subscribers": {
            "name": "create_streams_and_add_subscribers",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "slack_importer": [
                    "str",
                    "int",
                    "Optional[bool]",
                    "Iterable[str]"
                ],
                "added_users": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FromSlackImporter.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "slack_token": [
                    "int",
                    "List[str]"
                ],
                "get_archived_channels": [
                    "int",
                    "bool"
                ]
            }
        },
        "FromSlackImporter.get_slack_users_email": {
            "name": "get_slack_users_email",
            "location": 34,
            "return": [
                "Dict[,dict[Text,]]",
                "Optional[str]",
                "bool",
                "Dict",
                "Dict[str,Type[Any]]",
                "Dict[str,Dict[str,Any]]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromSlackImporter.get_slack_public_channels_names": {
            "name": "get_slack_public_channels_names",
            "location": 45,
            "return": [
                "Dict[str,Any]",
                "List[dict[Text,]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromSlackImporter.get_slack_private_channels_names": {
            "name": "get_slack_private_channels_names",
            "location": 52,
            "return": [
                "List",
                "List[str]",
                "Set[str]",
                "Dict[str,Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromSlackImporter._check_slack_token": {
            "name": "_check_slack_token",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromSlackImporter._check_if_response_is_successful": {
            "name": "_check_if_response_is_successful",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Dict[str,Any]",
                    "requests.Response"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip/integrations/slack/zulip_slack_config.py": {},
    "python-zulip-api-master-master/zulip/integrations/svn/zulip_svn_config.py": {
        "commit_notice_destination": {
            "name": "commit_notice_destination",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "commit": []
            }
        }
    },
    "python-zulip-api-master-master/zulip/integrations/trac/zulip_trac.py": {
        "markdown_ticket_url": {
            "name": "markdown_ticket_url",
            "location": 58,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "ticket": [],
                "heading": [
                    "typing.Text"
                ]
            }
        },
        "markdown_block": {
            "name": "markdown_block",
            "location": 62,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "desc": []
            }
        },
        "truncate": {
            "name": "truncate",
            "location": 66,
            "return": [],
            "arguments": {
                "string": [],
                "length": []
            }
        },
        "trac_subject": {
            "name": "trac_subject",
            "location": 72,
            "return": [],
            "arguments": {
                "ticket": []
            }
        },
        "send_update": {
            "name": "send_update",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "ticket": [],
                "content": []
            }
        },
        "ZulipPlugin.ticket_created": {
            "name": "ticket_created",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ticket": []
            }
        },
        "ZulipPlugin.ticket_changed": {
            "name": "ticket_changed",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ticket": [],
                "comment": [],
                "author": [],
                "old_values": []
            }
        },
        "ZulipPlugin.ticket_deleted": {
            "name": "ticket_deleted",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ticket": []
            }
        }
    },
    "python-zulip-api-master-master/zulip/integrations/trac/zulip_trac_config.py": {},
    "python-zulip-api-master-master/zulip/integrations/zephyr/zephyr_mirror.py": {
        "die": {
            "name": "die",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "signal": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "run_job": {
            "name": "run_job",
            "location": 66,
            "return": [
                "int",
                "str",
                "bool",
                "List"
            ],
            "arguments": {
                "shard": [
                    "str",
                    "Tuple",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip/integrations/zephyr/zephyr_mirror_backend.py": {
        "to_zulip_username": {
            "name": "to_zulip_username",
            "location": 53,
            "return": [
                "str",
                "Mapping",
                "bool"
            ],
            "arguments": {
                "zephyr_username": [
                    "str"
                ]
            }
        },
        "to_zephyr_username": {
            "name": "to_zephyr_username",
            "location": 66,
            "return": [
                "str",
                "bool",
                "Dict[int,dict]",
                "datetime.date",
                "Dict[str,Any]",
                "int"
            ],
            "arguments": {
                "zulip_username": [
                    "str"
                ]
            }
        },
        "different_paragraph": {
            "name": "different_paragraph",
            "location": 89,
            "return": [
                "bool",
                "int",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "next_line": [
                    "str"
                ]
            }
        },
        "unwrap_lines": {
            "name": "unwrap_lines",
            "location": 98,
            "return": [
                "Text",
                "str",
                "Match",
                "bool",
                "int",
                "List[Dict[str,str]]",
                "List",
                "Type"
            ],
            "arguments": {
                "body": [
                    "bytes",
                    "str",
                    "T",
                    "Dict"
                ]
            }
        },
        "send_zulip": {
            "name": "send_zulip",
            "location": 122,
            "return": [
                "bool",
                "Dict[Text,Text]"
            ],
            "arguments": {
                "zeph": []
            }
        },
        "send_error_zulip": {
            "name": "send_error_zulip",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "error_msg": [
                    "Dict[str,int]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "zephyr_bulk_subscribe": {
            "name": "zephyr_bulk_subscribe",
            "location": 165,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "subs": [
                    "str",
                    "Dict"
                ]
            }
        },
        "update_subscriptions": {
            "name": "update_subscriptions",
            "location": 201,
            "return": [
                "None",
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {}
        },
        "maybe_kill_child": {
            "name": "maybe_kill_child",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "maybe_restart_mirroring_script": {
            "name": "maybe_restart_mirroring_script",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "process_loop": {
            "name": "process_loop",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "log": [
                    "Optional[Dict]",
                    "Dict",
                    "int",
                    "Dict[str,Any]",
                    "Callable",
                    "None"
                ]
            }
        },
        "parse_zephyr_body": {
            "name": "parse_zephyr_body",
            "location": 294,
            "return": [
                "Tuple[Text]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "zephyr_data": [
                    "str"
                ],
                "notice_format": [
                    "str",
                    "List[int]",
                    "bool",
                    "Dict"
                ]
            }
        },
        "parse_crypt_table": {
            "name": "parse_crypt_table",
            "location": 311,
            "return": [
                "None",
                "Optional[str]",
                "bool",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "zephyr_class": [
                    "List[dict[str,Any]]",
                    "Type",
                    "List[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Type[T]"
                ],
                "instance": [
                    "Type",
                    "Callable"
                ]
            }
        },
        "decrypt_zephyr": {
            "name": "decrypt_zephyr",
            "location": 333,
            "return": [
                "str",
                "Dict[str,str]",
                "bool",
                "MutableMapping[str,Any]",
                "float",
                "int",
                "List",
                "Optional[float]",
                "Dict"
            ],
            "arguments": {
                "zephyr_class": [
                    "Type",
                    "Callable",
                    "types.FunctionType",
                    "types.MethodType"
                ],
                "instance": [
                    "Type",
                    "Callable",
                    "types.FunctionType",
                    "types.MethodType"
                ],
                "body": [
                    "str",
                    "bool",
                    "float",
                    "List",
                    "Dict",
                    "int"
                ]
            }
        },
        "process_notice": {
            "name": "process_notice",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "notice": [
                    "str",
                    "datetime.datetime",
                    "Dict[str,Any]",
                    "bool",
                    "Dict"
                ],
                "log": [
                    "logging.Logger",
                    "Dict[str, Any]",
                    "Union[int, str]",
                    "str"
                ]
            }
        },
        "decode_unicode_byte_strings": {
            "name": "decode_unicode_byte_strings",
            "location": 463,
            "return": [
                "str",
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "zeph": [
                    "str"
                ]
            }
        },
        "quit_failed_initialization": {
            "name": "quit_failed_initialization",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "logging.Logger"
                ]
            }
        },
        "zephyr_init_autoretry": {
            "name": "zephyr_init_autoretry",
            "location": 481,
            "return": [
                "None",
                "Dict[str,Dict[str,int]]",
                "str",
                "Dict[str,Any]",
                "Union[tuple,list]",
                "Sequence[str]"
            ],
            "arguments": {}
        },
        "zephyr_load_session_autoretry": {
            "name": "zephyr_load_session_autoretry",
            "location": 497,
            "return": [
                "None",
                "int",
                "Set[str]",
                "DefaultDict",
                "str",
                "Set[VT]"
            ],
            "arguments": {
                "session_path": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "zephyr_subscribe_autoretry": {
            "name": "zephyr_subscribe_autoretry",
            "location": 513,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "sub": [
                    "str",
                    "int",
                    "VT"
                ]
            }
        },
        "zephyr_to_zulip": {
            "name": "zephyr_to_zulip",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "options": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "send_zephyr": {
            "name": "send_zephyr",
            "location": 581,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "zwrite_args": [
                    "str",
                    "List[str]"
                ],
                "content": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "send_authed_zephyr": {
            "name": "send_authed_zephyr",
            "location": 598,
            "return": [
                "str",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "zwrite_args": [
                    "Dict",
                    "bool",
                    "Optional[str]",
                    "Callable",
                    "str",
                    "None"
                ],
                "content": [
                    "Dict",
                    "bool",
                    "Optional[str]",
                    "Callable",
                    "str",
                    "None"
                ]
            }
        },
        "send_unauthed_zephyr": {
            "name": "send_unauthed_zephyr",
            "location": 602,
            "return": [
                "int",
                "Iterable[str]",
                "dict"
            ],
            "arguments": {
                "zwrite_args": [
                    "dict",
                    "Optional[str]",
                    "bool",
                    "Callable"
                ],
                "content": [
                    "Dict",
                    "bool",
                    "Optional[str]",
                    "Callable",
                    "str",
                    "None"
                ]
            }
        },
        "zcrypt_encrypt_content": {
            "name": "zcrypt_encrypt_content",
            "location": 606,
            "return": [
                "None",
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]",
                "bool",
                "str"
            ],
            "arguments": {
                "zephyr_class": [
                    "str",
                    "Set[str]",
                    "Dict[str,Any]",
                    "bool",
                    "List[str]"
                ],
                "instance": [
                    "str",
                    "Set[str]",
                    "Dict[str,Any]",
                    "bool",
                    "List[str]"
                ],
                "content": [
                    "str",
                    "bool"
                ]
            }
        },
        "forward_to_zephyr": {
            "name": "forward_to_zephyr",
            "location": 632,
            "return": [
                "Dict[str,Any]",
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "Union[str, dict]",
                    "logging.LogRecord"
                ]
            }
        },
        "maybe_forward_to_zephyr": {
            "name": "maybe_forward_to_zephyr",
            "location": 761,
            "return": [
                "None",
                "mypy.types.Type",
                "Iterator[Dict[str,str]]",
                "Iterator"
            ],
            "arguments": {
                "message": [
                    "str",
                    "bool"
                ]
            }
        },
        "zulip_to_zephyr": {
            "name": "zulip_to_zephyr",
            "location": 784,
            "return": [
                "None"
            ],
            "arguments": {
                "options": [
                    "bool",
                    "str"
                ]
            }
        },
        "subscribed_to_mail_messages": {
            "name": "subscribed_to_mail_messages",
            "location": 795,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "add_zulip_subscriptions": {
            "name": "add_zulip_subscriptions",
            "location": 810,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "bool",
                    "bytes",
                    "Exception",
                    "int",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "valid_stream_name": {
            "name": "valid_stream_name",
            "location": 897,
            "return": [
                "bool",
                "str",
                "Type",
                "Optional[List[str]]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "parse_zephyr_subs": {
            "name": "parse_zephyr_subs",
            "location": 901,
            "return": [
                "Set",
                "int",
                "Set[tuple]",
                "Callable",
                "str"
            ],
            "arguments": {
                "verbose": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "open_logger": {
            "name": "open_logger",
            "location": 930,
            "return": [
                "str",
                "int",
                "bool",
                "apistar.types.RouteConfig"
            ],
            "arguments": {}
        },
        "configure_logger": {
            "name": "configure_logger",
            "location": 956,
            "return": [
                "None"
            ],
            "arguments": {
                "logger": [
                    "str",
                    "Dict",
                    "int",
                    "Union[int,str]",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "Optional[str]",
                    "Set[str]",
                    "Optional[dict]",
                    "Optional[Set[str]]"
                ],
                "direction_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 971,
            "return": [],
            "arguments": {}
        },
        "die_gracefully": {
            "name": "die_gracefully",
            "location": 1055,
            "return": [
                "None"
            ],
            "arguments": {
                "signal": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip/tests/test_default_arguments.py": {
        "TestDefaultArguments.test_invalid_arguments": {
            "name": "test_invalid_arguments",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultArguments.test_config_path_with_tilde": {
            "name": "test_config_path_with_tilde",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_os_path_exists": [
                    "str",
                    "List[str]",
                    "Union[Dict[str,Any],List[Any]]",
                    "Dict[str,Any]",
                    "List[Any]"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip/tests/__init__.py": {},
    "python-zulip-api-master-master/zulip/zulip/api_examples.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-zulip-api-master-master/zulip/zulip/send.py": {
        "do_send_message": {
            "name": "do_send_message",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "client": [],
                "message_data": []
            }
        },
        "main": {
            "name": "main",
            "location": 54,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "python-zulip-api-master-master/zulip/zulip/__init__.py": {
        "_default_client": {
            "name": "_default_client",
            "location": 104,
            "return": [],
            "arguments": {}
        },
        "add_default_arguments": {
            "name": "add_default_arguments",
            "location": 108,
            "return": [],
            "arguments": {
                "parser": [],
                "patch_error_handling": [],
                "allow_provisioning": []
            }
        },
        "generate_option_group": {
            "name": "generate_option_group",
            "location": 178,
            "return": [],
            "arguments": {
                "parser": [],
                "prefix": []
            }
        },
        "init_from_options": {
            "name": "init_from_options",
            "location": 233,
            "return": [],
            "arguments": {
                "options": [],
                "client": []
            }
        },
        "get_default_config_filename": {
            "name": "get_default_config_filename",
            "location": 262,
            "return": [],
            "arguments": {}
        },
        "CountingBackoff.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "maximum_retries": [],
                "timeout_success_equivalent": []
            }
        },
        "CountingBackoff.keep_going": {
            "name": "keep_going",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CountingBackoff.succeed": {
            "name": "succeed",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CountingBackoff.fail": {
            "name": "fail",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CountingBackoff._check_success_timeout": {
            "name": "_check_success_timeout",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RandomExponentialBackoff.fail": {
            "name": "fail",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 278,
            "return": [],
            "arguments": {
                "self": [],
                "email": [],
                "api_key": [],
                "config_file": [],
                "verbose": [],
                "retry_on_errors": [],
                "site": [],
                "client": [],
                "cert_bundle": [],
                "insecure": [],
                "client_cert": [],
                "client_cert_key": []
            }
        },
        "Client.ensure_session": {
            "name": "ensure_session",
            "location": 390,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.get_user_agent": {
            "name": "get_user_agent",
            "location": 412,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.do_api_query": {
            "name": "do_api_query",
            "location": 437,
            "return": [],
            "arguments": {
                "self": [],
                "orig_request": [],
                "url": [],
                "method": [],
                "longpolling": [],
                "files": []
            }
        },
        "Client.call_endpoint": {
            "name": "call_endpoint",
            "location": 570,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "method": [],
                "request": [],
                "longpolling": [],
                "files": []
            }
        },
        "Client.call_on_each_event": {
            "name": "call_on_each_event",
            "location": 577,
            "return": [],
            "arguments": {
                "self": [],
                "callback": [],
                "event_types": [],
                "narrow": []
            }
        },
        "Client.call_on_each_message": {
            "name": "call_on_each_message",
            "location": 637,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Client.send_message": {
            "name": "send_message",
            "location": 645,
            "return": [],
            "arguments": {
                "self": [],
                "message_data": []
            }
        },
        "Client.upload_file": {
            "name": "upload_file",
            "location": 655,
            "return": [],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "Client.update_message": {
            "name": "update_message",
            "location": 665,
            "return": [],
            "arguments": {
                "self": [],
                "message_data": []
            }
        },
        "Client.get_events": {
            "name": "get_events",
            "location": 676,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.register": {
            "name": "register",
            "location": 688,
            "return": [],
            "arguments": {
                "self": [],
                "event_types": [],
                "narrow": []
            }
        },
        "Client.deregister": {
            "name": "deregister",
            "location": 716,
            "return": [],
            "arguments": {
                "self": [],
                "queue_id": []
            }
        },
        "Client.get_profile": {
            "name": "get_profile",
            "location": 734,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Client.get_presence": {
            "name": "get_presence",
            "location": 748,
            "return": [],
            "arguments": {
                "self": [],
                "email": []
            }
        },
        "Client.get_streams": {
            "name": "get_streams",
            "location": 761,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.get_members": {
            "name": "get_members",
            "location": 772,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Client.list_subscriptions": {
            "name": "list_subscriptions",
            "location": 783,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Client.add_subscriptions": {
            "name": "add_subscriptions",
            "location": 794,
            "return": [],
            "arguments": {
                "self": [],
                "streams": []
            }
        },
        "Client.remove_subscriptions": {
            "name": "remove_subscriptions",
            "location": 809,
            "return": [],
            "arguments": {
                "self": [],
                "streams": []
            }
        },
        "Client.get_stream_id": {
            "name": "get_stream_id",
            "location": 821,
            "return": [],
            "arguments": {
                "self": [],
                "stream": []
            }
        },
        "Client.get_subscribers": {
            "name": "get_subscribers",
            "location": 834,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.render_message": {
            "name": "render_message",
            "location": 851,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Client.create_user": {
            "name": "create_user",
            "location": 865,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Client.update_storage": {
            "name": "update_storage",
            "location": 876,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Client.get_storage": {
            "name": "get_storage",
            "location": 891,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ZulipStream.__init__": {
            "name": "__init__",
            "location": 913,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "to": [],
                "subject": []
            }
        },
        "ZulipStream.write": {
            "name": "write",
            "location": 920,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "ZulipStream.flush": {
            "name": "flush",
            "location": 928,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "add_default_arguments.custom_error_handling": {
            "name": "custom_error_handling",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Client.do_api_query.error_retry": {
            "name": "error_retry",
            "location": 471,
            "return": [],
            "arguments": {
                "error_string": []
            }
        },
        "Client.do_api_query.end_error_retry": {
            "name": "end_error_retry",
            "location": 488,
            "return": [],
            "arguments": {
                "succeeded": []
            }
        },
        "Client.call_on_each_event.do_register": {
            "name": "do_register",
            "location": 582,
            "return": [],
            "arguments": {}
        },
        "Client.call_on_each_message.event_callback": {
            "name": "event_callback",
            "location": 639,
            "return": [],
            "arguments": {
                "event": []
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/generate_manifest.py": {
        "get_test_fixtures": {
            "name": "get_test_fixtures",
            "location": 48,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "get_logos": {
            "name": "get_logos",
            "location": 57,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "get_docs": {
            "name": "get_docs",
            "location": 66,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "get_assets": {
            "name": "get_assets",
            "location": 75,
            "return": [
                "str",
                "Iterable[str]",
                "list"
            ],
            "arguments": {}
        },
        "generate_and_write": {
            "name": "generate_and_write",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "filepaths": [
                    "int",
                    "str",
                    "IO",
                    "List[int]",
                    "Union[int,float]",
                    "float"
                ],
                "file_obj": [
                    "str"
                ]
            }
        },
        "generate_dev_manifest": {
            "name": "generate_dev_manifest",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "generate_release_manifest": {
            "name": "generate_release_manifest",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "parse_args": {
            "name": "parse_args",
            "location": 106,
            "return": [
                "argparse.Namespace",
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "GenerateManifest.initialize_options": {
            "name": "initialize_options",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenerateManifest.finalize_options": {
            "name": "finalize_options",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenerateManifest.run": {
            "name": "run",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/setup.py": {
        "check_dependency_manually": {
            "name": "check_dependency_manually",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "module_name": [
                    "str",
                    "tartare.core.models.PlatformOptions"
                ],
                "version": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/lib.py": {
        "exit_gracefully": {
            "name": "exit_gracefully",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "signum": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "get_bots_directory_path": {
            "name": "get_bots_directory_path",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "extract_query_without_mention": {
            "name": "extract_query_without_mention",
            "location": 213,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "message": [
                    "str",
                    "Optional[str]"
                ],
                "client": [
                    "google.cloud.storage.Client"
                ]
            }
        },
        "is_private_message_from_another_user": {
            "name": "is_private_message_from_another_user",
            "location": 224,
            "return": [
                "bool",
                "Dict",
                "Optional[str]"
            ],
            "arguments": {
                "message_dict": [
                    "str",
                    "Tuple[Union[Any,str]]",
                    "int",
                    "Dict[str,Any]",
                    "core.types.FBUserID",
                    "Tuple[Any,str]"
                ],
                "current_user_id": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "core.types.FBUserID",
                    "Tuple[Union[Any,str]]",
                    "Tuple[Any,str]"
                ]
            }
        },
        "display_config_file_errors": {
            "name": "display_config_file_errors",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "error_msg": [
                    "str",
                    "int",
                    "Callable[...,None]",
                    "List[str]"
                ],
                "config_file": [
                    "str"
                ]
            }
        },
        "run_message_handler_for_bot": {
            "name": "run_message_handler_for_bot",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "lib_module": [
                    "str",
                    "bool"
                ],
                "quiet": [
                    "str",
                    "bool"
                ],
                "config_file": [
                    "str",
                    "bool"
                ],
                "bot_config_file": [
                    "str",
                    "bool"
                ],
                "bot_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "RateLimit.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_limit": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ],
                "interval_limit": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "RateLimit.is_legal": {
            "name": "is_legal",
            "location": 43,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RateLimit.show_error_and_exit": {
            "name": "show_error_and_exit",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateHandler.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "float",
                    "discord.Client"
                ]
            }
        },
        "StateHandler.put": {
            "name": "put",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "value": [
                    "str",
                    "bytes",
                    "Hashable"
                ]
            }
        },
        "StateHandler.get": {
            "name": "get",
            "location": 80,
            "return": [
                "int",
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable"
                ]
            }
        },
        "StateHandler.contains": {
            "name": "contains",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "ExternalBotHandler.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "bool"
                ],
                "root_dir": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]",
                    "None",
                    "IO[Any]",
                    "IO"
                ],
                "bot_details": [
                    "int",
                    "str",
                    "List[dict]",
                    "bool",
                    "List[Dict]"
                ],
                "bot_config_file": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "ExternalBotHandler.storage": {
            "name": "storage",
            "location": 126,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExternalBotHandler.send_message": {
            "name": "send_message",
            "location": 130,
            "return": [
                "bool",
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ExternalBotHandler.send_reply": {
            "name": "send_reply",
            "location": 137,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "List[str]",
                    "Dict",
                    "Optional[Dict]",
                    "Optional[List[str]]",
                    "Dict[str,Any]"
                ],
                "response": [
                    "Dict",
                    "Optional[Dict]",
                    "Dict[str,Any]",
                    "None",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "ExternalBotHandler.update_message": {
            "name": "update_message",
            "location": 153,
            "return": [
                "str",
                "Callable",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "ExternalBotHandler.get_config_info": {
            "name": "get_config_info",
            "location": 160,
            "return": [
                "Dict",
                "str",
                "Dict[str,Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "bot_name": [
                    "str"
                ],
                "optional": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "ExternalBotHandler.open": {
            "name": "open",
            "location": 203,
            "return": [
                "IO",
                "List[str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "run_message_handler_for_bot.handle_message": {
            "name": "handle_message",
            "location": 280,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "message": [
                    "dict",
                    "bytes"
                ],
                "flags": [
                    "int",
                    "str",
                    "Type[T]"
                ]
            }
        },
        "run_message_handler_for_bot.event_callback": {
            "name": "event_callback",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/lib_tests.py": {
        "FakeClient.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeClient.get_profile": {
            "name": "get_profile",
            "location": 12,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeClient.update_storage": {
            "name": "update_storage",
            "location": 19,
            "return": [
                "int",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "List[Callable]",
                    "int"
                ]
            }
        },
        "FakeClient.get_storage": {
            "name": "get_storage",
            "location": 27,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeClient.send_message": {
            "name": "send_message",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "LibTest.test_basics": {
            "name": "test_basics",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibTest.test_state_handler": {
            "name": "test_state_handler",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibTest.test_send_reply": {
            "name": "test_send_reply",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/provision.py": {
        "provision_bot": {
            "name": "provision_bot",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "path_to_bot": [
                    "str"
                ],
                "force": [
                    "bool",
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 38,
            "return": [
                "argparse.Namespace",
                "argparse.ArgumentParser"
            ],
            "arguments": {
                "available_bots": [
                    "str",
                    "Dict[str,str]",
                    "Type[ExtractableWordnet]",
                    "Type"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/request_test_lib.py": {
        "mock_http_conversation": {
            "name": "mock_http_conversation",
            "location": 10,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "http_data": [
                    "Dict",
                    "requests.Session",
                    "requests.models.Response",
                    "str"
                ]
            }
        },
        "mock_request_exception": {
            "name": "mock_request_exception",
            "location": 71,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "mock_http_conversation.get_response": {
            "name": "get_response",
            "location": 21,
            "return": [
                "Mapping[str, Any]",
                "str"
            ],
            "arguments": {
                "http_response": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ],
                "http_headers": [
                    "int",
                    "Dict[int, int]",
                    "Tuple[int, int]",
                    "dict",
                    "requests.Response",
                    "str"
                ]
            }
        },
        "mock_http_conversation.assert_called_with_fields": {
            "name": "assert_called_with_fields",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_result": [
                    "str"
                ],
                "http_request": [
                    "str",
                    "Dict[str, str]",
                    "dict"
                ],
                "fields": [
                    "list",
                    "Iterable[str]",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "mock_request_exception.assert_mock_called": {
            "name": "assert_mock_called",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_result": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/run.py": {
        "import_module_from_source": {
            "name": "import_module_from_source",
            "location": 25,
            "return": [
                "Optional[str]",
                "str",
                "List",
                "Dict[str,Any]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "BinaryIO"
                ],
                "name": [
                    "str",
                    "BinaryIO",
                    "None"
                ]
            }
        },
        "name_and_path_match": {
            "name": "name_and_path_match",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "given_name": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "path_to_bot": [
                    "str"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 51,
            "return": [
                "List[str]",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "Callable[[None], None]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {}
        },
        "exit_gracefully_if_zulip_config_file_does_not_exist": {
            "name": "exit_gracefully_if_zulip_config_file_does_not_exist",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "config_file": [
                    "str"
                ]
            }
        },
        "exit_gracefully_if_bot_config_file_does_not_exist": {
            "name": "exit_gracefully_if_bot_config_file_does_not_exist",
            "location": 100,
            "return": [
                "None",
                "mypy.types.Type",
                "Iterator[Dict[str,str]]"
            ],
            "arguments": {
                "bot_config_file": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/simple_lib.py": {
        "SimpleStorage.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleStorage.contains": {
            "name": "contains",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Callable[[T],bool]",
                    "Callable[T,bool]"
                ]
            }
        },
        "SimpleStorage.put": {
            "name": "put",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "SimpleStorage.get": {
            "name": "get",
            "location": 14,
            "return": [
                "str",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str"
                ]
            }
        },
        "SimpleMessageServer.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleMessageServer.send": {
            "name": "send",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "Optional[Callable]",
                    "str",
                    "Callable",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "SimpleMessageServer.update": {
            "name": "update",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "TerminalBotHandler.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_config_file": [
                    "Optional[str]",
                    "Set[str]",
                    "str",
                    "None"
                ]
            }
        },
        "TerminalBotHandler.send_message": {
            "name": "send_message",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str,int]"
                ]
            }
        },
        "TerminalBotHandler.send_reply": {
            "name": "send_reply",
            "location": 52,
            "return": [
                "Dict[str, str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "List[str]",
                    "float"
                ],
                "response": [
                    "str",
                    "Dict[str,str]",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TerminalBotHandler.update_message": {
            "name": "update_message",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "TerminalBotHandler.get_config_info": {
            "name": "get_config_info",
            "location": 66,
            "return": [
                "Dict",
                "str",
                "Dict[str,Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "bot_name": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "optional": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/terminal.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 11,
            "return": [
                "List[str]",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "Callable[[None], None]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/test_file_utils.py": {
        "get_bot_message_handler": {
            "name": "get_bot_message_handler",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "bot_name": [
                    "str"
                ]
            }
        },
        "read_bot_fixture_data": {
            "name": "read_bot_fixture_data",
            "location": 27,
            "return": [
                "Dict[str, List[int]]",
                "Optional[float]",
                "IO[bytes]",
                "bool",
                "dict",
                "Optional[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "bot_name": [
                    "str"
                ],
                "test_name": [
                    "str"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/test_lib.py": {
        "StubBotHandler.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubBotHandler.reset_transcript": {
            "name": "reset_transcript",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubBotHandler.send_message": {
            "name": "send_message",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Dict",
                    "List",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "StubBotHandler.send_reply": {
            "name": "send_reply",
            "location": 36,
            "return": [
                "Dict[str, str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "List[str]",
                    "float"
                ],
                "response": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "StubBotHandler.update_message": {
            "name": "update_message",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "StubBotHandler.get_config_info": {
            "name": "get_config_info",
            "location": 48,
            "return": [
                "None",
                "Optional[str]",
                "Optional[List[Any]]",
                "Optional[Dict[str,Any]]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "bot_name": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "None"
                ],
                "optional": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "StubBotHandler.unique_reply": {
            "name": "unique_reply",
            "location": 52,
            "return": [
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubBotHandler.unique_response": {
            "name": "unique_response",
            "location": 63,
            "return": [
                "str",
                "dict",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubBotHandler.ensure_unique_response": {
            "name": "ensure_unique_response",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "responses": [
                    "List[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "BotTestCase._get_handlers": {
            "name": "_get_handlers",
            "location": 83,
            "return": [
                "Tuple[StubBotHandler]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotTestCase.get_response": {
            "name": "get_response",
            "location": 93,
            "return": [
                "dict",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Dict"
                ]
            }
        },
        "BotTestCase.make_request_message": {
            "name": "make_request_message",
            "location": 100,
            "return": [
                "Dict[str,Any]",
                "str",
                "Dict",
                "List[str]",
                "List[Dict]",
                "int",
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "Dict",
                    "Type[Declared]",
                    "Type",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "BotTestCase.verify_reply": {
            "name": "verify_reply",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "response": [
                    "str",
                    "Dict[str,Any]",
                    "Iterable"
                ]
            }
        },
        "BotTestCase.verify_dialog": {
            "name": "verify_dialog",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conversation": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "BotTestCase.test_bot_usage": {
            "name": "test_bot_usage",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotTestCase.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotTestCase.mock_http_conversation": {
            "name": "mock_http_conversation",
            "location": 152,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "test_name": [
                    "str",
                    "Tuple[str]",
                    "Dict[str,str]",
                    "Union[str,List[str]]",
                    "List[str]"
                ]
            }
        },
        "BotTestCase.mock_config_info": {
            "name": "mock_config_info",
            "location": 158,
            "return": [
                "str",
                "List[str]",
                "int",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "config_info": [
                    "Dict[str,str]",
                    "str",
                    "Dict[str,Any]",
                    "mock.Mock"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/test_run.py": {
        "TestDefaultArguments.test_argument_parsing_with_bot_name": {
            "name": "test_argument_parsing_with_bot_name",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_run_message_handler_for_bot": []
            }
        },
        "TestDefaultArguments.test_argument_parsing_with_bot_path": {
            "name": "test_argument_parsing_with_bot_path",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_run_message_handler_for_bot": []
            }
        },
        "TestBotLib.test_extract_query_without_mention": {
            "name": "test_extract_query_without_mention",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBotLib.test_extract_query_without_mention.test_message": {
            "name": "test_message",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict"
                ],
                "message": [
                    "str",
                    "Union[Literal, str]"
                ],
                "expected_return": [
                    "str",
                    "list"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/__init__.py": {},
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/__init__.py": {},
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/chess/chess.py": {
        "calculate_computer_move": {
            "name": "calculate_computer_move",
            "location": 472,
            "return": [],
            "arguments": {
                "board": [],
                "engine": []
            }
        },
        "make_draw_response": {
            "name": "make_draw_response",
            "location": 485,
            "return": [
                "str"
            ],
            "arguments": {
                "reason": []
            }
        },
        "make_loss_response": {
            "name": "make_loss_response",
            "location": 496,
            "return": [
                "str"
            ],
            "arguments": {
                "board": [],
                "reason": []
            }
        },
        "make_not_legal_response": {
            "name": "make_not_legal_response",
            "location": 516,
            "return": [
                "str"
            ],
            "arguments": {
                "board": [],
                "move_san": []
            }
        },
        "make_copied_wrong_response": {
            "name": "make_copied_wrong_response",
            "location": 536,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "make_start_reponse": {
            "name": "make_start_reponse",
            "location": 546,
            "return": [
                "str"
            ],
            "arguments": {
                "board": []
            }
        },
        "make_start_computer_reponse": {
            "name": "make_start_computer_reponse",
            "location": 569,
            "return": [
                "str"
            ],
            "arguments": {
                "board": []
            }
        },
        "make_move_reponse": {
            "name": "make_move_reponse",
            "location": 593,
            "return": [
                "str"
            ],
            "arguments": {
                "last_board": [],
                "new_board": [],
                "move": []
            }
        },
        "make_footer": {
            "name": "make_footer",
            "location": 626,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "make_str": {
            "name": "make_str",
            "location": 637,
            "return": [
                "str"
            ],
            "arguments": {
                "board": [],
                "is_white_on_bottom": []
            }
        },
        "guide_with_numbers": {
            "name": "guide_with_numbers",
            "location": 662,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "board_str": []
            }
        },
        "replace_with_unicode": {
            "name": "replace_with_unicode",
            "location": 708,
            "return": [],
            "arguments": {
                "board_str": []
            }
        },
        "trim_whitespace_before_newline": {
            "name": "trim_whitespace_before_newline",
            "location": 737,
            "return": [],
            "arguments": {
                "str_to_trim": []
            }
        },
        "ChessHandler.usage": {
            "name": "usage",
            "location": 15,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChessHandler.initialize": {
            "name": "initialize",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "ChessHandler.handle_message": {
            "name": "handle_message",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        },
        "ChessHandler.start": {
            "name": "start",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        },
        "ChessHandler.start_computer": {
            "name": "start_computer",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": [],
                "is_white_user": []
            }
        },
        "ChessHandler.validate_board": {
            "name": "validate_board",
            "location": 151,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": [],
                "fen": []
            }
        },
        "ChessHandler.validate_move": {
            "name": "validate_move",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": [],
                "last_board": [],
                "move_san": [],
                "is_computer": []
            }
        },
        "ChessHandler.check_game_over": {
            "name": "check_game_over",
            "location": 223,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": [],
                "new_board": []
            }
        },
        "ChessHandler.move": {
            "name": "move",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": [],
                "last_fen": [],
                "move_san": []
            }
        },
        "ChessHandler.move_computer": {
            "name": "move_computer",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": [],
                "last_fen": [],
                "move_san": []
            }
        },
        "ChessHandler.move_computer_first": {
            "name": "move_computer_first",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": [],
                "last_fen": []
            }
        },
        "ChessHandler.resign": {
            "name": "resign",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": [],
                "last_fen": []
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/chess/test_chess.py": {
        "TestChessBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChessBot.test_main": {
            "name": "test_main",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/chess/__init__.py": {},
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/converter/converter.py": {
        "is_float": {
            "name": "is_float",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "List[str]",
                    "float",
                    "Callable[[object],Any]",
                    "Callable[object,Any]"
                ]
            }
        },
        "round_to": {
            "name": "round_to",
            "location": 25,
            "return": [
                "float",
                "Optional[int]",
                "bool",
                "str"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "digits": [
                    "int"
                ]
            }
        },
        "get_bot_converter_response": {
            "name": "get_bot_converter_response",
            "location": 53,
            "return": [
                "Optional[Tuple[str]]",
                "dict",
                "bytes",
                "Optional[Tuple[str, str]]"
            ],
            "arguments": {
                "message": [
                    "str",
                    "Iterable",
                    "IO"
                ],
                "bot_handler": [
                    "Dict[str,str]",
                    "zulip_bots.lib.Any",
                    "str",
                    "Sequence[int]",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "ConverterHandler.usage": {
            "name": "usage",
            "location": 38,
            "return": [
                "Text",
                "List[str]",
                "raiden.utils.TokenAmount",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConverterHandler.handle_message": {
            "name": "handle_message",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Dict"
                ],
                "bot_handler": [
                    "dict"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/converter/test_converter.py": {
        "TestConverterBot.test_bot": {
            "name": "test_bot",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/converter/utils.py": {},
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/converter/__init__.py": {},
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/define/define.py": {
        "DefineHandler.usage": {
            "name": "usage",
            "location": 22,
            "return": [
                "Text",
                "IO[str]",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefineHandler.handle_message": {
            "name": "handle_message",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Iterable[int]",
                    "Optional[str]",
                    "Dict",
                    "Callable"
                ],
                "bot_handler": [
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "DefineHandler.get_bot_define_response": {
            "name": "get_bot_define_response",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "original_content": [
                    "str"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/define/test_define.py": {
        "TestDefineBot.test_bot": {
            "name": "test_bot",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefineBot.test_connection_error": {
            "name": "test_connection_error",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/define/__init__.py": {},
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/dialogflow/dialogflow.py": {
        "get_bot_result": {
            "name": "get_bot_result",
            "location": 15,
            "return": [
                "str",
                "Dict[str,Any]",
                "Text"
            ],
            "arguments": {
                "message_content": [
                    "str"
                ],
                "config": [
                    "str",
                    "bool",
                    "int"
                ],
                "sender_id": [
                    "str",
                    "Set[int]",
                    "int"
                ]
            }
        },
        "DialogFlowHandler.initialize": {
            "name": "initialize",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_handler": [
                    "Optional[int]",
                    "bool",
                    "Dict[str, str]",
                    "Optional[float]"
                ]
            }
        },
        "DialogFlowHandler.usage": {
            "name": "usage",
            "location": 46,
            "return": [
                "Text",
                "IO[str]",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DialogFlowHandler.handle_message": {
            "name": "handle_message",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int"
                ],
                "bot_handler": [
                    "Dict[str,str]",
                    "Dict",
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/dialogflow/test_dialogflow.py": {
        "mock_dialogflow": {
            "name": "mock_dialogflow",
            "location": 28,
            "return": [
                "Any",
                "Generator"
            ],
            "arguments": {
                "test_name": [
                    "str"
                ],
                "bot_name": [
                    "str"
                ]
            }
        },
        "MockTextRequest.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockTextRequest.getresponse": {
            "name": "getresponse",
            "location": 17,
            "return": [
                "MockHttplibRequest",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockHttplibRequest.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "List[dict]",
                    "Dict[str,Any]"
                ]
            }
        },
        "MockHttplibRequest.read": {
            "name": "read",
            "location": 24,
            "return": [
                "List[str]",
                "str",
                "Dict[str, dict]",
                "Tuple[str, Optional[int]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDialogFlowBot._test": {
            "name": "_test",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_name": [
                    "str",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "message": [
                    "str",
                    "int"
                ],
                "response": [
                    "str",
                    "int"
                ]
            }
        },
        "TestDialogFlowBot.test_normal": {
            "name": "test_normal",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDialogFlowBot.test_403": {
            "name": "test_403",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDialogFlowBot.test_empty_response": {
            "name": "test_empty_response",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDialogFlowBot.test_exception": {
            "name": "test_exception",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDialogFlowBot.test_help": {
            "name": "test_help",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDialogFlowBot.test_alternate_response": {
            "name": "test_alternate_response",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDialogFlowBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/dialogflow/__init__.py": {},
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/encrypt/encrypt.py": {
        "encrypt": {
            "name": "encrypt",
            "location": 3,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "EncryptHandler.usage": {
            "name": "usage",
            "location": 26,
            "return": [
                "Text",
                "bool",
                "int",
                "str",
                "Tuple",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncryptHandler.handle_message": {
            "name": "handle_message",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Dict"
                ],
                "bot_handler": [
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "EncryptHandler.get_bot_encrypt_response": {
            "name": "get_bot_encrypt_response",
            "location": 37,
            "return": [
                "Text",
                "str",
                "Dict[str,Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/encrypt/test_encrypt.py": {
        "TestEncryptBot.test_bot": {
            "name": "test_bot",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/encrypt/__init__.py": {},
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/followup/followup.py": {
        "FollowupHandler.usage": {
            "name": "usage",
            "location": 16,
            "return": [
                "Text",
                "Dict[str,int]",
                "int",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FollowupHandler.initialize": {
            "name": "initialize",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_handler": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "FollowupHandler.handle_message": {
            "name": "handle_message",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Dict[str, Any]"
                ],
                "bot_handler": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "FollowupHandler.get_bot_followup_response": {
            "name": "get_bot_followup_response",
            "location": 45,
            "return": [
                "Optional[Tuple[str]]",
                "dict",
                "bytes",
                "Optional[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict",
                    "bool",
                    "MutableMapping[str, Any]"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/followup/test_followup.py": {
        "TestFollowUpBot.test_followup_stream": {
            "name": "test_followup_stream",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFollowUpBot.test_different_stream": {
            "name": "test_different_stream",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFollowUpBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFollowUpBot.test_help_text": {
            "name": "test_help_text",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/followup/__init__.py": {},
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/giphy/giphy.py": {
        "get_url_gif_giphy": {
            "name": "get_url_gif_giphy",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "keyword": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[bytes]",
                    "None"
                ],
                "api_key": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[bytes]",
                    "None"
                ]
            }
        },
        "get_bot_giphy_response": {
            "name": "get_bot_giphy_response",
            "location": 62,
            "return": [
                "Text",
                "Dict",
                "bytes"
            ],
            "arguments": {
                "message": [
                    "str",
                    "Dict",
                    "bool",
                    "Step",
                    "int"
                ],
                "bot_handler": [
                    "bool",
                    "List[str]",
                    "Dict",
                    "Dict[str,Any]",
                    "str",
                    "Iterable[str]"
                ],
                "config_info": [
                    "str"
                ]
            }
        },
        "GiphyHandler.usage": {
            "name": "usage",
            "location": 19,
            "return": [
                "Text",
                "str",
                "List",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "GiphyHandler.initialize": {
            "name": "initialize",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_handler": [
                    "Optional[int]",
                    "bool",
                    "Dict[str, str]",
                    "Optional[float]"
                ]
            }
        },
        "GiphyHandler.handle_message": {
            "name": "handle_message",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Dict[str,str]",
                    "Dict"
                ],
                "bot_handler": [
                    "str",
                    "Dict[str,str]",
                    "Dict"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/giphy/test_giphy.py": {
        "TestGiphyBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGiphyBot.test_normal": {
            "name": "test_normal",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGiphyBot.test_no_result": {
            "name": "test_no_result",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGiphyBot.test_403": {
            "name": "test_403",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGiphyBot.test_connection_error": {
            "name": "test_connection_error",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/giphy/__init__.py": {},
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/github_detail/github_detail.py": {
        "GithubHandler.initialize": {
            "name": "initialize",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_handler": [
                    "str"
                ]
            }
        },
        "GithubHandler.usage": {
            "name": "usage",
            "location": 25,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubHandler.format_message": {
            "name": "format_message",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "details": [
                    "int",
                    "logging.LogRecord"
                ]
            }
        },
        "GithubHandler.get_details_from_github": {
            "name": "get_details_from_github",
            "location": 49,
            "return": [
                "None",
                "bool",
                "Optional[bool]",
                "Optional[float]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str"
                ],
                "repo": [
                    "str"
                ],
                "number": [
                    "str"
                ]
            }
        },
        "GithubHandler.get_owner_and_repo": {
            "name": "get_owner_and_repo",
            "location": 61,
            "return": [
                "Tuple[Union[str,None,dict,list,int,list[dict[str,str]],dict[str,str],list[str],list[int],Iterator]]",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "issue_pr": [
                    "list",
                    "dict",
                    "Iterable[Tuple[str, str]]"
                ]
            }
        },
        "GithubHandler.handle_message": {
            "name": "handle_message",
            "location": 70,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "Dict[str, Any]"
                ],
                "bot_handler": [
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/github_detail/test_github_detail.py": {
        "TestGithubDetailBot.test_bot_usage": {
            "name": "test_bot_usage",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGithubDetailBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGithubDetailBot.test_issue": {
            "name": "test_issue",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGithubDetailBot.test_pull_request": {
            "name": "test_pull_request",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGithubDetailBot.test_404": {
            "name": "test_404",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGithubDetailBot.test_random_text": {
            "name": "test_random_text",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGithubDetailBot.test_help_text": {
            "name": "test_help_text",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/github_detail/__init__.py": {},
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/google_search/google_search.py": {
        "google_search": {
            "name": "google_search",
            "location": 11,
            "return": [
                "List[dict[Text,str]]",
                "Dict",
                "str",
                "Set",
                "List[str]"
            ],
            "arguments": {
                "keywords": [
                    "int",
                    "List",
                    "str"
                ]
            }
        },
        "get_google_result": {
            "name": "get_google_result",
            "location": 40,
            "return": [
                "bytes",
                "Text",
                "Dict",
                "str"
            ],
            "arguments": {
                "search_keywords": [
                    "str",
                    "List[int]",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "GoogleSearchHandler.usage": {
            "name": "usage",
            "location": 75,
            "return": [
                "Text",
                "int",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleSearchHandler.handle_message": {
            "name": "handle_message",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Tuple[bytes]",
                    "Dict",
                    "bool"
                ],
                "bot_handler": [
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/google_search/test_google_search.py": {
        "TestGoogleSearchBot.test_normal": {
            "name": "test_normal",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleSearchBot.test_bot_help": {
            "name": "test_bot_help",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleSearchBot.test_bot_no_results": {
            "name": "test_bot_no_results",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleSearchBot.test_attribute_error": {
            "name": "test_attribute_error",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleSearchBot.test_ignore_links": {
            "name": "test_ignore_links",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/google_search/__init__.py": {},
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/google_translate/google_translate.py": {
        "get_supported_languages": {
            "name": "get_supported_languages",
            "location": 41,
            "return": [
                "Dict",
                "str",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Dict[str,str]",
                    "Type[RuntimeError]",
                    "int",
                    "Type",
                    "Tuple",
                    "Callable[[KT],VT]",
                    "Callable[T,T]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "translate": {
            "name": "translate",
            "location": 52,
            "return": [
                "str",
                "int",
                "List[str]",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "text_to_translate": [
                    "str",
                    "bool",
                    "int"
                ],
                "key": [
                    "str",
                    "bool",
                    "int"
                ],
                "dest": [
                    "str",
                    "bool",
                    "int"
                ],
                "src": [
                    "bytes",
                    "Dict[str,Any]",
                    "Mapping[str,str]",
                    "Mapping",
                    "Dict",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "get_code_for_language": {
            "name": "get_code_for_language",
            "location": 61,
            "return": [
                "Text",
                "bytes",
                "str",
                "List",
                "bool",
                "int",
                "Tuple[int,int,int]"
            ],
            "arguments": {
                "language": [
                    "bytes",
                    "Dict[int,Dict[str,Any]]",
                    "List",
                    "List[Dict]",
                    "Dict[str,Set[int]]",
                    "Deque",
                    "float"
                ],
                "all_languages": [
                    "Dict[int, Dict[str, Any]]",
                    "list",
                    "List[Dict]",
                    "bytes",
                    "Dict[str, Set[int]]",
                    "Deque",
                    "float"
                ]
            }
        },
        "get_translate_bot_response": {
            "name": "get_translate_bot_response",
            "location": 68,
            "return": [
                "str",
                "Text",
                "Dict[str,Any]"
            ],
            "arguments": {
                "message_content": [
                    "str",
                    "Optional[str]",
                    "List[Dict[str,Any]]"
                ],
                "config_file": [
                    "str",
                    "Dict[str,str]",
                    "bool"
                ],
                "author": [
                    "str"
                ],
                "all_languages": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "GoogleTranslateHandler.usage": {
            "name": "usage",
            "location": 12,
            "return": [
                "Text",
                "str",
                "float",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleTranslateHandler.initialize": {
            "name": "initialize",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_handler": [
                    "Optional[int]",
                    "bool",
                    "Dict[str, str]",
                    "Optional[float]"
                ]
            }
        },
        "GoogleTranslateHandler.handle_message": {
            "name": "handle_message",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Dict[str,Any]"
                ],
                "bot_handler": [
                    "Dict[str,str]",
                    "Dict",
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/google_translate/test_google_translate.py": {
        "TestGoogleTranslateBot._test": {
            "name": "_test",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "response": [],
                "http_config_fixture": [
                    "bool",
                    "Callable[,int]"
                ],
                "http_fixture": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "TestGoogleTranslateBot.test_normal": {
            "name": "test_normal",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleTranslateBot.test_source_language_not_found": {
            "name": "test_source_language_not_found",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleTranslateBot.test_target_language_not_found": {
            "name": "test_target_language_not_found",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleTranslateBot.test_403": {
            "name": "test_403",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleTranslateBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleTranslateBot.test_help_command": {
            "name": "test_help_command",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleTranslateBot.test_help_too_many_args": {
            "name": "test_help_too_many_args",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleTranslateBot.test_help_no_langs": {
            "name": "test_help_no_langs",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleTranslateBot.test_quotation_in_text": {
            "name": "test_quotation_in_text",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleTranslateBot.test_exception": {
            "name": "test_exception",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleTranslateBot.test_get_language_403": {
            "name": "test_get_language_403",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleTranslateBot.test_connection_error": {
            "name": "test_connection_error",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/google_translate/__init__.py": {},
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/helloworld/helloworld.py": {
        "HelloWorldHandler.usage": {
            "name": "usage",
            "location": 6,
            "return": [
                "bool",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "HelloWorldHandler.handle_message": {
            "name": "handle_message",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Dict[str,str]",
                    "bytes",
                    "Dict",
                    "Dict[str,Any]",
                    "List[dict]",
                    "bool",
                    "str",
                    "List"
                ],
                "bot_handler": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "bytes",
                    "dict",
                    "List[dict]",
                    "bool",
                    "str",
                    "list"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/helloworld/test_helloworld.py": {
        "TestHelpBot.test_bot": {
            "name": "test_bot",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/helloworld/__init__.py": {},
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/help/help.py": {
        "HelpHandler.usage": {
            "name": "usage",
            "location": 5,
            "return": [
                "Text",
                "List[dict]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HelpHandler.handle_message": {
            "name": "handle_message",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Dict[str,str]",
                    "Dict",
                    "bytes",
                    "Dict[str,Any]"
                ],
                "bot_handler": [
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/help/test_help.py": {
        "TestHelpBot.test_bot": {
            "name": "test_bot",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/help/__init__.py": {},
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/incrementor/incrementor.py": {
        "IncrementorHandler.usage": {
            "name": "usage",
            "location": 11,
            "return": [
                "bool",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "IncrementorHandler.initialize": {
            "name": "initialize",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_handler": [
                    "str",
                    "Exception",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "IncrementorHandler.handle_message": {
            "name": "handle_message",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "bytes",
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "bot_handler": [
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/incrementor/test_incrementor.py": {
        "TestIncrementorBot.test_bot": {
            "name": "test_bot",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/incrementor/__init__.py": {},
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/link_shortener/link_shortener.py": {
        "LinkShortenerHandler.usage": {
            "name": "usage",
            "location": 11,
            "return": [
                "Text",
                "Dict",
                "str",
                "Dict[str,Any]",
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkShortenerHandler.initialize": {
            "name": "initialize",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_handler": [
                    "Optional[int]",
                    "bool",
                    "Dict[str, str]",
                    "Optional[float]"
                ]
            }
        },
        "LinkShortenerHandler.handle_message": {
            "name": "handle_message",
            "location": 20,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Dict[str, Any]"
                ],
                "bot_handler": [
                    "Dict[str, Any]",
                    "Type['Model']"
                ]
            }
        },
        "LinkShortenerHandler.shorten_link": {
            "name": "shorten_link",
            "location": 63,
            "return": [
                "str",
                "Union[str, int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "long_url": [
                    "str",
                    "bool",
                    "Callable",
                    "List[str]"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/link_shortener/test_link_shortener.py": {
        "TestLinkShortenerBot._test": {
            "name": "_test",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bytes",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "response": [
                    "str",
                    "bytes",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "TestLinkShortenerBot.test_normal": {
            "name": "test_normal",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLinkShortenerBot.test_no_links": {
            "name": "test_no_links",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLinkShortenerBot.test_help": {
            "name": "test_help",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/link_shortener/__init__.py": {},
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/tictactoe/test_tictactoe.py": {
        "TestTictactoeBot.test_bot": {
            "name": "test_bot",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/tictactoe/tictactoe.py": {
        "coords_from_command": {
            "name": "coords_from_command",
            "location": 323,
            "return": [
                "str",
                "float",
                "Sequence[float]",
                "Tuple[int,int]",
                "Tuple"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "Union[str,Any]",
                    "bool",
                    "Dict"
                ]
            }
        },
        "TicTacToeGame.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "Optional[float]",
                    "None",
                    "Optional[str]",
                    "List[str]",
                    "float",
                    "Optional[int]",
                    "str",
                    "int"
                ]
            }
        },
        "TicTacToeGame.get_state": {
            "name": "get_state",
            "location": 34,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TicTacToeGame.is_new_game": {
            "name": "is_new_game",
            "location": 37,
            "return": [
                "bool",
                "float",
                "int",
                "Tuple[int,int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TicTacToeGame.display_row": {
            "name": "display_row",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "Tuple",
                    "Dict",
                    "Dict[str,int]",
                    "Type[object]",
                    "Callable"
                ]
            }
        },
        "TicTacToeGame.display_board": {
            "name": "display_board",
            "location": 45,
            "return": [
                "str",
                "int",
                "List[int]",
                "Tuple[int,int]"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "List",
                    "List[float]",
                    "str",
                    "float"
                ]
            }
        },
        "TicTacToeGame.get_value": {
            "name": "get_value",
            "location": 49,
            "return": [
                "str",
                "Tuple[int,int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "int"
                ],
                "position": [
                    "str",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "int"
                ]
            }
        },
        "TicTacToeGame.board_is_full": {
            "name": "board_is_full",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "TicTacToeGame.contains_winning_move": {
            "name": "contains_winning_move",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "float",
                    "int"
                ]
            }
        },
        "TicTacToeGame.get_locations_of_char": {
            "name": "get_locations_of_char",
            "location": 69,
            "return": [
                "List[list]",
                "bool",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "int",
                    "str",
                    "List[dict]"
                ],
                "char": [
                    "int",
                    "str",
                    "List[dict]"
                ]
            }
        },
        "TicTacToeGame.two_blanks": {
            "name": "two_blanks",
            "location": 78,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "triplet": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "board": [
                    "Dict[int,dict]",
                    "int",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "TicTacToeGame.computer_move": {
            "name": "computer_move",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "bool"
                ]
            }
        },
        "TicTacToeGame.is_valid_move": {
            "name": "is_valid_move",
            "location": 177,
            "return": [
                "bool",
                "str",
                "Dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "str",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "TicTacToeGame.tictactoe": {
            "name": "tictactoe",
            "location": 190,
            "return": [
                "Tuple[Union[Text,dict,list,float,dict[str,Sequence[Any]]]]",
                "IO[str]",
                "Iterable[str]",
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "str",
                    "int",
                    "List[list[str]]",
                    "List[List[str]]",
                    "Sequence[int]"
                ]
            }
        },
        "ticTacToeHandler.usage": {
            "name": "usage",
            "location": 269,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ticTacToeHandler.handle_message": {
            "name": "handle_message",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "bot_handler": [
                    "Dict[str,str]"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/tictactoe/__init__.py": {},
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/virtual_fs/test_virtual_fs.py": {
        "TestVirtualFsBot.test_commands_1": {
            "name": "test_commands_1",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVirtualFsBot.test_commands_2": {
            "name": "test_commands_2",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/virtual_fs/virtual_fs.py": {
        "get_help": {
            "name": "get_help",
            "location": 42,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {}
        },
        "sample_conversation": {
            "name": "sample_conversation",
            "location": 64,
            "return": [
                "List[Text]",
                "str",
                "float",
                "int"
            ],
            "arguments": {}
        },
        "get_commands": {
            "name": "get_commands",
            "location": 123,
            "return": [
                "Dict[Text,tuple[list[Text]]]",
                "bool",
                "bytes",
                "Dict",
                "str"
            ],
            "arguments": {}
        },
        "fs_command": {
            "name": "fs_command",
            "location": 137,
            "return": [
                "Tuple[Union[str,dict]]",
                "Position",
                "int",
                "bool",
                "Callable",
                "List[int]"
            ],
            "arguments": {
                "fs": [
                    "str",
                    "Dict"
                ],
                "user": [
                    "str",
                    "bool"
                ],
                "cmd": [
                    "str",
                    "Optional[str]",
                    "Callable[,Any]"
                ]
            }
        },
        "syntax_help": {
            "name": "syntax_help",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "cmd_name": [
                    "str"
                ]
            }
        },
        "fs_new": {
            "name": "fs_new",
            "location": 171,
            "return": [
                "Dict[Text,dict]",
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "fs_help": {
            "name": "fs_help",
            "location": 178,
            "return": [
                "str",
                "Tuple[Union[str,dict[str,Any]]]"
            ],
            "arguments": {
                "fs": [
                    "str",
                    "Dict[str,Any]"
                ],
                "user": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Callable[,None]"
                ],
                "cmd_name": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "fs_sample_conversation": {
            "name": "fs_sample_conversation",
            "location": 181,
            "return": [
                "Tuple[Union[str,dict[str,Any]]]",
                "str",
                "Dict"
            ],
            "arguments": {
                "fs": [
                    "str",
                    "Dict[str,Any]"
                ],
                "user": [
                    "str",
                    "Dict[str,Any]",
                    "bool"
                ],
                "cmd_name": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "fs_mkdir": {
            "name": "fs_mkdir",
            "location": 184,
            "return": [
                "str",
                "Tuple",
                "Tuple[Text]",
                "Tuple[str]",
                "Tuple[Union[list[str],str,set,Pattern,dict[str,Any],list]]"
            ],
            "arguments": {
                "fs": [
                    "Dict[str, Any]",
                    "str"
                ],
                "user": [
                    "str"
                ],
                "fn": [
                    "str"
                ]
            }
        },
        "fs_ls": {
            "name": "fs_ls",
            "location": 201,
            "return": [
                "Tuple[str]",
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "fs": [
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "Union[int,str]"
                ],
                "user": [
                    "str",
                    "tuple",
                    "Dict[str, Any]",
                    "dict"
                ],
                "fn": [
                    "str",
                    "int"
                ]
            }
        },
        "fs_pwd": {
            "name": "fs_pwd",
            "location": 219,
            "return": [
                "Tuple[Union[str,list[int]]]",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "fs": [
                    "str",
                    "List[int]"
                ],
                "user": [
                    "str",
                    "Optional[str]",
                    "Union[Callable, str]",
                    "os.DirEntry"
                ]
            }
        },
        "fs_rm": {
            "name": "fs_rm",
            "location": 224,
            "return": [
                "str",
                "Tuple[Union[list[str],str]]",
                "Tuple[Union[list[str],Text]]"
            ],
            "arguments": {
                "fs": [
                    "List[str]",
                    "Dict[str,Any]",
                    "str",
                    "Dict",
                    "bool"
                ],
                "user": [
                    "str"
                ],
                "fn": [
                    "str"
                ]
            }
        },
        "fs_rmdir": {
            "name": "fs_rmdir",
            "location": 241,
            "return": [
                "str",
                "Tuple[str]",
                "Tuple[Text]"
            ],
            "arguments": {
                "fs": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "List[str]",
                    "bool"
                ],
                "user": [
                    "str"
                ],
                "fn": [
                    "str"
                ]
            }
        },
        "fs_write": {
            "name": "fs_write",
            "location": 261,
            "return": [
                "str",
                "Tuple",
                "Tuple[Text]",
                "Tuple[str]",
                "Tuple[Union[list[str],str,set,Iterator,dict[str,Type]]]"
            ],
            "arguments": {
                "fs": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "Type['Declared']"
                ],
                "user": [
                    "str"
                ],
                "fn": [
                    "str"
                ],
                "content": [
                    "str"
                ]
            }
        },
        "fs_read": {
            "name": "fs_read",
            "location": 279,
            "return": [
                "str",
                "Tuple[Union[str,list[str]]]"
            ],
            "arguments": {
                "fs": [
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "Dict",
                    "bool"
                ],
                "user": [
                    "str"
                ],
                "fn": [
                    "str"
                ]
            }
        },
        "fs_cd": {
            "name": "fs_cd",
            "location": 292,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "fs": [
                    "str",
                    "Dict[str,Any]",
                    "Dict"
                ],
                "user": [
                    "bool",
                    "str",
                    "Dict"
                ],
                "fn": [
                    "str"
                ]
            }
        },
        "make_path": {
            "name": "make_path",
            "location": 305,
            "return": [
                "List[Text]",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "fs": [
                    "str",
                    "Optional[str]",
                    "Union[Callable,str]",
                    "Dict"
                ],
                "user": [
                    "str",
                    "Optional[str]",
                    "Union[Callable, str]",
                    "dict"
                ],
                "leaf": [
                    "str",
                    "os.PathLike"
                ]
            }
        },
        "nice_path": {
            "name": "nice_path",
            "location": 318,
            "return": [
                "str",
                "Text",
                "MutableMapping[str,str]",
                "List[str]",
                "MutableMapping[str,Any]"
            ],
            "arguments": {
                "fs": [
                    "List[str]",
                    "Dict[str,Any]",
                    "str",
                    "Optional[str]"
                ],
                "path": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "get_directory": {
            "name": "get_directory",
            "location": 329,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "directory": {
            "name": "directory",
            "location": 336,
            "return": [
                "int",
                "bytes",
                "dict",
                "Dict[str, float]"
            ],
            "arguments": {
                "fns": [
                    "str",
                    "List",
                    "float",
                    "Optional[Union[str,Any]]",
                    "Callable",
                    "Union[int,slice]"
                ]
            }
        },
        "text_file": {
            "name": "text_file",
            "location": 339,
            "return": [
                "Optional[str]",
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "content": [
                    "str",
                    "Set[str]",
                    "List",
                    "List[str]"
                ]
            }
        },
        "is_directory": {
            "name": "is_directory",
            "location": 342,
            "return": [
                "bool"
            ],
            "arguments": {
                "fs": [
                    "str",
                    "Dict[str,Any]",
                    "Callable",
                    "Callable[...,None]",
                    "Callable[[T],bool]"
                ],
                "fn": [
                    "str",
                    "Dict[str, Any]",
                    "Callable[..., None]",
                    "Callable",
                    "Callable[[T], bool]",
                    "callable"
                ]
            }
        },
        "VirtualFsHandler.usage": {
            "name": "usage",
            "location": 14,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualFsHandler.handle_message": {
            "name": "handle_message",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict"
                ],
                "bot_handler": [
                    "Dict"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/virtual_fs/__init__.py": {},
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/weather/test_weather.py": {
        "TestWeatherBot._test": {
            "name": "_test",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "response": [],
                "fixture": [
                    "Dict[str,str]",
                    "None"
                ]
            }
        },
        "TestWeatherBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWeatherBot.test_bot": {
            "name": "test_bot",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/weather/weather.py": {
        "format_response": {
            "name": "format_response",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ],
                "city": [
                    "str",
                    "List[str]"
                ],
                "response_pattern": [
                    "str"
                ]
            }
        },
        "to_celsius": {
            "name": "to_celsius",
            "location": 52,
            "return": [
                "float",
                "Dict",
                "str",
                "int"
            ],
            "arguments": {
                "temp_kelvin": [
                    "float",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "to_fahrenheit": {
            "name": "to_fahrenheit",
            "location": 56,
            "return": [
                "float",
                "Dict",
                "str",
                "int"
            ],
            "arguments": {
                "temp_kelvin": [
                    "float",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "WeatherHandler.initialize": {
            "name": "initialize",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_handler": [
                    "str",
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        },
        "WeatherHandler.usage": {
            "name": "usage",
            "location": 12,
            "return": [
                "Text",
                "List[dict]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WeatherHandler.handle_message": {
            "name": "handle_message",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "bot_handler": [
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/weather/__init__.py": {},
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/wikipedia/test_wikipedia.py": {
        "TestWikipediaBot.test_bot": {
            "name": "test_bot",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/wikipedia/wikipedia.py": {
        "WikipediaHandler.usage": {
            "name": "usage",
            "location": 28,
            "return": [
                "Text",
                "IO[str]",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikipediaHandler.handle_message": {
            "name": "handle_message",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Dict"
                ],
                "bot_handler": [
                    "dict"
                ]
            }
        },
        "WikipediaHandler.get_bot_wiki_response": {
            "name": "get_bot_wiki_response",
            "location": 40,
            "return": [
                "Text",
                "Dict[str,Any]",
                "Dict",
                "List[dict]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Dict[str, Any]"
                ],
                "bot_handler": [
                    "Dict[str,str]",
                    "zulip_bots.lib.Any",
                    "str",
                    "Sequence[int]",
                    "None",
                    "Optional[str]"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/wikipedia/__init__.py": {},
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/xkcd/test_xkcd.py": {
        "TestXkcdBot.test_latest_command": {
            "name": "test_latest_command",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestXkcdBot.test_random_command": {
            "name": "test_random_command",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestXkcdBot.test_numeric_comic_id_command_1": {
            "name": "test_numeric_comic_id_command_1",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestXkcdBot.test_invalid_comic_ids": {
            "name": "test_invalid_comic_ids",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_logging_exception": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestXkcdBot.test_help_responses": {
            "name": "test_help_responses",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/xkcd/xkcd.py": {
        "get_xkcd_bot_response": {
            "name": "get_xkcd_bot_response",
            "location": 52,
            "return": [
                "Dict[str,Any]",
                "Text"
            ],
            "arguments": {
                "message": [
                    "dict",
                    "bool",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "fetch_xkcd_query": {
            "name": "fetch_xkcd_query",
            "location": 87,
            "return": [
                "str",
                "int",
                "List[int]"
            ],
            "arguments": {
                "mode": [
                    "int",
                    "str"
                ],
                "comic_id": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "XkcdHandler.usage": {
            "name": "usage",
            "location": 24,
            "return": [
                "Text",
                "Iterable[str]",
                "IO[str]",
                "Dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "XkcdHandler.handle_message": {
            "name": "handle_message",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Dict",
                    "int"
                ],
                "bot_handler": [
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/xkcd/__init__.py": {},
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/yoda/test_yoda.py": {
        "TestYodaBot._test": {
            "name": "_test",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "response": [],
                "fixture": [
                    "IO",
                    "None",
                    "Optional[str]",
                    "bytes",
                    "Union[int,str]",
                    "str",
                    "int"
                ]
            }
        },
        "TestYodaBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestYodaBot.test_bot": {
            "name": "test_bot",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/yoda/yoda.py": {
        "YodaSpeakHandler.initialize": {
            "name": "initialize",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_handler": [
                    "str",
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        },
        "YodaSpeakHandler.usage": {
            "name": "usage",
            "location": 43,
            "return": [
                "Text",
                "IO[str]",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "YodaSpeakHandler.handle_message": {
            "name": "handle_message",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Dict",
                    "str",
                    "bytes",
                    "Callable[[bytes],bytes]",
                    "Callable[bytes,bytes]"
                ],
                "bot_handler": [
                    "Dict",
                    "str",
                    "bytes",
                    "Callable[[bytes],bytes]",
                    "Callable[bytes,bytes]"
                ]
            }
        },
        "YodaSpeakHandler.send_to_yoda_api": {
            "name": "send_to_yoda_api",
            "location": 60,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "str"
                ]
            }
        },
        "YodaSpeakHandler.format_input": {
            "name": "format_input",
            "location": 83,
            "return": [
                "str",
                "int",
                "List[List[str]]",
                "Tuple"
            ],
            "arguments": {
                "self": [],
                "original_content": [
                    "str",
                    "bytes"
                ]
            }
        },
        "YodaSpeakHandler.handle_input": {
            "name": "handle_input",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "bot_handler": [
                    "Dict[str, Any]"
                ]
            }
        },
        "YodaSpeakHandler.send_message": {
            "name": "send_message",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_handler": [
                    "bool",
                    "str"
                ],
                "message": [
                    "bool",
                    "str"
                ],
                "stream": [
                    "bool",
                    "str"
                ],
                "subject": [
                    "bool",
                    "str"
                ]
            }
        },
        "YodaSpeakHandler.is_help": {
            "name": "is_help",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "original_content": [
                    "str",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/yoda/__init__.py": {},
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/youtube/test_youtube.py": {
        "TestYoutubeBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestYoutubeBot.test_single": {
            "name": "test_single",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestYoutubeBot.test_invalid_key": {
            "name": "test_invalid_key",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestYoutubeBot.test_multiple": {
            "name": "test_multiple",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestYoutubeBot.test_noresult": {
            "name": "test_noresult",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestYoutubeBot.test_help": {
            "name": "test_help",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestYoutubeBot.test_connection_error": {
            "name": "test_connection_error",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/youtube/youtube.py": {
        "search_youtube": {
            "name": "search_youtube",
            "location": 55,
            "return": [
                "List[list]",
                "int",
                "List",
                "str"
            ],
            "arguments": {
                "query": [
                    "int",
                    "str",
                    "Tuple"
                ],
                "key": [
                    "int",
                    "str",
                    "Tuple"
                ],
                "region": [
                    "int",
                    "str",
                    "Tuple"
                ],
                "max_results": [
                    "int",
                    "str",
                    "Tuple"
                ]
            }
        },
        "get_command_query": {
            "name": "get_command_query",
            "location": 85,
            "return": [
                "int",
                "Tuple[str]",
                "Dict",
                "Tuple[Optional[str]]"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int",
                    "bool",
                    "logging.LogRecord"
                ]
            }
        },
        "get_bot_response": {
            "name": "get_bot_response",
            "location": 95,
            "return": [
                "Text",
                "int",
                "str",
                "bytes",
                "Dict[str,Any]"
            ],
            "arguments": {
                "query": [
                    "str",
                    "Optional[str]"
                ],
                "command": [
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "None",
                    "Optional[bool]",
                    "float",
                    "Optional[List[str]]",
                    "bool",
                    "Optional[List[Any]]",
                    "List[str]"
                ],
                "config_info": [
                    "dict",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "YoutubeHandler.usage": {
            "name": "usage",
            "location": 12,
            "return": [
                "Text",
                "int",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "YoutubeHandler.initialize": {
            "name": "initialize",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_handler": [
                    "Optional[int]",
                    "bool",
                    "Dict[str, str]",
                    "Optional[float]"
                ]
            }
        },
        "YoutubeHandler.handle_message": {
            "name": "handle_message",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict"
                ],
                "bot_handler": [
                    "Dict[str,str]",
                    "Callable",
                    "Dict"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots/youtube/__init__.py": {},
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots_unmaintained/commute/commute.py": {
        "test_parse_pair": {
            "name": "test_parse_pair",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calculate_seconds": {
            "name": "test_calculate_seconds",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_helper_functions": {
            "name": "test_helper_functions",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CommuteHandler.initialize": {
            "name": "initialize",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_handler": [
                    "str",
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        },
        "CommuteHandler.usage": {
            "name": "usage",
            "location": 16,
            "return": [
                "Text",
                "int",
                "Optional[int]",
                "List[int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommuteHandler.send_info": {
            "name": "send_info",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Dict[str,str]",
                    "bytes",
                    "Dict[str,dict[str,Any]]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "letter": [
                    "Dict[str,str]",
                    "bytes",
                    "Dict[str,dict[str,Any]]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "bot_handler": [
                    "Dict[str, str]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "CommuteHandler.calculate_seconds": {
            "name": "calculate_seconds",
            "location": 79,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "time_str": [
                    "str"
                ]
            }
        },
        "CommuteHandler.add_time_to_params": {
            "name": "add_time_to_params",
            "location": 90,
            "return": [
                "None",
                "str",
                "Dict[str,Any]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "Dict[str,Any]",
                    "Mapping[str,str]",
                    "Callable[[T],bool]",
                    "Union[Callable,str]"
                ]
            }
        },
        "CommuteHandler.get_send_content": {
            "name": "get_send_content",
            "location": 101,
            "return": [
                "None",
                "Dict[str,Any]",
                "List[Dict]",
                "int"
            ],
            "arguments": {
                "self": [],
                "rjson": [
                    "bytes",
                    "str",
                    "int"
                ],
                "params": [
                    "str",
                    "Tuple",
                    "Dict[str,Any]",
                    "int"
                ],
                "message": [
                    "Dict",
                    "Sequence",
                    "bool"
                ],
                "bot_handler": [
                    "Dict",
                    "Sequence",
                    "bool"
                ]
            }
        },
        "CommuteHandler.parse_pair": {
            "name": "parse_pair",
            "location": 155,
            "return": [
                "Dict",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "content_list": [
                    "List[str]",
                    "str",
                    "List",
                    "Dict[str,Any]",
                    "Sequence[str]",
                    "bool",
                    "Iterable"
                ]
            }
        },
        "CommuteHandler.receive_response": {
            "name": "receive_response",
            "location": 167,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "Dict",
                    "bytes",
                    "Dict[str,Any]",
                    "Optional[Union[Dict,str,int,bytes]]",
                    "int",
                    "None"
                ],
                "message": [
                    "Generator[str,None,None]",
                    "bool",
                    "Generator[Union[str,None,None]]",
                    "str",
                    "Any"
                ],
                "bot_handler": [
                    "Generator[str,None,None]",
                    "bool",
                    "Generator[Union[str,None,None]]",
                    "str",
                    "Any"
                ]
            }
        },
        "CommuteHandler.handle_message": {
            "name": "handle_message",
            "location": 183,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ],
                "bot_handler": [
                    "Type[Model]",
                    "str",
                    "Type"
                ]
            }
        },
        "CommuteHandler.receive_response.validate_requests": {
            "name": "validate_requests",
            "location": 168,
            "return": [
                "None",
                "Mapping[str,Any]",
                "Optional[Dict[str,str]]",
                "Optional[Dict[str,Any]]",
                "str",
                "Exception",
                "bytes"
            ],
            "arguments": {
                "request": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots_unmaintained/commute/__init__.py": {},
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots_unmaintained/foursquare/foursquare.py": {
        "FoursquareHandler.initialize": {
            "name": "initialize",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_handler": [
                    "str",
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        },
        "FoursquareHandler.usage": {
            "name": "usage",
            "location": 13,
            "return": [
                "Text",
                "str",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoursquareHandler.format_json": {
            "name": "format_json",
            "location": 37,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "venues": [
                    "Dict",
                    "str",
                    "int"
                ]
            }
        },
        "FoursquareHandler.send_info": {
            "name": "send_info",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Dict[str,str]",
                    "bytes",
                    "Dict[str,dict[str,Any]]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "letter": [
                    "Dict[str,str]",
                    "bytes",
                    "Dict[str,dict[str,Any]]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "bot_handler": [
                    "Dict[str, str]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "FoursquareHandler.handle_message": {
            "name": "handle_message",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bytes",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "bot_handler": [
                    "Dict",
                    "bytes"
                ]
            }
        },
        "FoursquareHandler.format_json.format_venue": {
            "name": "format_venue",
            "location": 38,
            "return": [
                "str",
                "int",
                "List[List[str]]",
                "Tuple"
            ],
            "arguments": {
                "venue": [
                    "str"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots_unmaintained/foursquare/__init__.py": {},
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots_unmaintained/howdoi/howdoi.py": {
        "HowdoiHandler.usage": {
            "name": "usage",
            "location": 49,
            "return": [
                "Text",
                "str",
                "int",
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "HowdoiHandler.line_wrap": {
            "name": "line_wrap",
            "location": 61,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ],
                "length": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "HowdoiHandler.get_answer": {
            "name": "get_answer",
            "location": 69,
            "return": [
                "Text",
                "str",
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "bytes",
                    "Dict[str, Any]",
                    "int"
                ],
                "query": [
                    "str",
                    "bytes",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "HowdoiHandler.handle_message": {
            "name": "handle_message",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "bot_handler": [
                    "List[dict]",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots_unmaintained/howdoi/__init__.py": {},
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots_unmaintained/john/john.py": {
        "create_chat_bot": {
            "name": "create_chat_bot",
            "location": 26,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "no_learn": [
                    "str"
                ]
            }
        },
        "JohnHandler.usage": {
            "name": "usage",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JohnHandler.initialize": {
            "name": "initialize",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": [
                    "str"
                ]
            }
        },
        "JohnHandler.handle_message": {
            "name": "handle_message",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "message": [
                    "dict",
                    "Tuple[bytes]",
                    "bool"
                ],
                "bot_handler": [
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_bots/zulip_bots/bots_unmaintained/john/__init__.py": {},
    "python-zulip-api-master-master/zulip_botserver/setup.py": {
        "check_dependency_manually": {
            "name": "check_dependency_manually",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "module_name": [
                    "str",
                    "tartare.core.models.PlatformOptions"
                ],
                "version": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_botserver/tests/server_test_lib.py": {
        "BotServerTestCase.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotServerTestCase.assert_bot_server_response": {
            "name": "assert_bot_server_response",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "available_bots": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "bots_config": [
                    "Type",
                    "bool",
                    "None"
                ],
                "bots_lib_module": [
                    "int",
                    "None",
                    "str",
                    "Callable[...,None]",
                    "bool",
                    "Callable[[int,int],None]"
                ],
                "bot_handlers": [
                    "int",
                    "None",
                    "str",
                    "Callable[...,None]",
                    "bool",
                    "Callable[[int,int],None]"
                ],
                "payload_url": [
                    "Text",
                    "Optional[Dict]",
                    "Optional[List[str]]",
                    "Dict[str,Any]"
                ],
                "message": [
                    "Optional[Dict]",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[List[str]]",
                    "None",
                    "List[str]"
                ],
                "check_success": [
                    "bool",
                    "int",
                    "str",
                    "Callable[...,None]",
                    "Callable[[int,int],None]"
                ]
            }
        }
    },
    "python-zulip-api-master-master/zulip_botserver/tests/test_server.py": {
        "BotServerTests.test_successful_request": {
            "name": "test_successful_request",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ExternalBotHandler": [
                    "Generator[Union[None,Any,None]]",
                    "mock.Mock",
                    "Generator[None,Any,None]"
                ]
            }
        },
        "BotServerTests.test_bot_module_not_exists": {
            "name": "test_bot_module_not_exists",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotServerTests.test_wrong_bot_credentials": {
            "name": "test_wrong_bot_credentials",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_StateHandler": [
                    "mock.Mock"
                ],
                "mock_LoggingError": [
                    "mock.Mock"
                ]
            }
        },
        "BotServerTests.MockMessageHandler.handle_message": {
            "name": "handle_message",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "bot_handler": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "BotServerTests.MockLibModule.handler_class": {
            "name": "handler_class",
            "location": 16,
            "return": [
                "MockMessageHandler",
                "Optional[Any]",
                "bool",
                "int",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-master-master/zulip_botserver/tests/__init__.py": {},
    "python-zulip-api-master-master/zulip_botserver/zulip_botserver/server.py": {
        "read_config_file": {
            "name": "read_config_file",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "config_file_path": [
                    "str",
                    "Callable[[str],str]",
                    "Callable[str,str]"
                ]
            }
        },
        "load_lib_modules": {
            "name": "load_lib_modules",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "load_bot_handlers": {
            "name": "load_bot_handlers",
            "location": 48,
            "return": [
                "BadRequest",
                "int",
                "bool",
                "str",
                "Dict",
                "Dict[str,str]"
            ],
            "arguments": {}
        },
        "get_bot_lib_module": {
            "name": "get_bot_lib_module",
            "location": 68,
            "return": [
                "None",
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "bot": [
                    "Dict",
                    "Dict[str,Any]",
                    "discord.Client"
                ]
            }
        },
        "handle_bot": {
            "name": "handle_bot",
            "location": 77,
            "return": [
                "BadRequest",
                "str",
                "bool",
                "Optional[Any]",
                "Tuple[str,str]",
                "Dict",
                "flask.Response",
                "Optional[str]"
            ],
            "arguments": {
                "bot": [
                    "str",
                    "int",
                    "Sequence[int]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 91,
            "return": [
                "bool",
                "str",
                "Optional[Any]",
                "List[str]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-zulip-api-master-master/zulip_botserver/zulip_botserver/__init__.py": {}
}
{
    "pythonGram-master/manage.py": {},
    "pythonGram-master/config/urls.py": {},
    "pythonGram-master/config/wsgi.py": {},
    "pythonGram-master/config/__init__.py": {},
    "pythonGram-master/config/settings/base.py": {},
    "pythonGram-master/config/settings/local.py": {},
    "pythonGram-master/config/settings/production.py": {},
    "pythonGram-master/config/settings/test.py": {},
    "pythonGram-master/config/settings/__init__.py": {},
    "pythonGram-master/nomadgram/conftest.py": {
        "media_storage": {
            "name": "media_storage",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "list[str]"
                ],
                "tmpdir": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 14,
            "return": [
                "UserFactory",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "request_factory": {
            "name": "request_factory",
            "location": 19,
            "return": [
                "RequestFactory",
                "int",
                "List[Dict[str, Any]]",
                "bool",
                "list"
            ],
            "arguments": {}
        }
    },
    "pythonGram-master/nomadgram/views.py": {
        "ReactAppView.get": {
            "name": "get",
            "location": 8,
            "return": [
                "HttpResponse",
                "int",
                "Dict[str, str]",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, str]",
                    "django.http.HttpRequest",
                    "dict[, ]",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        }
    },
    "pythonGram-master/nomadgram/__init__.py": {},
    "pythonGram-master/nomadgram/contrib/__init__.py": {},
    "pythonGram-master/nomadgram/contrib/sites/__init__.py": {},
    "pythonGram-master/nomadgram/contrib/sites/migrations/0001_initial.py": {},
    "pythonGram-master/nomadgram/contrib/sites/migrations/0002_alter_domain_unique.py": {},
    "pythonGram-master/nomadgram/contrib/sites/migrations/0003_set_site_domain_and_name.py": {
        "update_site_forward": {
            "name": "update_site_forward",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "update_site_backward": {
            "name": "update_site_backward",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        }
    },
    "pythonGram-master/nomadgram/contrib/sites/migrations/__init__.py": {},
    "pythonGram-master/nomadgram/images/admin.py": {},
    "pythonGram-master/nomadgram/images/apps.py": {},
    "pythonGram-master/nomadgram/images/models.py": {
        "Image.like_count": {
            "name": "like_count",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Image.comment_count": {
            "name": "comment_count",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Image.natural_time": {
            "name": "natural_time",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Image.is_vertical": {
            "name": "is_vertical",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Image.__str__": {
            "name": "__str__",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.__str__": {
            "name": "__str__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Like.__str__": {
            "name": "__str__",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pythonGram-master/nomadgram/images/serializers.py": {
        "ImageSerializer.get_is_liked": {
            "name": "get_is_liked",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "pythonGram-master/nomadgram/images/tests.py": {},
    "pythonGram-master/nomadgram/images/urls.py": {},
    "pythonGram-master/nomadgram/images/views.py": {
        "get_key": {
            "name": "get_key",
            "location": 59,
            "return": [],
            "arguments": {
                "image": []
            }
        },
        "Images.get": {
            "name": "get",
            "location": 16,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "format": [
                    "None"
                ]
            }
        },
        "Images.post": {
            "name": "post",
            "location": 44,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "format": [
                    "None"
                ]
            }
        },
        "LikeImage.get": {
            "name": "get",
            "location": 65,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "image_id": [],
                "format": [
                    "None"
                ]
            }
        },
        "LikeImage.post": {
            "name": "post",
            "location": 88,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "image_id": [],
                "format": [
                    "None"
                ]
            }
        },
        "UnLikeImage.delete": {
            "name": "delete",
            "location": 127,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "image_id": [],
                "format": [
                    "None"
                ]
            }
        },
        "CommentOnImage.post": {
            "name": "post",
            "location": 141,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "image_id": [],
                "format": [
                    "None"
                ]
            }
        },
        "Comment.delete": {
            "name": "delete",
            "location": 169,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "comment_id": [],
                "format": [
                    "None"
                ]
            }
        },
        "Search.get": {
            "name": "get",
            "location": 184,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "format": [
                    "None"
                ]
            }
        },
        "moderateComments.delete": {
            "name": "delete",
            "location": 223,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "image_id": [],
                "comment_id": [],
                "format": [
                    "None"
                ]
            }
        },
        "ImageDetail.find_own_image": {
            "name": "find_own_image",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_id": [],
                "user": []
            }
        },
        "ImageDetail.get": {
            "name": "get",
            "location": 251,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "image_id": [],
                "format": [
                    "None"
                ]
            }
        },
        "ImageDetail.put": {
            "name": "put",
            "location": 264,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "image_id": [],
                "format": [
                    "None"
                ]
            }
        },
        "ImageDetail.delete": {
            "name": "delete",
            "location": 283,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "image_id": [],
                "format": [
                    "None"
                ]
            }
        }
    },
    "pythonGram-master/nomadgram/images/__init__.py": {},
    "pythonGram-master/nomadgram/images/migrations/0001_initial.py": {},
    "pythonGram-master/nomadgram/images/migrations/0002_auto_20181015_1420.py": {},
    "pythonGram-master/nomadgram/images/migrations/0003_auto_20181015_1817.py": {},
    "pythonGram-master/nomadgram/images/migrations/0004_auto_20181016_1222.py": {},
    "pythonGram-master/nomadgram/images/migrations/0005_image_tags.py": {},
    "pythonGram-master/nomadgram/images/migrations/__init__.py": {},
    "pythonGram-master/nomadgram/notifications/admin.py": {},
    "pythonGram-master/nomadgram/notifications/apps.py": {},
    "pythonGram-master/nomadgram/notifications/models.py": {
        "Notification.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pythonGram-master/nomadgram/notifications/serializers.py": {},
    "pythonGram-master/nomadgram/notifications/tests.py": {},
    "pythonGram-master/nomadgram/notifications/urls.py": {},
    "pythonGram-master/nomadgram/notifications/views.py": {
        "create_notification": {
            "name": "create_notification",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "creator": [],
                "to": [],
                "notification_type": [],
                "image": [
                    "None"
                ],
                "comment": [
                    "None"
                ]
            }
        },
        "Notifications.get": {
            "name": "get",
            "location": 12,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "format": [
                    "None"
                ]
            }
        }
    },
    "pythonGram-master/nomadgram/notifications/__init__.py": {},
    "pythonGram-master/nomadgram/notifications/migrations/0001_initial.py": {},
    "pythonGram-master/nomadgram/notifications/migrations/0002_auto_20181017_1726.py": {},
    "pythonGram-master/nomadgram/notifications/migrations/0003_notification_comment.py": {},
    "pythonGram-master/nomadgram/notifications/migrations/0004_auto_20181018_1455.py": {},
    "pythonGram-master/nomadgram/notifications/migrations/0005_auto_20181018_1731.py": {},
    "pythonGram-master/nomadgram/notifications/migrations/__init__.py": {},
    "pythonGram-master/nomadgram/users/adapters.py": {
        "AccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 23,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        },
        "AccountAdapter.save_user": {
            "name": "save_user",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, typing.Any]",
                    "django.http.HttpResponse",
                    "dict[str, dict[str, typing.Any]]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]"
                ],
                "user": [
                    "dict",
                    "django.db.models.query.QuerySet",
                    "Optional[bytes]"
                ],
                "form": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "SocialAccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 42,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ],
                "sociallogin": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        }
    },
    "pythonGram-master/nomadgram/users/admin.py": {
        "MyUserCreationForm.clean_username": {
            "name": "clean_username",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pythonGram-master/nomadgram/users/apps.py": {
        "UsersConfig.ready": {
            "name": "ready",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pythonGram-master/nomadgram/users/forms.py": {
        "UserCreationForm.clean_username": {
            "name": "clean_username",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pythonGram-master/nomadgram/users/models.py": {
        "User.__str__": {
            "name": "__str__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.post_count": {
            "name": "post_count",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.followers_count": {
            "name": "followers_count",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.following_count": {
            "name": "following_count",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pythonGram-master/nomadgram/users/serializers.py": {
        "ListUserSerializer.get_following": {
            "name": "get_following",
            "location": 32,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "UserProfileSerializer.get_is_self": {
            "name": "get_is_self",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "UserProfileSerializer.get_following": {
            "name": "get_following",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "SignUpSerializer.get_cleaned_data": {
            "name": "get_cleaned_data",
            "location": 90,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignUpSerializer.save": {
            "name": "save",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "pythonGram-master/nomadgram/users/signals.py": {
        "user_signed_up": {
            "name": "user_signed_up",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "request": [
                    "typing.Iterable[str]",
                    "django.http.HttpRequest",
                    "Iterable[str]"
                ],
                "user": [
                    "List[int]",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "pythonGram-master/nomadgram/users/urls.py": {},
    "pythonGram-master/nomadgram/users/views.py": {
        "UserProfile.get_user": {
            "name": "get_user",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": []
            }
        },
        "UserProfile.get": {
            "name": "get",
            "location": 20,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "username": [],
                "format": [
                    "None"
                ]
            }
        },
        "UserProfile.put": {
            "name": "put",
            "location": 32,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "username": [],
                "format": [
                    "None"
                ]
            }
        },
        "ExploreUsers.get": {
            "name": "get",
            "location": 54,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "format": [
                    "None"
                ]
            }
        },
        "UnFollowUser.post": {
            "name": "post",
            "location": 66,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "user_id": [],
                "format": [
                    "None"
                ]
            }
        },
        "FollowUser.post": {
            "name": "post",
            "location": 83,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "user_id": [],
                "format": [
                    "None"
                ]
            }
        },
        "UserFollowers.get": {
            "name": "get",
            "location": 106,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "username": [],
                "format": [
                    "None"
                ]
            }
        },
        "UserFollowing.get": {
            "name": "get",
            "location": 123,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "username": [],
                "format": [
                    "None"
                ]
            }
        },
        "Search.get": {
            "name": "get",
            "location": 141,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "format": [
                    "None"
                ]
            }
        },
        "ChangePassword.put": {
            "name": "put",
            "location": 162,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "username": [],
                "format": [
                    "None"
                ]
            }
        },
        "RegisterPush.post": {
            "name": "post",
            "location": 262,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "format": [
                    "None"
                ]
            }
        }
    },
    "pythonGram-master/nomadgram/users/__init__.py": {},
    "pythonGram-master/nomadgram/users/migrations/0001_initial.py": {},
    "pythonGram-master/nomadgram/users/migrations/0002_auto_20181015_1144.py": {},
    "pythonGram-master/nomadgram/users/migrations/0003_auto_20181015_1427.py": {},
    "pythonGram-master/nomadgram/users/migrations/0004_auto_20181016_1222.py": {},
    "pythonGram-master/nomadgram/users/migrations/0005_user_profile_image.py": {},
    "pythonGram-master/nomadgram/users/migrations/0006_auto_20181017_1154.py": {},
    "pythonGram-master/nomadgram/users/migrations/0007_user_push_token.py": {},
    "pythonGram-master/nomadgram/users/migrations/__init__.py": {},
    "pythonGram-master/nomadgram/users/tests/factories.py": {
        "UserFactory.password": {
            "name": "password",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "str",
                    "bool",
                    "typing.Callable[typing.Any, T]",
                    "Callable[[Any], T]"
                ],
                "extracted": [
                    "int",
                    "str",
                    "bool",
                    "typing.Callable[typing.Any, T]",
                    "Callable[[Any], T]"
                ]
            }
        }
    },
    "pythonGram-master/nomadgram/users/tests/test_forms.py": {
        "TestUserCreationForm.test_clean_username": {
            "name": "test_clean_username",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pythonGram-master/nomadgram/users/tests/test_models.py": {
        "test_user_get_absolute_url": {
            "name": "test_user_get_absolute_url",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        }
    },
    "pythonGram-master/nomadgram/users/tests/test_urls.py": {
        "test_detail": {
            "name": "test_detail",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "test_list": {
            "name": "test_list",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update": {
            "name": "test_update",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_redirect": {
            "name": "test_redirect",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pythonGram-master/nomadgram/users/tests/test_views.py": {
        "TestUserUpdateView.test_get_success_url": {
            "name": "test_get_success_url",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserUpdateView.test_get_object": {
            "name": "test_get_object",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserRedirectView.test_get_redirect_url": {
            "name": "test_get_redirect_url",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "bool"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        }
    },
    "pythonGram-master/nomadgram/users/tests/__init__.py": {}
}
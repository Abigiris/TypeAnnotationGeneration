{
    "python_exercism-master/acronym/acronym.py": {
        "abbreviate": {
            "name": "abbreviate",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "words": [
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        }
    },
    "python_exercism-master/acronym/acronym_test.py": {
        "AcronymTest.test_basic": {
            "name": "test_basic",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AcronymTest.test_lowercase_words": {
            "name": "test_lowercase_words",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AcronymTest.test_punctuation": {
            "name": "test_punctuation",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AcronymTest.test_all_caps_word": {
            "name": "test_all_caps_word",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AcronymTest.test_punctuation_without_whitespace": {
            "name": "test_punctuation_without_whitespace",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AcronymTest.test_very_long_abbreviation": {
            "name": "test_very_long_abbreviation",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AcronymTest.test_consecutive_delimiters": {
            "name": "test_consecutive_delimiters",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AcronymTest.test_apostrophes": {
            "name": "test_apostrophes",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AcronymTest.test_underscore_emphasis": {
            "name": "test_underscore_emphasis",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/affine-cipher/affine_cipher.py": {
        "convert": {
            "name": "convert",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int",
                    "float"
                ],
                "a": [
                    "List[int]",
                    "int",
                    "str",
                    "Union[int,List[int]]",
                    "Union[int,float]",
                    "Dict[str,int]"
                ],
                "b": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "encode": {
            "name": "encode",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "plain_text": [
                    "int",
                    "str",
                    "float",
                    "Dict"
                ],
                "a": [
                    "int",
                    "str",
                    "float",
                    "Dict"
                ],
                "b": [
                    "int",
                    "str",
                    "float",
                    "Dict"
                ]
            }
        },
        "decode": {
            "name": "decode",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "ciphered_text": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "a": [
                    "int",
                    "str"
                ],
                "b": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "python_exercism-master/affine-cipher/affine_cipher_test.py": {
        "AffineCipherTest.test_encode_yes": {
            "name": "test_encode_yes",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AffineCipherTest.test_encode_no": {
            "name": "test_encode_no",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AffineCipherTest.test_encode_omg": {
            "name": "test_encode_omg",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AffineCipherTest.test_encode_o_m_g": {
            "name": "test_encode_o_m_g",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AffineCipherTest.test_encode_mindblowingly": {
            "name": "test_encode_mindblowingly",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AffineCipherTest.test_encode_numbers": {
            "name": "test_encode_numbers",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AffineCipherTest.test_encode_deep_thought": {
            "name": "test_encode_deep_thought",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AffineCipherTest.test_encode_all_the_letters": {
            "name": "test_encode_all_the_letters",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AffineCipherTest.test_encode_with_a_not_coprime_to_m": {
            "name": "test_encode_with_a_not_coprime_to_m",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AffineCipherTest.test_decode_exercism": {
            "name": "test_decode_exercism",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AffineCipherTest.test_decode_a_sentence": {
            "name": "test_decode_a_sentence",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AffineCipherTest.test_decode_numbers": {
            "name": "test_decode_numbers",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AffineCipherTest.test_decode_all_the_letters": {
            "name": "test_decode_all_the_letters",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AffineCipherTest.test_decode_with_no_spaces_in_input": {
            "name": "test_decode_with_no_spaces_in_input",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AffineCipherTest.test_decode_with_too_many_spaces": {
            "name": "test_decode_with_too_many_spaces",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AffineCipherTest.test_decode_with_a_not_coprime_to_m": {
            "name": "test_decode_with_a_not_coprime_to_m",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AffineCipherTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 76,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/all-your-base/all_your_base.py": {
        "rebase": {
            "name": "rebase",
            "location": 5,
            "return": [
                "list"
            ],
            "arguments": {
                "input_base": [
                    "int",
                    "float",
                    "str",
                    "Union[str,int,float]"
                ],
                "digits": [
                    "List[int]",
                    "int"
                ],
                "output_base": [
                    "int",
                    "float",
                    "Union[str,int,float]",
                    "bool"
                ]
            }
        },
        "base2dec": {
            "name": "base2dec",
            "location": 17,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "input_base": [
                    "int",
                    "List[int]",
                    "Iterable[T]"
                ],
                "digits": [
                    "List[int]",
                    "int",
                    "Iterable[T]"
                ]
            }
        },
        "dec2base": {
            "name": "dec2base",
            "location": 24,
            "return": [
                "list"
            ],
            "arguments": {
                "number": [
                    "int",
                    "str",
                    "bytes",
                    "list",
                    "Collection"
                ],
                "output_base": [
                    "int",
                    "str",
                    "bytes",
                    "List",
                    "Collection"
                ]
            }
        }
    },
    "python_exercism-master/all-your-base/all_your_base_test.py": {
        "AllYourBaseTest.test_single_bit_one_to_decimal": {
            "name": "test_single_bit_one_to_decimal",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllYourBaseTest.test_binary_to_single_decimal": {
            "name": "test_binary_to_single_decimal",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllYourBaseTest.test_single_decimal_to_binary": {
            "name": "test_single_decimal_to_binary",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllYourBaseTest.test_binary_to_multiple_decimal": {
            "name": "test_binary_to_multiple_decimal",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllYourBaseTest.test_decimal_to_binary": {
            "name": "test_decimal_to_binary",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllYourBaseTest.test_trinary_to_hexadecimal": {
            "name": "test_trinary_to_hexadecimal",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllYourBaseTest.test_hexadecimal_to_trinary": {
            "name": "test_hexadecimal_to_trinary",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllYourBaseTest.test_15_bit_integer": {
            "name": "test_15_bit_integer",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllYourBaseTest.test_empty_list": {
            "name": "test_empty_list",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllYourBaseTest.test_single_zero": {
            "name": "test_single_zero",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllYourBaseTest.test_multiple_zeros": {
            "name": "test_multiple_zeros",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllYourBaseTest.test_leading_zeros": {
            "name": "test_leading_zeros",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllYourBaseTest.test_input_base_is_one": {
            "name": "test_input_base_is_one",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllYourBaseTest.test_input_base_is_zero": {
            "name": "test_input_base_is_zero",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllYourBaseTest.test_input_base_is_negative": {
            "name": "test_input_base_is_negative",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllYourBaseTest.test_negative_digit": {
            "name": "test_negative_digit",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllYourBaseTest.test_invalid_positive_digit": {
            "name": "test_invalid_positive_digit",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllYourBaseTest.test_output_base_is_one": {
            "name": "test_output_base_is_one",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllYourBaseTest.test_output_base_is_zero": {
            "name": "test_output_base_is_zero",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllYourBaseTest.test_output_base_is_negative": {
            "name": "test_output_base_is_negative",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllYourBaseTest.test_both_bases_are_negative": {
            "name": "test_both_bases_are_negative",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllYourBaseTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 82,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/allergies/allergies.py": {
        "Allergies.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "score": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Allergies.allergic_to": {
            "name": "allergic_to",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "List[float]",
                    "bool"
                ]
            }
        },
        "Allergies.lst": {
            "name": "lst",
            "location": 29,
            "return": [
                "List",
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/allergies/allergies_test.py": {
        "AllergiesTest.test_eggs_not_allergic_to_anything": {
            "name": "test_eggs_not_allergic_to_anything",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_allergic_only_to_eggs": {
            "name": "test_allergic_only_to_eggs",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_allergic_to_eggs_and_something_else": {
            "name": "test_allergic_to_eggs_and_something_else",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_allergic_to_something_but_not_eggs": {
            "name": "test_allergic_to_something_but_not_eggs",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_eggs_allergic_to_everything": {
            "name": "test_eggs_allergic_to_everything",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_peanuts_not_allergic_to_anything": {
            "name": "test_peanuts_not_allergic_to_anything",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_allergic_only_to_peanuts": {
            "name": "test_allergic_only_to_peanuts",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_allergic_to_peanuts_and_something_else": {
            "name": "test_allergic_to_peanuts_and_something_else",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_allergic_to_something_but_not_peanuts": {
            "name": "test_allergic_to_something_but_not_peanuts",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_peanuts_allergic_to_everything": {
            "name": "test_peanuts_allergic_to_everything",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_shellfish_not_allergic_to_anything": {
            "name": "test_shellfish_not_allergic_to_anything",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_allergic_only_to_shellfish": {
            "name": "test_allergic_only_to_shellfish",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_allergic_to_shellfish_and_something_else": {
            "name": "test_allergic_to_shellfish_and_something_else",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_allergic_to_something_but_not_shellfish": {
            "name": "test_allergic_to_something_but_not_shellfish",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_shellfish_allergic_to_everything": {
            "name": "test_shellfish_allergic_to_everything",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_strawberries_not_allergic_to_anything": {
            "name": "test_strawberries_not_allergic_to_anything",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_allergic_only_to_strawberries": {
            "name": "test_allergic_only_to_strawberries",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_allergic_to_strawberries_and_something_else": {
            "name": "test_allergic_to_strawberries_and_something_else",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_allergic_to_something_but_not_strawberries": {
            "name": "test_allergic_to_something_but_not_strawberries",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_strawberries_allergic_to_everything": {
            "name": "test_strawberries_allergic_to_everything",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_tomatoes_not_allergic_to_anything": {
            "name": "test_tomatoes_not_allergic_to_anything",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_allergic_only_to_tomatoes": {
            "name": "test_allergic_only_to_tomatoes",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_allergic_to_tomatoes_and_something_else": {
            "name": "test_allergic_to_tomatoes_and_something_else",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_allergic_to_something_but_not_tomatoes": {
            "name": "test_allergic_to_something_but_not_tomatoes",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_tomatoes_allergic_to_everything": {
            "name": "test_tomatoes_allergic_to_everything",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_chocolate_not_allergic_to_anything": {
            "name": "test_chocolate_not_allergic_to_anything",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_allergic_only_to_chocolate": {
            "name": "test_allergic_only_to_chocolate",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_allergic_to_chocolate_and_something_else": {
            "name": "test_allergic_to_chocolate_and_something_else",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_allergic_to_something_but_not_chocolate": {
            "name": "test_allergic_to_something_but_not_chocolate",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_chocolate_allergic_to_everything": {
            "name": "test_chocolate_allergic_to_everything",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_pollen_not_allergic_to_anything": {
            "name": "test_pollen_not_allergic_to_anything",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_allergic_only_to_pollen": {
            "name": "test_allergic_only_to_pollen",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_allergic_to_pollen_and_something_else": {
            "name": "test_allergic_to_pollen_and_something_else",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_allergic_to_something_but_not_pollen": {
            "name": "test_allergic_to_something_but_not_pollen",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_pollen_allergic_to_everything": {
            "name": "test_pollen_allergic_to_everything",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_cats_not_allergic_to_anything": {
            "name": "test_cats_not_allergic_to_anything",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_allergic_only_to_cats": {
            "name": "test_allergic_only_to_cats",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_allergic_to_cats_and_something_else": {
            "name": "test_allergic_to_cats_and_something_else",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_allergic_to_something_but_not_cats": {
            "name": "test_allergic_to_something_but_not_cats",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_cats_allergic_to_everything": {
            "name": "test_cats_allergic_to_everything",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_no_allergies": {
            "name": "test_no_allergies",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_just_eggs": {
            "name": "test_just_eggs",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_just_peanuts": {
            "name": "test_just_peanuts",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_just_strawberries": {
            "name": "test_just_strawberries",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_eggs_and_peanuts": {
            "name": "test_eggs_and_peanuts",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_more_than_eggs_but_not_peanuts": {
            "name": "test_more_than_eggs_but_not_peanuts",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_lots_of_stuff": {
            "name": "test_lots_of_stuff",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_everything": {
            "name": "test_everything",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllergiesTest.test_no_allergen_score_parts": {
            "name": "test_no_allergen_score_parts",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/alphametics/alphametics.py": {
        "parse_number": {
            "name": "parse_number",
            "location": 6,
            "return": [
                "int"
            ],
            "arguments": {
                "number": [
                    "Dict",
                    "List",
                    "Dict[str,str]",
                    "Sequence",
                    "str"
                ],
                "value_dict": [
                    "List",
                    "str",
                    "Dict",
                    "Sequence",
                    "Dict[str,str]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 11,
            "return": [
                "Optional[Dict[(nothing, int)]]"
            ],
            "arguments": {
                "puzzle": [
                    "str",
                    "Set[str]",
                    "float"
                ]
            }
        }
    },
    "python_exercism-master/alphametics/alphametics_test.py": {
        "AlphameticsTest.test_puzzle_with_three_letters": {
            "name": "test_puzzle_with_three_letters",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlphameticsTest.test_solution_must_have_unique_value_for_each_letter": {
            "name": "test_solution_must_have_unique_value_for_each_letter",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlphameticsTest.test_leading_zero_solution_is_invalid": {
            "name": "test_leading_zero_solution_is_invalid",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlphameticsTest.test_puzzle_with_two_digits_final_carry": {
            "name": "test_puzzle_with_two_digits_final_carry",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlphameticsTest.test_puzzle_with_four_letters": {
            "name": "test_puzzle_with_four_letters",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlphameticsTest.test_puzzle_with_six_letters": {
            "name": "test_puzzle_with_six_letters",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlphameticsTest.test_puzzle_with_seven_letters": {
            "name": "test_puzzle_with_seven_letters",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlphameticsTest.test_puzzle_with_eight_letters": {
            "name": "test_puzzle_with_eight_letters",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlphameticsTest.test_puzzle_with_ten_letters": {
            "name": "test_puzzle_with_ten_letters",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlphameticsTest.test_puzzle_with_ten_letters_and_199_addends": {
            "name": "test_puzzle_with_ten_letters_and_199_addends",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/anagram/anagram.py": {
        "find_anagrams": {
            "name": "find_anagrams",
            "location": 4,
            "return": [
                "list"
            ],
            "arguments": {
                "word": [
                    "str",
                    "int",
                    "Optional[Dict]"
                ],
                "candidates": [
                    "int"
                ]
            }
        }
    },
    "python_exercism-master/anagram/anagram_test.py": {
        "AnagramTest.test_no_matches": {
            "name": "test_no_matches",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnagramTest.test_detects_two_anagrams": {
            "name": "test_detects_two_anagrams",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnagramTest.test_does_not_detect_anagram_subsets": {
            "name": "test_does_not_detect_anagram_subsets",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnagramTest.test_detects_anagram": {
            "name": "test_detects_anagram",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnagramTest.test_detects_three_anagrams": {
            "name": "test_detects_three_anagrams",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnagramTest.test_detects_multiple_anagrams_with_different_case": {
            "name": "test_detects_multiple_anagrams_with_different_case",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnagramTest.test_does_not_detect_non_anagrams_with_identical_checksum": {
            "name": "test_does_not_detect_non_anagrams_with_identical_checksum",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnagramTest.test_detects_anagrams_case_insensitively": {
            "name": "test_detects_anagrams_case_insensitively",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnagramTest.test_detects_anagrams_using_case_insensitive_subject": {
            "name": "test_detects_anagrams_using_case_insensitive_subject",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnagramTest.test_detects_anagrams_using_case_insensitive_possible_matches": {
            "name": "test_detects_anagrams_using_case_insensitive_possible_matches",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnagramTest.test_does_not_detect_an_anagram_if_the_original_word_is_repeated": {
            "name": "test_does_not_detect_an_anagram_if_the_original_word_is_repeated",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnagramTest.test_anagrams_must_use_all_letters_exactly_once": {
            "name": "test_anagrams_must_use_all_letters_exactly_once",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnagramTest.test_words_are_not_anagrams_of_themselves_case_insensitive": {
            "name": "test_words_are_not_anagrams_of_themselves_case_insensitive",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnagramTest.test_words_other_than_themselves_can_be_anagrams": {
            "name": "test_words_other_than_themselves_can_be_anagrams",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/armstrong-numbers/armstrong_numbers.py": {
        "is_armstrong_number": {
            "name": "is_armstrong_number",
            "location": 1,
            "return": [
                "bool"
            ],
            "arguments": {
                "number": [
                    "int",
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        }
    },
    "python_exercism-master/armstrong-numbers/armstrong_numbers_test.py": {
        "ArmstrongNumbersTest.test_zero_is_an_armstrong_number": {
            "name": "test_zero_is_an_armstrong_number",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArmstrongNumbersTest.test_single_digit_numbers_are_armstrong_numbers": {
            "name": "test_single_digit_numbers_are_armstrong_numbers",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArmstrongNumbersTest.test_there_are_no_2_digit_armstrong_numbers": {
            "name": "test_there_are_no_2_digit_armstrong_numbers",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArmstrongNumbersTest.test_three_digit_number_that_is_an_armstrong_number": {
            "name": "test_three_digit_number_that_is_an_armstrong_number",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArmstrongNumbersTest.test_three_digit_number_that_is_not_an_armstrong_number": {
            "name": "test_three_digit_number_that_is_not_an_armstrong_number",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArmstrongNumbersTest.test_four_digit_number_that_is_an_armstrong_number": {
            "name": "test_four_digit_number_that_is_an_armstrong_number",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArmstrongNumbersTest.test_four_digit_number_that_is_not_an_armstrong_number": {
            "name": "test_four_digit_number_that_is_not_an_armstrong_number",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArmstrongNumbersTest.test_seven_digit_number_that_is_an_armstrong_number": {
            "name": "test_seven_digit_number_that_is_an_armstrong_number",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArmstrongNumbersTest.test_seven_digit_number_that_is_not_an_armstrong_number": {
            "name": "test_seven_digit_number_that_is_not_an_armstrong_number",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/atbash-cipher/atbash_cipher.py": {
        "encode": {
            "name": "encode",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "plain_text": [
                    "str"
                ]
            }
        },
        "decode": {
            "name": "decode",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "ciphered_text": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "python_exercism-master/atbash-cipher/atbash_cipher_test.py": {
        "AtbashCipherTest.test_encode_yes": {
            "name": "test_encode_yes",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtbashCipherTest.test_encode_no": {
            "name": "test_encode_no",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtbashCipherTest.test_encode_omg": {
            "name": "test_encode_omg",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtbashCipherTest.test_encode_spaces": {
            "name": "test_encode_spaces",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtbashCipherTest.test_encode_mindblowingly": {
            "name": "test_encode_mindblowingly",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtbashCipherTest.test_encode_numbers": {
            "name": "test_encode_numbers",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtbashCipherTest.test_encode_deep_thought": {
            "name": "test_encode_deep_thought",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtbashCipherTest.test_encode_all_the_letters": {
            "name": "test_encode_all_the_letters",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtbashCipherTest.test_decode_exercism": {
            "name": "test_decode_exercism",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtbashCipherTest.test_decode_a_sentence": {
            "name": "test_decode_a_sentence",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtbashCipherTest.test_decode_numbers": {
            "name": "test_decode_numbers",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtbashCipherTest.test_decode_all_the_letters": {
            "name": "test_decode_all_the_letters",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtbashCipherTest.test_decode_with_too_many_spaces": {
            "name": "test_decode_with_too_many_spaces",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtbashCipherTest.test_decode_with_no_spaces": {
            "name": "test_decode_with_no_spaces",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/bank-account/bank_account.py": {
        "BankAccount.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BankAccount.IsAccountOpen": {
            "name": "IsAccountOpen",
            "location": 10,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "BankAccount"
                ]
            }
        },
        "BankAccount.get_balance": {
            "name": "get_balance",
            "location": 19,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BankAccount.open": {
            "name": "open",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BankAccount.deposit": {
            "name": "deposit",
            "location": 30,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "Optional[int]",
                    "Optional[Sequence[T]]",
                    "bytes"
                ]
            }
        },
        "BankAccount.withdraw": {
            "name": "withdraw",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int"
                ]
            }
        },
        "BankAccount.close": {
            "name": "close",
            "location": 48,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BankAccount.IsAccountOpen.wrapper": {
            "name": "wrapper",
            "location": 11,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/bank-account/bank_account_test.py": {
        "BankAccountTest.test_newly_opened_account_has_zero_balance": {
            "name": "test_newly_opened_account_has_zero_balance",
            "location": 10,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BankAccountTest.test_can_deposit_money": {
            "name": "test_can_deposit_money",
            "location": 15,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BankAccountTest.test_can_deposit_money_sequentially": {
            "name": "test_can_deposit_money_sequentially",
            "location": 21,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BankAccountTest.test_can_withdraw_money": {
            "name": "test_can_withdraw_money",
            "location": 29,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BankAccountTest.test_can_withdraw_money_sequentially": {
            "name": "test_can_withdraw_money_sequentially",
            "location": 37,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BankAccountTest.test_checking_balance_of_closed_account_throws_error": {
            "name": "test_checking_balance_of_closed_account_throws_error",
            "location": 46,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BankAccountTest.test_deposit_into_closed_account": {
            "name": "test_deposit_into_closed_account",
            "location": 54,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BankAccountTest.test_withdraw_from_closed_account": {
            "name": "test_withdraw_from_closed_account",
            "location": 62,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BankAccountTest.test_close_already_closed_account": {
            "name": "test_close_already_closed_account",
            "location": 70,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BankAccountTest.test_open_already_opened_account": {
            "name": "test_open_already_opened_account",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BankAccountTest.test_reopened_account_does_not_retain_balance": {
            "name": "test_reopened_account_does_not_retain_balance",
            "location": 81,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BankAccountTest.test_cannot_withdraw_more_than_deposited": {
            "name": "test_cannot_withdraw_more_than_deposited",
            "location": 89,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BankAccountTest.test_cannot_withdraw_negative": {
            "name": "test_cannot_withdraw_negative",
            "location": 97,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BankAccountTest.test_cannot_deposit_negative": {
            "name": "test_cannot_deposit_negative",
            "location": 105,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BankAccountTest.test_can_handle_concurrent_transactions": {
            "name": "test_can_handle_concurrent_transactions",
            "location": 112,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BankAccountTest.adjust_balance_concurrently": {
            "name": "adjust_balance_concurrently",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "BankAccountTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 142,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        },
        "BankAccountTest.adjust_balance_concurrently.transact": {
            "name": "transact",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python_exercism-master/beer-song/beer_song.py": {
        "recite": {
            "name": "recite",
            "location": 7,
            "return": [
                "list"
            ],
            "arguments": {
                "start": [
                    "int",
                    "float",
                    "Sequence[int]"
                ],
                "take": [
                    "int",
                    "float",
                    "Sequence[int]"
                ]
            }
        },
        "recite_one_verse": {
            "name": "recite_one_verse",
            "location": 14,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "verse": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "bottle_string": {
            "name": "bottle_string",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "verse": [
                    "int",
                    "bool",
                    "str",
                    "Union[int,Tuple[int,...]]"
                ]
            }
        },
        "action_string": {
            "name": "action_string",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "verse": [
                    "int",
                    "bool",
                    "str",
                    "Union[int,Tuple[int,...]]"
                ]
            }
        }
    },
    "python_exercism-master/beer-song/beer_song_test.py": {
        "BeerSongTest.test_first_generic_verse": {
            "name": "test_first_generic_verse",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeerSongTest.test_last_generic_verse": {
            "name": "test_last_generic_verse",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeerSongTest.test_verse_with_2_bottles": {
            "name": "test_verse_with_2_bottles",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeerSongTest.test_verse_with_1_bottle": {
            "name": "test_verse_with_1_bottle",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeerSongTest.test_verse_with_0_bottles": {
            "name": "test_verse_with_0_bottles",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeerSongTest.test_first_two_verses": {
            "name": "test_first_two_verses",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeerSongTest.test_last_three_verses": {
            "name": "test_last_three_verses",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeerSongTest.test_all_verses": {
            "name": "test_all_verses",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/binary-search/binary_search.py": {
        "find": {
            "name": "find",
            "location": 5,
            "return": [
                "int"
            ],
            "arguments": {
                "search_list": [
                    "List[int]",
                    "List[str]",
                    "list",
                    "List[dict]",
                    "int",
                    "Set[str]"
                ],
                "value": [
                    "int",
                    "str",
                    "List[bytes]",
                    "List[Union[int,float]]",
                    "List[int]",
                    "List",
                    "bytes"
                ]
            }
        }
    },
    "python_exercism-master/binary-search/binary_search_test.py": {
        "BinarySearchTest.test_finds_a_value_in_an_array_with_one_element": {
            "name": "test_finds_a_value_in_an_array_with_one_element",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTest.test_finds_a_value_in_the_middle_of_an_array": {
            "name": "test_finds_a_value_in_the_middle_of_an_array",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTest.test_finds_a_value_at_the_beginning_of_an_array": {
            "name": "test_finds_a_value_at_the_beginning_of_an_array",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTest.test_finds_a_value_at_the_end_of_an_array": {
            "name": "test_finds_a_value_at_the_end_of_an_array",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTest.test_finds_a_value_in_an_array_of_odd_length": {
            "name": "test_finds_a_value_in_an_array_of_odd_length",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTest.test_finds_a_value_in_an_array_of_even_length": {
            "name": "test_finds_a_value_in_an_array_of_even_length",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTest.test_identifies_that_a_value_is_not_included_in_the_array": {
            "name": "test_identifies_that_a_value_is_not_included_in_the_array",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTest.test_a_value_smaller_than_the_array_s_smallest_value_is_not_found": {
            "name": "test_a_value_smaller_than_the_array_s_smallest_value_is_not_found",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTest.test_a_value_larger_than_the_array_s_largest_value_is_not_found": {
            "name": "test_a_value_larger_than_the_array_s_largest_value_is_not_found",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTest.test_nothing_is_found_in_an_empty_array": {
            "name": "test_nothing_is_found_in_an_empty_array",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTest.test_nothing_is_found_when_the_left_and_right_bounds_cross": {
            "name": "test_nothing_is_found_when_the_left_and_right_bounds_cross",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 50,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/binary-search-tree/binary_search_tree.py": {
        "TreeNode.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str,Any]",
                    "bytes",
                    "Dict[str,str]",
                    "List",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "None"
                ],
                "left": [
                    "List[str]",
                    "str",
                    "bool"
                ],
                "right": [
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "TreeNode.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeNode.add": {
            "name": "add",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "Optional",
                    "T",
                    "List",
                    "Optional[List]",
                    "None",
                    "Union[type,Tuple[type,...]]",
                    "Type",
                    "Tuple[Union[Type,...]]"
                ]
            }
        },
        "BinarySearchTree.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree_data": [
                    "OrderedDict",
                    "Type[T]"
                ]
            }
        },
        "BinarySearchTree.data": {
            "name": "data",
            "location": 45,
            "return": [
                "TreeNode"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTree.sorted_data": {
            "name": "sorted_data",
            "location": 49,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTree.add": {
            "name": "add",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Dict",
                    "Dict[str,str]",
                    "Union[bytes,str]",
                    "bytes"
                ]
            }
        }
    },
    "python_exercism-master/binary-search-tree/binary_search_tree_test.py": {
        "BinarySearchTreeTest.test_data_is_retained": {
            "name": "test_data_is_retained",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTreeTest.test_smaller_number_at_left_node": {
            "name": "test_smaller_number_at_left_node",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTreeTest.test_same_number_at_left_node": {
            "name": "test_same_number_at_left_node",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTreeTest.test_greater_number_at_right_node": {
            "name": "test_greater_number_at_right_node",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTreeTest.test_can_create_complex_tree": {
            "name": "test_can_create_complex_tree",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTreeTest.test_can_sort_single_number": {
            "name": "test_can_sort_single_number",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTreeTest.test_can_sort_if_second_number_is_smaller_than_first": {
            "name": "test_can_sort_if_second_number_is_smaller_than_first",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTreeTest.test_can_sort_if_second_number_is_same_as_first": {
            "name": "test_can_sort_if_second_number_is_same_as_first",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTreeTest.test_can_sort_if_second_number_is_greater_than_first": {
            "name": "test_can_sort_if_second_number_is_greater_than_first",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTreeTest.test_can_sort_complex_tree": {
            "name": "test_can_sort_complex_tree",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTreeTest.assertTreeEqual": {
            "name": "assertTreeEqual",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree_one": [
                    "str",
                    "Tuple",
                    "Dict"
                ],
                "tree_two": [
                    "str",
                    "Tuple",
                    "Dict"
                ]
            }
        },
        "BinarySearchTreeTest.compare_tree": {
            "name": "compare_tree",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree_one": [
                    "str",
                    "Callable[[str],None]",
                    "Callable[str,None]"
                ],
                "tree_two": [
                    "str",
                    "Callable[[str],None]",
                    "Callable[str,None]"
                ]
            }
        }
    },
    "python_exercism-master/black-jack/black_jack.py": {
        "value_of_card": {
            "name": "value_of_card",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {
                "card": [
                    "Union[str, int]",
                    "int"
                ]
            }
        },
        "higher_card": {
            "name": "higher_card",
            "location": 22,
            "return": [
                "Union[(Tuple[(_T0, _T1)], _T0, _T1)]"
            ],
            "arguments": {
                "card_one": [
                    "int",
                    "str",
                    "T",
                    "bool"
                ],
                "card_two": [
                    "int",
                    "str",
                    "T",
                    "bool"
                ]
            }
        },
        "value_of_ace": {
            "name": "value_of_ace",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "card_one": [
                    "bool",
                    "str"
                ],
                "card_two": [
                    "bool",
                    "str"
                ]
            }
        },
        "is_blackjack": {
            "name": "is_blackjack",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "card_one": [
                    "Callable[...,None]"
                ],
                "card_two": [
                    "Callable[...,None]"
                ]
            }
        },
        "can_split_pairs": {
            "name": "can_split_pairs",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "card_one": [
                    "bool",
                    "str"
                ],
                "card_two": [
                    "bool",
                    "str"
                ]
            }
        },
        "can_double_down": {
            "name": "can_double_down",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "card_one": [
                    "str",
                    "int",
                    "bool"
                ],
                "card_two": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "python_exercism-master/black-jack/black_jack_test.py": {
        "BlackJackTest.test_value_of_card": {
            "name": "test_value_of_card",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackJackTest.test_higher_card": {
            "name": "test_higher_card",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackJackTest.test_value_of_ace": {
            "name": "test_value_of_ace",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackJackTest.test_is_blackjack": {
            "name": "test_is_blackjack",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackJackTest.test_can_split_pairs": {
            "name": "test_can_split_pairs",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackJackTest.test_can_double_down": {
            "name": "test_can_double_down",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/bob/bob.py": {
        "response": {
            "name": "response",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "phrase": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "python_exercism-master/bob/bob_test.py": {
        "BobTest.test_stating_something": {
            "name": "test_stating_something",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobTest.test_shouting": {
            "name": "test_shouting",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobTest.test_shouting_gibberish": {
            "name": "test_shouting_gibberish",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobTest.test_asking_a_question": {
            "name": "test_asking_a_question",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobTest.test_asking_a_numeric_question": {
            "name": "test_asking_a_numeric_question",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobTest.test_asking_gibberish": {
            "name": "test_asking_gibberish",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobTest.test_talking_forcefully": {
            "name": "test_talking_forcefully",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobTest.test_using_acronyms_in_regular_speech": {
            "name": "test_using_acronyms_in_regular_speech",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobTest.test_forceful_question": {
            "name": "test_forceful_question",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobTest.test_shouting_numbers": {
            "name": "test_shouting_numbers",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobTest.test_no_letters": {
            "name": "test_no_letters",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobTest.test_question_with_no_letters": {
            "name": "test_question_with_no_letters",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobTest.test_shouting_with_special_characters": {
            "name": "test_shouting_with_special_characters",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobTest.test_shouting_with_no_exclamation_mark": {
            "name": "test_shouting_with_no_exclamation_mark",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobTest.test_statement_containing_question_mark": {
            "name": "test_statement_containing_question_mark",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobTest.test_non_letters_with_question": {
            "name": "test_non_letters_with_question",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobTest.test_prattling_on": {
            "name": "test_prattling_on",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobTest.test_silence": {
            "name": "test_silence",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobTest.test_prolonged_silence": {
            "name": "test_prolonged_silence",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobTest.test_alternate_silence": {
            "name": "test_alternate_silence",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobTest.test_multiple_line_question": {
            "name": "test_multiple_line_question",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobTest.test_starting_with_whitespace": {
            "name": "test_starting_with_whitespace",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobTest.test_ending_with_whitespace": {
            "name": "test_ending_with_whitespace",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobTest.test_other_whitespace": {
            "name": "test_other_whitespace",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobTest.test_non_question_ending_with_whitespace": {
            "name": "test_non_question_ending_with_whitespace",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/book-store/book_store.py": {
        "total": {
            "name": "total",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "basket": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "optimal_cost": {
            "name": "optimal_cost",
            "location": 18,
            "return": [
                "int",
                "float",
                "Callable",
                "str"
            ],
            "arguments": {
                "book_quantities": [
                    "Tuple[Union[int,int]]",
                    "int",
                    "bool",
                    "Tuple[int,int]",
                    "Hashable"
                ]
            }
        }
    },
    "python_exercism-master/book-store/book_store_test.py": {
        "BookStoreTest.test_only_a_single_book": {
            "name": "test_only_a_single_book",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BookStoreTest.test_two_of_the_same_book": {
            "name": "test_two_of_the_same_book",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BookStoreTest.test_empty_basket": {
            "name": "test_empty_basket",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BookStoreTest.test_two_different_books": {
            "name": "test_two_different_books",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BookStoreTest.test_three_different_books": {
            "name": "test_three_different_books",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BookStoreTest.test_four_different_books": {
            "name": "test_four_different_books",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BookStoreTest.test_five_different_books": {
            "name": "test_five_different_books",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BookStoreTest.test_two_groups_of_four_is_cheaper_than_group_of_five_plus_group_of_three": {
            "name": "test_two_groups_of_four_is_cheaper_than_group_of_five_plus_group_of_three",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BookStoreTest.test_two_groups_of_four_is_cheaper_than_groups_of_five_and_three": {
            "name": "test_two_groups_of_four_is_cheaper_than_groups_of_five_and_three",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BookStoreTest.test_group_of_four_plus_group_of_two_is_cheaper_than_two_groups_of_three": {
            "name": "test_group_of_four_plus_group_of_two_is_cheaper_than_two_groups_of_three",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BookStoreTest.test_two_each_of_first_4_books_and_1_copy_each_of_rest": {
            "name": "test_two_each_of_first_4_books_and_1_copy_each_of_rest",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BookStoreTest.test_two_copies_of_each_book": {
            "name": "test_two_copies_of_each_book",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BookStoreTest.test_three_copies_of_first_book_and_2_each_of_remaining": {
            "name": "test_three_copies_of_first_book_and_2_each_of_remaining",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BookStoreTest.test_three_each_of_first_2_books_and_2_each_of_remaining_books": {
            "name": "test_three_each_of_first_2_books_and_2_each_of_remaining_books",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BookStoreTest.test_four_groups_of_four_are_cheaper_than_two_groups_each_of_five_and_three": {
            "name": "test_four_groups_of_four_are_cheaper_than_two_groups_each_of_five_and_three",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BookStoreTest.test_two_groups_of_four_and_a_group_of_five": {
            "name": "test_two_groups_of_four_and_a_group_of_five",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BookStoreTest.test_shuffled_book_order": {
            "name": "test_shuffled_book_order",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/book-store-hard/book_store_hard.py": {
        "optimal_cost": {
            "name": "optimal_cost",
            "location": 12,
            "return": [
                "int",
                "float",
                "Callable",
                "str"
            ],
            "arguments": {
                "book_quantities": [
                    "Tuple[Union[int,int]]",
                    "int",
                    "bool",
                    "Tuple[int,int]",
                    "Hashable"
                ],
                "discount_rate": [
                    "int",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "optimal_cost1": {
            "name": "optimal_cost1",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "float",
                "str",
                "None"
            ],
            "arguments": {
                "book_quantities": [
                    "Tuple[Union[int,int]]",
                    "int",
                    "Tuple[int,int]"
                ],
                "discount_rate": [
                    "int",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/book-store-hard/book_store_hard_test.py": {
        "BookStoreTest.test_two_methods": {
            "name": "test_two_methods",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "list1": [
                    "List[str]",
                    "Sequence[object]"
                ],
                "list2": [
                    "List[str]",
                    "Sequence[object]"
                ]
            }
        }
    },
    "python_exercism-master/bowling/bowling.py": {
        "BowlingGame.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingGame.roll": {
            "name": "roll",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pins": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BowlingGame.score": {
            "name": "score",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/bowling/bowling_test.py": {
        "BowlingTest.roll_new_game": {
            "name": "roll_new_game",
            "location": 9,
            "return": [
                "bowling.BowlingGame"
            ],
            "arguments": {
                "self": [],
                "rolls": [
                    "List[str]",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "BowlingTest.test_should_be_able_to_score_a_game_with_all_zeros": {
            "name": "test_should_be_able_to_score_a_game_with_all_zeros",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_should_be_able_to_score_a_game_with_no_strikes_or_spares": {
            "name": "test_should_be_able_to_score_a_game_with_no_strikes_or_spares",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_a_spare_followed_by_zeros_is_worth_ten_points": {
            "name": "test_a_spare_followed_by_zeros_is_worth_ten_points",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_points_scored_in_the_roll_after_a_spare_are_counted_twice": {
            "name": "test_points_scored_in_the_roll_after_a_spare_are_counted_twice",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_consecutive_spares_each_get_a_one_roll_bonus": {
            "name": "test_consecutive_spares_each_get_a_one_roll_bonus",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_a_spare_in_the_last_frame_gets_a_one_roll_bonus_that_is_counted_once": {
            "name": "test_a_spare_in_the_last_frame_gets_a_one_roll_bonus_that_is_counted_once",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_a_strike_earns_ten_points_in_a_frame_with_a_single_roll": {
            "name": "test_a_strike_earns_ten_points_in_a_frame_with_a_single_roll",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_points_scored_in_the_two_rolls_after_a_strike_are_counted_twice_as_a_bonus": {
            "name": "test_points_scored_in_the_two_rolls_after_a_strike_are_counted_twice_as_a_bonus",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_consecutive_strikes_each_get_the_two_roll_bonus": {
            "name": "test_consecutive_strikes_each_get_the_two_roll_bonus",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_a_strike_in_the_last_frame_gets_a_two_roll_bonus_that_is_counted_once": {
            "name": "test_a_strike_in_the_last_frame_gets_a_two_roll_bonus_that_is_counted_once",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_rolling_a_spare_with_the_two_roll_bonus_does_not_get_a_bonus_roll": {
            "name": "test_rolling_a_spare_with_the_two_roll_bonus_does_not_get_a_bonus_roll",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_strikes_with_the_two_roll_bonus_do_not_get_bonus_rolls": {
            "name": "test_strikes_with_the_two_roll_bonus_do_not_get_bonus_rolls",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_a_strike_with_the_one_roll_bonus_after_a_spare_in_the_last_frame_does_not_get_a_bonus": {
            "name": "test_a_strike_with_the_one_roll_bonus_after_a_spare_in_the_last_frame_does_not_get_a_bonus",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_all_strikes_is_a_perfect_game": {
            "name": "test_all_strikes_is_a_perfect_game",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_rolls_cannot_score_negative_points": {
            "name": "test_rolls_cannot_score_negative_points",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_a_roll_cannot_score_more_than_10_points": {
            "name": "test_a_roll_cannot_score_more_than_10_points",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_two_rolls_in_a_frame_cannot_score_more_than_10_points": {
            "name": "test_two_rolls_in_a_frame_cannot_score_more_than_10_points",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_bonus_roll_after_a_strike_in_the_last_frame_cannot_score_more_than_10_points": {
            "name": "test_bonus_roll_after_a_strike_in_the_last_frame_cannot_score_more_than_10_points",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_two_bonus_rolls_after_a_strike_in_the_last_frame_cannot_score_more_than_10_points": {
            "name": "test_two_bonus_rolls_after_a_strike_in_the_last_frame_cannot_score_more_than_10_points",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_two_bonus_rolls_after_a_strike_in_the_last_frame_can_score_more_than_10_points_if_one_is_a_strike": {
            "name": "test_two_bonus_rolls_after_a_strike_in_the_last_frame_can_score_more_than_10_points_if_one_is_a_strike",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_the_second_bonus_rolls_after_a_strike_in_the_last_frame_cannot_be_a_strike_if_the_first_one_is_not_a_strike": {
            "name": "test_the_second_bonus_rolls_after_a_strike_in_the_last_frame_cannot_be_a_strike_if_the_first_one_is_not_a_strike",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_second_bonus_roll_after_a_strike_in_the_last_frame_cannot_score_more_than_10_points": {
            "name": "test_second_bonus_roll_after_a_strike_in_the_last_frame_cannot_score_more_than_10_points",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_an_unstarted_game_cannot_be_scored": {
            "name": "test_an_unstarted_game_cannot_be_scored",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_an_incomplete_game_cannot_be_scored": {
            "name": "test_an_incomplete_game_cannot_be_scored",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_cannot_roll_if_game_already_has_ten_frames": {
            "name": "test_cannot_roll_if_game_already_has_ten_frames",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_bonus_rolls_for_a_strike_in_the_last_frame_must_be_rolled_before_score_can_be_calculated": {
            "name": "test_bonus_rolls_for_a_strike_in_the_last_frame_must_be_rolled_before_score_can_be_calculated",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_both_bonus_rolls_for_a_strike_in_the_last_frame_must_be_rolled_before_score_can_be_calculated": {
            "name": "test_both_bonus_rolls_for_a_strike_in_the_last_frame_must_be_rolled_before_score_can_be_calculated",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_bonus_roll_for_a_spare_in_the_last_frame_must_be_rolled_before_score_can_be_calculated": {
            "name": "test_bonus_roll_for_a_spare_in_the_last_frame_must_be_rolled_before_score_can_be_calculated",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_cannot_roll_after_bonus_roll_for_spare": {
            "name": "test_cannot_roll_after_bonus_roll_for_spare",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.test_cannot_roll_after_bonus_rolls_for_strike": {
            "name": "test_cannot_roll_after_bonus_rolls_for_strike",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BowlingTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 203,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/bracket-push/bracket_push.py": {
        "is_paired": {
            "name": "is_paired",
            "location": 5,
            "return": [
                "bool"
            ],
            "arguments": {
                "input_string": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Iterator[str]",
                    "None",
                    "Iterator"
                ]
            }
        }
    },
    "python_exercism-master/bracket-push/bracket_push_test.py": {
        "BracketPushTest.test_paired_square_brackets": {
            "name": "test_paired_square_brackets",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BracketPushTest.test_empty_string": {
            "name": "test_empty_string",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BracketPushTest.test_unpaired_brackets": {
            "name": "test_unpaired_brackets",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BracketPushTest.test_wrong_ordered_brackets": {
            "name": "test_wrong_ordered_brackets",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BracketPushTest.test_wrong_closing_bracket": {
            "name": "test_wrong_closing_bracket",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BracketPushTest.test_paired_with_whitespace": {
            "name": "test_paired_with_whitespace",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BracketPushTest.test_partially_paired_brackets": {
            "name": "test_partially_paired_brackets",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BracketPushTest.test_simple_nested_brackets": {
            "name": "test_simple_nested_brackets",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BracketPushTest.test_several_paired_brackets": {
            "name": "test_several_paired_brackets",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BracketPushTest.test_paired_and_nested_brackets": {
            "name": "test_paired_and_nested_brackets",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BracketPushTest.test_unopened_closing_brackets": {
            "name": "test_unopened_closing_brackets",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BracketPushTest.test_unpaired_and_nested_brackets": {
            "name": "test_unpaired_and_nested_brackets",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BracketPushTest.test_paired_and_wrong_nested_brackets": {
            "name": "test_paired_and_wrong_nested_brackets",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BracketPushTest.test_paried_and_incomplete_brackets": {
            "name": "test_paried_and_incomplete_brackets",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BracketPushTest.test_too_many_closing_brackets": {
            "name": "test_too_many_closing_brackets",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BracketPushTest.test_math_expression": {
            "name": "test_math_expression",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BracketPushTest.test_complex_latex_expression": {
            "name": "test_complex_latex_expression",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/card-games/lists.py": {
        "get_rounds": {
            "name": "get_rounds",
            "location": 1,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "number": [
                    "int",
                    "Tuple[int]"
                ]
            }
        },
        "concatenate_rounds": {
            "name": "concatenate_rounds",
            "location": 11,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "rounds_1": [
                    "int",
                    "str",
                    "Callable"
                ],
                "rounds_2": [
                    "int",
                    "str",
                    "Callable"
                ]
            }
        },
        "list_contains_round": {
            "name": "list_contains_round",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "rounds": [
                    "str",
                    "bool"
                ],
                "number": [
                    "str",
                    "bool"
                ]
            }
        },
        "card_average": {
            "name": "card_average",
            "location": 33,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "hand": [
                    "List[int]",
                    "list",
                    "bool",
                    "List[float]",
                    "str",
                    "int"
                ]
            }
        },
        "approx_average_is_average": {
            "name": "approx_average_is_average",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "hand": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "average_even_is_average_odd": {
            "name": "average_even_is_average_odd",
            "location": 53,
            "return": [
                "bool",
                "str",
                "int",
                "Mapping"
            ],
            "arguments": {
                "hand": [
                    "str",
                    "int",
                    "Mapping"
                ]
            }
        },
        "maybe_double_last": {
            "name": "maybe_double_last",
            "location": 63,
            "return": [
                "str",
                "float",
                "int",
                "Tuple[int,int]",
                "Type[T]",
                "List[int]"
            ],
            "arguments": {
                "hand": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "python_exercism-master/card-games/lists_test.py": {
        "CardGamesTest.test_get_rounds": {
            "name": "test_get_rounds",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CardGamesTest.test_concatenate_rounds": {
            "name": "test_concatenate_rounds",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CardGamesTest.test_list_contains_round": {
            "name": "test_list_contains_round",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CardGamesTest.test_card_average": {
            "name": "test_card_average",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CardGamesTest.test_approx_average_is_average": {
            "name": "test_approx_average_is_average",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CardGamesTest.test_average_even_is_average_odd": {
            "name": "test_average_even_is_average_odd",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CardGamesTest.test_maybe_double_last": {
            "name": "test_maybe_double_last",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/cater-waiter/sets.py": {
        "clean_ingredients": {
            "name": "clean_ingredients",
            "location": 12,
            "return": [
                "Tuple[(_T0, set)]"
            ],
            "arguments": {
                "dish_name": [
                    "str",
                    "Set[str]",
                    "bool",
                    "List[str]"
                ],
                "dish_ingredients": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "check_drinks": {
            "name": "check_drinks",
            "location": 26,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "drink_name": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Iterable[float]",
                    "Any",
                    "Optional[Callable]",
                    "int"
                ],
                "drink_ingredients": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Tuple[str,int]",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "categorize_dish": {
            "name": "categorize_dish",
            "location": 41,
            "return": [
                "str",
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "dish_name": [
                    "str"
                ],
                "dish_ingredients": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Tuple[str,int]",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "tag_special_ingredients": {
            "name": "tag_special_ingredients",
            "location": 67,
            "return": [
                "Tuple[(Any, set)]"
            ],
            "arguments": {
                "dish": [
                    "str",
                    "List",
                    "Set",
                    "float"
                ]
            }
        },
        "compile_ingredients": {
            "name": "compile_ingredients",
            "location": 81,
            "return": [
                "set"
            ],
            "arguments": {
                "dishes": [
                    "str"
                ]
            }
        },
        "separate_appetizers": {
            "name": "separate_appetizers",
            "location": 96,
            "return": [
                "set"
            ],
            "arguments": {
                "dishes": [
                    "List",
                    "str",
                    "List[Union[int,str,str,str,str,str,str,str]]",
                    "List[int]",
                    "float"
                ],
                "appetizers": [
                    "List",
                    "str",
                    "List[Union[int,str,str,str,str,str,str,str]]",
                    "List[int]",
                    "float"
                ]
            }
        },
        "singleton_ingredients": {
            "name": "singleton_ingredients",
            "location": 109,
            "return": [
                "set"
            ],
            "arguments": {
                "dishes": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "intersection": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "python_exercism-master/cater-waiter/sets_categories_data.py": {},
    "python_exercism-master/cater-waiter/sets_test.py": {
        "SetsTest.test_clean_ingredients": {
            "name": "test_clean_ingredients",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetsTest.test_check_drinks": {
            "name": "test_check_drinks",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetsTest.test_categorize_dish": {
            "name": "test_categorize_dish",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetsTest.test_tag_special_ingredients": {
            "name": "test_tag_special_ingredients",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetsTest.test_compile_ingredients": {
            "name": "test_compile_ingredients",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetsTest.test_separate_appetizers": {
            "name": "test_separate_appetizers",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetsTest.test_singleton_ingredients": {
            "name": "test_singleton_ingredients",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/cater-waiter/sets_test_data.py": {},
    "python_exercism-master/chaitanas-colossal-coaster/list_methods.py": {
        "add_me_to_the_queue": {
            "name": "add_me_to_the_queue",
            "location": 1,
            "return": [
                "Union[(_T0, _T1)]"
            ],
            "arguments": {
                "express_queue": [
                    "str",
                    "Callable[[Any], bool]",
                    "Optional[str]",
                    "Set[str]",
                    "Optional[bool]"
                ],
                "normal_queue": [
                    "str",
                    "Callable[[Any], bool]",
                    "Optional[str]",
                    "Set[str]",
                    "Optional[bool]"
                ],
                "ticket_type": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Union[bool,Iterable[str]]",
                    "None",
                    "Iterable[str]"
                ],
                "person_name": [
                    "List",
                    "str",
                    "List[str]",
                    "bool",
                    "List[float]"
                ]
            }
        },
        "find_my_friend": {
            "name": "find_my_friend",
            "location": 17,
            "return": [
                "int",
                "str",
                "Callable",
                "List[Callable]",
                "Type"
            ],
            "arguments": {
                "queue": [
                    "str",
                    "Optional[str]",
                    "Set[str]",
                    "int",
                    "Sequence[str]",
                    "bool"
                ],
                "friend_name": [
                    "str",
                    "Optional[str]",
                    "Set[str]",
                    "int",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "add_me_with_my_friends": {
            "name": "add_me_with_my_friends",
            "location": 27,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "queue": [
                    "str",
                    "Optional[str]"
                ],
                "index": [
                    "str",
                    "Optional[str]"
                ],
                "person_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "remove_the_mean_person": {
            "name": "remove_the_mean_person",
            "location": 38,
            "return": [
                "List[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "queue": [
                    "List[str]",
                    "str",
                    "int",
                    "Optional[Union[Any,str]]"
                ],
                "person_name": [
                    "str",
                    "int",
                    "Optional[Union[Any,str]]",
                    "List[str]"
                ]
            }
        },
        "how_many_namefellows": {
            "name": "how_many_namefellows",
            "location": 49,
            "return": [
                "bool",
                "str",
                "Sequence[str]",
                "List[str]"
            ],
            "arguments": {
                "queue": [
                    "str",
                    "bool",
                    "Container[str]"
                ],
                "person_name": [
                    "str",
                    "bool",
                    "Container[str]",
                    "Container"
                ]
            }
        },
        "remove_the_last_person": {
            "name": "remove_the_last_person",
            "location": 59,
            "return": [
                "str",
                "float",
                "int",
                "Tuple[int,int]",
                "Type[T]",
                "List[int]"
            ],
            "arguments": {
                "queue": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "sorted_names": {
            "name": "sorted_names",
            "location": 68,
            "return": [
                "list"
            ],
            "arguments": {
                "queue": [
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "List",
                    "Dict",
                    "Container[str]",
                    "bool",
                    "Union[List,Dict]"
                ]
            }
        }
    },
    "python_exercism-master/chaitanas-colossal-coaster/list_methods_test.py": {
        "ListMethodsTest.test_add_me_to_the_queue": {
            "name": "test_add_me_to_the_queue",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListMethodsTest.test_find_my_friend": {
            "name": "test_find_my_friend",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListMethodsTest.test_add_me_with_my_friends": {
            "name": "test_add_me_with_my_friends",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListMethodsTest.test_remove_the_mean_person": {
            "name": "test_remove_the_mean_person",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListMethodsTest.test_how_many_namefellows": {
            "name": "test_how_many_namefellows",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListMethodsTest.test_remove_the_last_person": {
            "name": "test_remove_the_last_person",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListMethodsTest.test_sorted_names": {
            "name": "test_sorted_names",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/change/change.py": {
        "find_fewest_coins": {
            "name": "find_fewest_coins",
            "location": 5,
            "return": [
                "list"
            ],
            "arguments": {
                "coins": [
                    "List[list[Any]]",
                    "List[List[Any]]",
                    "Iterable[str]",
                    "bool",
                    "Union[int,float]",
                    "Sequence[int]"
                ],
                "target": [
                    "List[list[Any]]",
                    "List[List[Any]]",
                    "bool",
                    "Sequence[int]",
                    "Iterable[str]",
                    "float",
                    "Union[int,float]"
                ]
            }
        },
        "find_fewest_coins_recursive": {
            "name": "find_fewest_coins_recursive",
            "location": 15,
            "return": [
                "List",
                "str",
                "List[Dict]",
                "List[str]",
                "List[int]"
            ],
            "arguments": {
                "coins": [
                    "Tuple[int]",
                    "bool",
                    "int",
                    "float"
                ],
                "target": [
                    "bool",
                    "float",
                    "int",
                    "Tuple[int]"
                ],
                "coin_list": [
                    "List[str]",
                    "None",
                    "List[Entity]",
                    "Optional[List[str]]",
                    "bool",
                    "Callable[Type,str,bool]",
                    "Callable[[Type,str],bool]",
                    "Tuple[Union[int,int]]",
                    "int",
                    "Tuple[int,int]"
                ]
            }
        }
    },
    "python_exercism-master/change/change_test.py": {
        "ChangeTest.test_single_coin_change": {
            "name": "test_single_coin_change",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeTest.test_multiple_coin_change": {
            "name": "test_multiple_coin_change",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeTest.test_change_with_Lilliputian_Coins": {
            "name": "test_change_with_Lilliputian_Coins",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeTest.test_change_with_Lower_Elbonia_Coins": {
            "name": "test_change_with_Lower_Elbonia_Coins",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeTest.test_large_target_values": {
            "name": "test_large_target_values",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeTest.test_possible_change_without_unit_coins_available": {
            "name": "test_possible_change_without_unit_coins_available",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeTest.test_another_possible_change_without_unit_coins_available": {
            "name": "test_another_possible_change_without_unit_coins_available",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeTest.test_no_coins_make_0_change": {
            "name": "test_no_coins_make_0_change",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeTest.test_error_testing_for_change_smaller_than_smallest_coin": {
            "name": "test_error_testing_for_change_smaller_than_smallest_coin",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeTest.test_error_if_no_combination_can_add_up_to_target": {
            "name": "test_error_if_no_combination_can_add_up_to_target",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeTest.test_cannot_find_negative_change_values": {
            "name": "test_cannot_find_negative_change_values",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeTest.setUp": {
            "name": "setUp",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 55,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/circular-buffer/circular_buffer.py": {
        "CircularBuffer.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capacity": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "CircularBuffer.read": {
            "name": "read",
            "location": 12,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "CircularBuffer.write": {
            "name": "write",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "float",
                    "List[List[Any]]",
                    "List[list[Any]]"
                ]
            }
        },
        "CircularBuffer.overwrite": {
            "name": "overwrite",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "bytes",
                    "Union[bytes,bytearray,memoryview]",
                    "bytearray",
                    "memoryview"
                ]
            }
        },
        "CircularBuffer.clear": {
            "name": "clear",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/circular-buffer/circular_buffer_test.py": {
        "CircularBufferTest.test_reading_empty_buffer_should_fail": {
            "name": "test_reading_empty_buffer_should_fail",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CircularBufferTest.test_can_read_an_item_just_written": {
            "name": "test_can_read_an_item_just_written",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CircularBufferTest.test_each_item_may_only_be_read_once": {
            "name": "test_each_item_may_only_be_read_once",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CircularBufferTest.test_items_are_read_in_the_order_they_are_written": {
            "name": "test_items_are_read_in_the_order_they_are_written",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CircularBufferTest.test_full_buffer_can_t_be_written_to": {
            "name": "test_full_buffer_can_t_be_written_to",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CircularBufferTest.test_a_read_frees_up_capacity_for_another_write": {
            "name": "test_a_read_frees_up_capacity_for_another_write",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CircularBufferTest.test_read_position_is_maintained_even_across_multiple_writes": {
            "name": "test_read_position_is_maintained_even_across_multiple_writes",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CircularBufferTest.test_items_cleared_out_of_buffer_can_t_be_read": {
            "name": "test_items_cleared_out_of_buffer_can_t_be_read",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CircularBufferTest.test_clear_frees_up_capacity_for_another_write": {
            "name": "test_clear_frees_up_capacity_for_another_write",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CircularBufferTest.test_clear_does_nothing_on_empty_buffer": {
            "name": "test_clear_does_nothing_on_empty_buffer",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CircularBufferTest.test_overwrite_acts_like_write_on_non_full_buffer": {
            "name": "test_overwrite_acts_like_write_on_non_full_buffer",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CircularBufferTest.test_overwrite_replaces_the_oldest_item_on_full_buffer": {
            "name": "test_overwrite_replaces_the_oldest_item_on_full_buffer",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CircularBufferTest.test_overwrite_replaces_the_oldest_item_remaining_in_buffer_following_a_read": {
            "name": "test_overwrite_replaces_the_oldest_item_remaining_in_buffer_following_a_read",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CircularBufferTest.test_initial_clear_does_not_affect_wrapping_around": {
            "name": "test_initial_clear_does_not_affect_wrapping_around",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CircularBufferTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 117,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/clock/clock.py": {
        "Clock.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hour": [
                    "int",
                    "float",
                    "bool"
                ],
                "minute": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Clock.__repr__": {
            "name": "__repr__",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Clock.__eq__": {
            "name": "__eq__",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "Clock.__add__": {
            "name": "__add__",
            "location": 22,
            "return": [
                "Clock"
            ],
            "arguments": {
                "self": [
                    "_TClock@@Clock@@"
                ],
                "minutes": [
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "Clock.__sub__": {
            "name": "__sub__",
            "location": 26,
            "return": [
                "Clock"
            ],
            "arguments": {
                "self": [
                    "_TClock@@Clock@@"
                ],
                "minutes": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "python_exercism-master/clock/clock_test.py": {
        "ClockTest.test_on_the_hour": {
            "name": "test_on_the_hour",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_past_the_hour": {
            "name": "test_past_the_hour",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_midnight_is_zero_hours": {
            "name": "test_midnight_is_zero_hours",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_hour_rolls_over": {
            "name": "test_hour_rolls_over",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_hour_rolls_over_continuously": {
            "name": "test_hour_rolls_over_continuously",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_sixty_minutes_is_next_hour": {
            "name": "test_sixty_minutes_is_next_hour",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_minutes_roll_over": {
            "name": "test_minutes_roll_over",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_minutes_roll_over_continuously": {
            "name": "test_minutes_roll_over_continuously",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_hour_and_minutes_roll_over": {
            "name": "test_hour_and_minutes_roll_over",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_hour_and_minutes_roll_over_continuously": {
            "name": "test_hour_and_minutes_roll_over_continuously",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_hour_and_minutes_roll_over_to_exactly_midnight": {
            "name": "test_hour_and_minutes_roll_over_to_exactly_midnight",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_negative_hour": {
            "name": "test_negative_hour",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_negative_hour_rolls_over": {
            "name": "test_negative_hour_rolls_over",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_negative_hour_rolls_over_continuously": {
            "name": "test_negative_hour_rolls_over_continuously",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_negative_minutes": {
            "name": "test_negative_minutes",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_negative_minutes_roll_over": {
            "name": "test_negative_minutes_roll_over",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_negative_minutes_roll_over_continuously": {
            "name": "test_negative_minutes_roll_over_continuously",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_negative_sixty_minutes_is_previous_hour": {
            "name": "test_negative_sixty_minutes_is_previous_hour",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_negative_hour_and_minutes_both_roll_over": {
            "name": "test_negative_hour_and_minutes_both_roll_over",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_negative_hour_and_minutes_both_roll_over_continuously": {
            "name": "test_negative_hour_and_minutes_both_roll_over_continuously",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_add_minutes": {
            "name": "test_add_minutes",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_add_no_minutes": {
            "name": "test_add_no_minutes",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_add_to_next_hour": {
            "name": "test_add_to_next_hour",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_add_more_than_one_hour": {
            "name": "test_add_more_than_one_hour",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_add_more_than_two_hours_with_carry": {
            "name": "test_add_more_than_two_hours_with_carry",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_add_across_midnight": {
            "name": "test_add_across_midnight",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_add_more_than_one_day": {
            "name": "test_add_more_than_one_day",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_add_more_than_two_days": {
            "name": "test_add_more_than_two_days",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_subtract_minutes": {
            "name": "test_subtract_minutes",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_subtract_to_previous_hour": {
            "name": "test_subtract_to_previous_hour",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_subtract_more_than_an_hour": {
            "name": "test_subtract_more_than_an_hour",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_subtract_across_midnight": {
            "name": "test_subtract_across_midnight",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_subtract_more_than_two_hours": {
            "name": "test_subtract_more_than_two_hours",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_subtract_more_than_two_hours_with_borrow": {
            "name": "test_subtract_more_than_two_hours_with_borrow",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_subtract_more_than_one_day": {
            "name": "test_subtract_more_than_one_day",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_subtract_more_than_two_days": {
            "name": "test_subtract_more_than_two_days",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_clocks_with_same_time": {
            "name": "test_clocks_with_same_time",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_clocks_a_minute_apart": {
            "name": "test_clocks_a_minute_apart",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_clocks_an_hour_apart": {
            "name": "test_clocks_an_hour_apart",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_clocks_with_hour_overflow": {
            "name": "test_clocks_with_hour_overflow",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_clocks_with_hour_overflow_by_several_days": {
            "name": "test_clocks_with_hour_overflow_by_several_days",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_clocks_with_negative_hour": {
            "name": "test_clocks_with_negative_hour",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_clocks_with_negative_hour_that_wraps": {
            "name": "test_clocks_with_negative_hour_that_wraps",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_clocks_with_negative_hour_that_wraps_multiple_times": {
            "name": "test_clocks_with_negative_hour_that_wraps_multiple_times",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_clocks_with_minute_overflow": {
            "name": "test_clocks_with_minute_overflow",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_clocks_with_minute_overflow_by_several_days": {
            "name": "test_clocks_with_minute_overflow_by_several_days",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_clocks_with_negative_minute": {
            "name": "test_clocks_with_negative_minute",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_clocks_with_negative_minute_that_wraps": {
            "name": "test_clocks_with_negative_minute_that_wraps",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_clocks_with_negative_minute_that_wraps_multiple_times": {
            "name": "test_clocks_with_negative_minute_that_wraps_multiple_times",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_clocks_with_negative_hours_and_minutes": {
            "name": "test_clocks_with_negative_hours_and_minutes",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_clocks_with_negative_hours_and_minutes_that_wrap": {
            "name": "test_clocks_with_negative_hours_and_minutes_that_wrap",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTest.test_full_clock_and_zeroed_clock": {
            "name": "test_full_clock_and_zeroed_clock",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/collatz-conjecture/collatz_conjecture.py": {
        "steps": {
            "name": "steps",
            "location": 1,
            "return": [
                "int"
            ],
            "arguments": {
                "number": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "python_exercism-master/collatz-conjecture/collatz_conjecture_test.py": {
        "CollatzConjectureTest.test_zero_steps_for_one": {
            "name": "test_zero_steps_for_one",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CollatzConjectureTest.test_divide_if_even": {
            "name": "test_divide_if_even",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CollatzConjectureTest.test_even_and_odd_steps": {
            "name": "test_even_and_odd_steps",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CollatzConjectureTest.test_large_number_of_even_and_odd_steps": {
            "name": "test_large_number_of_even_and_odd_steps",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CollatzConjectureTest.test_zero_is_an_error": {
            "name": "test_zero_is_an_error",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CollatzConjectureTest.test_negative_value_is_an_error": {
            "name": "test_negative_value_is_an_error",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CollatzConjectureTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 30,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/complex-numbers/complex_numbers.py": {
        "ComplexNumber.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "real": [
                    "int",
                    "float",
                    "bool"
                ],
                "imaginary": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ComplexNumber.__eq__": {
            "name": "__eq__",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "ComplexNumber.__add__": {
            "name": "__add__",
            "location": 16,
            "return": [
                "ComplexNumber"
            ],
            "arguments": {
                "self": [
                    "_TComplexNumber@@ComplexNumber@@"
                ],
                "other": []
            }
        },
        "ComplexNumber.__mul__": {
            "name": "__mul__",
            "location": 19,
            "return": [
                "ComplexNumber"
            ],
            "arguments": {
                "self": [
                    "_TComplexNumber@@ComplexNumber@@"
                ],
                "other": []
            }
        },
        "ComplexNumber.__sub__": {
            "name": "__sub__",
            "location": 25,
            "return": [
                "ComplexNumber"
            ],
            "arguments": {
                "self": [
                    "_TComplexNumber@@ComplexNumber@@"
                ],
                "other": []
            }
        },
        "ComplexNumber.__truediv__": {
            "name": "__truediv__",
            "location": 28,
            "return": [
                "ComplexNumber"
            ],
            "arguments": {
                "self": [
                    "_TComplexNumber@@ComplexNumber@@"
                ],
                "other": []
            }
        },
        "ComplexNumber.__abs__": {
            "name": "__abs__",
            "location": 35,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumber.conjugate": {
            "name": "conjugate",
            "location": 38,
            "return": [
                "ComplexNumber"
            ],
            "arguments": {
                "self": [
                    "_TComplexNumber@@ComplexNumber@@"
                ]
            }
        },
        "ComplexNumber.exp": {
            "name": "exp",
            "location": 42,
            "return": [
                "ComplexNumber"
            ],
            "arguments": {
                "self": [
                    "_TComplexNumber@@ComplexNumber@@"
                ]
            }
        }
    },
    "python_exercism-master/complex-numbers/complex_numbers_test.py": {
        "ComplexNumbersTest.test_real_part_of_a_purely_real_number": {
            "name": "test_real_part_of_a_purely_real_number",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_real_part_of_a_purely_imaginary_number": {
            "name": "test_real_part_of_a_purely_imaginary_number",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_real_part_of_a_number_with_real_and_imaginary_part": {
            "name": "test_real_part_of_a_number_with_real_and_imaginary_part",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_imaginary_part_of_a_purely_real_number": {
            "name": "test_imaginary_part_of_a_purely_real_number",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_imaginary_part_of_a_purely_imaginary_number": {
            "name": "test_imaginary_part_of_a_purely_imaginary_number",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_imaginary_part_of_a_number_with_real_and_imaginary_part": {
            "name": "test_imaginary_part_of_a_number_with_real_and_imaginary_part",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_imaginary_unit": {
            "name": "test_imaginary_unit",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_add_purely_real_numbers": {
            "name": "test_add_purely_real_numbers",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_add_purely_imaginary_numbers": {
            "name": "test_add_purely_imaginary_numbers",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_add_numbers_with_real_and_imaginary_part": {
            "name": "test_add_numbers_with_real_and_imaginary_part",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_subtract_purely_real_numbers": {
            "name": "test_subtract_purely_real_numbers",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_subtract_purely_imaginary_numbers": {
            "name": "test_subtract_purely_imaginary_numbers",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_subtract_numbers_with_real_and_imaginary_part": {
            "name": "test_subtract_numbers_with_real_and_imaginary_part",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_multiply_purely_real_numbers": {
            "name": "test_multiply_purely_real_numbers",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_multiply_purely_imaginary_numbers": {
            "name": "test_multiply_purely_imaginary_numbers",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_multiply_numbers_with_real_and_imaginary_part": {
            "name": "test_multiply_numbers_with_real_and_imaginary_part",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_divide_purely_real_numbers": {
            "name": "test_divide_purely_real_numbers",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_divide_purely_imaginary_numbers": {
            "name": "test_divide_purely_imaginary_numbers",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_divide_numbers_with_real_and_imaginary_part": {
            "name": "test_divide_numbers_with_real_and_imaginary_part",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_absolute_value_of_a_positive_purely_real_number": {
            "name": "test_absolute_value_of_a_positive_purely_real_number",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_absolute_value_of_a_negative_purely_real_number": {
            "name": "test_absolute_value_of_a_negative_purely_real_number",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_absolute_value_of_a_purely_imaginary_number_with_positive_imaginary_part": {
            "name": "test_absolute_value_of_a_purely_imaginary_number_with_positive_imaginary_part",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_absolute_value_of_a_purely_imaginary_number_with_negative_imaginary_part": {
            "name": "test_absolute_value_of_a_purely_imaginary_number_with_negative_imaginary_part",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_absolute_value_of_a_number_with_real_and_imaginary_part": {
            "name": "test_absolute_value_of_a_number_with_real_and_imaginary_part",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_conjugate_a_purely_real_number": {
            "name": "test_conjugate_a_purely_real_number",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_conjugate_a_purely_imaginary_number": {
            "name": "test_conjugate_a_purely_imaginary_number",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_conjugate_a_number_with_real_and_imaginary_part": {
            "name": "test_conjugate_a_number_with_real_and_imaginary_part",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_euler_s_identity_formula": {
            "name": "test_euler_s_identity_formula",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_exponential_of_0": {
            "name": "test_exponential_of_0",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_exponential_of_a_purely_real_number": {
            "name": "test_exponential_of_a_purely_real_number",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_exponential_of_a_number_with_real_and_imaginary_part": {
            "name": "test_exponential_of_a_number_with_real_and_imaginary_part",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_equality_of_complex_numbers": {
            "name": "test_equality_of_complex_numbers",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_inequality_of_real_part": {
            "name": "test_inequality_of_real_part",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNumbersTest.test_inequality_of_imaginary_part": {
            "name": "test_inequality_of_imaginary_part",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/connect/connect.py": {
        "ConnectGame.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str",
                    "List"
                ]
            }
        },
        "ConnectGame.get_winner": {
            "name": "get_winner",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectGame.check_if_0_win": {
            "name": "check_if_0_win",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/connect/connect_test.py": {
        "ConnectTest.test_an_empty_board_has_no_winner": {
            "name": "test_an_empty_board_has_no_winner",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectTest.test_x_can_win_on_a_1x1_board": {
            "name": "test_x_can_win_on_a_1x1_board",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectTest.test_o_can_win_on_a_1x1_board": {
            "name": "test_o_can_win_on_a_1x1_board",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectTest.test_only_edges_does_not_make_a_winner": {
            "name": "test_only_edges_does_not_make_a_winner",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectTest.test_illegal_diagonal_does_not_make_a_winner": {
            "name": "test_illegal_diagonal_does_not_make_a_winner",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectTest.test_nobody_wins_crossing_adjacent_angles": {
            "name": "test_nobody_wins_crossing_adjacent_angles",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectTest.test_x_wins_crossing_from_left_to_right": {
            "name": "test_x_wins_crossing_from_left_to_right",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectTest.test_o_wins_crossing_from_top_to_bottom": {
            "name": "test_o_wins_crossing_from_top_to_bottom",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectTest.test_x_wins_using_a_convoluted_path": {
            "name": "test_x_wins_using_a_convoluted_path",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectTest.test_x_wins_using_a_spiral_path": {
            "name": "test_x_wins_using_a_spiral_path",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/crypto-square/crypto_square.py": {
        "cipher_text": {
            "name": "cipher_text",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "plain_text": [
                    "str"
                ]
            }
        }
    },
    "python_exercism-master/crypto-square/crypto_square_test.py": {
        "CryptoSquareTest.test_empty_plaintext_results_in_an_empty_ciphertext": {
            "name": "test_empty_plaintext_results_in_an_empty_ciphertext",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CryptoSquareTest.test_lowercase": {
            "name": "test_lowercase",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CryptoSquareTest.test_remove_spaces": {
            "name": "test_remove_spaces",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CryptoSquareTest.test_remove_punctuation": {
            "name": "test_remove_punctuation",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CryptoSquareTest.test_9_character_plaintext_results_in_3_chunks_of_3_characters": {
            "name": "test_9_character_plaintext_results_in_3_chunks_of_3_characters",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CryptoSquareTest.test_8_character_plaintext_results_in_3_chunks_the_last_one_with_a_trailing_space": {
            "name": "test_8_character_plaintext_results_in_3_chunks_the_last_one_with_a_trailing_space",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CryptoSquareTest.test_54_character_plaintext_results_in_7_chunks_the_last_two_with_trailing_spaces": {
            "name": "test_54_character_plaintext_results_in_7_chunks_the_last_two_with_trailing_spaces",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/currency-exchange/exchange.py": {
        "exchange_money": {
            "name": "exchange_money",
            "location": 4,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "budget": [
                    "int",
                    "Callable",
                    "str"
                ],
                "exchange_rate": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "get_change": {
            "name": "get_change",
            "location": 14,
            "return": [
                "int",
                "str",
                "float",
                "Union[str,int]",
                "bool"
            ],
            "arguments": {
                "budget": [
                    "int",
                    "float",
                    "str",
                    "bool",
                    "List[str]"
                ],
                "exchanging_value": [
                    "int",
                    "float",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "get_value_of_bills": {
            "name": "get_value_of_bills",
            "location": 24,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "denomination": [
                    "Iterable[str]",
                    "T"
                ],
                "number_of_bills": [
                    "Iterable[str]",
                    "T"
                ]
            }
        },
        "get_number_of_bills": {
            "name": "get_number_of_bills",
            "location": 34,
            "return": [
                "int"
            ],
            "arguments": {
                "budget": [
                    "int",
                    "List[str]",
                    "str",
                    "Callable"
                ],
                "denomination": [
                    "int",
                    "List[str]",
                    "str",
                    "Callable"
                ]
            }
        },
        "exchangeable_value": {
            "name": "exchangeable_value",
            "location": 44,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "budget": [
                    "int",
                    "str",
                    "List"
                ],
                "exchange_rate": [
                    "int",
                    "str",
                    "List"
                ],
                "spread": [
                    "int",
                    "str",
                    "List"
                ],
                "denomination": [
                    "str",
                    "int",
                    "List"
                ]
            }
        },
        "non_exchangeable_value": {
            "name": "non_exchangeable_value",
            "location": 58,
            "return": [
                "int"
            ],
            "arguments": {
                "budget": [
                    "int",
                    "Dict",
                    "Generator"
                ],
                "exchange_rate": [
                    "int",
                    "Dict",
                    "Generator"
                ],
                "spread": [
                    "int",
                    "Dict",
                    "Generator"
                ],
                "denomination": [
                    "int",
                    "Dict",
                    "Generator"
                ]
            }
        }
    },
    "python_exercism-master/currency-exchange/exchange_test.py": {
        "CurrencyExchangeTest.test_exchange_money": {
            "name": "test_exchange_money",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrencyExchangeTest.test_get_change": {
            "name": "test_get_change",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrencyExchangeTest.test_get_value_of_bills": {
            "name": "test_get_value_of_bills",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrencyExchangeTest.test_get_number_of_bills": {
            "name": "test_get_number_of_bills",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrencyExchangeTest.test_exchangeable_value": {
            "name": "test_exchangeable_value",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrencyExchangeTest.test_non_exchangeable_value": {
            "name": "test_non_exchangeable_value",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/custom-set/custom_set.py": {
        "CustomSet.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elements": [
                    "list[]"
                ]
            }
        },
        "CustomSet.isempty": {
            "name": "isempty",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSet.__contains__": {
            "name": "__contains__",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "List",
                    "List[Dict]",
                    "List[dict]"
                ]
            }
        },
        "CustomSet.issubset": {
            "name": "issubset",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "CustomSet.isdisjoint": {
            "name": "isdisjoint",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "CustomSet.__eq__": {
            "name": "__eq__",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Type",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "CustomSet.add": {
            "name": "add",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Callable",
                    "str",
                    "Type"
                ]
            }
        },
        "CustomSet.intersection": {
            "name": "intersection",
            "location": 30,
            "return": [
                "CustomSet"
            ],
            "arguments": {
                "self": [
                    "_TCustomSet@@CustomSet@@"
                ],
                "other": [
                    "Iterable[Any]"
                ]
            }
        },
        "CustomSet.__sub__": {
            "name": "__sub__",
            "location": 33,
            "return": [
                "CustomSet"
            ],
            "arguments": {
                "self": [
                    "_TCustomSet@@CustomSet@@"
                ],
                "other": [
                    "Iterable[Any]"
                ]
            }
        },
        "CustomSet.__add__": {
            "name": "__add__",
            "location": 36,
            "return": [
                "CustomSet"
            ],
            "arguments": {
                "self": [
                    "_TCustomSet@@CustomSet@@"
                ],
                "other": [
                    "Dict",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/custom-set/custom_set_test.py": {
        "CustomSetTest.test_sets_with_no_elements_are_empty": {
            "name": "test_sets_with_no_elements_are_empty",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_sets_with_elements_are_not_empty": {
            "name": "test_sets_with_elements_are_not_empty",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_nothing_is_contained_in_an_empty_set": {
            "name": "test_nothing_is_contained_in_an_empty_set",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_when_the_element_is_in_the_set": {
            "name": "test_when_the_element_is_in_the_set",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_when_the_element_is_not_in_the_set": {
            "name": "test_when_the_element_is_not_in_the_set",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_empty_set_is_a_subset_of_another_empty_set": {
            "name": "test_empty_set_is_a_subset_of_another_empty_set",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_empty_set_is_a_subset_of_non_empty_set": {
            "name": "test_empty_set_is_a_subset_of_non_empty_set",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_non_empty_set_is_not_a_subset_of_empty_set": {
            "name": "test_non_empty_set_is_not_a_subset_of_empty_set",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_set_is_a_subset_of_set_with_exact_same_elements": {
            "name": "test_set_is_a_subset_of_set_with_exact_same_elements",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_set_is_a_subset_of_larger_set_with_same_elements": {
            "name": "test_set_is_a_subset_of_larger_set_with_same_elements",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_set_is_not_a_subset_of_set_that_does_not_contain_its_elements": {
            "name": "test_set_is_not_a_subset_of_set_that_does_not_contain_its_elements",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_the_empty_set_is_disjoint_with_itself": {
            "name": "test_the_empty_set_is_disjoint_with_itself",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_empty_set_is_disjoint_with_non_empty_set": {
            "name": "test_empty_set_is_disjoint_with_non_empty_set",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_non_empty_set_is_disjoint_with_empty_set": {
            "name": "test_non_empty_set_is_disjoint_with_empty_set",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_sets_are_not_disjoint_if_they_share_an_element": {
            "name": "test_sets_are_not_disjoint_if_they_share_an_element",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_sets_are_disjoint_if_they_share_no_elements": {
            "name": "test_sets_are_disjoint_if_they_share_no_elements",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_empty_sets_are_equal": {
            "name": "test_empty_sets_are_equal",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_empty_set_is_not_equal_to_non_empty_set": {
            "name": "test_empty_set_is_not_equal_to_non_empty_set",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_non_empty_set_is_not_equal_to_empty_set": {
            "name": "test_non_empty_set_is_not_equal_to_empty_set",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_sets_with_the_same_elements_are_equal": {
            "name": "test_sets_with_the_same_elements_are_equal",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_sets_with_different_elements_are_not_equal": {
            "name": "test_sets_with_different_elements_are_not_equal",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_set_is_not_equal_to_larger_set_with_same_elements": {
            "name": "test_set_is_not_equal_to_larger_set_with_same_elements",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_add_to_empty_set": {
            "name": "test_add_to_empty_set",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_add_to_non_empty_set": {
            "name": "test_add_to_non_empty_set",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_adding_an_existing_element_does_not_change_the_set": {
            "name": "test_adding_an_existing_element_does_not_change_the_set",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_intersection_of_two_empty_sets_is_an_empty_set": {
            "name": "test_intersection_of_two_empty_sets_is_an_empty_set",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_intersection_of_an_empty_set_and_non_empty_set_is_an_empty_set": {
            "name": "test_intersection_of_an_empty_set_and_non_empty_set_is_an_empty_set",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_intersection_of_a_non_empty_set_and_an_empty_set_is_an_empty_set": {
            "name": "test_intersection_of_a_non_empty_set_and_an_empty_set_is_an_empty_set",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_intersection_of_two_sets_with_no_shared_elements_is_an_empty_set": {
            "name": "test_intersection_of_two_sets_with_no_shared_elements_is_an_empty_set",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_intersection_of_two_sets_with_shared_elements_is_a_set_of_the_shared_elements": {
            "name": "test_intersection_of_two_sets_with_shared_elements_is_a_set_of_the_shared_elements",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_difference_of_two_empty_sets_is_an_empty_set": {
            "name": "test_difference_of_two_empty_sets_is_an_empty_set",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_difference_of_empty_set_and_non_empty_set_is_an_empty_set": {
            "name": "test_difference_of_empty_set_and_non_empty_set_is_an_empty_set",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_difference_of_a_non_empty_set_and_an_empty_set_is_the_non_empty_set": {
            "name": "test_difference_of_a_non_empty_set_and_an_empty_set_is_the_non_empty_set",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_difference_of_two_non_empty_sets_is_a_set_of_elements_that_are_only_in_the_first_set": {
            "name": "test_difference_of_two_non_empty_sets_is_a_set_of_elements_that_are_only_in_the_first_set",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_union_of_empty_sets_is_an_empty_set": {
            "name": "test_union_of_empty_sets_is_an_empty_set",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_union_of_an_empty_set_and_non_empty_set_is_the_non_empty_set": {
            "name": "test_union_of_an_empty_set_and_non_empty_set_is_the_non_empty_set",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_union_of_a_non_empty_set_and_empty_set_is_the_non_empty_set": {
            "name": "test_union_of_a_non_empty_set_and_empty_set_is_the_non_empty_set",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSetTest.test_union_of_non_empty_sets_contains_all_unique_elements": {
            "name": "test_union_of_non_empty_sets_contains_all_unique_elements",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/darts/darts.py": {
        "score": {
            "name": "score",
            "location": 5,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [],
                "y": []
            }
        }
    },
    "python_exercism-master/darts/darts_test.py": {
        "DartsTest.test_missed_target": {
            "name": "test_missed_target",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DartsTest.test_on_the_outer_circle": {
            "name": "test_on_the_outer_circle",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DartsTest.test_on_the_middle_circle": {
            "name": "test_on_the_middle_circle",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DartsTest.test_on_the_inner_circle": {
            "name": "test_on_the_inner_circle",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DartsTest.test_exactly_on_centre": {
            "name": "test_exactly_on_centre",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DartsTest.test_near_the_centre": {
            "name": "test_near_the_centre",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DartsTest.test_just_within_the_inner_circle": {
            "name": "test_just_within_the_inner_circle",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DartsTest.test_just_outside_the_inner_circle": {
            "name": "test_just_outside_the_inner_circle",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DartsTest.test_just_within_the_middle_circle": {
            "name": "test_just_within_the_middle_circle",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DartsTest.test_just_outside_the_middle_circle": {
            "name": "test_just_outside_the_middle_circle",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DartsTest.test_just_within_the_outer_circle": {
            "name": "test_just_within_the_outer_circle",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DartsTest.test_just_outside_the_outer_circle": {
            "name": "test_just_outside_the_outer_circle",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DartsTest.test_asymmetric_position_between_the_inner_and_middle_circles": {
            "name": "test_asymmetric_position_between_the_inner_and_middle_circles",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/diamond/diamond.py": {
        "make_space_pad": {
            "name": "make_space_pad",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "length": [
                    "int",
                    "float"
                ]
            }
        },
        "make_row": {
            "name": "make_row",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "letter": [
                    "[[]]",
                    "int",
                    "float",
                    "List[int]",
                    "Union[bool, None]"
                ],
                "center_letter": [
                    "[[]]",
                    "int",
                    "float",
                    "List[int]",
                    "Union[bool, None]"
                ]
            }
        },
        "rows": {
            "name": "rows",
            "location": 21,
            "return": [
                "list"
            ],
            "arguments": {
                "letter": []
            }
        }
    },
    "python_exercism-master/diamond/diamond_test.py": {
        "DiamondTest.test_degenerate_case_with_a_single_a_row": {
            "name": "test_degenerate_case_with_a_single_a_row",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiamondTest.test_degenerate_case_with_no_row_containing_3_distinct_groups_of_spaces": {
            "name": "test_degenerate_case_with_no_row_containing_3_distinct_groups_of_spaces",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiamondTest.test_smallest_non_degenerate_case_with_odd_diamond_side_length": {
            "name": "test_smallest_non_degenerate_case_with_odd_diamond_side_length",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiamondTest.test_smallest_non_degenerate_case_with_even_diamond_side_length": {
            "name": "test_smallest_non_degenerate_case_with_even_diamond_side_length",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiamondTest.test_largest_possible_diamond": {
            "name": "test_largest_possible_diamond",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/difference-of-squares/difference_of_squares.py": {
        "square_of_sum": {
            "name": "square_of_sum",
            "location": 1,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "count": [
                    "int",
                    "float"
                ]
            }
        },
        "sum_of_squares": {
            "name": "sum_of_squares",
            "location": 5,
            "return": [
                "int"
            ],
            "arguments": {
                "count": [
                    "int"
                ]
            }
        },
        "difference_of_squares": {
            "name": "difference_of_squares",
            "location": 9,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "count": [
                    "int",
                    "Sequence[int]",
                    "List[List[str]]",
                    "List[list[str]]"
                ]
            }
        }
    },
    "python_exercism-master/difference-of-squares/difference_of_squares_test.py": {
        "DifferenceOfSquaresTest.test_square_of_sum_1": {
            "name": "test_square_of_sum_1",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DifferenceOfSquaresTest.test_square_of_sum_5": {
            "name": "test_square_of_sum_5",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DifferenceOfSquaresTest.test_square_of_sum_100": {
            "name": "test_square_of_sum_100",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DifferenceOfSquaresTest.test_sum_of_squares_1": {
            "name": "test_sum_of_squares_1",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DifferenceOfSquaresTest.test_sum_of_squares_5": {
            "name": "test_sum_of_squares_5",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DifferenceOfSquaresTest.test_sum_of_squares_100": {
            "name": "test_sum_of_squares_100",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DifferenceOfSquaresTest.test_difference_of_squares_1": {
            "name": "test_difference_of_squares_1",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DifferenceOfSquaresTest.test_difference_of_squares_5": {
            "name": "test_difference_of_squares_5",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DifferenceOfSquaresTest.test_difference_of_squares_100": {
            "name": "test_difference_of_squares_100",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/diffie-hellman/diffie_hellman.py": {
        "private_key": {
            "name": "private_key",
            "location": 5,
            "return": [
                "int"
            ],
            "arguments": {
                "p": [
                    "int",
                    "str",
                    "Tuple[str,int]"
                ]
            }
        },
        "public_key": {
            "name": "public_key",
            "location": 9,
            "return": [
                "int",
                "str",
                "Tuple[str,int]"
            ],
            "arguments": {
                "p": [
                    "int",
                    "str",
                    "Tuple[str,int]"
                ],
                "g": [
                    "int",
                    "str",
                    "Tuple[str, int]"
                ],
                "private": [
                    "int",
                    "str",
                    "Tuple[str,int]",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "secret": {
            "name": "secret",
            "location": 13,
            "return": [
                "int",
                "bytearray",
                "Optional[str]"
            ],
            "arguments": {
                "p": [
                    "int",
                    "bytearray",
                    "Optional[str]"
                ],
                "public": [
                    "int",
                    "bytearray",
                    "Optional[str]"
                ],
                "private": [
                    "int",
                    "bytearray",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/diffie-hellman/diffie_hellman_test.py": {
        "DiffieHellmanTest.test_private_key_is_in_range": {
            "name": "test_private_key_is_in_range",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiffieHellmanTest.test_private_key_is_random": {
            "name": "test_private_key_is_random",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiffieHellmanTest.test_can_calculate_public_key_using_private_key": {
            "name": "test_can_calculate_public_key_using_private_key",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiffieHellmanTest.test_can_calculate_secret_using_other_party_s_public_key": {
            "name": "test_can_calculate_secret_using_other_party_s_public_key",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiffieHellmanTest.test_key_exchange": {
            "name": "test_key_exchange",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/dnd-character/dnd_character.py": {
        "modifier": {
            "name": "modifier",
            "location": 19,
            "return": [
                "int",
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "point": [
                    "int",
                    "bool",
                    "Set"
                ]
            }
        },
        "Character.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Character.ability": {
            "name": "ability",
            "location": 14,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/dnd-character/dnd_character_test.py": {
        "DndCharacterTest.test_ability_modifier_for_score_3_is_n4": {
            "name": "test_ability_modifier_for_score_3_is_n4",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DndCharacterTest.test_ability_modifier_for_score_4_is_n3": {
            "name": "test_ability_modifier_for_score_4_is_n3",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DndCharacterTest.test_ability_modifier_for_score_5_is_n3": {
            "name": "test_ability_modifier_for_score_5_is_n3",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DndCharacterTest.test_ability_modifier_for_score_6_is_n2": {
            "name": "test_ability_modifier_for_score_6_is_n2",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DndCharacterTest.test_ability_modifier_for_score_7_is_n2": {
            "name": "test_ability_modifier_for_score_7_is_n2",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DndCharacterTest.test_ability_modifier_for_score_8_is_n1": {
            "name": "test_ability_modifier_for_score_8_is_n1",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DndCharacterTest.test_ability_modifier_for_score_9_is_n1": {
            "name": "test_ability_modifier_for_score_9_is_n1",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DndCharacterTest.test_ability_modifier_for_score_10_is_0": {
            "name": "test_ability_modifier_for_score_10_is_0",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DndCharacterTest.test_ability_modifier_for_score_11_is_0": {
            "name": "test_ability_modifier_for_score_11_is_0",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DndCharacterTest.test_ability_modifier_for_score_12_is_1": {
            "name": "test_ability_modifier_for_score_12_is_1",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DndCharacterTest.test_ability_modifier_for_score_13_is_1": {
            "name": "test_ability_modifier_for_score_13_is_1",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DndCharacterTest.test_ability_modifier_for_score_14_is_2": {
            "name": "test_ability_modifier_for_score_14_is_2",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DndCharacterTest.test_ability_modifier_for_score_15_is_2": {
            "name": "test_ability_modifier_for_score_15_is_2",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DndCharacterTest.test_ability_modifier_for_score_16_is_3": {
            "name": "test_ability_modifier_for_score_16_is_3",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DndCharacterTest.test_ability_modifier_for_score_17_is_3": {
            "name": "test_ability_modifier_for_score_17_is_3",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DndCharacterTest.test_ability_modifier_for_score_18_is_4": {
            "name": "test_ability_modifier_for_score_18_is_4",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DndCharacterTest.test_random_ability_is_within_range": {
            "name": "test_random_ability_is_within_range",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DndCharacterTest.test_random_character_is_valid": {
            "name": "test_random_character_is_valid",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DndCharacterTest.test_each_ability_is_only_calculated_once": {
            "name": "test_each_ability_is_only_calculated_once",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/dominoes/dominoes.py": {
        "can_chain": {
            "name": "can_chain",
            "location": 4,
            "return": [
                "Optional[list]"
            ],
            "arguments": {
                "dominoes": [
                    "List[int]",
                    "Sequence[T]",
                    "List[str]",
                    "list",
                    "int"
                ]
            }
        }
    },
    "python_exercism-master/dominoes/dominoes_test.py": {
        "DominoesTest.test_empty_input_empty_output": {
            "name": "test_empty_input_empty_output",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DominoesTest.test_singleton_input_singleton_output": {
            "name": "test_singleton_input_singleton_output",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DominoesTest.test_singleton_that_can_t_be_chained": {
            "name": "test_singleton_that_can_t_be_chained",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DominoesTest.test_three_elements": {
            "name": "test_three_elements",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DominoesTest.test_can_reverse_dominoes": {
            "name": "test_can_reverse_dominoes",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DominoesTest.test_can_t_be_chained": {
            "name": "test_can_t_be_chained",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DominoesTest.test_disconnected_simple": {
            "name": "test_disconnected_simple",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DominoesTest.test_disconnected_double_loop": {
            "name": "test_disconnected_double_loop",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DominoesTest.test_disconnected_single_isolated": {
            "name": "test_disconnected_single_isolated",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DominoesTest.test_need_backtrack": {
            "name": "test_need_backtrack",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DominoesTest.test_separate_loops": {
            "name": "test_separate_loops",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DominoesTest.test_nine_elements": {
            "name": "test_nine_elements",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DominoesTest.normalize_dominoes": {
            "name": "normalize_dominoes",
            "location": 81,
            "return": [
                "List[tuple]"
            ],
            "arguments": {
                "self": [],
                "dominoes": [
                    "List[tuple[Union[Any,Any]]]",
                    "List",
                    "List[Tuple[Any,Any]]",
                    "List[tuple]",
                    "Iterable[Tuple[str,str]]"
                ]
            }
        },
        "DominoesTest.assert_same_dominoes": {
            "name": "assert_same_dominoes",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dominoes": [
                    "str",
                    "Iterable[float]",
                    "int",
                    "List[T]"
                ],
                "output_chain": [
                    "int",
                    "str",
                    "Sequence[float]"
                ]
            }
        },
        "DominoesTest.assert_consecutive_dominoes_match": {
            "name": "assert_consecutive_dominoes_match",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_chain": [
                    "list"
                ]
            }
        },
        "DominoesTest.assert_dominoes_at_ends_match": {
            "name": "assert_dominoes_at_ends_match",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_chain": [
                    "str",
                    "List",
                    "bytes",
                    "List[float]",
                    "IO"
                ]
            }
        },
        "DominoesTest.assert_correct_chain": {
            "name": "assert_correct_chain",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dominoes": [
                    "str",
                    "bytes"
                ],
                "output_chain": [
                    "str",
                    "BinaryIO",
                    "int"
                ]
            }
        },
        "DominoesTest.refute_correct_chain": {
            "name": "refute_correct_chain",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dominoes": [
                    "str",
                    "int",
                    "Union[str,Tuple[str,...]]",
                    "Tuple[Union[str,...]]"
                ],
                "output_chain": [
                    "Iterable[Iterable[float]]",
                    "Iterable[float]",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "python_exercism-master/dot-dsl/dot_dsl.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ],
                "attrs": [
                    "Dict",
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Node.__eq__": {
            "name": "__eq__",
            "location": 12,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Mapping[str,str]",
                    "str",
                    "Mapping"
                ]
            }
        },
        "Edge.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "int",
                    "str",
                    "List"
                ],
                "dst": [
                    "int",
                    "str",
                    "List"
                ],
                "attrs": [
                    "Dict",
                    "int",
                    "str",
                    "List"
                ]
            }
        },
        "Edge.__eq__": {
            "name": "__eq__",
            "location": 22,
            "return": [
                "bool",
                "str",
                "Type",
                "Type[T]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "Graph.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "List",
                    "str",
                    "bytes",
                    "List[str]",
                    "Sequence[str]",
                    "T"
                ]
            }
        }
    },
    "python_exercism-master/dot-dsl/dot_dsl_test.py": {
        "DotDslTest.test_empty_graph": {
            "name": "test_empty_graph",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DotDslTest.test_graph_with_one_node": {
            "name": "test_graph_with_one_node",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DotDslTest.test_graph_with_one_node_with_keywords": {
            "name": "test_graph_with_one_node_with_keywords",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DotDslTest.test_graph_with_one_edge": {
            "name": "test_graph_with_one_edge",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DotDslTest.test_graph_with_one_attribute": {
            "name": "test_graph_with_one_attribute",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DotDslTest.test_graph_with_attributes": {
            "name": "test_graph_with_attributes",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DotDslTest.test_malformed_graph": {
            "name": "test_malformed_graph",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DotDslTest.test_malformed_graph_item": {
            "name": "test_malformed_graph_item",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DotDslTest.test_malformed_attr": {
            "name": "test_malformed_attr",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DotDslTest.test_malformed_node": {
            "name": "test_malformed_node",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DotDslTest.test_malformed_EDGE": {
            "name": "test_malformed_EDGE",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DotDslTest.test_unknown_item": {
            "name": "test_unknown_item",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DotDslTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 100,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/error-handling/error_handling.py": {
        "handle_error_by_throwing_exception": {
            "name": "handle_error_by_throwing_exception",
            "location": 7,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "handle_error_by_returning_none": {
            "name": "handle_error_by_returning_none",
            "location": 12,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "input_data": [
                    "str",
                    "dict",
                    "Sequence[str]"
                ]
            }
        },
        "handle_error_by_returning_tuple": {
            "name": "handle_error_by_returning_tuple",
            "location": 20,
            "return": [
                "Tuple[(bool, Union[(int, _T0)])]"
            ],
            "arguments": {
                "input_data": [
                    "str",
                    "List[int]",
                    "dict",
                    "bool"
                ]
            }
        },
        "filelike_objects_are_closed_on_exception": {
            "name": "filelike_objects_are_closed_on_exception",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "filelike_object": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "python_exercism-master/error-handling/error_handling_test.py": {
        "FileLike.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fail_something": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "FileLike.open": {
            "name": "open",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLike.close": {
            "name": "close",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLike.__enter__": {
            "name": "__enter__",
            "location": 21,
            "return": [
                "FileLike"
            ],
            "arguments": {
                "self": [
                    "_TFileLike@@FileLike@@"
                ]
            }
        },
        "FileLike.__exit__": {
            "name": "__exit__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLike.do_something": {
            "name": "do_something",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrorHandlingTest.test_throw_exception": {
            "name": "test_throw_exception",
            "location": 35,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrorHandlingTest.test_return_none": {
            "name": "test_return_none",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrorHandlingTest.test_return_tuple": {
            "name": "test_return_tuple",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrorHandlingTest.test_filelike_objects_are_closed_on_exception": {
            "name": "test_filelike_objects_are_closed_on_exception",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrorHandlingTest.test_filelike_objects_are_closed_without_exception": {
            "name": "test_filelike_objects_are_closed_without_exception",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrorHandlingTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 90,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/etl/etl.py": {
        "transform": {
            "name": "transform",
            "location": 7,
            "return": [
                "dict"
            ],
            "arguments": {
                "legacy_data": [
                    "Dict[int,List[str]]",
                    "Dict[str,float]",
                    "Dict[int,list[str]]"
                ]
            }
        }
    },
    "python_exercism-master/etl/etl_test.py": {
        "EtlTest.test_single_letter": {
            "name": "test_single_letter",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EtlTest.test_single_score_with_multiple_letters": {
            "name": "test_single_score_with_multiple_letters",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EtlTest.test_multiple_scores_with_multiple_letters": {
            "name": "test_multiple_scores_with_multiple_letters",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EtlTest.test_multiple_scores_with_differing_numbers_of_letters": {
            "name": "test_multiple_scores_with_differing_numbers_of_letters",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/flatten-array/flatten_array.py": {
        "flatten": {
            "name": "flatten",
            "location": 6,
            "return": [
                "list"
            ],
            "arguments": {
                "iterable": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Callable[...,Awaitable[Any]]"
                ]
            }
        }
    },
    "python_exercism-master/flatten-array/flatten_array_test.py": {
        "FlattenArrayTest.test_no_nesting": {
            "name": "test_no_nesting",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlattenArrayTest.test_flattens_array_with_just_integers_present": {
            "name": "test_flattens_array_with_just_integers_present",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlattenArrayTest.test_5_level_nesting": {
            "name": "test_5_level_nesting",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlattenArrayTest.test_6_level_nesting": {
            "name": "test_6_level_nesting",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlattenArrayTest.test_6_level_nest_list_with_null_values": {
            "name": "test_6_level_nest_list_with_null_values",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlattenArrayTest.test_all_values_in_nested_list_are_null": {
            "name": "test_all_values_in_nested_list_are_null",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/food-chain/food_chain.py": {
        "recite": {
            "name": "recite",
            "location": 15,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "start_verse": [
                    "int"
                ],
                "end_verse": [
                    "int"
                ]
            }
        },
        "recite_one_verse": {
            "name": "recite_one_verse",
            "location": 24,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "verse": [
                    "int",
                    "Iterable",
                    "List[int]",
                    "str"
                ]
            }
        }
    },
    "python_exercism-master/food-chain/food_chain_test.py": {
        "FoodChainTest.test_fly": {
            "name": "test_fly",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoodChainTest.test_spider": {
            "name": "test_spider",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoodChainTest.test_bird": {
            "name": "test_bird",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoodChainTest.test_cat": {
            "name": "test_cat",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoodChainTest.test_dog": {
            "name": "test_dog",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoodChainTest.test_goat": {
            "name": "test_goat",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoodChainTest.test_cow": {
            "name": "test_cow",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoodChainTest.test_horse": {
            "name": "test_horse",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoodChainTest.test_multiple_verses": {
            "name": "test_multiple_verses",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoodChainTest.test_full_song": {
            "name": "test_full_song",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/forth/forth.py": {
        "update_stack": {
            "name": "update_stack",
            "location": 11,
            "return": [
                "float",
                "List[int]",
                "str",
                "int",
                "List",
                "bool",
                "Dict[str,Any]",
                "Set",
                "Tuple[Union[Any,Any,Any]]",
                "List[complex]"
            ],
            "arguments": {
                "stack": [
                    "List[int]",
                    "str",
                    "bytearray",
                    "List[Tuple[str, Any]]"
                ],
                "element": [
                    "str",
                    "List[str]",
                    "int",
                    "dict"
                ]
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 42,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_data": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]"
                ]
            }
        }
    },
    "python_exercism-master/forth/forth_test.py": {
        "ForthTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 10,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        },
        "ParsingAndNumbersTest.test_numbers_just_get_pushed_onto_the_stack": {
            "name": "test_numbers_just_get_pushed_onto_the_stack",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdditionTest.test_can_add_two_numbers": {
            "name": "test_can_add_two_numbers",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdditionTest.test_errors_if_there_is_nothing_on_the_stack": {
            "name": "test_errors_if_there_is_nothing_on_the_stack",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdditionTest.test_errors_if_there_is_only_one_value_on_the_stack": {
            "name": "test_errors_if_there_is_only_one_value_on_the_stack",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubtractionTest.test_can_subtract_two_numbers": {
            "name": "test_can_subtract_two_numbers",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubtractionTest.test_errors_if_there_is_nothing_on_the_stack": {
            "name": "test_errors_if_there_is_nothing_on_the_stack",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubtractionTest.test_errors_if_there_is_only_one_value_on_the_stack": {
            "name": "test_errors_if_there_is_only_one_value_on_the_stack",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiplicationTest.test_can_multiply_two_numbers": {
            "name": "test_can_multiply_two_numbers",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiplicationTest.test_errors_if_there_is_nothing_on_the_stack": {
            "name": "test_errors_if_there_is_nothing_on_the_stack",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiplicationTest.test_errors_if_there_is_only_one_value_on_the_stack": {
            "name": "test_errors_if_there_is_only_one_value_on_the_stack",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DivisionTest.test_can_divide_two_numbers": {
            "name": "test_can_divide_two_numbers",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DivisionTest.test_performs_integer_division": {
            "name": "test_performs_integer_division",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DivisionTest.test_errors_if_dividing_by_zero": {
            "name": "test_errors_if_dividing_by_zero",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DivisionTest.test_errors_if_there_is_nothing_on_the_stack": {
            "name": "test_errors_if_there_is_nothing_on_the_stack",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DivisionTest.test_errors_if_there_is_only_one_value_on_the_stack": {
            "name": "test_errors_if_there_is_only_one_value_on_the_stack",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombinedArithmeticTest.test_addition_and_subtraction": {
            "name": "test_addition_and_subtraction",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombinedArithmeticTest.test_multiplication_and_division": {
            "name": "test_multiplication_and_division",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DupTest.test_copies_a_value_on_the_stack": {
            "name": "test_copies_a_value_on_the_stack",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DupTest.test_copies_the_top_value_on_the_stack": {
            "name": "test_copies_the_top_value_on_the_stack",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DupTest.test_errors_if_there_is_nothing_on_the_stack": {
            "name": "test_errors_if_there_is_nothing_on_the_stack",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropTest.test_removes_the_top_value_on_the_stack_if_it_is_the_only_one": {
            "name": "test_removes_the_top_value_on_the_stack_if_it_is_the_only_one",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropTest.test_removes_the_top_value_on_the_stack_if_it_is_not_the_only_one": {
            "name": "test_removes_the_top_value_on_the_stack_if_it_is_not_the_only_one",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropTest.test_errors_if_there_is_nothing_on_the_stack": {
            "name": "test_errors_if_there_is_nothing_on_the_stack",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwapTest.test_swaps_the_top_two_values_on_the_stack_if_they_are_the_only_ones": {
            "name": "test_swaps_the_top_two_values_on_the_stack_if_they_are_the_only_ones",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwapTest.test_swaps_the_top_two_values_on_the_stack_if_they_are_not_the_only_ones": {
            "name": "test_swaps_the_top_two_values_on_the_stack_if_they_are_not_the_only_ones",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwapTest.test_errors_if_there_is_nothing_on_the_stack": {
            "name": "test_errors_if_there_is_nothing_on_the_stack",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwapTest.test_errors_if_there_is_only_one_value_on_the_stack": {
            "name": "test_errors_if_there_is_only_one_value_on_the_stack",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverTest.test_copies_the_second_element_if_there_are_only_two": {
            "name": "test_copies_the_second_element_if_there_are_only_two",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverTest.test_copies_the_second_element_if_there_are_more_than_two": {
            "name": "test_copies_the_second_element_if_there_are_more_than_two",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverTest.test_errors_if_there_is_nothing_on_the_stack": {
            "name": "test_errors_if_there_is_nothing_on_the_stack",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverTest.test_errors_if_there_is_only_one_value_on_the_stack": {
            "name": "test_errors_if_there_is_only_one_value_on_the_stack",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDefinedWordsTest.test_can_consist_of_built_in_words": {
            "name": "test_can_consist_of_built_in_words",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDefinedWordsTest.test_execute_in_the_right_order": {
            "name": "test_execute_in_the_right_order",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDefinedWordsTest.test_can_override_other_user_defined_words": {
            "name": "test_can_override_other_user_defined_words",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDefinedWordsTest.test_can_override_built_in_words": {
            "name": "test_can_override_built_in_words",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDefinedWordsTest.test_can_override_built_in_operators": {
            "name": "test_can_override_built_in_operators",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDefinedWordsTest.test_can_use_different_words_with_the_same_name": {
            "name": "test_can_use_different_words_with_the_same_name",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDefinedWordsTest.test_can_define_word_that_uses_word_with_the_same_name": {
            "name": "test_can_define_word_that_uses_word_with_the_same_name",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDefinedWordsTest.test_cannot_redefine_numbers": {
            "name": "test_cannot_redefine_numbers",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDefinedWordsTest.test_errors_if_executing_a_non_existent_word": {
            "name": "test_errors_if_executing_a_non_existent_word",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseInsensitivityTest.test_dup_is_case_insensitive": {
            "name": "test_dup_is_case_insensitive",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseInsensitivityTest.test_drop_is_case_insensitive": {
            "name": "test_drop_is_case_insensitive",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseInsensitivityTest.test_swap_is_case_insensitive": {
            "name": "test_swap_is_case_insensitive",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseInsensitivityTest.test_over_is_case_insensitive": {
            "name": "test_over_is_case_insensitive",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseInsensitivityTest.test_user_defined_words_are_case_insensitive": {
            "name": "test_user_defined_words_are_case_insensitive",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseInsensitivityTest.test_definitions_are_case_insensitive": {
            "name": "test_definitions_are_case_insensitive",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseInsensitivityTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 198,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/ghost-gobble-arcade-game/arcade_game.py": {
        "eat_ghost": {
            "name": "eat_ghost",
            "location": 1,
            "return": [
                "Union[(_T0, _T1)]"
            ],
            "arguments": {
                "power_pellet_active": [
                    "int",
                    "Callable",
                    "str"
                ],
                "touching_ghost": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "score": {
            "name": "score",
            "location": 11,
            "return": [
                "Union[(_T0, _T1)]"
            ],
            "arguments": {
                "touching_power_pellet": [
                    "int",
                    "Callable",
                    "str"
                ],
                "touching_dot": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "lose": {
            "name": "lose",
            "location": 21,
            "return": [
                "Union[(bool, _T1)]"
            ],
            "arguments": {
                "power_pellet_active": [
                    "int",
                    "Callable",
                    "str"
                ],
                "touching_ghost": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "win": {
            "name": "win",
            "location": 31,
            "return": [
                "Union[(bool, _T0)]"
            ],
            "arguments": {
                "has_eaten_all_dots": [
                    "int",
                    "str",
                    "Callable",
                    "bool",
                    "List[str]",
                    "Optional[List[str]]",
                    "None",
                    "List[Dict]",
                    "List[dict]"
                ],
                "power_pellet_active": [
                    "int",
                    "str",
                    "Callable",
                    "bool",
                    "List[str]",
                    "Optional[List[str]]",
                    "None",
                    "List[Dict]",
                    "List[dict]"
                ],
                "touching_ghost": [
                    "int",
                    "str",
                    "Callable",
                    "bool",
                    "List[str]",
                    "Optional[List[str]]",
                    "None",
                    "List[Dict]",
                    "List[dict]"
                ]
            }
        }
    },
    "python_exercism-master/ghost-gobble-arcade-game/arcade_game_test.py": {
        "GhostGobbleGameTest.test_ghost_gets_eaten": {
            "name": "test_ghost_gets_eaten",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GhostGobbleGameTest.test_ghost_does_not_get_eaten_because_no_power_pellet_active": {
            "name": "test_ghost_does_not_get_eaten_because_no_power_pellet_active",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GhostGobbleGameTest.test_ghost_does_not_get_eaten_because_not_touching_ghost": {
            "name": "test_ghost_does_not_get_eaten_because_not_touching_ghost",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GhostGobbleGameTest.test_score_when_eating_dot": {
            "name": "test_score_when_eating_dot",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GhostGobbleGameTest.test_score_when_eating_power_pellet": {
            "name": "test_score_when_eating_power_pellet",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GhostGobbleGameTest.test_no_score_when_nothing_eaten": {
            "name": "test_no_score_when_nothing_eaten",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GhostGobbleGameTest.test_lose_if_touching_a_ghost_without_a_power_pellet_active": {
            "name": "test_lose_if_touching_a_ghost_without_a_power_pellet_active",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GhostGobbleGameTest.test_dont_lose_if_touching_a_ghost_with_a_power_pellet_active": {
            "name": "test_dont_lose_if_touching_a_ghost_with_a_power_pellet_active",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GhostGobbleGameTest.test_dont_lose_if_not_touching_a_ghost": {
            "name": "test_dont_lose_if_not_touching_a_ghost",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GhostGobbleGameTest.test_win_if_all_dots_eaten": {
            "name": "test_win_if_all_dots_eaten",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GhostGobbleGameTest.test_dont_win_if_all_dots_eaten_but_touching_a_ghost": {
            "name": "test_dont_win_if_all_dots_eaten_but_touching_a_ghost",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GhostGobbleGameTest.test_win_if_all_dots_eaten_and_touching_a_ghost_with_a_power_pellet_active": {
            "name": "test_win_if_all_dots_eaten_and_touching_a_ghost_with_a_power_pellet_active",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/gigasecond/gigasecond.py": {
        "add_gigasecond": {
            "name": "add_gigasecond",
            "location": 4,
            "return": [
                "int",
                "Optional[str]",
                "datetime.datetime"
            ],
            "arguments": {
                "moment": [
                    "int",
                    "Optional[str]",
                    "str",
                    "datetime.datetime",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/gigasecond/gigasecond_test.py": {
        "GigasecondTest.test_date_only_specification_of_time": {
            "name": "test_date_only_specification_of_time",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GigasecondTest.test_another_date_only_specification_of_time": {
            "name": "test_another_date_only_specification_of_time",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GigasecondTest.test_one_more_date_only_specification_of_time": {
            "name": "test_one_more_date_only_specification_of_time",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GigasecondTest.test_full_time_specified": {
            "name": "test_full_time_specified",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GigasecondTest.test_full_time_with_day_roll_over": {
            "name": "test_full_time_with_day_roll_over",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GigasecondTest.test_yourself": {
            "name": "test_yourself",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/go-counting/go_counting.py": {
        "Board.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Union[str,int]",
                    "bool"
                ]
            }
        },
        "Board.territory": {
            "name": "territory",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "List",
                    "T"
                ],
                "y": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "List",
                    "T"
                ]
            }
        },
        "Board.territories": {
            "name": "territories",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/go-counting/go_counting_test.py": {
        "GoCountingTest.test_black_corner_territory_on_5x5_board": {
            "name": "test_black_corner_territory_on_5x5_board",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoCountingTest.test_white_center_territory_on_5x5_board": {
            "name": "test_white_center_territory_on_5x5_board",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoCountingTest.test_open_corner_territory_on_5x5_board": {
            "name": "test_open_corner_territory_on_5x5_board",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoCountingTest.test_a_stone_and_not_a_territory_on_5x5_board": {
            "name": "test_a_stone_and_not_a_territory_on_5x5_board",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoCountingTest.test_invalid_because_x_is_too_low_for_5x5_board": {
            "name": "test_invalid_because_x_is_too_low_for_5x5_board",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoCountingTest.test_invalid_because_x_is_too_high_for_5x5_board": {
            "name": "test_invalid_because_x_is_too_high_for_5x5_board",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoCountingTest.test_invalid_because_y_is_too_low_for_5x5_board": {
            "name": "test_invalid_because_y_is_too_low_for_5x5_board",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoCountingTest.test_invalid_because_y_is_too_high_for_5x5_board": {
            "name": "test_invalid_because_y_is_too_high_for_5x5_board",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoCountingTest.test_one_territory_is_the_whole_board": {
            "name": "test_one_territory_is_the_whole_board",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoCountingTest.test_two_territory_rectangular_board": {
            "name": "test_two_territory_rectangular_board",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoCountingTest.test_two_region_rectangular_board": {
            "name": "test_two_region_rectangular_board",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoCountingTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 75,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/grade-school/grade_school.py": {
        "School.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "School.add_student": {
            "name": "add_student",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Callable",
                    "Dict[int,List[int]]",
                    "Dict[int,list[int]]"
                ],
                "grade": [
                    "str",
                    "Callable",
                    "Dict[int,List[int]]",
                    "Dict[int,list[int]]"
                ]
            }
        },
        "School.roster": {
            "name": "roster",
            "location": 17,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "School.grade": {
            "name": "grade",
            "location": 25,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "grade_number": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[List[Callable]]",
                    "None",
                    "List[Callable]"
                ]
            }
        }
    },
    "python_exercism-master/grade-school/grade_school_test.py": {
        "GradeSchoolTest.test_adding_a_student_adds_them_to_the_sorted_roster": {
            "name": "test_adding_a_student_adds_them_to_the_sorted_roster",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GradeSchoolTest.test_adding_more_student_adds_them_to_the_sorted_roster": {
            "name": "test_adding_more_student_adds_them_to_the_sorted_roster",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GradeSchoolTest.test_adding_students_to_different_grades_adds_them_to_the_same_sorted_roster": {
            "name": "test_adding_students_to_different_grades_adds_them_to_the_same_sorted_roster",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GradeSchoolTest.test_roster_returns_an_empty_list_if_there_are_no_students_enrolled": {
            "name": "test_roster_returns_an_empty_list_if_there_are_no_students_enrolled",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GradeSchoolTest.test_student_names_with_grades_are_displayed_in_the_same_sorted_roster": {
            "name": "test_student_names_with_grades_are_displayed_in_the_same_sorted_roster",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GradeSchoolTest.test_grade_returns_the_students_in_that_grade_in_alphabetical_order": {
            "name": "test_grade_returns_the_students_in_that_grade_in_alphabetical_order",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GradeSchoolTest.test_grade_returns_an_empty_list_if_there_are_no_students_in_that_grade": {
            "name": "test_grade_returns_an_empty_list_if_there_are_no_students_in_that_grade",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/grains/grains.py": {
        "is_valid_square": {
            "name": "is_valid_square",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "integer_number": [
                    "str",
                    "float"
                ]
            }
        },
        "square": {
            "name": "square",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "integer_number": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "total": {
            "name": "total",
            "location": 16,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "python_exercism-master/grains/grains_test.py": {
        "GrainsTest.test_1": {
            "name": "test_1",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrainsTest.test_2": {
            "name": "test_2",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrainsTest.test_3": {
            "name": "test_3",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrainsTest.test_4": {
            "name": "test_4",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrainsTest.test_16": {
            "name": "test_16",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrainsTest.test_32": {
            "name": "test_32",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrainsTest.test_64": {
            "name": "test_64",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrainsTest.test_square_0_raises_an_exception": {
            "name": "test_square_0_raises_an_exception",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrainsTest.test_negative_square_raises_an_exception": {
            "name": "test_negative_square_raises_an_exception",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrainsTest.test_square_greater_than_64_raises_an_exception": {
            "name": "test_square_greater_than_64_raises_an_exception",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrainsTest.test_returns_the_total_number_of_grains_on_the_board": {
            "name": "test_returns_the_total_number_of_grains_on_the_board",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrainsTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 46,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/grep/grep.py": {
        "grep": {
            "name": "grep",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "List[Tuple[int,int]]"
                ],
                "flags": [
                    "str",
                    "Dict",
                    "int"
                ],
                "files": [
                    "List[str]",
                    "str",
                    "Dict[str,str]",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "python_exercism-master/grep/grep_test.py": {
        "open_mock": {
            "name": "open_mock",
            "location": 36,
            "return": [
                "io.StringIO"
            ],
            "arguments": {
                "fname": [
                    "dict[, ]",
                    "dict[str, str]",
                    "list[]"
                ]
            }
        },
        "GrepTest.test_one_file_one_match_no_flags": {
            "name": "test_one_file_one_match_no_flags",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": [],
                "mock_open": []
            }
        },
        "GrepTest.test_one_file_one_match_print_line_numbers_flag": {
            "name": "test_one_file_one_match_print_line_numbers_flag",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": [],
                "mock_open": []
            }
        },
        "GrepTest.test_one_file_one_match_case_insensitive_flag": {
            "name": "test_one_file_one_match_case_insensitive_flag",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": [],
                "mock_open": []
            }
        },
        "GrepTest.test_one_file_one_match_print_file_names_flag": {
            "name": "test_one_file_one_match_print_file_names_flag",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": [],
                "mock_open": []
            }
        },
        "GrepTest.test_one_file_one_match_match_entire_lines_flag": {
            "name": "test_one_file_one_match_match_entire_lines_flag",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": [],
                "mock_open": []
            }
        },
        "GrepTest.test_one_file_one_match_multiple_flags": {
            "name": "test_one_file_one_match_multiple_flags",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": [],
                "mock_open": []
            }
        },
        "GrepTest.test_one_file_several_matches_no_flags": {
            "name": "test_one_file_several_matches_no_flags",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": [],
                "mock_open": []
            }
        },
        "GrepTest.test_one_file_several_matches_print_line_numbers_flag": {
            "name": "test_one_file_several_matches_print_line_numbers_flag",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": [],
                "mock_open": []
            }
        },
        "GrepTest.test_one_file_several_matches_match_entire_lines_flag": {
            "name": "test_one_file_several_matches_match_entire_lines_flag",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": [],
                "mock_open": []
            }
        },
        "GrepTest.test_one_file_several_matches_case_insensitive_flag": {
            "name": "test_one_file_several_matches_case_insensitive_flag",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": [],
                "mock_open": []
            }
        },
        "GrepTest.test_one_file_several_matches_inverted_flag": {
            "name": "test_one_file_several_matches_inverted_flag",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": [],
                "mock_open": []
            }
        },
        "GrepTest.test_one_file_no_matches_various_flags": {
            "name": "test_one_file_no_matches_various_flags",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": [],
                "mock_open": []
            }
        },
        "GrepTest.test_one_file_one_match_file_flag_takes_precedence_over_line_flag": {
            "name": "test_one_file_one_match_file_flag_takes_precedence_over_line_flag",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": [],
                "mock_open": []
            }
        },
        "GrepTest.test_one_file_several_matches_inverted_and_match_entire_lines_flags": {
            "name": "test_one_file_several_matches_inverted_and_match_entire_lines_flags",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": [],
                "mock_open": []
            }
        },
        "GrepTest.test_multiple_files_one_match_no_flags": {
            "name": "test_multiple_files_one_match_no_flags",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": [],
                "mock_open": []
            }
        },
        "GrepTest.test_multiple_files_several_matches_no_flags": {
            "name": "test_multiple_files_several_matches_no_flags",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": [],
                "mock_open": []
            }
        },
        "GrepTest.test_multiple_files_several_matches_print_line_numbers_flag": {
            "name": "test_multiple_files_several_matches_print_line_numbers_flag",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": [],
                "mock_open": []
            }
        },
        "GrepTest.test_multiple_files_one_match_print_file_names_flag": {
            "name": "test_multiple_files_one_match_print_file_names_flag",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": [],
                "mock_open": []
            }
        },
        "GrepTest.test_multiple_files_several_matches_case_insensitive_flag": {
            "name": "test_multiple_files_several_matches_case_insensitive_flag",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": [],
                "mock_open": []
            }
        },
        "GrepTest.test_multiple_files_several_matches_inverted_flag": {
            "name": "test_multiple_files_several_matches_inverted_flag",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": [],
                "mock_open": []
            }
        },
        "GrepTest.test_multiple_files_one_match_match_entire_lines_flag": {
            "name": "test_multiple_files_one_match_match_entire_lines_flag",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": [],
                "mock_open": []
            }
        },
        "GrepTest.test_multiple_files_one_match_multiple_flags": {
            "name": "test_multiple_files_one_match_multiple_flags",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": [],
                "mock_open": []
            }
        },
        "GrepTest.test_multiple_files_no_matches_various_flags": {
            "name": "test_multiple_files_no_matches_various_flags",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": [],
                "mock_open": []
            }
        },
        "GrepTest.test_multiple_files_several_matches_file_flag_takes_precedence_over_line_number_flag": {
            "name": "test_multiple_files_several_matches_file_flag_takes_precedence_over_line_number_flag",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": [],
                "mock_open": []
            }
        },
        "GrepTest.test_multiple_files_several_matches_inverted_and_match_entire_lines_flags": {
            "name": "test_multiple_files_several_matches_inverted_and_match_entire_lines_flags",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": [],
                "mock_open": []
            }
        }
    },
    "python_exercism-master/guidos-gorgeous-lasagna/lasagna.py": {
        "bake_time_remaining": {
            "name": "bake_time_remaining",
            "location": 5,
            "return": [
                "int",
                "float",
                "Union[dict,list]",
                "str",
                "bool",
                "Iterable[Dict[str,Any]]"
            ],
            "arguments": {
                "elapsed_bake_time": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "preparation_time_in_minutes": {
            "name": "preparation_time_in_minutes",
            "location": 18,
            "return": [
                "int",
                "str",
                "Dict",
                "List[str]",
                "bool",
                "float"
            ],
            "arguments": {
                "number_of_layers": [
                    "int",
                    "str",
                    "Union[int,slice]",
                    "Dict[str,Any]"
                ]
            }
        },
        "elapsed_time_in_minutes": {
            "name": "elapsed_time_in_minutes",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "number_of_layers": [
                    "str",
                    "int",
                    "Optional[bool]",
                    "None"
                ],
                "elapsed_bake_time": [
                    "str",
                    "int",
                    "Optional[bool]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/guidos-gorgeous-lasagna/lasagna_test.py": {
        "LasagnaTest.test_EXPECTED_BAKE_TIME": {
            "name": "test_EXPECTED_BAKE_TIME",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LasagnaTest.test_bake_time_remaining": {
            "name": "test_bake_time_remaining",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LasagnaTest.test_preparation_time_in_minutes": {
            "name": "test_preparation_time_in_minutes",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LasagnaTest.test_elapsed_time_in_minutes": {
            "name": "test_elapsed_time_in_minutes",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LasagnaTest.test_docstrings_were_written": {
            "name": "test_docstrings_were_written",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/hamming/hamming.py": {
        "distance": {
            "name": "distance",
            "location": 4,
            "return": [
                "bool",
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "strand_a": [
                    "str",
                    "int"
                ],
                "strand_b": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "python_exercism-master/hamming/hamming_test.py": {
        "HammingTest.test_empty_strands": {
            "name": "test_empty_strands",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HammingTest.test_single_letter_identical_strands": {
            "name": "test_single_letter_identical_strands",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HammingTest.test_single_letter_different_strands": {
            "name": "test_single_letter_different_strands",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HammingTest.test_long_identical_strands": {
            "name": "test_long_identical_strands",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HammingTest.test_long_different_strands": {
            "name": "test_long_different_strands",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HammingTest.test_disallow_first_strand_longer": {
            "name": "test_disallow_first_strand_longer",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HammingTest.test_disallow_second_strand_longer": {
            "name": "test_disallow_second_strand_longer",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HammingTest.test_disallow_left_empty_strand": {
            "name": "test_disallow_left_empty_strand",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HammingTest.test_disallow_right_empty_strand": {
            "name": "test_disallow_right_empty_strand",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HammingTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 41,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/hangman/hangman.py": {
        "Hangman.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str",
                    "bytes",
                    "IO[bytes]"
                ]
            }
        },
        "Hangman.guess": {
            "name": "guess",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "char": [
                    "str",
                    "int",
                    "Union[slice,List[slice],List[int]]",
                    "List[slice]",
                    "List[int]"
                ]
            }
        },
        "Hangman.get_masked_word": {
            "name": "get_masked_word",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hangman.get_status": {
            "name": "get_status",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/hangman/hangman_test.py": {
        "HangmanTests.test_initially_9_failures_are_allowed": {
            "name": "test_initially_9_failures_are_allowed",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HangmanTests.test_initially_no_letters_are_guessed": {
            "name": "test_initially_no_letters_are_guessed",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HangmanTests.test_after_10_failures_the_game_is_over": {
            "name": "test_after_10_failures_the_game_is_over",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HangmanTests.test_feeding_a_correct_letter_removes_underscores": {
            "name": "test_feeding_a_correct_letter_removes_underscores",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HangmanTests.test_feeding_a_correct_letter_twice_counts_as_a_failure": {
            "name": "test_feeding_a_correct_letter_twice_counts_as_a_failure",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HangmanTests.test_getting_all_the_letters_right_makes_for_a_win": {
            "name": "test_getting_all_the_letters_right_makes_for_a_win",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HangmanTests.test_winning_on_last_guess_still_counts_as_a_win": {
            "name": "test_winning_on_last_guess_still_counts_as_a_win",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HangmanTests.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 96,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/hello-world/hello_world.py": {
        "hello": {
            "name": "hello",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "python_exercism-master/hello-world/hello_world_test.py": {
        "HelloWorldTest.test_say_hi": {
            "name": "test_say_hi",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/high-scores/high_scores.py": {
        "latest": {
            "name": "latest",
            "location": 7,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "scores": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "personal_best": {
            "name": "personal_best",
            "location": 12,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "scores": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "personal_top_three": {
            "name": "personal_top_three",
            "location": 17,
            "return": [
                "list"
            ],
            "arguments": {
                "scores": [
                    "List[int]",
                    "bytes",
                    "str",
                    "Callable",
                    "Optional[str]"
                ]
            }
        }
    },
    "python_exercism-master/high-scores/high_scores_test.py": {
        "HighScoreTest.test_latest_score": {
            "name": "test_latest_score",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HighScoreTest.test_personal_best": {
            "name": "test_personal_best",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HighScoreTest.test_personal_top_three_from_a_long_list": {
            "name": "test_personal_top_three_from_a_long_list",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HighScoreTest.test_personal_top_three_highest_to_lowest": {
            "name": "test_personal_top_three_highest_to_lowest",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HighScoreTest.test_personal_top_three_when_there_is_a_tie": {
            "name": "test_personal_top_three_when_there_is_a_tie",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HighScoreTest.test_personal_top_three_when_there_are_less_than_3": {
            "name": "test_personal_top_three_when_there_are_less_than_3",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HighScoreTest.test_personal_top_three_when_there_is_only_one": {
            "name": "test_personal_top_three_when_there_is_only_one",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/house/house.py": {
        "make_verse": {
            "name": "make_verse",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "verse": [
                    "int",
                    "str"
                ]
            }
        },
        "recite": {
            "name": "recite",
            "location": 28,
            "return": [
                "list"
            ],
            "arguments": {
                "start_verse": [
                    "int"
                ],
                "end_verse": [
                    "int"
                ]
            }
        }
    },
    "python_exercism-master/house/house_test.py": {
        "HouseTest.test_verse_one_the_house_that_jack_built": {
            "name": "test_verse_one_the_house_that_jack_built",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HouseTest.test_verse_two_the_malt_that_lay": {
            "name": "test_verse_two_the_malt_that_lay",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HouseTest.test_verse_three_the_rat_that_ate": {
            "name": "test_verse_three_the_rat_that_ate",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HouseTest.test_verse_four_the_cat_that_killed": {
            "name": "test_verse_four_the_cat_that_killed",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HouseTest.test_verse_five_the_dog_that_worried": {
            "name": "test_verse_five_the_dog_that_worried",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HouseTest.test_verse_six_the_cow_with_the_crumpled_horn": {
            "name": "test_verse_six_the_cow_with_the_crumpled_horn",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HouseTest.test_verse_seven_the_maiden_all_forlorn": {
            "name": "test_verse_seven_the_maiden_all_forlorn",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HouseTest.test_verse_eight_the_man_all_tattered_and_torn": {
            "name": "test_verse_eight_the_man_all_tattered_and_torn",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HouseTest.test_verse_nine_the_priest_all_shaven_and_shorn": {
            "name": "test_verse_nine_the_priest_all_shaven_and_shorn",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HouseTest.test_verse_10_the_rooster_that_crowed_in_the_morn": {
            "name": "test_verse_10_the_rooster_that_crowed_in_the_morn",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HouseTest.test_verse_11_the_farmer_sowing_his_corn": {
            "name": "test_verse_11_the_farmer_sowing_his_corn",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HouseTest.test_verse_12_the_horse_and_the_hound_and_the_horn": {
            "name": "test_verse_12_the_horse_and_the_hound_and_the_horn",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HouseTest.test_multiple_verses": {
            "name": "test_multiple_verses",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HouseTest.test_full_rhyme": {
            "name": "test_full_rhyme",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/inventory-management/dicts.py": {
        "create_inventory": {
            "name": "create_inventory",
            "location": 4,
            "return": [
                "Dict[(nothing, int)]"
            ],
            "arguments": {
                "items": [
                    "Dict[str,str]",
                    "Dict[str,int]",
                    "bool",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "add_items": {
            "name": "add_items",
            "location": 14,
            "return": [
                "Dict[(nothing, int)]"
            ],
            "arguments": {
                "inventory": [
                    "Optional[Type]",
                    "Type",
                    "str",
                    "List[int]",
                    "List[str]",
                    "None",
                    "int"
                ],
                "items": [
                    "Optional[Type]",
                    "Type",
                    "str",
                    "List[int]",
                    "List[str]",
                    "None",
                    "int"
                ]
            }
        },
        "decrement_items": {
            "name": "decrement_items",
            "location": 25,
            "return": [
                "bool",
                "str",
                "Dict",
                "float",
                "List",
                "List[str]",
                "Dict[str,list[Callable]]",
                "Dict[str,str]",
                "Mapping",
                "Type"
            ],
            "arguments": {
                "inventory": [
                    "Dict",
                    "List",
                    "Dict[str,str]",
                    "Dict[str,List[Callable]]",
                    "str",
                    "Dict[str,list[Callable]]",
                    "Type",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "items": [
                    "List[str]",
                    "Set[str]",
                    "Dict",
                    "T"
                ]
            }
        },
        "remove_item": {
            "name": "remove_item",
            "location": 38,
            "return": [
                "bool",
                "Dict",
                "str",
                "Dict[str,str]",
                "float",
                "List[dict[str,Any]]",
                "List[str]"
            ],
            "arguments": {
                "inventory": [
                    "Dict",
                    "Dict[str,str]",
                    "Sequence",
                    "str",
                    "List[dict[str,Any]]",
                    "Iterable[str]",
                    "List[Dict[str,Any]]"
                ],
                "item": [
                    "Sequence",
                    "Dict",
                    "Dict[str,str]",
                    "str",
                    "List[dict[str,Any]]",
                    "Iterable[str]",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "list_inventory": {
            "name": "list_inventory",
            "location": 50,
            "return": [
                "List[Tuple[(Any, int)]]"
            ],
            "arguments": {
                "inventory": [
                    "str",
                    "Dict",
                    "int"
                ]
            }
        }
    },
    "python_exercism-master/inventory-management/dicts_test.py": {
        "InventoryTest.test_create_inventory": {
            "name": "test_create_inventory",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryTest.test_add_one_item": {
            "name": "test_add_one_item",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryTest.test_add_multiple_items": {
            "name": "test_add_multiple_items",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryTest.test_add_new_item": {
            "name": "test_add_new_item",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryTest.test_add_from_empty_dict": {
            "name": "test_add_from_empty_dict",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryTest.test_decrement_items": {
            "name": "test_decrement_items",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryTest.test_not_below_zero": {
            "name": "test_not_below_zero",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryTest.test_remove_item": {
            "name": "test_remove_item",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryTest.test_remove_item_not_in_inventory": {
            "name": "test_remove_item_not_in_inventory",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryTest.test_list_inventory": {
            "name": "test_list_inventory",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/isbn-verifier/isbn_verifier.py": {
        "verify": {
            "name": "verify",
            "location": 5,
            "return": [
                "bool"
            ],
            "arguments": {
                "isbn": [
                    "str",
                    "List[int]",
                    "int",
                    "Sequence[int]",
                    "Union[float,int]"
                ]
            }
        }
    },
    "python_exercism-master/isbn-verifier/isbn_verifier_test.py": {
        "IsbnVerifierTest.test_valid_isbn_number": {
            "name": "test_valid_isbn_number",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsbnVerifierTest.test_invalid_check_digit": {
            "name": "test_invalid_check_digit",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsbnVerifierTest.test_valid_with_X_check_digit": {
            "name": "test_valid_with_X_check_digit",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsbnVerifierTest.test_invalid_check_digit_other_than_X": {
            "name": "test_invalid_check_digit_other_than_X",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsbnVerifierTest.test_invalid_character_in_isbn": {
            "name": "test_invalid_character_in_isbn",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsbnVerifierTest.test_invalid_X_other_than_check_digit": {
            "name": "test_invalid_X_other_than_check_digit",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsbnVerifierTest.test_valid_isbn_without_separating_dashes": {
            "name": "test_valid_isbn_without_separating_dashes",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsbnVerifierTest.test_valid_isbn_without_separating_dashes_with_X_check_digit": {
            "name": "test_valid_isbn_without_separating_dashes_with_X_check_digit",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsbnVerifierTest.test_invalid_isbn_without_check_digit_and_dashes": {
            "name": "test_invalid_isbn_without_check_digit_and_dashes",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsbnVerifierTest.test_invalid_too_long_isbn_with_no_dashes": {
            "name": "test_invalid_too_long_isbn_with_no_dashes",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsbnVerifierTest.test_invalid_too_short_isbn": {
            "name": "test_invalid_too_short_isbn",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsbnVerifierTest.test_invalid_isbn_without_check_digit": {
            "name": "test_invalid_isbn_without_check_digit",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsbnVerifierTest.test_invalid_check_digit_X_used_for_0": {
            "name": "test_invalid_check_digit_X_used_for_0",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsbnVerifierTest.test_valid_empty_isbn": {
            "name": "test_valid_empty_isbn",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsbnVerifierTest.test_input_is_nine_characters": {
            "name": "test_input_is_nine_characters",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsbnVerifierTest.test_invalid_characters_are_not_ignored": {
            "name": "test_invalid_characters_are_not_ignored",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsbnVerifierTest.test_input_is_too_long_but_contains_a_valid_isbn": {
            "name": "test_input_is_too_long_but_contains_a_valid_isbn",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/isogram/isogram.py": {
        "is_isogram": {
            "name": "is_isogram",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {
                "string": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "python_exercism-master/isogram/isogram_test.py": {
        "IsogramTest.test_empty_string": {
            "name": "test_empty_string",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsogramTest.test_isogram_with_only_lower_case_characters": {
            "name": "test_isogram_with_only_lower_case_characters",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsogramTest.test_word_with_one_duplicated_character": {
            "name": "test_word_with_one_duplicated_character",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsogramTest.test_word_with_one_duplicated_character_from_end_of_alphabet": {
            "name": "test_word_with_one_duplicated_character_from_end_of_alphabet",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsogramTest.test_longest_reported_english_isogram": {
            "name": "test_longest_reported_english_isogram",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsogramTest.test_word_with_duplicated_character_in_mixed_case": {
            "name": "test_word_with_duplicated_character_in_mixed_case",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsogramTest.test_word_with_duplicated_letter_in_mixed_case_lowercase_first": {
            "name": "test_word_with_duplicated_letter_in_mixed_case_lowercase_first",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsogramTest.test_hypothetical_isogrammic_word_with_hyphen": {
            "name": "test_hypothetical_isogrammic_word_with_hyphen",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsogramTest.test_hypothetical_word_with_duplicate_character_following_hyphen": {
            "name": "test_hypothetical_word_with_duplicate_character_following_hyphen",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsogramTest.test_isogram_with_duplicated_hyphen": {
            "name": "test_isogram_with_duplicated_hyphen",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsogramTest.test_made_up_name_that_is_an_isogram": {
            "name": "test_made_up_name_that_is_an_isogram",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsogramTest.test_duplicated_character_in_the_middle": {
            "name": "test_duplicated_character_in_the_middle",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsogramTest.test_same_first_and_last_characters": {
            "name": "test_same_first_and_last_characters",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsogramTest.test_isogram_with_duplicated_letter_and_nonletter_character": {
            "name": "test_isogram_with_duplicated_letter_and_nonletter_character",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/kindergarten-garden/kindergarten_garden.py": {
        "Garden.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "diagram": [
                    "str",
                    "bool",
                    "List[str]",
                    "int",
                    "Iterable[str]"
                ],
                "students": [
                    "str",
                    "List[str]",
                    "bool",
                    "T"
                ]
            }
        },
        "Garden.plants": {
            "name": "plants",
            "location": 36,
            "return": [
                "Optional[list]"
            ],
            "arguments": {
                "self": [],
                "student": [
                    "int",
                    "str",
                    "Type",
                    "float",
                    "Callable",
                    "Optional[int]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/kindergarten-garden/kindergarten_garden_test.py": {
        "KindergartenGardenTest.test_garden_with_single_student": {
            "name": "test_garden_with_single_student",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KindergartenGardenTest.test_different_garden_with_single_student": {
            "name": "test_different_garden_with_single_student",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KindergartenGardenTest.test_garden_with_two_students": {
            "name": "test_garden_with_two_students",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KindergartenGardenTest.test_multiple_students_for_the_same_garden_with_three_students": {
            "name": "test_multiple_students_for_the_same_garden_with_three_students",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KindergartenGardenTest.test_full_garden": {
            "name": "test_full_garden",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KindergartenGardenTest.test_disordered_test": {
            "name": "test_disordered_test",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/knapsack/knapsack.py": {
        "maximum_value": {
            "name": "maximum_value",
            "location": 6,
            "return": [
                "int",
                "float",
                "bool",
                "str",
                "Tuple",
                "List[int]"
            ],
            "arguments": {
                "maximum_weight": [
                    "int",
                    "float",
                    "List[Dict[str,int]]",
                    "Dict",
                    "bool",
                    "Tuple[int,int]"
                ],
                "items": [
                    "List[dict[str,int]]",
                    "Tuple[Union[int,int]]",
                    "List[Dict[str,int]]",
                    "int",
                    "float",
                    "Dict",
                    "bool",
                    "Tuple[int,int]"
                ],
                "current_value": [
                    "int",
                    "Optional[List[str]]",
                    "List[List[float]]",
                    "str"
                ]
            }
        }
    },
    "python_exercism-master/knapsack/knapsack_test.py": {
        "KnapsackTest.test_no_items": {
            "name": "test_no_items",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KnapsackTest.test_one_item_too_heavy": {
            "name": "test_one_item_too_heavy",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KnapsackTest.test_five_items_cannot_be_greedy_by_weight": {
            "name": "test_five_items_cannot_be_greedy_by_weight",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KnapsackTest.test_five_items_cannot_be_greedy_by_value": {
            "name": "test_five_items_cannot_be_greedy_by_value",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KnapsackTest.test_example_knapsack": {
            "name": "test_example_knapsack",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KnapsackTest.test_8_items": {
            "name": "test_8_items",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KnapsackTest.test_15_items": {
            "name": "test_15_items",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/largest-series-product/largest_series_product.py": {
        "largest_product": {
            "name": "largest_product",
            "location": 5,
            "return": [
                "int",
                "str",
                "Dict[str,int]",
                "float"
            ],
            "arguments": {
                "series": [
                    "int",
                    "str",
                    "Tuple[int, int]",
                    "Tuple[float, float]",
                    "List[int]"
                ],
                "size": [
                    "int",
                    "str",
                    "Tuple[int,int]",
                    "Tuple[float,float]",
                    "List[int]"
                ]
            }
        }
    },
    "python_exercism-master/largest-series-product/largest_series_product_test.py": {
        "LargestSeriesProductTest.test_finds_the_largest_product_if_span_equals_length": {
            "name": "test_finds_the_largest_product_if_span_equals_length",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LargestSeriesProductTest.test_can_find_the_largest_product_of_2_with_numbers_in_order": {
            "name": "test_can_find_the_largest_product_of_2_with_numbers_in_order",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LargestSeriesProductTest.test_can_find_the_largest_product_of_2": {
            "name": "test_can_find_the_largest_product_of_2",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LargestSeriesProductTest.test_can_find_the_largest_product_of_3_with_numbers_in_order": {
            "name": "test_can_find_the_largest_product_of_3_with_numbers_in_order",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LargestSeriesProductTest.test_can_find_the_largest_product_of_3": {
            "name": "test_can_find_the_largest_product_of_3",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LargestSeriesProductTest.test_can_find_the_largest_product_of_5_with_numbers_in_order": {
            "name": "test_can_find_the_largest_product_of_5_with_numbers_in_order",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LargestSeriesProductTest.test_can_get_the_largest_product_of_a_big_number": {
            "name": "test_can_get_the_largest_product_of_a_big_number",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LargestSeriesProductTest.test_reports_zero_if_the_only_digits_are_zero": {
            "name": "test_reports_zero_if_the_only_digits_are_zero",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LargestSeriesProductTest.test_reports_zero_if_all_spans_include_zero": {
            "name": "test_reports_zero_if_all_spans_include_zero",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LargestSeriesProductTest.test_rejects_span_longer_than_string_length": {
            "name": "test_rejects_span_longer_than_string_length",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LargestSeriesProductTest.test_reports_1_for_empty_string_and_empty_product_0_span": {
            "name": "test_reports_1_for_empty_string_and_empty_product_0_span",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LargestSeriesProductTest.test_reports_1_for_nonempty_string_and_empty_product_0_span": {
            "name": "test_reports_1_for_nonempty_string_and_empty_product_0_span",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LargestSeriesProductTest.test_rejects_empty_string_and_nonzero_span": {
            "name": "test_rejects_empty_string_and_nonzero_span",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LargestSeriesProductTest.test_rejects_invalid_character_in_digits": {
            "name": "test_rejects_invalid_character_in_digits",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LargestSeriesProductTest.test_rejects_negative_span": {
            "name": "test_rejects_negative_span",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LargestSeriesProductTest.test_euler_big_number": {
            "name": "test_euler_big_number",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LargestSeriesProductTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 72,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/leap/leap.py": {
        "leap_year": {
            "name": "leap_year",
            "location": 1,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "year": [
                    "int"
                ]
            }
        }
    },
    "python_exercism-master/leap/leap_test.py": {
        "LeapTest.test_year_not_divisible_by_4_in_common_year": {
            "name": "test_year_not_divisible_by_4_in_common_year",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeapTest.test_year_divisible_by_2_not_divisible_by_4_in_common_year": {
            "name": "test_year_divisible_by_2_not_divisible_by_4_in_common_year",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeapTest.test_year_divisible_by_4_not_divisible_by_100_in_leap_year": {
            "name": "test_year_divisible_by_4_not_divisible_by_100_in_leap_year",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeapTest.test_year_divisible_by_4_and_5_is_still_a_leap_year": {
            "name": "test_year_divisible_by_4_and_5_is_still_a_leap_year",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeapTest.test_year_divisible_by_100_not_divisible_by_400_in_common_year": {
            "name": "test_year_divisible_by_100_not_divisible_by_400_in_common_year",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeapTest.test_year_divisible_by_100_but_not_by_3_is_still_not_a_leap_year": {
            "name": "test_year_divisible_by_100_but_not_by_3_is_still_not_a_leap_year",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeapTest.test_year_divisible_by_400_in_leap_year": {
            "name": "test_year_divisible_by_400_in_leap_year",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeapTest.test_year_divisible_by_400_but_not_by_125_is_still_a_leap_year": {
            "name": "test_year_divisible_by_400_but_not_by_125_is_still_a_leap_year",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeapTest.test_year_divisible_by_200_not_divisible_by_400_in_common_year": {
            "name": "test_year_divisible_by_200_not_divisible_by_400_in_common_year",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/ledger/ledger.py": {
        "create_entry": {
            "name": "create_entry",
            "location": 25,
            "return": [
                "LedgerEntry"
            ],
            "arguments": {
                "date": [],
                "description": [],
                "change": []
            }
        },
        "format_entries": {
            "name": "format_entries",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "currency": [],
                "locale": [],
                "entries": []
            }
        },
        "LedgerEntry.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "date": [],
                "description": [],
                "change": []
            }
        },
        "LedgerEntry.__lt__": {
            "name": "__lt__",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "python_exercism-master/ledger/ledger_test.py": {
        "LedgerTest.test_empty_ledger": {
            "name": "test_empty_ledger",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LedgerTest.test_one_entry": {
            "name": "test_one_entry",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LedgerTest.test_credit_and_debit": {
            "name": "test_credit_and_debit",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LedgerTest.test_multiple_entries_on_same_date_ordered_by_description": {
            "name": "test_multiple_entries_on_same_date_ordered_by_description",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LedgerTest.test_final_order_tie_breaker_is_change": {
            "name": "test_final_order_tie_breaker_is_change",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LedgerTest.test_overlong_description": {
            "name": "test_overlong_description",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LedgerTest.test_euros": {
            "name": "test_euros",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LedgerTest.test_dutch_locale": {
            "name": "test_dutch_locale",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LedgerTest.test_dutch_locale_and_euros": {
            "name": "test_dutch_locale_and_euros",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LedgerTest.test_dutch_negative_number_with_3_digits_before_decimal_point": {
            "name": "test_dutch_negative_number_with_3_digits_before_decimal_point",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LedgerTest.test_american_negative_number_with_3_digits_before_decimal_point": {
            "name": "test_american_negative_number_with_3_digits_before_decimal_point",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/linked-list/linked_list.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ],
                "succeeding": [
                    "int",
                    "None",
                    "Tuple[str]",
                    "List[Tuple[int,float]]",
                    "str",
                    "float",
                    "List[tuple[Union[int,float]]]"
                ],
                "previous": [
                    "int",
                    "None",
                    "Tuple[str]",
                    "List[Tuple[int,float]]",
                    "str",
                    "float",
                    "List[tuple[Union[int,float]]]"
                ]
            }
        },
        "LinkedList.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.push": {
            "name": "push",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Exception",
                    "bytes",
                    "float",
                    "Union[str,bytes]"
                ]
            }
        },
        "LinkedList.unshift": {
            "name": "unshift",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict",
                    "List",
                    "Dict[str,Any]",
                    "Union[bytes,str]",
                    "bytes",
                    "str"
                ]
            }
        },
        "LinkedList.pop": {
            "name": "pop",
            "location": 49,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.shift": {
            "name": "shift",
            "location": 59,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__len__": {
            "name": "__len__",
            "location": 69,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__iter__": {
            "name": "__iter__",
            "location": 78,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/linked-list/linked_list_test.py": {
        "LinkedListTest.test_push_pop": {
            "name": "test_push_pop",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListTest.test_push_shift": {
            "name": "test_push_shift",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListTest.test_unshift_shift": {
            "name": "test_unshift_shift",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListTest.test_unshift_pop": {
            "name": "test_unshift_pop",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListTest.test_all": {
            "name": "test_all",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListTest.test_length": {
            "name": "test_length",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListTest.test_iterator": {
            "name": "test_iterator",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/list-ops/list_ops.py": {
        "append": {
            "name": "append",
            "location": 6,
            "return": [
                "str",
                "List[Union[str,str]]",
                "int",
                "List[str]",
                "List[Dict]",
                "Union[List,Tuple]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "list1": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[List[str]]"
                ],
                "list2": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[List[str]]"
                ]
            }
        },
        "concat": {
            "name": "concat",
            "location": 10,
            "return": [
                "bool",
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "lists": [
                    "str",
                    "int",
                    "Type[SerializationDialect]"
                ]
            }
        },
        "filter": {
            "name": "filter",
            "location": 16,
            "return": [
                "list"
            ],
            "arguments": {
                "function": [
                    "bool",
                    "Type",
                    "Dict[str,Any]"
                ],
                "list": [
                    "bool",
                    "Type",
                    "Dict[str,Any]"
                ]
            }
        },
        "length": {
            "name": "length",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "list": [
                    "int",
                    "str",
                    "Type[SerializationDialect]",
                    "Type"
                ]
            }
        },
        "map": {
            "name": "map",
            "location": 24,
            "return": [
                "list"
            ],
            "arguments": {
                "function": [
                    "T",
                    "Type",
                    "Type[object]",
                    "Any",
                    "Optional[Any]",
                    "None"
                ],
                "list": [
                    "T",
                    "Type",
                    "Type[object]",
                    "Any",
                    "Optional[Any]",
                    "None"
                ]
            }
        },
        "foldl": {
            "name": "foldl",
            "location": 28,
            "return": [
                "int",
                "typing.Callable[, ]"
            ],
            "arguments": {
                "function": [
                    "int",
                    "Callable",
                    "Identity"
                ],
                "list": [
                    "int",
                    "Callable",
                    "Identity"
                ],
                "initial": [
                    "int",
                    "Callable",
                    "Identity"
                ]
            }
        },
        "foldr": {
            "name": "foldr",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "function": [
                    "str"
                ],
                "list": [
                    "str"
                ],
                "initial": [
                    "str"
                ]
            }
        },
        "reverse": {
            "name": "reverse",
            "location": 42,
            "return": [
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "list": [
                    "List[T]",
                    "Callable",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ]
            }
        }
    },
    "python_exercism-master/list-ops/list_ops_test.py": {
        "ListOpsTest.test_append_empty_lists": {
            "name": "test_append_empty_lists",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListOpsTest.test_append_list_to_empty_list": {
            "name": "test_append_list_to_empty_list",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListOpsTest.test_append_non_empty_lists": {
            "name": "test_append_non_empty_lists",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListOpsTest.test_concat_empty_list": {
            "name": "test_concat_empty_list",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListOpsTest.test_concat_list_of_lists": {
            "name": "test_concat_list_of_lists",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListOpsTest.test_concat_list_of_nested_lists": {
            "name": "test_concat_list_of_nested_lists",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListOpsTest.test_filter_empty_list": {
            "name": "test_filter_empty_list",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListOpsTest.test_filter_non_empty_list": {
            "name": "test_filter_non_empty_list",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListOpsTest.test_length_empty_list": {
            "name": "test_length_empty_list",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListOpsTest.test_length_non_empty_list": {
            "name": "test_length_non_empty_list",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListOpsTest.test_map_empty_list": {
            "name": "test_map_empty_list",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListOpsTest.test_map_non_empty_list": {
            "name": "test_map_non_empty_list",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListOpsTest.test_foldl_empty_list": {
            "name": "test_foldl_empty_list",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListOpsTest.test_foldl_direction_independent_function_applied_to_non_empty_list": {
            "name": "test_foldl_direction_independent_function_applied_to_non_empty_list",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListOpsTest.test_foldl_direction_dependent_function_applied_to_non_empty_list": {
            "name": "test_foldl_direction_dependent_function_applied_to_non_empty_list",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListOpsTest.test_foldr_empty_list": {
            "name": "test_foldr_empty_list",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListOpsTest.test_foldr_direction_independent_function_applied_to_non_empty_list": {
            "name": "test_foldr_direction_independent_function_applied_to_non_empty_list",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListOpsTest.test_foldr_direction_dependent_function_applied_to_non_empty_list": {
            "name": "test_foldr_direction_dependent_function_applied_to_non_empty_list",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListOpsTest.test_reverse_empty_list": {
            "name": "test_reverse_empty_list",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListOpsTest.test_reverse_non_empty_list": {
            "name": "test_reverse_non_empty_list",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListOpsTest.test_reverse_list_of_lists_is_not_flattened": {
            "name": "test_reverse_list_of_lists_is_not_flattened",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListOpsTest.test_foldr_foldr_add_string": {
            "name": "test_foldr_foldr_add_string",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListOpsTest.test_reverse_reverse_mixed_types": {
            "name": "test_reverse_reverse_mixed_types",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/little-sisters-essay/string_methods.py": {
        "capitalize_title": {
            "name": "capitalize_title",
            "location": 1,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "title": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "check_sentence_ending": {
            "name": "check_sentence_ending",
            "location": 10,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sentence": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "clean_up_spacing": {
            "name": "clean_up_spacing",
            "location": 19,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "sentence": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "replace_word_choice": {
            "name": "replace_word_choice",
            "location": 28,
            "return": [
                "bytes",
                "int",
                "List[int]"
            ],
            "arguments": {
                "sentence": [
                    "bytes",
                    "Iterable[str]",
                    "Optional[float]",
                    "int"
                ],
                "old_word": [
                    "bytes",
                    "Iterable[str]",
                    "Optional[float]",
                    "int"
                ],
                "new_word": [
                    "bytes",
                    "Iterable[str]",
                    "Optional[float]",
                    "int"
                ]
            }
        }
    },
    "python_exercism-master/little-sisters-essay/string_methods_test.py": {
        "LittleSistersEssayTest.test_capitalize_word": {
            "name": "test_capitalize_word",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LittleSistersEssayTest.test_capitalize_title": {
            "name": "test_capitalize_title",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LittleSistersEssayTest.test_sentence_ending": {
            "name": "test_sentence_ending",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LittleSistersEssayTest.test_sentence_ending_without_period": {
            "name": "test_sentence_ending_without_period",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LittleSistersEssayTest.test_remove_extra_spaces_only_start": {
            "name": "test_remove_extra_spaces_only_start",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LittleSistersEssayTest.test_remove_extra_spaces": {
            "name": "test_remove_extra_spaces",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LittleSistersEssayTest.test_replace_word_choice": {
            "name": "test_replace_word_choice",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LittleSistersEssayTest.test_replace_word_not_exist": {
            "name": "test_replace_word_not_exist",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/little-sisters-vocab/strings.py": {
        "add_prefix_un": {
            "name": "add_prefix_un",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "word": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "make_word_groups": {
            "name": "make_word_groups",
            "location": 13,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "vocab_words": [
                    "str",
                    "List[str]",
                    "List",
                    "int",
                    "List[list[str]]",
                    "List[List[str]]"
                ]
            }
        },
        "remove_suffix_ness": {
            "name": "remove_suffix_ness",
            "location": 31,
            "return": [
                "str",
                "bytearray"
            ],
            "arguments": {
                "word": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "noun_to_verb": {
            "name": "noun_to_verb",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "sentence": [
                    "str",
                    "List",
                    "Set",
                    "List[str]"
                ],
                "index": [
                    "str",
                    "list",
                    "set",
                    "List[str]"
                ]
            }
        }
    },
    "python_exercism-master/little-sisters-vocab/strings_test.py": {
        "LittleSistersVocabTest.test_add_prefix_un": {
            "name": "test_add_prefix_un",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LittleSistersVocabTest.test_make_word_groups_en": {
            "name": "test_make_word_groups_en",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LittleSistersVocabTest.test_make_word_groups_pre": {
            "name": "test_make_word_groups_pre",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LittleSistersVocabTest.test_make_word_groups_auto": {
            "name": "test_make_word_groups_auto",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LittleSistersVocabTest.test_make_words_groups_inter": {
            "name": "test_make_words_groups_inter",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LittleSistersVocabTest.test_remove_suffix_ness": {
            "name": "test_remove_suffix_ness",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LittleSistersVocabTest.test_noun_to_verb": {
            "name": "test_noun_to_verb",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/luhn/luhn.py": {
        "Luhn.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "card_num": [
                    "str",
                    "float",
                    "int",
                    "Tuple",
                    "bool"
                ]
            }
        },
        "Luhn.valid": {
            "name": "valid",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/luhn/luhn_test.py": {
        "LuhnTest.test_single_digit_strings_can_not_be_valid": {
            "name": "test_single_digit_strings_can_not_be_valid",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuhnTest.test_a_single_zero_is_invalid": {
            "name": "test_a_single_zero_is_invalid",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuhnTest.test_a_simple_valid_sin_that_remains_valid_if_reversed": {
            "name": "test_a_simple_valid_sin_that_remains_valid_if_reversed",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuhnTest.test_a_simple_valid_sin_that_becomes_invalid_if_reversed": {
            "name": "test_a_simple_valid_sin_that_becomes_invalid_if_reversed",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuhnTest.test_a_valid_canadian_sin": {
            "name": "test_a_valid_canadian_sin",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuhnTest.test_invalid_canadian_sin": {
            "name": "test_invalid_canadian_sin",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuhnTest.test_invalid_credit_card": {
            "name": "test_invalid_credit_card",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuhnTest.test_invalid_long_number_with_an_even_remainder": {
            "name": "test_invalid_long_number_with_an_even_remainder",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuhnTest.test_valid_number_with_an_even_number_of_digits": {
            "name": "test_valid_number_with_an_even_number_of_digits",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuhnTest.test_valid_number_with_an_odd_number_of_spaces": {
            "name": "test_valid_number_with_an_odd_number_of_spaces",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuhnTest.test_valid_strings_with_a_non_digit_added_at_the_end_become_invalid": {
            "name": "test_valid_strings_with_a_non_digit_added_at_the_end_become_invalid",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuhnTest.test_valid_strings_with_punctuation_included_become_invalid": {
            "name": "test_valid_strings_with_punctuation_included_become_invalid",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuhnTest.test_valid_strings_with_symbols_included_become_invalid": {
            "name": "test_valid_strings_with_symbols_included_become_invalid",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuhnTest.test_single_zero_with_space_is_invalid": {
            "name": "test_single_zero_with_space_is_invalid",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuhnTest.test_more_than_a_single_zero_is_valid": {
            "name": "test_more_than_a_single_zero_is_valid",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuhnTest.test_input_digit_9_is_correctly_converted_to_output_digit_9": {
            "name": "test_input_digit_9_is_correctly_converted_to_output_digit_9",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuhnTest.test_using_ascii_value_for_non_doubled_non_digit_isn_t_allowed": {
            "name": "test_using_ascii_value_for_non_doubled_non_digit_isn_t_allowed",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuhnTest.test_using_ascii_value_for_doubled_non_digit_isn_t_allowed": {
            "name": "test_using_ascii_value_for_doubled_non_digit_isn_t_allowed",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuhnTest.test_is_valid_can_be_called_repeatedly": {
            "name": "test_is_valid_can_be_called_repeatedly",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/making-the-grade/loops.py": {
        "round_scores": {
            "name": "round_scores",
            "location": 1,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "student_scores": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "count_failed_students": {
            "name": "count_failed_students",
            "location": 10,
            "return": [
                "bool",
                "int",
                "Tuple[int,int]",
                "Tuple",
                "List[str]",
                "Union[List[str],str]"
            ],
            "arguments": {
                "student_scores": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "above_threshold": {
            "name": "above_threshold",
            "location": 19,
            "return": [
                "list"
            ],
            "arguments": {
                "student_scores": [
                    "str",
                    "int",
                    "Callable"
                ],
                "threshold": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "letter_grades": {
            "name": "letter_grades",
            "location": 29,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "highest": [
                    "int",
                    "Optional[Mapping[str,Any]]",
                    "float"
                ]
            }
        },
        "student_ranking": {
            "name": "student_ranking",
            "location": 46,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "student_scores": [
                    "int",
                    "list",
                    "List[str]",
                    "str",
                    "dict",
                    "float"
                ],
                "student_names": [
                    "int",
                    "List",
                    "List[str]",
                    "str",
                    "Dict",
                    "float"
                ]
            }
        },
        "perfect_score": {
            "name": "perfect_score",
            "location": 59,
            "return": [
                "list"
            ],
            "arguments": {
                "student_info": [
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "python_exercism-master/making-the-grade/loops_test.py": {
        "MakingTheGradeTest.test_round_scores": {
            "name": "test_round_scores",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakingTheGradeTest.test_count_failed_students": {
            "name": "test_count_failed_students",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakingTheGradeTest.test_above_threshold": {
            "name": "test_above_threshold",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakingTheGradeTest.test_letter_grades": {
            "name": "test_letter_grades",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakingTheGradeTest.test_student_ranking": {
            "name": "test_student_ranking",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakingTheGradeTest.test_perfect_score": {
            "name": "test_perfect_score",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/markdown/markdown.py": {
        "parse": {
            "name": "parse",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "markdown": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "python_exercism-master/markdown/markdown_test.py": {
        "MarkdownTest.test_parses_normal_text_as_a_paragraph": {
            "name": "test_parses_normal_text_as_a_paragraph",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarkdownTest.test_parsing_italics": {
            "name": "test_parsing_italics",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarkdownTest.test_parsing_bold_text": {
            "name": "test_parsing_bold_text",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarkdownTest.test_mixed_normal_italics_and_bold_text": {
            "name": "test_mixed_normal_italics_and_bold_text",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarkdownTest.test_with_h1_header_level": {
            "name": "test_with_h1_header_level",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarkdownTest.test_with_h2_header_level": {
            "name": "test_with_h2_header_level",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarkdownTest.test_with_h6_header_level": {
            "name": "test_with_h6_header_level",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarkdownTest.test_unordered_lists": {
            "name": "test_unordered_lists",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarkdownTest.test_with_a_little_bit_of_everything": {
            "name": "test_with_a_little_bit_of_everything",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarkdownTest.test_with_markdown_symbols_in_the_header_text_that_should_not_be_interpreted": {
            "name": "test_with_markdown_symbols_in_the_header_text_that_should_not_be_interpreted",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarkdownTest.test_with_markdown_symbols_in_the_list_item_text_that_should_not_be_interpreted": {
            "name": "test_with_markdown_symbols_in_the_list_item_text_that_should_not_be_interpreted",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarkdownTest.test_with_markdown_symbols_in_the_paragraph_text_that_should_not_be_interpreted": {
            "name": "test_with_markdown_symbols_in_the_paragraph_text_that_should_not_be_interpreted",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarkdownTest.test_unordered_lists_close_properly_with_preceding_and_following_lines": {
            "name": "test_unordered_lists_close_properly_with_preceding_and_following_lines",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/matrix/matrix.py": {
        "Matrix.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "matrix_string": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "Matrix.row": {
            "name": "row",
            "location": 16,
            "return": [
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Matrix.column": {
            "name": "column",
            "location": 19,
            "return": [
                "int",
                "Optional[List[str]]",
                "bool",
                "List[List[int]]",
                "Tuple[int, int]",
                "List[Tuple[int, int]]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "deque",
                    "bool"
                ]
            }
        }
    },
    "python_exercism-master/matrix/matrix_test.py": {
        "MatrixTest.test_extract_row_from_one_number_matrix": {
            "name": "test_extract_row_from_one_number_matrix",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatrixTest.test_can_extract_row": {
            "name": "test_can_extract_row",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatrixTest.test_extract_row_where_numbers_have_different_widths": {
            "name": "test_extract_row_where_numbers_have_different_widths",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatrixTest.test_can_extract_row_from_non_square_matrix": {
            "name": "test_can_extract_row_from_non_square_matrix",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatrixTest.test_extract_column_from_one_number_matrix": {
            "name": "test_extract_column_from_one_number_matrix",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatrixTest.test_can_extract_column": {
            "name": "test_can_extract_column",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatrixTest.test_can_extract_column_from_non_square_matrix": {
            "name": "test_can_extract_column_from_non_square_matrix",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatrixTest.test_extract_column_where_numbers_have_different_widths": {
            "name": "test_extract_column_where_numbers_have_different_widths",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/meetup/meetup.py": {
        "next_weekday": {
            "name": "next_weekday",
            "location": 6,
            "return": [
                "int",
                "datetime.timedelta",
                "datetime.datetime",
                "float",
                "datetime.timezone"
            ],
            "arguments": {
                "day": [
                    "datetime.datetime",
                    "SupportsInt",
                    "datetime.date",
                    "str",
                    "datetime.timedelta"
                ],
                "weekday": [
                    "int",
                    "float"
                ]
            }
        },
        "meetup": {
            "name": "meetup",
            "location": 14,
            "return": [
                "datetime.date"
            ],
            "arguments": {
                "year": [
                    "int",
                    "str",
                    "None",
                    "Optional[datetime.timedelta]",
                    "Tuple[Union[datetime.datetime,datetime.datetime]]",
                    "Tuple[datetime.datetime,datetime.datetime]",
                    "Optional[datetime.datetime]"
                ],
                "month": [
                    "int",
                    "str",
                    "None",
                    "Tuple[Union[datetime.datetime,datetime.datetime]]",
                    "Optional[datetime.timedelta]",
                    "Optional[datetime.datetime]",
                    "Tuple[datetime.datetime,datetime.datetime]",
                    "Optional[Union[str,datetime.datetime]]"
                ],
                "which": [
                    "str",
                    "datetime.datetime",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "Optional[datetime.timedelta]"
                ],
                "day_of_the_week": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "python_exercism-master/meetup/meetup_test.py": {
        "MeetupTest.test_monteenth_of_may_2013": {
            "name": "test_monteenth_of_may_2013",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_monteenth_of_august_2013": {
            "name": "test_monteenth_of_august_2013",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_monteenth_of_september_2013": {
            "name": "test_monteenth_of_september_2013",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_tuesteenth_of_march_2013": {
            "name": "test_tuesteenth_of_march_2013",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_tuesteenth_of_april_2013": {
            "name": "test_tuesteenth_of_april_2013",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_tuesteenth_of_august_2013": {
            "name": "test_tuesteenth_of_august_2013",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_wednesteenth_of_january_2013": {
            "name": "test_wednesteenth_of_january_2013",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_wednesteenth_of_february_2013": {
            "name": "test_wednesteenth_of_february_2013",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_wednesteenth_of_june_2013": {
            "name": "test_wednesteenth_of_june_2013",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_thursteenth_of_may_2013": {
            "name": "test_thursteenth_of_may_2013",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_thursteenth_of_june_2013": {
            "name": "test_thursteenth_of_june_2013",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_thursteenth_of_september_2013": {
            "name": "test_thursteenth_of_september_2013",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_friteenth_of_april_2013": {
            "name": "test_friteenth_of_april_2013",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_friteenth_of_august_2013": {
            "name": "test_friteenth_of_august_2013",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_friteenth_of_september_2013": {
            "name": "test_friteenth_of_september_2013",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_saturteenth_of_february_2013": {
            "name": "test_saturteenth_of_february_2013",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_saturteenth_of_april_2013": {
            "name": "test_saturteenth_of_april_2013",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_saturteenth_of_october_2013": {
            "name": "test_saturteenth_of_october_2013",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_sunteenth_of_may_2013": {
            "name": "test_sunteenth_of_may_2013",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_sunteenth_of_june_2013": {
            "name": "test_sunteenth_of_june_2013",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_sunteenth_of_october_2013": {
            "name": "test_sunteenth_of_october_2013",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_first_monday_of_march_2013": {
            "name": "test_first_monday_of_march_2013",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_first_monday_of_april_2013": {
            "name": "test_first_monday_of_april_2013",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_first_tuesday_of_may_2013": {
            "name": "test_first_tuesday_of_may_2013",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_first_tuesday_of_june_2013": {
            "name": "test_first_tuesday_of_june_2013",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_first_wednesday_of_july_2013": {
            "name": "test_first_wednesday_of_july_2013",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_first_wednesday_of_august_2013": {
            "name": "test_first_wednesday_of_august_2013",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_first_thursday_of_september_2013": {
            "name": "test_first_thursday_of_september_2013",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_first_thursday_of_october_2013": {
            "name": "test_first_thursday_of_october_2013",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_first_friday_of_november_2013": {
            "name": "test_first_friday_of_november_2013",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_first_friday_of_december_2013": {
            "name": "test_first_friday_of_december_2013",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_first_saturday_of_january_2013": {
            "name": "test_first_saturday_of_january_2013",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_first_saturday_of_february_2013": {
            "name": "test_first_saturday_of_february_2013",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_first_sunday_of_march_2013": {
            "name": "test_first_sunday_of_march_2013",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_first_sunday_of_april_2013": {
            "name": "test_first_sunday_of_april_2013",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_second_monday_of_march_2013": {
            "name": "test_second_monday_of_march_2013",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_second_monday_of_april_2013": {
            "name": "test_second_monday_of_april_2013",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_second_tuesday_of_may_2013": {
            "name": "test_second_tuesday_of_may_2013",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_second_tuesday_of_june_2013": {
            "name": "test_second_tuesday_of_june_2013",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_second_wednesday_of_july_2013": {
            "name": "test_second_wednesday_of_july_2013",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_second_wednesday_of_august_2013": {
            "name": "test_second_wednesday_of_august_2013",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_second_thursday_of_september_2013": {
            "name": "test_second_thursday_of_september_2013",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_second_thursday_of_october_2013": {
            "name": "test_second_thursday_of_october_2013",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_second_friday_of_november_2013": {
            "name": "test_second_friday_of_november_2013",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_second_friday_of_december_2013": {
            "name": "test_second_friday_of_december_2013",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_second_saturday_of_january_2013": {
            "name": "test_second_saturday_of_january_2013",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_second_saturday_of_february_2013": {
            "name": "test_second_saturday_of_february_2013",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_second_sunday_of_march_2013": {
            "name": "test_second_sunday_of_march_2013",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_second_sunday_of_april_2013": {
            "name": "test_second_sunday_of_april_2013",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_third_monday_of_march_2013": {
            "name": "test_third_monday_of_march_2013",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_third_monday_of_april_2013": {
            "name": "test_third_monday_of_april_2013",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_third_tuesday_of_may_2013": {
            "name": "test_third_tuesday_of_may_2013",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_third_tuesday_of_june_2013": {
            "name": "test_third_tuesday_of_june_2013",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_third_wednesday_of_july_2013": {
            "name": "test_third_wednesday_of_july_2013",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_third_wednesday_of_august_2013": {
            "name": "test_third_wednesday_of_august_2013",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_third_thursday_of_september_2013": {
            "name": "test_third_thursday_of_september_2013",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_third_thursday_of_october_2013": {
            "name": "test_third_thursday_of_october_2013",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_third_friday_of_november_2013": {
            "name": "test_third_friday_of_november_2013",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_third_friday_of_december_2013": {
            "name": "test_third_friday_of_december_2013",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_third_saturday_of_january_2013": {
            "name": "test_third_saturday_of_january_2013",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_third_saturday_of_february_2013": {
            "name": "test_third_saturday_of_february_2013",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_third_sunday_of_march_2013": {
            "name": "test_third_sunday_of_march_2013",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_third_sunday_of_april_2013": {
            "name": "test_third_sunday_of_april_2013",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_fourth_monday_of_march_2013": {
            "name": "test_fourth_monday_of_march_2013",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_fourth_monday_of_april_2013": {
            "name": "test_fourth_monday_of_april_2013",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_fourth_tuesday_of_may_2013": {
            "name": "test_fourth_tuesday_of_may_2013",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_fourth_tuesday_of_june_2013": {
            "name": "test_fourth_tuesday_of_june_2013",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_fourth_wednesday_of_july_2013": {
            "name": "test_fourth_wednesday_of_july_2013",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_fourth_wednesday_of_august_2013": {
            "name": "test_fourth_wednesday_of_august_2013",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_fourth_thursday_of_september_2013": {
            "name": "test_fourth_thursday_of_september_2013",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_fourth_thursday_of_october_2013": {
            "name": "test_fourth_thursday_of_october_2013",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_fourth_friday_of_november_2013": {
            "name": "test_fourth_friday_of_november_2013",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_fourth_friday_of_december_2013": {
            "name": "test_fourth_friday_of_december_2013",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_fourth_saturday_of_january_2013": {
            "name": "test_fourth_saturday_of_january_2013",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_fourth_saturday_of_february_2013": {
            "name": "test_fourth_saturday_of_february_2013",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_fourth_sunday_of_march_2013": {
            "name": "test_fourth_sunday_of_march_2013",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_fourth_sunday_of_april_2013": {
            "name": "test_fourth_sunday_of_april_2013",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_last_monday_of_march_2013": {
            "name": "test_last_monday_of_march_2013",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_last_monday_of_april_2013": {
            "name": "test_last_monday_of_april_2013",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_last_tuesday_of_may_2013": {
            "name": "test_last_tuesday_of_may_2013",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_last_tuesday_of_june_2013": {
            "name": "test_last_tuesday_of_june_2013",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_last_wednesday_of_july_2013": {
            "name": "test_last_wednesday_of_july_2013",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_last_wednesday_of_august_2013": {
            "name": "test_last_wednesday_of_august_2013",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_last_thursday_of_september_2013": {
            "name": "test_last_thursday_of_september_2013",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_last_thursday_of_october_2013": {
            "name": "test_last_thursday_of_october_2013",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_last_friday_of_november_2013": {
            "name": "test_last_friday_of_november_2013",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_last_friday_of_december_2013": {
            "name": "test_last_friday_of_december_2013",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_last_saturday_of_january_2013": {
            "name": "test_last_saturday_of_january_2013",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_last_saturday_of_february_2013": {
            "name": "test_last_saturday_of_february_2013",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_last_sunday_of_march_2013": {
            "name": "test_last_sunday_of_march_2013",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_last_sunday_of_april_2013": {
            "name": "test_last_sunday_of_april_2013",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_last_wednesday_of_february_2012": {
            "name": "test_last_wednesday_of_february_2012",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_last_wednesday_of_december_2014": {
            "name": "test_last_wednesday_of_december_2014",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_last_sunday_of_february_2015": {
            "name": "test_last_sunday_of_february_2015",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_first_friday_of_december_2012": {
            "name": "test_first_friday_of_december_2012",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_fifth_monday_of_march_2015": {
            "name": "test_fifth_monday_of_march_2015",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.test_nonexistent_fifth_monday_of_february_2015": {
            "name": "test_nonexistent_fifth_monday_of_february_2015",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeetupTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 305,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "list[Exception]",
                    "float",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/meltdown-mitigation/conditionals.py": {
        "is_criticality_balanced": {
            "name": "is_criticality_balanced",
            "location": 4,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "temperature": [
                    "str"
                ],
                "neutrons_emitted": [
                    "str"
                ]
            }
        },
        "reactor_efficiency": {
            "name": "reactor_efficiency",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "voltage": [
                    "int",
                    "Callable",
                    "str"
                ],
                "current": [
                    "int",
                    "str",
                    "Callable"
                ],
                "theoretical_max_power": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "fail_safe": {
            "name": "fail_safe",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "temperature": [
                    "float",
                    "int",
                    "bool"
                ],
                "neutrons_produced_per_second": [
                    "float",
                    "int",
                    "bool"
                ],
                "threshold": [
                    "bool",
                    "Dict[str,List[str]]",
                    "Sequence[Sequence[T]]",
                    "str",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "python_exercism-master/meltdown-mitigation/conditionals_test.py": {
        "MeltdownMitigationTest.test_is_criticality_balanced": {
            "name": "test_is_criticality_balanced",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeltdownMitigationTest.test_reactor_efficiency": {
            "name": "test_reactor_efficiency",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeltdownMitigationTest.test_fail_safe": {
            "name": "test_fail_safe",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/minesweeper/minesweeper.py": {
        "annotate": {
            "name": "annotate",
            "location": 4,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "input_board_array": [
                    "List['cirq.Qid']",
                    "int",
                    "List[Dict]",
                    "bool"
                ]
            }
        }
    },
    "python_exercism-master/minesweeper/minesweeper_test.py": {
        "MinesweeperTest.test_no_rows": {
            "name": "test_no_rows",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinesweeperTest.test_no_columns": {
            "name": "test_no_columns",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinesweeperTest.test_no_mines": {
            "name": "test_no_mines",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinesweeperTest.test_minefield_with_only_mines": {
            "name": "test_minefield_with_only_mines",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinesweeperTest.test_mine_surrounded_by_spaces": {
            "name": "test_mine_surrounded_by_spaces",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinesweeperTest.test_space_surrounded_by_mines": {
            "name": "test_space_surrounded_by_mines",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinesweeperTest.test_horizontal_line": {
            "name": "test_horizontal_line",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinesweeperTest.test_horizontal_line_mines_at_edges": {
            "name": "test_horizontal_line_mines_at_edges",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinesweeperTest.test_vertical_line": {
            "name": "test_vertical_line",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinesweeperTest.test_vertical_line_mines_at_edges": {
            "name": "test_vertical_line_mines_at_edges",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinesweeperTest.test_cross": {
            "name": "test_cross",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinesweeperTest.test_large_minefield": {
            "name": "test_large_minefield",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinesweeperTest.test_annotate_9": {
            "name": "test_annotate_9",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinesweeperTest.test_different_len": {
            "name": "test_different_len",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinesweeperTest.test_invalid_char": {
            "name": "test_invalid_char",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinesweeperTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 67,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/nth-prime/nth_prime.py": {
        "prime": {
            "name": "prime",
            "location": 5,
            "return": [
                "float",
                "int",
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]"
            ],
            "arguments": {
                "number": [
                    "int"
                ]
            }
        }
    },
    "python_exercism-master/nth-prime/nth_prime_test.py": {
        "prime_range": {
            "name": "prime_range",
            "location": 8,
            "return": [
                "list"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "NthPrimeTest.test_first_prime": {
            "name": "test_first_prime",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NthPrimeTest.test_second_prime": {
            "name": "test_second_prime",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NthPrimeTest.test_sixth_prime": {
            "name": "test_sixth_prime",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NthPrimeTest.test_big_prime": {
            "name": "test_big_prime",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NthPrimeTest.test_there_is_no_zeroth_prime": {
            "name": "test_there_is_no_zeroth_prime",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NthPrimeTest.test_first_twenty_primes": {
            "name": "test_first_twenty_primes",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NthPrimeTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 60,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/ocr-numbers/ocr_numbers.py": {
        "convert_one_number": {
            "name": "convert_one_number",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "number": [
                    "List[str]",
                    "str",
                    "Optional[Callable]"
                ]
            }
        },
        "convert": {
            "name": "convert",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "input_grid": [
                    "int",
                    "str",
                    "bytes",
                    "Sequence[str]",
                    "List[List[int]]",
                    "Optional[str]"
                ]
            }
        }
    },
    "python_exercism-master/ocr-numbers/ocr_numbers_test.py": {
        "OcrNumbersTest.test_recognizes_0": {
            "name": "test_recognizes_0",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OcrNumbersTest.test_recognizes_1": {
            "name": "test_recognizes_1",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OcrNumbersTest.test_unreadable_but_correctly_sized_inputs_return": {
            "name": "test_unreadable_but_correctly_sized_inputs_return",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OcrNumbersTest.test_input_with_a_number_of_lines_that_is_not_a_multiple_of_four_raises_an_error": {
            "name": "test_input_with_a_number_of_lines_that_is_not_a_multiple_of_four_raises_an_error",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OcrNumbersTest.test_input_with_a_number_of_columns_that_is_not_a_multiple_of_three_raises_an_error": {
            "name": "test_input_with_a_number_of_columns_that_is_not_a_multiple_of_three_raises_an_error",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OcrNumbersTest.test_recognizes_110101100": {
            "name": "test_recognizes_110101100",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OcrNumbersTest.test_garbled_numbers_in_a_string_are_replaced_with": {
            "name": "test_garbled_numbers_in_a_string_are_replaced_with",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OcrNumbersTest.test_recognizes_2": {
            "name": "test_recognizes_2",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OcrNumbersTest.test_recognizes_3": {
            "name": "test_recognizes_3",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OcrNumbersTest.test_recognizes_4": {
            "name": "test_recognizes_4",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OcrNumbersTest.test_recognizes_5": {
            "name": "test_recognizes_5",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OcrNumbersTest.test_recognizes_6": {
            "name": "test_recognizes_6",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OcrNumbersTest.test_recognizes_7": {
            "name": "test_recognizes_7",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OcrNumbersTest.test_recognizes_8": {
            "name": "test_recognizes_8",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OcrNumbersTest.test_recognizes_9": {
            "name": "test_recognizes_9",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OcrNumbersTest.test_recognizes_string_of_decimal_numbers": {
            "name": "test_recognizes_string_of_decimal_numbers",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OcrNumbersTest.test_numbers_separated_by_empty_lines_are_recognized_lines_are_joined_by_commas": {
            "name": "test_numbers_separated_by_empty_lines_are_recognized_lines_are_joined_by_commas",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OcrNumbersTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 117,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/palindrome-products/palindrome_products.py": {
        "check_palindrom": {
            "name": "check_palindrom",
            "location": 7,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "number": [
                    "int",
                    "str",
                    "Tuple[int]",
                    "bytes",
                    "Tuple[int,int]"
                ]
            }
        },
        "find_factors": {
            "name": "find_factors",
            "location": 12,
            "return": [
                "Set[Tuple[(int, Any)]]"
            ],
            "arguments": {
                "number": [
                    "int",
                    "float"
                ],
                "min_factor": [
                    "int",
                    "float"
                ],
                "max_factor": [
                    "int",
                    "float"
                ]
            }
        },
        "check_valid": {
            "name": "check_valid",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "max_factor": [
                    "int",
                    "str",
                    "bytes",
                    "Dict[str,str]",
                    "Sequence[tuple[Union[float,float]]]",
                    "Sequence[Tuple[float,float]]"
                ],
                "min_factor": [
                    "int",
                    "str",
                    "bytes",
                    "Dict[str,str]",
                    "Sequence[tuple[Union[float,float]]]",
                    "Sequence[Tuple[float,float]]"
                ]
            }
        },
        "find_palindrome": {
            "name": "find_palindrome",
            "location": 31,
            "return": [
                "Union[(List[Union[(int, set)]], Tuple[(None, List[nothing])])]"
            ],
            "arguments": {
                "max_factor": [
                    "int",
                    "str"
                ],
                "min_factor": [
                    "int",
                    "str"
                ],
                "palindrome_type": [
                    "str",
                    "bool"
                ]
            }
        },
        "largest": {
            "name": "largest",
            "location": 51,
            "return": [
                "Union[(list, Tuple[(None, List[nothing])])]"
            ],
            "arguments": {
                "max_factor": [
                    "int",
                    "str"
                ],
                "min_factor": [
                    "int",
                    "str"
                ]
            }
        },
        "smallest": {
            "name": "smallest",
            "location": 56,
            "return": [
                "Union[(list, Tuple[(None, List[nothing])])]"
            ],
            "arguments": {
                "max_factor": [
                    "int",
                    "str"
                ],
                "min_factor": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "python_exercism-master/palindrome-products/palindrome_products_test.py": {
        "PalindromeProductsTest.test_finds_the_smallest_palindrome_from_single_digit_factors": {
            "name": "test_finds_the_smallest_palindrome_from_single_digit_factors",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PalindromeProductsTest.test_finds_the_largest_palindrome_from_single_digit_factors": {
            "name": "test_finds_the_largest_palindrome_from_single_digit_factors",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PalindromeProductsTest.test_find_the_smallest_palindrome_from_double_digit_factors": {
            "name": "test_find_the_smallest_palindrome_from_double_digit_factors",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PalindromeProductsTest.test_find_the_largest_palindrome_from_double_digit_factors": {
            "name": "test_find_the_largest_palindrome_from_double_digit_factors",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PalindromeProductsTest.test_find_smallest_palindrome_from_triple_digit_factors": {
            "name": "test_find_smallest_palindrome_from_triple_digit_factors",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PalindromeProductsTest.test_find_the_largest_palindrome_from_triple_digit_factors": {
            "name": "test_find_the_largest_palindrome_from_triple_digit_factors",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PalindromeProductsTest.test_find_smallest_palindrome_from_four_digit_factors": {
            "name": "test_find_smallest_palindrome_from_four_digit_factors",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PalindromeProductsTest.test_find_the_largest_palindrome_from_four_digit_factors": {
            "name": "test_find_the_largest_palindrome_from_four_digit_factors",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PalindromeProductsTest.test_empty_result_for_smallest_if_no_palindrome_in_the_range": {
            "name": "test_empty_result_for_smallest_if_no_palindrome_in_the_range",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PalindromeProductsTest.test_empty_result_for_largest_if_no_palindrome_in_the_range": {
            "name": "test_empty_result_for_largest_if_no_palindrome_in_the_range",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PalindromeProductsTest.test_error_result_for_smallest_if_min_is_more_than_max": {
            "name": "test_error_result_for_smallest_if_min_is_more_than_max",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PalindromeProductsTest.test_error_result_for_largest_if_min_is_more_than_max": {
            "name": "test_error_result_for_largest_if_min_is_more_than_max",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PalindromeProductsTest.assertFactorsEqual": {
            "name": "assertFactorsEqual",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "actual": [
                    "Set",
                    "Set[str]",
                    "List",
                    "Type[object]",
                    "Type"
                ],
                "expected": [
                    "Set",
                    "Set[str]",
                    "List",
                    "Type[object]",
                    "Type"
                ]
            }
        },
        "PalindromeProductsTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 71,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/pangram/pangram.py": {
        "is_pangram": {
            "name": "is_pangram",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {
                "sentence": [
                    "str"
                ]
            }
        }
    },
    "python_exercism-master/pangram/pangram_test.py": {
        "PangramTest.test_empty_sentence": {
            "name": "test_empty_sentence",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PangramTest.test_perfect_lower_case": {
            "name": "test_perfect_lower_case",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PangramTest.test_only_lower_case": {
            "name": "test_only_lower_case",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PangramTest.test_missing_the_letter_x": {
            "name": "test_missing_the_letter_x",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PangramTest.test_missing_the_letter_h": {
            "name": "test_missing_the_letter_h",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PangramTest.test_with_underscores": {
            "name": "test_with_underscores",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PangramTest.test_with_numbers": {
            "name": "test_with_numbers",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PangramTest.test_missing_letters_replaced_by_numbers": {
            "name": "test_missing_letters_replaced_by_numbers",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PangramTest.test_mixed_case_and_punctuation": {
            "name": "test_mixed_case_and_punctuation",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PangramTest.test_case_insensitive": {
            "name": "test_case_insensitive",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PangramTest.test_sentence_without_lower_bound": {
            "name": "test_sentence_without_lower_bound",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PangramTest.test_sentence_without_upper_bound": {
            "name": "test_sentence_without_upper_bound",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/perfect-numbers/perfect_numbers.py": {
        "classify": {
            "name": "classify",
            "location": 5,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "number": [
                    "float",
                    "List[float]",
                    "List[dict]",
                    "List[Tuple[int,int]]",
                    "Tuple[int,int,int]",
                    "List[str]",
                    "Tuple"
                ]
            }
        }
    },
    "python_exercism-master/perfect-numbers/perfect_numbers_test.py": {
        "PerfectNumbersTest.test_smallest_perfect_number_is_classified_correctly": {
            "name": "test_smallest_perfect_number_is_classified_correctly",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PerfectNumbersTest.test_medium_perfect_number_is_classified_correctly": {
            "name": "test_medium_perfect_number_is_classified_correctly",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PerfectNumbersTest.test_large_perfect_number_is_classified_correctly": {
            "name": "test_large_perfect_number_is_classified_correctly",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbundantNumbersTest.test_smallest_abundant_number_is_classified_correctly": {
            "name": "test_smallest_abundant_number_is_classified_correctly",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbundantNumbersTest.test_medium_abundant_number_is_classified_correctly": {
            "name": "test_medium_abundant_number_is_classified_correctly",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbundantNumbersTest.test_large_abundant_number_is_classified_correctly": {
            "name": "test_large_abundant_number_is_classified_correctly",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeficientNumbersTest.test_smallest_prime_deficient_number_is_classified_correctly": {
            "name": "test_smallest_prime_deficient_number_is_classified_correctly",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeficientNumbersTest.test_smallest_non_prime_deficient_number_is_classified_correctly": {
            "name": "test_smallest_non_prime_deficient_number_is_classified_correctly",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeficientNumbersTest.test_medium_deficient_number_is_classified_correctly": {
            "name": "test_medium_deficient_number_is_classified_correctly",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeficientNumbersTest.test_large_deficient_number_is_classified_correctly": {
            "name": "test_large_deficient_number_is_classified_correctly",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeficientNumbersTest.test_edge_case_no_factors_other_than_itself_is_classified_correctly": {
            "name": "test_edge_case_no_factors_other_than_itself_is_classified_correctly",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidInputsTest.test_zero_is_rejected_not_a_natural_number": {
            "name": "test_zero_is_rejected_not_a_natural_number",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidInputsTest.test_negative_integer_is_rejected_not_a_natural_number": {
            "name": "test_negative_integer_is_rejected_not_a_natural_number",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidInputsTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 57,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/phone-number/phone_number.py": {
        "PhoneNumber.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "phone_number": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "PhoneNumber.pretty": {
            "name": "pretty",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneNumber.valid_phone_number": {
            "name": "valid_phone_number",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "phone_number": [
                    "str",
                    "int",
                    "float"
                ]
            }
        }
    },
    "python_exercism-master/phone-number/phone_number_test.py": {
        "PhoneNumberTest.test_cleans_the_number": {
            "name": "test_cleans_the_number",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneNumberTest.test_cleans_numbers_with_dots": {
            "name": "test_cleans_numbers_with_dots",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneNumberTest.test_cleans_numbers_with_multiple_spaces": {
            "name": "test_cleans_numbers_with_multiple_spaces",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneNumberTest.test_invalid_when_9_digits": {
            "name": "test_invalid_when_9_digits",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneNumberTest.test_invalid_when_11_digits_does_not_start_with_a_1": {
            "name": "test_invalid_when_11_digits_does_not_start_with_a_1",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneNumberTest.test_valid_when_11_digits_and_starting_with_1": {
            "name": "test_valid_when_11_digits_and_starting_with_1",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneNumberTest.test_valid_when_11_digits_and_starting_with_1_even_with_punctuation": {
            "name": "test_valid_when_11_digits_and_starting_with_1_even_with_punctuation",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneNumberTest.test_invalid_when_more_than_11_digits": {
            "name": "test_invalid_when_more_than_11_digits",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneNumberTest.test_invalid_with_letters": {
            "name": "test_invalid_with_letters",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneNumberTest.test_invalid_with_punctuations": {
            "name": "test_invalid_with_punctuations",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneNumberTest.test_invalid_if_area_code_starts_with_0": {
            "name": "test_invalid_if_area_code_starts_with_0",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneNumberTest.test_invalid_if_area_code_starts_with_1": {
            "name": "test_invalid_if_area_code_starts_with_1",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneNumberTest.test_invalid_if_exchange_code_starts_with_0": {
            "name": "test_invalid_if_exchange_code_starts_with_0",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneNumberTest.test_invalid_if_exchange_code_starts_with_1": {
            "name": "test_invalid_if_exchange_code_starts_with_1",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneNumberTest.test_invalid_if_area_code_starts_with_0_on_valid_11_digit_number": {
            "name": "test_invalid_if_area_code_starts_with_0_on_valid_11_digit_number",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneNumberTest.test_invalid_if_area_code_starts_with_1_on_valid_11_digit_number": {
            "name": "test_invalid_if_area_code_starts_with_1_on_valid_11_digit_number",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneNumberTest.test_invalid_if_exchange_code_starts_with_0_on_valid_11_digit_number": {
            "name": "test_invalid_if_exchange_code_starts_with_0_on_valid_11_digit_number",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneNumberTest.test_invalid_if_exchange_code_starts_with_1_on_valid_11_digit_number": {
            "name": "test_invalid_if_exchange_code_starts_with_1_on_valid_11_digit_number",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneNumberTest.test_area_code": {
            "name": "test_area_code",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneNumberTest.test_pretty_print": {
            "name": "test_pretty_print",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneNumberTest.test_pretty_print_with_full_us_phone_number": {
            "name": "test_pretty_print_with_full_us_phone_number",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneNumberTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 95,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/pig-latin/pig_latin.py": {
        "translate": {
            "name": "translate",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "translate_one_word": {
            "name": "translate_one_word",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "word": [
                    "Tuple[int,int,int]",
                    "Tuple[Union[int,int,int]]"
                ]
            }
        }
    },
    "python_exercism-master/pig-latin/pig_latin_test.py": {
        "PigLatinTest.test_word_beginning_with_a": {
            "name": "test_word_beginning_with_a",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PigLatinTest.test_word_beginning_with_e": {
            "name": "test_word_beginning_with_e",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PigLatinTest.test_word_beginning_with_i": {
            "name": "test_word_beginning_with_i",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PigLatinTest.test_word_beginning_with_o": {
            "name": "test_word_beginning_with_o",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PigLatinTest.test_word_beginning_with_u": {
            "name": "test_word_beginning_with_u",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PigLatinTest.test_word_beginning_with_a_vowel_and_followed_by_a_qu": {
            "name": "test_word_beginning_with_a_vowel_and_followed_by_a_qu",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PigLatinTest.test_word_beginning_with_p": {
            "name": "test_word_beginning_with_p",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PigLatinTest.test_word_beginning_with_k": {
            "name": "test_word_beginning_with_k",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PigLatinTest.test_word_beginning_with_x": {
            "name": "test_word_beginning_with_x",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PigLatinTest.test_word_beginning_with_q_without_a_following_u": {
            "name": "test_word_beginning_with_q_without_a_following_u",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PigLatinTest.test_word_beginning_with_ch": {
            "name": "test_word_beginning_with_ch",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PigLatinTest.test_word_beginning_with_qu": {
            "name": "test_word_beginning_with_qu",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PigLatinTest.test_word_beginning_with_qu_and_a_preceding_consonant": {
            "name": "test_word_beginning_with_qu_and_a_preceding_consonant",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PigLatinTest.test_word_beginning_with_th": {
            "name": "test_word_beginning_with_th",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PigLatinTest.test_word_beginning_with_thr": {
            "name": "test_word_beginning_with_thr",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PigLatinTest.test_word_beginning_with_sch": {
            "name": "test_word_beginning_with_sch",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PigLatinTest.test_word_beginning_with_yt": {
            "name": "test_word_beginning_with_yt",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PigLatinTest.test_word_beginning_with_xr": {
            "name": "test_word_beginning_with_xr",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PigLatinTest.test_y_is_treated_like_a_consonant_at_the_beginning_of_a_word": {
            "name": "test_y_is_treated_like_a_consonant_at_the_beginning_of_a_word",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PigLatinTest.test_y_is_treated_like_a_vowel_at_the_end_of_a_consonant_cluster": {
            "name": "test_y_is_treated_like_a_vowel_at_the_end_of_a_consonant_cluster",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PigLatinTest.test_y_as_second_letter_in_two_letter_word": {
            "name": "test_y_as_second_letter_in_two_letter_word",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PigLatinTest.test_a_whole_phrase": {
            "name": "test_a_whole_phrase",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/poker/poker.py": {
        "parse_hand": {
            "name": "parse_hand",
            "location": 20,
            "return": [
                "Tuple[(List[int], list)]"
            ],
            "arguments": {
                "hand": [
                    "str",
                    "int",
                    "float",
                    "Union[str,float]"
                ]
            }
        },
        "find_best_type": {
            "name": "find_best_type",
            "location": 30,
            "return": [
                "Tuple[(int, list)]"
            ],
            "arguments": {
                "hand": [
                    "str"
                ]
            }
        },
        "best_hands": {
            "name": "best_hands",
            "location": 64,
            "return": [
                "list"
            ],
            "arguments": {
                "hands": [
                    "str",
                    "Dict[str,Any]",
                    "Mapping[str,Any]"
                ]
            }
        }
    },
    "python_exercism-master/poker/poker_test.py": {
        "PokerTest.test_single_hand_always_wins": {
            "name": "test_single_hand_always_wins",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PokerTest.test_highest_card_out_of_all_hands_wins": {
            "name": "test_highest_card_out_of_all_hands_wins",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PokerTest.test_a_tie_has_multiple_winners": {
            "name": "test_a_tie_has_multiple_winners",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PokerTest.test_multiple_hands_with_the_same_high_cards_tie_compares_next_highest_ranked_down_to_last_card": {
            "name": "test_multiple_hands_with_the_same_high_cards_tie_compares_next_highest_ranked_down_to_last_card",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PokerTest.test_one_pair_beats_high_card": {
            "name": "test_one_pair_beats_high_card",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PokerTest.test_highest_pair_wins": {
            "name": "test_highest_pair_wins",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PokerTest.test_two_pairs_beats_one_pair": {
            "name": "test_two_pairs_beats_one_pair",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PokerTest.test_both_hands_have_two_pairs_highest_ranked_pair_wins": {
            "name": "test_both_hands_have_two_pairs_highest_ranked_pair_wins",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PokerTest.test_both_hands_have_two_pairs_with_the_same_highest_ranked_pair_tie_goes_to_low_pair": {
            "name": "test_both_hands_have_two_pairs_with_the_same_highest_ranked_pair_tie_goes_to_low_pair",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PokerTest.test_both_hands_have_two_identically_ranked_pairs_tie_goes_to_remaining_card_kicker": {
            "name": "test_both_hands_have_two_identically_ranked_pairs_tie_goes_to_remaining_card_kicker",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PokerTest.test_three_of_a_kind_beats_two_pair": {
            "name": "test_three_of_a_kind_beats_two_pair",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PokerTest.test_both_hands_have_three_of_a_kind_tie_goes_to_highest_ranked_triplet": {
            "name": "test_both_hands_have_three_of_a_kind_tie_goes_to_highest_ranked_triplet",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PokerTest.test_with_multiple_decks_two_players_can_have_same_three_of_a_kind_ties_go_to_highest_remaining_cards": {
            "name": "test_with_multiple_decks_two_players_can_have_same_three_of_a_kind_ties_go_to_highest_remaining_cards",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PokerTest.test_a_straight_beats_three_of_a_kind": {
            "name": "test_a_straight_beats_three_of_a_kind",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PokerTest.test_aces_can_end_a_straight_10_j_q_k_a": {
            "name": "test_aces_can_end_a_straight_10_j_q_k_a",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PokerTest.test_aces_can_start_a_straight_a_2_3_4_5": {
            "name": "test_aces_can_start_a_straight_a_2_3_4_5",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PokerTest.test_both_hands_with_a_straight_tie_goes_to_highest_ranked_card": {
            "name": "test_both_hands_with_a_straight_tie_goes_to_highest_ranked_card",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PokerTest.test_even_though_an_ace_is_usually_high_a_5_high_straight_is_the_lowest_scoring_straight": {
            "name": "test_even_though_an_ace_is_usually_high_a_5_high_straight_is_the_lowest_scoring_straight",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PokerTest.test_flush_beats_a_straight": {
            "name": "test_flush_beats_a_straight",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PokerTest.test_both_hands_have_a_flush_tie_goes_to_high_card_down_to_the_last_one_if_necessary": {
            "name": "test_both_hands_have_a_flush_tie_goes_to_high_card_down_to_the_last_one_if_necessary",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PokerTest.test_full_house_beats_a_flush": {
            "name": "test_full_house_beats_a_flush",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PokerTest.test_both_hands_have_a_full_house_tie_goes_to_highest_ranked_triplet": {
            "name": "test_both_hands_have_a_full_house_tie_goes_to_highest_ranked_triplet",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PokerTest.test_with_multiple_decks_both_hands_have_a_full_house_with_the_same_triplet_tie_goes_to_the_pair": {
            "name": "test_with_multiple_decks_both_hands_have_a_full_house_with_the_same_triplet_tie_goes_to_the_pair",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PokerTest.test_four_of_a_kind_beats_a_full_house": {
            "name": "test_four_of_a_kind_beats_a_full_house",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PokerTest.test_both_hands_have_four_of_a_kind_tie_goes_to_high_quad": {
            "name": "test_both_hands_have_four_of_a_kind_tie_goes_to_high_quad",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PokerTest.test_with_multiple_decks_both_hands_with_identical_four_of_a_kind_tie_determined_by_kicker": {
            "name": "test_with_multiple_decks_both_hands_with_identical_four_of_a_kind_tie_determined_by_kicker",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PokerTest.test_straight_flush_beats_four_of_a_kind": {
            "name": "test_straight_flush_beats_four_of_a_kind",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PokerTest.test_both_hands_have_straight_flush_tie_goes_to_highest_ranked_card": {
            "name": "test_both_hands_have_straight_flush_tie_goes_to_highest_ranked_card",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/pov/pov.py": {
        "Tree.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "bool",
                    "List[List[Any]]",
                    "List[list[Any]]",
                    "Optional[str]",
                    "None"
                ],
                "children": [
                    "List",
                    "str",
                    "bool",
                    "List[List[Any]]",
                    "Optional[str]"
                ]
            }
        },
        "Tree.__dict__": {
            "name": "__dict__",
            "location": 10,
            "return": [
                "Dict[(Any, list)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tree.__str__": {
            "name": "__str__",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "Dict",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "Tree.__lt__": {
            "name": "__lt__",
            "location": 16,
            "return": [
                "bool",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Type",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "Tree.__eq__": {
            "name": "__eq__",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        },
        "Tree.from_pov": {
            "name": "from_pov",
            "location": 22,
            "return": [
                "Optional[Tree]"
            ],
            "arguments": {
                "self": [],
                "from_node": [
                    "Dict",
                    "str",
                    "Iterator",
                    "Iterator[str]",
                    "Iterable[str]"
                ]
            }
        },
        "Tree.path_to": {
            "name": "path_to",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_node": [
                    "bytes",
                    "bool",
                    "str",
                    "Mapping[str,Optional[float]]",
                    "Mapping",
                    "List[Tuple[bytes,bytes]]",
                    "List[tuple[Union[bytes,bytes]]]"
                ],
                "to_node": [
                    "bytes",
                    "bool",
                    "str",
                    "Mapping[str,Optional[float]]",
                    "Mapping",
                    "List[Tuple[bytes,bytes]]",
                    "List[tuple[Union[bytes,bytes]]]"
                ]
            }
        },
        "Tree.path_from_root": {
            "name": "path_from_root",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "to_node": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "python_exercism-master/pov/pov_test.py": {
        "PovTest.test_results_in_the_same_tree_if_the_input_tree_is_a_singleton": {
            "name": "test_results_in_the_same_tree_if_the_input_tree_is_a_singleton",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PovTest.test_can_reroot_a_tree_with_a_parent_and_one_sibling": {
            "name": "test_can_reroot_a_tree_with_a_parent_and_one_sibling",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PovTest.test_can_reroot_a_tree_with_a_parent_and_many_siblings": {
            "name": "test_can_reroot_a_tree_with_a_parent_and_many_siblings",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PovTest.test_can_reroot_a_tree_with_new_root_deeply_nested_in_tree": {
            "name": "test_can_reroot_a_tree_with_new_root_deeply_nested_in_tree",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PovTest.test_moves_children_of_the_new_root_to_same_level_as_former_parent": {
            "name": "test_moves_children_of_the_new_root_to_same_level_as_former_parent",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PovTest.test_can_reroot_a_complex_tree_with_cousins": {
            "name": "test_can_reroot_a_complex_tree_with_cousins",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PovTest.test_errors_if_target_does_not_exist_in_a_singleton_tree": {
            "name": "test_errors_if_target_does_not_exist_in_a_singleton_tree",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PovTest.test_errors_if_target_does_not_exist_in_a_large_tree": {
            "name": "test_errors_if_target_does_not_exist_in_a_large_tree",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PovTest.test_can_find_path_to_parent": {
            "name": "test_can_find_path_to_parent",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PovTest.test_can_find_path_to_sibling": {
            "name": "test_can_find_path_to_sibling",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PovTest.test_can_find_path_to_cousin": {
            "name": "test_can_find_path_to_cousin",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PovTest.test_can_find_path_not_involving_root": {
            "name": "test_can_find_path_not_involving_root",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PovTest.test_can_find_path_from_nodes_other_than_x": {
            "name": "test_can_find_path_from_nodes_other_than_x",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PovTest.test_errors_if_destination_does_not_exist": {
            "name": "test_errors_if_destination_does_not_exist",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PovTest.test_errors_if_source_does_not_exist": {
            "name": "test_errors_if_source_does_not_exist",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PovTest.assertTreeEquals": {
            "name": "assertTreeEquals",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "expected": [
                    "str",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "PovTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 162,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/prime-factors/prime_factors.py": {
        "factors": {
            "name": "factors",
            "location": 6,
            "return": [
                "list"
            ],
            "arguments": {
                "natural_number": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "python_exercism-master/prime-factors/prime_factors_test.py": {
        "PrimeFactorsTest.test_no_factors": {
            "name": "test_no_factors",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrimeFactorsTest.test_prime_number": {
            "name": "test_prime_number",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrimeFactorsTest.test_square_of_a_prime": {
            "name": "test_square_of_a_prime",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrimeFactorsTest.test_cube_of_a_prime": {
            "name": "test_cube_of_a_prime",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrimeFactorsTest.test_product_of_primes_and_non_primes": {
            "name": "test_product_of_primes_and_non_primes",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrimeFactorsTest.test_product_of_primes": {
            "name": "test_product_of_primes",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrimeFactorsTest.test_factors_include_a_large_prime": {
            "name": "test_factors_include_a_large_prime",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrimeFactorsTest.test_factors_include_a_very_large_prime": {
            "name": "test_factors_include_a_very_large_prime",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/protein-translation/protein_translation.py": {
        "proteins": {
            "name": "proteins",
            "location": 7,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "strand": [
                    "List[int]",
                    "str",
                    "Iterable",
                    "Iterable[Any]"
                ]
            }
        }
    },
    "python_exercism-master/protein-translation/protein_translation_test.py": {
        "ProteinTranslationTest.test_AUG_translates_to_methionine": {
            "name": "test_AUG_translates_to_methionine",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProteinTranslationTest.test_identifies_Phenylalanine_codons": {
            "name": "test_identifies_Phenylalanine_codons",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProteinTranslationTest.test_identifies_Leucine_codons": {
            "name": "test_identifies_Leucine_codons",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProteinTranslationTest.test_identifies_Serine_codons": {
            "name": "test_identifies_Serine_codons",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProteinTranslationTest.test_identifies_Tyrosine_codons": {
            "name": "test_identifies_Tyrosine_codons",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProteinTranslationTest.test_identifies_Cysteine_codons": {
            "name": "test_identifies_Cysteine_codons",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProteinTranslationTest.test_identifies_Tryptophan_codons": {
            "name": "test_identifies_Tryptophan_codons",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProteinTranslationTest.test_identifies_stop_codons": {
            "name": "test_identifies_stop_codons",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProteinTranslationTest.test_translates_rna_strand_into_correct_protein_list": {
            "name": "test_translates_rna_strand_into_correct_protein_list",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProteinTranslationTest.test_stops_translation_if_stop_codon_at_beginning_of_sequence": {
            "name": "test_stops_translation_if_stop_codon_at_beginning_of_sequence",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProteinTranslationTest.test_stops_translation_if_stop_codon_at_end_of_two_codon_sequence": {
            "name": "test_stops_translation_if_stop_codon_at_end_of_two_codon_sequence",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProteinTranslationTest.test_stops_translation_if_stop_codon_at_end_of_three_codon_sequence": {
            "name": "test_stops_translation_if_stop_codon_at_end_of_three_codon_sequence",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProteinTranslationTest.test_stops_translation_if_stop_codon_in_middle_of_three_codon_sequence": {
            "name": "test_stops_translation_if_stop_codon_in_middle_of_three_codon_sequence",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProteinTranslationTest.test_stops_translation_if_stop_codon_in_middle_of_six_codon_sequence": {
            "name": "test_stops_translation_if_stop_codon_in_middle_of_six_codon_sequence",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/pythagorean-triplet/pythagorean_triplet.py": {
        "triplets_with_sum": {
            "name": "triplets_with_sum",
            "location": 7,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "sum_of_triplet": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "is_triplet": {
            "name": "is_triplet",
            "location": 18,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "triplet": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "python_exercism-master/pythagorean-triplet/pythagorean_triplet_test.py": {
        "PythagoreanTripletTest.test_triplets_whose_sum_is_12": {
            "name": "test_triplets_whose_sum_is_12",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythagoreanTripletTest.test_triplets_whose_sum_is_108": {
            "name": "test_triplets_whose_sum_is_108",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythagoreanTripletTest.test_triplets_whose_sum_is_1000": {
            "name": "test_triplets_whose_sum_is_1000",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythagoreanTripletTest.test_no_matching_triplets_for_1001": {
            "name": "test_no_matching_triplets_for_1001",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythagoreanTripletTest.test_returns_all_matching_triplets": {
            "name": "test_returns_all_matching_triplets",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythagoreanTripletTest.test_several_matching_triplets": {
            "name": "test_several_matching_triplets",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythagoreanTripletTest.test_triplets_for_large_number": {
            "name": "test_triplets_for_large_number",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/queen-attack/queen_attack.py": {
        "Queen.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "int",
                    "str",
                    "List"
                ],
                "column": [
                    "int",
                    "str",
                    "List[Optional[Cell]]"
                ]
            }
        },
        "Queen.can_attack": {
            "name": "can_attack",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "another_queen": [
                    "str"
                ]
            }
        }
    },
    "python_exercism-master/queen-attack/queen_attack_test.py": {
        "QueenAttackTest.test_queen_with_a_valid_position": {
            "name": "test_queen_with_a_valid_position",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueenAttackTest.test_queen_must_have_positive_row": {
            "name": "test_queen_must_have_positive_row",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueenAttackTest.test_queen_must_have_row_on_board": {
            "name": "test_queen_must_have_row_on_board",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueenAttackTest.test_queen_must_have_positive_column": {
            "name": "test_queen_must_have_positive_column",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueenAttackTest.test_queen_must_have_column_on_board": {
            "name": "test_queen_must_have_column_on_board",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueenAttackTest.test_can_not_attack": {
            "name": "test_can_not_attack",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueenAttackTest.test_can_attack_on_same_row": {
            "name": "test_can_attack_on_same_row",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueenAttackTest.test_can_attack_on_same_column": {
            "name": "test_can_attack_on_same_column",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueenAttackTest.test_can_attack_on_first_diagonal": {
            "name": "test_can_attack_on_first_diagonal",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueenAttackTest.test_can_attack_on_second_diagonal": {
            "name": "test_can_attack_on_second_diagonal",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueenAttackTest.test_can_attack_on_third_diagonal": {
            "name": "test_can_attack_on_third_diagonal",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueenAttackTest.test_can_attack_on_fourth_diagonal": {
            "name": "test_can_attack_on_fourth_diagonal",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueenAttackTest.test_queens_same_position_can_attack": {
            "name": "test_queens_same_position_can_attack",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueenAttackTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 57,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/rail-fence-cipher/rail_fence_cipher.py": {
        "encode": {
            "name": "encode",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "message": [
                    "str",
                    "float"
                ],
                "rails": [
                    "str",
                    "int"
                ]
            }
        },
        "decode": {
            "name": "decode",
            "location": 8,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "encoded_message": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "rails": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "python_exercism-master/rail-fence-cipher/rail_fence_cipher_test.py": {
        "RailFenceCipherTest.test_encode_with_two_rails": {
            "name": "test_encode_with_two_rails",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RailFenceCipherTest.test_encode_with_three_rails": {
            "name": "test_encode_with_three_rails",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RailFenceCipherTest.test_encode_with_ending_in_the_middle": {
            "name": "test_encode_with_ending_in_the_middle",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RailFenceCipherTest.test_decode_with_three_rails": {
            "name": "test_decode_with_three_rails",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RailFenceCipherTest.test_decode_with_five_rails": {
            "name": "test_decode_with_five_rails",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RailFenceCipherTest.test_decode_with_six_rails": {
            "name": "test_decode_with_six_rails",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/raindrops/raindrops.py": {
        "raindrops": {
            "name": "raindrops",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "number": [
                    "str",
                    "bool",
                    "MutableMapping[str, Any]"
                ]
            }
        }
    },
    "python_exercism-master/raindrops/raindrops_test.py": {
        "RaindropsTest.test_the_sound_for_1_is_1": {
            "name": "test_the_sound_for_1_is_1",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RaindropsTest.test_the_sound_for_3_is_pling": {
            "name": "test_the_sound_for_3_is_pling",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RaindropsTest.test_the_sound_for_5_is_plang": {
            "name": "test_the_sound_for_5_is_plang",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RaindropsTest.test_the_sound_for_7_is_plong": {
            "name": "test_the_sound_for_7_is_plong",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RaindropsTest.test_the_sound_for_6_is_pling": {
            "name": "test_the_sound_for_6_is_pling",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RaindropsTest.test_2_to_the_power_3_does_not_make_sound": {
            "name": "test_2_to_the_power_3_does_not_make_sound",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RaindropsTest.test_the_sound_for_9_is_pling": {
            "name": "test_the_sound_for_9_is_pling",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RaindropsTest.test_the_sound_for_10_is_plang": {
            "name": "test_the_sound_for_10_is_plang",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RaindropsTest.test_the_sound_for_14_is_plong": {
            "name": "test_the_sound_for_14_is_plong",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RaindropsTest.test_the_sound_for_15_is_plingplang": {
            "name": "test_the_sound_for_15_is_plingplang",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RaindropsTest.test_the_sound_for_21_is_plingplong": {
            "name": "test_the_sound_for_21_is_plingplong",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RaindropsTest.test_the_sound_for_25_is_plang": {
            "name": "test_the_sound_for_25_is_plang",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RaindropsTest.test_the_sound_for_27_is_pling": {
            "name": "test_the_sound_for_27_is_pling",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RaindropsTest.test_the_sound_for_35_is_plangplong": {
            "name": "test_the_sound_for_35_is_plangplong",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RaindropsTest.test_the_sound_for_49_is_plong": {
            "name": "test_the_sound_for_49_is_plong",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RaindropsTest.test_the_sound_for_52_is_52": {
            "name": "test_the_sound_for_52_is_52",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RaindropsTest.test_the_sound_for_105_is_plingplangplong": {
            "name": "test_the_sound_for_105_is_plingplangplong",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RaindropsTest.test_the_sound_for_12121_is_12121": {
            "name": "test_the_sound_for_12121_is_12121",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/rational-numbers/rational_numbers.py": {
        "Rational.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numer": [
                    "int",
                    "float",
                    "bool"
                ],
                "denom": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Rational.__eq__": {
            "name": "__eq__",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "Rational.__repr__": {
            "name": "__repr__",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rational.__add__": {
            "name": "__add__",
            "location": 22,
            "return": [
                "Rational"
            ],
            "arguments": {
                "self": [
                    "_TRational@@Rational@@"
                ],
                "other": []
            }
        },
        "Rational.__sub__": {
            "name": "__sub__",
            "location": 28,
            "return": [
                "Rational"
            ],
            "arguments": {
                "self": [
                    "_TRational@@Rational@@"
                ],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "Rational.__mul__": {
            "name": "__mul__",
            "location": 34,
            "return": [
                "Rational"
            ],
            "arguments": {
                "self": [
                    "_TRational@@Rational@@"
                ],
                "other": [
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "Rational.__truediv__": {
            "name": "__truediv__",
            "location": 37,
            "return": [
                "Rational"
            ],
            "arguments": {
                "self": [
                    "_TRational@@Rational@@"
                ],
                "other": [
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "Rational.__abs__": {
            "name": "__abs__",
            "location": 40,
            "return": [
                "Rational"
            ],
            "arguments": {
                "self": [
                    "_TRational@@Rational@@"
                ]
            }
        },
        "Rational.__pow__": {
            "name": "__pow__",
            "location": 43,
            "return": [
                "Rational"
            ],
            "arguments": {
                "self": [
                    "_TRational@@Rational@@"
                ],
                "power": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Rational.__rpow__": {
            "name": "__rpow__",
            "location": 46,
            "return": [
                "Text",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "base": [
                    "float",
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "python_exercism-master/rational-numbers/rational_numbers_test.py": {
        "RationalNumbersTest.test_add_two_positive_rational_numbers": {
            "name": "test_add_two_positive_rational_numbers",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_add_a_positive_rational_number_and_a_negative_rational_number": {
            "name": "test_add_a_positive_rational_number_and_a_negative_rational_number",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_add_two_negative_rational_numbers": {
            "name": "test_add_two_negative_rational_numbers",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_add_a_rational_number_to_its_additive_inverse": {
            "name": "test_add_a_rational_number_to_its_additive_inverse",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_subtract_two_positive_rational_numbers": {
            "name": "test_subtract_two_positive_rational_numbers",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_subtract_a_positive_rational_number_and_a_negative_rational_number": {
            "name": "test_subtract_a_positive_rational_number_and_a_negative_rational_number",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_subtract_two_negative_rational_numbers": {
            "name": "test_subtract_two_negative_rational_numbers",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_subtract_a_rational_number_from_itself": {
            "name": "test_subtract_a_rational_number_from_itself",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_multiply_two_positive_rational_numbers": {
            "name": "test_multiply_two_positive_rational_numbers",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_multiply_a_negative_rational_number_by_a_positive_rational_number": {
            "name": "test_multiply_a_negative_rational_number_by_a_positive_rational_number",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_multiply_two_negative_rational_numbers": {
            "name": "test_multiply_two_negative_rational_numbers",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_multiply_a_rational_number_by_its_reciprocal": {
            "name": "test_multiply_a_rational_number_by_its_reciprocal",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_multiply_a_rational_number_by_1": {
            "name": "test_multiply_a_rational_number_by_1",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_multiply_a_rational_number_by_0": {
            "name": "test_multiply_a_rational_number_by_0",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_divide_two_positive_rational_numbers": {
            "name": "test_divide_two_positive_rational_numbers",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_divide_a_positive_rational_number_by_a_negative_rational_number": {
            "name": "test_divide_a_positive_rational_number_by_a_negative_rational_number",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_divide_two_negative_rational_numbers": {
            "name": "test_divide_two_negative_rational_numbers",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_divide_a_rational_number_by_1": {
            "name": "test_divide_a_rational_number_by_1",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_absolute_value_of_a_positive_rational_number": {
            "name": "test_absolute_value_of_a_positive_rational_number",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_absolute_value_of_a_positive_rational_number_with_negative_numerator_and_denominator": {
            "name": "test_absolute_value_of_a_positive_rational_number_with_negative_numerator_and_denominator",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_absolute_value_of_a_negative_rational_number": {
            "name": "test_absolute_value_of_a_negative_rational_number",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_absolute_value_of_a_negative_rational_number_with_negative_denominator": {
            "name": "test_absolute_value_of_a_negative_rational_number_with_negative_denominator",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_absolute_value_of_zero": {
            "name": "test_absolute_value_of_zero",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_raise_a_positive_rational_number_to_a_positive_integer_power": {
            "name": "test_raise_a_positive_rational_number_to_a_positive_integer_power",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_raise_a_negative_rational_number_to_a_positive_integer_power": {
            "name": "test_raise_a_negative_rational_number_to_a_positive_integer_power",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_raise_zero_to_an_integer_power": {
            "name": "test_raise_zero_to_an_integer_power",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_raise_one_to_an_integer_power": {
            "name": "test_raise_one_to_an_integer_power",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_raise_a_positive_rational_number_to_the_power_of_zero": {
            "name": "test_raise_a_positive_rational_number_to_the_power_of_zero",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_raise_a_negative_rational_number_to_the_power_of_zero": {
            "name": "test_raise_a_negative_rational_number_to_the_power_of_zero",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_raise_a_real_number_to_a_positive_rational_number": {
            "name": "test_raise_a_real_number_to_a_positive_rational_number",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_raise_a_real_number_to_a_negative_rational_number": {
            "name": "test_raise_a_real_number_to_a_negative_rational_number",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_raise_a_real_number_to_a_zero_rational_number": {
            "name": "test_raise_a_real_number_to_a_zero_rational_number",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_reduce_a_positive_rational_number_to_lowest_terms": {
            "name": "test_reduce_a_positive_rational_number_to_lowest_terms",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_reduce_a_negative_rational_number_to_lowest_terms": {
            "name": "test_reduce_a_negative_rational_number_to_lowest_terms",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_reduce_a_rational_number_with_a_negative_denominator_to_lowest_terms": {
            "name": "test_reduce_a_rational_number_with_a_negative_denominator_to_lowest_terms",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_reduce_zero_to_lowest_terms": {
            "name": "test_reduce_zero_to_lowest_terms",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_reduce_an_integer_to_lowest_terms": {
            "name": "test_reduce_an_integer_to_lowest_terms",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_reduce_one_to_lowest_terms": {
            "name": "test_reduce_one_to_lowest_terms",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/react/react.py": {
        "InputCell.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_value": [
                    "str",
                    "int",
                    "bytes",
                    "T"
                ]
            }
        },
        "InputCell.value": {
            "name": "value",
            "location": 20,
            "return": [
                "dict[, ]",
                "str",
                "float",
                "int",
                "list[int]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "list"
                ]
            }
        },
        "InputCell.register_observer": {
            "name": "register_observer",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "observer": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "ComputeCell.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Set",
                    "Type",
                    "AbstractSet[TemplateObjectVariable]",
                    "AbstractSet[TemplateActionTypeVariable]",
                    "str"
                ],
                "compute_function": [
                    "bool",
                    "int",
                    "float",
                    "Optional[float]",
                    "None"
                ]
            }
        },
        "ComputeCell.update_value": {
            "name": "update_value",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComputeCell.add_callback": {
            "name": "add_callback",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "float",
                    "int"
                ]
            }
        },
        "ComputeCell.remove_callback": {
            "name": "remove_callback",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "python_exercism-master/react/react_test.py": {
        "ReactTest.test_input_cells_have_a_value": {
            "name": "test_input_cells_have_a_value",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReactTest.test_can_set_input_cell_value": {
            "name": "test_can_set_input_cell_value",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReactTest.test_compute_cells_calculate_initial_value": {
            "name": "test_compute_cells_calculate_initial_value",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReactTest.test_compute_cells_take_inputs_in_right_order": {
            "name": "test_compute_cells_take_inputs_in_right_order",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReactTest.test_compute_cells_update_value_when_dependencies_are_changed": {
            "name": "test_compute_cells_update_value_when_dependencies_are_changed",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReactTest.test_compute_cells_can_depend_on_other_compute_cells": {
            "name": "test_compute_cells_can_depend_on_other_compute_cells",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReactTest.test_compute_cells_fire_callbacks": {
            "name": "test_compute_cells_fire_callbacks",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReactTest.test_callbacks_only_fire_on_change": {
            "name": "test_callbacks_only_fire_on_change",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReactTest.test_callbacks_do_not_report_already_reported_values": {
            "name": "test_callbacks_do_not_report_already_reported_values",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReactTest.test_callbacks_can_fire_from_multiple_cells": {
            "name": "test_callbacks_can_fire_from_multiple_cells",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReactTest.test_callbacks_can_be_added_and_removed": {
            "name": "test_callbacks_can_be_added_and_removed",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReactTest.test_removing_a_callback_multiple_times": {
            "name": "test_removing_a_callback_multiple_times",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReactTest.test_callbacks_should_only_be_called_once": {
            "name": "test_callbacks_should_only_be_called_once",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReactTest.test_callbacks_not_called_so_long_as_output_not_changed": {
            "name": "test_callbacks_not_called_so_long_as_output_not_changed",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReactTest.callback_factory": {
            "name": "callback_factory",
            "location": 184,
            "return": [
                "functools.partial"
            ],
            "arguments": {
                "self": [],
                "observer": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ReactTest.callback_factory.callback": {
            "name": "callback",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "observer": [
                    "Optional[str]",
                    "bool",
                    "list",
                    "float",
                    "Optional[bool]",
                    "Optional[Union[str, int]]"
                ],
                "value": [
                    "Optional[str]",
                    "bool",
                    "list",
                    "float",
                    "Optional[bool]",
                    "Optional[Union[str, int]]"
                ]
            }
        }
    },
    "python_exercism-master/rectangles/rectangles.py": {
        "calculate_vector": {
            "name": "calculate_vector",
            "location": 6,
            "return": [
                "list"
            ],
            "arguments": {
                "point": [
                    "Tuple[Union[int,int]]",
                    "float",
                    "Tuple[int,int]",
                    "T"
                ],
                "other": [
                    "Tuple[Union[int,int]]",
                    "float",
                    "Tuple[int,int]",
                    "T"
                ]
            }
        },
        "check_line_neighbor_points": {
            "name": "check_line_neighbor_points",
            "location": 11,
            "return": [
                "bool",
                "str",
                "int",
                "Set"
            ],
            "arguments": {
                "point": [
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "other": [
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "check_column_neighbor_points": {
            "name": "check_column_neighbor_points",
            "location": 17,
            "return": [
                "bool",
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "point": [
                    "Tuple[int,int]",
                    "str",
                    "Tuple[Union[int,int]]"
                ],
                "other": [
                    "Tuple[int,int]",
                    "str",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "find_line_neighbor_points": {
            "name": "find_line_neighbor_points",
            "location": 25,
            "return": [
                "list"
            ],
            "arguments": {
                "point": [
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]",
                    "bytes",
                    "Optional[List[str]]",
                    "List[int]",
                    "List[str]",
                    "None",
                    "Iterable[str]"
                ],
                "point_lists": [
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "List[tuple[Union[int,int]]]",
                    "bytes",
                    "List[Tuple[int,int]]",
                    "List[int]",
                    "List[str]",
                    "Optional[List[str]]",
                    "Iterable[str]"
                ]
            }
        },
        "find_column_neighbor_points": {
            "name": "find_column_neighbor_points",
            "location": 32,
            "return": [
                "list"
            ],
            "arguments": {
                "point": [
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]",
                    "bytes",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "int",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "point_lists": [
                    "List[tuple[Union[int,int]]]",
                    "List[Tuple[int,int]]",
                    "bytes",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "List[str]",
                    "Optional[List[str]]",
                    "int"
                ]
            }
        },
        "check_complete_horizontal_line": {
            "name": "check_complete_horizontal_line",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "point": [
                    "Tuple[Union[int,int]]",
                    "List[str]",
                    "Tuple[int,int]",
                    "str",
                    "int",
                    "Optional[float]"
                ],
                "other": [
                    "Tuple[Union[int,int]]",
                    "List[str]",
                    "Tuple[int,int]",
                    "str",
                    "int",
                    "Optional[float]"
                ],
                "ascii_diagram": [
                    "Tuple[Union[int,int]]",
                    "List[str]",
                    "Tuple[int,int]",
                    "str",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "check_complete_vertical_line": {
            "name": "check_complete_vertical_line",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "point": [
                    "Tuple[Union[int,int]]",
                    "List[str]",
                    "Tuple[int,int]",
                    "str",
                    "int",
                    "Set"
                ],
                "other": [
                    "Tuple[Union[int,int]]",
                    "List[str]",
                    "Tuple[int,int]",
                    "str",
                    "int",
                    "Set"
                ],
                "ascii_diagram": [
                    "Tuple[int,int]",
                    "List[str]",
                    "Tuple[Union[int,int]]",
                    "int",
                    "str",
                    "Set"
                ]
            }
        },
        "rectangles": {
            "name": "rectangles",
            "location": 59,
            "return": [
                "int"
            ],
            "arguments": {
                "ascii_diagram": [
                    "List[str]",
                    "str",
                    "List[T]",
                    "Mapping[str,Any]",
                    "List[dict]",
                    "List[tuple[Union[float,str]]]",
                    "Mapping[str,List[str]]",
                    "List[Dict]",
                    "List[Tuple[float,str]]"
                ]
            }
        }
    },
    "python_exercism-master/rectangles/rectangles_test.py": {
        "RectanglesTest.test_no_rows": {
            "name": "test_no_rows",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RectanglesTest.test_no_columns": {
            "name": "test_no_columns",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RectanglesTest.test_no_rectangles": {
            "name": "test_no_rectangles",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RectanglesTest.test_one_rectangle": {
            "name": "test_one_rectangle",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RectanglesTest.test_two_rectangles_without_shared_parts": {
            "name": "test_two_rectangles_without_shared_parts",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RectanglesTest.test_five_rectangles_with_shared_parts": {
            "name": "test_five_rectangles_with_shared_parts",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RectanglesTest.test_rectangle_of_height_1_is_counted": {
            "name": "test_rectangle_of_height_1_is_counted",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RectanglesTest.test_rectangle_of_width_1_is_counted": {
            "name": "test_rectangle_of_width_1_is_counted",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RectanglesTest.test_1x1_square_is_counted": {
            "name": "test_1x1_square_is_counted",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RectanglesTest.test_only_complete_rectangles_are_counted": {
            "name": "test_only_complete_rectangles_are_counted",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RectanglesTest.test_rectangles_can_be_of_different_sizes": {
            "name": "test_rectangles_can_be_of_different_sizes",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RectanglesTest.test_corner_is_required_for_a_rectangle_to_be_complete": {
            "name": "test_corner_is_required_for_a_rectangle_to_be_complete",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RectanglesTest.test_large_input_with_many_rectangles": {
            "name": "test_large_input_with_many_rectangles",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/resistor-color/resistor_color.py": {
        "color_code": {
            "name": "color_code",
            "location": 19,
            "return": [
                "int"
            ],
            "arguments": {
                "color": [
                    "str",
                    "int",
                    "IO",
                    "IO[Any]",
                    "bool"
                ]
            }
        },
        "colors": {
            "name": "colors",
            "location": 24,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "python_exercism-master/resistor-color/resistor_color_test.py": {
        "ResistorColorTest.test_black": {
            "name": "test_black",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResistorColorTest.test_white": {
            "name": "test_white",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResistorColorTest.test_orange": {
            "name": "test_orange",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResistorColorTest.test_colors": {
            "name": "test_colors",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/resistor-color-duo/resistor_color_duo.py": {
        "value": {
            "name": "value",
            "location": 17,
            "return": [
                "int"
            ],
            "arguments": {
                "colors": [
                    "str",
                    "int",
                    "List[dict[str,Any]]",
                    "Optional[int]",
                    "List[Dict[str,Any]]"
                ]
            }
        }
    },
    "python_exercism-master/resistor-color-duo/resistor_color_duo_test.py": {
        "ResistorColorDuoTest.test_brown_and_black": {
            "name": "test_brown_and_black",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResistorColorDuoTest.test_blue_and_grey": {
            "name": "test_blue_and_grey",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResistorColorDuoTest.test_yellow_and_violet": {
            "name": "test_yellow_and_violet",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResistorColorDuoTest.test_orange_and_orange": {
            "name": "test_orange_and_orange",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResistorColorDuoTest.test_ignore_additional_colors": {
            "name": "test_ignore_additional_colors",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/resistor-colors/resistor_colors.py": {
        "value": {
            "name": "value",
            "location": 19,
            "return": [
                "int"
            ],
            "arguments": {
                "colors": [
                    "str",
                    "int",
                    "List[dict[str,Any]]",
                    "Optional[int]",
                    "List[Dict[str,Any]]"
                ]
            }
        }
    },
    "python_exercism-master/resistor-colors/resistor_colors_test.py": {
        "ResistorColorsTest.test_brown_and_black": {
            "name": "test_brown_and_black",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResistorColorsTest.test_blue_and_grey": {
            "name": "test_blue_and_grey",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResistorColorsTest.test_yellow_and_violet": {
            "name": "test_yellow_and_violet",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResistorColorsTest.test_orange_and_orange": {
            "name": "test_orange_and_orange",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/rest-api/rest_api.py": {
        "RestAPI.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "RestAPI.get": {
            "name": "get",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[Mapping[str,str]]",
                    "Mapping",
                    "None"
                ],
                "payload": [
                    "str",
                    "None",
                    "Type[Any]",
                    "Dict[str,Any]",
                    "Mapping[str,Any]",
                    "Type",
                    "Mapping"
                ]
            }
        },
        "RestAPI.post": {
            "name": "post",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ],
                "payload": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "Optional[Dict]",
                    "Dict"
                ]
            }
        },
        "RestAPI.get_users": {
            "name": "get_users",
            "location": 48,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "users": [
                    "bool"
                ]
            }
        },
        "RestAPI.cleanup": {
            "name": "cleanup",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lender": [
                    "Type"
                ],
                "borrower": [
                    "Type"
                ]
            }
        }
    },
    "python_exercism-master/rest-api/rest_api_test.py": {
        "RestApiTest.test_no_users": {
            "name": "test_no_users",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestApiTest.test_add_user": {
            "name": "test_add_user",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestApiTest.test_get_single_user": {
            "name": "test_get_single_user",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestApiTest.test_both_users_have_0_balance": {
            "name": "test_both_users_have_0_balance",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestApiTest.test_borrower_has_negative_balance": {
            "name": "test_borrower_has_negative_balance",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestApiTest.test_lender_has_negative_balance": {
            "name": "test_lender_has_negative_balance",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestApiTest.test_lender_owes_borrower": {
            "name": "test_lender_owes_borrower",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestApiTest.test_lender_owes_borrower_less_than_new_loan": {
            "name": "test_lender_owes_borrower_less_than_new_loan",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestApiTest.test_lender_owes_borrower_same_as_new_loan": {
            "name": "test_lender_owes_borrower_same_as_new_loan",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/reverse-string/reverse_string.py": {
        "reverse": {
            "name": "reverse",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "List[str]",
                    "Set[str]",
                    "bool"
                ]
            }
        }
    },
    "python_exercism-master/reverse-string/reverse_string_test.py": {
        "ReverseStringTest.test_an_empty_string": {
            "name": "test_an_empty_string",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReverseStringTest.test_a_word": {
            "name": "test_a_word",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReverseStringTest.test_a_capitalized_word": {
            "name": "test_a_capitalized_word",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReverseStringTest.test_a_sentence_with_punctuation": {
            "name": "test_a_sentence_with_punctuation",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReverseStringTest.test_a_palindrome": {
            "name": "test_a_palindrome",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReverseStringTest.test_an_even_sized_word": {
            "name": "test_an_even_sized_word",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/rna-transcription/rna_transcription.py": {
        "to_rna": {
            "name": "to_rna",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "dna_strand": [
                    "List[str]",
                    "str",
                    "[]",
                    "float",
                    "int"
                ]
            }
        }
    },
    "python_exercism-master/rna-transcription/rna_transcription_test.py": {
        "RnaTranscriptionTest.test_empty_rna_sequence": {
            "name": "test_empty_rna_sequence",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RnaTranscriptionTest.test_rna_complement_of_cytosine_is_guanine": {
            "name": "test_rna_complement_of_cytosine_is_guanine",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RnaTranscriptionTest.test_rna_complement_of_guanine_is_cytosine": {
            "name": "test_rna_complement_of_guanine_is_cytosine",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RnaTranscriptionTest.test_rna_complement_of_thymine_is_adenine": {
            "name": "test_rna_complement_of_thymine_is_adenine",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RnaTranscriptionTest.test_rna_complement_of_adenine_is_uracil": {
            "name": "test_rna_complement_of_adenine_is_uracil",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RnaTranscriptionTest.test_rna_complement": {
            "name": "test_rna_complement",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/robot-name/robot_name.py": {
        "Robot.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Robot.reset": {
            "name": "reset",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Robot.generate_name": {
            "name": "generate_name",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/robot-name/robot_name_test.py": {
        "RobotNameTest.test_has_name": {
            "name": "test_has_name",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobotNameTest.test_name_sticks": {
            "name": "test_name_sticks",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobotNameTest.test_different_robots_have_different_names": {
            "name": "test_different_robots_have_different_names",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobotNameTest.test_reset_name": {
            "name": "test_reset_name",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/robot-simulator/robot_simulator.py": {
        "Robot.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "Tuple[int]",
                    "float",
                    "int",
                    "str",
                    "Dict[int,Tuple[int,int]]"
                ],
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "Robot.turn_left": {
            "name": "turn_left",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Robot.turn_right": {
            "name": "turn_right",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Robot.advance": {
            "name": "advance",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Robot.move": {
            "name": "move",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instructions": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "python_exercism-master/robot-simulator/robot_simulator_test.py": {
        "RobotSimulatorTest.test_at_origin_facing_north": {
            "name": "test_at_origin_facing_north",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobotSimulatorTest.test_at_negative_position_facing_south": {
            "name": "test_at_negative_position_facing_south",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobotSimulatorTest.test_changes_north_to_east": {
            "name": "test_changes_north_to_east",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobotSimulatorTest.test_changes_east_to_south": {
            "name": "test_changes_east_to_south",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobotSimulatorTest.test_changes_south_to_west": {
            "name": "test_changes_south_to_west",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobotSimulatorTest.test_changes_west_to_north": {
            "name": "test_changes_west_to_north",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobotSimulatorTest.test_changes_north_to_west": {
            "name": "test_changes_north_to_west",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobotSimulatorTest.test_changes_west_to_south": {
            "name": "test_changes_west_to_south",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobotSimulatorTest.test_changes_south_to_east": {
            "name": "test_changes_south_to_east",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobotSimulatorTest.test_changes_east_to_north": {
            "name": "test_changes_east_to_north",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobotSimulatorTest.test_facing_north_increments_y": {
            "name": "test_facing_north_increments_y",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobotSimulatorTest.test_facing_south_decrements_y": {
            "name": "test_facing_south_decrements_y",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobotSimulatorTest.test_facing_east_increments_x": {
            "name": "test_facing_east_increments_x",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobotSimulatorTest.test_facing_west_decrements_x": {
            "name": "test_facing_west_decrements_x",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobotSimulatorTest.test_moving_east_and_north_from_readme": {
            "name": "test_moving_east_and_north_from_readme",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobotSimulatorTest.test_moving_west_and_north": {
            "name": "test_moving_west_and_north",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobotSimulatorTest.test_moving_west_and_south": {
            "name": "test_moving_west_and_south",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobotSimulatorTest.test_moving_east_and_north": {
            "name": "test_moving_east_and_north",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/roman-numerals/roman_numerals.py": {
        "roman": {
            "name": "roman",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "number": [
                    "Callable[[T], bool]",
                    "str"
                ]
            }
        }
    },
    "python_exercism-master/roman-numerals/roman_numerals_test.py": {
        "RomanNumeralsTest.test_1_is_a_single_i": {
            "name": "test_1_is_a_single_i",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RomanNumeralsTest.test_2_is_two_i_s": {
            "name": "test_2_is_two_i_s",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RomanNumeralsTest.test_3_is_three_i_s": {
            "name": "test_3_is_three_i_s",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RomanNumeralsTest.test_4_being_5_1_is_iv": {
            "name": "test_4_being_5_1_is_iv",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RomanNumeralsTest.test_5_is_a_single_v": {
            "name": "test_5_is_a_single_v",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RomanNumeralsTest.test_6_being_5_1_is_vi": {
            "name": "test_6_being_5_1_is_vi",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RomanNumeralsTest.test_9_being_10_1_is_ix": {
            "name": "test_9_being_10_1_is_ix",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RomanNumeralsTest.test_20_is_two_x_s": {
            "name": "test_20_is_two_x_s",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RomanNumeralsTest.test_48_is_not_50_2_but_rather_40_8": {
            "name": "test_48_is_not_50_2_but_rather_40_8",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RomanNumeralsTest.test_49_is_not_40_5_4_but_rather_50_10_10_1": {
            "name": "test_49_is_not_40_5_4_but_rather_50_10_10_1",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RomanNumeralsTest.test_50_is_a_single_l": {
            "name": "test_50_is_a_single_l",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RomanNumeralsTest.test_90_being_100_10_is_xc": {
            "name": "test_90_being_100_10_is_xc",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RomanNumeralsTest.test_100_is_a_single_c": {
            "name": "test_100_is_a_single_c",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RomanNumeralsTest.test_60_being_50_10_is_lx": {
            "name": "test_60_being_50_10_is_lx",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RomanNumeralsTest.test_400_being_500_100_is_cd": {
            "name": "test_400_being_500_100_is_cd",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RomanNumeralsTest.test_500_is_a_single_d": {
            "name": "test_500_is_a_single_d",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RomanNumeralsTest.test_900_being_1000_100_is_cm": {
            "name": "test_900_being_1000_100_is_cm",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RomanNumeralsTest.test_1000_is_a_single_m": {
            "name": "test_1000_is_a_single_m",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RomanNumeralsTest.test_3000_is_three_m_s": {
            "name": "test_3000_is_three_m_s",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/rotational-cipher/rotational_cipher.py": {
        "rotate": {
            "name": "rotate",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ],
                "key": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "python_exercism-master/rotational-cipher/rotational_cipher_test.py": {
        "RotationalCipherTest.test_rotate_a_by_0_same_output_as_input": {
            "name": "test_rotate_a_by_0_same_output_as_input",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RotationalCipherTest.test_rotate_a_by_1": {
            "name": "test_rotate_a_by_1",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RotationalCipherTest.test_rotate_a_by_26_same_output_as_input": {
            "name": "test_rotate_a_by_26_same_output_as_input",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RotationalCipherTest.test_rotate_m_by_13": {
            "name": "test_rotate_m_by_13",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RotationalCipherTest.test_rotate_n_by_13_with_wrap_around_alphabet": {
            "name": "test_rotate_n_by_13_with_wrap_around_alphabet",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RotationalCipherTest.test_rotate_capital_letters": {
            "name": "test_rotate_capital_letters",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RotationalCipherTest.test_rotate_spaces": {
            "name": "test_rotate_spaces",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RotationalCipherTest.test_rotate_numbers": {
            "name": "test_rotate_numbers",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RotationalCipherTest.test_rotate_punctuation": {
            "name": "test_rotate_punctuation",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RotationalCipherTest.test_rotate_all_letters": {
            "name": "test_rotate_all_letters",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/run-length-encoding/run_length_encoding.py": {
        "decode": {
            "name": "decode",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str",
                    "int",
                    "Union[str,bytes]",
                    "bytes"
                ]
            }
        },
        "encode_one_char": {
            "name": "encode_one_char",
            "location": 16,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "char": [
                    "str",
                    "int"
                ],
                "counter": [
                    "int",
                    "str"
                ]
            }
        },
        "encode": {
            "name": "encode",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        }
    },
    "python_exercism-master/run-length-encoding/run_length_encoding_test.py": {
        "RunLengthEncodingTest.test_encode_empty_string": {
            "name": "test_encode_empty_string",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunLengthEncodingTest.test_encode_single_characters_only_are_encoded_without_count": {
            "name": "test_encode_single_characters_only_are_encoded_without_count",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunLengthEncodingTest.test_encode_string_with_no_single_characters": {
            "name": "test_encode_string_with_no_single_characters",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunLengthEncodingTest.test_encode_single_characters_mixed_with_repeated_characters": {
            "name": "test_encode_single_characters_mixed_with_repeated_characters",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunLengthEncodingTest.test_encode_multiple_whitespace_mixed_in_string": {
            "name": "test_encode_multiple_whitespace_mixed_in_string",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunLengthEncodingTest.test_encode_lowercase_characters": {
            "name": "test_encode_lowercase_characters",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunLengthEncodingTest.test_decode_empty_string": {
            "name": "test_decode_empty_string",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunLengthEncodingTest.test_decode_single_characters_only": {
            "name": "test_decode_single_characters_only",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunLengthEncodingTest.test_decode_string_with_no_single_characters": {
            "name": "test_decode_string_with_no_single_characters",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunLengthEncodingTest.test_decode_single_characters_with_repeated_characters": {
            "name": "test_decode_single_characters_with_repeated_characters",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunLengthEncodingTest.test_decode_multiple_whitespace_mixed_in_string": {
            "name": "test_decode_multiple_whitespace_mixed_in_string",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunLengthEncodingTest.test_decode_lower_case_string": {
            "name": "test_decode_lower_case_string",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunLengthEncodingTest.test_encode_followed_by_decode_gives_original_string": {
            "name": "test_encode_followed_by_decode_gives_original_string",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/saddle-points/saddle_points.py": {
        "saddle_points": {
            "name": "saddle_points",
            "location": 4,
            "return": [
                "List[Dict[(str, int)]]"
            ],
            "arguments": {
                "matrix": [
                    "List",
                    "str",
                    "List[float]",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]"
                ]
            }
        }
    },
    "python_exercism-master/saddle-points/saddle_points_test.py": {
        "sorted_points": {
            "name": "sorted_points",
            "location": 15,
            "return": [
                "list"
            ],
            "arguments": {
                "point_list": [
                    "List",
                    "T",
                    "List[float]",
                    "List[tuple[Union[str,int]]]",
                    "List[int]",
                    "List[Union[int,float]]",
                    "List[Tuple[str,int]]",
                    "List[list[T]]",
                    "List[list]",
                    "List[List[T]]",
                    "List[List]"
                ]
            }
        },
        "SaddlePointsTest.test_can_identify_single_saddle_point": {
            "name": "test_can_identify_single_saddle_point",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SaddlePointsTest.test_can_identify_that_empty_matrix_has_no_saddle_points": {
            "name": "test_can_identify_that_empty_matrix_has_no_saddle_points",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SaddlePointsTest.test_can_identify_lack_of_saddle_points_when_there_are_none": {
            "name": "test_can_identify_lack_of_saddle_points_when_there_are_none",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SaddlePointsTest.test_can_identify_multiple_saddle_points_in_a_column": {
            "name": "test_can_identify_multiple_saddle_points_in_a_column",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SaddlePointsTest.test_can_identify_multiple_saddle_points_in_a_row": {
            "name": "test_can_identify_multiple_saddle_points_in_a_row",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SaddlePointsTest.test_can_identify_saddle_point_in_bottom_right_corner": {
            "name": "test_can_identify_saddle_point_in_bottom_right_corner",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SaddlePointsTest.test_can_identify_saddle_points_in_a_non_square_matrix": {
            "name": "test_can_identify_saddle_points_in_a_non_square_matrix",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SaddlePointsTest.test_can_identify_that_saddle_points_in_a_single_column_matrix_are_those_with_the_minimum_value": {
            "name": "test_can_identify_that_saddle_points_in_a_single_column_matrix_are_those_with_the_minimum_value",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SaddlePointsTest.test_can_identify_that_saddle_points_in_a_single_row_matrix_are_those_with_the_maximum_value": {
            "name": "test_can_identify_that_saddle_points_in_a_single_row_matrix_are_those_with_the_maximum_value",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SaddlePointsTest.test_irregular_matrix": {
            "name": "test_irregular_matrix",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SaddlePointsTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 101,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/satellite/satellite.py": {
        "tree_from_traversals": {
            "name": "tree_from_traversals",
            "location": 5,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "preorder": [
                    "list",
                    "Optional[Union[str, Any]]",
                    "Optional[int]",
                    "List[str]",
                    "List[int]",
                    "List[List[Any]]"
                ],
                "inorder": [
                    "Tuple[Union[int, slice], Union[int, slice]]",
                    "List[List[str]]",
                    "str",
                    "Dict[str, List[Any]]"
                ]
            }
        }
    },
    "python_exercism-master/satellite/satellite_test.py": {
        "SatelliteTest.test_empty_tree": {
            "name": "test_empty_tree",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SatelliteTest.test_tree_with_one_item": {
            "name": "test_tree_with_one_item",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SatelliteTest.test_tree_with_many_items": {
            "name": "test_tree_with_many_items",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SatelliteTest.test_reject_traversals_of_different_length": {
            "name": "test_reject_traversals_of_different_length",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SatelliteTest.test_reject_inconsistent_traversals_of_same_length": {
            "name": "test_reject_inconsistent_traversals_of_same_length",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SatelliteTest.test_reject_traversals_with_repeated_items": {
            "name": "test_reject_traversals_with_repeated_items",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SatelliteTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 60,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/say/say.py": {
        "say": {
            "name": "say",
            "location": 50,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "number": [
                    "int",
                    "List[Tuple[int, int, int]]",
                    "List['cirq.Qid']"
                ]
            }
        }
    },
    "python_exercism-master/say/say_test.py": {
        "SayTest.test_zero": {
            "name": "test_zero",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SayTest.test_one": {
            "name": "test_one",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SayTest.test_fourteen": {
            "name": "test_fourteen",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SayTest.test_twenty": {
            "name": "test_twenty",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SayTest.test_twenty_two": {
            "name": "test_twenty_two",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SayTest.test_one_hundred": {
            "name": "test_one_hundred",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SayTest.test_one_hundred_twenty_three": {
            "name": "test_one_hundred_twenty_three",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SayTest.test_one_thousand": {
            "name": "test_one_thousand",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SayTest.test_one_thousand_two_hundred_thirty_four": {
            "name": "test_one_thousand_two_hundred_thirty_four",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SayTest.test_one_million": {
            "name": "test_one_million",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SayTest.test_one_million_two_thousand_three_hundred_forty_five": {
            "name": "test_one_million_two_thousand_three_hundred_forty_five",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SayTest.test_one_billion": {
            "name": "test_one_billion",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SayTest.test_a_big_number": {
            "name": "test_a_big_number",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SayTest.test_numbers_below_zero_are_out_of_range": {
            "name": "test_numbers_below_zero_are_out_of_range",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SayTest.test_numbers_above_999_999_999_999_are_out_of_range": {
            "name": "test_numbers_above_999_999_999_999_are_out_of_range",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SayTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 62,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/scale-generator/scale_generator.py": {
        "Scale.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tonic": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Scale.chromatic": {
            "name": "chromatic",
            "location": 9,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scale.interval": {
            "name": "interval",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "intervals": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Scale.make_chromatic": {
            "name": "make_chromatic",
            "location": 15,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/scale-generator/scale_generator_test.py": {
        "ScaleGeneratorTest.test_chromatic_scale_with_sharps": {
            "name": "test_chromatic_scale_with_sharps",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScaleGeneratorTest.test_chromatic_scale_with_flats": {
            "name": "test_chromatic_scale_with_flats",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScaleGeneratorTest.test_simple_major_scale": {
            "name": "test_simple_major_scale",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScaleGeneratorTest.test_major_scale_with_sharps": {
            "name": "test_major_scale_with_sharps",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScaleGeneratorTest.test_major_scale_with_flats": {
            "name": "test_major_scale_with_flats",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScaleGeneratorTest.test_minor_scale_with_sharps": {
            "name": "test_minor_scale_with_sharps",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScaleGeneratorTest.test_minor_scale_with_flats": {
            "name": "test_minor_scale_with_flats",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScaleGeneratorTest.test_dorian_mode": {
            "name": "test_dorian_mode",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScaleGeneratorTest.test_mixolydian_mode": {
            "name": "test_mixolydian_mode",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScaleGeneratorTest.test_lydian_mode": {
            "name": "test_lydian_mode",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScaleGeneratorTest.test_phrygian_mode": {
            "name": "test_phrygian_mode",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScaleGeneratorTest.test_locrian_mode": {
            "name": "test_locrian_mode",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScaleGeneratorTest.test_harmonic_minor": {
            "name": "test_harmonic_minor",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScaleGeneratorTest.test_octatonic": {
            "name": "test_octatonic",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScaleGeneratorTest.test_hexatonic": {
            "name": "test_hexatonic",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScaleGeneratorTest.test_pentatonic": {
            "name": "test_pentatonic",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScaleGeneratorTest.test_enigmatic": {
            "name": "test_enigmatic",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/scrabble-score/scrabble_score.py": {
        "make_value_dict": {
            "name": "make_value_dict",
            "location": 7,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "score": {
            "name": "score",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "word": [
                    "str",
                    "Dict",
                    "float",
                    "List",
                    "int"
                ]
            }
        },
        "make_value_dict.write_input": {
            "name": "write_input",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str",
                    "slice",
                    "bool"
                ],
                "value": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "python_exercism-master/scrabble-score/scrabble_score_test.py": {
        "ScrabbleScoreTest.test_lowercase_letter": {
            "name": "test_lowercase_letter",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrabbleScoreTest.test_uppercase_letter": {
            "name": "test_uppercase_letter",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrabbleScoreTest.test_valuable_letter": {
            "name": "test_valuable_letter",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrabbleScoreTest.test_short_word": {
            "name": "test_short_word",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrabbleScoreTest.test_short_valuable_word": {
            "name": "test_short_valuable_word",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrabbleScoreTest.test_medium_word": {
            "name": "test_medium_word",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrabbleScoreTest.test_medium_valuable_word": {
            "name": "test_medium_valuable_word",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrabbleScoreTest.test_long_mixed_case_word": {
            "name": "test_long_mixed_case_word",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrabbleScoreTest.test_english_like_word": {
            "name": "test_english_like_word",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrabbleScoreTest.test_empty_input": {
            "name": "test_empty_input",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrabbleScoreTest.test_entire_alphabet_available": {
            "name": "test_entire_alphabet_available",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/secret-handshake/secret_handshake.py": {
        "commands": {
            "name": "commands",
            "location": 6,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "code": [
                    "int",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "python_exercism-master/secret-handshake/secret_handshake_test.py": {
        "SecretHandshakeTest.test_wink_for_1": {
            "name": "test_wink_for_1",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecretHandshakeTest.test_double_blink_for_10": {
            "name": "test_double_blink_for_10",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecretHandshakeTest.test_close_your_eyes_for_100": {
            "name": "test_close_your_eyes_for_100",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecretHandshakeTest.test_jump_for_1000": {
            "name": "test_jump_for_1000",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecretHandshakeTest.test_combine_two_actions": {
            "name": "test_combine_two_actions",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecretHandshakeTest.test_reverse_two_actions": {
            "name": "test_reverse_two_actions",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecretHandshakeTest.test_reversing_one_action_gives_the_same_action": {
            "name": "test_reversing_one_action_gives_the_same_action",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecretHandshakeTest.test_reversing_no_actions_still_gives_no_actions": {
            "name": "test_reversing_no_actions_still_gives_no_actions",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecretHandshakeTest.test_all_possible_actions": {
            "name": "test_all_possible_actions",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecretHandshakeTest.test_reverse_all_possible_actions": {
            "name": "test_reverse_all_possible_actions",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecretHandshakeTest.test_do_nothing_for_zero": {
            "name": "test_do_nothing_for_zero",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/series/series.py": {
        "slices": {
            "name": "slices",
            "location": 4,
            "return": [
                "list"
            ],
            "arguments": {
                "series": [
                    "int",
                    "str"
                ],
                "length": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "python_exercism-master/series/series_test.py": {
        "SeriesTest.test_slices_of_one_from_one": {
            "name": "test_slices_of_one_from_one",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_slices_of_one_from_two": {
            "name": "test_slices_of_one_from_two",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_slices_of_two": {
            "name": "test_slices_of_two",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_slices_of_two_overlap": {
            "name": "test_slices_of_two_overlap",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_slices_can_include_duplicates": {
            "name": "test_slices_can_include_duplicates",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_slices_of_a_long_series": {
            "name": "test_slices_of_a_long_series",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_slice_length_is_too_large": {
            "name": "test_slice_length_is_too_large",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_slice_length_cannot_be_zero": {
            "name": "test_slice_length_cannot_be_zero",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_slice_length_cannot_be_negative": {
            "name": "test_slice_length_cannot_be_negative",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_empty_series_is_invalid": {
            "name": "test_empty_series_is_invalid",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 47,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/sgf-parsing/sgf_parsing.py": {
        "parse": {
            "name": "parse",
            "location": 40,
            "return": [
                "SgfTree"
            ],
            "arguments": {
                "input_string": [
                    "str"
                ]
            }
        },
        "SgfTree.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "properties": [
                    "bool",
                    "None",
                    "Optional[Dict]",
                    "List[str]",
                    "int",
                    "Dict"
                ],
                "children": [
                    "bool",
                    "None",
                    "Optional[Dict]",
                    "List[str]",
                    "int",
                    "Dict"
                ]
            }
        },
        "SgfTree.__eq__": {
            "name": "__eq__",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "List[int]",
                    "Dict[str,Any]"
                ]
            }
        },
        "SgfTree.__ne__": {
            "name": "__ne__",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "python_exercism-master/sgf-parsing/sgf_parsing_test.py": {
        "SgfParsingTest.test_empty_input": {
            "name": "test_empty_input",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SgfParsingTest.test_tree_with_no_nodes": {
            "name": "test_tree_with_no_nodes",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SgfParsingTest.test_node_without_tree": {
            "name": "test_node_without_tree",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SgfParsingTest.test_node_without_properties": {
            "name": "test_node_without_properties",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SgfParsingTest.test_single_node_tree": {
            "name": "test_single_node_tree",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SgfParsingTest.test_multiple_properties": {
            "name": "test_multiple_properties",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SgfParsingTest.test_properties_without_delimiter": {
            "name": "test_properties_without_delimiter",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SgfParsingTest.test_all_lowercase_property": {
            "name": "test_all_lowercase_property",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SgfParsingTest.test_upper_and_lowercase_property": {
            "name": "test_upper_and_lowercase_property",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SgfParsingTest.test_two_nodes": {
            "name": "test_two_nodes",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SgfParsingTest.test_two_child_trees": {
            "name": "test_two_child_trees",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SgfParsingTest.test_multiple_property_values": {
            "name": "test_multiple_property_values",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SgfParsingTest.test_escaped_property": {
            "name": "test_escaped_property",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SgfParsingTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 78,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/sieve/sieve.py": {
        "primes": {
            "name": "primes",
            "location": 7,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "limit": [
                    "int",
                    "Optional[Mapping[str,Any]]",
                    "float"
                ]
            }
        }
    },
    "python_exercism-master/sieve/sieve_test.py": {
        "SieveTest.test_no_primes_under_two": {
            "name": "test_no_primes_under_two",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SieveTest.test_find_first_prime": {
            "name": "test_find_first_prime",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SieveTest.test_find_primes_up_to_10": {
            "name": "test_find_primes_up_to_10",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SieveTest.test_limit_is_prime": {
            "name": "test_limit_is_prime",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SieveTest.test_find_primes_up_to_1000": {
            "name": "test_find_primes_up_to_1000",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/simple-cipher/simple_cipher.py": {
        "Cipher.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Sequence[str]",
                    "None",
                    "int"
                ]
            }
        },
        "Cipher.encode": {
            "name": "encode",
            "location": 16,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "List",
                    "Tuple[str]",
                    "bytes",
                    "Dict[str,Any]",
                    "Union[str,Dict[str,Any]]",
                    "Optional[str]"
                ]
            }
        },
        "Cipher.decode": {
            "name": "decode",
            "location": 30,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "List",
                    "Tuple[str]",
                    "bytes",
                    "Dict[str,Any]",
                    "Union[str,Dict[str,Any]]",
                    "Optional[str]"
                ]
            }
        }
    },
    "python_exercism-master/simple-cipher/simple_cipher_test.py": {
        "RandomKeyCipherTest.test_can_encode": {
            "name": "test_can_encode",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomKeyCipherTest.test_can_decode": {
            "name": "test_can_decode",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomKeyCipherTest.test_is_reversible": {
            "name": "test_is_reversible",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomKeyCipherTest.test_key_is_made_only_of_lowercase_letters": {
            "name": "test_key_is_made_only_of_lowercase_letters",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubstitutionCipherTest.test_can_encode": {
            "name": "test_can_encode",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubstitutionCipherTest.test_can_decode": {
            "name": "test_can_decode",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubstitutionCipherTest.test_is_reversible": {
            "name": "test_is_reversible",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubstitutionCipherTest.test_can_double_shift_encode": {
            "name": "test_can_double_shift_encode",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubstitutionCipherTest.test_can_wrap_on_encode": {
            "name": "test_can_wrap_on_encode",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubstitutionCipherTest.test_can_wrap_on_decode": {
            "name": "test_can_wrap_on_decode",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubstitutionCipherTest.test_can_encode_messages_longer_than_the_key": {
            "name": "test_can_encode_messages_longer_than_the_key",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubstitutionCipherTest.test_can_decode_messages_longer_than_the_key": {
            "name": "test_can_decode_messages_longer_than_the_key",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/simple-linked-list/simple_linked_list.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "float",
                    "Dict",
                    "bool",
                    "bytes",
                    "Union[str,bytes]",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]"
                ]
            }
        },
        "Node.value": {
            "name": "value",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.next": {
            "name": "next",
            "location": 15,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "LinkedList.__len__": {
            "name": "__len__",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__iter__": {
            "name": "__iter__",
            "location": 33,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.head": {
            "name": "head",
            "location": 36,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.push": {
            "name": "push",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict",
                    "str",
                    "List[str]",
                    "List",
                    "Sequence[Any]",
                    "Callable",
                    "VT"
                ]
            }
        },
        "LinkedList.pop": {
            "name": "pop",
            "location": 47,
            "return": [
                "int",
                "Tuple[Union[Literal,Literal,Literal,Literal,Literal,Literal,Literal]]",
                "List[Dict[str,Any]]",
                "float",
                "bool",
                "complex",
                "Sequence[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.recurse_reverse": {
            "name": "recurse_reverse",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current": [
                    "int",
                    "float",
                    "Iterable[Optional[Any]]",
                    "Optional[int]",
                    "None"
                ],
                "previous": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "LinkedList.reversed": {
            "name": "reversed",
            "location": 64,
            "return": [
                "LinkedList"
            ],
            "arguments": {
                "self": [
                    "_TLinkedList@@LinkedList@@"
                ]
            }
        }
    },
    "python_exercism-master/simple-linked-list/simple_linked_list_test.py": {
        "SimpleLinkedListTest.test_empty_list_has_len_zero": {
            "name": "test_empty_list_has_len_zero",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleLinkedListTest.test_singleton_list_has_len_one": {
            "name": "test_singleton_list_has_len_one",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleLinkedListTest.test_non_empty_list_has_correct_len": {
            "name": "test_non_empty_list_has_correct_len",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleLinkedListTest.test_error_on_empty_list_head": {
            "name": "test_error_on_empty_list_head",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleLinkedListTest.test_singleton_list_has_head": {
            "name": "test_singleton_list_has_head",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleLinkedListTest.test_non_empty_list_has_correct_head": {
            "name": "test_non_empty_list_has_correct_head",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleLinkedListTest.test_can_push_to_non_empty_list": {
            "name": "test_can_push_to_non_empty_list",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleLinkedListTest.test_pushing_to_empty_list_changes_head": {
            "name": "test_pushing_to_empty_list_changes_head",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleLinkedListTest.test_can_pop_from_non_empty_list": {
            "name": "test_can_pop_from_non_empty_list",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleLinkedListTest.test_pop_from_singleton_list_removes_head": {
            "name": "test_pop_from_singleton_list_removes_head",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleLinkedListTest.test_error_on_empty_list_pop": {
            "name": "test_error_on_empty_list_pop",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleLinkedListTest.test_push_and_pop": {
            "name": "test_push_and_pop",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleLinkedListTest.test_singleton_list_head_has_no_next": {
            "name": "test_singleton_list_head_has_no_next",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleLinkedListTest.test_non_empty_list_traverse": {
            "name": "test_non_empty_list_traverse",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleLinkedListTest.test_empty_linked_list_to_list_is_empty": {
            "name": "test_empty_linked_list_to_list_is_empty",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleLinkedListTest.test_singleton_linked_list_to_list_list_with_singular_element": {
            "name": "test_singleton_linked_list_to_list_list_with_singular_element",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleLinkedListTest.test_non_empty_linked_list_to_list_is_list_with_all_elements": {
            "name": "test_non_empty_linked_list_to_list_is_list_with_all_elements",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleLinkedListTest.test_reversed_empty_list_is_empty_list": {
            "name": "test_reversed_empty_list_is_empty_list",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleLinkedListTest.test_reversed_singleton_list_is_same_list": {
            "name": "test_reversed_singleton_list_is_same_list",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleLinkedListTest.test_reverse_non_empty_list": {
            "name": "test_reverse_non_empty_list",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleLinkedListTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 111,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/space-age/space_age.py": {
        "on_planet": {
            "name": "on_planet",
            "location": 22,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "r": [
                    "float",
                    "dict",
                    "Union[int, float]",
                    "List[T]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "SpaceAge.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "on_planet.inner": {
            "name": "inner",
            "location": 23,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/space-age/space_age_test.py": {
        "SpaceAgeTest.test_age_on_earth": {
            "name": "test_age_on_earth",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceAgeTest.test_age_on_mercury": {
            "name": "test_age_on_mercury",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceAgeTest.test_age_on_venus": {
            "name": "test_age_on_venus",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceAgeTest.test_age_on_mars": {
            "name": "test_age_on_mars",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceAgeTest.test_age_on_jupiter": {
            "name": "test_age_on_jupiter",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceAgeTest.test_age_on_saturn": {
            "name": "test_age_on_saturn",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceAgeTest.test_age_on_uranus": {
            "name": "test_age_on_uranus",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceAgeTest.test_age_on_neptune": {
            "name": "test_age_on_neptune",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/spiral-matrix/spiral_matrix.py": {
        "spiral_matrix": {
            "name": "spiral_matrix",
            "location": 4,
            "return": [
                "List[List[Optional[int]]]"
            ],
            "arguments": {
                "size": [
                    "int",
                    "Optional[int]",
                    "List"
                ]
            }
        }
    },
    "python_exercism-master/spiral-matrix/spiral_matrix_test.py": {
        "SpiralMatrixTest.test_empty_spiral": {
            "name": "test_empty_spiral",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpiralMatrixTest.test_trivial_spiral": {
            "name": "test_trivial_spiral",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpiralMatrixTest.test_spiral_of_size_2": {
            "name": "test_spiral_of_size_2",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpiralMatrixTest.test_spiral_of_size_3": {
            "name": "test_spiral_of_size_3",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpiralMatrixTest.test_spiral_of_size_4": {
            "name": "test_spiral_of_size_4",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpiralMatrixTest.test_spiral_of_size_5": {
            "name": "test_spiral_of_size_5",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/sublist/sublist.py": {
        "check_sublist": {
            "name": "check_sublist",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "sublist_": [
                    "BinaryIO",
                    "List[bool]",
                    "tuple",
                    "int"
                ],
                "lst": [
                    "Union[List[str], List[int]]",
                    "int",
                    "bool"
                ]
            }
        },
        "sublist": {
            "name": "sublist",
            "location": 35,
            "return": [
                "int"
            ],
            "arguments": {
                "first_list": [
                    "int",
                    "List",
                    "List[Dict[Any,str]]",
                    "List[dict[Any,str]]"
                ],
                "second_list": [
                    "int",
                    "List",
                    "List[Dict[Any,str]]",
                    "List[dict[Any,str]]"
                ]
            }
        }
    },
    "python_exercism-master/sublist/sublist_test.py": {
        "SublistTest.test_empty_lists": {
            "name": "test_empty_lists",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SublistTest.test_empty_list_within_non_empty_list": {
            "name": "test_empty_list_within_non_empty_list",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SublistTest.test_non_empty_list_contains_empty_list": {
            "name": "test_non_empty_list_contains_empty_list",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SublistTest.test_list_equals_itself": {
            "name": "test_list_equals_itself",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SublistTest.test_different_lists": {
            "name": "test_different_lists",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SublistTest.test_false_start": {
            "name": "test_false_start",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SublistTest.test_consecutive": {
            "name": "test_consecutive",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SublistTest.test_sublist_at_start": {
            "name": "test_sublist_at_start",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SublistTest.test_sublist_in_middle": {
            "name": "test_sublist_in_middle",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SublistTest.test_sublist_at_end": {
            "name": "test_sublist_at_end",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SublistTest.test_at_start_of_superlist": {
            "name": "test_at_start_of_superlist",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SublistTest.test_in_middle_of_superlist": {
            "name": "test_in_middle_of_superlist",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SublistTest.test_at_end_of_superlist": {
            "name": "test_at_end_of_superlist",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SublistTest.test_first_list_missing_element_from_second_list": {
            "name": "test_first_list_missing_element_from_second_list",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SublistTest.test_second_list_missing_element_from_first_list": {
            "name": "test_second_list_missing_element_from_first_list",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SublistTest.test_order_matters_to_a_list": {
            "name": "test_order_matters_to_a_list",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SublistTest.test_same_digits_but_different_numbers": {
            "name": "test_same_digits_but_different_numbers",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SublistTest.test_unique_return_values": {
            "name": "test_unique_return_values",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SublistTest.test_inner_spaces": {
            "name": "test_inner_spaces",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SublistTest.test_large_lists": {
            "name": "test_large_lists",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SublistTest.test_spread_sublist": {
            "name": "test_spread_sublist",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/sum-of-multiples/sum_of_multiples.py": {
        "sum_of_multiples": {
            "name": "sum_of_multiples",
            "location": 7,
            "return": [
                "int"
            ],
            "arguments": {
                "limit": [
                    "int",
                    "float"
                ],
                "multiples": [
                    "List[int]",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "python_exercism-master/sum-of-multiples/sum_of_multiples_test.py": {
        "SumOfMultiplesTest.test_no_multiples_within_limit": {
            "name": "test_no_multiples_within_limit",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SumOfMultiplesTest.test_one_factor_has_multiples_within_limit": {
            "name": "test_one_factor_has_multiples_within_limit",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SumOfMultiplesTest.test_more_than_one_multiple_within_limit": {
            "name": "test_more_than_one_multiple_within_limit",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SumOfMultiplesTest.test_more_than_one_factor_with_multiples_within_limit": {
            "name": "test_more_than_one_factor_with_multiples_within_limit",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SumOfMultiplesTest.test_each_multiple_is_only_counted_once": {
            "name": "test_each_multiple_is_only_counted_once",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SumOfMultiplesTest.test_a_much_larger_limit": {
            "name": "test_a_much_larger_limit",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SumOfMultiplesTest.test_three_factors": {
            "name": "test_three_factors",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SumOfMultiplesTest.test_factors_not_relatively_prime": {
            "name": "test_factors_not_relatively_prime",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SumOfMultiplesTest.test_some_pairs_of_factors_relatively_prime_and_some_not": {
            "name": "test_some_pairs_of_factors_relatively_prime_and_some_not",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SumOfMultiplesTest.test_one_factor_is_a_multiple_of_another": {
            "name": "test_one_factor_is_a_multiple_of_another",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SumOfMultiplesTest.test_much_larger_factors": {
            "name": "test_much_larger_factors",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SumOfMultiplesTest.test_all_numbers_are_multiples_of_1": {
            "name": "test_all_numbers_are_multiples_of_1",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SumOfMultiplesTest.test_no_factors_means_an_empty_sum": {
            "name": "test_no_factors_means_an_empty_sum",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SumOfMultiplesTest.test_the_only_multiple_of_0_is_0": {
            "name": "test_the_only_multiple_of_0_is_0",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SumOfMultiplesTest.test_the_factor_0_does_not_affect_the_sum_of_multiples_of_other_factors": {
            "name": "test_the_factor_0_does_not_affect_the_sum_of_multiples_of_other_factors",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SumOfMultiplesTest.test_solutions_using_include_exclude_must_extend_to_cardinality_greater_than_3": {
            "name": "test_solutions_using_include_exclude_must_extend_to_cardinality_greater_than_3",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/tisbury-treasure-hunt/tuples.py": {
        "get_coordinate": {
            "name": "get_coordinate",
            "location": 1,
            "return": [
                "str",
                "List[List[int]]",
                "Callable"
            ],
            "arguments": {
                "record": [
                    "str",
                    "bool",
                    "Dict"
                ]
            }
        },
        "convert_coordinate": {
            "name": "convert_coordinate",
            "location": 11,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "coordinate": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "int",
                    "float"
                ]
            }
        },
        "compare_records": {
            "name": "compare_records",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "azara_record": [
                    "str",
                    "int",
                    "List[int]"
                ],
                "rui_record": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "create_record": {
            "name": "create_record",
            "location": 34,
            "return": [
                "bool",
                "int",
                "float",
                "bytes",
                "Text",
                "Dict",
                "str"
            ],
            "arguments": {
                "azara_record": [
                    "bool",
                    "float"
                ],
                "rui_record": [
                    "bool",
                    "float"
                ]
            }
        },
        "clean_up": {
            "name": "clean_up",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "combined_record_group": [
                    "str",
                    "bool",
                    "BaseException"
                ]
            }
        }
    },
    "python_exercism-master/tisbury-treasure-hunt/tuples_test.py": {
        "TisburyTreasureTest.test_get_coordinate": {
            "name": "test_get_coordinate",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TisburyTreasureTest.test_convert_coordinate": {
            "name": "test_convert_coordinate",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TisburyTreasureTest.test_compare_records": {
            "name": "test_compare_records",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TisburyTreasureTest.test_create_record": {
            "name": "test_create_record",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TisburyTreasureTest.test_clean_up": {
            "name": "test_clean_up",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/tournament/tournament.py": {
        "tally": {
            "name": "tally",
            "location": 40,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "rows": [
                    "Dict",
                    "List[str]",
                    "Iterator[Dict[str,Any]]"
                ]
            }
        },
        "Team.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "Team.update_result": {
            "name": "update_result",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "str",
                    "Optional[str]",
                    "None",
                    "int",
                    "Optional[Iterable[Any]]",
                    "Iterable[Any]",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "Team.__eq__": {
            "name": "__eq__",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict",
                    "T",
                    "Dict[str,str]",
                    "Optional[Dict[str,str]]",
                    "None",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "Team.__gt__": {
            "name": "__gt__",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict",
                    "T",
                    "Dict[str,str]",
                    "Optional[Dict[str,str]]",
                    "None",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "Team.__str__": {
            "name": "__str__",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/tournament/tournament_test.py": {
        "TournamentTest.test_just_the_header_if_no_input": {
            "name": "test_just_the_header_if_no_input",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentTest.test_a_win_is_three_points_a_loss_is_zero_points": {
            "name": "test_a_win_is_three_points_a_loss_is_zero_points",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentTest.test_a_win_can_also_be_expressed_as_a_loss": {
            "name": "test_a_win_can_also_be_expressed_as_a_loss",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentTest.test_a_different_team_can_win": {
            "name": "test_a_different_team_can_win",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentTest.test_a_draw_is_one_point_each": {
            "name": "test_a_draw_is_one_point_each",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentTest.test_there_can_be_more_than_one_match": {
            "name": "test_there_can_be_more_than_one_match",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentTest.test_there_can_be_more_than_one_winner": {
            "name": "test_there_can_be_more_than_one_winner",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentTest.test_there_can_be_more_than_two_teams": {
            "name": "test_there_can_be_more_than_two_teams",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentTest.test_typical_input": {
            "name": "test_typical_input",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentTest.test_incomplete_competition_not_all_pairs_have_played": {
            "name": "test_incomplete_competition_not_all_pairs_have_played",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentTest.test_ties_broken_alphabetically": {
            "name": "test_ties_broken_alphabetically",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/transpose/transpose.py": {
        "transpose": {
            "name": "transpose",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "lines": [
                    "str"
                ]
            }
        }
    },
    "python_exercism-master/transpose/transpose_test.py": {
        "TransposeTest.test_empty_string": {
            "name": "test_empty_string",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransposeTest.test_two_characters_in_a_row": {
            "name": "test_two_characters_in_a_row",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransposeTest.test_two_characters_in_a_column": {
            "name": "test_two_characters_in_a_column",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransposeTest.test_simple": {
            "name": "test_simple",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransposeTest.test_single_line": {
            "name": "test_single_line",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransposeTest.test_first_line_longer_than_second_line": {
            "name": "test_first_line_longer_than_second_line",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransposeTest.test_second_line_longer_than_first_line": {
            "name": "test_second_line_longer_than_first_line",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransposeTest.test_mixed_line_length": {
            "name": "test_mixed_line_length",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransposeTest.test_square": {
            "name": "test_square",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransposeTest.test_rectangle": {
            "name": "test_rectangle",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransposeTest.test_triangle": {
            "name": "test_triangle",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/tree-building/tree_building.py": {
        "check_valid_record": {
            "name": "check_valid_record",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "record": [
                    "int",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "BuildTree": {
            "name": "BuildTree",
            "location": 35,
            "return": [
                "Optional[Node]"
            ],
            "arguments": {
                "records": [
                    "Dict[str, float]",
                    "Iterable[Any]",
                    "int",
                    "Dict[int, Dict[str, Any]]"
                ]
            }
        },
        "Record.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "parent_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/tree-building/tree_building_test.py": {
        "TreeBuildingTest.test_empty_list_input": {
            "name": "test_empty_list_input",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeBuildingTest.test_one_node": {
            "name": "test_one_node",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeBuildingTest.test_three_nodes_in_order": {
            "name": "test_three_nodes_in_order",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeBuildingTest.test_three_nodes_in_reverse_order": {
            "name": "test_three_nodes_in_reverse_order",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeBuildingTest.test_more_than_two_children": {
            "name": "test_more_than_two_children",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeBuildingTest.test_binary_tree": {
            "name": "test_binary_tree",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeBuildingTest.test_unbalanced_tree": {
            "name": "test_unbalanced_tree",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeBuildingTest.test_root_node_has_parent": {
            "name": "test_root_node_has_parent",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeBuildingTest.test_no_root_node": {
            "name": "test_no_root_node",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeBuildingTest.test_non_continuous": {
            "name": "test_non_continuous",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeBuildingTest.test_cycle_directly": {
            "name": "test_cycle_directly",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeBuildingTest.test_cycle_indirectly": {
            "name": "test_cycle_indirectly",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeBuildingTest.test_higher_id_parent_of_lower_id": {
            "name": "test_higher_id_parent_of_lower_id",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeBuildingTest.assert_node_is_branch": {
            "name": "assert_node_is_branch",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]",
                    "List",
                    "int",
                    "str",
                    "Set",
                    "Optional[str]",
                    "None",
                    "List[List[Any]]",
                    "List[list[Any]]"
                ],
                "node_id": [
                    "str"
                ],
                "children_count": [
                    "int",
                    "List",
                    "List[str]",
                    "Union[List[int],float,str]",
                    "List[int]",
                    "float",
                    "str"
                ]
            }
        },
        "TreeBuildingTest.assert_node_is_leaf": {
            "name": "assert_node_is_leaf",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "List[int]",
                    "List",
                    "bytes",
                    "Set[Tuple[int,int]]",
                    "Set[tuple[Union[int,int]]]",
                    "List[Token]",
                    "List[T]"
                ],
                "node_id": [
                    "str"
                ]
            }
        },
        "TreeBuildingTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 152,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/triangle/triangle.py": {
        "is_triangle": {
            "name": "is_triangle",
            "location": 7,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "sides": [
                    "str",
                    "int"
                ]
            }
        },
        "is_equilateral": {
            "name": "is_equilateral",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "sides": [
                    "str",
                    "int"
                ]
            }
        },
        "is_isosceles": {
            "name": "is_isosceles",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "sides": [
                    "str",
                    "int"
                ]
            }
        },
        "is_scalene": {
            "name": "is_scalene",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "sides": [
                    "Union[List[float],List[int]]",
                    "List[int]",
                    "List[float]"
                ]
            }
        }
    },
    "python_exercism-master/triangle/triangle_test.py": {
        "is_equilateralTests.test_true_if_all_sides_are_equal": {
            "name": "test_true_if_all_sides_are_equal",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "is_equilateralTests.test_false_if_any_side_is_unequal": {
            "name": "test_false_if_any_side_is_unequal",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "is_equilateralTests.test_false_if_no_sides_are_equal": {
            "name": "test_false_if_no_sides_are_equal",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "is_equilateralTests.test_false_if_all_sides_are_zero": {
            "name": "test_false_if_all_sides_are_zero",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "is_equilateralTests.test_sides_may_be_floats": {
            "name": "test_sides_may_be_floats",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "is_isoscelesTests.test_true_if_last_two_sides_are_equal": {
            "name": "test_true_if_last_two_sides_are_equal",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "is_isoscelesTests.test_true_if_first_two_sides_are_equal": {
            "name": "test_true_if_first_two_sides_are_equal",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "is_isoscelesTests.test_true_if_first_and_last_sides_are_equal": {
            "name": "test_true_if_first_and_last_sides_are_equal",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "is_isoscelesTests.test_is_equilateral_triangles_are_also_is_isosceles": {
            "name": "test_is_equilateral_triangles_are_also_is_isosceles",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "is_isoscelesTests.test_false_if_no_sides_are_equal": {
            "name": "test_false_if_no_sides_are_equal",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "is_isoscelesTests.test_violation_of_triangle_inequality_is_not_isosceles_1": {
            "name": "test_violation_of_triangle_inequality_is_not_isosceles_1",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "is_isoscelesTests.test_violation_of_triangle_inequality_is_not_isosceles_2": {
            "name": "test_violation_of_triangle_inequality_is_not_isosceles_2",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "is_isoscelesTests.test_violation_of_triangle_inequality_is_not_isosceles_3": {
            "name": "test_violation_of_triangle_inequality_is_not_isosceles_3",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "is_isoscelesTests.test_sides_may_be_floats": {
            "name": "test_sides_may_be_floats",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "is_scaleneTests.test_true_if_no_sides_are_equal": {
            "name": "test_true_if_no_sides_are_equal",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "is_scaleneTests.test_false_if_all_sides_are_equal": {
            "name": "test_false_if_all_sides_are_equal",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "is_scaleneTests.test_false_if_two_sides_are_equal": {
            "name": "test_false_if_two_sides_are_equal",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "is_scaleneTests.test_violation_of_triangle_inequality_not_is_scalene": {
            "name": "test_violation_of_triangle_inequality_not_is_scalene",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "is_scaleneTests.test_sides_may_be_floats": {
            "name": "test_sides_may_be_floats",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/twelve-days/twelve_days.py": {
        "recite_one_verse": {
            "name": "recite_one_verse",
            "location": 7,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "verse": [
                    "float",
                    "Dict[str,Any]"
                ]
            }
        },
        "recite": {
            "name": "recite",
            "location": 29,
            "return": [
                "list"
            ],
            "arguments": {
                "start_verse": [
                    "int"
                ],
                "end_verse": [
                    "int"
                ]
            }
        }
    },
    "python_exercism-master/twelve-days/twelve_days_test.py": {
        "TwelveDaysTest.test_verse1": {
            "name": "test_verse1",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwelveDaysTest.test_verse2": {
            "name": "test_verse2",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwelveDaysTest.test_verse3": {
            "name": "test_verse3",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwelveDaysTest.test_verse4": {
            "name": "test_verse4",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwelveDaysTest.test_verse5": {
            "name": "test_verse5",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwelveDaysTest.test_verse6": {
            "name": "test_verse6",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwelveDaysTest.test_verse7": {
            "name": "test_verse7",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwelveDaysTest.test_verse8": {
            "name": "test_verse8",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwelveDaysTest.test_verse9": {
            "name": "test_verse9",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwelveDaysTest.test_verse10": {
            "name": "test_verse10",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwelveDaysTest.test_verse11": {
            "name": "test_verse11",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwelveDaysTest.test_verse12": {
            "name": "test_verse12",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwelveDaysTest.test_first_three_verses_of_the_song": {
            "name": "test_first_three_verses_of_the_song",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwelveDaysTest.test_three_verses_from_the_middle_of_the_song": {
            "name": "test_three_verses_from_the_middle_of_the_song",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwelveDaysTest.test_the_whole_song": {
            "name": "test_the_whole_song",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/two-bucket/two_bucket.py": {
        "measure": {
            "name": "measure",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {
                "bucket_one": [
                    "int",
                    "str",
                    "Callable",
                    "bool"
                ],
                "bucket_two": [
                    "int",
                    "str",
                    "Callable",
                    "bool"
                ],
                "goal": [
                    "int",
                    "str",
                    "Callable",
                    "bool"
                ],
                "start_bucket": [
                    "int",
                    "str",
                    "Callable",
                    "bool"
                ]
            }
        }
    },
    "python_exercism-master/two-bucket/two_bucket_test.py": {
        "TwoBucketTest.test_measure_using_bucket_one_of_size_3_and_bucket_two_of_size_5_start_with_bucket_one": {
            "name": "test_measure_using_bucket_one_of_size_3_and_bucket_two_of_size_5_start_with_bucket_one",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoBucketTest.test_measure_using_bucket_one_of_size_3_and_bucket_two_of_size_5_start_with_bucket_two": {
            "name": "test_measure_using_bucket_one_of_size_3_and_bucket_two_of_size_5_start_with_bucket_two",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoBucketTest.test_measure_using_bucket_one_of_size_7_and_bucket_two_of_size_11_start_with_bucket_one": {
            "name": "test_measure_using_bucket_one_of_size_7_and_bucket_two_of_size_11_start_with_bucket_one",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoBucketTest.test_measure_using_bucket_one_of_size_7_and_bucket_two_of_size_11_start_with_bucket_two": {
            "name": "test_measure_using_bucket_one_of_size_7_and_bucket_two_of_size_11_start_with_bucket_two",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoBucketTest.test_measure_one_step_using_bucket_one_of_size_1_and_bucket_two_of_size_3_start_with_bucket_two": {
            "name": "test_measure_one_step_using_bucket_one_of_size_1_and_bucket_two_of_size_3_start_with_bucket_two",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoBucketTest.test_measure_using_bucket_one_of_size_2_and_bucket_two_of_size_3_start_with_bucket_one_and_end_with_bucket_two": {
            "name": "test_measure_using_bucket_one_of_size_2_and_bucket_two_of_size_3_start_with_bucket_one_and_end_with_bucket_two",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/two-fer/two_fer.py": {
        "two_fer": {
            "name": "two_fer",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "Text",
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        }
    },
    "python_exercism-master/two-fer/two_fer_test.py": {
        "TwoFerTest.test_no_name_given": {
            "name": "test_no_name_given",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoFerTest.test_a_name_given": {
            "name": "test_a_name_given",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoFerTest.test_another_name_given": {
            "name": "test_another_name_given",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/variable-length-quantity/variable_length_quantity.py": {
        "encode": {
            "name": "encode",
            "location": 14,
            "return": [
                "list"
            ],
            "arguments": {
                "numbers": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "decode": {
            "name": "decode",
            "location": 34,
            "return": [
                "list"
            ],
            "arguments": {
                "encoded": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "python_exercism-master/variable-length-quantity/variable_length_quantity_test.py": {
        "VariableLengthQuantityTest.test_zero": {
            "name": "test_zero",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthQuantityTest.test_arbitrary_single_byte": {
            "name": "test_arbitrary_single_byte",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthQuantityTest.test_largest_single_byte": {
            "name": "test_largest_single_byte",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthQuantityTest.test_smallest_double_byte": {
            "name": "test_smallest_double_byte",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthQuantityTest.test_arbitrary_double_byte": {
            "name": "test_arbitrary_double_byte",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthQuantityTest.test_largest_double_byte": {
            "name": "test_largest_double_byte",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthQuantityTest.test_smallest_triple_byte": {
            "name": "test_smallest_triple_byte",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthQuantityTest.test_arbitrary_triple_byte": {
            "name": "test_arbitrary_triple_byte",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthQuantityTest.test_largest_triple_byte": {
            "name": "test_largest_triple_byte",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthQuantityTest.test_smallest_quadruple_byte": {
            "name": "test_smallest_quadruple_byte",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthQuantityTest.test_arbitrary_quadruple_byte": {
            "name": "test_arbitrary_quadruple_byte",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthQuantityTest.test_largest_quadruple_byte": {
            "name": "test_largest_quadruple_byte",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthQuantityTest.test_smallest_quintuple_byte": {
            "name": "test_smallest_quintuple_byte",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthQuantityTest.test_arbitrary_quintuple_byte": {
            "name": "test_arbitrary_quintuple_byte",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthQuantityTest.test_maximum_32_bit_integer_input": {
            "name": "test_maximum_32_bit_integer_input",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthQuantityTest.test_two_single_byte_values": {
            "name": "test_two_single_byte_values",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthQuantityTest.test_two_multi_byte_values": {
            "name": "test_two_multi_byte_values",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthQuantityTest.test_many_multi_byte_values": {
            "name": "test_many_multi_byte_values",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthQuantityTest.test_one_byte": {
            "name": "test_one_byte",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthQuantityTest.test_two_bytes": {
            "name": "test_two_bytes",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthQuantityTest.test_three_bytes": {
            "name": "test_three_bytes",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthQuantityTest.test_four_bytes": {
            "name": "test_four_bytes",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthQuantityTest.test_maximum_32_bit_integer": {
            "name": "test_maximum_32_bit_integer",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthQuantityTest.test_incomplete_sequence_causes_error": {
            "name": "test_incomplete_sequence_causes_error",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthQuantityTest.test_incomplete_sequence_causes_error_even_if_value_is_zero": {
            "name": "test_incomplete_sequence_causes_error_even_if_value_is_zero",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthQuantityTest.test_multiple_values": {
            "name": "test_multiple_values",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthQuantityTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 132,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/word-count/word_count.py": {
        "count_words": {
            "name": "count_words",
            "location": 6,
            "return": [
                "Counter[nothing]"
            ],
            "arguments": {
                "phrase": [
                    "str",
                    "Callable[,None]",
                    "int"
                ]
            }
        }
    },
    "python_exercism-master/word-count/word_count_test.py": {
        "WordCountTest.test_count_one_word": {
            "name": "test_count_one_word",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordCountTest.test_count_one_of_each_word": {
            "name": "test_count_one_of_each_word",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordCountTest.test_multiple_occurrences_of_a_word": {
            "name": "test_multiple_occurrences_of_a_word",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordCountTest.test_handles_cramped_lists": {
            "name": "test_handles_cramped_lists",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordCountTest.test_handles_expanded_lists": {
            "name": "test_handles_expanded_lists",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordCountTest.test_ignore_punctuation": {
            "name": "test_ignore_punctuation",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordCountTest.test_include_numbers": {
            "name": "test_include_numbers",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordCountTest.test_normalize_case": {
            "name": "test_normalize_case",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordCountTest.test_with_apostrophes": {
            "name": "test_with_apostrophes",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordCountTest.test_with_quotations": {
            "name": "test_with_quotations",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordCountTest.test_substrings_from_the_beginning": {
            "name": "test_substrings_from_the_beginning",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordCountTest.test_multiple_spaces_not_detected_as_a_word": {
            "name": "test_multiple_spaces_not_detected_as_a_word",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordCountTest.test_alternating_word_separators_not_detected_as_a_word": {
            "name": "test_alternating_word_separators_not_detected_as_a_word",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordCountTest.test_tabs": {
            "name": "test_tabs",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordCountTest.test_non_alphanumeric": {
            "name": "test_non_alphanumeric",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordCountTest.test_multiple_apostrophes_ignored": {
            "name": "test_multiple_apostrophes_ignored",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/word-search/word_search.py": {
        "Point.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "int",
                    "str",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "bool"
                ]
            }
        },
        "Point.__eq__": {
            "name": "__eq__",
            "location": 10,
            "return": [
                "bool",
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "WordSearch.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "puzzle": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "WordSearch.search": {
            "name": "search",
            "location": 18,
            "return": [
                "Optional[List[Point]]"
            ],
            "arguments": {
                "self": [],
                "word": []
            }
        }
    },
    "python_exercism-master/word-search/word_search_test.py": {
        "WordSearchTest.test_should_accept_an_initial_game_grid_and_a_target_search_word": {
            "name": "test_should_accept_an_initial_game_grid_and_a_target_search_word",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordSearchTest.test_should_locate_one_word_written_left_to_right": {
            "name": "test_should_locate_one_word_written_left_to_right",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/wordy/wordy.py": {
        "calculate": {
            "name": "calculate",
            "location": 6,
            "return": [
                "bool",
                "Optional[Union[str,Any]]",
                "Pattern",
                "str",
                "OrderedDict",
                "List",
                "Dict[str,tuple[Union[int,int]]]",
                "int"
            ],
            "arguments": {
                "question": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "python_exercism-master/wordy/wordy_test.py": {
        "WordyTest.test_just_a_number": {
            "name": "test_just_a_number",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordyTest.test_addition": {
            "name": "test_addition",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordyTest.test_more_addition": {
            "name": "test_more_addition",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordyTest.test_addition_with_negative_numbers": {
            "name": "test_addition_with_negative_numbers",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordyTest.test_large_addition": {
            "name": "test_large_addition",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordyTest.test_subtraction": {
            "name": "test_subtraction",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordyTest.test_multiplication": {
            "name": "test_multiplication",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordyTest.test_division": {
            "name": "test_division",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordyTest.test_multiple_additions": {
            "name": "test_multiple_additions",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordyTest.test_addition_and_subtraction": {
            "name": "test_addition_and_subtraction",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordyTest.test_multiple_subtraction": {
            "name": "test_multiple_subtraction",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordyTest.test_subtraction_then_addition": {
            "name": "test_subtraction_then_addition",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordyTest.test_multiple_multiplication": {
            "name": "test_multiple_multiplication",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordyTest.test_addition_and_multiplication": {
            "name": "test_addition_and_multiplication",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordyTest.test_multiple_division": {
            "name": "test_multiple_division",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordyTest.test_unknown_operation": {
            "name": "test_unknown_operation",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordyTest.test_non_math_question": {
            "name": "test_non_math_question",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordyTest.test_reject_problem_missing_an_operand": {
            "name": "test_reject_problem_missing_an_operand",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordyTest.test_reject_problem_with_no_operands_or_operators": {
            "name": "test_reject_problem_with_no_operands_or_operators",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordyTest.test_reject_two_operations_in_a_row": {
            "name": "test_reject_two_operations_in_a_row",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordyTest.test_reject_two_numbers_in_a_row": {
            "name": "test_reject_two_numbers_in_a_row",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordyTest.test_reject_postfix_notation": {
            "name": "test_reject_postfix_notation",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordyTest.test_reject_prefix_notation": {
            "name": "test_reject_prefix_notation",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordyTest.test_missing_operation": {
            "name": "test_missing_operation",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordyTest.test_missing_number": {
            "name": "test_missing_number",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordyTest.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 97,
            "return": [
                "unittest.case._AssertRaisesContext"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "float",
                    "Union[Contributor,Coverage]",
                    "None"
                ]
            }
        }
    },
    "python_exercism-master/yacht/yacht.py": {
        "YACHT": {
            "name": "YACHT",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {
                "dice": [
                    "List[int]",
                    "str",
                    "List",
                    "Dict[str,Any]",
                    "List[Union[str,str,str,str,str,str,str,str]]"
                ]
            }
        },
        "ONES": {
            "name": "ONES",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dice": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "TWOS": {
            "name": "TWOS",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dice": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "THREES": {
            "name": "THREES",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dice": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "FOURS": {
            "name": "FOURS",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dice": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "FIVES": {
            "name": "FIVES",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dice": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "SIXES": {
            "name": "SIXES",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dice": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "FULL_HOUSE": {
            "name": "FULL_HOUSE",
            "location": 36,
            "return": [
                "bool",
                "float",
                "T"
            ],
            "arguments": {
                "dice": [
                    "List",
                    "List[dict]",
                    "float",
                    "List[Dict]"
                ]
            }
        },
        "FOUR_OF_A_KIND": {
            "name": "FOUR_OF_A_KIND",
            "location": 50,
            "return": [
                "bool",
                "int",
                "str",
                "Optional[dict]",
                "Iterable",
                "Set[str]"
            ],
            "arguments": {
                "dice": [
                    "str",
                    "float"
                ]
            }
        },
        "LITTLE_STRAIGHT": {
            "name": "LITTLE_STRAIGHT",
            "location": 54,
            "return": [
                "int"
            ],
            "arguments": {
                "dice": [
                    "Dict[str,Type]",
                    "Mapping[str,str]",
                    "Dict[int,dict[str,Any]]",
                    "Dict[int,Dict[str,Any]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "BIG_STRAIGHT": {
            "name": "BIG_STRAIGHT",
            "location": 58,
            "return": [
                "int"
            ],
            "arguments": {
                "dice": [
                    "Dict[str,Type]",
                    "Mapping[str,str]",
                    "Dict[int,dict[str,Any]]",
                    "Dict[int,Dict[str,Any]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "CHOICE": {
            "name": "CHOICE",
            "location": 62,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dice": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "score": {
            "name": "score",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dice": [
                    "int",
                    "Callable",
                    "str"
                ],
                "category": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "python_exercism-master/yacht/yacht_test.py": {
        "YachtTest.test_yacht": {
            "name": "test_yacht",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_not_yacht": {
            "name": "test_not_yacht",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_ones": {
            "name": "test_ones",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_ones_out_of_order": {
            "name": "test_ones_out_of_order",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_no_ones": {
            "name": "test_no_ones",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_twos": {
            "name": "test_twos",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_fours": {
            "name": "test_fours",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_yacht_counted_as_threes": {
            "name": "test_yacht_counted_as_threes",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_yacht_of_3s_counted_as_fives": {
            "name": "test_yacht_of_3s_counted_as_fives",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_sixes": {
            "name": "test_sixes",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_full_house_two_small_three_big": {
            "name": "test_full_house_two_small_three_big",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_full_house_three_small_two_big": {
            "name": "test_full_house_three_small_two_big",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_two_pair_is_not_a_full_house": {
            "name": "test_two_pair_is_not_a_full_house",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_four_of_a_kind_is_not_a_full_house": {
            "name": "test_four_of_a_kind_is_not_a_full_house",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_yacht_is_not_a_full_house": {
            "name": "test_yacht_is_not_a_full_house",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_four_of_a_kind": {
            "name": "test_four_of_a_kind",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_yacht_can_be_scored_as_four_of_a_kind": {
            "name": "test_yacht_can_be_scored_as_four_of_a_kind",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_full_house_is_not_four_of_a_kind": {
            "name": "test_full_house_is_not_four_of_a_kind",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_little_straight": {
            "name": "test_little_straight",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_little_straight_as_big_straight": {
            "name": "test_little_straight_as_big_straight",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_four_in_order_but_not_a_little_straight": {
            "name": "test_four_in_order_but_not_a_little_straight",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_no_pairs_but_not_a_little_straight": {
            "name": "test_no_pairs_but_not_a_little_straight",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_minimum_is_1_maximum_is_5_but_not_a_little_straight": {
            "name": "test_minimum_is_1_maximum_is_5_but_not_a_little_straight",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_big_straight": {
            "name": "test_big_straight",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_big_straight_as_little_straight": {
            "name": "test_big_straight_as_little_straight",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_no_pairs_but_not_a_big_straight": {
            "name": "test_no_pairs_but_not_a_big_straight",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_choice": {
            "name": "test_choice",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_yacht_as_choice": {
            "name": "test_yacht_as_choice",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/zebra-puzzle/zebra_puzzle.py": {
        "drinks_water": {
            "name": "drinks_water",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "owns_zebra": {
            "name": "owns_zebra",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "python_exercism-master/zebra-puzzle/zebra_puzzle_test.py": {
        "ZebraPuzzleTest.test_resident_who_drinks_water": {
            "name": "test_resident_who_drinks_water",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZebraPuzzleTest.test_resident_who_owns_zebra": {
            "name": "test_resident_who_owns_zebra",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/zipper/zipper.py": {
        "Zipper.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ],
                "left": [
                    "Optional[Dict[str,Any]]",
                    "str",
                    "Dict[str,Any]",
                    "None"
                ],
                "right": [
                    "Optional[Dict[str,Any]]",
                    "str",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "Zipper.from_tree": {
            "name": "from_tree",
            "location": 25,
            "return": [
                "Zipper"
            ],
            "arguments": {
                "tree": [
                    "str",
                    "List[str]",
                    "List[Dict]",
                    "List[dict]"
                ]
            }
        },
        "Zipper.value": {
            "name": "value",
            "location": 39,
            "return": [
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Zipper.set_value": {
            "name": "set_value",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Zipper.left": {
            "name": "left",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Zipper.set_left": {
            "name": "set_left",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Zipper.right": {
            "name": "right",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Zipper.set_right": {
            "name": "set_right",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Zipper.up": {
            "name": "up",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Zipper.to_tree": {
            "name": "to_tree",
            "location": 60,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_exercism-master/zipper/zipper_test.py": {
        "ZipperTest.test_data_is_retained": {
            "name": "test_data_is_retained",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipperTest.test_left_right_and_value": {
            "name": "test_left_right_and_value",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipperTest.test_dead_end": {
            "name": "test_dead_end",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipperTest.test_tree_from_deep_focus": {
            "name": "test_tree_from_deep_focus",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipperTest.test_traversing_up_from_top": {
            "name": "test_traversing_up_from_top",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipperTest.test_left_right_and_up": {
            "name": "test_left_right_and_up",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipperTest.test_set_value": {
            "name": "test_set_value",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipperTest.test_set_value_after_traversing_up": {
            "name": "test_set_value_after_traversing_up",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipperTest.test_set_left_with_leaf": {
            "name": "test_set_left_with_leaf",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipperTest.test_set_right_with_null": {
            "name": "test_set_right_with_null",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipperTest.test_set_right_with_subtree": {
            "name": "test_set_right_with_subtree",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipperTest.test_set_value_on_deep_focus": {
            "name": "test_set_value_on_deep_focus",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipperTest.test_different_paths_to_same_zipper": {
            "name": "test_different_paths_to_same_zipper",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
{
    "python_experiments-master/using_cffi/__init__.py": {},
    "python_experiments-master/using_cffi/device_reader/abi_inline_device_reader.py": {
        "AbiInlineDeviceReader.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "library": [
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "AbiInlineDeviceReader.get_cell": {
            "name": "get_cell",
            "location": 21,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "List[List[int]]",
                    "List[int]",
                    "List[list[int]]",
                    "bool",
                    "bytes",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "row": [
                    "List[List[int]]",
                    "List[int]",
                    "List[list[int]]",
                    "bool",
                    "bytes",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "col": [
                    "List[List[int]]",
                    "List[int]",
                    "List[list[int]]",
                    "bool",
                    "bytes",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "AbiInlineDeviceReader.to_string": {
            "name": "to_string",
            "location": 42,
            "return": [
                "str",
                "Optional[Callable]",
                "Deque[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "c_char_ptr": [
                    "str",
                    "int",
                    "List[None]"
                ]
            }
        },
        "AbiInlineDeviceReader.free_resource": {
            "name": "free_resource",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "AbiInlineDeviceReader.free_resources": {
            "name": "free_resources",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbiInlineDeviceReader.num_allocated_resources": {
            "name": "num_allocated_resources",
            "location": 74,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_experiments-master/using_cffi/device_reader/cffi_device_reader.py": {
        "CffiDeviceReader.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CffiDeviceReader.Library.get_library_name": {
            "name": "get_library_name",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_experiments-master/using_cffi/device_reader/mingw_api_inline_builder.py": {},
    "python_experiments-master/using_cffi/device_reader/mingw_api_inline_reader.py": {},
    "python_experiments-master/using_cffi/device_reader/msvc_api_inline_builder.py": {},
    "python_experiments-master/using_cffi/device_reader/msvc_api_inline_reader.py": {},
    "python_experiments-master/using_cffi/device_reader/__init__.py": {},
    "python_experiments-master/using_cffi/tests/test_mingw_abi_inline_device_reader.py": {
        "MingwAbiInlineDeviceReaderTest.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MingwAbiInlineDeviceReaderTest.test_devicereader_returns_correct_values": {
            "name": "test_devicereader_returns_correct_values",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MingwAbiInlineDeviceReaderTest.test_allocated_resource_can_be_released": {
            "name": "test_allocated_resource_can_be_released",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MingwAbiInlineDeviceReaderTest.test_all_allocated_resources_can_be_released": {
            "name": "test_all_allocated_resources_can_be_released",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_experiments-master/using_cffi/tests/test_msvc_abi_inline_device_reader.py": {
        "MsvcAbiInlineDeviceReaderTest.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MsvcAbiInlineDeviceReaderTest.test_devicereader_returns_correct_values": {
            "name": "test_devicereader_returns_correct_values",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MsvcAbiInlineDeviceReaderTest.test_allocated_resource_can_be_released": {
            "name": "test_allocated_resource_can_be_released",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MsvcAbiInlineDeviceReaderTest.test_all_allocated_resources_can_be_released": {
            "name": "test_all_allocated_resources_can_be_released",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_experiments-master/using_ctypes/device_reader/device_reader.py": {
        "DeviceReader.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceReader.get_cell": {
            "name": "get_cell",
            "location": 27,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "List[List[int]]",
                    "List[list[int]]",
                    "List[int]",
                    "List[Dict[str,Any]]",
                    "bool",
                    "List[dict[str,Any]]",
                    "List[object]"
                ],
                "row": [
                    "List[List[int]]",
                    "List[list[int]]",
                    "List[int]",
                    "List[Dict[str,Any]]",
                    "bool",
                    "List[dict[str,Any]]",
                    "List[object]"
                ],
                "column": [
                    "List[List[int]]",
                    "List[list[int]]",
                    "List[int]",
                    "List[Dict[str,Any]]",
                    "bool",
                    "List[dict[str,Any]]",
                    "List[object]"
                ]
            }
        },
        "DeviceReader.free_resource": {
            "name": "free_resource",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "DeviceReader.free_resources": {
            "name": "free_resources",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceReader.num_allocated_resources": {
            "name": "num_allocated_resources",
            "location": 76,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_experiments-master/using_ctypes/device_reader/__init__.py": {},
    "python_experiments-master/using_ctypes/tests/test_device_reader.py": {
        "DeviceReaderTest.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceReaderTest.test_devicereader_returns_correct_values": {
            "name": "test_devicereader_returns_correct_values",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceReaderTest.test_allocated_resource_can_be_released": {
            "name": "test_allocated_resource_can_be_released",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceReaderTest.test_all_allocated_resources_can_be_released": {
            "name": "test_all_allocated_resources_can_be_released",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
{
    "python_rabbitmq_example-master/consumer/app.py": {
        "callback": {
            "name": "callback",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ch": [
                    "typing.Callable[, ]",
                    "Callable",
                    "str",
                    "typing.Hashable",
                    "Hashable",
                    "pika.channel.Channel"
                ],
                "method": [
                    "typing.Callable[, ]",
                    "Callable",
                    "str",
                    "typing.Hashable",
                    "Hashable",
                    "pika.channel.Channel"
                ],
                "properties": [
                    "bool",
                    "pika.spec.Basic.Deliver",
                    "pika.BasicProperties",
                    "pika.adapters.blocking_connection.BlockingChannel"
                ],
                "body": [
                    "str",
                    "typing.Iterable[str]",
                    "None",
                    "Union[str, Iterable[str]]",
                    "Optional[str]",
                    "Optional[Dict]",
                    "Dict[str, Any]"
                ]
            }
        },
        "persist": {
            "name": "persist",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "bool",
                    "Mapping[str, Any]"
                ]
            }
        },
        "create_table": {
            "name": "create_table",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "python_rabbitmq_example-master/publisher/app.py": {
        "send_person": {
            "name": "send_person",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "create_person_json": {
            "name": "create_person_json",
            "location": 22,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "bool",
                "type"
            ],
            "arguments": {}
        },
        "publish": {
            "name": "publish",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        }
    }
}
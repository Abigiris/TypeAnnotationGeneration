{
    "python_typing-master/monkeytype_01/module.py": {
        "add": {
            "name": "add",
            "location": 1,
            "return": [
                "float",
                "int",
                "T",
                "Tuple[float,float]",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "python_typing-master/monkeytype_01/myscript.py": {},
    "python_typing-master/monkeytype_02/demo/inbox.py": {
        "CommentsAggregator.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "models.RepoInterface"
                ]
            }
        },
        "CommentsAggregator.add": {
            "name": "add",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str,Any]",
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "CommentsAggregator.aggregate": {
            "name": "aggregate",
            "location": 39,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "LikesAggregator.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "models.RepoInterface"
                ]
            }
        },
        "LikesAggregator.add": {
            "name": "add",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict",
                    "Dict[str,Any]",
                    "List[str]"
                ]
            }
        },
        "LikesAggregator.aggregate": {
            "name": "aggregate",
            "location": 64,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "LikesAggregator._describe": {
            "name": "_describe",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "events": [
                    "str",
                    "Optional[str]",
                    "List[dict]",
                    "bytes",
                    "Optional[bytes]"
                ],
                "feedentry": [
                    "int",
                    "str"
                ],
                "users_by_id": [
                    "str",
                    "Optional[str]",
                    "List[dict]",
                    "Optional[bytes]",
                    "None",
                    "bytes"
                ]
            }
        },
        "FollowersAggregator.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "models.RepoInterface"
                ]
            }
        },
        "FollowersAggregator.add": {
            "name": "add",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str,Any]",
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "FollowersAggregator.aggregate": {
            "name": "aggregate",
            "location": 107,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Inbox.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Dict",
                    "abilian.core.models.subjects.User",
                    "zerver.models.UserProfile",
                    "server.models.User"
                ],
                "repo": [
                    "Dict",
                    "abilian.core.models.subjects.User",
                    "zerver.models.UserProfile",
                    "server.models.User"
                ]
            }
        },
        "Inbox.aggregate": {
            "name": "aggregate",
            "location": 127,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Inbox.summarize": {
            "name": "summarize",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Inbox._pluralize": {
            "name": "_pluralize",
            "location": 168,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "python_typing-master/monkeytype_02/demo/models.py": {
        "FeedEntry.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "user_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "caption": [
                    "int",
                    "str",
                    "List[str]",
                    "List[int]",
                    "float"
                ],
                "published": [
                    "int",
                    "str",
                    "List[str]",
                    "List[int]",
                    "float"
                ]
            }
        },
        "User.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "List[str]"
                ],
                "following": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "InboxEvent.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "user_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "published": [
                    "int",
                    "str",
                    "List[str]",
                    "List[int]",
                    "float"
                ]
            }
        },
        "CommentedEvent.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "user_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "published": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "feedentry_id": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "commenter_id": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "comment_text": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "LikedEvent.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "user_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "published": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "feedentry_id": [
                    "str",
                    "int",
                    "None",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "liker_id": [
                    "str",
                    "int",
                    "None",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "FollowedEvent.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "user_id": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "published": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "follower_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "Set[int]",
                    "Type",
                    "Optional[Set[int]]",
                    "Type[Dict[str,str]]"
                ]
            }
        },
        "RepoInterface.get_feed_entries_by_ids": {
            "name": "get_feed_entries_by_ids",
            "location": 103,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "int"
                ]
            }
        },
        "RepoInterface.get_feed_entries_for_user_id": {
            "name": "get_feed_entries_for_user_id",
            "location": 108,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "RepoInterface.get_users_by_ids": {
            "name": "get_users_by_ids",
            "location": 111,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "RepoInterface.get_inbox_events_for_user_id": {
            "name": "get_inbox_events_for_user_id",
            "location": 114,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str"
                ]
            }
        },
        "AggregatorInterface.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "str"
                ]
            }
        },
        "AggregatorInterface.add": {
            "name": "add",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "AggregatorInterface.aggregate": {
            "name": "aggregate",
            "location": 136,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_typing-master/monkeytype_02/demo/test_inbox.py": {
        "make_user": {
            "name": "make_user",
            "location": 60,
            "return": [
                "models.User"
            ],
            "arguments": {}
        },
        "now": {
            "name": "now",
            "location": 68,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {}
        },
        "make_feedentry": {
            "name": "make_feedentry",
            "location": 77,
            "return": [
                "models.FeedEntry"
            ],
            "arguments": {}
        },
        "make_commented": {
            "name": "make_commented",
            "location": 89,
            "return": [
                "models.CommentedEvent"
            ],
            "arguments": {}
        },
        "make_liked": {
            "name": "make_liked",
            "location": 101,
            "return": [
                "models.LikedEvent"
            ],
            "arguments": {}
        },
        "make_followed": {
            "name": "make_followed",
            "location": 109,
            "return": [
                "models.FollowedEvent"
            ],
            "arguments": {}
        },
        "test_empty_inbox": {
            "name": "test_empty_inbox",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_commented": {
            "name": "test_commented",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_followed": {
            "name": "test_followed",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_one_like": {
            "name": "test_one_like",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_two_likes": {
            "name": "test_two_likes",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_three_likes": {
            "name": "test_three_likes",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_everything": {
            "name": "test_everything",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_aggregator_interface": {
            "name": "test_aggregator_interface",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FakeRepo.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeRepo.get_feed_entries_by_ids": {
            "name": "get_feed_entries_by_ids",
            "location": 20,
            "return": [
                "Dict[(Any, None)]"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "int"
                ]
            }
        },
        "FakeRepo.get_feed_entries_for_user_id": {
            "name": "get_feed_entries_for_user_id",
            "location": 30,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "FakeRepo.get_users_by_ids": {
            "name": "get_users_by_ids",
            "location": 39,
            "return": [
                "Dict[(Any, None)]"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "Optional[str]",
                    "int",
                    "datetime.date",
                    "tracim.models.data.Workspace"
                ]
            }
        },
        "FakeRepo.get_inbox_events_for_user_id": {
            "name": "get_inbox_events_for_user_id",
            "location": 47,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        }
    },
    "python_typing-master/pytest_test/test_one.py": {
        "func": {
            "name": "func",
            "location": 5,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "test_answer": {
            "name": "test_answer",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
{
    "pytomato-master/__main__.py": {},
    "pytomato-master/pytomato/argument_parser.py": {
        "setupParser": {
            "name": "setupParser",
            "location": 4,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "pytomato-master/pytomato/conf.py": {},
    "pytomato-master/pytomato/entries.py": {
        "Entries.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "run_type": [
                    "Type",
                    "bool",
                    "typing.Type",
                    "Callable[[str], str]",
                    "typing.Callable[str, str]",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "run_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "project_name": [
                    "str"
                ]
            }
        },
        "Entries.initialise": {
            "name": "initialise",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entries.listEntries": {
            "name": "listEntries",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entries.pretty_format": {
            "name": "pretty_format",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "str",
                    "list[str]",
                    "Union[List[str], str]",
                    "tuple[int]",
                    "Tuple[int]",
                    "list[]",
                    "TextIO",
                    "list"
                ]
            }
        },
        "Entries.clean": {
            "name": "clean",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entries.add": {
            "name": "add",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start_datetime": [
                    "int",
                    "None",
                    "float",
                    "datetime.date",
                    "Optional[int]",
                    "datetime.datetime"
                ],
                "end_datetime": [
                    "int",
                    "None",
                    "float",
                    "datetime.date",
                    "Optional[int]",
                    "datetime.datetime"
                ],
                "target_time": [
                    "int",
                    "None",
                    "float",
                    "datetime.date",
                    "Optional[int]",
                    "datetime.datetime"
                ]
            }
        },
        "Entries.ensure_directory_exists": {
            "name": "ensure_directory_exists",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entries.save": {
            "name": "save",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "force_upload": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Entries.delete_entry": {
            "name": "delete_entry",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "Entries.backup_entries": {
            "name": "backup_entries",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "datetime.datetime",
                    "int",
                    "tuple[typing.Union[str,str]]",
                    "Optional[str]",
                    "Union[int, str, datetime.datetime]",
                    "Optional[datetime.date]",
                    "Tuple[str, str]"
                ],
                "force_upload": [
                    "str",
                    "None",
                    "datetime.datetime",
                    "int",
                    "tuple[typing.Union[str,str]]",
                    "Optional[str]",
                    "Union[int, str, datetime.datetime]",
                    "Optional[datetime.date]",
                    "Tuple[str, str]"
                ]
            }
        }
    },
    "pytomato-master/pytomato/git_handler.py": {
        "is_git_repository": {
            "name": "is_git_repository",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_prep_args": {
            "name": "_prep_args",
            "location": 13,
            "return": [
                "list"
            ],
            "arguments": {
                "git_exec": [
                    "Callable",
                    "typing.Callable[, ]",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "args": [],
                "not_split_args": [
                    "str",
                    "int",
                    "Optional[Union[int, str]]",
                    "List[str]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "_run": {
            "name": "_run",
            "location": 24,
            "return": [
                "subprocess.CompletedProcess"
            ],
            "arguments": {
                "git_exec": [
                    "List[str]",
                    "list[str]",
                    "Dict[str, float]",
                    "dict[str, float]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Union[List[str], str]",
                    "str"
                ],
                "args": [
                    "Union[(str, List[str])]"
                ],
                "not_split_args": [
                    "List[str]",
                    "None",
                    "Dict[str, float]",
                    "list[str]",
                    "Callable",
                    "dict[str, float]",
                    "Union[List[str], str]",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "_run_detached": {
            "name": "_run_detached",
            "location": 29,
            "return": [
                "subprocess.CompletedProcess"
            ],
            "arguments": {
                "git_exec": [
                    "List[str]",
                    "list[str]",
                    "Dict[str, float]",
                    "dict[str, float]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Union[List[str], str]",
                    "str"
                ],
                "args": [
                    "Union[(str, List[str])]"
                ],
                "not_split_args": [
                    "List[str]",
                    "None",
                    "Dict[str, float]",
                    "list[str]",
                    "Callable",
                    "dict[str, float]",
                    "Union[List[str], str]",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "GitHandler.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "git": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "None",
                    "dict",
                    "dict[, ]"
                ],
                "repo_location": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "repo_remote_uri": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "GitHandler.init": {
            "name": "init",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHandler.upload": {
            "name": "upload",
            "location": 59,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "force_upload": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "GitHandler.is_it_time_to_push": {
            "name": "is_it_time_to_push",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "force_upload": [
                    "bool",
                    "str",
                    "bytes",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Git.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "git": [
                    "typing.Text",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Git._handle_error": {
            "name": "_handle_error",
            "location": 113,
            "return": [
                "str",
                "bool",
                "List[Dict[str, str]]",
                "list"
            ],
            "arguments": {
                "self": [],
                "res": [
                    "int",
                    "float",
                    "str",
                    "typing.Callable[float, bool]",
                    "Callable[[float], bool]",
                    "bool"
                ]
            }
        },
        "Git.init": {
            "name": "init",
            "location": 121,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Git.add": {
            "name": "add",
            "location": 127,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Git.commit": {
            "name": "commit",
            "location": 133,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Git.set_remote": {
            "name": "set_remote",
            "location": 139,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "remote_uri": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Git.clone": {
            "name": "clone",
            "location": 145,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "remote_uri": [
                    "int",
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Git.push": {
            "name": "push",
            "location": 151,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Git.status": {
            "name": "status",
            "location": 157,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Git.branch_track_master": {
            "name": "branch_track_master",
            "location": 163,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Git.pull": {
            "name": "pull",
            "location": 169,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pytomato-master/pytomato/guitimer.py": {
        "GUITimer.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parameters": [
                    "int"
                ]
            }
        },
        "GUITimer.closeEvent": {
            "name": "closeEvent",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GUITimer.notifyUser": {
            "name": "notifyUser",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GUITimer.updateVisuals": {
            "name": "updateVisuals",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elapsedTime": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "targetTime": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "targteTimeString": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "pytomato-master/pytomato/main.py": {
        "_set_up_break_or_tomato": {
            "name": "_set_up_break_or_tomato",
            "location": 14,
            "return": [
                "pytomato.run_parameters.RunParameters"
            ],
            "arguments": {
                "parameters": [
                    "pytomato.run_parameters.RunParameters"
                ],
                "args": [
                    "argparse.ArgumentParser"
                ],
                "short_duration": [
                    "int"
                ],
                "long_duration": [
                    "int"
                ],
                "default_name": [
                    "str"
                ],
                "run_type": [
                    "str"
                ]
            }
        },
        "set_up_run_parameters": {
            "name": "set_up_run_parameters",
            "location": 43,
            "return": [
                "pytomato.run_parameters.RunParameters"
            ],
            "arguments": {
                "parameters": [
                    "pytomato.run_parameters.RunParameters"
                ],
                "args": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "timer": [
                    "bool"
                ],
                "parameters": [
                    "Optional[int]",
                    "int",
                    "Optional[bytes]",
                    "None",
                    "Optional[Callable]",
                    "bytes",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "pytomato-master/pytomato/run_parameters.py": {},
    "pytomato-master/pytomato/soundboard.py": {
        "SoundBoard.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mute": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "SoundBoard.play_notification_sound": {
            "name": "play_notification_sound",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoundBoard.play_notification_sound.play_notification_sound": {
            "name": "play_notification_sound",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pytomato-master/pytomato/timer.py": {
        "Timer.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parameters": [
                    "pytomato.run_parameters.RunParameters"
                ]
            }
        },
        "Timer.init": {
            "name": "init",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "run_type": [
                    "bool",
                    "str",
                    "int"
                ],
                "target_time": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Timer.list_entries": {
            "name": "list_entries",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.clean": {
            "name": "clean",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.delete": {
            "name": "delete",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "str",
                    "bool",
                    "typing.Iterable[int]",
                    "Iterable[int]",
                    "T"
                ]
            }
        },
        "Timer.force_upload": {
            "name": "force_upload",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.process_entry": {
            "name": "process_entry",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start_datetime": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Optional[datetime.datetime]",
                    "list[float]",
                    "List[float]",
                    "datetime.date"
                ],
                "end_datetime": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Optional[datetime.datetime]",
                    "list[float]",
                    "List[float]",
                    "datetime.date"
                ],
                "elapsed_time": [
                    "float",
                    "int",
                    "str",
                    "list[int]",
                    "List[int]",
                    "datetime.datetime",
                    "datetime.timedelta"
                ],
                "target_time": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Optional[datetime.datetime]",
                    "list[float]",
                    "List[float]",
                    "datetime.date"
                ]
            }
        },
        "Timer.closeEvent": {
            "name": "closeEvent",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.notify": {
            "name": "notify",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.create_messages_for_run": {
            "name": "create_messages_for_run",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "run_type": [
                    "str",
                    "Union[str, List[str]]",
                    "list[str]"
                ],
                "targetTime": [
                    "bool",
                    "str",
                    "bytes",
                    "Optional[str]",
                    "IO[str]"
                ]
            }
        },
        "Timer.notifyUser": {
            "name": "notifyUser",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.updateVisuals": {
            "name": "updateVisuals",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "elapsedTime": [
                    "int",
                    "str",
                    "datetime.timedelta",
                    "datetime.datetime",
                    "List[bytes]",
                    "datetime.timezone",
                    "bool"
                ],
                "targetTime": [
                    "int",
                    "str",
                    "datetime.timedelta",
                    "datetime.datetime",
                    "List[bytes]",
                    "datetime.timezone",
                    "bool"
                ],
                "targetTimeString": [
                    "str",
                    "int",
                    "list[bytes]",
                    "datetime.timedelta",
                    "datetime.datetime",
                    "List[bytes]",
                    "datetime.timezone",
                    "bool"
                ]
            }
        }
    },
    "pytomato-master/pytomato/utility.py": {
        "formatToHHMM": {
            "name": "formatToHHMM",
            "location": 2,
            "return": [
                "str"
            ],
            "arguments": {
                "timeInSeconds": [
                    "Union[str, int]",
                    "Optional[\"UtilityFunction\"]"
                ]
            }
        }
    },
    "pytomato-master/pytomato/__init__.py": {},
    "pytomato-master/pytomato/tests/entries_test.py": {
        "EntriesTest.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntriesTest.tearDown": {
            "name": "tearDown",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntriesTest.test_add": {
            "name": "test_add",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntriesTest.test_add_many": {
            "name": "test_add_many",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntriesTest.test_save_load": {
            "name": "test_save_load",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pytomato-master/pytomato/tests/guitimer_test.py": {
        "GUITimerTest.test_icon_found": {
            "name": "test_icon_found",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GUITimerTest.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GUITimerTest.test_close_event_hides_icon": {
            "name": "test_close_event_hides_icon",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GUITimerTest.test_notify_user": {
            "name": "test_notify_user",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GUITimerTest.test_update_visuals": {
            "name": "test_update_visuals",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pytomato-master/pytomato/tests/timer_test.py": {
        "TimerTest.test_clean": {
            "name": "test_clean",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimerTest.test_listAndExit": {
            "name": "test_listAndExit",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimerTest.test_delete": {
            "name": "test_delete",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimerTest.test_run_exit_on_keyboard_interrupt": {
            "name": "test_run_exit_on_keyboard_interrupt",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimerTest.test_run_number_of_calls_to_update_visuals": {
            "name": "test_run_number_of_calls_to_update_visuals",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimerTest.test_run_exit_on_system_exit": {
            "name": "test_run_exit_on_system_exit",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimerTest.test_run_exit_on_keyboard_interrupt.fake_notify": {
            "name": "fake_notify",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TimerTest.test_run_number_of_calls_to_update_visuals.fake_notify": {
            "name": "fake_notify",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TimerTest.test_run_exit_on_system_exit.fake_notify": {
            "name": "fake_notify",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "pytomato-master/pytomato/tests/__init__.py": {}
}
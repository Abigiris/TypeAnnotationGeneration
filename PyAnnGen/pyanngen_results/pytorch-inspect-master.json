{
    "pytorch-inspect-master/setup.py": {
        "read": {
            "name": "read",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "f": [
                    "bytes",
                    "Iterator[T]",
                    "memoryview",
                    "IO",
                    "Tuple[bytes, bytes]"
                ]
            }
        },
        "read_version": {
            "name": "read_version",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "pytorch-inspect-master/examples/simple.py": {
        "main": {
            "name": "main",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SimpleNet.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNet.forward": {
            "name": "forward",
            "location": 16,
            "return": [
                "str",
                "int",
                "float",
                "tuple[typing.Union[int,int,int,int,int]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "SimpleNet.num_flat_features": {
            "name": "num_flat_features",
            "location": 25,
            "return": [
                "int",
                "Optional[Dict[str, int]]",
                "List[List[int]]",
                "bool",
                "torch.nn.modules.linear.Linear",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "int",
                    "Mapping[str, float]"
                ]
            }
        }
    },
    "pytorch-inspect-master/tests/conftest.py": {
        "simple_model": {
            "name": "simple_model",
            "location": 152,
            "return": [
                "SimpleNet",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {}
        },
        "mobilenet": {
            "name": "mobilenet",
            "location": 158,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "multi_input_net": {
            "name": "multi_input_net",
            "location": 164,
            "return": [
                "MultiInputNet",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "lstm_tagger": {
            "name": "lstm_tagger",
            "location": 170,
            "return": [
                "LSTMTagger",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "netgenerator": {
            "name": "netgenerator",
            "location": 176,
            "return": [
                "Generator",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "netbatchnorm": {
            "name": "netbatchnorm",
            "location": 182,
            "return": [
                "SimpleBatchNormModel",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "simpleconv": {
            "name": "simpleconv",
            "location": 188,
            "return": [
                "SimpleConv",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "autoencoder": {
            "name": "autoencoder",
            "location": 194,
            "return": [
                "Autoencoder",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "rnn": {
            "name": "rnn",
            "location": 221,
            "return": [
                "RNNModel",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "multi_input_net2": {
            "name": "multi_input_net2",
            "location": 253,
            "return": [
                "MultiInputNet2",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "lstm_model": {
            "name": "lstm_model",
            "location": 281,
            "return": [
                "LSTMModel"
            ],
            "arguments": {}
        },
        "SimpleNet.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNet.forward": {
            "name": "forward",
            "location": 17,
            "return": [
                "str",
                "int",
                "float",
                "tuple[typing.Union[int,int,int,int,int]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "SimpleNet.num_flat_features": {
            "name": "num_flat_features",
            "location": 26,
            "return": [
                "int",
                "Optional[Dict[str, int]]",
                "List[List[int]]",
                "bool",
                "torch.nn.modules.linear.Linear",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "int",
                    "Mapping[str, float]"
                ]
            }
        },
        "MultiInputNet.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiInputNet.forward": {
            "name": "forward",
            "location": 41,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ],
                "y": [
                    "int",
                    "str",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "SimpleBatchNormModel.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleBatchNormModel.forward": {
            "name": "forward",
            "location": 60,
            "return": [
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Generator.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ngpu": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Generator.forward": {
            "name": "forward",
            "location": 89,
            "return": [
                "float",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "int",
                    "bool"
                ]
            }
        },
        "LSTMTagger.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embedding_dim": [
                    "int",
                    "float",
                    "dict[str, tuple[typing.Union[str,int,int]]]",
                    "Dict[str, Tuple[str, int, int]]",
                    "bool"
                ],
                "hidden_dim": [
                    "float",
                    "int",
                    "tuple[]",
                    "bool",
                    "tuple"
                ],
                "vocab_size": [
                    "int",
                    "float",
                    "dict[str, tuple[typing.Union[str,int,int]]]",
                    "Dict[str, Tuple[str, int, int]]",
                    "bool"
                ],
                "tagset_size": [
                    "bool",
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "LSTMTagger.forward": {
            "name": "forward",
            "location": 107,
            "return": [
                "List[str]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "str",
                    "Sequence[int]",
                    "T",
                    "List[int]"
                ]
            }
        },
        "SimpleConv.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleConv.forward": {
            "name": "forward",
            "location": 122,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ],
                "y": [
                    "int",
                    "str",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "Autoencoder.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Autoencoder.forward": {
            "name": "forward",
            "location": 145,
            "return": [
                "str",
                "int",
                "list[int]",
                "dict[int, dict[str, int]]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "torch.Tensor"
                ]
            }
        },
        "RNNModel.__init__": {
            "name": "__init__",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "list[int]",
                    "bool",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "List[int]",
                    "list[]",
                    "List[Tuple[str, Any]]",
                    "list[tuple[typing.Union[typing.Any,float]]]",
                    "list",
                    "List[Tuple[Any, float]]"
                ],
                "output_size": [
                    "str",
                    "list[tuple[typing.Union[typing.Any,float]]]",
                    "int",
                    "List[Tuple[Any, float]]",
                    "list[str]",
                    "List[str]",
                    "list[]",
                    "list",
                    "bool"
                ],
                "hidden_dim": [
                    "List[int]",
                    "list[int]",
                    "list",
                    "list[]",
                    "Dict[Any, float]",
                    "dict[typing.Any, float]",
                    "List[float]",
                    "list[float]"
                ],
                "n_layers": [
                    "List[int]",
                    "int",
                    "list[int]",
                    "Set[str]",
                    "set[str]",
                    "Dict[Any, float]",
                    "dict[typing.Any, float]"
                ]
            }
        },
        "RNNModel.forward": {
            "name": "forward",
            "location": 207,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "RNNModel.init_hidden": {
            "name": "init_hidden",
            "location": 215,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int",
                    "float",
                    "slice"
                ]
            }
        },
        "MultiInputNet2.__init__": {
            "name": "__init__",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiInputNet2.forward": {
            "name": "forward",
            "location": 238,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "torch.Tensor"
                ],
                "unrefined_bounding_box": [
                    "str",
                    "float",
                    "list[str]",
                    "torch.Tensor",
                    "List[str]"
                ]
            }
        },
        "LSTMModel.__init__": {
            "name": "__init__",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [
                    "int",
                    "str",
                    "bool"
                ],
                "hidden_dim": [
                    "bool",
                    "float"
                ],
                "layer_dim": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "output_dim": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "LSTMModel.forward": {
            "name": "forward",
            "location": 268,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "torch.Tensor"
                ]
            }
        }
    },
    "pytorch-inspect-master/tests/test_basic.py": {
        "test_inspect": {
            "name": "test_inspect",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_model": [
                    "float"
                ]
            }
        },
        "test_inspect_multi_input": {
            "name": "test_inspect_multi_input",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "multi_input_net": [
                    "int",
                    "str"
                ]
            }
        },
        "test_summary": {
            "name": "test_summary",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_model": [
                    "str"
                ]
            }
        },
        "test_inspect_net_with_batch_norm": {
            "name": "test_inspect_net_with_batch_norm",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "netbatchnorm": [
                    "int"
                ]
            }
        },
        "test_simpleconv": {
            "name": "test_simpleconv",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "simpleconv": [
                    "int"
                ]
            }
        },
        "test_autoencoder": {
            "name": "test_autoencoder",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "autoencoder": [
                    "int"
                ]
            }
        },
        "test_rnn": {
            "name": "test_rnn",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "rnn": [
                    "float"
                ]
            }
        },
        "test_multi_input_net2": {
            "name": "test_multi_input_net2",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "multi_input_net2": []
            }
        },
        "test_lstm_model": {
            "name": "test_lstm_model",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "lstm_model": [
                    "float",
                    "str"
                ]
            }
        },
        "test_lstm_tagger_with_embedding": {
            "name": "test_lstm_tagger_with_embedding",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "lstm_tagger": [
                    "float"
                ]
            }
        }
    },
    "pytorch-inspect-master/torch_inspect/inspect.py": {
        "make_network_info": {
            "name": "make_network_info",
            "location": 39,
            "return": [
                "NetworkInfo"
            ],
            "arguments": {
                "info_list": [
                    "List[LayerInfo]"
                ],
                "input_size": [
                    "Union[(List[Tuple[(int, ...)]], Tuple[(int, ...)])]"
                ],
                "batch_size": [
                    "int"
                ]
            }
        },
        "should_attach_hook": {
            "name": "should_attach_hook",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "model": [
                    "str",
                    "Iterable[Any]",
                    "typing.Iterable[typing.Any]"
                ],
                "module": [
                    "str",
                    "Iterable[Any]",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "_has_running_mean": {
            "name": "_has_running_mean",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "module": [
                    "str"
                ]
            }
        },
        "_has_running_var": {
            "name": "_has_running_var",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "module": [
                    "str"
                ]
            }
        },
        "infer_shape": {
            "name": "infer_shape",
            "location": 154,
            "return": [
                "List[Union[(int, List[int])]]"
            ],
            "arguments": {
                "output": [
                    "List[str]",
                    "list"
                ]
            }
        },
        "inspect": {
            "name": "inspect",
            "location": 163,
            "return": [
                "List[LayerInfo]"
            ],
            "arguments": {
                "model": [
                    "int",
                    "float",
                    "Optional[float]",
                    "None",
                    "bool"
                ],
                "input_size": [
                    "Union[(List[Tuple[(int, ...)]], Tuple[(int, ...)])]"
                ],
                "input_dtype": [
                    "type"
                ],
                "input_initializer": [
                    "Callable"
                ],
                "batch_size": [
                    "int"
                ]
            }
        },
        "summary": {
            "name": "summary",
            "location": 203,
            "return": [
                "NetworkInfo"
            ],
            "arguments": {
                "model": [
                    "int",
                    "Tuple[int]",
                    "tuple[int]",
                    "Optional[int]",
                    "None"
                ],
                "input_size": [
                    "Union[(List[Tuple[(int, ...)]], Tuple[(int, ...)])]"
                ],
                "input_dtype": [
                    "type"
                ],
                "input_initializer": [
                    "Callable"
                ],
                "batch_size": [
                    "int"
                ],
                "file": [
                    "IO[str]"
                ],
                "flush": [
                    "bool"
                ]
            }
        },
        "_ModuleHook.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int"
                ]
            }
        },
        "_ModuleHook.hook": {
            "name": "hook",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "bytes",
                    "TextIO",
                    "Optional[str]"
                ],
                "input": [
                    "list[int]",
                    "str",
                    "int",
                    "List[int]",
                    "bool",
                    "Sequence[str]",
                    "numpy.ndarray",
                    "dict"
                ],
                "output": [
                    "int",
                    "typing.IO",
                    "bool",
                    "typing.Callable[, ]",
                    "IO[str]",
                    "tuple[typing.Union[int,int]]",
                    "Callable",
                    "Tuple[int, int]"
                ]
            }
        },
        "inspect.register_hook": {
            "name": "register_hook",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "module": [
                    "Sequence[str]"
                ]
            }
        }
    },
    "pytorch-inspect-master/torch_inspect/__init__.py": {}
}
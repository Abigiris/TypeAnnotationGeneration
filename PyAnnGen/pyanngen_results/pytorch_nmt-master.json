{
    "pytorch_nmt-master/config_parser.py": {
        "ConfigParser.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "dict"
                ],
                "timestamp": [
                    "bool"
                ]
            }
        },
        "ConfigParser.__str__": {
            "name": "__str__",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigParser.__getitem__": {
            "name": "__getitem__",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ConfigParser.initialize": {
            "name": "initialize",
            "location": 85,
            "return": [
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "module": [
                    "str"
                ]
            }
        },
        "ConfigParser.parse": {
            "name": "parse",
            "location": 94,
            "return": [
                "ConfigParser"
            ],
            "arguments": {
                "cls": [
                    "Type[_TConfigParser]"
                ],
                "args": [
                    "Union[(argparse.Namespace, dict)]"
                ],
                "timestamp": [
                    "bool"
                ]
            }
        },
        "ConfigParser.add": {
            "name": "add",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Union[Any, str]]",
                    "typing.Any"
                ],
                "update": [
                    "bool"
                ]
            }
        },
        "ConfigParser._update": {
            "name": "_update",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "dict"
                ]
            }
        },
        "ConfigParser.del_hparam": {
            "name": "del_hparam",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "ConfigParser.get": {
            "name": "get",
            "location": 140,
            "return": [
                "str",
                "None",
                "dict",
                "pathlib.Path",
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "default": [
                    "str",
                    "None",
                    "Optional[Any]",
                    "typing.Any"
                ]
            }
        },
        "ConfigParser.load": {
            "name": "load",
            "location": 150,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "bool",
                    "BinaryIO",
                    "typing.BinaryIO",
                    "dict",
                    "dict[, ]"
                ],
                "config_path": [
                    "Union[(str, pathlib.Path)]"
                ]
            }
        },
        "ConfigParser.save": {
            "name": "save",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "save_path": [
                    "Union[(str, pathlib.Path)]"
                ]
            }
        },
        "ConfigParser.get_logger": {
            "name": "get_logger",
            "location": 197,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "verbosity": [
                    "int"
                ]
            }
        },
        "ConfigParser.config": {
            "name": "config",
            "location": 212,
            "return": [
                "str",
                "Optional[dict]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigParser.save_dir": {
            "name": "save_dir",
            "location": 217,
            "return": [
                "pathlib.Path",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigParser.log_dir": {
            "name": "log_dir",
            "location": 222,
            "return": [
                "str",
                "pathlib.Path",
                "bool",
                "Dict[Tuple, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigParser.test_dir": {
            "name": "test_dir",
            "location": 227,
            "return": [
                "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pytorch_nmt-master/test.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "config_parser.ConfigParser"
                ],
                "resume": [
                    "str"
                ]
            }
        }
    },
    "pytorch_nmt-master/train.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "config_parser.ConfigParser"
                ]
            }
        }
    },
    "pytorch_nmt-master/base/base_data_loader.py": {
        "BaseDataLoader.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "float",
                    "str"
                ],
                "batch_size": [
                    "int"
                ],
                "shuffle": [
                    "bool"
                ],
                "validation_split": [
                    "float"
                ],
                "num_workers": [
                    "int"
                ],
                "collate_fn": [
                    "Callable"
                ]
            }
        },
        "BaseDataLoader._split_sampler": {
            "name": "_split_sampler",
            "location": 39,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "split": [
                    "float"
                ]
            }
        },
        "BaseDataLoader.split_validation": {
            "name": "split_validation",
            "location": 69,
            "return": [
                "bool",
                "None",
                "str",
                "DataLoader"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pytorch_nmt-master/base/base_model.py": {
        "BaseModel.forward": {
            "name": "forward",
            "location": 11,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.__str__": {
            "name": "__str__",
            "location": 19,
            "return": [
                "Optional[int]",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pytorch_nmt-master/base/base_trainer.py": {
        "BaseTrainer.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "loss": [
                    "str",
                    "bool",
                    "dict",
                    "bytes",
                    "dict[, ]"
                ],
                "metrics": [
                    "str",
                    "bool",
                    "dict",
                    "bytes",
                    "dict[, ]"
                ],
                "optimizer": [
                    "str",
                    "bool",
                    "dict",
                    "bytes",
                    "dict[, ]"
                ],
                "config": [
                    "str"
                ]
            }
        },
        "BaseTrainer._train_epoch": {
            "name": "_train_epoch",
            "location": 51,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "epoch": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "BaseTrainer.train": {
            "name": "train",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTrainer._prepare_device": {
            "name": "_prepare_device",
            "location": 111,
            "return": [
                "Tuple[(Any, List[int])]"
            ],
            "arguments": {
                "self": [],
                "n_gpu_use": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "BaseTrainer._save_checkpoint": {
            "name": "_save_checkpoint",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "epoch": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "save_best": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[Any]",
                    "Optional[int]",
                    "T",
                    "Container[T]"
                ]
            }
        },
        "BaseTrainer._resume_checkpoint": {
            "name": "_resume_checkpoint",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resume_path": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "pytorch_nmt-master/base/__init__.py": {},
    "pytorch_nmt-master/data_loader/collate_functions.py": {
        "seq2seq_collate_fn": {
            "name": "seq2seq_collate_fn",
            "location": 6,
            "return": [
                "tuple"
            ],
            "arguments": {
                "src_tgt_pair": [
                    "List[Tuple[(Any, Any)]]"
                ]
            }
        },
        "seq2seq_collate_fn.merge": {
            "name": "merge",
            "location": 13,
            "return": [
                "tuple[list[int]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sentences": [
                    "int",
                    "List['cirq.Qid']",
                    "str"
                ]
            }
        }
    },
    "pytorch_nmt-master/data_loader/data_loaders.py": {
        "Seq2SeqDataset.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src_list": [
                    "List[str]"
                ],
                "src_text_preprocessor": [
                    "preprocessor.text_preprocessor.TextPreprocessor"
                ],
                "tgt_list": [
                    "List[str]"
                ],
                "tgt_text_preprocessor": [
                    "preprocessor.text_preprocessor.TextPreprocessor"
                ]
            }
        },
        "Seq2SeqDataset.__len__": {
            "name": "__len__",
            "location": 44,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Seq2SeqDataset.__getitem__": {
            "name": "__getitem__",
            "location": 47,
            "return": [
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int"
                ]
            }
        },
        "Seq2SeqDataset.create": {
            "name": "create",
            "location": 59,
            "return": [
                "Seq2SeqDataset"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSeq2SeqDataset]"
                ],
                "source_path": [
                    "Union[(str, pathlib.Path)]"
                ],
                "source_text_preprocessor": [
                    "preprocessor.text_preprocessor.TextPreprocessor"
                ],
                "target_path": [
                    "Union[(str, pathlib.Path)]"
                ],
                "target_text_preprocessor": [
                    "preprocessor.text_preprocessor.TextPreprocessor"
                ]
            }
        },
        "Seq2seqDataLoader.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src_path": [
                    "Union[(str, pathlib.Path)]"
                ],
                "src_preprocessor_path": [
                    "Union[(str, pathlib.Path)]"
                ],
                "tgt_path": [
                    "Union[(str, pathlib.Path)]"
                ],
                "tgt_preprocessor_path": [
                    "Union[(str, pathlib.Path)]"
                ],
                "batch_size": [
                    "int"
                ],
                "shuffle": [
                    "bool"
                ],
                "validation_split": [
                    "float"
                ],
                "num_workers": [
                    "int"
                ],
                "collate_fn": [
                    "Callable"
                ]
            }
        }
    },
    "pytorch_nmt-master/logger/logger.py": {
        "setup_logging": {
            "name": "setup_logging",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "save_dir": [
                    "str",
                    "pathlib.Path",
                    "None",
                    "Union[pathlib.Path, str]",
                    "Optional[pathlib.Path]"
                ],
                "log_config": [
                    "typing.Text",
                    "str",
                    "Union[str, pathlib.Path]",
                    "Optional[pathlib.Path]",
                    "Tuple[int, int]"
                ],
                "default_level": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "pytorch_nmt-master/logger/visualization.py": {
        "WriterTensorboardX.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_dir": [],
                "logger": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "enable": [
                    "bool",
                    "str",
                    "None",
                    "Optional[bool]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "WriterTensorboardX.set_step": {
            "name": "set_step",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "step": [
                    "int"
                ],
                "mode": [
                    "int",
                    "typing.Text"
                ]
            }
        },
        "WriterTensorboardX.__getattr__": {
            "name": "__getattr__",
            "location": 36,
            "return": [
                "str",
                "Dict[str, str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "WriterTensorboardX.__getattr__.wrapper": {
            "name": "wrapper",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tag": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "data": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "pytorch_nmt-master/logger/__init__.py": {},
    "pytorch_nmt-master/model/beam.py": {
        "Beam.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "Tuple[int]",
                    "int",
                    "tuple[int]"
                ]
            }
        },
        "Beam.getCurrentState": {
            "name": "getCurrentState",
            "location": 45,
            "return": [
                "tuple",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Beam.getCurrentOrigin": {
            "name": "getCurrentOrigin",
            "location": 49,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "List[str]",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Beam.advance": {
            "name": "advance",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "wordLk": [
                    "int",
                    "bytes",
                    "str"
                ],
                "attnOut": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Beam.sortBest": {
            "name": "sortBest",
            "location": 89,
            "return": [
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Beam.getBest": {
            "name": "getBest",
            "location": 93,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Beam.getHyp": {
            "name": "getHyp",
            "location": 107,
            "return": [
                "Tuple[(list, Any)]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "float",
                    "T",
                    "List[str]"
                ]
            }
        }
    },
    "pytorch_nmt-master/model/global_attention.py": {
        "GlobalAttention.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "bool",
                    "int"
                ]
            }
        },
        "GlobalAttention.applyMask": {
            "name": "applyMask",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mask": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "GlobalAttention.forward": {
            "name": "forward",
            "location": 39,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "List[str]",
                    "int",
                    "list[str]"
                ],
                "context": [
                    "bool"
                ]
            }
        }
    },
    "pytorch_nmt-master/model/loss.py": {
        "nll_loss": {
            "name": "nll_loss",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "output": [],
                "target": [
                    "str"
                ]
            }
        }
    },
    "pytorch_nmt-master/model/metric.py": {
        "my_metric": {
            "name": "my_metric",
            "location": 4,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "output": [
                    "str",
                    "bool",
                    "typing.IO",
                    "None",
                    "IO",
                    "Union[bool, str, None]",
                    "Optional[str]",
                    "int"
                ],
                "target": [
                    "int",
                    "List[str]",
                    "Sequence[float]",
                    "Optional[int]",
                    "list",
                    "List[int]"
                ]
            }
        },
        "my_metric2": {
            "name": "my_metric2",
            "location": 13,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "output": [
                    "bool",
                    "None",
                    "str",
                    "Optional['Block']",
                    "list[str]",
                    "Optional[List[str]]",
                    "int"
                ],
                "target": [
                    "List[str]",
                    "list",
                    "str",
                    "Sequence[Sequence[float]]",
                    "List[int]",
                    "Tuple[bool]"
                ],
                "k": [
                    "int",
                    "Optional[int]",
                    "bytes",
                    "torch.Tensor",
                    "str"
                ]
            }
        }
    },
    "pytorch_nmt-master/model/model.py": {
        "Encoder.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "emb_dim": [
                    "int"
                ],
                "vocab_size": [
                    "int"
                ],
                "hidden_dim": [
                    "int"
                ],
                "num_layers": [
                    "int"
                ],
                "brnn": [
                    "bool"
                ],
                "dropout_ratio": [
                    "float"
                ]
            }
        },
        "Encoder.load_embedding": {
            "name": "load_embedding",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "emb_path": [
                    "Union[(str, pathlib.Path)]"
                ]
            }
        },
        "Encoder.init_hidden_state": {
            "name": "init_hidden_state",
            "location": 77,
            "return": [
                "str",
                "torch.FloatTensor",
                "bool",
                "Optional[str]",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Encoder.forward": {
            "name": "forward",
            "location": 80,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "rnn_inputs": [
                    "str",
                    "torch.Tensor"
                ],
                "lengths": [
                    "List[int]"
                ],
                "hidden_states": [
                    "None"
                ]
            }
        },
        "StackedLSTM.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_layers": [
                    "int"
                ],
                "input_dim": [
                    "int"
                ],
                "hidden_dim": [
                    "int"
                ],
                "dropout_ratio": [
                    "float"
                ]
            }
        },
        "StackedLSTM.forward": {
            "name": "forward",
            "location": 138,
            "return": [
                "Tuple[(Any, Tuple[(Any, Any)])]"
            ],
            "arguments": {
                "self": [],
                "rnn_inputs": [
                    "None",
                    "torch.Tensor",
                    "dict[str, O]",
                    "Optional[torch.Tensor]",
                    "Dict[str, \"Outcome\"]"
                ],
                "hidden_states": [
                    "Tuple[(Any, Any)]"
                ]
            }
        },
        "Decoder.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "emb_dim": [
                    "int"
                ],
                "vocab_size": [
                    "int"
                ],
                "hidden_dim": [
                    "int"
                ],
                "num_layers": [
                    "int"
                ],
                "input_feed": [
                    "bool"
                ],
                "dropout_ratio": [
                    "float"
                ]
            }
        },
        "Decoder.load_embedding": {
            "name": "load_embedding",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "emb_path": [
                    "Union[(str, pathlib.Path)]"
                ]
            }
        },
        "Decoder.forward": {
            "name": "forward",
            "location": 207,
            "return": [
                "tuple[typing.Union[list[],int]]",
                "str",
                "Dict[str, Any]",
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "rnn_inputs": [
                    "list[str]",
                    "torch.Tensor",
                    "str",
                    "int",
                    "List[str]",
                    "typing.Sequence[str]",
                    "Sequence[str]"
                ],
                "hidden_state": [
                    "list[]",
                    "int",
                    "list",
                    "torch.Tensor",
                    "torch.tensor"
                ],
                "context": [
                    "int",
                    "raiden.utils.List[raiden.utils.FeeAmount]",
                    "tuple",
                    "Optional[float]"
                ],
                "init_output": [
                    "list[str]",
                    "torch.Tensor",
                    "str",
                    "int",
                    "List[str]",
                    "typing.Sequence[str]",
                    "Sequence[str]"
                ]
            }
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "emb_dim": [
                    "int"
                ],
                "in_vocab_size": [
                    "int"
                ],
                "out_vocab_size": [
                    "int"
                ],
                "hidden_dim": [
                    "int"
                ],
                "num_layers": [
                    "int"
                ],
                "dropout_ratio": [
                    "float"
                ],
                "brnn": [
                    "bool"
                ],
                "input_feed": [
                    "bool"
                ]
            }
        },
        "Model.make_init_decoder_output": {
            "name": "make_init_decoder_output",
            "location": 273,
            "return": [
                "str",
                "list",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "torch.Tensor",
                    "dict",
                    "bytes",
                    "Dict[str, torch.Tensor]"
                ]
            }
        },
        "Model._fix_enc_hidden": {
            "name": "_fix_enc_hidden",
            "location": 277,
            "return": [
                "Callable",
                "int",
                "dict",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "hidden_state": [
                    "torch.Tensor",
                    "allennlp.nn.decoding.decoder_state.DecoderState"
                ]
            }
        },
        "Model.forward": {
            "name": "forward",
            "location": 286,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "rnn_inputs": [],
                "targets": [
                    "float",
                    "bytes",
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "lengths": [
                    "List[int]"
                ]
            }
        }
    },
    "pytorch_nmt-master/model/optim.py": {
        "Optim.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "lr": [
                    "float"
                ],
                "max_grad_norm": [
                    "Optional[float]"
                ],
                "lr_decay": [
                    "int"
                ],
                "start_decay_at": [
                    "Optional[int]"
                ]
            }
        },
        "Optim.set_parameters": {
            "name": "set_parameters",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "list"
                ]
            }
        },
        "Optim.step": {
            "name": "step",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Optim.update_learning_rate": {
            "name": "update_learning_rate",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ppl": [
                    "float"
                ],
                "epoch": [
                    "int"
                ]
            }
        }
    },
    "pytorch_nmt-master/model/translator.py": {
        "Translator.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "model.model.Model"
                ],
                "src_preprocessor": [
                    "preprocessor.text_preprocessor.TextPreprocessor"
                ],
                "tgt_preprocessor": [
                    "preprocessor.text_preprocessor.TextPreprocessor"
                ],
                "replace_unk": [
                    "bool"
                ],
                "beam_width": [
                    "int"
                ],
                "n_best": [
                    "int"
                ],
                "max_length": [
                    "int"
                ]
            }
        },
        "Translator.buildTargetTokens": {
            "name": "buildTargetTokens",
            "location": 44,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "pred": [
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "Type[T]",
                    "None",
                    "Optional[str]",
                    "typing.Type"
                ],
                "src": [
                    "str",
                    "bool"
                ],
                "attn": [
                    "int",
                    "bool"
                ]
            }
        },
        "Translator.translateBatch": {
            "name": "translateBatch",
            "location": 53,
            "return": [
                "Tuple[(List[list], list, List[list], Any)]"
            ],
            "arguments": {
                "self": [],
                "src_batch": [
                    "torch.Tensor",
                    "str",
                    "int"
                ],
                "tgt_batch": [
                    "list[int]",
                    "str",
                    "Iterator[bytes]",
                    "List[int]"
                ],
                "lengths": [
                    "List[int]"
                ]
            }
        },
        "Translator.translate": {
            "name": "translate",
            "location": 188,
            "return": [
                "Tuple[(list, list, list)]"
            ],
            "arguments": {
                "self": [],
                "src_batch": [
                    "str",
                    "torch.Tensor",
                    "IO[bytes]",
                    "type",
                    "int"
                ],
                "tgt_batch": [
                    "str",
                    "int",
                    "bytes"
                ],
                "lengths": [
                    "List[int]"
                ],
                "indices": [
                    "List[int]"
                ]
            }
        },
        "Translator.translateBatch.applyContextMask": {
            "name": "applyContextMask",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "m": [
                    "Optional[List[float]]",
                    "torch.Tensor",
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "Translator.translateBatch.updateActive": {
            "name": "updateActive",
            "location": 147,
            "return": [
                "Optional[int]",
                "Dict[str, int]",
                "float",
                "Generator"
            ],
            "arguments": {
                "t": [
                    "int",
                    "Iterable[T]",
                    "Dict[str, Any]",
                    "Type"
                ]
            }
        }
    },
    "pytorch_nmt-master/model/__init__.py": {},
    "pytorch_nmt-master/preprocessor/text_preprocessor.py": {
        "TextPreprocessor.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token2index": [
                    "Mapping[(str, int)]"
                ],
                "index2token": [
                    "Mapping[(int, str)]"
                ],
                "embed_matrix": [
                    "Optional[np.ndarray]"
                ]
            }
        },
        "TextPreprocessor.embed_matrix": {
            "name": "embed_matrix",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextPreprocessor.vocab_size": {
            "name": "vocab_size",
            "location": 55,
            "return": [
                "str",
                "List[float]",
                "bool",
                "Set[str]",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextPreprocessor.create": {
            "name": "create",
            "location": 64,
            "return": [
                "extPreprocessor"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTextPreprocessor]"
                ],
                "text_list": [
                    "Sequence[str]"
                ],
                "max_vocab_size": [
                    "Optional[int]"
                ],
                "symbol_order": [
                    "Optional[str]"
                ],
                "train_embed_matrix": [
                    "bool"
                ],
                "dim_size": [
                    "int"
                ],
                "window_size": [
                    "int"
                ]
            }
        },
        "TextPreprocessor.load": {
            "name": "load",
            "location": 114,
            "return": [
                "extPreprocessor"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTextPreprocessor]"
                ],
                "path": [
                    "Union[(str, pathlib.Path)]"
                ]
            }
        },
        "TextPreprocessor.save": {
            "name": "save",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Union[(str, pathlib.Path)]"
                ]
            }
        },
        "TextPreprocessor.token2index": {
            "name": "token2index",
            "location": 144,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str"
                ]
            }
        },
        "TextPreprocessor.index2token": {
            "name": "index2token",
            "location": 153,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "TextPreprocessor.tokens2indice": {
            "name": "tokens2indice",
            "location": 162,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "List[str]"
                ],
                "sos": [
                    "bool"
                ],
                "eos": [
                    "bool"
                ]
            }
        },
        "TextPreprocessor.indice2tokens": {
            "name": "indice2tokens",
            "location": 179,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "indice": [
                    "List[int]"
                ],
                "stop_eos": [
                    "bool"
                ]
            }
        },
        "TextPreprocessor.create_embed_matrix": {
            "name": "create_embed_matrix",
            "location": 194,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "list[typing.Optional['Cell']]",
                    "List[Optional['Cell']]",
                    "list[str]",
                    "Iterable[Dict]",
                    "List[str]"
                ],
                "text_list": [
                    "Sequence[str]"
                ],
                "index2token": [
                    "Mapping[(int, str)]"
                ],
                "dim": [
                    "int"
                ],
                "window_size": [
                    "int"
                ],
                "seed": [
                    "int"
                ]
            }
        },
        "TextPreprocessor.fix_symbol_order": {
            "name": "fix_symbol_order",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbol_list": [
                    "List[str]"
                ]
            }
        }
    },
    "pytorch_nmt-master/preprocessor/__init__.py": {},
    "pytorch_nmt-master/trainer/trainer.py": {
        "Trainer.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "dict",
                    "dict[, ]",
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "loss": [
                    "dict",
                    "dict[, ]",
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "metrics": [
                    "list"
                ],
                "optimizer": [
                    "dict",
                    "dict[, ]",
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "config": [
                    "dict"
                ],
                "data_loader": [
                    "int",
                    "numpy.ndarray",
                    "float",
                    "str"
                ],
                "valid_data_loader": [
                    "dict",
                    "None",
                    "bytes",
                    "Dict[str, Any]",
                    "bool",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Trainer._eval_metrics": {
            "name": "_eval_metrics",
            "location": 48,
            "return": [
                "int",
                "str",
                "Callable",
                "typing.Collection"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "int",
                    "str",
                    "torch.Tensor"
                ],
                "target": [
                    "int",
                    "str",
                    "torch.Tensor"
                ]
            }
        },
        "Trainer._train_epoch": {
            "name": "_train_epoch",
            "location": 55,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "epoch": [
                    "int"
                ]
            }
        },
        "Trainer._valid_epoch": {
            "name": "_valid_epoch",
            "location": 120,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "epoch": [
                    "bool",
                    "List[List[int]]",
                    "torch.nn.Module",
                    "List[pathlib.Path]",
                    "bytes"
                ]
            }
        }
    },
    "pytorch_nmt-master/trainer/__init__.py": {},
    "pytorch_nmt-master/utils/util.py": {
        "ensure_dir": {
            "name": "ensure_dir",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "dirname": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "pathlib.Path"
                ]
            }
        },
        "read_json": {
            "name": "read_json",
            "location": 12,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "pathlib.Path",
                    "Union[str, IO[bytes]]"
                ]
            }
        },
        "write_json": {
            "name": "write_json",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "content": [
                    "str",
                    "Optional[Any]",
                    "dict",
                    "Dict[str, str]",
                    "list"
                ],
                "fname": [
                    "str",
                    "pathlib.Path",
                    "path.Path"
                ]
            }
        },
        "Timer.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.check": {
            "name": "check",
            "location": 24,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.reset": {
            "name": "reset",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pytorch_nmt-master/utils/__init__.py": {}
}
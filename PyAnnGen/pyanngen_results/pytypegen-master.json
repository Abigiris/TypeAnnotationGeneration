{
    "pytypegen-master/setup.py": {},
    "pytypegen-master/bin/fix_stubs.py": {
        "fix_stubs": {
            "name": "fix_stubs",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        }
    },
    "pytypegen-master/pytypegen/core.py": {
        "is_subclass": {
            "name": "is_subclass",
            "location": 63,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "Type"
                ],
                "cls": [
                    "int",
                    "str",
                    "Type"
                ]
            }
        },
        "is_field_required": {
            "name": "is_field_required",
            "location": 216,
            "return": [
                "bool"
            ],
            "arguments": {
                "field": [
                    "Tuple[List[str],List[Any],bool]",
                    "Callable[,None]",
                    "Tuple[Union[list[str],list[Any],bool]]",
                    "str",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,dict[str,str]]"
                ]
            }
        },
        "python_type_to_typescript": {
            "name": "python_type_to_typescript",
            "location": 233,
            "return": [
                "Text",
                "Type",
                "str",
                "int",
                "Dict[str,str]"
            ],
            "arguments": {
                "python_type": [
                    "Sequence[dict[str,Any]]",
                    "str",
                    "Sequence[Dict[str,Any]]",
                    "mypy_django_plugin.django.contexDjangoContext"
                ]
            }
        },
        "field_to_typescript": {
            "name": "field_to_typescript",
            "location": 263,
            "return": [
                "int",
                "bool",
                "sublime.View"
            ],
            "arguments": {
                "field": [
                    "Mapping",
                    "Sequence[F]",
                    "dataclasses.Field",
                    "rflx.model.Field",
                    "peewee.Field",
                    "Mapping[rflx.model.Field,rflx.model.Type]",
                    "Sequence[rflx.model.Field]"
                ]
            }
        },
        "contract_to_redux_action_creator": {
            "name": "contract_to_redux_action_creator",
            "location": 287,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "enum_to_typescript": {
            "name": "enum_to_typescript",
            "location": 299,
            "return": [
                "str"
            ],
            "arguments": {
                "enum_class": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "contracts_to_typescript": {
            "name": "contracts_to_typescript",
            "location": 304,
            "return": [
                "str"
            ],
            "arguments": {
                "contracts": [
                    "bytes",
                    "List[str]",
                    "str",
                    "int",
                    "IO"
                ]
            }
        },
        "JsonResponse.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "T",
                    "str",
                    "bytes",
                    "List[str]",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "InstructorView.get": {
            "name": "get",
            "location": 34,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str,str]",
                    "Dict",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "endpoint": [
                    "None",
                    "django.http.HttpRequest",
                    "Dict[str,str]",
                    "Dict",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "InstructorView.post": {
            "name": "post",
            "location": 37,
            "return": [
                "HttpResponse",
                "Dict[str,Any]",
                "JsonResponse",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "endpoint": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "Contract.asdict": {
            "name": "asdict",
            "location": 72,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Contract.get_fields": {
            "name": "get_fields",
            "location": 76,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "List[Dict]",
                    "List[dict]"
                ]
            }
        },
        "Contract.to_typescript_interface": {
            "name": "to_typescript_interface",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "dataclasses.Field"
                ]
            }
        },
        "Contract.load_from_dict": {
            "name": "load_from_dict",
            "location": 92,
            "return": [
                "Contract"
            ],
            "arguments": {
                "cls": [
                    "Type[_TContract]"
                ],
                "data": [
                    "dict",
                    "str",
                    "Callable[[Any], str]",
                    "Dict[str, Any]",
                    "Type[T]"
                ]
            }
        },
        "Operation.MERGE_APPEND": {
            "name": "MERGE_APPEND",
            "location": 133,
            "return": [
                "Operation"
            ],
            "arguments": {
                "cls": [
                    "Type[_TOperation]"
                ],
                "entity_type": [
                    "int",
                    "str",
                    "List[float]",
                    "schema.Field",
                    "None",
                    "Optional[int]"
                ],
                "target_value": [
                    "Dict[str,tuple[Union[int,int]]]",
                    "tortoise.fields.Field",
                    "str",
                    "Dict[str,Tuple[int,int]]",
                    "None",
                    "Optional",
                    "Iterable[Any]",
                    "Union[str,None]",
                    "Dict[str,Any]",
                    "Optional[Optional]"
                ]
            }
        },
        "Operation.MERGE_PREPEND": {
            "name": "MERGE_PREPEND",
            "location": 138,
            "return": [
                "Operation"
            ],
            "arguments": {
                "cls": [
                    "Type[_TOperation]"
                ],
                "entity_type": [
                    "int",
                    "str",
                    "List[float]",
                    "schema.Field",
                    "None",
                    "Optional[int]"
                ],
                "target_value": [
                    "Dict[str,tuple[Union[int,int]]]",
                    "tortoise.fields.Field",
                    "str",
                    "Dict[str,Tuple[int,int]]",
                    "None",
                    "Optional",
                    "Iterable[Any]",
                    "Union[str,None]",
                    "Dict[str,Any]",
                    "Optional[Optional]"
                ]
            }
        },
        "Operation.DELETE": {
            "name": "DELETE",
            "location": 143,
            "return": [
                "Operation"
            ],
            "arguments": {
                "cls": [
                    "Type[_TOperation]"
                ],
                "entity_type": [
                    "Type",
                    "str",
                    "schema.Field",
                    "Type[Any]"
                ],
                "target_value": [
                    "Type",
                    "str",
                    "schema.Field",
                    "Type[Any]"
                ]
            }
        },
        "Operation.OVERWRITE": {
            "name": "OVERWRITE",
            "location": 147,
            "return": [
                "Operation"
            ],
            "arguments": {
                "cls": [
                    "Type[_TOperation]"
                ],
                "entity_type": [
                    "str"
                ],
                "target_value": [
                    "str"
                ]
            }
        },
        "InstructionEncoder.default": {
            "name": "default",
            "location": 152,
            "return": [
                "str",
                "float",
                "bool",
                "Type"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Dict[str,float]",
                    "List[str]"
                ]
            }
        },
        "Instruction.serialize": {
            "name": "serialize",
            "location": 171,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestResolver.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Dict[str,float]",
                    "int"
                ],
                "data": [
                    "Dict",
                    "Dict[str,Any]",
                    "Mapping",
                    "List",
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "RequestResolver.clean_request_data": {
            "name": "clean_request_data",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestResolver.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "str",
                    "int"
                ]
            }
        },
        "RequestResolver.authenticate": {
            "name": "authenticate",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReduxAction.to_typescript_function": {
            "name": "to_typescript_function",
            "location": 277,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Contract.load_from_dict.convert_value": {
            "name": "convert_value",
            "location": 97,
            "return": [
                "List",
                "int",
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[str]",
                    "T",
                    "schema.Field"
                ],
                "value_type": [
                    "str",
                    "int",
                    "T"
                ]
            }
        }
    },
    "pytypegen-master/pytypegen/debugger.py": {
        "Debugger": {
            "name": "Debugger",
            "location": 1,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "pytypegen-master/pytypegen/exceptions.py": {},
    "pytypegen-master/pytypegen/pyty.py": {
        "get_type_class_by_name": {
            "name": "get_type_class_by_name",
            "location": 71,
            "return": [
                "Type[Union[(Array, Boolean, Decimal, Integer, String)]]"
            ],
            "arguments": {
                "type_name": [
                    "str",
                    "Type",
                    "dict"
                ]
            }
        },
        "parse_type": {
            "name": "parse_type",
            "location": 76,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "field_type_string": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "FieldType.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldType.to_dict": {
            "name": "to_dict",
            "location": 32,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Primitive.to_dict": {
            "name": "to_dict",
            "location": 37,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Composite.to_dict": {
            "name": "to_dict",
            "location": 42,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element_type_string": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Array.to_dict": {
            "name": "to_dict",
            "location": 67,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shape.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "int",
                    "Sequence[int]",
                    "bool"
                ],
                "fields": [
                    "int",
                    "str",
                    "Dict[str,Any]",
                    "AbstractSet[str]",
                    "Dict",
                    "AbstractSet",
                    "Set[str]",
                    "Container[str]",
                    "Container"
                ]
            }
        },
        "Shape.load_from_dict": {
            "name": "load_from_dict",
            "location": 90,
            "return": [
                "Shape"
            ],
            "arguments": {
                "cls": [
                    "Type[_TShape]"
                ],
                "identifier": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "[str]"
                ],
                "fields_dict": [
                    "Dict",
                    "Dict[str,float]",
                    "Dict[int,Dict[str,Any]]",
                    "Dict[int,dict[str,Any]]",
                    "Dict[str,bool]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]"
                ]
            }
        },
        "Shape.to_dict": {
            "name": "to_dict",
            "location": 107,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pytypegen-master/pytypegen/__init__.py": {},
    "pytypegen-master/pytypegen/contrib/contracts.py": {},
    "pytypegen-master/pytypegen/contrib/jwt_auth.py": {
        "authenticate_request": {
            "name": "authenticate_request",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "Union[dict,list]",
                    "Dict",
                    "Dict[str,Any]",
                    "django.http.HttpRequest",
                    "List"
                ]
            }
        },
        "authenticate_credentials": {
            "name": "authenticate_credentials",
            "location": 37,
            "return": [
                "str",
                "bool",
                "Set",
                "django.db.migrations.state.StateApps",
                "Mapping"
            ],
            "arguments": {
                "payload": [
                    "Dict",
                    "cirq.Operation",
                    "str"
                ]
            }
        },
        "jwt_decode_handler": {
            "name": "jwt_decode_handler",
            "location": 56,
            "return": [
                "str",
                "bool",
                "IO[str]",
                "int"
            ],
            "arguments": {
                "token": [
                    "Optional[Iterable[str]]",
                    "bool",
                    "Iterable[str]",
                    "None"
                ]
            }
        },
        "jwt_encode_handler": {
            "name": "jwt_encode_handler",
            "location": 71,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "payload": [
                    "str",
                    "Dict[str,str]",
                    "MutableMapping[str,Any]",
                    "MutableMapping"
                ]
            }
        },
        "jwt_payload_handler": {
            "name": "jwt_payload_handler",
            "location": 76,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "user": [
                    "str",
                    "Dict",
                    "None",
                    "int",
                    "Optional[datetime.datetime]",
                    "float",
                    "datetime.datetime"
                ]
            }
        },
        "AuthenticateUser.resolve": {
            "name": "resolve",
            "location": 100,
            "return": [
                "pytypegen.core.Instruction"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pytypegen-master/pytypegen/contrib/__init__.py": {},
    "pytypegen-master/tests/test_core.py": {
        "DataclassConverterTestCase.test_dataclass_converter": {
            "name": "test_dataclass_converter",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstructorTestCase.test_instruction_serialize": {
            "name": "test_instruction_serialize",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pytypegen-master/tests/test_instructor.py": {},
    "pytypegen-master/tests/test_pyty.py": {
        "PytyTestCase.test_pyty": {
            "name": "test_pyty",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PytyTestCase.test_parse_type": {
            "name": "test_parse_type",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pytypegen-master/tests/__init__.py": {},
    "pytypegen-master/tests/phony/manage.py": {},
    "pytypegen-master/tests/phony/casino/admin.py": {},
    "pytypegen-master/tests/phony/casino/apps.py": {},
    "pytypegen-master/tests/phony/casino/models.py": {},
    "pytypegen-master/tests/phony/casino/tests.py": {
        "LoginTestCase.POST": {
            "name": "POST",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Dict",
                    "Dict[str,Any]",
                    "str",
                    "Dict[str,str]"
                ],
                "data": [
                    "Dict",
                    "Dict[str,Any]",
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "LoginTestCase.test_missing_username": {
            "name": "test_missing_username",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoginTestCase.test_login_success": {
            "name": "test_login_success",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewTestCase.setUp": {
            "name": "setUp",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewTestCase.POST": {
            "name": "POST",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Dict",
                    "str",
                    "Dict[str,float]",
                    "bytes",
                    "Dict[str,Any]"
                ],
                "data": [
                    "Dict",
                    "str",
                    "Dict[str,float]",
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        },
        "ViewTestCase.test_not_authenticated": {
            "name": "test_not_authenticated",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewTestCase.test_return_http_response": {
            "name": "test_return_http_response",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewTestCase.test_return_instruction": {
            "name": "test_return_instruction",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pytypegen-master/tests/phony/casino/views.py": {
        "ReturnHttpResponse.resolve": {
            "name": "resolve",
            "location": 30,
            "return": [
                "HttpResponse",
                "List[str]",
                "Dict[str,Any]",
                "Dict[str,dict]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReturnInstruction.resolve": {
            "name": "resolve",
            "location": 37,
            "return": [
                "pytypegen.core.Instruction"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pytypegen-master/tests/phony/casino/__init__.py": {},
    "pytypegen-master/tests/phony/casino/migrations/__init__.py": {},
    "pytypegen-master/tests/phony/phony/settings.py": {},
    "pytypegen-master/tests/phony/phony/urls.py": {},
    "pytypegen-master/tests/phony/phony/wsgi.py": {},
    "pytypegen-master/tests/phony/phony/__init__.py": {}
}
{
    "pyveil-master/src/utils/logutils.py": {
        "setup_logger": {
            "name": "setup_logger",
            "location": 11,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "logger_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "file_name": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "log_to_stdout": [
                    "str",
                    "bool"
                ],
                "log_level": [
                    "int",
                    "Callable[[], float]",
                    "Optional[int]",
                    "str"
                ],
                "base_dir": [
                    "str",
                    "Text"
                ]
            }
        }
    },
    "pyveil-master/src/utils/miscutils.py": {
        "now_epoch_secs": {
            "name": "now_epoch_secs",
            "location": 11,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "now_epoch_msecs": {
            "name": "now_epoch_msecs",
            "location": 16,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "now_epoch_usecs": {
            "name": "now_epoch_usecs",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "epoch_secs_to_local_time_str": {
            "name": "epoch_secs_to_local_time_str",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "epoch_secs": [
                    "str",
                    "float",
                    "Dict",
                    "int"
                ]
            }
        },
        "epoch_msecs_to_local_time_str": {
            "name": "epoch_msecs_to_local_time_str",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "epoch_msecs": [
                    "str",
                    "float",
                    "Dict",
                    "int"
                ]
            }
        },
        "epoch_secs_to_local_datetime": {
            "name": "epoch_secs_to_local_datetime",
            "location": 36,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "epoch_secs": [
                    "float",
                    "str",
                    "Dict"
                ]
            }
        },
        "epoch_msecs_to_local_datetime": {
            "name": "epoch_msecs_to_local_datetime",
            "location": 41,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "epoch_msecs": [
                    "float",
                    "str",
                    "Dict"
                ]
            }
        },
        "try_": {
            "name": "try_",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[...,Awaitable[Any]]"
                ]
            }
        },
        "assert_like_integer": {
            "name": "assert_like_integer",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "float",
                    "bool",
                    "Union[int,float]"
                ]
            }
        },
        "paginate": {
            "name": "paginate",
            "location": 67,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "arr": [
                    "int"
                ],
                "page": [
                    "int",
                    "List[List[int]]",
                    "bool"
                ],
                "per_page": [
                    "int"
                ]
            }
        }
    },
    "pyveil-master/src/utils/web3utils.py": {
        "assert_valid_address": {
            "name": "assert_valid_address",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "address": [
                    "str",
                    "None",
                    "web3.contracContract",
                    "Optional[str]"
                ]
            }
        },
        "assert_valid_address_or_none": {
            "name": "assert_valid_address_or_none",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "address": [
                    "str",
                    "int",
                    "None",
                    "Iterable[T]",
                    "Optional[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "get_clean_address_or_throw": {
            "name": "get_clean_address_or_throw",
            "location": 52,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "address": [
                    "str",
                    "Union[str,int]",
                    "Union[str,Iterable[str]]"
                ]
            }
        },
        "get_hexstr_or_throw": {
            "name": "get_hexstr_or_throw",
            "location": 67,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "hexstr_like": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "to_wei": {
            "name": "to_wei",
            "location": 77,
            "return": [
                "int"
            ],
            "arguments": {
                "numlike": [
                    "str",
                    "int"
                ],
                "decimals": [
                    "int",
                    "float",
                    "str",
                    "Union[int,str]"
                ]
            }
        },
        "from_wei": {
            "name": "from_wei",
            "location": 98,
            "return": [
                "decimal.Decimal"
            ],
            "arguments": {
                "intlike": [
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "Optional[int]",
                    "None"
                ],
                "decimals": [
                    "int",
                    "Tuple[int,int]",
                    "Optional[int]"
                ]
            }
        },
        "TxParams.as_dict": {
            "name": "as_dict",
            "location": 143,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Web3Client.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network_id": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "List[dict]",
                    "Optional[str]",
                    "int"
                ],
                "web3_rpc_url": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "private_key": [
                    "List[int]",
                    "None",
                    "Sequence[int]",
                    "int",
                    "List[float]",
                    "Callable",
                    "List[dict]",
                    "bool"
                ]
            }
        },
        "Web3Client.__str__": {
            "name": "__str__",
            "location": 183,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Web3Client._str_arg_append": {
            "name": "_str_arg_append",
            "location": 194,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Web3Client.network_id": {
            "name": "network_id",
            "location": 199,
            "return": [
                "NetworkId",
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Web3Client.private_key": {
            "name": "private_key",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[hexbytes.HexBytes, str]",
                    "bytes",
                    "Union[str, bytes]",
                    "Mapping[str, Any]",
                    "attr.Attribute"
                ]
            }
        },
        "Web3Client.web3_provider": {
            "name": "web3_provider",
            "location": 224,
            "return": [
                "int",
                "str",
                "Callable",
                "Dict[Any,str]",
                "Dict[str,Union[dict,Any]]",
                "Dict[str,str]",
                "List[tuple[Union[str,str,Any]]]",
                "HTTPProvider"
            ],
            "arguments": {
                "self": []
            }
        },
        "Web3Client.web3_instance": {
            "name": "web3_instance",
            "location": 232,
            "return": [
                "int",
                "str",
                "Callable",
                "float",
                "Web3"
            ],
            "arguments": {
                "self": []
            }
        },
        "Web3Client.web3_eth": {
            "name": "web3_eth",
            "location": 242,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Web3Client.account": {
            "name": "account",
            "location": 251,
            "return": [
                "str",
                "Dict",
                "Match",
                "Exception",
                "None",
                "Dict[str,Any]",
                "Dict[str,Union[str,Set]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Web3Client.account_address": {
            "name": "account_address",
            "location": 271,
            "return": [
                "str",
                "set[]",
                "list[int]"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Web3Client.account_address_checksumed": {
            "name": "account_address_checksumed",
            "location": 282,
            "return": [
                "None",
                "Dict[str,Any]",
                "Dict[str,Dict[str,Any]]",
                "Exception",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Web3Client.sign_hash": {
            "name": "sign_hash",
            "location": 292,
            "return": [
                "str",
                "int",
                "bytes",
                "Dict[str,int]"
            ],
            "arguments": {
                "self": [],
                "hash_hex": [
                    "str",
                    "Dict"
                ]
            }
        },
        "Web3Client.get_eth_balance": {
            "name": "get_eth_balance",
            "location": 313,
            "return": [
                "decimal.Decimal"
            ],
            "arguments": {
                "self": []
            }
        },
        "Web3Client._invoke_function_call": {
            "name": "_invoke_function_call",
            "location": 322,
            "return": [
                "Iterable[Any]",
                "List[int]",
                "str",
                "List[list[Any]]",
                "List[tuple[Union[str,int]]]",
                "int",
                "List[tuple[Union[int,...]]]"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "tx_params": [
                    "type",
                    "Callable"
                ],
                "view_only": [
                    "bool",
                    "Callable"
                ]
            }
        },
        "Web3Client._validate_and_checksum_address": {
            "name": "_validate_and_checksum_address",
            "location": 353,
            "return": [
                "int",
                "List[str]",
                "dict",
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int"
                ]
            }
        }
    },
    "pyveil-master/src/utils/zeroexutils.py": {
        "ZxOrderInfo.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "zx_order_status": [
                    "int",
                    "float",
                    "List[str]",
                    "bool",
                    "Union[int,float]",
                    "Iterable"
                ],
                "order_hash": [
                    "int",
                    "None",
                    "str",
                    "raiden.utils.Secret",
                    "Optional[int]",
                    "bool"
                ],
                "order_taker_asset_filled_amount": [
                    "int",
                    "List[Tuple[str, str]]",
                    "List[str]",
                    "Callable[[int], bool]"
                ]
            }
        },
        "ZxOrderInfo.__str__": {
            "name": "__str__",
            "location": 144,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxSignedOrder.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxSignedOrder.__str__": {
            "name": "__str__",
            "location": 209,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxSignedOrder.hash": {
            "name": "hash",
            "location": 233,
            "return": [
                "None",
                "int",
                "Tuple[int,int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxSignedOrder.maker_address": {
            "name": "maker_address",
            "location": 245,
            "return": [
                "typing.Callable[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T",
                    "Union[None, int, float]",
                    "dict",
                    "Optional[int]",
                    "Union[None, float, int, str]",
                    "Optional[Union[str, Any]]",
                    "Optional[Tuple[Any, Any]]",
                    "bool"
                ]
            }
        },
        "ZxSignedOrder.taker_address": {
            "name": "taker_address",
            "location": 259,
            "return": [
                "typing.Callable[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T",
                    "Union[None, int, float]",
                    "dict",
                    "Optional[int]",
                    "Union[None, float, int, str]",
                    "Optional[Union[str, Any]]",
                    "Optional[Tuple[Any, Any]]",
                    "bool"
                ]
            }
        },
        "ZxSignedOrder.fee_recipient_address": {
            "name": "fee_recipient_address",
            "location": 273,
            "return": [
                "str",
                "list[int]",
                "float",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "T",
                    "Optional[str]",
                    "Optional[float]",
                    "Union[int, None]",
                    "Union[str, None]",
                    "VT",
                    "Iterator[T]"
                ]
            }
        },
        "ZxSignedOrder.sender_address": {
            "name": "sender_address",
            "location": 287,
            "return": [
                "typing.Callable[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T",
                    "Union[None, int, float]",
                    "dict",
                    "Optional[int]",
                    "Union[None, float, int, str]",
                    "Optional[Union[str, Any]]",
                    "Optional[Tuple[Any, Any]]",
                    "bool"
                ]
            }
        },
        "ZxSignedOrder.exchange_address": {
            "name": "exchange_address",
            "location": 301,
            "return": [
                "typing.Callable[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T",
                    "Union[None, int, float]",
                    "dict",
                    "Optional[int]",
                    "Union[None, float, int, str]",
                    "Optional[Union[str, Any]]",
                    "Optional[Tuple[Any, Any]]",
                    "bool"
                ]
            }
        },
        "ZxSignedOrder.maker_asset_amount": {
            "name": "maker_asset_amount",
            "location": 315,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "ZxSignedOrder.taker_asset_amount": {
            "name": "taker_asset_amount",
            "location": 332,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "ZxSignedOrder.maker_fee": {
            "name": "maker_fee",
            "location": 349,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[float, int]",
                    "bool",
                    "float"
                ]
            }
        },
        "ZxSignedOrder.taker_fee": {
            "name": "taker_fee",
            "location": 364,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[float, int]",
                    "bool",
                    "float"
                ]
            }
        },
        "ZxSignedOrder.salt": {
            "name": "salt",
            "location": 379,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "ZxSignedOrder.expiration_time": {
            "name": "expiration_time",
            "location": 389,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxSignedOrder.expiration_time_seconds": {
            "name": "expiration_time_seconds",
            "location": 399,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "cmk.utils.type_defs.Seconds",
                    "int"
                ]
            }
        },
        "ZxSignedOrder.maker_asset_data": {
            "name": "maker_asset_data",
            "location": 413,
            "return": [
                "int",
                "list[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "object",
                    "bytes",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "ZxSignedOrder.taker_asset_data": {
            "name": "taker_asset_data",
            "location": 427,
            "return": [
                "int",
                "list[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "object",
                    "bytes",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "ZxSignedOrder.signature": {
            "name": "signature",
            "location": 441,
            "return": [
                "int",
                "frozenset"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[Union[bool, int]]",
                    "raiden.utils.Address",
                    "raiden.utils.TokenAmount"
                ]
            }
        },
        "ZxSignedOrder.created_at_msecs": {
            "name": "created_at_msecs",
            "location": 446,
            "return": [
                "Tuple[int, int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxSignedOrder.created_at": {
            "name": "created_at",
            "location": 451,
            "return": [
                "str",
                "float",
                "Callable",
                "raiden.utils.TokenAmount"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxSignedOrder.bid_price": {
            "name": "bid_price",
            "location": 456,
            "return": [
                "int",
                "trezor.utils.Writer",
                "utils.Node",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxSignedOrder.ask_price": {
            "name": "ask_price",
            "location": 461,
            "return": [
                "int",
                "trezor.utils.Writer",
                "utils.Node",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxSignedOrder.sort_price": {
            "name": "sort_price",
            "location": 466,
            "return": [
                "Decimal",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxSignedOrder.update_hash": {
            "name": "update_hash",
            "location": 474,
            "return": [
                "ZxSignedOrder"
            ],
            "arguments": {
                "self": [
                    "_TZxSignedOrder@@ZxSignedOrder@@"
                ]
            }
        },
        "ZxSignedOrder.update": {
            "name": "update",
            "location": 479,
            "return": [
                "ZxSignedOrder"
            ],
            "arguments": {
                "self": [
                    "_TZxSignedOrder@@ZxSignedOrder@@"
                ]
            }
        },
        "ZxSignedOrder.update_bid_price": {
            "name": "update_bid_price",
            "location": 484,
            "return": [
                "ZxSignedOrder"
            ],
            "arguments": {
                "self": [
                    "_TZxSignedOrder@@ZxSignedOrder@@"
                ]
            }
        },
        "ZxSignedOrder.update_ask_price": {
            "name": "update_ask_price",
            "location": 495,
            "return": [
                "ZxSignedOrder"
            ],
            "arguments": {
                "self": [
                    "_TZxSignedOrder@@ZxSignedOrder@@"
                ]
            }
        },
        "ZxSignedOrder.set_bid_as_sort_price": {
            "name": "set_bid_as_sort_price",
            "location": 506,
            "return": [
                "ZxSignedOrder"
            ],
            "arguments": {
                "self": [
                    "_TZxSignedOrder@@ZxSignedOrder@@"
                ]
            }
        },
        "ZxSignedOrder.set_ask_as_sort_price": {
            "name": "set_ask_as_sort_price",
            "location": 513,
            "return": [
                "ZxSignedOrder"
            ],
            "arguments": {
                "self": [
                    "_TZxSignedOrder@@ZxSignedOrder@@"
                ]
            }
        },
        "ZxSignedOrder.to_json": {
            "name": "to_json",
            "location": 520,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "include_hash": [
                    "bool",
                    "int"
                ],
                "include_signature": [
                    "bool",
                    "int"
                ],
                "include_exchange_address": [
                    "str",
                    "None",
                    "bool",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ],
                "for_web3": [
                    "bool",
                    "int"
                ]
            }
        },
        "ZxSignedOrder.get_order_hash": {
            "name": "get_order_hash",
            "location": 590,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "Type[T]",
                    "Type"
                ],
                "order_json": [
                    "List[int]",
                    "str",
                    "int",
                    "Type[DataclassT]"
                ]
            }
        },
        "ZxSignedOrder.from_json": {
            "name": "from_json",
            "location": 632,
            "return": [
                "ZxSignedOrder"
            ],
            "arguments": {
                "cls": [
                    "Type[_TZxSignedOrder]"
                ],
                "order_json": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict[str,Any]]"
                ],
                "check_validity": [
                    "bool"
                ],
                "include_signature": [
                    "bool"
                ]
            }
        },
        "ZxWeb3Client.__init__": {
            "name": "__init__",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network_id": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "web3_rpc_url": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "private_key": [
                    "str",
                    "None",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "ZxWeb3Client.exchange_address_checksumed": {
            "name": "exchange_address_checksumed",
            "location": 709,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxWeb3Client.zx_exchange": {
            "name": "zx_exchange",
            "location": 714,
            "return": [
                "int",
                "frozenset",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxWeb3Client.sign_hash_zx_compat": {
            "name": "sign_hash_zx_compat",
            "location": 722,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "hash_hex": [
                    "str",
                    "int"
                ]
            }
        },
        "ZxWeb3Client.get_zx_signature_from_ec_signature": {
            "name": "get_zx_signature_from_ec_signature",
            "location": 735,
            "return": [
                "str"
            ],
            "arguments": {
                "ec_signature": [
                    "bytes",
                    "int"
                ]
            }
        },
        "ZxWeb3Client.cancel_zx_order": {
            "name": "cancel_zx_order",
            "location": 758,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "zx_signed_order": [
                    "str",
                    "Exception",
                    "int",
                    "Dict[str, Any]"
                ],
                "tx_params": [
                    "bool",
                    "None"
                ]
            }
        },
        "ZxWeb3Client.fill_zx_order": {
            "name": "fill_zx_order",
            "location": 778,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "zx_signed_order": [
                    "float",
                    "int"
                ],
                "taker_fill_amount": [
                    "int",
                    "Optional[int]",
                    "Sequence",
                    "Union[int, float]",
                    "List[str]"
                ],
                "base_unit_decimals": [
                    "int",
                    "Sequence",
                    "raiden.utils.TokenAmount"
                ],
                "tx_params": [
                    "bool",
                    "None",
                    "Dict[str,bool]",
                    "Optional[Callable]",
                    "Exception",
                    "Callable",
                    "Optional[int]"
                ]
            }
        }
    },
    "pyveil-master/src/utils/__init__.py": {},
    "pyveil-master/src/veil/constants.py": {},
    "pyveil-master/src/veil/veil_client.py": {
        "veil_price_to_eth": {
            "name": "veil_price_to_eth",
            "location": 36,
            "return": [
                "decimal.Decimal"
            ],
            "arguments": {
                "veil_price": [
                    "int"
                ],
                "num_ticks": [
                    "int",
                    "Optional[int]",
                    "float",
                    "None",
                    "Optional[float]",
                    "Optional[utils.types.Vec3D]"
                ]
            }
        },
        "eth_to_veil_price": {
            "name": "eth_to_veil_price",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "eth_price": [
                    "int",
                    "Tuple[Union[int,int]]",
                    "decimal.Decimal",
                    "Tuple[int,int]"
                ],
                "num_ticks": [
                    "int",
                    "Optional[int]",
                    "float",
                    "None",
                    "Optional[float]",
                    "Optional[utils.types.Vec3D]"
                ]
            }
        },
        "veil_shares_to_amount": {
            "name": "veil_shares_to_amount",
            "location": 60,
            "return": [
                "decimal.Decimal"
            ],
            "arguments": {
                "veil_shares": [
                    "int"
                ],
                "num_ticks": [
                    "int",
                    "float",
                    "Optional[int]",
                    "None",
                    "Union[int,None]",
                    "Optional[float]",
                    "Optional[utils.types.Vec3D]"
                ]
            }
        },
        "amount_to_veil_shares": {
            "name": "amount_to_veil_shares",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "amount": [
                    "int",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "num_ticks": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Union[int,None]"
                ]
            }
        },
        "dict_to_zx_order": {
            "name": "dict_to_zx_order",
            "location": 93,
            "return": [
                "utils.zeroexutils.ZxSignedOrder"
            ],
            "arguments": {
                "signed_order_dict": [
                    "str",
                    "Optional[str]",
                    "float",
                    "None",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "get_veil_zx_order_from_signed_order": {
            "name": "get_veil_zx_order_from_signed_order",
            "location": 98,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "signed_order": [
                    "str"
                ]
            }
        },
        "list_to_book_entries": {
            "name": "list_to_book_entries",
            "location": 164,
            "return": [
                "List[BookEntry]"
            ],
            "arguments": {
                "list_of_dicts": [
                    "str",
                    "List[str]",
                    "Dict[str,str]",
                    "Tuple[Union[str,str]]",
                    "Tuple[str,str]",
                    "bool"
                ]
            }
        },
        "optional_dict_to_order_fill": {
            "name": "optional_dict_to_order_fill",
            "location": 189,
            "return": [
                "Optional[OrderFill]"
            ],
            "arguments": {
                "order_dict": [
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "Optional[cmk.utils.diagnostics.DiagnosticsOptionalParameters]"
                ]
            }
        },
        "list_of_dicts_to_list_of_fills": {
            "name": "list_of_dicts_to_list_of_fills",
            "location": 196,
            "return": [
                "List[OrderFill]"
            ],
            "arguments": {
                "list_of_fills": [
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "optional_dict_to_order": {
            "name": "optional_dict_to_order",
            "location": 229,
            "return": [
                "Optional[Order]"
            ],
            "arguments": {
                "order_dict": [
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "Optional[cmk.utils.diagnostics.DiagnosticsOptionalParameters]"
                ]
            }
        },
        "list_of_dicts_to_orders": {
            "name": "list_of_dicts_to_orders",
            "location": 236,
            "return": [
                "List[Order]"
            ],
            "arguments": {
                "list_of_fills": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "optional_dict_to_market": {
            "name": "optional_dict_to_market",
            "location": 284,
            "return": [
                "Optional[Market]"
            ],
            "arguments": {
                "market_dict": [
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "Optional[cmk.utils.diagnostics.DiagnosticsOptionalParameters]"
                ]
            }
        },
        "entries_to_dataframe": {
            "name": "entries_to_dataframe",
            "location": 330,
            "return": [
                "str",
                "Set[str]",
                "int",
                "bool",
                "pandas.DataFrame"
            ],
            "arguments": {
                "entries": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str",
                    "cmk.utils.type_defs.HostAddress"
                ]
            }
        },
        "MarketBalances.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VeilClient.__init__": {
            "name": "__init__",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network_id": [
                    "str",
                    "int",
                    "None",
                    "bool",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "web3_rpc_url": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None"
                ],
                "private_key": [
                    "Optional[str]",
                    "None",
                    "int",
                    "str"
                ],
                "min_amount": [
                    "Decimal",
                    "str",
                    "Optional[bool]",
                    "List",
                    "Optional[str]",
                    "int",
                    "Optional[Callable[,bool]]"
                ],
                "max_amount": [
                    "Decimal",
                    "int",
                    "Callable[,float]",
                    "decimal.Decimal"
                ]
            }
        },
        "VeilClient._str_arg_append": {
            "name": "_str_arg_append",
            "location": 390,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VeilClient.session_info": {
            "name": "session_info",
            "location": 399,
            "return": [
                "int",
                "Dict[str, Any]",
                "dict",
                "bool",
                "Dict[str, Tuple[Any, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VeilClient.session_token": {
            "name": "session_token",
            "location": 415,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VeilClient.session_expiry": {
            "name": "session_expiry",
            "location": 420,
            "return": [
                "Dict[int, dict]",
                "Optional[datetime.datetime]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "VeilClient.veil_account": {
            "name": "veil_account",
            "location": 425,
            "return": [
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "VeilClient._authenticate": {
            "name": "_authenticate",
            "location": 429,
            "return": [
                "VeilClient"
            ],
            "arguments": {
                "self": [
                    "_TVeilClient@@VeilClient@@"
                ],
                "force": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "VeilClient.get_session_challenge": {
            "name": "get_session_challenge",
            "location": 457,
            "return": [
                "str",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VeilClient.get_markets": {
            "name": "get_markets",
            "location": 466,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str",
                    "int",
                    "None",
                    "Dict[str,Any]"
                ],
                "status": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "page": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "per_page": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "force_refresh": [
                    "bool",
                    "bytes",
                    "str"
                ],
                "raw_json": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Dict[str,str]"
                ]
            }
        },
        "VeilClient.get_market": {
            "name": "get_market",
            "location": 520,
            "return": [
                "bool",
                "List[str]",
                "str",
                "Tuple[Union[Any,Any]]",
                "Dict",
                "Market"
            ],
            "arguments": {
                "self": [],
                "market_slug": [
                    "str",
                    "int",
                    "Union[str,Tuple[str,...]]",
                    "Tuple[Union[str,...]]"
                ],
                "force_refresh": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "raw_json": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "VeilClient.get_feed_data": {
            "name": "get_feed_data",
            "location": 554,
            "return": [
                "List[str]",
                "Dict",
                "Tuple[Union[Any,Any]]",
                "IO[bytes]",
                "DataFeed",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "feed_name": [
                    "str",
                    "Sequence[str]",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ],
                "scope": [
                    "Text",
                    "str",
                    "Optional[Dict]",
                    "Sequence[str]"
                ],
                "raw_json": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "VeilClient.get_bids": {
            "name": "get_bids",
            "location": 580,
            "return": [
                "Union[(SideBook, list)]"
            ],
            "arguments": {
                "self": [],
                "market_slug": [
                    "Optional[int]",
                    "int",
                    "str",
                    "None",
                    "bool"
                ],
                "token_type": [
                    "str",
                    "Type"
                ],
                "page": [
                    "Optional[int]",
                    "None",
                    "str",
                    "int",
                    "bool"
                ],
                "per_page": [
                    "Optional[int]",
                    "None",
                    "str",
                    "int",
                    "bool"
                ],
                "raw_json": [
                    "bool",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "VeilClient.get_asks": {
            "name": "get_asks",
            "location": 623,
            "return": [
                "Union[(SideBook, list)]"
            ],
            "arguments": {
                "self": [],
                "market_slug": [
                    "Optional[int]",
                    "int",
                    "str",
                    "None",
                    "bool"
                ],
                "token_type": [
                    "str",
                    "Type"
                ],
                "page": [
                    "Optional[int]",
                    "None",
                    "str",
                    "int",
                    "bool"
                ],
                "per_page": [
                    "Optional[int]",
                    "None",
                    "str",
                    "int",
                    "bool"
                ],
                "raw_json": [
                    "bool",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "VeilClient.get_order_fills": {
            "name": "get_order_fills",
            "location": 666,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "market_slug": [
                    "Optional[int]",
                    "int",
                    "str",
                    "None",
                    "bool"
                ],
                "token_type": [
                    "str",
                    "Type"
                ],
                "page": [
                    "Optional[int]",
                    "None",
                    "str",
                    "int",
                    "bool"
                ],
                "per_page": [
                    "Optional[int]",
                    "None",
                    "str",
                    "int",
                    "bool"
                ],
                "raw_json": [
                    "bool",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "VeilClient.post_order": {
            "name": "post_order",
            "location": 709,
            "return": [
                "bool",
                "Tuple[int]",
                "Sequence[Sequence[str]]",
                "Dict[str, Any]",
                "Optional[str]",
                "raiden.utils.List[raiden.utils.TokenAddress]"
            ],
            "arguments": {
                "self": [],
                "market": [
                    "bool",
                    "str"
                ],
                "token_type": [
                    "bool",
                    "str"
                ],
                "side": [
                    "bool",
                    "str"
                ],
                "amount": [
                    "bool",
                    "str"
                ],
                "price": [
                    "bool",
                    "str"
                ],
                "order_price_type": [
                    "bool",
                    "str"
                ],
                "raw_json": [
                    "bool",
                    "int",
                    "Dict[str,Any]",
                    "float"
                ]
            }
        },
        "VeilClient._post_order": {
            "name": "_post_order",
            "location": 752,
            "return": [
                "str",
                "Order",
                "bool",
                "Tuple[int,int]",
                "Optional[str]",
                "Union[int,float,complex]"
            ],
            "arguments": {
                "self": [],
                "quote_id": [
                    "str",
                    "int",
                    "None",
                    "utils.zeroexutils.ZxSignedOrder",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "signed_order": [
                    "str",
                    "int",
                    "None",
                    "utils.zeroexutils.ZxSignedOrder",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "raw_json": [
                    "bool",
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "VeilClient._get_quote": {
            "name": "_get_quote",
            "location": 787,
            "return": [
                "QuoteResponse",
                "Optional[Dict[str,Any]]",
                "bool",
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "market": [
                    "int",
                    "Optional[str]",
                    "str",
                    "float",
                    "decimal.Decimal",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "token_type": [
                    "bool",
                    "int"
                ],
                "side": [
                    "Optional[List[int]]",
                    "List[int]",
                    "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex",
                    "str",
                    "None",
                    "Optional[float]",
                    "float"
                ],
                "amount": [
                    "int",
                    "List[str]",
                    "str",
                    "decimal.Decimal",
                    "datetime.datetime",
                    "bool"
                ],
                "price": [
                    "str",
                    "bool",
                    "decimal.Decimal",
                    "float",
                    "pandas.DataFrame",
                    "int"
                ],
                "order_price_type": [
                    "Optional[int]",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "raw_json": [
                    "bool",
                    "Type",
                    "str"
                ]
            }
        },
        "VeilClient.get_orders": {
            "name": "get_orders",
            "location": 858,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "market_slug": [
                    "str",
                    "int",
                    "bool"
                ],
                "order_status": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "page": [
                    "str",
                    "None",
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "bool"
                ],
                "per_page": [
                    "str",
                    "None",
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "bool"
                ],
                "raw_json": [
                    "bool",
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "VeilClient.cancel_order": {
            "name": "cancel_order",
            "location": 905,
            "return": [
                "str",
                "List[int]",
                "Order",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "str"
                ],
                "raw_json": [
                    "bool",
                    "int",
                    "str",
                    "Optional[float]",
                    "List",
                    "bytes"
                ]
            }
        },
        "VeilClient.get_balances": {
            "name": "get_balances",
            "location": 930,
            "return": [
                "List",
                "str",
                "Tuple[Union[Literal,Literal,Literal,Literal,Literal,Literal]]",
                "bool",
                "MarketBalances",
                "List[List[str]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "market_slug": [
                    "str",
                    "Type[Any]",
                    "Type"
                ],
                "raw_json": [
                    "bool",
                    "str",
                    "Dict",
                    "Optional[str]"
                ]
            }
        },
        "VeilClient._request": {
            "name": "_request",
            "location": 959,
            "return": [
                "Dict[str, Any]",
                "List[str]",
                "Dict[int, Dict[int, Any]]",
                "Dict[str, str]",
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "url": [
                    "str",
                    "int",
                    "Dict"
                ],
                "params": [
                    "None",
                    "Optional[Dict]",
                    "bool",
                    "Dict",
                    "str",
                    "int",
                    "Optional[dict]"
                ],
                "requires_session": [
                    "bool",
                    "Optional[str]"
                ],
                "raise_on_error": [
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "VeilClient._request_paginated": {
            "name": "_request_paginated",
            "location": 1020,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Dict[str,str]",
                    "int"
                ],
                "url": [
                    "str",
                    "Dict[str,str]",
                    "int"
                ],
                "params": [
                    "Optional[Dict]",
                    "None",
                    "str",
                    "Dict",
                    "Optional[dict]",
                    "Exception",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "Optional[IO[bytes]]",
                    "IO"
                ],
                "page": [
                    "int",
                    "float",
                    "Optional[int]",
                    "Optional[Sequence[int]]"
                ],
                "per_page": [
                    "Optional[int]",
                    "None",
                    "str",
                    "List[str]",
                    "int",
                    "bool"
                ],
                "requires_session": [
                    "bool",
                    "str",
                    "Dict[str,str]",
                    "int"
                ],
                "raise_on_error": [
                    "bool",
                    "str",
                    "Dict[str,str]",
                    "int"
                ],
                "raw_json": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "pyveil-master/src/veil/__init__.py": {},
    "pyveil-master/tests/conftest.py": {},
    "pyveil-master/tests/__init__.py": {}
}